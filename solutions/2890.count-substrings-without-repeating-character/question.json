{"question_id": "2890", "problem_slug": "count-substrings-without-repeating-character", "problem_title": "Count Substrings Without Repeating Character", "content": "You are given a string s consisting only of lowercase English letters. We call a substring special if it contains no character which has occurred at least twice (in other words, it does not contain a repeating character). Your task is to count the number of special substrings. For example, in the string \"pop\", the substring \"po\" is a special substring, however, \"pop\" is not special (since 'p' has occurred twice).\nReturn the number of special substrings.\nA substring is a contiguous sequence of characters within a string. For example, \"abc\" is a substring of \"abcd\", but \"acd\" is not.\n \nExample 1:\n\nInput: s = \"abcd\"\nOutput: 10\nExplanation: Since each character occurs once, every substring is a special substring. We have 4 substrings of length one, 3 of length two, 2 of length three, and 1 substring of length four. So overall there are 4 + 3 + 2 + 1 = 10 special substrings.\n\nExample 2:\n\nInput: s = \"ooo\"\nOutput: 3\nExplanation: Any substring with a length of at least two contains a repeating character. So we have to count the number of substrings of length one, which is 3.\n\nExample 3:\n\nInput: s = \"abab\"\nOutput: 7\nExplanation: Special substrings are as follows (sorted by their start positions):\nSpecial substrings of length 1: \"a\", \"b\", \"a\", \"b\"\nSpecial substrings of length 2: \"ab\", \"ba\", \"ab\"\nAnd it can be shown that there are no special substrings with a length of at least three. So the answer would be 4 + 3 = 7.\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters\n\n", "hints": [], "exampleTestcases": "\"abcd\"\n\"ooo\"\n\"abab\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfSpecialSubstrings(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfSpecialSubstrings(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfSpecialSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfSpecialSubstrings(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfSpecialSubstrings(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfSpecialSubstrings(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfSpecialSubstrings = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfSpecialSubstrings(s: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numberOfSpecialSubstrings($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfSpecialSubstrings(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfSpecialSubstrings(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfSpecialSubstrings(String s) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfSpecialSubstrings(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef number_of_special_substrings(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfSpecialSubstrings(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_special_substrings(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-special-substrings s)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_special_substrings(S :: unicode:unicode_binary()) -> integer().\nnumber_of_special_substrings(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_special_substrings(s :: String.t) :: integer\n  def number_of_special_substrings(s) do\n    \n  end\nend"}}}