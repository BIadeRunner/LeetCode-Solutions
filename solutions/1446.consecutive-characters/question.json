{"questionId": "1542", "acRate": 60.237106647066206, "difficulty": "Easy", "freqBar": 25.648427326285585, "frontendQuestionId": "1446", "paidOnly": false, "status": "ac", "title": "Consecutive Characters", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "consecutive-characters", "content": "<p>The <strong>power</strong> of the string is the maximum length of a non-empty substring that contains only one unique character.</p>\n\n<p>Given a string <code>s</code>, return <em>the <strong>power</strong> of</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The substring &quot;ee&quot; is of length 2 with the character &#39;e&#39; only.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbcccddddeeeeedcba&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The substring &quot;eeeee&quot; is of length 5 with the character &#39;e&#39; only.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": ["Keep an array power where power[i] is the maximum power of the i-th character.", "The answer is max(power[i])."], "exampleTestcases": "\"leetcode\"\n\"abbcccddddeeeeedcba\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxPower(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxPower(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxPower(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxPower(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxPower(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxPower(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxPower(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxPower($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxPower(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxPower(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxPower(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxPower(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef max_power(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxPower(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_power(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-power s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_power(S :: unicode:unicode_binary()) -> integer().\nmax_power(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_power(s :: String.t) :: integer\n  def max_power(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "max-consecutive-ones", "title": "Max Consecutive Ones", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-if-an-array-is-consecutive", "title": "Check if an Array Is Consecutive", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "count-number-of-homogenous-substrings", "title": "Count Number of Homogenous Substrings", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "minimum-number-of-chairs-in-a-waiting-room", "title": "Minimum Number of Chairs in a Waiting Room", "isPaidOnly": false}]}