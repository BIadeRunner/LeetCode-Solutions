{"question_id": "1199", "problem_slug": "hexspeak", "problem_title": "Hexspeak", "content": "A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit '0' with the letter 'O', and the digit '1' with the letter 'I'. Such a representation is valid if and only if it consists only of the letters in the set {'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}.\nGiven a string num representing a decimal integer n, return the Hexspeak representation of n if it is valid, otherwise return \"ERROR\".\n \nExample 1:\n\nInput: num = \"257\"\nOutput: \"IOI\"\nExplanation: 257 is 101 in hexadecimal.\n\nExample 2:\n\nInput: num = \"3\"\nOutput: \"ERROR\"\n\n \nConstraints:\n\n1 <= num.length <= 12\nnum does not contain leading zeros.\nnum represents an integer in the range [1, 1012].\n\n", "hints": ["Convert the given number to hexadecimal.", "Replace all 0 and 1 with 'O' and 'I'.", "Check if the final string has any numerical digits."], "exampleTestcases": "\"257\"\n\"3\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string toHexspeak(string num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String toHexspeak(String num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def toHexspeak(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def toHexspeak(self, num: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* toHexspeak(char* num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ToHexspeak(string num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {string}\n */\nvar toHexspeak = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function toHexspeak(num: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function toHexspeak($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func toHexspeak(_ num: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun toHexspeak(num: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String toHexspeak(String num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func toHexspeak(num string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num\n# @return {String}\ndef to_hexspeak(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def toHexspeak(num: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn to_hexspeak(num: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (to-hexspeak num)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec to_hexspeak(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nto_hexspeak(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec to_hexspeak(num :: String.t) :: String.t\n  def to_hexspeak(num) do\n    \n  end\nend"}}}