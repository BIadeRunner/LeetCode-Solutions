{"question_id": "1244", "problem_slug": "distinct-echo-substrings", "problem_title": "Distinct Echo Substrings", "content": "Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).\n \nExample 1:\n\nInput: text = \"abcabcabc\"\nOutput: 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".\n\nExample 2:\n\nInput: text = \"leetcodeleetcode\"\nOutput: 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".\n\n \nConstraints:\n\n1 <= text.length <= 2000\ntext has only lowercase English letters.\n\n", "hints": ["Given a substring of the text, how to check if it can be written as the concatenation of a string with itself ?", "We can do that in linear time, a faster way is to use hashing.", "Try all substrings and use hashing to check them."], "exampleTestcases": "\"abcabcabc\"\n\"leetcodeleetcode\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int distinctEchoSubstrings(string text) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int distinctEchoSubstrings(String text) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def distinctEchoSubstrings(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def distinctEchoSubstrings(self, text: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int distinctEchoSubstrings(char* text) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DistinctEchoSubstrings(string text) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {number}\n */\nvar distinctEchoSubstrings = function(text) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function distinctEchoSubstrings(text: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return Integer\n     */\n    function distinctEchoSubstrings($text) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func distinctEchoSubstrings(_ text: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun distinctEchoSubstrings(text: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int distinctEchoSubstrings(String text) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func distinctEchoSubstrings(text string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} text\n# @return {Integer}\ndef distinct_echo_substrings(text)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def distinctEchoSubstrings(text: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn distinct_echo_substrings(text: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (distinct-echo-substrings text)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec distinct_echo_substrings(Text :: unicode:unicode_binary()) -> integer().\ndistinct_echo_substrings(Text) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec distinct_echo_substrings(text :: String.t) :: integer\n  def distinct_echo_substrings(text) do\n    \n  end\nend"}}}