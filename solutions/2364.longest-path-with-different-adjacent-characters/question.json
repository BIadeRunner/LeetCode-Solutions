{"question_id": "2364", "problem_slug": "longest-path-with-different-adjacent-characters", "problem_title": "Longest Path With Different Adjacent Characters", "content": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nReturn the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.\n \nExample 1:\n\n\nInput: parent = [-1,0,0,1,1,2], s = \"abacbe\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n\nExample 2:\n\n\nInput: parent = [-1,0,0,0], s = \"aabc\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n\n \nConstraints:\n\nn == parent.length == s.length\n1 <= n <= 105\n0 <= parent[i] <= n - 1 for all i >= 1\nparent[0] == -1\nparent represents a valid tree.\ns consists of only lowercase English letters.\n\n", "hints": ["Do a DFS from the root. At each node, calculate the longest path we can make from two branches of that subtree.", "To do that, we need to find the length of the longest path from each of the node’s children."], "exampleTestcases": "[-1,0,0,1,1,2]\n\"abacbe\"\n[-1,0,0,0]\n\"aabc\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPath(vector<int>& parent, string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestPath(int[] parent, String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestPath(self, parent, s):\n        \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestPath(int* parent, int parentSize, char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestPath(int[] parent, string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} parent\n * @param {string} s\n * @return {number}\n */\nvar longestPath = function(parent, s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestPath(parent: number[], s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $parent\n     * @param String $s\n     * @return Integer\n     */\n    function longestPath($parent, $s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestPath(_ parent: [Int], _ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestPath(parent: IntArray, s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestPath(List<int> parent, String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestPath(parent []int, s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} parent\n# @param {String} s\n# @return {Integer}\ndef longest_path(parent, s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestPath(parent: Array[Int], s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_path(parent: Vec<i32>, s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-path parent s)\n  (-> (listof exact-integer?) string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_path(Parent :: [integer()], S :: unicode:unicode_binary()) -> integer().\nlongest_path(Parent, S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_path(parent :: [integer], s :: String.t) :: integer\n  def longest_path(parent, s) do\n    \n  end\nend"}}}