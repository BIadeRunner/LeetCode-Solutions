{"question_id": "552", "problem_slug": "student-attendance-record-ii", "problem_title": "Student Attendance Record II", "content": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n'A': Absent.\n'L': Late.\n'P': Present.\n\nAny student is eligible for an attendance award if they meet both of the following criteria:\n\nThe student was absent ('A') for strictly fewer than 2 days total.\nThe student was never late ('L') for 3 or more consecutive days.\n\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 2\nOutput: 8\nExplanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\n\nExample 2:\n\nInput: n = 1\nOutput: 3\n\nExample 3:\n\nInput: n = 10101\nOutput: 183236316\n\n \nConstraints:\n\n1 <= n <= 105\n\n", "hints": [], "exampleTestcases": "2\n1\n10101", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int checkRecord(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int checkRecord(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int checkRecord(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CheckRecord(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar checkRecord = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkRecord(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function checkRecord($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkRecord(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkRecord(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int checkRecord(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkRecord(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef check_record(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkRecord(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_record(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-record n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_record(N :: integer()) -> integer().\ncheck_record(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_record(n :: integer) :: integer\n  def check_record(n) do\n    \n  end\nend"}}}