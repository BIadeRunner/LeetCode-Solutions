{"question_id": "2645", "problem_slug": "pass-the-pillow", "problem_title": "Pass the Pillow", "content": "There are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\nFor example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on.\n\nGiven the two positive integers n and time, return the index of the person holding the pillow after time seconds.\n \nExample 1:\n\nInput: n = 4, time = 5\nOutput: 2\nExplanation: People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfter five seconds, the 2nd person is holding the pillow.\n\nExample 2:\n\nInput: n = 3, time = 2\nOutput: 3\nExplanation: People pass the pillow in the following way: 1 -> 2 -> 3.\nAfter two seconds, the 3rd person is holding the pillow.\n\n \nConstraints:\n\n2 <= n <= 1000\n1 <= time <= 1000\n\n \nNote: This question is the same as  3178: Find the Child Who Has the Ball After K Seconds.\n", "hints": ["Maintain two integer variables, direction and i, where direction denotes the current direction in which the pillow should pass, and i denotes an index of the person holding the pillow.", "While time is positive, update the current index with the current direction. If the index reaches the end of the line, multiply direction by - 1."], "exampleTestcases": "4\n5\n3\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int passThePillow(int n, int time) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int passThePillow(int n, int time) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def passThePillow(self, n, time):\n        \"\"\"\n        :type n: int\n        :type time: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def passThePillow(self, n: int, time: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int passThePillow(int n, int time) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PassThePillow(int n, int time) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} time\n * @return {number}\n */\nvar passThePillow = function(n, time) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function passThePillow(n: number, time: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $time\n     * @return Integer\n     */\n    function passThePillow($n, $time) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func passThePillow(_ n: Int, _ time: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun passThePillow(n: Int, time: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int passThePillow(int n, int time) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func passThePillow(n int, time int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} time\n# @return {Integer}\ndef pass_the_pillow(n, time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def passThePillow(n: Int, time: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn pass_the_pillow(n: i32, time: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (pass-the-pillow n time)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec pass_the_pillow(N :: integer(), Time :: integer()) -> integer().\npass_the_pillow(N, Time) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec pass_the_pillow(n :: integer, time :: integer) :: integer\n  def pass_the_pillow(n, time) do\n    \n  end\nend"}}}