{"questionId": "951", "acRate": 48.80031070267924, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "915", "paidOnly": false, "status": "ac", "title": "Partition Array into Disjoint Intervals", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "partition-array-into-disjoint-intervals", "content": "<p>Given an integer array <code>nums</code>, partition it into two (contiguous) subarrays <code>left</code> and <code>right</code> so that:</p>\n\n<ul>\n\t<li>Every element in <code>left</code> is less than or equal to every element in <code>right</code>.</li>\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\n\t<li><code>left</code> has the smallest possible size.</li>\n</ul>\n\n<p>Return <em>the length of </em><code>left</code><em> after such a partitioning</em>.</p>\n\n<p>Test cases are generated such that partitioning exists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,0,3,8,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> left = [5,0,3], right = [8,6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,0,6,12]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> left = [1,1,1,0], right = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>There is at least one valid answer for the given input.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[5,0,3,8,6]\n[1,1,1,0,6,12]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int partitionDisjoint(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int partitionDisjoint(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def partitionDisjoint(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def partitionDisjoint(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int partitionDisjoint(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PartitionDisjoint(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar partitionDisjoint = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function partitionDisjoint(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function partitionDisjoint($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func partitionDisjoint(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun partitionDisjoint(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int partitionDisjoint(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func partitionDisjoint(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef partition_disjoint(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def partitionDisjoint(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn partition_disjoint(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (partition-disjoint nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec partition_disjoint(Nums :: [integer()]) -> integer().\npartition_disjoint(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec partition_disjoint(nums :: [integer]) :: integer\n  def partition_disjoint(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "sum-of-beauty-in-the-array", "title": "Sum of Beauty in the Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "optimal-partition-of-string", "title": "Optimal Partition of String", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-index-of-a-valid-split", "title": "Minimum Index of a Valid Split", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-strength-of-k-disjoint-subarrays", "title": "Maximum Strength of K Disjoint Subarrays", "isPaidOnly": false}]}