{"question_id": "951", "problem_slug": "partition-array-into-disjoint-intervals", "problem_title": "Partition Array into Disjoint Intervals", "content": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\n\nEvery element in left is less than or equal to every element in right.\nleft and right are non-empty.\nleft has the smallest possible size.\n\nReturn the length of left after such a partitioning.\nTest cases are generated such that partitioning exists.\n \nExample 1:\n\nInput: nums = [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]\n\nExample 2:\n\nInput: nums = [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]\n\n \nConstraints:\n\n2 <= nums.length <= 105\n0 <= nums[i] <= 106\nThere is at least one valid answer for the given input.\n\n", "hints": [], "exampleTestcases": "[5,0,3,8,6]\n[1,1,1,0,6,12]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int partitionDisjoint(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int partitionDisjoint(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def partitionDisjoint(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def partitionDisjoint(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int partitionDisjoint(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PartitionDisjoint(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar partitionDisjoint = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function partitionDisjoint(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function partitionDisjoint($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func partitionDisjoint(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun partitionDisjoint(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int partitionDisjoint(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func partitionDisjoint(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef partition_disjoint(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def partitionDisjoint(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn partition_disjoint(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (partition-disjoint nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec partition_disjoint(Nums :: [integer()]) -> integer().\npartition_disjoint(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec partition_disjoint(nums :: [integer]) :: integer\n  def partition_disjoint(nums) do\n    \n  end\nend"}}}