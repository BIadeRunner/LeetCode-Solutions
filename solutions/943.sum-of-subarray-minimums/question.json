{"question_id": "943", "problem_slug": "sum-of-subarray-minimums", "problem_title": "Sum of Subarray Minimums", "content": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n \nExample 1:\n\nInput: arr = [3,1,2,4]\nOutput: 17\nExplanation: \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n\nExample 2:\n\nInput: arr = [11,81,94,43,3]\nOutput: 444\n\n \nConstraints:\n\n1 <= arr.length <= 3 * 104\n1 <= arr[i] <= 3 * 104\n\n", "hints": [], "exampleTestcases": "[3,1,2,4]\n[11,81,94,43,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumSubarrayMins(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumSubarrayMins(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumSubarrayMins(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumSubarrayMins(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar sumSubarrayMins = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumSubarrayMins(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function sumSubarrayMins($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumSubarrayMins(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumSubarrayMins(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumSubarrayMins(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumSubarrayMins(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef sum_subarray_mins(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumSubarrayMins(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_subarray_mins(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-subarray-mins arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_subarray_mins(Arr :: [integer()]) -> integer().\nsum_subarray_mins(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_subarray_mins(arr :: [integer]) :: integer\n  def sum_subarray_mins(arr) do\n    \n  end\nend"}}}