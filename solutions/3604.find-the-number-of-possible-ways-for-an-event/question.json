{"question_id": "3604", "problem_slug": "find-the-number-of-possible-ways-for-an-event", "problem_title": "Find the Number of Possible Ways for an Event", "content": "You are given three integers n, x, and y.\nAn event is being held for n performers. When a performer arrives, they are assigned to one of the x stages. All performers assigned to the same stage will perform together as a band, though some stages might remain empty.\nAfter all performances are completed, the jury will award each band a score in the range [1, y].\nReturn the total number of possible ways the event can take place.\nSince the answer may be very large, return it modulo 109 + 7.\nNote that two events are considered to have been held differently if either of the following conditions is satisfied:\n\nAny performer is assigned a different stage.\nAny band is awarded a different score.\n\n \nExample 1:\n\nInput: n = 1, x = 2, y = 3\nOutput: 6\nExplanation:\n\nThere are 2 ways to assign a stage to the performer.\nThe jury can award a score of either 1, 2, or 3 to the only band.\n\n\nExample 2:\n\nInput: n = 5, x = 2, y = 1\nOutput: 32\nExplanation:\n\nEach performer will be assigned either stage 1 or stage 2.\nAll bands will be awarded a score of 1.\n\n\nExample 3:\n\nInput: n = 3, x = 3, y = 4\nOutput: 684\n\n \nConstraints:\n\n1 <= n, x, y <= 1000\n\n", "hints": ["Fix the number of stages.", "Assign the Performers to the stages.", "Use inclusion-exclusion to ensure that no stage has 0 performers."], "exampleTestcases": "1\n2\n3\n5\n2\n1\n3\n3\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int n, int x, int y) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int n, int x, int y) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, n: int, x: int, y: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfWays(int n, int x, int y) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int n, int x, int y) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar numberOfWays = function(n, x, y) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfWays(n: number, x: number, y: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function numberOfWays($n, $x, $y) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ n: Int, _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(n: Int, x: Int, y: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int n, int x, int y) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfWays(n int, x int, y int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef number_of_ways(n, x, y)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfWays(n: Int, x: Int, y: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(n: i32, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-ways n x y)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_ways(N :: integer(), X :: integer(), Y :: integer()) -> integer().\nnumber_of_ways(N, X, Y) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(n :: integer, x :: integer, y :: integer) :: integer\n  def number_of_ways(n, x, y) do\n    \n  end\nend"}}}