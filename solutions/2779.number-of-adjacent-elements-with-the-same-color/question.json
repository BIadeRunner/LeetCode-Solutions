{"question_id": "2779", "problem_slug": "number-of-adjacent-elements-with-the-same-color", "problem_title": "Number of Adjacent Elements With the Same Color", "content": "You are given an integer n representing an array colors of length n where all elements are set to 0's meaning uncolored. You are also given a 2D integer array queries where queries[i] = [indexi, colori]. For the ith query:\n\nSet colors[indexi] to colori.\nCount adjacent pairs in colors set to the same color (regardless of colori).\n\nReturn an array answer of the same length as queries where answer[i] is the answer to the ith query.\n \nExample 1:\n\nInput: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]\nOutput: [0,1,1,0,2]\nExplanation:\n\nInitially array colors = [0,0,0,0], where 0 denotes uncolored elements of the array.\nAfter the 1st query colors = [2,0,0,0]. The count of adjacent pairs with the same color is 0.\nAfter the 2nd query colors = [2,2,0,0]. The count of adjacent pairs with the same color is 1.\nAfter the 3rd query colors = [2,2,0,1]. The count of adjacent pairs with the same color is 1.\nAfter the 4th query colors = [2,1,0,1]. The count of adjacent pairs with the same color is 0.\nAfter the 5th query colors = [2,1,1,1]. The count of adjacent pairs with the same color is 2.\n\n\nExample 2:\n\nInput: n = 1, queries = [[0,100000]]\nOutput: [0]\nExplanation:\nAfter the 1st query colors = [100000]. The count of adjacent pairs with the same color is 0.\n\n \nConstraints:\n\n1 <= n <= 105\n1 <= queries.length <= 105\nqueries[i].length == 2\n0 <= indexi <= n - 1\n1 <=  colori <= 105\n\n", "hints": ["Since at each query, only one element is being recolored, we just need to focus on its neighbors.", "If an element that is changed on the i-th query had the same color as its right element answer decreases by 1. Similarly contributes its left element too.", "After changing the color, if the element has the same color as its right element answer increases by 1. Similarly contributes its left element too."], "exampleTestcases": "4\n[[0,2],[1,2],[3,1],[1,1],[2,1]]\n1\n[[0,100000]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> colorTheArray(int n, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] colorTheArray(int n, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def colorTheArray(self, n, queries):\n        \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* colorTheArray(int n, int** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ColorTheArray(int n, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar colorTheArray = function(n, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function colorTheArray(n: number, queries: number[][]): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function colorTheArray($n, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func colorTheArray(_ n: Int, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun colorTheArray(n: Int, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> colorTheArray(int n, List<List<int>> queries) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func colorTheArray(n int, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef color_the_array(n, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def colorTheArray(n: Int, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn color_the_array(n: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (color-the-array n queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec color_the_array(N :: integer(), Queries :: [[integer()]]) -> [integer()].\ncolor_the_array(N, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec color_the_array(n :: integer, queries :: [[integer]]) :: [integer]\n  def color_the_array(n, queries) do\n    \n  end\nend"}}}