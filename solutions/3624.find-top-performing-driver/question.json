{"question_id": "3624", "problem_slug": "find-top-performing-driver", "problem_title": "Find Top Performing Driver", "content": "Table: Drivers\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| driver_id    | int     |\n| name         | varchar |\n| age          | int     |\n| experience   | int     |\n| accidents    | int     |\n+--------------+---------+\n(driver_id) is the unique key for this table.\nEach row includes a driver's ID, their name, age, years of driving experience, and the number of accidents they’ve had.\n\nTable: Vehicles\n\n+--------------+---------+\n| vehicle_id   | int     |\n| driver_id    | int     |\n| model        | varchar |\n| fuel_type    | varchar |\n| mileage      | int     |\n+--------------+---------+\n(vehicle_id, driver_id, fuel_type) is the unique key for this table.\nEach row includes the vehicle's ID, the driver who operates it, the model, fuel type, and mileage.\n\nTable: Trips\n\n+--------------+---------+\n| trip_id      | int     |\n| vehicle_id   | int     |\n| distance     | int     |\n| duration     | int     |\n| rating       | int     |\n+--------------+---------+\n(trip_id) is the unique key for this table.\nEach row includes a trip's ID, the vehicle used, the distance covered (in miles), the trip duration (in minutes), and the passenger's rating (1-5).\n\nUber is analyzing drivers based on their trips. Write a solution to find the top-performing driver for each fuel type based on the following criteria:\n\nA driver's performance is calculated as the average rating across all their trips. Average rating should be rounded to 2 decimal places.\nIf two drivers have the same average rating, the driver with the longer total distance traveled should be ranked higher.\nIf there is still a tie, choose the driver with the fewest accidents.\n\nReturn the result table ordered by fuel_type in ascending order.\nThe result format is in the following example.\n \nExample:\n\nInput:\nDrivers table:\n\n+-----------+----------+-----+------------+-----------+\n| driver_id | name     | age | experience | accidents |\n+-----------+----------+-----+------------+-----------+\n| 1         | Alice    | 34  | 10         | 1         |\n| 2         | Bob      | 45  | 20         | 3         |\n| 3         | Charlie  | 28  | 5          | 0         |\n+-----------+----------+-----+------------+-----------+\n\nVehicles table:\n\n+------------+-----------+---------+-----------+---------+\n| vehicle_id | driver_id | model   | fuel_type | mileage |\n+------------+-----------+---------+-----------+---------+\n| 100        | 1         | Sedan   | Gasoline  | 20000   |\n| 101        | 2         | SUV     | Electric  | 30000   |\n| 102        | 3         | Coupe   | Gasoline  | 15000   |\n+------------+-----------+---------+-----------+---------+\n\nTrips table:\n\n+---------+------------+----------+----------+--------+\n| trip_id | vehicle_id | distance | duration | rating |\n+---------+------------+----------+----------+--------+\n| 201     | 100        | 50       | 30       | 5      |\n| 202     | 100        | 30       | 20       | 4      |\n| 203     | 101        | 100      | 60       | 4      |\n| 204     | 101        | 80       | 50       | 5      |\n| 205     | 102        | 40       | 30       | 5      |\n| 206     | 102        | 60       | 40       | 5      |\n+---------+------------+----------+----------+--------+\n\nOutput:\n\n+-----------+-----------+--------+----------+\n| fuel_type | driver_id | rating | distance |\n+-----------+-----------+--------+----------+\n| Electric  | 2         | 4.50   | 180      |\n| Gasoline  | 3         | 5.00   | 100      |\n+-----------+-----------+--------+----------+\n\nExplanation:\n\nFor fuel type Gasoline, both Alice (Driver 1) and Charlie (Driver 3) have trips. Charlie has an average rating of 5.0, while Alice has 4.5. Therefore, Charlie is selected.\nFor fuel type Electric, Bob (Driver 2) is the only driver with an average rating of 4.5, so he is selected.\n\nThe output table is ordered by fuel_type in ascending order.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Drivers\":[\"driver_id\",\"name\",\"age\",\"experience\",\"accidents\"],\"Vehicles\":[\"vehicle_id\",\"driver_id\",\"model\",\"fuel_type\",\"mileage\"],\"Trips\":[\"trip_id\",\"vehicle_id\",\"distance\",\"duration\",\"rating\"]},\"rows\":{\"Drivers\":[[1,\"Alice\",34,10,1],[2,\"Bob\",45,20,3],[3,\"Charlie\",28,5,0]],\"Vehicles\":[[100,1,\"Sedan\",\"Gasoline\",20000],[101,2,\"SUV\",\"Electric\",30000],[102,3,\"Coupe\",\"Gasoline\",15000]],\"Trips\":[[201,100,50,30,5],[202,100,30,20,4],[203,101,100,60,4],[204,101,80,50,5],[205,102,40,30,5],[206,102,60,40,5]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef get_top_performing_drivers(drivers: pd.DataFrame, vehicles: pd.DataFrame, trips: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}