{"question_id": "259", "problem_slug": "3sum-smaller", "problem_title": "3Sum Smaller", "content": "Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.\n \nExample 1:\n\nInput: nums = [-2,0,1,3], target = 2\nOutput: 2\nExplanation: Because there are two triplets which sums are less than 2:\n[-2,0,1]\n[-2,0,3]\n\nExample 2:\n\nInput: nums = [], target = 0\nOutput: 0\n\nExample 3:\n\nInput: nums = [0], target = 0\nOutput: 0\n\n \nConstraints:\n\nn == nums.length\n0 <= n <= 3500\n-100 <= nums[i] <= 100\n-100 <= target <= 100\n\n", "hints": [], "exampleTestcases": "[-2,0,1,3]\n2\n[]\n0\n[0]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int threeSumSmaller(vector<int>& nums, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int threeSumSmaller(int[] nums, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def threeSumSmaller(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def threeSumSmaller(self, nums: List[int], target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int threeSumSmaller(int* nums, int numsSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ThreeSumSmaller(int[] nums, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumSmaller = function(nums, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function threeSumSmaller(nums: number[], target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumSmaller($nums, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func threeSumSmaller(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun threeSumSmaller(nums: IntArray, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int threeSumSmaller(List<int> nums, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func threeSumSmaller(nums []int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_smaller(nums, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def threeSumSmaller(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn three_sum_smaller(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (three-sum-smaller nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec three_sum_smaller(Nums :: [integer()], Target :: integer()) -> integer().\nthree_sum_smaller(Nums, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec three_sum_smaller(nums :: [integer], target :: integer) :: integer\n  def three_sum_smaller(nums, target) do\n    \n  end\nend"}}}