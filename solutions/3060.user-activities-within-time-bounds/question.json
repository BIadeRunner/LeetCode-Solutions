{"questionId": "3366", "acRate": 40.29797800638524, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3060", "paidOnly": true, "status": "ac", "title": "User Activities within Time Bounds", "titleSlug": "user-activities-within-time-bounds", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "content": "<p>Table: <code>Sessions</code></p>\n\n<pre>\n+---------------+----------+\n| Column Name   | Type     |\n+---------------+----------+\n| user_id       | int      |\n| session_start | datetime |\n| session_end   | datetime |\n| session_id    | int      |\n| session_type  | enum     |\n+---------------+----------+\nsession_id is column of unique values for this table.\nsession_type is an ENUM (category) type of (Viewer, Streamer).\nThis table contains user id, session start, session end, session id and session type.\n</pre>\n\n<p>Write a solution to find the the <strong>users</strong> who have had <strong>at least one</strong> <strong>consecutive session</strong> of the <strong>same</strong> type (either &#39;<strong>Viewer</strong>&#39; or &#39;<strong>Streamer</strong>&#39;) with a <strong>maximum</strong> gap of <code>12</code> hours <strong>between</strong> sessions.</p>\n\n<p>Return <em>the result table ordered by </em><code>user_id</code><em> in <b>ascending</b> order.</em></p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSessions table:\n+---------+---------------------+---------------------+------------+--------------+\n| user_id | session_start       | session_end         | session_id | session_type | \n+---------+---------------------+---------------------+------------+--------------+\n| 101     | 2023-11-01 08:00:00 | 2023-11-01 09:00:00 | 1          | Viewer       |  \n| 101     | 2023-11-01 10:00:00 | 2023-11-01 11:00:00 | 2          | Streamer     |   \n| 102     | 2023-11-01 13:00:00 | 2023-11-01 14:00:00 | 3          | Viewer       | \n| 102     | 2023-11-01 15:00:00 | 2023-11-01 16:00:00 | 4          | Viewer       | \n| 101     | 2023-11-02 09:00:00 | 2023-11-02 10:00:00 | 5          | Viewer       | \n| 102     | 2023-11-02 12:00:00 | 2023-11-02 13:00:00 | 6          | Streamer     | \n| 101     | 2023-11-02 13:00:00 | 2023-11-02 14:00:00 | 7          | Streamer     | \n| 102     | 2023-11-02 16:00:00 | 2023-11-02 17:00:00 | 8          | Viewer       | \n| 103     | 2023-11-01 08:00:00 | 2023-11-01 09:00:00 | 9          | Viewer       | \n| 103     | 2023-11-02 20:00:00 | 2023-11-02 23:00:00 | 10         | Viewer       | \n| 103     | 2023-11-03 09:00:00 | 2023-11-03 10:00:00 | 11         | Viewer       | \n+---------+---------------------+---------------------+------------+--------------+\n<strong>Output:</strong> \n+---------+\n| user_id |\n+---------+\n| 102     |\n| 103     |\n+---------+\n<strong>Explanation:</strong>\n- User ID 101 will not be included in the final output as they do not have any consecutive sessions of the same session type.\n- User ID 102 will be included in the final output as they had two viewer sessions with session IDs 3 and 4, respectively, and the time gap between them was less than 12 hours.\n- User ID 103 participated in two viewer sessions with a gap of less than 12 hours between them, identified by session IDs 10 and 11. Therefore, user 103 will be included in the final output.\nOutput table is ordered by user_id in increasing order.\n</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Sessions\":[\"user_id\",\"session_start\",\"session_end\",\"session_id\",\"session_type\"]},\"rows\":{\"Sessions\":[[101,\"2023-11-01 08:00:00\",\"2023-11-01 09:00:00\",1,\"Viewer\"],[101,\"2023-11-01 10:00:00\",\"2023-11-01 11:00:00\",2,\"Streamer\"],[102,\"2023-11-01 13:00:00\",\"2023-11-01 14:00:00\",3,\"Viewer\"],[102,\"2023-11-01 15:00:00\",\"2023-11-01 16:00:00\",4,\"Viewer\"],[101,\"2023-11-02 09:00:00\",\"2023-11-02 10:00:00\",5,\"Viewer\"],[102,\"2023-11-02 12:00:00\",\"2023-11-02 13:00:00\",6,\"Streamer\"],[101,\"2023-11-02 13:00:00\",\"2023-11-02 14:00:00\",7,\"Streamer\"],[102,\"2023-11-02 16:00:00\",\"2023-11-02 17:00:00\",8,\"Viewer\"],[103,\"2023-11-01 08:00:00\",\"2023-11-01 09:00:00\",9,\"Viewer\"],[103,\"2023-11-02 20:00:00\",\"2023-11-02 23:00:00\",10,\"Viewer\"],[103,\"2023-11-03 09:00:00\",\"2023-11-03 10:00:00\",11,\"Viewer\"]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef user_activities(sessions: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": []}