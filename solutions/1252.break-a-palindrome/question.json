{"question_id": "1252", "problem_slug": "break-a-palindrome", "problem_title": "Break a Palindrome", "content": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.\n \nExample 1:\n\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest.\n\nExample 2:\n\nInput: palindrome = \"a\"\nOutput: \"\"\nExplanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.\n\n \nConstraints:\n\n1 <= palindrome.length <= 1000\npalindrome consists of only lowercase English letters.\n\n", "hints": ["How to detect if there is impossible to perform the replacement? Only when the length = 1.", "Change the first non 'a' character to 'a'.", "What if the string has only 'a'?", "Change the last character to 'b'."], "exampleTestcases": "\"abccba\"\n\"a\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string breakPalindrome(string palindrome) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String breakPalindrome(String palindrome) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def breakPalindrome(self, palindrome):\n        \"\"\"\n        :type palindrome: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def breakPalindrome(self, palindrome: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* breakPalindrome(char* palindrome) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string BreakPalindrome(string palindrome) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} palindrome\n * @return {string}\n */\nvar breakPalindrome = function(palindrome) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function breakPalindrome(palindrome: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $palindrome\n     * @return String\n     */\n    function breakPalindrome($palindrome) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func breakPalindrome(_ palindrome: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun breakPalindrome(palindrome: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String breakPalindrome(String palindrome) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func breakPalindrome(palindrome string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} palindrome\n# @return {String}\ndef break_palindrome(palindrome)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def breakPalindrome(palindrome: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn break_palindrome(palindrome: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (break-palindrome palindrome)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec break_palindrome(Palindrome :: unicode:unicode_binary()) -> unicode:unicode_binary().\nbreak_palindrome(Palindrome) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec break_palindrome(palindrome :: String.t) :: String.t\n  def break_palindrome(palindrome) do\n    \n  end\nend"}}}