{"question_id": "294", "problem_slug": "flip-game-ii", "problem_title": "Flip Game II", "content": "You are playing a Flip Game with your friend.\nYou are given a string currentState that contains only '+' and '-'. You and your friend take turns to flip two consecutive \"++\" into \"--\". The game ends when a person can no longer make a move, and therefore the other person will be the winner.\nReturn true if the starting player can guarantee a win, and false otherwise.\n \nExample 1:\n\nInput: currentState = \"++++\"\nOutput: true\nExplanation: The starting player can guarantee a win by flipping the middle \"++\" to become \"+--+\".\n\nExample 2:\n\nInput: currentState = \"+\"\nOutput: false\n\n \nConstraints:\n\n1 <= currentState.length <= 60\ncurrentState[i] is either '+' or '-'.\n\n \nFollow up: Derive your algorithm's runtime complexity.", "hints": [], "exampleTestcases": "\"++++\"\n\"+\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canWin(string currentState) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canWin(String currentState) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canWin(self, currentState):\n        \"\"\"\n        :type currentState: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canWin(self, currentState: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canWin(char* currentState) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanWin(string currentState) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} currentState\n * @return {boolean}\n */\nvar canWin = function(currentState) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canWin(currentState: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $currentState\n     * @return Boolean\n     */\n    function canWin($currentState) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canWin(_ currentState: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canWin(currentState: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canWin(String currentState) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canWin(currentState string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} current_state\n# @return {Boolean}\ndef can_win(current_state)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canWin(currentState: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_win(current_state: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-win currentState)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_win(CurrentState :: unicode:unicode_binary()) -> boolean().\ncan_win(CurrentState) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_win(current_state :: String.t) :: boolean\n  def can_win(current_state) do\n    \n  end\nend"}}}