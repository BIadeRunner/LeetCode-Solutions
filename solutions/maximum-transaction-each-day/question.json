{"questionId": "1981", "acRate": 81.93177849353874, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1831", "paidOnly": true, "status": "ac", "title": "Maximum Transaction Each Day", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "titleSlug": "maximum-transaction-each-day", "content": "<p>Table: <code>Transactions</code></p>\n\n<pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| transaction_id | int      |\n| day            | datetime |\n| amount         | int      |\n+----------------+----------+\ntransaction_id is the column with unique values for this table.\nEach row contains information about one transaction.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution&nbsp;to report the IDs of the transactions with the <strong>maximum</strong> <code>amount</code> on their respective day. If in one day there are multiple such transactions, return all of them.</p>\n\n<p>Return the result table <strong>ordered by</strong> <code>transaction_id</code> <strong> in ascending order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nTransactions table:\n+----------------+--------------------+--------+\n| transaction_id | day                | amount |\n+----------------+--------------------+--------+\n| 8              | 2021-4-3 15:57:28  | 57     |\n| 9              | 2021-4-28 08:47:25 | 21     |\n| 1              | 2021-4-29 13:28:30 | 58     |\n| 5              | 2021-4-28 16:39:59 | 40     |\n| 6              | 2021-4-29 23:39:28 | 58     |\n+----------------+--------------------+--------+\n<strong>Output:</strong> \n+----------------+\n| transaction_id |\n+----------------+\n| 1              |\n| 5              |\n| 6              |\n| 8              |\n+----------------+\n<strong>Explanation:</strong> \n&quot;2021-4-3&quot;  --&gt; We have one transaction with ID 8, so we add 8 to the result table.\n&quot;2021-4-28&quot; --&gt; We have two transactions with IDs 5 and 9. The transaction with ID 5 has an amount of 40, while the transaction with ID 9 has an amount of 21. We only include the transaction with ID 5 as it has the maximum amount this day.\n&quot;2021-4-29&quot; --&gt; We have two transactions with IDs 1 and 6. Both transactions have the same amount of 58, so we include both in the result table.\nWe order the result table by transaction_id after collecting these IDs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it without using the <code>MAX()</code> function?</p>\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Transactions\": [\"transaction_id\", \"day\", \"amount\"]}, \"rows\": {\"Transactions\": [[8, \"2021-4-3 15:57:28\", 57], [9, \"2021-4-28 08:47:25\", 21], [1, \"2021-4-29 13:28:30\", 58], [5, \"2021-4-28 16:39:59\", 40], [6, \"2021-4-29 23:39:28\", 58]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef find_maximum_transaction(transactions: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": []}