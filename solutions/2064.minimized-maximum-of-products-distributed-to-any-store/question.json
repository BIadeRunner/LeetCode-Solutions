{"questionId": "2188", "acRate": 53.82070122566914, "difficulty": "Medium", "freqBar": 36.288325888329645, "frontendQuestionId": "2064", "paidOnly": false, "status": "ac", "title": "Minimized Maximum of Products Distributed to Any Store", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimized-maximum-of-products-distributed-to-any-store", "content": "<p>You are given an integer <code>n</code> indicating there are <code>n</code> specialty retail stores. There are <code>m</code> product types of varying amounts, which are given as a <strong>0-indexed</strong> integer array <code>quantities</code>, where <code>quantities[i]</code> represents the number of products of the <code>i<sup>th</sup></code> product type.</p>\n\n<p>You need to distribute <strong>all products</strong> to the retail stores following these rules:</p>\n\n<ul>\n\t<li>A store can only be given <strong>at most one product type</strong> but can be given <strong>any</strong> amount of it.</li>\n\t<li>After distribution, each store will have been given some number of products (possibly <code>0</code>). Let <code>x</code> represent the maximum number of products given to any store. You want <code>x</code> to be as small as possible, i.e., you want to <strong>minimize</strong> the <strong>maximum</strong> number of products that are given to any store.</li>\n</ul>\n\n<p>Return <em>the minimum possible</em> <code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, quantities = [11,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7, quantities = [15,10,10]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, quantities = [100000]\n<strong>Output:</strong> 100000\n<strong>Explanation:</strong> The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == quantities.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= quantities[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["There exists a monotonic nature such that when x is smaller than some number, there will be no way to distribute, and when x is not smaller than that number, there will always be a way to distribute.", "If you are given a number k, where the number of products given to any store does not exceed k, could you determine if all products can be distributed?", "Implement a function canDistribute(k), which returns true if you can distribute all products such that any store will not be given more than k products, and returns false if you cannot. Use this function to binary search for the smallest possible k."], "exampleTestcases": "6\n[11,6]\n7\n[15,10,10]\n1\n[100000]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizedMaximum(int n, vector<int>& quantities) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimizedMaximum(int n, int[] quantities) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimizedMaximum(self, n, quantities):\n        \"\"\"\n        :type n: int\n        :type quantities: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimizedMaximum(int n, int* quantities, int quantitiesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimizedMaximum(int n, int[] quantities) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} quantities\n * @return {number}\n */\nvar minimizedMaximum = function(n, quantities) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimizedMaximum(n: number, quantities: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $quantities\n     * @return Integer\n     */\n    function minimizedMaximum($n, $quantities) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimizedMaximum(_ n: Int, _ quantities: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimizedMaximum(int n, List<int> quantities) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimizedMaximum(n int, quantities []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} quantities\n# @return {Integer}\ndef minimized_maximum(n, quantities)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimizedMaximum(n: Int, quantities: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimized_maximum(n: i32, quantities: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimized-maximum n quantities)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimized_maximum(N :: integer(), Quantities :: [integer()]) -> integer().\nminimized_maximum(N, Quantities) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimized_maximum(n :: integer, quantities :: [integer]) :: integer\n  def minimized_maximum(n, quantities) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "koko-eating-bananas", "title": "Koko Eating Bananas", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-candies-allocated-to-k-children", "title": "Maximum Candies Allocated to K Children", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-smallest-divisor-given-a-threshold", "title": "Find the Smallest Divisor Given a Threshold", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "magnetic-force-between-two-balls", "title": "Magnetic Force Between Two Balls", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-limit-of-balls-in-a-bag", "title": "Minimum Limit of Balls in a Bag", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "isPaidOnly": false}]}