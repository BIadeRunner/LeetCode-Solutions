{"questionId": "2485", "acRate": 37.65522713747272, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2345", "paidOnly": true, "status": "ac", "title": "Finding the Number of Visible Mountains", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}], "titleSlug": "finding-the-number-of-visible-mountains", "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>peaks</code> where <code>peaks[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> states that mountain <code>i</code> has a peak at coordinates <code>(x<sub>i</sub>, y<sub>i</sub>)</code>. A mountain can be described as a right-angled isosceles triangle, with its base along the <code>x</code>-axis and a right angle at its peak. More formally, the <strong>gradients</strong> of ascending and descending the mountain are <code>1</code> and <code>-1</code> respectively.</p>\n\n<p>A mountain is considered <strong>visible</strong> if its peak does not lie within another mountain (including the border of other mountains).</p>\n\n<p>Return <em>the number of visible mountains</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/19/ex1.png\" style=\"width: 402px; height: 210px;\" />\n<pre>\n<strong>Input:</strong> peaks = [[2,2],[6,3],[5,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The diagram above shows the mountains.\n- Mountain 0 is visible since its peak does not lie within another mountain or its sides.\n- Mountain 1 is not visible since its peak lies within the side of mountain 2.\n- Mountain 2 is visible since its peak does not lie within another mountain or its sides.\nThere are 2 mountains that are visible.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/19/ex2new1.png\" style=\"width: 300px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> peaks = [[1,3],[1,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The diagram above shows the mountains (they completely overlap).\nBoth mountains are not visible since their peaks lie within each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= peaks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>peaks[i].length == 2</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["How can we efficiently find for each mountain the relevant mountains to compare itself against to check whether or not it would be visible?", "Do you notice a pattern after sorting the peaks by their x-coordinates?", "After sorting, process the peaks sequentially and use a monotonic stack to store currently visible mountains."], "exampleTestcases": "[[2,2],[6,3],[5,4]]\n[[1,3],[1,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int visibleMountains(vector<vector<int>>& peaks) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int visibleMountains(int[][] peaks) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def visibleMountains(self, peaks):\n        \"\"\"\n        :type peaks: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def visibleMountains(self, peaks: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int visibleMountains(int** peaks, int peaksSize, int* peaksColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int VisibleMountains(int[][] peaks) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} peaks\n * @return {number}\n */\nvar visibleMountains = function(peaks) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function visibleMountains(peaks: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $peaks\n     * @return Integer\n     */\n    function visibleMountains($peaks) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func visibleMountains(_ peaks: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun visibleMountains(peaks: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int visibleMountains(List<List<int>> peaks) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func visibleMountains(peaks [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} peaks\n# @return {Integer}\ndef visible_mountains(peaks)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def visibleMountains(peaks: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn visible_mountains(peaks: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (visible-mountains peaks)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec visible_mountains(Peaks :: [[integer()]]) -> integer().\nvisible_mountains(Peaks) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec visible_mountains(peaks :: [[integer]]) :: integer\n  def visible_mountains(peaks) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "buildings-with-an-ocean-view", "title": "Buildings With an Ocean View", "isPaidOnly": true}]}