{"question_id": "1911", "problem_slug": "minimum-elements-to-add-to-form-a-given-sum", "problem_title": "Minimum Elements to Add to Form a Given Sum", "content": "You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\n \nExample 1:\n\nInput: nums = [1,-1,1], limit = 3, goal = -4\nOutput: 2\nExplanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n\nExample 2:\n\nInput: nums = [1,-10,9,1], limit = 100, goal = 0\nOutput: 1\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= limit <= 106\n-limit <= nums[i] <= limit\n-109 <= goal <= 109\n\n", "hints": ["Try thinking about the problem as if the array is empty. Then you only need to form goal using elements whose absolute value is <= limit.", "You can greedily set all of the elements except one to limit or -limit, so the number of elements you need is ceil(abs(goal)/ limit).", "You can \"normalize\" goal by offsetting it by the sum of the array. For example, if the goal is 5 and the sum is -3, then it's exactly the same as if the goal is 8 and the array is empty.", "The answer is ceil(abs(goal-sum)/limit) = (abs(goal-sum)+limit-1) / limit."], "exampleTestcases": "[1,-1,1]\n3\n-4\n[1,-10,9,1]\n100\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minElements(vector<int>& nums, int limit, int goal) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minElements(int[] nums, int limit, int goal) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minElements(self, nums, limit, goal):\n        \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :type goal: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minElements(self, nums: List[int], limit: int, goal: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minElements(int* nums, int numsSize, int limit, int goal) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinElements(int[] nums, int limit, int goal) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} limit\n * @param {number} goal\n * @return {number}\n */\nvar minElements = function(nums, limit, goal) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minElements(nums: number[], limit: number, goal: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @param Integer $goal\n     * @return Integer\n     */\n    function minElements($nums, $limit, $goal) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minElements(_ nums: [Int], _ limit: Int, _ goal: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minElements(nums: IntArray, limit: Int, goal: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minElements(List<int> nums, int limit, int goal) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minElements(nums []int, limit int, goal int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @param {Integer} goal\n# @return {Integer}\ndef min_elements(nums, limit, goal)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minElements(nums: Array[Int], limit: Int, goal: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_elements(nums: Vec<i32>, limit: i32, goal: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-elements nums limit goal)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_elements(Nums :: [integer()], Limit :: integer(), Goal :: integer()) -> integer().\nmin_elements(Nums, Limit, Goal) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_elements(nums :: [integer], limit :: integer, goal :: integer) :: integer\n  def min_elements(nums, limit, goal) do\n    \n  end\nend"}}}