{"questionId": "2617", "acRate": 49.18740765996136, "difficulty": "Hard", "freqBar": 56.30637362994718, "frontendQuestionId": "2534", "paidOnly": true, "status": "ac", "title": "Time Taken to Cross the Door", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Queue", "id": "VG9waWNUYWdOb2RlOjM0", "slug": "queue"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "time-taken-to-cross-the-door", "content": "<p>There are <code>n</code> persons numbered from <code>0</code> to <code>n - 1</code> and a door. Each person can enter or exit through the door once, taking one second.</p>\n\n<p>You are given a <strong>non-decreasing</strong> integer array <code>arrival</code> of size <code>n</code>, where <code>arrival[i]</code> is the arrival time of the <code>i<sup>th</sup></code> person at the door. You are also given an array <code>state</code> of size <code>n</code>, where <code>state[i]</code> is <code>0</code> if person <code>i</code> wants to enter through the door or <code>1</code> if they want to exit through the door.</p>\n\n<p>If two or more persons want to use the door at the <strong>same</strong> time, they follow the following rules:</p>\n\n<ul>\n\t<li>If the door was <strong>not</strong> used in the previous second, then the person who wants to <strong>exit</strong> goes first.</li>\n\t<li>If the door was used in the previous second for <strong>entering</strong>, the person who wants to enter goes first.</li>\n\t<li>If the door was used in the previous second for <strong>exiting</strong>, the person who wants to <strong>exit</strong> goes first.</li>\n\t<li>If multiple persons want to go in the same direction, the person with the <strong>smallest</strong> index goes first.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the second at which the </em><code>i<sup>th</sup></code><em> person crosses the door</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Only one person can cross the door at each second.</li>\n\t<li>A person may arrive at the door and wait without entering or exiting to follow the mentioned rules.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arrival = [0,1,1,2,4], state = [0,1,0,0,1]\n<strong>Output:</strong> [0,3,1,2,4]\n<strong>Explanation:</strong> At each second we have the following:\n- At t = 0: Person 0 is the only one who wants to enter, so they just enter through the door.\n- At t = 1: Person 1 wants to exit, and person 2 wants to enter. Since the door was used the previous second for entering, person 2 enters.\n- At t = 2: Person 1 still wants to exit, and person 3 wants to enter. Since the door was used the previous second for entering, person 3 enters.\n- At t = 3: Person 1 is the only one who wants to exit, so they just exit through the door.\n- At t = 4: Person 4 is the only one who wants to exit, so they just exit through the door.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arrival = [0,0,0], state = [1,0,1]\n<strong>Output:</strong> [0,2,1]\n<strong>Explanation:</strong> At each second we have the following:\n- At t = 0: Person 1 wants to enter while persons 0 and 2 want to exit. Since the door was not used in the previous second, the persons who want to exit get to go first. Since person 0 has a smaller index, they exit first.\n- At t = 1: Person 1 wants to enter, and person 2 wants to exit. Since the door was used in the previous second for exiting, person 2 exits.\n- At t = 2: Person 1 is the only one who wants to enter, so they just enter through the door.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == arrival.length == state.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arrival[i] &lt;= n</code></li>\n\t<li><code>arrival</code> is sorted in <strong>non-decreasing</strong> order.</li>\n\t<li><code>state[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["Use a queue to store the people who want to enter or exit and their corresponding times.", "Simulate the process described in the statement and apply the 4 rules to the people crossing the door."], "exampleTestcases": "[0,1,1,2,4]\n[0,1,0,0,1]\n[0,0,0]\n[1,0,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> timeTaken(vector<int>& arrival, vector<int>& state) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] timeTaken(int[] arrival, int[] state) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def timeTaken(self, arrival, state):\n        \"\"\"\n        :type arrival: List[int]\n        :type state: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def timeTaken(self, arrival: List[int], state: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* timeTaken(int* arrival, int arrivalSize, int* state, int stateSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] TimeTaken(int[] arrival, int[] state) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arrival\n * @param {number[]} state\n * @return {number[]}\n */\nvar timeTaken = function(arrival, state) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function timeTaken(arrival: number[], state: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arrival\n     * @param Integer[] $state\n     * @return Integer[]\n     */\n    function timeTaken($arrival, $state) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func timeTaken(_ arrival: [Int], _ state: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun timeTaken(arrival: IntArray, state: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> timeTaken(List<int> arrival, List<int> state) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func timeTaken(arrival []int, state []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arrival\n# @param {Integer[]} state\n# @return {Integer[]}\ndef time_taken(arrival, state)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def timeTaken(arrival: Array[Int], state: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn time_taken(arrival: Vec<i32>, state: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (time-taken arrival state)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec time_taken(Arrival :: [integer()], State :: [integer()]) -> [integer()].\ntime_taken(Arrival, State) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec time_taken(arrival :: [integer], state :: [integer]) :: [integer]\n  def time_taken(arrival, state) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "isPaidOnly": false}]}