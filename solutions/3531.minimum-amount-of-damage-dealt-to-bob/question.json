{"question_id": "3531", "problem_slug": "minimum-amount-of-damage-dealt-to-bob", "problem_title": "Minimum Amount of Damage Dealt to Bob", "content": "You are given an integer power and two integer arrays damage and health, both having length n.\nBob has n enemies, where enemy i will deal Bob damage[i] points of damage per second while they are alive (i.e. health[i] > 0).\nEvery second, after the enemies deal damage to Bob, he chooses one of the enemies that is still alive and deals power points of damage to them.\nDetermine the minimum total amount of damage points that will be dealt to Bob before all n enemies are dead.\n \nExample 1:\n\nInput: power = 4, damage = [1,2,3,4], health = [4,5,6,8]\nOutput: 39\nExplanation:\n\nAttack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 10 + 10 = 20 points.\nAttack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 6 + 6 = 12 points.\nAttack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is 3 points.\nAttack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 2 + 2 = 4 points.\n\n\nExample 2:\n\nInput: power = 1, damage = [1,1,1,1], health = [1,2,3,4]\nOutput: 20\nExplanation:\n\nAttack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is 4 points.\nAttack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 3 + 3 = 6 points.\nAttack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 2 + 2 + 2 = 6 points.\nAttack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 1 + 1 + 1 + 1 = 4 points.\n\n\nExample 3:\n\nInput: power = 8, damage = [40], health = [59]\nOutput: 320\n\n \nConstraints:\n\n1 <= power <= 104\n1 <= n == damage.length == health.length <= 105\n1 <= damage[i], health[i] <= 104\n\n", "hints": ["Can we use sorting here along with a custom comparator?", "For any two enemies <code>i</code> and <code>j</code> with damages <code>damage[i]</code> and <code>damage[j]</code>, and time to take each of them down <code>t<sub>i</sub></code> and <code>t<sub>j</sub></code>, when is it better to choose enemy <code>i</code> over enemy <code>j</code> first?"], "exampleTestcases": "4\n[1,2,3,4]\n[4,5,6,8]\n1\n[1,1,1,1]\n[1,2,3,4]\n8\n[40]\n[59]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minDamage(int power, vector<int>& damage, vector<int>& health) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minDamage(int power, int[] damage, int[] health) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minDamage(self, power, damage, health):\n        \"\"\"\n        :type power: int\n        :type damage: List[int]\n        :type health: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minDamage(self, power: int, damage: List[int], health: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minDamage(int power, int* damage, int damageSize, int* health, int healthSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinDamage(int power, int[] damage, int[] health) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} power\n * @param {number[]} damage\n * @param {number[]} health\n * @return {number}\n */\nvar minDamage = function(power, damage, health) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minDamage(power: number, damage: number[], health: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $power\n     * @param Integer[] $damage\n     * @param Integer[] $health\n     * @return Integer\n     */\n    function minDamage($power, $damage, $health) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minDamage(_ power: Int, _ damage: [Int], _ health: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minDamage(power: Int, damage: IntArray, health: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minDamage(int power, List<int> damage, List<int> health) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minDamage(power int, damage []int, health []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} power\n# @param {Integer[]} damage\n# @param {Integer[]} health\n# @return {Integer}\ndef min_damage(power, damage, health)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minDamage(power: Int, damage: Array[Int], health: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_damage(power: i32, damage: Vec<i32>, health: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-damage power damage health)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_damage(Power :: integer(), Damage :: [integer()], Health :: [integer()]) -> integer().\nmin_damage(Power, Damage, Health) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_damage(power :: integer, damage :: [integer], health :: [integer]) :: integer\n  def min_damage(power, damage, health) do\n    \n  end\nend"}}}