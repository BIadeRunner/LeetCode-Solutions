{"question_id": "1075", "problem_slug": "index-pairs-of-a-string", "problem_title": "Index Pairs of a String", "content": "Given a string text and an array of strings words, return an array of all index pairs [i, j] so that the substring text[i...j] is in words.\nReturn the pairs [i, j] in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).\n \nExample 1:\n\nInput: text = \"thestoryofleetcodeandme\", words = [\"story\",\"fleet\",\"leetcode\"]\nOutput: [[3,7],[9,13],[10,17]]\n\nExample 2:\n\nInput: text = \"ababa\", words = [\"aba\",\"ab\"]\nOutput: [[0,1],[0,2],[2,3],[2,4]]\nExplanation: Notice that matches can overlap, see \"aba\" is found in [0,2] and [2,4].\n\n \nConstraints:\n\n1 <= text.length <= 100\n1 <= words.length <= 20\n1 <= words[i].length <= 50\ntext and words[i] consist of lowercase English letters.\nAll the strings of words are unique.\n\n", "hints": ["For each string of the set, look for matches and store those matches indices."], "exampleTestcases": "\"thestoryofleetcodeandme\"\n[\"story\",\"fleet\",\"leetcode\"]\n\"ababa\"\n[\"aba\",\"ab\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> indexPairs(string text, vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] indexPairs(String text, String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def indexPairs(self, text, words):\n        \"\"\"\n        :type text: str\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def indexPairs(self, text: str, words: List[str]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** indexPairs(char* text, char** words, int wordsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] IndexPairs(string text, string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} text\n * @param {string[]} words\n * @return {number[][]}\n */\nvar indexPairs = function(text, words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function indexPairs(text: string, words: string[]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @param String[] $words\n     * @return Integer[][]\n     */\n    function indexPairs($text, $words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func indexPairs(_ text: String, _ words: [String]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun indexPairs(text: String, words: Array<String>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> indexPairs(String text, List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func indexPairs(text string, words []string) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} text\n# @param {String[]} words\n# @return {Integer[][]}\ndef index_pairs(text, words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def indexPairs(text: String, words: Array[String]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn index_pairs(text: String, words: Vec<String>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (index-pairs text words)\n  (-> string? (listof string?) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec index_pairs(Text :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [[integer()]].\nindex_pairs(Text, Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec index_pairs(text :: String.t, words :: [String.t]) :: [[integer]]\n  def index_pairs(text, words) do\n    \n  end\nend"}}}