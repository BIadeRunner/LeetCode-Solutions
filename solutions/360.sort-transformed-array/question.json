{"question_id": "360", "problem_slug": "sort-transformed-array", "problem_title": "Sort Transformed Array", "content": "Given a sorted integer array nums and three integers a, b and c, apply a quadratic function of the form f(x) = ax2 + bx + c to each element nums[i] in the array, and return the array in a sorted order.\n \nExample 1:\nInput: nums = [-4,-2,2,4], a = 1, b = 3, c = 5\nOutput: [3,9,15,33]\nExample 2:\nInput: nums = [-4,-2,2,4], a = -1, b = 3, c = 5\nOutput: [-23,-5,1,7]\n\n \nConstraints:\n\n1 <= nums.length <= 200\n-100 <= nums[i], a, b, c <= 100\nnums is sorted in ascending order.\n\n \nFollow up: Could you solve it in O(n) time?\n", "hints": ["x^2 + x  will form a parabola.", "Parameter A in:  A * x^2 + B * x + C dictates the shape of the parabola.</br>\r\nPositive A means the parabola remains concave (high-low-high), but negative A inverts the parabola to be convex (low-high-low)."], "exampleTestcases": "[-4,-2,2,4]\n1\n3\n5\n[-4,-2,2,4]\n-1\n3\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sortTransformedArray(self, nums, a, b, c):\n        \"\"\"\n        :type nums: List[int]\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortTransformedArray(int* nums, int numsSize, int a, int b, int c, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] SortTransformedArray(int[] nums, int a, int b, int c) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number[]}\n */\nvar sortTransformedArray = function(nums, a, b, c) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sortTransformedArray(nums: number[], a: number, b: number, c: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer[]\n     */\n    function sortTransformedArray($nums, $a, $b, $c) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sortTransformedArray(_ nums: [Int], _ a: Int, _ b: Int, _ c: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sortTransformedArray(nums: IntArray, a: Int, b: Int, c: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> sortTransformedArray(List<int> nums, int a, int b, int c) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sortTransformedArray(nums []int, a int, b int, c int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer[]}\ndef sort_transformed_array(nums, a, b, c)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sortTransformedArray(nums: Array[Int], a: Int, b: Int, c: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sort_transformed_array(nums: Vec<i32>, a: i32, b: i32, c: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sort-transformed-array nums a b c)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sort_transformed_array(Nums :: [integer()], A :: integer(), B :: integer(), C :: integer()) -> [integer()].\nsort_transformed_array(Nums, A, B, C) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sort_transformed_array(nums :: [integer], a :: integer, b :: integer, c :: integer) :: [integer]\n  def sort_transformed_array(nums, a, b, c) do\n    \n  end\nend"}}}