{"question_id": "2738", "problem_slug": "count-the-number-of-k-free-subsets", "problem_title": "Count the Number of K-Free Subsets", "content": "You are given an integer array nums, which contains distinct elements and an integer k.\nA subset is called a k-Free subset if it contains no two elements with an absolute difference equal to k. Notice that the empty set is a k-Free subset.\nReturn the number of k-Free subsets of nums.\nA subset of an array is a selection of elements (possibly none) of the array.\n \nExample 1:\n\nInput: nums = [5,4,6], k = 1\nOutput: 5\nExplanation: There are 5 valid subsets: {}, {5}, {4}, {6} and {4, 6}.\n\nExample 2:\n\nInput: nums = [2,3,5,8], k = 5\nOutput: 12\nExplanation: There are 12 valid subsets: {}, {2}, {3}, {5}, {8}, {2, 3}, {2, 3, 5}, {2, 5}, {2, 5, 8}, {2, 8}, {3, 5} and {5, 8}.\n\nExample 3:\n\nInput: nums = [10,5,9,11], k = 20\nOutput: 16\nExplanation: All subsets are valid. Since the total count of subsets is 24 = 16, so the answer is 16. \n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 1000\n1 <= k <= 1000\n\n", "hints": ["Split all numbers into several groups, with each group being an arithmetic sequence with a common difference of k.", "How many K-free subsets are there for each group? This can be solved by dp: dp[i] = dp[i-1] + dp[i-2], meaning if we choose ith element, we cannot choose (i-1)th; otherwise we can choose (i-1)th element.", "After solving the problem for every group, the final result is just the product of the sub-problems.", "Split all numbers into several groups, with each group being an arithmetic sequence with a common difference of k."], "exampleTestcases": "[5,4,6]\n1\n[2,3,5,8]\n5\n[10,5,9,11]\n20", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countTheNumOfKFreeSubsets(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countTheNumOfKFreeSubsets(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countTheNumOfKFreeSubsets(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countTheNumOfKFreeSubsets(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countTheNumOfKFreeSubsets(int* nums, int numsSize, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountTheNumOfKFreeSubsets(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countTheNumOfKFreeSubsets = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countTheNumOfKFreeSubsets(nums: number[], k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countTheNumOfKFreeSubsets($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countTheNumOfKFreeSubsets(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countTheNumOfKFreeSubsets(nums: IntArray, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countTheNumOfKFreeSubsets(List<int> nums, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countTheNumOfKFreeSubsets(nums []int, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_the_num_of_k_free_subsets(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countTheNumOfKFreeSubsets(nums: Array[Int], k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_the_num_of_k_free_subsets(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-the-num-of-k-free-subsets nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_the_num_of_k_free_subsets(Nums :: [integer()], K :: integer()) -> integer().\ncount_the_num_of_k_free_subsets(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_the_num_of_k_free_subsets(nums :: [integer], k :: integer) :: integer\n  def count_the_num_of_k_free_subsets(nums, k) do\n    \n  end\nend"}}}