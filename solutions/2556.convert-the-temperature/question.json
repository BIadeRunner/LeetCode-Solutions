{"questionId": "2556", "acRate": 89.86181272736677, "difficulty": "Easy", "freqBar": 46.1825975955019, "frontendQuestionId": "2469", "paidOnly": false, "status": "ac", "title": "Convert the Temperature", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "convert-the-temperature", "content": "<p>You are given a non-negative floating point number rounded to two decimal places <code>celsius</code>, that denotes the <strong>temperature in Celsius</strong>.</p>\n\n<p>You should convert Celsius into <strong>Kelvin</strong> and <strong>Fahrenheit</strong> and return it as an array <code>ans = [kelvin, fahrenheit]</code>.</p>\n\n<p>Return <em>the array <code>ans</code>. </em>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p><strong>Note that:</strong></p>\n\n<ul>\n\t<li><code>Kelvin = Celsius + 273.15</code></li>\n\t<li><code>Fahrenheit = Celsius * 1.80 + 32.00</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> celsius = 36.50\n<strong>Output:</strong> [309.65000,97.70000]\n<strong>Explanation:</strong> Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> celsius = 122.11\n<strong>Output:</strong> [395.26000,251.79800]\n<strong>Explanation:</strong> Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= celsius &lt;= 1000</code></li>\n</ul>\n", "hints": ["Implement formulas that are given in the statement."], "exampleTestcases": "36.50\n122.11", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<double> convertTemperature(double celsius) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double[] convertTemperature(double celsius) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def convertTemperature(self, celsius):\n        \"\"\"\n        :type celsius: float\n        :rtype: List[float]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def convertTemperature(self, celsius: float) -> List[float]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* convertTemperature(double celsius, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double[] ConvertTemperature(double celsius) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} celsius\n * @return {number[]}\n */\nvar convertTemperature = function(celsius) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function convertTemperature(celsius: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float $celsius\n     * @return Float[]\n     */\n    function convertTemperature($celsius) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func convertTemperature(_ celsius: Double) -> [Double] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun convertTemperature(celsius: Double): DoubleArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<double> convertTemperature(double celsius) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func convertTemperature(celsius float64) []float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Float} celsius\n# @return {Float[]}\ndef convert_temperature(celsius)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def convertTemperature(celsius: Double): Array[Double] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn convert_temperature(celsius: f64) -> Vec<f64> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (convert-temperature celsius)\n  (-> flonum? (listof flonum?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec convert_temperature(Celsius :: float()) -> [float()].\nconvert_temperature(Celsius) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_temperature(celsius :: float) :: [float]\n  def convert_temperature(celsius) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "smallest-even-multiple", "title": "Smallest Even Multiple", "isPaidOnly": false}]}