{"question_id": "2556", "problem_slug": "convert-the-temperature", "problem_title": "Convert the Temperature", "content": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\n\nKelvin = Celsius + 273.15\nFahrenheit = Celsius * 1.80 + 32.00\n\n \nExample 1:\n\nInput: celsius = 36.50\nOutput: [309.65000,97.70000]\nExplanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.\n\nExample 2:\n\nInput: celsius = 122.11\nOutput: [395.26000,251.79800]\nExplanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.\n\n \nConstraints:\n\n0 <= celsius <= 1000\n\n", "hints": ["Implement formulas that are given in the statement."], "exampleTestcases": "36.50\n122.11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<double> convertTemperature(double celsius) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double[] convertTemperature(double celsius) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def convertTemperature(self, celsius):\n        \"\"\"\n        :type celsius: float\n        :rtype: List[float]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def convertTemperature(self, celsius: float) -> List[float]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* convertTemperature(double celsius, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double[] ConvertTemperature(double celsius) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} celsius\n * @return {number[]}\n */\nvar convertTemperature = function(celsius) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function convertTemperature(celsius: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float $celsius\n     * @return Float[]\n     */\n    function convertTemperature($celsius) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func convertTemperature(_ celsius: Double) -> [Double] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun convertTemperature(celsius: Double): DoubleArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<double> convertTemperature(double celsius) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func convertTemperature(celsius float64) []float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Float} celsius\n# @return {Float[]}\ndef convert_temperature(celsius)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def convertTemperature(celsius: Double): Array[Double] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn convert_temperature(celsius: f64) -> Vec<f64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (convert-temperature celsius)\n  (-> flonum? (listof flonum?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec convert_temperature(Celsius :: float()) -> [float()].\nconvert_temperature(Celsius) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_temperature(celsius :: float) :: [float]\n  def convert_temperature(celsius) do\n    \n  end\nend"}}}