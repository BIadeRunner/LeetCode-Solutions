{"question_id": "1345", "problem_slug": "perform-string-shifts", "problem_title": "Perform String Shifts", "content": "You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [directioni, amounti]:\n\ndirectioni can be 0 (for left shift) or 1 (for right shift).\namounti is the amount by which string s is to be shifted.\nA left shift by 1 means remove the first character of s and append it to the end.\nSimilarly, a right shift by 1 means remove the last character of s and add it to the beginning.\n\nReturn the final string after all operations.\n \nExample 1:\n\nInput: s = \"abc\", shift = [[0,1],[1,2]]\nOutput: \"cab\"\nExplanation: \n[0,1] means shift to left by 1. \"abc\" -> \"bca\"\n[1,2] means shift to right by 2. \"bca\" -> \"cab\"\nExample 2:\n\nInput: s = \"abcdefg\", shift = [[1,1],[1,1],[0,2],[1,3]]\nOutput: \"efgabcd\"\nExplanation:  \n[1,1] means shift to right by 1. \"abcdefg\" -> \"gabcdef\"\n[1,1] means shift to right by 1. \"gabcdef\" -> \"fgabcde\"\n[0,2] means shift to left by 2. \"fgabcde\" -> \"abcdefg\"\n[1,3] means shift to right by 3. \"abcdefg\" -> \"efgabcd\"\n \nConstraints:\n\n1 <= s.length <= 100\ns only contains lower case English letters.\n1 <= shift.length <= 100\nshift[i].length == 2\ndirectioni is either 0 or 1.\n0 <= amounti <= 100\n\n", "hints": ["Intuitively performing all shift operations is acceptable due to the constraints.", "You may notice that left shift cancels the right shift, so count the total left shift times (may be negative if the final result is right shift), and perform it once."], "exampleTestcases": "\"abc\"\n[[0,1],[1,2]]\n\"abcdefg\"\n[[1,1],[1,1],[0,2],[1,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string stringShift(string s, vector<vector<int>>& shift) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String stringShift(String s, int[][] shift) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def stringShift(self, s, shift):\n        \"\"\"\n        :type s: str\n        :type shift: List[List[int]]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* stringShift(char* s, int** shift, int shiftSize, int* shiftColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string StringShift(string s, int[][] shift) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number[][]} shift\n * @return {string}\n */\nvar stringShift = function(s, shift) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function stringShift(s: string, shift: number[][]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $shift\n     * @return String\n     */\n    function stringShift($s, $shift) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func stringShift(_ s: String, _ shift: [[Int]]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun stringShift(s: String, shift: Array<IntArray>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String stringShift(String s, List<List<int>> shift) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func stringShift(s string, shift [][]int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[][]} shift\n# @return {String}\ndef string_shift(s, shift)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def stringShift(s: String, shift: Array[Array[Int]]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn string_shift(s: String, shift: Vec<Vec<i32>>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (string-shift s shift)\n  (-> string? (listof (listof exact-integer?)) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec string_shift(S :: unicode:unicode_binary(), Shift :: [[integer()]]) -> unicode:unicode_binary().\nstring_shift(S, Shift) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec string_shift(s :: String.t, shift :: [[integer]]) :: String.t\n  def string_shift(s, shift) do\n    \n  end\nend"}}}