{"questionId": "3482", "acRate": 19.986833671153615, "difficulty": "Hard", "freqBar": 64.49118276310949, "frontendQuestionId": "3213", "paidOnly": false, "status": "ac", "title": "Construct String with Minimum Cost", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Suffix Array", "id": "VG9waWNUYWdOb2RlOjU2Njk4", "slug": "suffix-array"}], "titleSlug": "construct-string-with-minimum-cost", "content": "<p>You are given a string <code>target</code>, an array of strings <code>words</code>, and an integer array <code>costs</code>, both arrays of the same length.</p>\n\n<p>Imagine an empty string <code>s</code>.</p>\n\n<p>You can perform the following operation any number of times (including <strong>zero</strong>):</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[0, words.length - 1]</code>.</li>\n\t<li>Append <code>words[i]</code> to <code>s</code>.</li>\n\t<li>The cost of operation is <code>costs[i]</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> cost to make <code>s</code> equal to <code>target</code>. If it&#39;s not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;abcdef&quot;, words = [&quot;abdef&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;def&quot;,&quot;ef&quot;], costs = [100,1,1,10,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The minimum cost can be achieved by performing the following operations:</p>\n\n<ul>\n\t<li>Select index 1 and append <code>&quot;abc&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abc&quot;</code>.</li>\n\t<li>Select index 2 and append <code>&quot;d&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abcd&quot;</code>.</li>\n\t<li>Select index 4 and append <code>&quot;ef&quot;</code> to <code>s</code> at a cost of 5, resulting in <code>s = &quot;abcdef&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">target = &quot;aaaa&quot;, words = [&quot;z&quot;,&quot;zz&quot;,&quot;zzz&quot;], costs = [1,10,100]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It is impossible to make <code>s</code> equal to <code>target</code>, so we return -1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length == costs.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= target.length</code></li>\n\t<li>The total sum of <code>words[i].length</code> is less than or equal to <code>5 * 10<sup>4</sup></code>.</li>\n\t<li><code>target</code> and <code>words[i]</code> consist only of lowercase English letters.</li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Use Dynamic Programming along with Aho-Corasick or Hashing."], "exampleTestcases": "\"abcdef\"\n[\"abdef\",\"abc\",\"d\",\"def\",\"ef\"]\n[100,1,1,10,5]\n\"aaaa\"\n[\"z\",\"zz\",\"zzz\"]\n[1,10,100]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, target, words, costs):\n        \"\"\"\n        :type target: str\n        :type words: List[str]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumCost(char* target, char** words, int wordsSize, int* costs, int costsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(string target, string[] words, int[] costs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function(target, words, costs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumCost(target: string, words: string[], costs: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @param String[] $words\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minimumCost($target, $words, $costs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ target: String, _ words: [String], _ costs: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(target: String, words: Array<String>, costs: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumCost(String target, List<String> words, List<int> costs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumCost(target string, words []string, costs []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} target\n# @param {String[]} words\n# @param {Integer[]} costs\n# @return {Integer}\ndef minimum_cost(target, words, costs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumCost(target: String, words: Array[String], costs: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-cost target words costs)\n  (-> string? (listof string?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_cost(Target :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()], Costs :: [integer()]) -> integer().\nminimum_cost(Target, Words, Costs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(target :: String.t, words :: [String.t], costs :: [integer]) :: integer\n  def minimum_cost(target, words, costs) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "isPaidOnly": false}]}