{"question_id": "2771", "problem_slug": "throttle", "problem_title": "Throttle", "content": "Given a function fn and a time in milliseconds t, return a throttled version of that function.\nA throttled function is first called without delay and then, for a time interval of t milliseconds, can't be executed but should store the latest function arguments provided to call fn with them after the end of the delay.\nFor instance, t = 50ms, and the function was called at 30ms, 40ms, and 60ms.\nAt 30ms, without delay, the throttled function fn should be called with the arguments, and calling the throttled function fn should be blocked for the following t milliseconds.\nAt 40ms, the function should just save arguments.\nAt 60ms, arguments should overwrite currently stored arguments from the second call because the second and third calls are made before 80ms. Once the delay has passed, the throttled function fn should be called with the latest arguments provided during the delay period, and it should also create another delay period of 80ms + t.\nThe above diagram shows how throttle will transform events. Each rectangle represents 100ms and the throttle time is 400ms. Each color represents a different set of inputs.\n \nExample 1:\n\nInput: \nt = 100, \ncalls = [\n  {\"t\":20,\"inputs\":[1]}\n]\nOutput: [{\"t\":20,\"inputs\":[1]}]\nExplanation: The 1st call is always called without delay\n\nExample 2:\n\nInput: \nt = 50, \ncalls = [\n  {\"t\":50,\"inputs\":[1]},\n  {\"t\":75,\"inputs\":[2]}\n]\nOutput: [{\"t\":50,\"inputs\":[1]},{\"t\":100,\"inputs\":[2]}]\nExplanation: \nThe 1st is called a function with arguments (1) without delay.\nThe 2nd is called at 75ms, within the delay period because 50ms + 50ms = 100ms, so the next call can be reached at 100ms. Therefore, we save arguments from the 2nd call to use them at the callback of the 1st call.\n\nExample 3:\n\nInput: \nt = 70, \ncalls = [\n  {\"t\":50,\"inputs\":[1]},\n  {\"t\":75,\"inputs\":[2]},\n  {\"t\":90,\"inputs\":[8]},\n  {\"t\": 140, \"inputs\":[5,7]},\n  {\"t\": 300, \"inputs\": [9,4]}\n]\nOutput: [{\"t\":50,\"inputs\":[1]},{\"t\":120,\"inputs\":[8]},{\"t\":190,\"inputs\":[5,7]},{\"t\":300,\"inputs\":[9,4]}]\nExplanation: \nThe 1st is called a function with arguments (1) without delay.\nThe 2nd is called at 75ms within the delay period because 50ms + 70ms = 120ms, so it should only save arguments. \nThe 3rd is also called within the delay period, and because we need just the latest function arguments, we overwrite previous ones. After the delay period, we do a callback at 120ms with saved arguments. That callback makes another delay period of 120ms + 70ms = 190ms so that the next function can be called at 190ms.\nThe 4th is called at 140ms in the delay period, so it should be called as a callback at 190ms. That will create another delay period of 190ms + 70ms = 260ms.\nThe 5th is called at 300ms, but it is after 260ms, so it should be called immediately and should create another delay period of 300ms + 70ms = 370ms.\n \nConstraints:\n\n0 <= t <= 1000\n1 <= calls.length <= 10\n0 <= calls[i].t <= 1000\n0 <= calls[i].inputs[j], calls[i].inputs.length <= 10\n\n", "hints": ["Store a variable for currArguments.", "If no timeout is in progress, immediately execute the function and create a timeout. If a timeout is in progress, set the currArguments to the new arguments.", "When the timeout is done: if currArguments is null, do nothing. Otherwise, execute the function with currArguments and create another timeout."], "exampleTestcases": "100\n[{\"t\":20,\"inputs\":[1]}]\n50\n[{\"t\":50,\"inputs\":[1]},{\"t\":75,\"inputs\":[2]}]\n70\n[{\"t\":50,\"inputs\":[1]},{\"t\":75,\"inputs\":[2]},{\"t\":90,\"inputs\":[8]},{\"t\": 140, \"inputs\":[5,7]},{\"t\": 300, \"inputs\": [9,4]}]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Function} fn\n * @param {number} t\n * @return {Function}\n */\nvar throttle = function(fn, t) {\n    \n    return function(...args) {\n        \n    }\n};\n\n/**\n * const throttled = throttle(console.log, 100);\n * throttled(\"log\"); // logged immediately.\n * throttled(\"log\"); // logged at t=100ms.\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type F = (...args: number[]) => void\n\nfunction throttle(fn: F, t: number): F {\n    \n    return function (...args) {\n        \n    }\n};\n\n/**\n * const throttled = throttle(console.log, 100);\n * throttled(\"log\"); // logged immediately.\n * throttled(\"log\"); // logged at t=100ms.\n */"}}}