{"question_id": "351", "problem_slug": "android-unlock-patterns", "problem_title": "Android Unlock Patterns", "content": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\nAll the dots in the sequence are distinct.\nIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\nFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\nHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\n\n\n\nHere are some example valid and invalid unlock patterns:\n\n\nThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\nThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\nThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\nThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\n\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n \nExample 1:\n\nInput: m = 1, n = 1\nOutput: 9\n\nExample 2:\n\nInput: m = 1, n = 2\nOutput: 65\n\n \nConstraints:\n\n1 <= m, n <= 9\n\n", "hints": [], "exampleTestcases": "1\n1\n1\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPatterns(int m, int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfPatterns(int m, int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfPatterns(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfPatterns(self, m: int, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfPatterns(int m, int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPatterns(int m, int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar numberOfPatterns = function(m, n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfPatterns(m: number, n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function numberOfPatterns($m, $n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfPatterns(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPatterns(m: Int, n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfPatterns(int m, int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfPatterns(m int, n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef number_of_patterns(m, n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfPatterns(m: Int, n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_patterns(m: i32, n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-patterns m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_patterns(M :: integer(), N :: integer()) -> integer().\nnumber_of_patterns(M, N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_patterns(m :: integer, n :: integer) :: integer\n  def number_of_patterns(m, n) do\n    \n  end\nend"}}}