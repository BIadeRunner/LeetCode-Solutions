{"question_id": "2300", "problem_slug": "construct-string-with-repeat-limit", "problem_title": "Construct String With Repeat Limit", "content": "You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.\nReturn the lexicographically largest repeatLimitedString possible.\nA string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.\n \nExample 1:\n\nInput: s = \"cczazcc\", repeatLimit = 3\nOutput: \"zzcccac\"\nExplanation: We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.\n\nExample 2:\n\nInput: s = \"aababab\", repeatLimit = 2\nOutput: \"bbabaa\"\nExplanation: We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.\n\n \nConstraints:\n\n1 <= repeatLimit <= s.length <= 105\ns consists of lowercase English letters.\n\n", "hints": ["Start constructing the string in descending order of characters.", "When repeatLimit is reached, pick the next largest character."], "exampleTestcases": "\"cczazcc\"\n3\n\"aababab\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string repeatLimitedString(string s, int repeatLimit) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String repeatLimitedString(String s, int repeatLimit) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def repeatLimitedString(self, s, repeatLimit):\n        \"\"\"\n        :type s: str\n        :type repeatLimit: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* repeatLimitedString(char* s, int repeatLimit) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string RepeatLimitedString(string s, int repeatLimit) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} repeatLimit\n * @return {string}\n */\nvar repeatLimitedString = function(s, repeatLimit) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function repeatLimitedString(s: string, repeatLimit: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $repeatLimit\n     * @return String\n     */\n    function repeatLimitedString($s, $repeatLimit) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func repeatLimitedString(_ s: String, _ repeatLimit: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun repeatLimitedString(s: String, repeatLimit: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String repeatLimitedString(String s, int repeatLimit) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func repeatLimitedString(s string, repeatLimit int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} repeat_limit\n# @return {String}\ndef repeat_limited_string(s, repeat_limit)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def repeatLimitedString(s: String, repeatLimit: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn repeat_limited_string(s: String, repeat_limit: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (repeat-limited-string s repeatLimit)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec repeat_limited_string(S :: unicode:unicode_binary(), RepeatLimit :: integer()) -> unicode:unicode_binary().\nrepeat_limited_string(S, RepeatLimit) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec repeat_limited_string(s :: String.t, repeat_limit :: integer) :: String.t\n  def repeat_limited_string(s, repeat_limit) do\n    \n  end\nend"}}}