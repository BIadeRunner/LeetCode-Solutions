{"question_id": "3447", "problem_slug": "clear-digits", "problem_title": "Clear Digits", "content": "You are given a string s.\nYour task is to remove all digits by doing this operation repeatedly:\n\nDelete the first digit and the closest non-digit character to its left.\n\nReturn the resulting string after removing all digits.\n \nExample 1:\n\nInput: s = \"abc\"\nOutput: \"abc\"\nExplanation:\nThere is no digit in the string.\n\nExample 2:\n\nInput: s = \"cb34\"\nOutput: \"\"\nExplanation:\nFirst, we apply the operation on s[2], and s becomes \"c4\".\nThen we apply the operation on s[1], and s becomes \"\".\n\n \nConstraints:\n\n1 <= s.length <= 100\ns consists only of lowercase English letters and digits.\nThe input is generated such that it is possible to delete all digits.\n\n", "hints": ["Process string <code>s</code> from left to right, if <code>s[i]</code> is a digit, mark the nearest unmarked non-digit index to its left.", "Delete all digits and all marked characters."], "exampleTestcases": "\"abc\"\n\"cb34\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string clearDigits(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String clearDigits(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def clearDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def clearDigits(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* clearDigits(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ClearDigits(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar clearDigits = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function clearDigits(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function clearDigits($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func clearDigits(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun clearDigits(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String clearDigits(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func clearDigits(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef clear_digits(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def clearDigits(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn clear_digits(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (clear-digits s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec clear_digits(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nclear_digits(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec clear_digits(s :: String.t) :: String.t\n  def clear_digits(s) do\n    \n  end\nend"}}}