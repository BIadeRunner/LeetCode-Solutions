{"questionId": "1896", "acRate": 41.07984183072522, "difficulty": "Hard", "freqBar": 14.678395413873327, "frontendQuestionId": "1770", "paidOnly": false, "status": "ac", "title": "Maximum Score from Performing Multiplication Operations", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "maximum-score-from-performing-multiplication-operations", "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums</code> and <code>multipliers</code><strong> </strong>of size <code>n</code> and <code>m</code> respectively, where <code>n &gt;= m</code>.</p>\n\n<p>You begin with a score of <code>0</code>. You want to perform <strong>exactly</strong> <code>m</code> operations. On the <code>i<sup>th</sup></code> operation (<strong>0-indexed</strong>) you will:</p>\n\n<ul>\n    <li>Choose one integer <code>x</code> from <strong>either the start or the end </strong>of the array <code>nums</code>.</li>\n    <li>Add <code>multipliers[i] * x</code> to your score.\n    <ul>\n        <li>Note that <code>multipliers[0]</code> corresponds to the first operation, <code>multipliers[1]</code> to the second operation, and so on.</li>\n    </ul>\n    </li>\n    <li>Remove <code>x</code> from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> score after performing </em><code>m</code> <em>operations.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], multipliers = [3,2,1]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong>&nbsp;An optimal solution is as follows:\n- Choose from the end, [1,2,<strong><u>3</u></strong>], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,<strong><u>2</u></strong>], adding 2 * 2 = 4 to the score.\n- Choose from the end, [<strong><u>1</u></strong>], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\n<strong>Output:</strong> 102\n<strong>Explanation: </strong>An optimal solution is as follows:\n- Choose from the start, [<u><strong>-5</strong></u>,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [<strong><u>-3</u></strong>,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [<strong><u>-3</u></strong>,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,<strong><u>1</u></strong>], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,<strong><u>7</u></strong>], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == multipliers.length</code></li>\n\t<li><code>1 &lt;= m &lt;= 300</code></li>\n\t<li><code>m &lt;= n &lt;= 10<sup>5</sup></code><code> </code></li>\n\t<li><code>-1000 &lt;= nums[i], multipliers[i] &lt;= 1000</code></li>\n</ul>\n", "hints": ["At first glance, the solution seems to be greedy, but if you try to greedily take the largest value from the beginning or the end, this will not be optimal.", "You should try all scenarios but this will be costly.", "Memoizing the pre-visited states while trying all the possible scenarios will reduce the complexity, and hence dp is a perfect choice here."], "exampleTestcases": "[1,2,3]\n[3,2,1]\n[-5,-3,-3,-2,7,1]\n[-10,-5,3,4,6]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumScore(vector<int>& nums, vector<int>& multipliers) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumScore(int[] nums, int[] multipliers) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumScore(self, nums, multipliers):\n        \"\"\"\n        :type nums: List[int]\n        :type multipliers: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumScore(int* nums, int numsSize, int* multipliers, int multipliersSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumScore(int[] nums, int[] multipliers) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} multipliers\n * @return {number}\n */\nvar maximumScore = function(nums, multipliers) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumScore(nums: number[], multipliers: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $multipliers\n     * @return Integer\n     */\n    function maximumScore($nums, $multipliers) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumScore(_ nums: [Int], _ multipliers: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumScore(nums: IntArray, multipliers: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumScore(List<int> nums, List<int> multipliers) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumScore(nums []int, multipliers []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} multipliers\n# @return {Integer}\ndef maximum_score(nums, multipliers)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumScore(nums: Array[Int], multipliers: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_score(nums: Vec<i32>, multipliers: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-score nums multipliers)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_score(Nums :: [integer()], Multipliers :: [integer()]) -> integer().\nmaximum_score(Nums, Multipliers) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_score(nums :: [integer], multipliers :: [integer]) :: integer\n  def maximum_score(nums, multipliers) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-points-you-can-obtain-from-cards", "title": "Maximum Points You Can Obtain from Cards", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "stone-game-vii", "title": "Stone Game VII", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-spending-after-buying-items", "title": "Maximum Spending After Buying Items", "isPaidOnly": false}]}