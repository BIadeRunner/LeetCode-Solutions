{"questionId": "3264", "acRate": 32.00876986535531, "difficulty": "Medium", "freqBar": 50.07997302661619, "frontendQuestionId": "3207", "paidOnly": false, "status": "ac", "title": "Maximum Points After Enemy Battles", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "maximum-points-after-enemy-battles", "content": "<p>You are given an integer array <code>enemyEnergies</code> denoting the energy values of various enemies.</p>\n\n<p>You are also given an integer <code>currentEnergy</code> denoting the amount of energy you have initially.</p>\n\n<p>You start with 0 points, and all the enemies are unmarked initially.</p>\n\n<p>You can perform <strong>either</strong> of the following operations <strong>zero </strong>or multiple times to gain points:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> enemy, <code>i</code>, such that <code>currentEnergy &gt;= enemyEnergies[i]</code>. By choosing this option:\n\n\t<ul>\n\t\t<li>You gain 1 point.</li>\n\t\t<li>Your energy is reduced by the enemy&#39;s energy, i.e. <code>currentEnergy = currentEnergy - enemyEnergies[i]</code>.</li>\n\t</ul>\n\t</li>\n\t<li>If you have <strong>at least</strong> 1 point, you can choose an <strong>unmarked</strong> enemy, <code>i</code>. By choosing this option:\n\t<ul>\n\t\t<li>Your energy increases by the enemy&#39;s energy, i.e. <code>currentEnergy = currentEnergy + enemyEnergies[i]</code>.</li>\n\t\t<li>The <font face=\"monospace\">e</font>nemy <code>i</code> is <strong>marked</strong>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum</strong> points you can get in the end by optimally performing operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">enemyEnergies = [3,2,2], currentEnergy = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following operations can be performed to get 3 points, which is the maximum:</p>\n\n<ul>\n\t<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 1</code>, and <code>currentEnergy = 0</code>.</li>\n\t<li>Second operation on enemy 0: <code>currentEnergy</code> increases by 3, and enemy 0 is marked. So, <code>points = 1</code>, <code>currentEnergy = 3</code>, and marked enemies = <code>[0]</code>.</li>\n\t<li>First operation on enemy 2: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 2</code>, <code>currentEnergy = 1</code>, and marked enemies = <code>[0]</code>.</li>\n\t<li>Second operation on enemy 2: <code>currentEnergy</code> increases by 2, and enemy 2 is marked. So, <code>points = 2</code>, <code>currentEnergy = 3</code>, and marked enemies = <code>[0, 2]</code>.</li>\n\t<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 3</code>, <code>currentEnergy = 1</code>, and marked enemies = <code>[0, 2]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">enemyEnergies = </span>[2]<span class=\"example-io\">, currentEnergy = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>Performing the first operation 5 times on enemy 0 results in the maximum number of points.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= enemyEnergies.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= enemyEnergies[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= currentEnergy &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["The problem can be solved greedily.", "Mark all the others except the smallest one first.", "Use the smallest one to increase the energy.", "Note that the initial energy should be no less than the smallest enemy."], "exampleTestcases": "[3,2,2]\n2\n[2]\n10", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumPoints(vector<int>& enemyEnergies, int currentEnergy) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maximumPoints(int[] enemyEnergies, int currentEnergy) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumPoints(self, enemyEnergies, currentEnergy):\n        \"\"\"\n        :type enemyEnergies: List[int]\n        :type currentEnergy: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumPoints(self, enemyEnergies: List[int], currentEnergy: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maximumPoints(int* enemyEnergies, int enemyEnergiesSize, int currentEnergy) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaximumPoints(int[] enemyEnergies, int currentEnergy) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} enemyEnergies\n * @param {number} currentEnergy\n * @return {number}\n */\nvar maximumPoints = function(enemyEnergies, currentEnergy) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumPoints(enemyEnergies: number[], currentEnergy: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $enemyEnergies\n     * @param Integer $currentEnergy\n     * @return Integer\n     */\n    function maximumPoints($enemyEnergies, $currentEnergy) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumPoints(_ enemyEnergies: [Int], _ currentEnergy: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumPoints(enemyEnergies: IntArray, currentEnergy: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumPoints(List<int> enemyEnergies, int currentEnergy) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumPoints(enemyEnergies []int, currentEnergy int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} enemy_energies\n# @param {Integer} current_energy\n# @return {Integer}\ndef maximum_points(enemy_energies, current_energy)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumPoints(enemyEnergies: Array[Int], currentEnergy: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_points(enemy_energies: Vec<i32>, current_energy: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-points enemyEnergies currentEnergy)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_points(EnemyEnergies :: [integer()], CurrentEnergy :: integer()) -> integer().\nmaximum_points(EnemyEnergies, CurrentEnergy) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_points(enemy_energies :: [integer], current_energy :: integer) :: integer\n  def maximum_points(enemy_energies, current_energy) do\n    \n  end\nend"}], "similarQuestionList": []}