{"questionId": "1399", "acRate": 65.27333991750422, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1264", "paidOnly": true, "status": "ac", "title": "Page Recommendations", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "titleSlug": "page-recommendations", "content": "<p>Table: <code>Friendship</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user1_id      | int     |\n| user2_id      | int     |\n+---------------+---------+\n(user1_id, user2_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates that there is a friendship relation between user1_id and user2_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Likes</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| page_id     | int     |\n+-------------+---------+\n(user_id, page_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates that user_id likes page_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution&nbsp;to recommend pages to the user with <code>user_id = 1</code> using the pages that your friends liked. It should not recommend pages you already liked.</p>\n\n<p>Return result table in <strong>any order</strong> without duplicates.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 1        | 4        |\n| 2        | 3        |\n| 2        | 4        |\n| 2        | 5        |\n| 6        | 1        |\n+----------+----------+\nLikes table:\n+---------+---------+\n| user_id | page_id |\n+---------+---------+\n| 1       | 88      |\n| 2       | 23      |\n| 3       | 24      |\n| 4       | 56      |\n| 5       | 11      |\n| 6       | 33      |\n| 2       | 77      |\n| 3       | 77      |\n| 6       | 88      |\n+---------+---------+\n<strong>Output:</strong> \n+------------------+\n| recommended_page |\n+------------------+\n| 23               |\n| 24               |\n| 56               |\n| 33               |\n| 77               |\n+------------------+\n<strong>Explanation:</strong> \nUser one is friend with users 2, 3, 4 and 6.\nSuggested pages are 23 from user 2, 24 from user 3, 56 from user 3 and 33 from user 6.\nPage 77 is suggested from both user 2 and user 3.\nPage 88 is not suggested because user 1 already likes it.\n</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"],\"Likes\":[\"user_id\",\"page_id\"]},\"rows\":{\"Friendship\":[[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[6,1]],\"Likes\":[[1,88],[2,23],[3,24],[4,56],[5,11],[6,33],[2,77],[3,77],[6,88]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef page_recommendations(friendship: pd.DataFrame, likes: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "page-recommendations-ii", "title": "Page Recommendations II", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "strong-friendship", "title": "Strong Friendship", "isPaidOnly": true}]}