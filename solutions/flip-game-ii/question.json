{"questionId": "294", "acRate": 52.15877084374163, "difficulty": "Medium", "freqBar": 48.369177010116445, "frontendQuestionId": "294", "paidOnly": true, "status": "ac", "title": "Flip Game II", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}, {"name": "Game Theory", "id": "VG9waWNUYWdOb2RlOjYxMDcz", "slug": "game-theory"}], "titleSlug": "flip-game-ii", "content": "<p>You are playing a Flip Game with your friend.</p>\n\n<p>You are given a string <code>currentState</code> that contains only <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. You and your friend take turns to flip <strong>two consecutive</strong> <code>&quot;++&quot;</code> into <code>&quot;--&quot;</code>. The game ends when a person can no longer make a move, and therefore the other person will be the winner.</p>\n\n<p>Return <code>true</code> <em>if the starting player can <strong>guarantee a win</strong></em>, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> currentState = &quot;++++&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The starting player can guarantee a win by flipping the middle &quot;++&quot; to become &quot;+--+&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> currentState = &quot;+&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= currentState.length &lt;= 60</code></li>\n\t<li><code>currentState[i]</code> is either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Derive your algorithm&#39;s runtime complexity.", "hints": [], "exampleTestcases": "\"++++\"\n\"+\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canWin(string currentState) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canWin(String currentState) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canWin(self, currentState):\n        \"\"\"\n        :type currentState: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canWin(self, currentState: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canWin(char* currentState) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanWin(string currentState) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} currentState\n * @return {boolean}\n */\nvar canWin = function(currentState) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canWin(currentState: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $currentState\n     * @return Boolean\n     */\n    function canWin($currentState) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canWin(_ currentState: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canWin(currentState: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canWin(String currentState) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canWin(currentState string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} current_state\n# @return {Boolean}\ndef can_win(current_state)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canWin(currentState: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_win(current_state: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-win currentState)\n  (-> string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_win(CurrentState :: unicode:unicode_binary()) -> boolean().\ncan_win(CurrentState) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_win(current_state :: String.t) :: boolean\n  def can_win(current_state) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "nim-game", "title": "Nim Game", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "flip-game", "title": "Flip Game", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "guess-number-higher-or-lower-ii", "title": "Guess Number Higher or Lower II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "can-i-win", "title": "Can I Win", "isPaidOnly": false}]}