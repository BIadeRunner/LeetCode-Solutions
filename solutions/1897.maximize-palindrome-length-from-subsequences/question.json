{"question_id": "1897", "problem_slug": "maximize-palindrome-length-from-subsequences", "problem_title": "Maximize Palindrome Length From Subsequences", "content": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\n\nChoose some non-empty subsequence subsequence1 from word1.\nChoose some non-empty subsequence subsequence2 from word2.\nConcatenate the subsequences: subsequence1 + subsequence2, to make the string.\n\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward as well as backward.\n \nExample 1:\n\nInput: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.\nExample 2:\n\nInput: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.\nExample 3:\n\nInput: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.\n \nConstraints:\n\n1 <= word1.length, word2.length <= 1000\nword1 and word2 consist of lowercase English letters.\n\n", "hints": ["Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.", "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."], "exampleTestcases": "\"cacb\"\n\"cbba\"\n\"ab\"\n\"ab\"\n\"aa\"\n\"bb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPalindrome(string word1, string word2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestPalindrome(String word1, String word2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestPalindrome(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestPalindrome(char* word1, char* word2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestPalindrome(string word1, string word2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar longestPalindrome = function(word1, word2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestPalindrome(word1: string, word2: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function longestPalindrome($word1, $word2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestPalindrome(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindrome(word1: String, word2: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestPalindrome(String word1, String word2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestPalindrome(word1 string, word2 string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef longest_palindrome(word1, word2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestPalindrome(word1: String, word2: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome(word1: String, word2: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-palindrome word1 word2)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_palindrome(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nlongest_palindrome(Word1, Word2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_palindrome(word1 :: String.t, word2 :: String.t) :: integer\n  def longest_palindrome(word1, word2) do\n    \n  end\nend"}}}