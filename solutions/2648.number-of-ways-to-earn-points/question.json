{"question_id": "2648", "problem_slug": "number-of-ways-to-earn-points", "problem_title": "Number of Ways to Earn Points", "content": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\n\n\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\nNote that questions of the same type are indistinguishable.\n\nFor example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.\n\n \nExample 1:\n\nInput: target = 6, types = [[6,1],[3,2],[2,3]]\nOutput: 7\nExplanation: You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6\n\nExample 2:\n\nInput: target = 5, types = [[50,1],[50,2],[50,5]]\nOutput: 4\nExplanation: You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5\n\nExample 3:\n\nInput: target = 18, types = [[6,1],[3,2],[2,3]]\nOutput: 1\nExplanation: You can only earn 18 points by answering all questions.\n\n \nConstraints:\n\n1 <= target <= 1000\nn == types.length\n1 <= n <= 50\ntypes[i].length == 2\n1 <= counti, marksi <= 50\n\n", "hints": ["Use Dynamic Programming", "Let ways[i][points] be the number of ways to score a given number of points after solving some questions of the first i types.", "ways[i][points] is equal to the sum of ways[i-1][points - solved * marks[i] over 0 <= solved <= count_i"], "exampleTestcases": "6\n[[6,1],[3,2],[2,3]]\n5\n[[50,1],[50,2],[50,5]]\n18\n[[6,1],[3,2],[2,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int waysToReachTarget(int target, vector<vector<int>>& types) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int waysToReachTarget(int target, int[][] types) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def waysToReachTarget(self, target, types):\n        \"\"\"\n        :type target: int\n        :type types: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int waysToReachTarget(int target, int** types, int typesSize, int* typesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WaysToReachTarget(int target, int[][] types) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} target\n * @param {number[][]} types\n * @return {number}\n */\nvar waysToReachTarget = function(target, types) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function waysToReachTarget(target: number, types: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[][] $types\n     * @return Integer\n     */\n    function waysToReachTarget($target, $types) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func waysToReachTarget(_ target: Int, _ types: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun waysToReachTarget(target: Int, types: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int waysToReachTarget(int target, List<List<int>> types) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func waysToReachTarget(target int, types [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} target\n# @param {Integer[][]} types\n# @return {Integer}\ndef ways_to_reach_target(target, types)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def waysToReachTarget(target: Int, types: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn ways_to_reach_target(target: i32, types: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (ways-to-reach-target target types)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec ways_to_reach_target(Target :: integer(), Types :: [[integer()]]) -> integer().\nways_to_reach_target(Target, Types) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec ways_to_reach_target(target :: integer, types :: [[integer]]) :: integer\n  def ways_to_reach_target(target, types) do\n    \n  end\nend"}}}