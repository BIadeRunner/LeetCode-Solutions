{"questionId": "2882", "acRate": 34.134979027710926, "difficulty": "Medium", "freqBar": 27.077696599820918, "frontendQuestionId": "2787", "paidOnly": false, "status": "ac", "title": "Ways to Express an Integer as Sum of Powers", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "ways-to-express-an-integer-as-sum-of-powers", "content": "<p>Given two <strong>positive</strong> integers <code>n</code> and <code>x</code>.</p>\n\n<p>Return <em>the number of ways </em><code>n</code><em> can be expressed as the sum of the </em><code>x<sup>th</sup></code><em> power of <strong>unique</strong> positive integers, in other words, the number of sets of unique integers </em><code>[n<sub>1</sub>, n<sub>2</sub>, ..., n<sub>k</sub>]</code><em> where </em><code>n = n<sub>1</sub><sup>x</sup> + n<sub>2</sub><sup>x</sup> + ... + n<sub>k</sub><sup>x</sup></code><em>.</em></p>\n\n<p>Since the result can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>For example, if <code>n = 160</code> and <code>x = 3</code>, one way to express <code>n</code> is <code>n = 2<sup>3</sup> + 3<sup>3</sup> + 5<sup>3</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, x = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can express n as the following: n = 3<sup>2</sup> + 1<sup>2</sup> = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2<sup>nd</sup> power of unique integers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, x = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can express n in the following ways:\n- n = 4<sup>1</sup> = 4.\n- n = 3<sup>1</sup> + 1<sup>1</sup> = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>1 &lt;= x &lt;= 5</code></li>\n</ul>\n", "hints": ["You can use dynamic programming, where dp[k][j] represents the number of ways to express k as the sum of the x-th power of unique positive integers such that the biggest possible number we use is j.", "To calculate dp[k][j], you can iterate over the numbers smaller than j and try to use each one as a power of x to make our sum k."], "exampleTestcases": "10\n2\n4\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int n, int x) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int n, int x) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, n, x):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, n: int, x: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfWays(int n, int x) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int n, int x) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} x\n * @return {number}\n */\nvar numberOfWays = function(n, x) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfWays(n: number, x: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @return Integer\n     */\n    function numberOfWays($n, $x) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ n: Int, _ x: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(n: Int, x: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int n, int x) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfWays(n int, x int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} x\n# @return {Integer}\ndef number_of_ways(n, x)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfWays(n: Int, x: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(n: i32, x: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-ways n x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_ways(N :: integer(), X :: integer()) -> integer().\nnumber_of_ways(N, X) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(n :: integer, x :: integer) :: integer\n  def number_of_ways(n, x) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "perfect-squares", "title": "Perfect Squares", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "combination-sum-iv", "title": "Combination Sum IV", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "target-sum", "title": "Target Sum", "isPaidOnly": false}]}