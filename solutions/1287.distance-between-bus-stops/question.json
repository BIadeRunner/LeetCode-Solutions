{"question_id": "1287", "problem_slug": "distance-between-bus-stops", "problem_title": "Distance Between Bus Stops", "content": "A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.\nThe bus goes along both directions i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given start and destination stops.\n \nExample 1:\n\n\r\nInput: distance = [1,2,3,4], start = 0, destination = 1\r\nOutput: 1\r\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.\n \nExample 2:\n\n\r\nInput: distance = [1,2,3,4], start = 0, destination = 2\r\nOutput: 3\r\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\r\n\n \nExample 3:\n\n\r\nInput: distance = [1,2,3,4], start = 0, destination = 3\r\nOutput: 4\r\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\r\n\n \nConstraints:\n\n1 <= n <= 10^4\ndistance.length == n\n0 <= start, destination < n\n0 <= distance[i] <= 10^4\n", "hints": ["Find the distance between the two stops if the bus moved in clockwise or counterclockwise directions."], "exampleTestcases": "[1,2,3,4]\n0\n1\n[1,2,3,4]\n0\n2\n[1,2,3,4]\n0\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int distanceBetweenBusStops(int[] distance, int start, int destination) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def distanceBetweenBusStops(self, distance, start, destination):\n        \"\"\"\n        :type distance: List[int]\n        :type start: int\n        :type destination: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint distanceBetweenBusStops(int* distance, int distanceSize, int start, int destination){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DistanceBetweenBusStops(int[] distance, int start, int destination) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} distance\n * @param {number} start\n * @param {number} destination\n * @return {number}\n */\nvar distanceBetweenBusStops = function(distance, start, destination) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function distanceBetweenBusStops(distance: number[], start: number, destination: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $distance\n     * @param Integer $start\n     * @param Integer $destination\n     * @return Integer\n     */\n    function distanceBetweenBusStops($distance, $start, $destination) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func distanceBetweenBusStops(_ distance: [Int], _ start: Int, _ destination: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun distanceBetweenBusStops(distance: IntArray, start: Int, destination: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func distanceBetweenBusStops(distance []int, start int, destination int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} distance\n# @param {Integer} start\n# @param {Integer} destination\n# @return {Integer}\ndef distance_between_bus_stops(distance, start, destination)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def distanceBetweenBusStops(distance: Array[Int], start: Int, destination: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn distance_between_bus_stops(distance: Vec<i32>, start: i32, destination: i32) -> i32 {\n        \n    }\n}"}}}