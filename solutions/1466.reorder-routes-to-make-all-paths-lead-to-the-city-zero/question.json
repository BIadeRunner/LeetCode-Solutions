{"questionId": "1576", "acRate": 64.55883355110917, "difficulty": "Medium", "freqBar": 55.55857309349381, "frontendQuestionId": "1466", "paidOnly": false, "status": "ac", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "topicTags": [{"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "content": "<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.</p>\n\n<p>Roads are represented by <code>connections</code> where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a road from city <code>a<sub>i</sub></code> to city <code>b<sub>i</sub></code>.</p>\n\n<p>This year, there will be a big event in the capital (city <code>0</code>), and many people want to travel to this city.</p>\n\n<p>Your task consists of reorienting some roads such that each city can visit the city <code>0</code>. Return the <strong>minimum</strong> number of edges changed.</p>\n\n<p>It&#39;s <strong>guaranteed</strong> that each city can reach city <code>0</code> after reorder.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/13/sample_1_1819.png\" style=\"width: 311px; height: 189px;\" />\n<pre>\n<strong>Input:</strong> n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/13/sample_2_1819.png\" style=\"width: 509px; height: 79px;\" />\n<pre>\n<strong>Input:</strong> n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, connections = [[1,0],[2,0]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>connections.length == n - 1</code></li>\n\t<li><code>connections[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n</ul>\n", "hints": ["Treat the graph as undirected. Start a dfs from the root, if you come across an edge in the forward direction, you need to reverse the edge."], "exampleTestcases": "6\n[[0,1],[1,3],[2,3],[4,0],[4,5]]\n5\n[[1,0],[1,2],[3,2],[3,4]]\n3\n[[1,0],[2,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minReorder(int n, vector<vector<int>>& connections) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minReorder(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minReorder(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minReorder(self, n: int, connections: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minReorder(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinReorder(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar minReorder = function(n, connections) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minReorder(n: number, connections: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function minReorder($n, $connections) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minReorder(_ n: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minReorder(n: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minReorder(int n, List<List<int>> connections) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minReorder(n int, connections [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef min_reorder(n, connections)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minReorder(n: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_reorder(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-reorder n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_reorder(N :: integer(), Connections :: [[integer()]]) -> integer().\nmin_reorder(N, Connections) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_reorder(n :: integer, connections :: [[integer]]) :: integer\n  def min_reorder(n, connections) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-edge-reversals-so-every-node-is-reachable", "title": "Minimum Edge Reversals So Every Node Is Reachable", "isPaidOnly": false}]}