{"question_id": "42", "problem_slug": "trapping-rain-water", "problem_title": "Trapping Rain Water", "content": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n \nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n \nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n", "hints": [], "exampleTestcases": "[0,1,0,2,1,0,1,3,2,1,2,1]\n[4,2,0,3,2,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int trap(int* height, int heightSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function trap(height: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func trap(height []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"}}}