{"question_id": "1519", "problem_slug": "minimum-subsequence-in-non-increasing-order", "problem_title": "Minimum Subsequence in Non-Increasing Order", "content": "Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. \nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. \nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.\n \nExample 1:\n\nInput: nums = [4,3,10,9,8]\nOutput: [10,9] \nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements. \n\nExample 2:\n\nInput: nums = [4,4,7,6,7]\nOutput: [7,7,6] \nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-increasing order.  \n\n \nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 100\n\n", "hints": ["Sort elements and take each element from the largest until accomplish the conditions."], "exampleTestcases": "[4,3,10,9,8]\n[4,4,7,6,7]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> minSubsequence(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> minSubsequence(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSubsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minSubsequence(int* nums, int numsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> MinSubsequence(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar minSubsequence = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSubsequence(nums: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function minSubsequence($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSubsequence(_ nums: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSubsequence(nums: IntArray): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> minSubsequence(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSubsequence(nums []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef min_subsequence(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSubsequence(nums: Array[Int]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_subsequence(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-subsequence nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_subsequence(Nums :: [integer()]) -> [integer()].\nmin_subsequence(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_subsequence(nums :: [integer]) :: [integer]\n  def min_subsequence(nums) do\n    \n  end\nend"}}}