{"question_id": "11", "problem_slug": "container-with-most-water", "problem_title": "Container With Most Water", "content": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n \nExample 1:\n\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n\n \nConstraints:\n\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n\n", "hints": ["If you simulate the problem, it will be O(n^2) which is not efficient.", "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.", "How can you calculate the amount of water at each step?"], "exampleTestcases": "[1,8,6,2,5,4,8,3,7]\n[1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxArea(int* height, int heightSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxArea(height: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxArea(List<int> height) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxArea(height []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n    \n  end\nend"}}}