{"question_id": "3349", "problem_slug": "maximum-length-substring-with-two-occurrences", "problem_title": "Maximum Length Substring With Two Occurrences", "content": "Given a string s, return the maximum length of a substring such that it contains at most two occurrences of each character.\n \nExample 1:\n\nInput: s = \"bcbbbcba\"\nOutput: 4\nExplanation:\nThe following substring has a length of 4 and contains at most two occurrences of each character: \"bcbbbcba\".\nExample 2:\n\nInput: s = \"aaaa\"\nOutput: 2\nExplanation:\nThe following substring has a length of 2 and contains at most two occurrences of each character: \"aaaa\".\n \nConstraints:\n\n2 <= s.length <= 100\ns consists only of lowercase English letters.\n\n", "hints": ["We can try all substrings by brute-force since the constraints are very small."], "exampleTestcases": "\"bcbbbcba\"\n\"aaaa\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumLengthSubstring(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumLengthSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumLengthSubstring(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumLengthSubstring(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumLengthSubstring(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLengthSubstring = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumLengthSubstring(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLengthSubstring($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumLengthSubstring(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumLengthSubstring(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumLengthSubstring(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumLengthSubstring(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef maximum_length_substring(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumLengthSubstring(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_length_substring(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-length-substring s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_length_substring(S :: unicode:unicode_binary()) -> integer().\nmaximum_length_substring(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_length_substring(s :: String.t) :: integer\n  def maximum_length_substring(s) do\n    \n  end\nend"}}}