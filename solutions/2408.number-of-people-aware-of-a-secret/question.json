{"question_id": "2408", "problem_slug": "number-of-people-aware-of-a-secret", "problem_title": "Number of People Aware of a Secret", "content": "On day 1, one person discovers a secret.\nYou are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.\nGiven an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 6, delay = 2, forget = 4\nOutput: 5\nExplanation:\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)\n\nExample 2:\n\nInput: n = 4, delay = 1, forget = 3\nOutput: 6\nExplanation:\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)\n\n \nConstraints:\n\n2 <= n <= 1000\n1 <= delay < forget <= n\n\n", "hints": ["Let dp[i][j] be the number of people who have known the secret for exactly j + 1 days, at day i.", "If j > 0, dp[i][j] = dp[i – 1][j – 1].", "dp[i][0] = sum(dp[i – 1][j]) for j in [delay – 1, forget – 2]."], "exampleTestcases": "6\n2\n4\n4\n1\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int peopleAwareOfSecret(int n, int delay, int forget) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int peopleAwareOfSecret(int n, int delay, int forget) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def peopleAwareOfSecret(self, n, delay, forget):\n        \"\"\"\n        :type n: int\n        :type delay: int\n        :type forget: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int peopleAwareOfSecret(int n, int delay, int forget) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PeopleAwareOfSecret(int n, int delay, int forget) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} delay\n * @param {number} forget\n * @return {number}\n */\nvar peopleAwareOfSecret = function(n, delay, forget) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function peopleAwareOfSecret(n: number, delay: number, forget: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $delay\n     * @param Integer $forget\n     * @return Integer\n     */\n    function peopleAwareOfSecret($n, $delay, $forget) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func peopleAwareOfSecret(_ n: Int, _ delay: Int, _ forget: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun peopleAwareOfSecret(n: Int, delay: Int, forget: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int peopleAwareOfSecret(int n, int delay, int forget) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func peopleAwareOfSecret(n int, delay int, forget int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} delay\n# @param {Integer} forget\n# @return {Integer}\ndef people_aware_of_secret(n, delay, forget)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def peopleAwareOfSecret(n: Int, delay: Int, forget: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn people_aware_of_secret(n: i32, delay: i32, forget: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (people-aware-of-secret n delay forget)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec people_aware_of_secret(N :: integer(), Delay :: integer(), Forget :: integer()) -> integer().\npeople_aware_of_secret(N, Delay, Forget) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec people_aware_of_secret(n :: integer, delay :: integer, forget :: integer) :: integer\n  def people_aware_of_secret(n, delay, forget) do\n    \n  end\nend"}}}