{"question_id": "1565", "problem_slug": "evaluate-boolean-expression", "problem_title": "Evaluate Boolean Expression", "content": "Table Variables:\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| name          | varchar |\n| value         | int     |\n+---------------+---------+\nIn SQL, name is the primary key for this table.\nThis table contains the stored variables and their values.\n\n \nTable Expressions:\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| left_operand  | varchar |\n| operator      | enum    |\n| right_operand | varchar |\n+---------------+---------+\nIn SQL, (left_operand, operator, right_operand) is the primary key for this table.\nThis table contains a boolean expression that should be evaluated.\noperator is an enum that takes one of the values ('<', '>', '=')\nThe values of left_operand and right_operand are guaranteed to be in the Variables table.\n\n \nEvaluate the boolean expressions in Expressions table.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nVariables table:\n+------+-------+\n| name | value |\n+------+-------+\n| x    | 66    |\n| y    | 77    |\n+------+-------+\nExpressions table:\n+--------------+----------+---------------+\n| left_operand | operator | right_operand |\n+--------------+----------+---------------+\n| x            | >        | y             |\n| x            | <        | y             |\n| x            | =        | y             |\n| y            | >        | x             |\n| y            | <        | x             |\n| x            | =        | x             |\n+--------------+----------+---------------+\nOutput: \n+--------------+----------+---------------+-------+\n| left_operand | operator | right_operand | value |\n+--------------+----------+---------------+-------+\n| x            | >        | y             | false |\n| x            | <        | y             | true  |\n| x            | =        | y             | false |\n| y            | >        | x             | true  |\n| y            | <        | x             | false |\n| x            | =        | x             | true  |\n+--------------+----------+---------------+-------+\nExplanation: \nAs shown, you need to find the value of each boolean expression in the table using the variables table.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Variables\":[\"name\",\"value\"],\"Expressions\":[\"left_operand\",\"operator\",\"right_operand\"]},\"rows\":{\"Variables\":[[\"x\",66],[\"y\",77]],\"Expressions\":[[\"x\",\">\",\"y\"],[\"x\",\"<\",\"y\"],[\"x\",\"=\",\"y\"],[\"y\",\">\",\"x\"],[\"y\",\"<\",\"x\"],[\"x\",\"=\",\"x\"]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef eval_expression(variables: pd.DataFrame, expressions: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}