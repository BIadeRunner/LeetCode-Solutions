{"question_id": "3473", "problem_slug": "calculate-parking-fees-and-duration", "problem_title": "Calculate Parking Fees and Duration", "content": "Table: ParkingTransactions\n\n+--------------+-----------+\n| Column Name  | Type      |\n+--------------+-----------+\n| lot_id       | int       |\n| car_id       | int       |\n| entry_time   | datetime  |\n| exit_time    | datetime  |\n| fee_paid     | decimal   |\n+--------------+-----------+\n(lot_id, car_id, entry_time) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the ID of the parking lot, the ID of the car, the entry and exit times, and the fee paid for the parking duration.\n\nWrite a solution to find the total parking fee paid by each car across all parking lots, and the average hourly fee (rounded to 2 decimal places) paid by each car. Also, find the parking lot where each car spent the most total time.\nReturn the result table ordered by car_id in ascending  order.\nNote: Test cases are generated in such a way that an individual car cannot be in multiple parking lots at the same time.\nThe result format is in the following example.\nÂ \nExample:\n\nInput:\nParkingTransactions table:\n\n+--------+--------+---------------------+---------------------+----------+\n| lot_id | car_id | entry_time          | exit_time           | fee_paid |\n+--------+--------+---------------------+---------------------+----------+\n| 1      | 1001   | 2023-06-01 08:00:00 | 2023-06-01 10:30:00 | 5.00     |\n| 1      | 1001   | 2023-06-02 11:00:00 | 2023-06-02 12:45:00 | 3.00     |\n| 2      | 1001   | 2023-06-01 10:45:00 | 2023-06-01 12:00:00 | 6.00     |\n| 2      | 1002   | 2023-06-01 09:00:00 | 2023-06-01 11:30:00 | 4.00     |\n| 3      | 1001   | 2023-06-03 07:00:00 | 2023-06-03 09:00:00 | 4.00     |\n| 3      | 1002   | 2023-06-02 12:00:00 | 2023-06-02 14:00:00 | 2.00     |\n+--------+--------+---------------------+---------------------+----------+\n\nOutput:\n\n+--------+----------------+----------------+---------------+\n| car_id | total_fee_paid | avg_hourly_fee | most_time_lot |\n+--------+----------------+----------------+---------------+\n| 1001   | 18.00          | 2.40           | 1             |\n| 1002   | 6.00           | 1.33           | 2             |\n+--------+----------------+----------------+---------------+\n\nExplanation:\n\nFor car ID 1001:\n\t\nFrom 2023-06-01 08:00:00 to 2023-06-01 10:30:00 in lot 1: 2.5 hours, fee 5.00\nFrom 2023-06-02 11:00:00 to 2023-06-02 12:45:00 in lot 1: 1.75 hours, fee 3.00\nFrom 2023-06-01 10:45:00 to 2023-06-01 12:00:00 in lot 2: 1.25 hours, fee 6.00\nFrom 2023-06-03 07:00:00 to 2023-06-03 09:00:00 in lot 3: 2 hours, fee 4.00\n\n\tTotal fee paid: 18.00, total hours: 7.5, average hourly fee: 2.40, most time spent in lot 1: 4.25 hours.\nFor car ID 1002:\n\t\nFrom 2023-06-01 09:00:00 to 2023-06-01 11:30:00 in lot 2: 2.5 hours, fee 4.00\nFrom 2023-06-02 12:00:00 to 2023-06-02 14:00:00 in lot 3: 2 hours, fee 2.00\n\n\tTotal fee paid: 6.00, total hours: 4.5, average hourly fee: 1.33, most time spent in lot 2: 2.5 hours.\n\nNote: Output table is ordered by car_id in ascending order.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"ParkingTransactions\":[\"lot_id\",\"car_id\",\"entry_time\",\"exit_time\",\"fee_paid\"]},\"rows\":{\"ParkingTransactions\":[[1,1001,\"2023-06-01 08:00:00\",\"2023-06-01 10:30:00\",5.00],[1,1001,\"2023-06-02 11:00:00\",\"2023-06-02 12:45:00\",3.00],[2,1001,\"2023-06-01 10:45:00\",\"2023-06-01 12:00:00\",6.00],[2,1002,\"2023-06-01 09:00:00\",\"2023-06-01 11:30:00\",4.00],[3,1001,\"2023-06-03 07:00:00\",\"2023-06-03 09:00:00\",4.00],[3,1002,\"2023-06-02 12:00:00\",\"2023-06-02 14:00:00\",2.00]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef calculate_fees_and_duration(parking_transactions: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}