{"question_id": "1680", "problem_slug": "count-all-possible-routes", "problem_title": "Count All Possible Routes", "content": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3\n\nExample 2:\n\nInput: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5\n\nExample 3:\n\nInput: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n\n \nConstraints:\n\n2 <= locations.length <= 100\n1 <= locations[i] <= 109\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n1 <= fuel <= 200\n\n", "hints": ["Use dynamic programming to solve this problem with each state defined by the city index and fuel left.", "Since the array contains distinct integers fuel will always be spent in each move and so there can be no cycles."], "exampleTestcases": "[2,3,6,8,4]\n1\n3\n5\n[4,3,1]\n1\n0\n6\n[5,2,1]\n0\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countRoutes(int[] locations, int start, int finish, int fuel) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countRoutes(self, locations, start, finish, fuel):\n        \"\"\"\n        :type locations: List[int]\n        :type start: int\n        :type finish: int\n        :type fuel: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countRoutes(int* locations, int locationsSize, int start, int finish, int fuel) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountRoutes(int[] locations, int start, int finish, int fuel) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} locations\n * @param {number} start\n * @param {number} finish\n * @param {number} fuel\n * @return {number}\n */\nvar countRoutes = function(locations, start, finish, fuel) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countRoutes(locations: number[], start: number, finish: number, fuel: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $locations\n     * @param Integer $start\n     * @param Integer $finish\n     * @param Integer $fuel\n     * @return Integer\n     */\n    function countRoutes($locations, $start, $finish, $fuel) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countRoutes(_ locations: [Int], _ start: Int, _ finish: Int, _ fuel: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countRoutes(locations: IntArray, start: Int, finish: Int, fuel: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countRoutes(List<int> locations, int start, int finish, int fuel) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countRoutes(locations []int, start int, finish int, fuel int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} locations\n# @param {Integer} start\n# @param {Integer} finish\n# @param {Integer} fuel\n# @return {Integer}\ndef count_routes(locations, start, finish, fuel)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countRoutes(locations: Array[Int], start: Int, finish: Int, fuel: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_routes(locations: Vec<i32>, start: i32, finish: i32, fuel: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-routes locations start finish fuel)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_routes(Locations :: [integer()], Start :: integer(), Finish :: integer(), Fuel :: integer()) -> integer().\ncount_routes(Locations, Start, Finish, Fuel) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_routes(locations :: [integer], start :: integer, finish :: integer, fuel :: integer) :: integer\n  def count_routes(locations, start, finish, fuel) do\n    \n  end\nend"}}}