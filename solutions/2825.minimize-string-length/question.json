{"question_id": "2825", "problem_slug": "minimize-string-length", "problem_title": "Minimize String Length", "content": "Given a string s, you have two types of operation:\n\nChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if exists).\nChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the right of i (if exists).\n\nYour task is to minimize the length of s by performing the above operations zero or more times.\nReturn an integer denoting the length of the minimized string.\n \nExample 1:\n\nInput: s = \"aaabc\"\nOutput: 3\nExplanation:\n\nOperation 2: we choose i = 1 so c is 'a', then we remove s[2] as it is closest 'a' character to the right of s[1].\ns becomes \"aabc\" after this.\nOperation 1: we choose i = 1 so c is 'a', then we remove s[0] as it is closest 'a' character to the left of s[1].\ns becomes \"abc\" after this.\n\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: 3\nExplanation:\n\nOperation 1: we choose i = 2 so c is 'b', then we remove s[1] as it is closest 'b' character to the left of s[1].\ns becomes \"cbd\" after this.\n\n\nExample 3:\n\nInput: s = \"baadccab\"\nOutput: 4\nExplanation:\n\nOperation 1: we choose i = 6 so c is 'a', then we remove s[2] as it is closest 'a' character to the left of s[6].\ns becomes \"badccab\" after this.\nOperation 2: we choose i = 0 so c is 'b', then we remove s[6] as it is closest 'b' character to the right of s[0].\ns becomes \"badcca\" fter this.\nOperation 2: we choose i = 3 so c is 'c', then we remove s[4] as it is closest 'c' character to the right of s[3].\ns becomes \"badca\" after this.\nOperation 1: we choose i = 4 so c is 'a', then we remove s[1] as it is closest 'a' character to the left of s[4].\ns becomes \"bdca\" after this.\n\n\n \nConstraints:\n\n1 <= s.length <= 100\ns contains only lowercase English letters\n\n", "hints": ["The minimized string will not contain duplicate characters.", "The minimized string will contain all distinct characters of the original string."], "exampleTestcases": "\"aaabc\"\n\"cbbd\"\n\"baadccab\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizedStringLength(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimizedStringLength(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizedStringLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizedStringLength(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimizedStringLength(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimizedStringLength(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimizedStringLength = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizedStringLength(s: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimizedStringLength($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizedStringLength(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizedStringLength(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimizedStringLength(String s) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizedStringLength(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef minimized_string_length(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizedStringLength(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimized_string_length(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimized-string-length s)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimized_string_length(S :: unicode:unicode_binary()) -> integer().\nminimized_string_length(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimized_string_length(s :: String.t) :: integer\n  def minimized_string_length(s) do\n    \n  end\nend"}}}