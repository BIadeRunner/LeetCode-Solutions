{"question_id": "785", "problem_slug": "basic-calculator-iii", "problem_title": "Basic Calculator III", "content": "Implement a basic calculator to evaluate a simple expression string.\nThe expression string contains only non-negative integers, '+', '-', '*', '/' operators, and open '(' and closing parentheses ')'. The integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n \nExample 1:\n\nInput: s = \"1+1\"\nOutput: 2\n\nExample 2:\n\nInput: s = \"6-4/2\"\nOutput: 4\n\nExample 3:\n\nInput: s = \"2*(5+5*2)/3+(6/2+8)\"\nOutput: 21\n\n \nConstraints:\n\n1 <= s <= 104\ns consists of digits, '+', '-', '*', '/', '(', and ')'.\ns is a valid expression.\n\n", "hints": [], "exampleTestcases": "\"1+1\"\n\"6-4/2\"\n\"2*(5+5*2)/3+(6/2+8)\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int calculate(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def calculate(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int calculate(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function calculate(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int calculate(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func calculate(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn calculate(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (calculate s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec calculate(S :: unicode:unicode_binary()) -> integer().\ncalculate(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec calculate(s :: String.t) :: integer\n  def calculate(s) do\n    \n  end\nend"}}}