{"questionId": "1638", "acRate": 34.66348490874542, "difficulty": "Hard", "freqBar": 34.213770810818, "frontendQuestionId": "1515", "paidOnly": false, "status": "ac", "title": "Best Position for a Service Centre", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}, {"name": "Randomized", "id": "VG9waWNUYWdOb2RlOjYxMDc1", "slug": "randomized"}], "titleSlug": "best-position-for-a-service-centre", "content": "<p>A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that <strong>the sum of the euclidean distances to all customers is minimum</strong>.</p>\n\n<p>Given an array <code>positions</code> where <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the position of the <code>ith</code> customer on the map, return <em>the minimum sum of the euclidean distances</em> to all customers.</p>\n\n<p>In other words, you need to choose the position of the service center <code>[x<sub>centre</sub>, y<sub>centre</sub>]</code> such that the following formula is minimized:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg\" />\n<p>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg\" style=\"width: 377px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> positions = [[0,1],[1,0],[1,2],[2,1]]\n<strong>Output:</strong> 4.00000\n<strong>Explanation:</strong> As shown, you can see that choosing [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg\" style=\"width: 419px; height: 419px;\" />\n<pre>\n<strong>Input:</strong> positions = [[1,1],[3,3]]\n<strong>Output:</strong> 2.82843\n<strong>Explanation:</strong> The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 50</code></li>\n\t<li><code>positions[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n</ul>\n", "hints": ["The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median.", "Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle."], "exampleTestcases": "[[0,1],[1,0],[1,2],[2,1]]\n[[1,1],[3,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double getMinDistSum(vector<vector<int>>& positions) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double getMinDistSum(int[][] positions) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getMinDistSum(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getMinDistSum(self, positions: List[List[int]]) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double getMinDistSum(int** positions, int positionsSize, int* positionsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double GetMinDistSum(int[][] positions) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} positions\n * @return {number}\n */\nvar getMinDistSum = function(positions) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getMinDistSum(positions: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $positions\n     * @return Float\n     */\n    function getMinDistSum($positions) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getMinDistSum(_ positions: [[Int]]) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getMinDistSum(positions: Array<IntArray>): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double getMinDistSum(List<List<int>> positions) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getMinDistSum(positions [][]int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} positions\n# @return {Float}\ndef get_min_dist_sum(positions)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getMinDistSum(positions: Array[Array[Int]]): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_min_dist_sum(positions: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-min-dist-sum positions)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_min_dist_sum(Positions :: [[integer()]]) -> float().\nget_min_dist_sum(Positions) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_min_dist_sum(positions :: [[integer]]) :: float\n  def get_min_dist_sum(positions) do\n    \n  end\nend"}], "similarQuestionList": []}