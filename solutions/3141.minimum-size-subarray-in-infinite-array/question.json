{"questionId": "3141", "acRate": 31.028461137832785, "difficulty": "Medium", "freqBar": 39.5140821796871, "frontendQuestionId": "2875", "paidOnly": false, "status": "ac", "title": "Minimum Size Subarray in Infinite Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "minimum-size-subarray-in-infinite-array", "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>A <strong>0-indexed</strong> array <code>infinite_nums</code> is generated by infinitely appending the elements of <code>nums</code> to itself.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> subarray of the array </em><code>infinite_nums</code><em> with a sum equal to </em><code>target</code><em>.</em> If there is no such subarray return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], target = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,3], target = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,6,8], target = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Notice that, <code>target</code> is either: A subarray of <code>nums</code>, or <code>prefix_sum[i]</code> + <code> k * sum(nums) </code> + <code>suffix_sum[j]</code> for some <code>i, j, k</code>.", "You can solve the problem for those two separate cases using hash map and prefix sums."], "exampleTestcases": "[1,2,3]\n5\n[1,1,1,2,3]\n4\n[2,4,6,8]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSizeSubarray(vector<int>& nums, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSizeSubarray(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSizeSubarray(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSizeSubarray(self, nums: List[int], target: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minSizeSubarray(int* nums, int numsSize, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSizeSubarray(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar minSizeSubarray = function(nums, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSizeSubarray(nums: number[], target: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function minSizeSubarray($nums, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSizeSubarray(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSizeSubarray(nums: IntArray, target: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minSizeSubarray(List<int> nums, int target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minSizeSubarray(nums []int, target int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef min_size_subarray(nums, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSizeSubarray(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_size_subarray(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-size-subarray nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_size_subarray(Nums :: [integer()], Target :: integer()) -> integer().\nmin_size_subarray(Nums, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_size_subarray(nums :: [integer], target :: integer) :: integer\n  def min_size_subarray(nums, target) do\n    \n  end\nend"}], "similarQuestionList": []}