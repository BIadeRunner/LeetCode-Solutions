{"question_id": "2718", "problem_slug": "minimum-operations-to-make-all-array-elements-equal", "problem_title": "Minimum Operations to Make All Array Elements Equal", "content": "You are given an array nums consisting of positive integers.\nYou are also given an integer array queries of size m. For the ith query, you want to make all of the elements of nums equal to queries[i]. You can perform the following operation on the array any number of times:\n\nIncrease or decrease an element of the array by 1.\n\nReturn an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i].\nNote that after each query the array is reset to its original state.\n \nExample 1:\n\nInput: nums = [3,1,6,8], queries = [1,5]\nOutput: [14,10]\nExplanation: For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n\nExample 2:\n\nInput: nums = [2,9,6,3], queries = [10]\nOutput: [20]\nExplanation: We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n\n \nConstraints:\n\nn == nums.length\nm == queries.length\n1 <= n, m <= 105\n1 <= nums[i], queries[i] <= 109\n\n", "hints": ["For each query, you should decrease all elements greater than queries[i] and increase all elements less than queries[i].", "The answer is the sum of absolute differences between queries[i] and every element of the array. How do you calculate that optimally?"], "exampleTestcases": "[3,1,6,8]\n[1,5]\n[2,9,6,3]\n[10]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> minOperations(vector<int>& nums, vector<int>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Long> minOperations(int[] nums, int[] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minOperations(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* minOperations(int* nums, int numsSize, int* queries, int queriesSize, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<long> MinOperations(int[] nums, int[] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @return {number[]}\n */\nvar minOperations = function(nums, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minOperations(nums: number[], queries: number[]): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @return Integer[]\n     */\n    function minOperations($nums, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minOperations(_ nums: [Int], _ queries: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minOperations(nums: IntArray, queries: IntArray): List<Long> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> minOperations(List<int> nums, List<int> queries) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minOperations(nums []int, queries []int) []int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @return {Integer[]}\ndef min_operations(nums, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minOperations(nums: Array[Int], queries: Array[Int]): List[Long] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, queries: Vec<i32>) -> Vec<i64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-operations nums queries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_operations(Nums :: [integer()], Queries :: [integer()]) -> [integer()].\nmin_operations(Nums, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], queries :: [integer]) :: [integer]\n  def min_operations(nums, queries) do\n\n  end\nend"}}}