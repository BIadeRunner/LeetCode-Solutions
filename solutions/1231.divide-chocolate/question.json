{"questionId": "1192", "acRate": 59.03652553523526, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1231", "paidOnly": true, "status": "ac", "title": "Divide Chocolate", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "divide-chocolate", "content": "<p>You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array&nbsp;<code>sweetness</code>.</p>\n\n<p>You want to share the chocolate with your <code>k</code>&nbsp;friends so you start cutting the chocolate bar into <code>k + 1</code>&nbsp;pieces using&nbsp;<code>k</code>&nbsp;cuts, each piece consists of some <strong>consecutive</strong> chunks.</p>\n\n<p>Being generous, you will eat the piece with the <strong>minimum total sweetness</strong> and give the other pieces to your friends.</p>\n\n<p>Find the <strong>maximum total sweetness</strong> of the&nbsp;piece you can get by cutting the chocolate bar optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [1,2,3,4,5,6,7,8,9], k = 5\n<strong>Output:</strong> 6\n<b>Explanation: </b>You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [5,6,7,8,9,1,2,3,4], k = 8\n<strong>Output:</strong> 1\n<b>Explanation: </b>There is only one way to cut the bar into 9 pieces.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sweetness = [1,2,2,1,2,2,1,2,2], k = 2\n<strong>Output:</strong> 5\n<b>Explanation: </b>You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt; sweetness.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= sweetness[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["After dividing the array into K+1 sub-arrays, you will pick the sub-array with the minimum sum.", "Divide the sub-array into K+1 sub-arrays such that the minimum sub-array sum is as maximum as possible.", "Use binary search with greedy check."], "exampleTestcases": "[1,2,3,4,5,6,7,8,9]\n5\n[5,6,7,8,9,1,2,3,4]\n8\n[1,2,2,1,2,2,1,2,2]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximizeSweetness(vector<int>& sweetness, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximizeSweetness(int[] sweetness, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximizeSweetness(self, sweetness, k):\n        \"\"\"\n        :type sweetness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximizeSweetness(int* sweetness, int sweetnessSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximizeSweetness(int[] sweetness, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} sweetness\n * @param {number} k\n * @return {number}\n */\nvar maximizeSweetness = function(sweetness, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximizeSweetness(sweetness: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $sweetness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximizeSweetness($sweetness, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximizeSweetness(_ sweetness: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximizeSweetness(sweetness: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximizeSweetness(List<int> sweetness, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximizeSweetness(sweetness []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} sweetness\n# @param {Integer} k\n# @return {Integer}\ndef maximize_sweetness(sweetness, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximizeSweetness(sweetness: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximize_sweetness(sweetness: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximize-sweetness sweetness k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximize_sweetness(Sweetness :: [integer()], K :: integer()) -> integer().\nmaximize_sweetness(Sweetness, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximize_sweetness(sweetness :: [integer], k :: integer) :: integer\n  def maximize_sweetness(sweetness, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "split-array-largest-sum", "title": "Split Array Largest Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "isPaidOnly": false}]}