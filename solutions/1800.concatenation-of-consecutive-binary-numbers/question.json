{"question_id": "1800", "problem_slug": "concatenation-of-consecutive-binary-numbers", "problem_title": "Concatenation of Consecutive Binary Numbers", "content": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.\n \nExample 1:\n\nInput: n = 1\nOutput: 1\nExplanation: \"1\" in binary corresponds to the decimal value 1. \n\nExample 2:\n\nInput: n = 3\nOutput: 27\nExplanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27.\n\nExample 3:\n\nInput: n = 12\nOutput: 505379714\nExplanation: The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 109 + 7, the result is 505379714.\n\n \nConstraints:\n\n1 <= n <= 105\n\n", "hints": ["Express the nth number value in a recursion formula and think about how we can do a fast evaluation."], "exampleTestcases": "1\n3\n12", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int concatenatedBinary(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int concatenatedBinary(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def concatenatedBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def concatenatedBinary(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint concatenatedBinary(int n){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ConcatenatedBinary(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar concatenatedBinary = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function concatenatedBinary(n: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function concatenatedBinary($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func concatenatedBinary(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun concatenatedBinary(n: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func concatenatedBinary(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef concatenated_binary(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def concatenatedBinary(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn concatenated_binary(n: i32) -> i32 {\n        \n    }\n}"}}}