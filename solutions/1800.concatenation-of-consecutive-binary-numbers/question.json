{"questionId": "1800", "acRate": 57.20398363198117, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1680", "paidOnly": false, "status": "ac", "title": "Concatenation of Consecutive Binary Numbers", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "concatenation-of-consecutive-binary-numbers", "content": "<p>Given an integer <code>n</code>, return <em>the <strong>decimal value</strong> of the binary string formed by concatenating the binary representations of </em><code>1</code><em> to </em><code>n</code><em> in order, <strong>modulo </strong></em><code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>&quot;1&quot; in binary corresponds to the decimal value 1. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 27\n<strong>Explanation: </strong>In binary, 1, 2, and 3 corresponds to &quot;1&quot;, &quot;10&quot;, and &quot;11&quot;.\nAfter concatenating them, we have &quot;11011&quot;, which corresponds to the decimal value 27.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12\n<strong>Output:</strong> 505379714\n<strong>Explanation</strong>: The concatenation results in &quot;1101110010111011110001001101010111100&quot;.\nThe decimal value of that is 118505380540.\nAfter modulo 10<sup>9</sup> + 7, the result is 505379714.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Express the nth number value in a recursion formula and think about how we can do a fast evaluation."], "exampleTestcases": "1\n3\n12", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int concatenatedBinary(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int concatenatedBinary(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def concatenatedBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def concatenatedBinary(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nint concatenatedBinary(int n){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ConcatenatedBinary(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar concatenatedBinary = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function concatenatedBinary(n: number): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function concatenatedBinary($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func concatenatedBinary(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun concatenatedBinary(n: Int): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func concatenatedBinary(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef concatenated_binary(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def concatenatedBinary(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn concatenated_binary(n: i32) -> i32 {\n        \n    }\n}"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-possible-number-by-binary-concatenation", "title": "Maximum Possible Number by Binary Concatenation", "isPaidOnly": false}]}