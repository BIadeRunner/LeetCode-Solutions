{"question_id": "1056", "problem_slug": "capacity-to-ship-packages-within-d-days", "problem_title": "Capacity To Ship Packages Within D Days", "content": "A conveyor belt has packages that must be shipped from one port to another within days days.\nThe ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.\n \nExample 1:\n\nInput: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n\nExample 2:\n\nInput: weights = [3,2,2,4,1,4], days = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\nExample 3:\n\nInput: weights = [1,2,3,1,1], days = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n \nConstraints:\n\n1 <= days <= weights.length <= 5 * 104\n1 <= weights[i] <= 500\n\n", "hints": ["Binary search on the answer.  We need a function possible(capacity) which returns true if and only if we can do the task in D days."], "exampleTestcases": "[1,2,3,4,5,6,7,8,9,10]\n5\n[3,2,2,4,1,4]\n3\n[1,2,3,1,1]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int days) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shipWithinDays(int[] weights, int days) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shipWithinDays(self, weights, days):\n        \"\"\"\n        :type weights: List[int]\n        :type days: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shipWithinDays(int* weights, int weightsSize, int days) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShipWithinDays(int[] weights, int days) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} weights\n * @param {number} days\n * @return {number}\n */\nvar shipWithinDays = function(weights, days) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shipWithinDays(weights: number[], days: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $weights\n     * @param Integer $days\n     * @return Integer\n     */\n    function shipWithinDays($weights, $days) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shipWithinDays(_ weights: [Int], _ days: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shipWithinDays(weights: IntArray, days: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shipWithinDays(List<int> weights, int days) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shipWithinDays(weights []int, days int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} weights\n# @param {Integer} days\n# @return {Integer}\ndef ship_within_days(weights, days)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shipWithinDays(weights: Array[Int], days: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn ship_within_days(weights: Vec<i32>, days: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (ship-within-days weights days)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec ship_within_days(Weights :: [integer()], Days :: integer()) -> integer().\nship_within_days(Weights, Days) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec ship_within_days(weights :: [integer], days :: integer) :: integer\n  def ship_within_days(weights, days) do\n    \n  end\nend"}}}