{"question_id": "1057", "problem_slug": "numbers-with-repeated-digits", "problem_title": "Numbers With Repeated Digits", "content": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.\n \nExample 1:\n\nInput: n = 20\nOutput: 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.\n\nExample 2:\n\nInput: n = 100\nOutput: 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n\nExample 3:\n\nInput: n = 1000\nOutput: 262\n\n \nConstraints:\n\n1 <= n <= 109\n\n", "hints": ["How many numbers with no duplicate digits?  How many numbers with K digits and no duplicates?", "How many numbers with same length as N?  How many numbers with same prefix as N?"], "exampleTestcases": "20\n100\n1000", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numDupDigitsAtMostN(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numDupDigitsAtMostN(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numDupDigitsAtMostN(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numDupDigitsAtMostN(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumDupDigitsAtMostN(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numDupDigitsAtMostN = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numDupDigitsAtMostN(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numDupDigitsAtMostN($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numDupDigitsAtMostN(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numDupDigitsAtMostN(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numDupDigitsAtMostN(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numDupDigitsAtMostN(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef num_dup_digits_at_most_n(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numDupDigitsAtMostN(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_dup_digits_at_most_n(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-dup-digits-at-most-n n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_dup_digits_at_most_n(N :: integer()) -> integer().\nnum_dup_digits_at_most_n(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_dup_digits_at_most_n(n :: integer) :: integer\n  def num_dup_digits_at_most_n(n) do\n    \n  end\nend"}}}