{"question_id": "550", "problem_slug": "shortest-path-to-get-food", "problem_title": "Shortest Path to Get Food", "content": "You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.\nYou are given an m x n character matrix, grid, of these different types of cells:\n\n'*' is your location. There is exactly one '*' cell.\n'#' is a food cell. There may be multiple food cells.\n'O' is free space, and you can travel through these cells.\n'X' is an obstacle, and you cannot travel through these cells.\n\nYou can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.\nReturn the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return -1.\n \nExample 1:\n\n\nInput: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"O\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: 3\nExplanation: It takes 3 steps to reach the food.\n\nExample 2:\n\n\nInput: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"#\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: -1\nExplanation: It is not possible to reach the food.\n\nExample 3:\n\n\nInput: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"X\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"X\",\"O\",\"O\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: 6\nExplanation: There can be multiple food cells. It only takes 6 steps to reach the bottom food.\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\ngrid[row][col] is '*', 'X', 'O', or '#'.\nThe grid contains exactly one '*'.\n\n", "hints": ["Run BFS starting from the '*' position.", "Keep the current number of the steps as a state in the queue.", "The first time you reach a food, return the number of steps as the answer.", "In case the queue is empty and you still did not manage to reach a food, return -1."], "exampleTestcases": "[[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"O\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]\n[[\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"#\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\"]]\n[[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"X\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"X\",\"O\",\"O\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int getFood(vector<vector<char>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int getFood(char[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getFood(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getFood(self, grid: List[List[str]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int getFood(char** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int GetFood(char[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar getFood = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getFood(grid: string[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function getFood($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getFood(_ grid: [[Character]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getFood(grid: Array<CharArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int getFood(List<List<String>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getFood(grid [][]byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef get_food(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getFood(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_food(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-food grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_food(Grid :: [[char()]]) -> integer().\nget_food(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_food(grid :: [[char]]) :: integer\n  def get_food(grid) do\n    \n  end\nend"}}}