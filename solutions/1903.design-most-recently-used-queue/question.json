{"question_id": "1903", "problem_slug": "design-most-recently-used-queue", "problem_title": "Design Most Recently Used Queue", "content": "Design a queue-like data structure that moves the most recently used element to the end of the queue.\nImplement the MRUQueue class:\n\nMRUQueue(int n) constructs the MRUQueue with n elements: [1,2,3,...,n].\nint fetch(int k) moves the kth element (1-indexed) to the end of the queue and returns it.\n\n \nExample 1:\n\nInput:\n[\"MRUQueue\", \"fetch\", \"fetch\", \"fetch\", \"fetch\"]\n[[8], [3], [5], [2], [8]]\nOutput:\n[null, 3, 6, 2, 2]\n\nExplanation:\nMRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].\nmRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.\nmRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.\nmRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.\nmRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.\n\n \nConstraints:\n\n1 <= n <= 2000\n1 <= k <= n\nAt most 2000 calls will be made to fetch.\n\n \nFollow up: Finding an O(n) algorithm per fetch is a bit easy. Can you find an algorithm with a better complexity for each fetch call?", "hints": ["You can store the data in an array and apply each fetch by moving the ith element to the end of the array (i.e, O(n) per operation).", "A better way is to use the square root decomposition technique.", "You can build chunks of size sqrt(n). For each fetch operation, You can search for the chunk which has the ith element and update it (i.e., O(sqrt(n)) per operation), and move this element to an empty chunk at the end."], "exampleTestcases": "[\"MRUQueue\",\"fetch\",\"fetch\",\"fetch\",\"fetch\"]\n[[8],[3],[5],[2],[8]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class MRUQueue {\npublic:\n    MRUQueue(int n) {\n        \n    }\n    \n    int fetch(int k) {\n        \n    }\n};\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * MRUQueue* obj = new MRUQueue(n);\n * int param_1 = obj->fetch(k);\n */"}, "Java": {"langSlug": "java", "code": "class MRUQueue {\n\n    public MRUQueue(int n) {\n        \n    }\n    \n    public int fetch(int k) {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * MRUQueue obj = new MRUQueue(n);\n * int param_1 = obj.fetch(k);\n */"}, "Python": {"langSlug": "python", "code": "class MRUQueue(object):\n\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        \n\n    def fetch(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MRUQueue object will be instantiated and called as such:\n# obj = MRUQueue(n)\n# param_1 = obj.fetch(k)"}, "Python3": {"langSlug": "python3", "code": "class MRUQueue:\n\n    def __init__(self, n: int):\n        \n\n    def fetch(self, k: int) -> int:\n        \n\n\n# Your MRUQueue object will be instantiated and called as such:\n# obj = MRUQueue(n)\n# param_1 = obj.fetch(k)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MRUQueue;\n\n\nMRUQueue* mRUQueueCreate(int n) {\n    \n}\n\nint mRUQueueFetch(MRUQueue* obj, int k) {\n    \n}\n\nvoid mRUQueueFree(MRUQueue* obj) {\n    \n}\n\n/**\n * Your MRUQueue struct will be instantiated and called as such:\n * MRUQueue* obj = mRUQueueCreate(n);\n * int param_1 = mRUQueueFetch(obj, k);\n \n * mRUQueueFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class MRUQueue {\n\n    public MRUQueue(int n) {\n        \n    }\n    \n    public int Fetch(int k) {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * MRUQueue obj = new MRUQueue(n);\n * int param_1 = obj.Fetch(k);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n */\nvar MRUQueue = function(n) {\n    \n};\n\n/** \n * @param {number} k\n * @return {number}\n */\nMRUQueue.prototype.fetch = function(k) {\n    \n};\n\n/** \n * Your MRUQueue object will be instantiated and called as such:\n * var obj = new MRUQueue(n)\n * var param_1 = obj.fetch(k)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class MRUQueue {\n    constructor(n: number) {\n        \n    }\n\n    fetch(k: number): number {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * var obj = new MRUQueue(n)\n * var param_1 = obj.fetch(k)\n */"}, "PHP": {"langSlug": "php", "code": "class MRUQueue {\n    /**\n     * @param Integer $n\n     */\n    function __construct($n) {\n        \n    }\n  \n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function fetch($k) {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * $obj = MRUQueue($n);\n * $ret_1 = $obj->fetch($k);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass MRUQueue {\n\n    init(_ n: Int) {\n        \n    }\n    \n    func fetch(_ k: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * let obj = MRUQueue(n)\n * let ret_1: Int = obj.fetch(k)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class MRUQueue(n: Int) {\n\n    fun fetch(k: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * var obj = MRUQueue(n)\n * var param_1 = obj.fetch(k)\n */"}, "Dart": {"langSlug": "dart", "code": "class MRUQueue {\n\n  MRUQueue(int n) {\n    \n  }\n  \n  int fetch(int k) {\n    \n  }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * MRUQueue obj = MRUQueue(n);\n * int param1 = obj.fetch(k);\n */"}, "Go": {"langSlug": "golang", "code": "type MRUQueue struct {\n    \n}\n\n\nfunc Constructor(n int) MRUQueue {\n    \n}\n\n\nfunc (this *MRUQueue) Fetch(k int) int {\n    \n}\n\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * obj := Constructor(n);\n * param_1 := obj.Fetch(k);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class MRUQueue\n\n=begin\n    :type n: Integer\n=end\n    def initialize(n)\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :rtype: Integer\n=end\n    def fetch(k)\n        \n    end\n\n\nend\n\n# Your MRUQueue object will be instantiated and called as such:\n# obj = MRUQueue.new(n)\n# param_1 = obj.fetch(k)"}, "Scala": {"langSlug": "scala", "code": "class MRUQueue(_n: Int) {\n\n    def fetch(k: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * val obj = new MRUQueue(n)\n * val param_1 = obj.fetch(k)\n */"}, "Rust": {"langSlug": "rust", "code": "struct MRUQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MRUQueue {\n\n    fn new(n: i32) -> Self {\n        \n    }\n    \n    fn fetch(&self, k: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your MRUQueue object will be instantiated and called as such:\n * let obj = MRUQueue::new(n);\n * let ret_1: i32 = obj.fetch(k);\n */"}, "Racket": {"langSlug": "racket", "code": "(define mru-queue%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    (init-field\n      n)\n    \n    ; fetch : exact-integer? -> exact-integer?\n    (define/public (fetch k)\n      )))\n\n;; Your mru-queue% object will be instantiated and called as such:\n;; (define obj (new mru-queue% [n n]))\n;; (define param_1 (send obj fetch k))"}, "Erlang": {"langSlug": "erlang", "code": "-spec mru_queue_init_(N :: integer()) -> any().\nmru_queue_init_(N) ->\n  .\n\n-spec mru_queue_fetch(K :: integer()) -> integer().\nmru_queue_fetch(K) ->\n  .\n\n\n%% Your functions will be called as such:\n%% mru_queue_init_(N),\n%% Param_1 = mru_queue_fetch(K),\n\n%% mru_queue_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule MRUQueue do\n  @spec init_(n :: integer) :: any\n  def init_(n) do\n    \n  end\n\n  @spec fetch(k :: integer) :: integer\n  def fetch(k) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MRUQueue.init_(n)\n# param_1 = MRUQueue.fetch(k)\n\n# MRUQueue.init_ will be called before every test case, in which you can do some necessary initializations."}}}