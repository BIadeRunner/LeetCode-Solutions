{"question_id": "1620", "problem_slug": "check-if-array-pairs-are-divisible-by-k", "problem_title": "Check If Array Pairs Are Divisible by k", "content": "Given an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.\nReturn true If you can find a way to do that or false otherwise.\n \nExample 1:\n\nInput: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\nOutput: true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).\n\nExample 2:\n\nInput: arr = [1,2,3,4,5,6], k = 7\nOutput: true\nExplanation: Pairs are (1,6),(2,5) and(3,4).\n\nExample 3:\n\nInput: arr = [1,2,3,4,5,6], k = 10\nOutput: false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.\n\n \nConstraints:\n\narr.length == n\n1 <= n <= 105\nn is even.\n-109 <= arr[i] <= 109\n1 <= k <= 105\n\n", "hints": ["Keep an array of the frequencies of ((x % k) + k) % k for each x in arr.", "for each i in [0, k - 1] we need to check if freq[i] == freq[k - i]", "Take care of the case when i == k - i and when i == 0"], "exampleTestcases": "[1,2,3,4,5,10,6,7,8,9]\n5\n[1,2,3,4,5,6]\n7\n[1,2,3,4,5,6]\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canArrange(vector<int>& arr, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canArrange(int[] arr, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canArrange(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canArrange(self, arr: List[int], k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canArrange(int* arr, int arrSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanArrange(int[] arr, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {boolean}\n */\nvar canArrange = function(arr, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canArrange(arr: number[], k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canArrange($arr, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canArrange(_ arr: [Int], _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canArrange(arr: IntArray, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canArrange(List<int> arr, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canArrange(arr []int, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Boolean}\ndef can_arrange(arr, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canArrange(arr: Array[Int], k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_arrange(arr: Vec<i32>, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-arrange arr k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_arrange(Arr :: [integer()], K :: integer()) -> boolean().\ncan_arrange(Arr, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_arrange(arr :: [integer], k :: integer) :: boolean\n  def can_arrange(arr, k) do\n    \n  end\nend"}}}