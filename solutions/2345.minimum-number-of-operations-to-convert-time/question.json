{"question_id": "2345", "problem_slug": "minimum-number-of-operations-to-convert-time", "problem_title": "Minimum Number of Operations to Convert Time", "content": "You are given two strings current and correct representing two 24-hour times.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nIn one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.\nReturn the minimum number of operations needed to convert current to correct.\n \nExample 1:\n\nInput: current = \"02:30\", correct = \"04:35\"\nOutput: 3\nExplanation:\nWe can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.\nExample 2:\n\nInput: current = \"11:00\", correct = \"11:01\"\nOutput: 1\nExplanation: We only have to add one minute to current, so the minimum number of operations needed is 1.\n\n \nConstraints:\n\ncurrent and correct are in the format \"HH:MM\"\ncurrent <= correct\n\n", "hints": ["Convert the times to minutes.", "Use the operation with the biggest value possible at each step."], "exampleTestcases": "\"02:30\"\n\"04:35\"\n\"11:00\"\n\"11:01\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int convertTime(string current, string correct) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int convertTime(String current, String correct) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def convertTime(self, current, correct):\n        \"\"\"\n        :type current: str\n        :type correct: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int convertTime(char* current, char* correct) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ConvertTime(string current, string correct) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} current\n * @param {string} correct\n * @return {number}\n */\nvar convertTime = function(current, correct) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function convertTime(current: string, correct: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $current\n     * @param String $correct\n     * @return Integer\n     */\n    function convertTime($current, $correct) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func convertTime(_ current: String, _ correct: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun convertTime(current: String, correct: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int convertTime(String current, String correct) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func convertTime(current string, correct string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} current\n# @param {String} correct\n# @return {Integer}\ndef convert_time(current, correct)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def convertTime(current: String, correct: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn convert_time(current: String, correct: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (convert-time current correct)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec convert_time(Current :: unicode:unicode_binary(), Correct :: unicode:unicode_binary()) -> integer().\nconvert_time(Current, Correct) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_time(current :: String.t, correct :: String.t) :: integer\n  def convert_time(current, correct) do\n    \n  end\nend"}}}