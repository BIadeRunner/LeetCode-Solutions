{"question_id": "1560", "problem_slug": "number-of-students-doing-homework-at-a-given-time", "problem_title": "Number of Students Doing Homework at a Given Time", "content": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.\n \nExample 1:\n\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n\nExample 2:\n\nInput: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.\n\n \nConstraints:\n\nstartTime.length == endTime.length\n1 <= startTime.length <= 100\n1 <= startTime[i] <= endTime[i] <= 1000\n1 <= queryTime <= 1000\n\n", "hints": ["Imagine that startTime[i] and endTime[i] form an interval (i.e. [startTime[i], endTime[i]]).", "The answer is how many times the queryTime laid in those mentioned intervals."], "exampleTestcases": "[1,2,3]\n[3,2,7]\n4\n[4]\n[4]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int busyStudent(vector<int>& startTime, vector<int>& endTime, int queryTime) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def busyStudent(self, startTime, endTime, queryTime):\n        \"\"\"\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :type queryTime: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int busyStudent(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int queryTime) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BusyStudent(int[] startTime, int[] endTime, int queryTime) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} startTime\n * @param {number[]} endTime\n * @param {number} queryTime\n * @return {number}\n */\nvar busyStudent = function(startTime, endTime, queryTime) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function busyStudent(startTime: number[], endTime: number[], queryTime: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $startTime\n     * @param Integer[] $endTime\n     * @param Integer $queryTime\n     * @return Integer\n     */\n    function busyStudent($startTime, $endTime, $queryTime) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func busyStudent(_ startTime: [Int], _ endTime: [Int], _ queryTime: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun busyStudent(startTime: IntArray, endTime: IntArray, queryTime: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int busyStudent(List<int> startTime, List<int> endTime, int queryTime) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func busyStudent(startTime []int, endTime []int, queryTime int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} start_time\n# @param {Integer[]} end_time\n# @param {Integer} query_time\n# @return {Integer}\ndef busy_student(start_time, end_time, query_time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def busyStudent(startTime: Array[Int], endTime: Array[Int], queryTime: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn busy_student(start_time: Vec<i32>, end_time: Vec<i32>, query_time: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (busy-student startTime endTime queryTime)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec busy_student(StartTime :: [integer()], EndTime :: [integer()], QueryTime :: integer()) -> integer().\nbusy_student(StartTime, EndTime, QueryTime) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec busy_student(start_time :: [integer], end_time :: [integer], query_time :: integer) :: integer\n  def busy_student(start_time, end_time, query_time) do\n    \n  end\nend"}}}