{"question_id": "2488", "problem_slug": "divide-intervals-into-minimum-number-of-groups", "problem_title": "Divide Intervals Into Minimum Number of Groups", "content": "You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].\nYou have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.\nReturn the minimum number of groups you need to make.\nTwo intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.\n \nExample 1:\n\nInput: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n\nExample 2:\n\nInput: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n\n \nConstraints:\n\n1 <= intervals.length <= 105\nintervals[i].length == 2\n1 <= lefti <= righti <= 106\n\n", "hints": ["Can you find a different way to describe the question?", "The minimum number of groups we need is equivalent to the maximum number of intervals that overlap at some point. How can you find that?"], "exampleTestcases": "[[5,10],[6,8],[1,5],[2,3],[1,10]]\n[[1,3],[5,6],[8,10],[11,13]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minGroups(vector<vector<int>>& intervals) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minGroups(int[][] intervals) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minGroups(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minGroups(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinGroups(int[][] intervals) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar minGroups = function(intervals) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minGroups(intervals: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function minGroups($intervals) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minGroups(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minGroups(intervals: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minGroups(List<List<int>> intervals) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minGroups(intervals [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef min_groups(intervals)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minGroups(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_groups(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-groups intervals)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_groups(Intervals :: [[integer()]]) -> integer().\nmin_groups(Intervals) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_groups(intervals :: [[integer]]) :: integer\n  def min_groups(intervals) do\n    \n  end\nend"}}}