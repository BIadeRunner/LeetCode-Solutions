{"questionId": "248", "acRate": 42.23643051115465, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "248", "paidOnly": true, "status": "ac", "title": "Strobogrammatic Number III", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}], "titleSlug": "strobogrammatic-number-iii", "content": "<p>Given two strings low and high that represent two integers <code>low</code> and <code>high</code> where <code>low &lt;= high</code>, return <em>the number of <strong>strobogrammatic numbers</strong> in the range</em> <code>[low, high]</code>.</p>\n\n<p>A <strong>strobogrammatic number</strong> is a number that looks the same when rotated <code>180</code> degrees (looked at upside down).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> low = \"50\", high = \"100\"\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> low = \"0\", high = \"0\"\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= low.length, high.length &lt;= 15</code></li>\n\t<li><code>low</code> and <code>high</code> consist of only digits.</li>\n\t<li><code>low &lt;= high</code></li>\n\t<li><code>low</code> and <code>high</code> do not contain any leading zeros except for zero itself.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"50\"\n\"100\"\n\"0\"\n\"0\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int strobogrammaticInRange(string low, string high) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int strobogrammaticInRange(String low, String high) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def strobogrammaticInRange(self, low, high):\n        \"\"\"\n        :type low: str\n        :type high: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def strobogrammaticInRange(self, low: str, high: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int strobogrammaticInRange(char* low, char* high) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int StrobogrammaticInRange(string low, string high) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} low\n * @param {string} high\n * @return {number}\n */\nvar strobogrammaticInRange = function(low, high) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function strobogrammaticInRange(low: string, high: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $low\n     * @param String $high\n     * @return Integer\n     */\n    function strobogrammaticInRange($low, $high) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func strobogrammaticInRange(_ low: String, _ high: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun strobogrammaticInRange(low: String, high: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int strobogrammaticInRange(String low, String high) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func strobogrammaticInRange(low string, high string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} low\n# @param {String} high\n# @return {Integer}\ndef strobogrammatic_in_range(low, high)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def strobogrammaticInRange(low: String, high: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn strobogrammatic_in_range(low: String, high: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (strobogrammatic-in-range low high)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec strobogrammatic_in_range(Low :: unicode:unicode_binary(), High :: unicode:unicode_binary()) -> integer().\nstrobogrammatic_in_range(Low, High) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec strobogrammatic_in_range(low :: String.t, high :: String.t) :: integer\n  def strobogrammatic_in_range(low, high) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "strobogrammatic-number", "title": "Strobogrammatic Number", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "strobogrammatic-number-ii", "title": "Strobogrammatic Number II", "isPaidOnly": true}]}