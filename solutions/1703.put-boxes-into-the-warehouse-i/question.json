{"question_id": "1703", "problem_slug": "put-boxes-into-the-warehouse-i", "problem_title": "Put Boxes Into the Warehouse I", "content": "You are given two arrays of positive integers, boxes and warehouse, representing the heights of some boxes of unit width and the heights of n rooms in a warehouse respectively. The warehouse's rooms are labelled from 0 to n - 1 from left to right where warehouse[i] (0-indexed) is the height of the ith room.\nBoxes are put into the warehouse by the following rules:\n\nBoxes cannot be stacked.\nYou can rearrange the insertion order of the boxes.\nBoxes can only be pushed into the warehouse from left to right only.\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn the maximum number of boxes you can put into the warehouse.\n \nExample 1:\n\n\nInput: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]\nOutput: 3\nExplanation: \n\nWe can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.\nThere is no way we can fit all 4 boxes in the warehouse.\n\nExample 2:\n\n\nInput: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\nOutput: 3\nExplanation: \n\nNotice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.\nAlso, for the last two rooms, 2 and 3, only boxes of height 1 can fit.\nWe can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.\nSwapping the orange and green boxes is also valid, or swapping one of them with the red box.\n\nExample 3:\n\nInput: boxes = [1,2,3], warehouse = [1,2,3,4]\nOutput: 1\nExplanation: Since the first room in the warehouse is of height 1, we can only put boxes of height 1.\n\n \nConstraints:\n\nn == warehouse.length\n1 <= boxes.length, warehouse.length <= 105\n1 <= boxes[i], warehouse[i] <= 109\n\n", "hints": ["Sort the boxes in ascending order, try to process the box with the smallest height first."], "exampleTestcases": "[4,3,4,1]\n[5,3,3,4,1]\n[1,2,2,3,4]\n[3,4,1,2]\n[1,2,3]\n[1,2,3,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxBoxesInWarehouse(vector<int>& boxes, vector<int>& warehouse) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxBoxesInWarehouse(self, boxes, warehouse):\n        \"\"\"\n        :type boxes: List[int]\n        :type warehouse: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxBoxesInWarehouse(int* boxes, int boxesSize, int* warehouse, int warehouseSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} boxes\n * @param {number[]} warehouse\n * @return {number}\n */\nvar maxBoxesInWarehouse = function(boxes, warehouse) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxBoxesInWarehouse(boxes: number[], warehouse: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $boxes\n     * @param Integer[] $warehouse\n     * @return Integer\n     */\n    function maxBoxesInWarehouse($boxes, $warehouse) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxBoxesInWarehouse(_ boxes: [Int], _ warehouse: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxBoxesInWarehouse(boxes: IntArray, warehouse: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxBoxesInWarehouse(List<int> boxes, List<int> warehouse) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxBoxesInWarehouse(boxes []int, warehouse []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} boxes\n# @param {Integer[]} warehouse\n# @return {Integer}\ndef max_boxes_in_warehouse(boxes, warehouse)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxBoxesInWarehouse(boxes: Array[Int], warehouse: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_boxes_in_warehouse(boxes: Vec<i32>, warehouse: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-boxes-in-warehouse boxes warehouse)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_boxes_in_warehouse(Boxes :: [integer()], Warehouse :: [integer()]) -> integer().\nmax_boxes_in_warehouse(Boxes, Warehouse) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_boxes_in_warehouse(boxes :: [integer], warehouse :: [integer]) :: integer\n  def max_boxes_in_warehouse(boxes, warehouse) do\n    \n  end\nend"}}}