{"question_id": "934", "problem_slug": "bitwise-ors-of-subarrays", "problem_title": "Bitwise ORs of Subarrays", "content": "Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\nA subarray is a contiguous non-empty sequence of elements within an array.\n \nExample 1:\n\nInput: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.\n\nExample 2:\n\nInput: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n\nExample 3:\n\nInput: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.\n\n \nConstraints:\n\n1 <= arr.length <= 5 * 104\n0 <= arr[i] <= 109\n\n", "hints": [], "exampleTestcases": "[0]\n[1,1,2]\n[1,2,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarrayBitwiseORs(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int subarrayBitwiseORs(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def subarrayBitwiseORs(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int subarrayBitwiseORs(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SubarrayBitwiseORs(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar subarrayBitwiseORs = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function subarrayBitwiseORs(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function subarrayBitwiseORs($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func subarrayBitwiseORs(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun subarrayBitwiseORs(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int subarrayBitwiseORs(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func subarrayBitwiseORs(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef subarray_bitwise_o_rs(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def subarrayBitwiseORs(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn subarray_bitwise_o_rs(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (subarray-bitwise-o-rs arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec subarray_bitwise_o_rs(Arr :: [integer()]) -> integer().\nsubarray_bitwise_o_rs(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec subarray_bitwise_o_rs(arr :: [integer]) :: integer\n  def subarray_bitwise_o_rs(arr) do\n    \n  end\nend"}}}