{"question_id": "244", "problem_slug": "shortest-word-distance-ii", "problem_title": "Shortest Word Distance II", "content": "Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\nImplement the WordDistance class:\n\nWordDistance(String[] wordsDict) initializes the object with the strings array wordsDict.\nint shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict.\n\n \nExample 1:\n\nInput\n[\"WordDistance\", \"shortest\", \"shortest\"]\n[[[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]], [\"coding\", \"practice\"], [\"makes\", \"coding\"]]\nOutput\n[null, 3, 1]\n\nExplanation\nWordDistance wordDistance = new WordDistance([\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]);\nwordDistance.shortest(\"coding\", \"practice\"); // return 3\nwordDistance.shortest(\"makes\", \"coding\");    // return 1\n\n \nConstraints:\n\n1 <= wordsDict.length <= 3 * 104\n1 <= wordsDict[i].length <= 10\nwordsDict[i] consists of lowercase English letters.\nword1 and word2 are in wordsDict.\nword1 != word2\nAt most 5000 calls will be made to shortest.\n\n", "hints": [], "exampleTestcases": "[\"WordDistance\",\"shortest\",\"shortest\"]\n[[[\"practice\",\"makes\",\"perfect\",\"coding\",\"makes\"]],[\"coding\",\"practice\"],[\"makes\",\"coding\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class WordDistance {\npublic:\n    WordDistance(vector<string>& wordsDict) {\n        \n    }\n    \n    int shortest(string word1, string word2) {\n        \n    }\n};\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance* obj = new WordDistance(wordsDict);\n * int param_1 = obj->shortest(word1,word2);\n */"}, "Java": {"langSlug": "java", "code": "class WordDistance {\n\n    public WordDistance(String[] wordsDict) {\n        \n    }\n    \n    public int shortest(String word1, String word2) {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance obj = new WordDistance(wordsDict);\n * int param_1 = obj.shortest(word1,word2);\n */"}, "Python": {"langSlug": "python", "code": "class WordDistance(object):\n\n    def __init__(self, wordsDict):\n        \"\"\"\n        :type wordsDict: List[str]\n        \"\"\"\n        \n\n    def shortest(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance(wordsDict)\n# param_1 = obj.shortest(word1,word2)"}, "Python3": {"langSlug": "python3", "code": "class WordDistance:\n\n    def __init__(self, wordsDict: List[str]):\n        \n\n    def shortest(self, word1: str, word2: str) -> int:\n        \n\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance(wordsDict)\n# param_1 = obj.shortest(word1,word2)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} WordDistance;\n\n\nWordDistance* wordDistanceCreate(char** wordsDict, int wordsDictSize) {\n    \n}\n\nint wordDistanceShortest(WordDistance* obj, char* word1, char* word2) {\n    \n}\n\nvoid wordDistanceFree(WordDistance* obj) {\n    \n}\n\n/**\n * Your WordDistance struct will be instantiated and called as such:\n * WordDistance* obj = wordDistanceCreate(wordsDict, wordsDictSize);\n * int param_1 = wordDistanceShortest(obj, word1, word2);\n \n * wordDistanceFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class WordDistance {\n\n    public WordDistance(string[] wordsDict) {\n        \n    }\n    \n    public int Shortest(string word1, string word2) {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance obj = new WordDistance(wordsDict);\n * int param_1 = obj.Shortest(word1,word2);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} wordsDict\n */\nvar WordDistance = function(wordsDict) {\n    \n};\n\n/** \n * @param {string} word1 \n * @param {string} word2\n * @return {number}\n */\nWordDistance.prototype.shortest = function(word1, word2) {\n    \n};\n\n/** \n * Your WordDistance object will be instantiated and called as such:\n * var obj = new WordDistance(wordsDict)\n * var param_1 = obj.shortest(word1,word2)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class WordDistance {\n    constructor(wordsDict: string[]) {\n        \n    }\n\n    shortest(word1: string, word2: string): number {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * var obj = new WordDistance(wordsDict)\n * var param_1 = obj.shortest(word1,word2)\n */"}, "PHP": {"langSlug": "php", "code": "class WordDistance {\n    /**\n     * @param String[] $wordsDict\n     */\n    function __construct($wordsDict) {\n        \n    }\n  \n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function shortest($word1, $word2) {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * $obj = WordDistance($wordsDict);\n * $ret_1 = $obj->shortest($word1, $word2);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass WordDistance {\n\n    init(_ wordsDict: [String]) {\n        \n    }\n    \n    func shortest(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * let obj = WordDistance(wordsDict)\n * let ret_1: Int = obj.shortest(word1, word2)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class WordDistance(wordsDict: Array<String>) {\n\n    fun shortest(word1: String, word2: String): Int {\n        \n    }\n\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * var obj = WordDistance(wordsDict)\n * var param_1 = obj.shortest(word1,word2)\n */"}, "Dart": {"langSlug": "dart", "code": "class WordDistance {\n\n  WordDistance(List<String> wordsDict) {\n    \n  }\n  \n  int shortest(String word1, String word2) {\n    \n  }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance obj = WordDistance(wordsDict);\n * int param1 = obj.shortest(word1,word2);\n */"}, "Go": {"langSlug": "golang", "code": "type WordDistance struct {\n    \n}\n\n\nfunc Constructor(wordsDict []string) WordDistance {\n    \n}\n\n\nfunc (this *WordDistance) Shortest(word1 string, word2 string) int {\n    \n}\n\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * obj := Constructor(wordsDict);\n * param_1 := obj.Shortest(word1,word2);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class WordDistance\n\n=begin\n    :type words_dict: String[]\n=end\n    def initialize(words_dict)\n        \n    end\n\n\n=begin\n    :type word1: String\n    :type word2: String\n    :rtype: Integer\n=end\n    def shortest(word1, word2)\n        \n    end\n\n\nend\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance.new(words_dict)\n# param_1 = obj.shortest(word1, word2)"}, "Scala": {"langSlug": "scala", "code": "class WordDistance(_wordsDict: Array[String]) {\n\n    def shortest(word1: String, word2: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * val obj = new WordDistance(wordsDict)\n * val param_1 = obj.shortest(word1,word2)\n */"}, "Rust": {"langSlug": "rust", "code": "struct WordDistance {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl WordDistance {\n\n    fn new(wordsDict: Vec<String>) -> Self {\n        \n    }\n    \n    fn shortest(&self, word1: String, word2: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * let obj = WordDistance::new(wordsDict);\n * let ret_1: i32 = obj.shortest(word1, word2);\n */"}, "Racket": {"langSlug": "racket", "code": "(define word-distance%\n  (class object%\n    (super-new)\n    \n    ; words-dict : (listof string?)\n    (init-field\n      words-dict)\n    \n    ; shortest : string? string? -> exact-integer?\n    (define/public (shortest word1 word2)\n      )))\n\n;; Your word-distance% object will be instantiated and called as such:\n;; (define obj (new word-distance% [words-dict words-dict]))\n;; (define param_1 (send obj shortest word1 word2))"}, "Erlang": {"langSlug": "erlang", "code": "-spec word_distance_init_(WordsDict :: [unicode:unicode_binary()]) -> any().\nword_distance_init_(WordsDict) ->\n  .\n\n-spec word_distance_shortest(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nword_distance_shortest(Word1, Word2) ->\n  .\n\n\n%% Your functions will be called as such:\n%% word_distance_init_(WordsDict),\n%% Param_1 = word_distance_shortest(Word1, Word2),\n\n%% word_distance_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule WordDistance do\n  @spec init_(words_dict :: [String.t]) :: any\n  def init_(words_dict) do\n    \n  end\n\n  @spec shortest(word1 :: String.t, word2 :: String.t) :: integer\n  def shortest(word1, word2) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# WordDistance.init_(words_dict)\n# param_1 = WordDistance.shortest(word1, word2)\n\n# WordDistance.init_ will be called before every test case, in which you can do some necessary initializations."}}}