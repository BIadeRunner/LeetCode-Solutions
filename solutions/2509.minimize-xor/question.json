{"question_id": "2509", "problem_slug": "minimize-xor", "problem_title": "Minimize XOR", "content": "Given two positive integers num1 and num2, find the positive integer x such that:\n\nx has the same number of set bits as num2, and\nThe value x XOR num1 is minimal.\n\nNote that XOR is the bitwise XOR operation.\nReturn the integer x. The test cases are generated such that x is uniquely determined.\nThe number of set bits of an integer is the number of 1's in its binary representation.\n \nExample 1:\n\nInput: num1 = 3, num2 = 5\nOutput: 3\nExplanation:\nThe binary representations of num1 and num2 are 0011 and 0101, respectively.\nThe integer 3 has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal.\n\nExample 2:\n\nInput: num1 = 1, num2 = 12\nOutput: 3\nExplanation:\nThe binary representations of num1 and num2 are 0001 and 1100, respectively.\nThe integer 3 has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal.\n\n \nConstraints:\n\n1 <= num1, num2 <= 109\n\n", "hints": ["To arrive at a small xor, try to turn off some bits from num1", "If there are still left bits to set, try to set them from the least significant bit"], "exampleTestcases": "3\n5\n1\n12", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizeXor(int num1, int num2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimizeXor(int num1, int num2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizeXor(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizeXor(self, num1: int, num2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimizeXor(int num1, int num2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimizeXor(int num1, int num2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar minimizeXor = function(num1, num2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizeXor(num1: number, num2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function minimizeXor($num1, $num2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizeXor(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizeXor(num1: Int, num2: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimizeXor(int num1, int num2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizeXor(num1 int, num2 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef minimize_xor(num1, num2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizeXor(num1: Int, num2: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_xor(num1: i32, num2: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimize-xor num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimize_xor(Num1 :: integer(), Num2 :: integer()) -> integer().\nminimize_xor(Num1, Num2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_xor(num1 :: integer, num2 :: integer) :: integer\n  def minimize_xor(num1, num2) do\n    \n  end\nend"}}}