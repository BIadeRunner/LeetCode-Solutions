{"question_id": "3479", "problem_slug": "count-the-number-of-substrings-with-dominant-ones", "problem_title": "Count the Number of Substrings With Dominant Ones", "content": "You are given a binary string s.\nReturn the number of substrings with dominant ones.\nA string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.\n \nExample 1:\n\nInput: s = \"00011\"\nOutput: 5\nExplanation:\nThe substrings with dominant ones are shown in the table below.\n\n\n\n\ni\nj\ns[i..j]\nNumber of Zeros\nNumber of Ones\n\n\n\n\n3\n3\n1\n0\n1\n\n\n4\n4\n1\n0\n1\n\n\n2\n3\n01\n1\n1\n\n\n3\n4\n11\n0\n2\n\n\n2\n4\n011\n1\n2\n\n\n\nExample 2:\n\nInput: s = \"101101\"\nOutput: 16\nExplanation:\nThe substrings with non-dominant ones are shown in the table below.\nSince there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones.\n\n\n\n\ni\nj\ns[i..j]\nNumber of Zeros\nNumber of Ones\n\n\n\n\n1\n1\n0\n1\n0\n\n\n4\n4\n0\n1\n0\n\n\n1\n4\n0110\n2\n2\n\n\n0\n4\n10110\n2\n3\n\n\n1\n5\n01101\n2\n3\n\n\n\n \nConstraints:\n\n1 <= s.length <= 4 * 104\ns consists only of characters '0' and '1'.\n\n", "hints": ["Let us fix the starting index <code>l</code> of the substring and count the number of indices <code>r</code> such that <code>l <= r</code> and the substring <code>s[l..r]</code> has dominant ones.", "A substring with dominant ones has at most <code>sqrt(n)</code> zeros.", "We cannot iterate over every <code>r</code> and check if the  <code>s[l..r]</code> has dominant ones. Instead, we iterate over the next <code>sqrt(n)</code> zeros to the left of <code>l</code> and count the number of substrings with dominant ones where the current zero is the rightmost zero of the substring."], "exampleTestcases": "\"00011\"\n\"101101\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfSubstrings(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfSubstrings(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfSubstrings(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfSubstrings = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfSubstrings(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numberOfSubstrings($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfSubstrings(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfSubstrings(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfSubstrings(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfSubstrings(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef number_of_substrings(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfSubstrings(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_substrings(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-substrings s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_substrings(S :: unicode:unicode_binary()) -> integer().\nnumber_of_substrings(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_substrings(s :: String.t) :: integer\n  def number_of_substrings(s) do\n    \n  end\nend"}}}