{"questionId": "1210", "acRate": 69.28769755386874, "difficulty": "Easy", "freqBar": 19.740430646733696, "frontendQuestionId": "1619", "paidOnly": false, "status": "ac", "title": "Mean of Array After Removing Some Elements", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "mean-of-array-after-removing-some-elements", "content": "<p>Given an integer array <code>arr</code>, return <em>the mean of the remaining integers after removing the smallest <code>5%</code> and the largest <code>5%</code> of the elements.</em></p>\n\n<p>Answers within <code>10<sup>-5</sup></code> of the <strong>actual answer</strong> will be considered accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\n<strong>Output:</strong> 4.00000\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\n<strong>Output:</strong> 4.77778\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>20 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>arr.length</code><b> </b><strong>is a multiple</strong> of <code>20</code>.</li>\n\t<li><code><font face=\"monospace\">0 &lt;= arr[i] &lt;= 10<sup>5</sup></font></code></li>\n</ul>\n", "hints": ["Sort the given array.", "Remove the first and last 5% of the sorted array."], "exampleTestcases": "[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\n[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\n[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double trimMean(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def trimMean(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double trimMean(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double TrimMean(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar trimMean = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function trimMean(arr: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Float\n     */\n    function trimMean($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func trimMean(_ arr: [Int]) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun trimMean(arr: IntArray): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double trimMean(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func trimMean(arr []int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Float}\ndef trim_mean(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def trimMean(arr: Array[Int]): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn trim_mean(arr: Vec<i32>) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (trim-mean arr)\n  (-> (listof exact-integer?) flonum?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec trim_mean(Arr :: [integer()]) -> float().\ntrim_mean(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec trim_mean(arr :: [integer]) :: float\n  def trim_mean(arr) do\n    \n  end\nend"}], "similarQuestionList": []}