{"questionId": "157", "acRate": 41.83691783075589, "difficulty": "Easy", "freqBar": 35.552096552175485, "frontendQuestionId": "157", "paidOnly": true, "status": "ac", "title": "Read N Characters Given Read4", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "read-n-characters-given-read4", "content": "<p>Given a <code>file</code> and assume that you can only read the file using a given method <code>read4</code>, implement a method to read <code>n</code> characters.</p>\n\n<p><strong>Method read4: </strong></p>\n\n<p>The API <code>read4</code> reads <strong>four consecutive characters</strong> from <code>file</code>, then writes those characters into the buffer array <code>buf4</code>.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p>Note that <code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.</p>\n\n<p><strong>Definition of read4:</strong></p>\n\n<pre>\n    Parameter:  char[] buf4\n    Returns:    int\n\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n</pre>\n\n<p>Below is a high-level example of how <code>read4</code> works:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/01/157_example.png\" style=\"width: 600px; height: 403px;\" />\n<pre>\nFile file(&quot;abcde<code>&quot;); // File is &quot;</code>abcde<code>&quot;, initially file pointer (fp) points to &#39;a&#39;\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = &quot;abcd&quot;, fp points to &#39;e&#39;\nread4(buf4); // read4 returns 1. Now buf4 = &quot;e&quot;, fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = &quot;&quot;, fp points to end of file</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Method read:</strong></p>\n\n<p>By using the <code>read4</code> method, implement the method read that reads <code>n</code> characters from <code>file</code> and store it in the buffer array <code>buf</code>. Consider that you cannot manipulate <code>file</code> directly.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p><strong>Definition of read: </strong></p>\n\n<pre>\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\n\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Consider that you cannot manipulate the file directly. The file is only accessible for <code>read4</code> but not for <code>read</code>.</li>\n\t<li>The <code>read</code> function will only be called once for each test case.</li>\n\t<li>You may assume the destination buffer array, <code>buf</code>, is guaranteed to have enough space for storing <code>n</code> characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abc&quot;, n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3.\nNote that &quot;abc&quot; is the file&#39;s content, not buf. buf is the destination buffer that you will have to write the results to.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abcde&quot;, n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcde&quot;. We read a total of 5 characters from the file, so return 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abcdABCD1234&quot;, n = 12\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcdABCD1234&quot;. We read a total of 12 characters from the file, so return 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= file.length &lt;= 500</code></li>\n\t<li><code>file</code> consist of English letters and digits.</li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"abc\"\n4\n\"abcde\"\n5\n\"abcdABCD1234\"\n12", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\nclass Solution {\npublic:\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    int read(char *buf, int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char[] buf4);\n */\n\npublic class Solution extends Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int read(char[] buf, int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf4, a list of characters\n    @return an integer\n    def read4(buf4):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\n\nclass Solution(object):\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf4, a list of characters\n    @return an integer\n    def read4(buf4):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\n\nclass Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\n/**\n * @param buf Destination buffer\n * @param n   Number of characters to read\n * @return    The number of actual characters read\n */\nint _read(char* buf, int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * The Read4 API is defined in the parent class Reader4.\n *     int Read4(char[] buf4);\n */\n\npublic class Solution : Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int Read(char[] buf, int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for read4()\n * \n * @param {character[]} buf4 Destination buffer\n * @return {number} The number of actual characters read\n * read4 = function(buf4) {\n *     ...\n * };\n */\n\n/**\n * @param {function} read4()\n * @return {function}\n */\nvar solution = function(read4) {\n    /**\n     * @param {character[]} buf Destination buffer\n     * @param {number} n Number of characters to read\n     * @return {number} The number of actual characters read\n     */\n    return function(buf, n) {\n        \n    };\n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for read4()\n * read4 = function(buf4: string[]): number {\n *     ...\n * };\n */\n\nvar solution = function(read4: any) {\n\n    return function(buf: string[], n: number): number {\n        \n    };\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/* The read4 API is defined in the parent class Reader4.\n      public function read4(&$buf4){} */\n\nclass Solution extends Reader4 {\n    /**\n     * @param  Char[]   &$buf\tDestination buffer\n     * @param  Integer  $n\t\tNumber of characters to read\n     * @return Integer \t\t\tThe number of actual characters read\n     */\n    function read(&$buf, $n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     func read4(_ buf4: inout [Character]) -> Int;\n */\n\nclass Solution : Reader4 {\n\t/**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    func read(_ buf: inout [Character], _ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n* The read4 API is defined in the parent class Reader4.\n* fun read4(buf4:CharArray): Int {}\n*/\n\nclass Solution:Reader4() {\n    /**\n      * @param buf Destination buffer\n      * @param n Number of characters to read\n      * @return The number of actual characters read\n      */\n    override fun read(buf:CharArray, n:Int): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * The read4 API is already defined for you.\n *\n *     read4 := func(buf4 []byte) int\n *\n * // Below is an example of how the read4 API can be called.\n * file := File(\"abcdefghijk\") // File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\n * buf4 := make([]byte, 4) // Create buffer with enough space to store characters\n * read4(buf4) // read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\n * read4(buf4) // read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\n * read4(buf4) // read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n */\n\nvar solution = func(read4 func([]byte) int) func([]byte, int) int {\n    // implement read below.\n    return func(buf []byte, n int) int {\n        \n    }\n}\n"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# The read4 API is already defined for you.\n# Below is an example of how the read4 API can be called.\n# file = File.new(\"abcdefghijk\") File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\n# buf4 = [' '] * 4 Create buffer with enough space to store characters\n# read4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\n# read4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\n# read4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\n# @param {List[str]} buf\n# @param {int} n\n# @return {int}\ndef read(buf, n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n  * The read4 API is defined in the parent class Reader4.\n  *     def read4(buf4: Array[Char]): Int = {}\n  */\n\nclass Solution extends Reader4 {\n    /**\n      * @param buf Destination buffer\n \t  * @param n   Number of characters to read\n      * @return    The number of actual characters read\n      */\n    def read(buf: Array[Char], n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * The read4 API is defined as.\n *     fn read4(&self,buf4: &mut [char]) -> i32;\n * You can call it using self.read4(buf4)\n */\n\nimpl Solution {\n    pub fn read(&self, buf: &mut [char], n: i32) -> i32 {\n         \n    }\n}\n"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times", "title": "Read N Characters Given read4 II - Call Multiple Times", "isPaidOnly": true}]}