{"question_id": "2653", "problem_slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "problem_title": "Check if There is a Path With Equal Number of 0's And 1's", "content": "You are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1).\nReturn true if there is a path from (0, 0) to (m - 1, n - 1) that visits an equal number of 0's and 1's. Otherwise return false.\n \nExample 1:\n\n\nInput: grid = [[0,1,0,0],[0,1,0,0],[1,0,1,0]]\nOutput: true\nExplanation: The path colored in blue in the above diagram is a valid path because we have 3 cells with a value of 1 and 3 with a value of 0. Since there is a valid path, we return true.\n\nExample 2:\n\n\nInput: grid = [[1,1,0],[0,0,1],[1,0,0]]\nOutput: false\nExplanation: There is no path in this grid with an equal number of 0's and 1's.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 100\ngrid[i][j] is either 0 or 1.\n\n", "hints": ["Can you use dynamic programming to solve the problem?", "Let dp[i][j][diff] be true if there is a path from the cell (i, j) to (m - 1, n - 1) such that the difference between the number of 0’s and the number of 1’s that we visited so far is diff, or false otherwise. The answer to the problem will be dp[0][0][0]. How do you compute this dp?"], "exampleTestcases": "[[0,1,0,0],[0,1,0,0],[1,0,1,0]]\n[[1,1,0],[0,0,1],[1,0,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isThereAPath(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isThereAPath(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isThereAPath(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isThereAPath(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsThereAPath(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar isThereAPath = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isThereAPath(grid: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function isThereAPath($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isThereAPath(_ grid: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isThereAPath(grid: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isThereAPath(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isThereAPath(grid [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef is_there_a_path(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isThereAPath(grid: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_there_a_path(grid: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-there-a-path grid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_there_a_path(Grid :: [[integer()]]) -> boolean().\nis_there_a_path(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_there_a_path(grid :: [[integer]]) :: boolean\n  def is_there_a_path(grid) do\n    \n  end\nend"}}}