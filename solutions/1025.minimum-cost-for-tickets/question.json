{"question_id": "1025", "problem_slug": "minimum-cost-for-tickets", "problem_title": "Minimum Cost For Tickets", "content": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:\n\na 1-day pass is sold for costs[0] dollars,\na 7-day pass is sold for costs[1] dollars, and\na 30-day pass is sold for costs[2] dollars.\n\nThe passes allow that many days of consecutive travel.\n\nFor example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n \nExample 1:\n\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n\nExample 2:\n\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n\n \nConstraints:\n\n1 <= days.length <= 365\n1 <= days[i] <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i] <= 1000\n\n", "hints": [], "exampleTestcases": "[1,4,6,7,8,20]\n[2,7,15]\n[1,2,3,4,5,6,7,8,9,10,30,31]\n[2,7,15]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int mincostTickets(int[] days, int[] costs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mincostTickets(self, days, costs):\n        \"\"\"\n        :type days: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int mincostTickets(int* days, int daysSize, int* costs, int costsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MincostTickets(int[] days, int[] costs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} days\n * @param {number[]} costs\n * @return {number}\n */\nvar mincostTickets = function(days, costs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mincostTickets(days: number[], costs: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $days\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function mincostTickets($days, $costs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mincostTickets(_ days: [Int], _ costs: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mincostTickets(days: IntArray, costs: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int mincostTickets(List<int> days, List<int> costs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mincostTickets(days []int, costs []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} days\n# @param {Integer[]} costs\n# @return {Integer}\ndef mincost_tickets(days, costs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mincostTickets(days: Array[Int], costs: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn mincost_tickets(days: Vec<i32>, costs: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (mincost-tickets days costs)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec mincost_tickets(Days :: [integer()], Costs :: [integer()]) -> integer().\nmincost_tickets(Days, Costs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec mincost_tickets(days :: [integer], costs :: [integer]) :: integer\n  def mincost_tickets(days, costs) do\n    \n  end\nend"}}}