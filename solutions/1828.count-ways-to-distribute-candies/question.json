{"question_id": "1828", "problem_slug": "count-ways-to-distribute-candies", "problem_title": "Count Ways to Distribute Candies", "content": "There are n unique candies (labeled 1 through n) and k bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.\nThere can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\nFor example, (1), (2,3) and (2), (1,3) are considered different because candies 2 and 3 in the bag (2,3) in the first way are not in the same bag in the second way (they are split between the bags (2) and (1,3)). However, (1), (2,3) and (3,2), (1) are considered the same because the candies in each bag are all in the same bags in both ways.\nGiven two integers, n and k, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo 109 + 7.\n \nExample 1:\n\n\nInput: n = 3, k = 2\nOutput: 3\nExplanation: You can distribute 3 candies into 2 bags in 3 ways:\n(1), (2,3)\n(1,2), (3)\n(1,3), (2)\n\nExample 2:\n\nInput: n = 4, k = 2\nOutput: 7\nExplanation: You can distribute 4 candies into 2 bags in 7 ways:\n(1), (2,3,4)\n(1,2), (3,4)\n(1,3), (2,4)\n(1,4), (2,3)\n(1,2,3), (4)\n(1,2,4), (3)\n(1,3,4), (2)\n\nExample 3:\n\nInput: n = 20, k = 5\nOutput: 206085257\nExplanation: You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257.\n\n \nConstraints:\n\n1 <= k <= n <= 1000\n\n", "hints": ["Try to define a recursive approach. For the ith candies, there will be one of the two following cases:", "If the i - 1 previous candies are already distributed into k bags for the ith candy, you can have k * dp[n - 1][k] ways to distribute the ith candy. We need then to solve the state of (n - 1, k).", "If the i - 1 previous candies are already distributed into k - 1 bags for the ith candy, you can have dp[n - 1][k - 1] ways to distribute the ith candy. We need then to solve the state of (n - 1, k - 1).", "This approach will be too slow and will traverse some states more than once. We should use memoization to make the algorithm efficient."], "exampleTestcases": "3\n2\n4\n2\n20\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int waysToDistribute(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int waysToDistribute(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def waysToDistribute(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def waysToDistribute(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int waysToDistribute(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WaysToDistribute(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar waysToDistribute = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function waysToDistribute(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function waysToDistribute($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func waysToDistribute(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun waysToDistribute(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int waysToDistribute(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func waysToDistribute(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef ways_to_distribute(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def waysToDistribute(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn ways_to_distribute(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (ways-to-distribute n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec ways_to_distribute(N :: integer(), K :: integer()) -> integer().\nways_to_distribute(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec ways_to_distribute(n :: integer, k :: integer) :: integer\n  def ways_to_distribute(n, k) do\n    \n  end\nend"}}}