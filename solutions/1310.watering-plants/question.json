{"question_id": "1310", "problem_slug": "watering-plants", "problem_title": "Watering Plants", "content": "You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.\nEach plant needs a specific amount of water. You will water the plants in the following way:\n\nWater the plants in order from left to right.\nAfter watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.\nYou cannot refill the watering can early.\n\nYou are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.\n \nExample 1:\n\nInput: plants = [2,2,3,3], capacity = 5\nOutput: 14\nExplanation: Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.\n\nExample 2:\n\nInput: plants = [1,1,1,4,2,3], capacity = 4\nOutput: 30\nExplanation: Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.\n\nExample 3:\n\nInput: plants = [7,7,7,7,7,7,7], capacity = 8\nOutput: 49\nExplanation: You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.\n\n \nConstraints:\n\nn == plants.length\n1 <= n <= 1000\n1 <= plants[i] <= 106\nmax(plants[i]) <= capacity <= 109\n\n", "hints": ["Simulate the process.", "Return to refill the container once you meet a plant that needs more water than you have."], "exampleTestcases": "[2,2,3,3]\n5\n[1,1,1,4,2,3]\n4\n[7,7,7,7,7,7,7]\n8", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int wateringPlants(vector<int>& plants, int capacity) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int wateringPlants(int[] plants, int capacity) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wateringPlants(self, plants, capacity):\n        \"\"\"\n        :type plants: List[int]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wateringPlants(self, plants: List[int], capacity: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int wateringPlants(int* plants, int plantsSize, int capacity) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WateringPlants(int[] plants, int capacity) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} plants\n * @param {number} capacity\n * @return {number}\n */\nvar wateringPlants = function(plants, capacity) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wateringPlants(plants: number[], capacity: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $plants\n     * @param Integer $capacity\n     * @return Integer\n     */\n    function wateringPlants($plants, $capacity) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wateringPlants(_ plants: [Int], _ capacity: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wateringPlants(plants: IntArray, capacity: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int wateringPlants(List<int> plants, int capacity) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wateringPlants(plants []int, capacity int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} plants\n# @param {Integer} capacity\n# @return {Integer}\ndef watering_plants(plants, capacity)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wateringPlants(plants: Array[Int], capacity: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn watering_plants(plants: Vec<i32>, capacity: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (watering-plants plants capacity)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec watering_plants(Plants :: [integer()], Capacity :: integer()) -> integer().\nwatering_plants(Plants, Capacity) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec watering_plants(plants :: [integer], capacity :: integer) :: integer\n  def watering_plants(plants, capacity) do\n    \n  end\nend"}}}