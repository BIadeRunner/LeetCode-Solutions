{"questionId": "1310", "acRate": 79.8808008332369, "difficulty": "Medium", "freqBar": 60.96166732082917, "frontendQuestionId": "2079", "paidOnly": false, "status": "ac", "title": "Watering Plants", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "watering-plants", "content": "<p>You want to water <code>n</code> plants in your garden with a watering can. The plants are arranged in a row and are labeled from <code>0</code> to <code>n - 1</code> from left to right where the <code>i<sup>th</sup></code> plant is located at <code>x = i</code>. There is a river at <code>x = -1</code> that you can refill your watering can at.</p>\n\n<p>Each plant needs a specific amount of water. You will water the plants in the following way:</p>\n\n<ul>\n\t<li>Water the plants in order from left to right.</li>\n\t<li>After watering the current plant, if you do not have enough water to <strong>completely</strong> water the next plant, return to the river to fully refill the watering can.</li>\n\t<li>You <strong>cannot</strong> refill the watering can early.</li>\n</ul>\n\n<p>You are initially at the river (i.e., <code>x = -1</code>). It takes <strong>one step</strong> to move <strong>one unit</strong> on the x-axis.</p>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>plants</code> of <code>n</code> integers, where <code>plants[i]</code> is the amount of water the <code>i<sup>th</sup></code> plant needs, and an integer <code>capacity</code> representing the watering can capacity, return <em>the <strong>number of steps</strong> needed to water all the plants</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> plants = [2,2,3,3], capacity = 5\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> plants = [1,1,1,4,2,3], capacity = 4\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> plants = [7,7,7,7,7,7,7], capacity = 8\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == plants.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= plants[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>max(plants[i]) &lt;= capacity &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Simulate the process.", "Return to refill the container once you meet a plant that needs more water than you have."], "exampleTestcases": "[2,2,3,3]\n5\n[1,1,1,4,2,3]\n4\n[7,7,7,7,7,7,7]\n8", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int wateringPlants(vector<int>& plants, int capacity) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int wateringPlants(int[] plants, int capacity) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wateringPlants(self, plants, capacity):\n        \"\"\"\n        :type plants: List[int]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wateringPlants(self, plants: List[int], capacity: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int wateringPlants(int* plants, int plantsSize, int capacity) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int WateringPlants(int[] plants, int capacity) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} plants\n * @param {number} capacity\n * @return {number}\n */\nvar wateringPlants = function(plants, capacity) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function wateringPlants(plants: number[], capacity: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $plants\n     * @param Integer $capacity\n     * @return Integer\n     */\n    function wateringPlants($plants, $capacity) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wateringPlants(_ plants: [Int], _ capacity: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wateringPlants(plants: IntArray, capacity: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int wateringPlants(List<int> plants, int capacity) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func wateringPlants(plants []int, capacity int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} plants\n# @param {Integer} capacity\n# @return {Integer}\ndef watering_plants(plants, capacity)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wateringPlants(plants: Array[Int], capacity: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn watering_plants(plants: Vec<i32>, capacity: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (watering-plants plants capacity)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec watering_plants(Plants :: [integer()], Capacity :: integer()) -> integer().\nwatering_plants(Plants, Capacity) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec watering_plants(plants :: [integer], capacity :: integer) :: integer\n  def watering_plants(plants, capacity) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "watering-plants-ii", "title": "Watering Plants II", "isPaidOnly": false}]}