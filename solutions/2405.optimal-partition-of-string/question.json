{"questionId": "2487", "acRate": 78.02210741147758, "difficulty": "Medium", "freqBar": 45.05826179075874, "frontendQuestionId": "2405", "paidOnly": false, "status": "ac", "title": "Optimal Partition of String", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "optimal-partition-of-string", "content": "<p>Given a string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that the characters in each substring are <strong>unique</strong>. That is, no letter appears in a single substring more than <strong>once</strong>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of substrings in such a partition.</em></p>\n\n<p>Note that each character should belong to exactly one substring in a partition.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abacaba&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nTwo possible partitions are (&quot;a&quot;,&quot;ba&quot;,&quot;cab&quot;,&quot;a&quot;) and (&quot;ab&quot;,&quot;a&quot;,&quot;ca&quot;,&quot;ba&quot;).\nIt can be shown that 4 is the minimum number of substrings needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ssssss&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:\n</strong>The only valid partition is (&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only English lowercase letters.</li>\n</ul>\n", "hints": ["Try to come up with a greedy approach.", "From left to right, extend every substring in the partition as much as possible."], "exampleTestcases": "\"abacaba\"\n\"ssssss\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int partitionString(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int partitionString(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def partitionString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def partitionString(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int partitionString(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PartitionString(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar partitionString = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function partitionString(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function partitionString($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func partitionString(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun partitionString(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int partitionString(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func partitionString(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef partition_string(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def partitionString(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn partition_string(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (partition-string s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec partition_string(S :: unicode:unicode_binary()) -> integer().\npartition_string(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec partition_string(s :: String.t) :: integer\n  def partition_string(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-substring-without-repeating-characters", "title": "Longest Substring Without Repeating Characters", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-substring-with-at-least-k-repeating-characters", "title": "Longest Substring with At Least K Repeating Characters", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "partition-labels", "title": "Partition Labels", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "partition-array-into-disjoint-intervals", "title": "Partition Array into Disjoint Intervals", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k", "title": "Maximum Sum of Distinct Subarrays With Length K", "isPaidOnly": false}]}