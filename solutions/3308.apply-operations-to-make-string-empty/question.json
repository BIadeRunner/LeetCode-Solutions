{"question_id": "3308", "problem_slug": "apply-operations-to-make-string-empty", "problem_title": "Apply Operations to Make String Empty", "content": "You are given a string s.\nConsider performing the following operation until s becomes empty:\n\nFor every alphabet character from 'a' to 'z', remove the first occurrence of that character in s (if it exists).\n\nFor example, let initially s = \"aabcbbca\". We do the following operations:\n\nRemove the underlined characters s = \"aabcbbca\". The resulting string is s = \"abbca\".\nRemove the underlined characters s = \"abbca\". The resulting string is s = \"ba\".\nRemove the underlined characters s = \"ba\". The resulting string is s = \"\".\n\nReturn the value of the string s right before applying the last operation. In the example above, answer is \"ba\".\n \nExample 1:\n\nInput: s = \"aabcbbca\"\nOutput: \"ba\"\nExplanation: Explained in the statement.\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"abcd\"\nExplanation: We do the following operation:\n- Remove the underlined characters s = \"abcd\". The resulting string is s = \"\".\nThe string just before the last operation is \"abcd\".\n\n \nConstraints:\n\n1 <= s.length <= 5 * 105\ns consists only of lowercase English letters.\n\n", "hints": ["Before the last operation, only the most frequent characters in the original string will remain.", "Keep only the last occurence of each of the most frequent characters."], "exampleTestcases": "\"aabcbbca\"\n\"abcd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string lastNonEmptyString(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String lastNonEmptyString(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def lastNonEmptyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def lastNonEmptyString(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* lastNonEmptyString(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LastNonEmptyString(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar lastNonEmptyString = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function lastNonEmptyString(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function lastNonEmptyString($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func lastNonEmptyString(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun lastNonEmptyString(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String lastNonEmptyString(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func lastNonEmptyString(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef last_non_empty_string(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def lastNonEmptyString(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn last_non_empty_string(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (last-non-empty-string s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec last_non_empty_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlast_non_empty_string(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec last_non_empty_string(s :: String.t) :: String.t\n  def last_non_empty_string(s) do\n    \n  end\nend"}}}