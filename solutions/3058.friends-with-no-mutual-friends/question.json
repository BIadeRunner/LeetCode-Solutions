{"questionId": "3358", "acRate": 50.0, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3058", "paidOnly": true, "status": "ac", "title": "Friends With No Mutual Friends", "titleSlug": "friends-with-no-mutual-friends", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "content": "<p>Table: <code>Friends</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id1    | int  |\n| user_id2    | int  |\n+-------------+------+\n(user_id1, user_id2) is the primary key (combination of columns with unique values) for this table.\nEach row contains user id1, user id2, both of whom are friends with each other.\n</pre>\n\n<p>Write a solution to find <strong>all</strong> <strong>pairs</strong> of users who are friends with each other and have <strong>no mutual</strong> friends.</p>\n\n<p>Return <em>the result table ordered by </em><code>user_id1,</code> <code>user_id2</code><em> in <strong>ascending</strong></em><em><strong> </strong>order.</em></p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nFriends table:\n+----------+----------+\n| user_id1 | user_id2 | \n+----------+----------+\n| 1        | 2        | \n| 2        | 3        | \n| 2        | 4        | \n| 1        | 5        | \n| 6        | 7        | \n| 3        | 4        | \n| 2        | 5        | \n| 8        | 9        | \n+----------+----------+\n<strong>Output:</strong> \n+----------+----------+\n| user_id1 | user_id2 | \n+----------+----------+\n| 6        | 7        | \n| 8        | 9        | \n+----------+----------+\n<strong>Explanation:</strong> \n- Users 1 and 2 are friends with each other, but they share a mutual friend with user ID 5, so this pair is not included.\n- Users 2 and 3 are friends, they both share a mutual friend with user ID 4, resulting in exclusion, similarly for users 2 and 4 who share a mutual friend with user ID 3, hence not included.\n- Users 1 and 5 are friends with each other, but they share a mutual friend with user ID 2, so this pair is not included.\n- Users 6 and 7, as well as users 8 and 9, are friends with each other, and they don&#39;t have any mutual friends, hence included.\n- Users 3 and 4 are friends with each other, but their mutual connection with user ID 2 means they are not included, similarly for users 2 and 5 are friends but are excluded due to their mutual connection with user ID 1.\nOutput table is ordered by user_id1 in ascending order.</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Friends\":[\"user_id1\",\"user_id2\"]},\"rows\":{\"Friends\":[[1,2],[2,3],[2,4],[1,5],[6,7],[3,4],[2,5],[8,9]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef friends_with_no_mutual_friends(friends: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": []}