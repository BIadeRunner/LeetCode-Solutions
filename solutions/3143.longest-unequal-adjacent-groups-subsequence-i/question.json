{"question_id": "3143", "problem_slug": "longest-unequal-adjacent-groups-subsequence-i", "problem_title": "Longest Unequal Adjacent Groups Subsequence I", "content": "You are given a string array words and a binary array groups both of length n, where words[i] is associated with groups[i].\nYour task is to select the longest alternating subsequence from words. A subsequence of words is alternating if for any two consecutive strings in the sequence, their corresponding elements in the binary array groups differ. Essentially, you are to choose strings such that adjacent elements have non-matching corresponding bits in the groups array.\nFormally, you need to find the longest subsequence of an array of indices [0, 1, ..., n - 1] denoted as [i0, i1, ..., ik-1], such that groups[ij] != groups[ij+1] for each 0 <= j < k - 1 and then find the words corresponding to these indices.\nReturn the selected subsequence. If there are multiple answers, return any of them.\nNote: The elements in words are distinct.\n \nExample 1:\n\nInput: words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\nOutput: [\"e\",\"b\"]\nExplanation: A subsequence that can be selected is [\"e\",\"b\"] because groups[0] != groups[2]. Another subsequence that can be selected is [\"a\",\"b\"] because groups[1] != groups[2]. It can be demonstrated that the length of the longest subsequence of indices that satisfies the condition is 2.\n\nExample 2:\n\nInput: words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\nOutput: [\"a\",\"b\",\"c\"]\nExplanation: A subsequence that can be selected is [\"a\",\"b\",\"c\"] because groups[0] != groups[1] and groups[1] != groups[2]. Another subsequence that can be selected is [\"a\",\"b\",\"d\"] because groups[0] != groups[1] and groups[1] != groups[3]. It can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n\n \nConstraints:\n\n1 <= n == words.length == groups.length <= 100\n1 <= words[i].length <= 10\ngroups[i] is either 0 or 1.\nwords consists of distinct strings.\nwords[i] consists of lowercase English letters.\n\n", "hints": ["This problem can be solved greedily.", "Begin by constructing the answer starting with the first number in <code>groups</code>.", "For each index <code>i</code> in the range <code>[1, n - 1]</code>, add <code>i</code> to the answer if <code>groups[i] != groups[i - 1]</code>."], "exampleTestcases": "[\"c\"]\n[0]\n[\"d\"]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> getLongestSubsequence(String[] words, int[] groups) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getLongestSubsequence(self, words, groups):\n        \"\"\"\n        :type words: List[str]\n        :type groups: List[int]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** getLongestSubsequence(char** words, int wordsSize, int* groups, int groupsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GetLongestSubsequence(string[] words, int[] groups) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {number[]} groups\n * @return {string[]}\n */\nvar getLongestSubsequence = function(words, groups) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getLongestSubsequence(words: string[], groups: number[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer[] $groups\n     * @return String[]\n     */\n    function getLongestSubsequence($words, $groups) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getLongestSubsequence(_ words: [String], _ groups: [Int]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getLongestSubsequence(words: Array<String>, groups: IntArray): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> getLongestSubsequence(List<String> words, List<int> groups) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getLongestSubsequence(words []string, groups []int) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {Integer[]} groups\n# @return {String[]}\ndef get_longest_subsequence(words, groups)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getLongestSubsequence(words: Array[String], groups: Array[Int]): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_longest_subsequence(words: Vec<String>, groups: Vec<i32>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-longest-subsequence words groups)\n  (-> (listof string?) (listof exact-integer?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_longest_subsequence(Words :: [unicode:unicode_binary()], Groups :: [integer()]) -> [unicode:unicode_binary()].\nget_longest_subsequence(Words, Groups) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_longest_subsequence(words :: [String.t], groups :: [integer]) :: [String.t]\n  def get_longest_subsequence(words, groups) do\n    \n  end\nend"}}}