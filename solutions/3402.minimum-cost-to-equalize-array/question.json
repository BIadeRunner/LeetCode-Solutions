{"question_id": "3402", "problem_slug": "minimum-cost-to-equalize-array", "problem_title": "Minimum Cost to Equalize Array", "content": "You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times:\n\nChoose an index i from nums and increase nums[i] by 1 for a cost of cost1.\nChoose two different indices i, j, from nums and increase nums[i] and nums[j] by 1 for a cost of cost2.\n\nReturn the minimum cost required to make all elements in the array equal. \nSince the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: nums = [4,1], cost1 = 5, cost2 = 2\nOutput: 15\nExplanation: \nThe following operations can be performed to make the values equal:\n\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,2].\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,3].\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,4].\n\nThe total cost is 15.\n\nExample 2:\n\nInput: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1\nOutput: 6\nExplanation: \nThe following operations can be performed to make the values equal:\n\nIncrease nums[0] and nums[1] by 1 for a cost of 1. nums becomes [3,4,3,3,5].\nIncrease nums[0] and nums[2] by 1 for a cost of 1. nums becomes [4,4,4,3,5].\nIncrease nums[0] and nums[3] by 1 for a cost of 1. nums becomes [5,4,4,4,5].\nIncrease nums[1] and nums[2] by 1 for a cost of 1. nums becomes [5,5,5,4,5].\nIncrease nums[3] by 1 for a cost of 2. nums becomes [5,5,5,5,5].\n\nThe total cost is 6.\n\nExample 3:\n\nInput: nums = [3,5,3], cost1 = 1, cost2 = 3\nOutput: 4\nExplanation:\nThe following operations can be performed to make the values equal:\n\nIncrease nums[0] by 1 for a cost of 1. nums becomes [4,5,3].\nIncrease nums[0] by 1 for a cost of 1. nums becomes [5,5,3].\nIncrease nums[2] by 1 for a cost of 1. nums becomes [5,5,4].\nIncrease nums[2] by 1 for a cost of 1. nums becomes [5,5,5].\n\nThe total cost is 4.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 106\n1 <= cost1 <= 106\n1 <= cost2 <= 106\n\n", "hints": ["How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?", "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.", "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.", "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.", "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."], "exampleTestcases": "[4,1]\n5\n2\n[2,3,3,3,5]\n2\n1\n[3,5,3]\n1\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minCostToEqualizeArray(self, nums, cost1, cost2):\n        \"\"\"\n        :type nums: List[int]\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minCostToEqualizeArray(int* nums, int numsSize, int cost1, int cost2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar minCostToEqualizeArray = function(nums, cost1, cost2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minCostToEqualizeArray(nums: number[], cost1: number, cost2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function minCostToEqualizeArray($nums, $cost1, $cost2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minCostToEqualizeArray(_ nums: [Int], _ cost1: Int, _ cost2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minCostToEqualizeArray(nums: IntArray, cost1: Int, cost2: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minCostToEqualizeArray(List<int> nums, int cost1, int cost2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minCostToEqualizeArray(nums []int, cost1 int, cost2 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef min_cost_to_equalize_array(nums, cost1, cost2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minCostToEqualizeArray(nums: Array[Int], cost1: Int, cost2: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost_to_equalize_array(nums: Vec<i32>, cost1: i32, cost2: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-cost-to-equalize-array nums cost1 cost2)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_cost_to_equalize_array(Nums :: [integer()], Cost1 :: integer(), Cost2 :: integer()) -> integer().\nmin_cost_to_equalize_array(Nums, Cost1, Cost2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost_to_equalize_array(nums :: [integer], cost1 :: integer, cost2 :: integer) :: integer\n  def min_cost_to_equalize_array(nums, cost1, cost2) do\n    \n  end\nend"}}}