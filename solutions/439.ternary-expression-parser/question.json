{"question_id": "439", "problem_slug": "ternary-expression-parser", "problem_title": "Ternary Expression Parser", "content": "Given a string expression representing arbitrarily nested ternary expressions, evaluate the expression, and return the result of it.\nYou can always assume that the given expression is valid and only contains digits, '?', ':', 'T', and 'F' where 'T' is true and 'F' is false. All the numbers in the expression are one-digit numbers (i.e., in the range [0, 9]).\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, 'T' or 'F'.\n \nExample 1:\n\nInput: expression = \"T?2:3\"\nOutput: \"2\"\nExplanation: If true, then result is 2; otherwise result is 3.\n\nExample 2:\n\nInput: expression = \"F?1:T?4:5\"\nOutput: \"4\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --> \"(F ? 1 : 4)\" --> \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --> \"(T ? 4 : 5)\" --> \"4\"\n\nExample 3:\n\nInput: expression = \"T?T?F:5:3\"\nOutput: \"F\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 3)\" --> \"F\"\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 5)\" --> \"F\"\n\n \nConstraints:\n\n5 <= expression.length <= 104\nexpression consists of digits, 'T', 'F', '?', and ':'.\nIt is guaranteed that expression is a valid ternary expression and that each number is a one-digit number.\n\n", "hints": [], "exampleTestcases": "\"T?2:3\"\n\"F?1:T?4:5\"\n\"T?T?F:5:3\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string parseTernary(string expression) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String parseTernary(String expression) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def parseTernary(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def parseTernary(self, expression: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* parseTernary(char* expression) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ParseTernary(string expression) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} expression\n * @return {string}\n */\nvar parseTernary = function(expression) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function parseTernary(expression: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return String\n     */\n    function parseTernary($expression) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func parseTernary(_ expression: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun parseTernary(expression: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String parseTernary(String expression) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func parseTernary(expression string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} expression\n# @return {String}\ndef parse_ternary(expression)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def parseTernary(expression: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn parse_ternary(expression: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (parse-ternary expression)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec parse_ternary(Expression :: unicode:unicode_binary()) -> unicode:unicode_binary().\nparse_ternary(Expression) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec parse_ternary(expression :: String.t) :: String.t\n  def parse_ternary(expression) do\n    \n  end\nend"}}}