{"question_id": "2452", "problem_slug": "product-sales-analysis-v", "problem_title": "Product Sales Analysis V", "content": "Table: Sales\n\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| sale_id     | int   |\n| product_id  | int   |\n| user_id     | int   |\n| quantity    | int   |\n+-------------+-------+\nsale_id contains unique values.\nproduct_id is a foreign key (column with unique values) to Product table.\nEach row of this table shows the ID of the product and the quantity purchased by a user.\n\n \nTable: Product\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| product_id  | int  |\n| price       | int  |\n+-------------+------+\nproduct_id contains unique values.\nEach row of this table indicates the price of each product.\n\n \nWrite a solution to report the spending of each user.\nReturn the resulting table ordered by spending in descending order. In case of a tie, order them by user_id in ascending order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nSales table:\n+---------+------------+---------+----------+\n| sale_id | product_id | user_id | quantity |\n+---------+------------+---------+----------+\n| 1       | 1          | 101     | 10       |\n| 2       | 2          | 101     | 1        |\n| 3       | 3          | 102     | 3        |\n| 4       | 3          | 102     | 2        |\n| 5       | 2          | 103     | 3        |\n+---------+------------+---------+----------+\nProduct table:\n+------------+-------+\n| product_id | price |\n+------------+-------+\n| 1          | 10    |\n| 2          | 25    |\n| 3          | 15    |\n+------------+-------+\nOutput: \n+---------+----------+\n| user_id | spending |\n+---------+----------+\n| 101     | 125      |\n| 102     | 75       |\n| 103     | 75       |\n+---------+----------+\nExplanation: \nUser 101 spent 10 * 10 + 1 * 25 = 125.\nUser 102 spent 3 * 15 + 2 * 15 = 75.\nUser 103 spent 3 * 25 = 75.\nUsers 102 and 103 spent the same amount and we break the tie by their ID while user 101 is on the top.\n\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Sales\": [\"sale_id\", \"product_id\", \"user_id\", \"quantity\"], \"Product\": [\"product_id\", \"price\"]}, \"rows\": {\"Sales\": [[1, 1, 101, 10], [2, 2, 101, 1], [3, 3, 102, 3], [4, 3, 102, 2], [5, 2, 103, 3]], \"Product\": [[1, 10], [2, 25], [3, 15]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef product_sales_analysis(sales: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}