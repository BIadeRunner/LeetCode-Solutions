{"question_id": "648", "problem_slug": "replace-words", "problem_title": "Replace Words", "content": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root \"help\" is followed by the word \"ful\", we can form a derivative \"helpful\".\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.\nReturn the sentence after the replacement.\n \nExample 1:\n\nInput: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"\n\nExample 2:\n\nInput: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\nOutput: \"a a b c\"\n\n \nConstraints:\n\n1 <= dictionary.length <= 1000\n1 <= dictionary[i].length <= 100\ndictionary[i] consists of only lower-case letters.\n1 <= sentence.length <= 106\nsentence consists of only lower-case letters and spaces.\nThe number of words in sentence is in the range [1, 1000]\nThe length of each word in sentence is in the range [1, 1000]\nEvery two consecutive words in sentence will be separated by exactly one space.\nsentence does not have leading or trailing spaces.\n\n", "hints": [], "exampleTestcases": "[\"cat\",\"bat\",\"rat\"]\n\"the cattle was rattled by the battery\"\n[\"a\",\"b\",\"c\"]\n\"aadsfasf absbs bbab cadsfafs\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string replaceWords(vector<string>& dictionary, string sentence) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String replaceWords(List<String> dictionary, String sentence) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def replaceWords(self, dictionary, sentence):\n        \"\"\"\n        :type dictionary: List[str]\n        :type sentence: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* replaceWords(char** dictionary, int dictionarySize, char* sentence) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ReplaceWords(IList<string> dictionary, string sentence) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} dictionary\n * @param {string} sentence\n * @return {string}\n */\nvar replaceWords = function(dictionary, sentence) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function replaceWords(dictionary: string[], sentence: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $dictionary\n     * @param String $sentence\n     * @return String\n     */\n    function replaceWords($dictionary, $sentence) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func replaceWords(_ dictionary: [String], _ sentence: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun replaceWords(dictionary: List<String>, sentence: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String replaceWords(List<String> dictionary, String sentence) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func replaceWords(dictionary []string, sentence string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} dictionary\n# @param {String} sentence\n# @return {String}\ndef replace_words(dictionary, sentence)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def replaceWords(dictionary: List[String], sentence: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn replace_words(dictionary: Vec<String>, sentence: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (replace-words dictionary sentence)\n  (-> (listof string?) string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec replace_words(Dictionary :: [unicode:unicode_binary()], Sentence :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreplace_words(Dictionary, Sentence) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec replace_words(dictionary :: [String.t], sentence :: String.t) :: String.t\n  def replace_words(dictionary, sentence) do\n    \n  end\nend"}}}