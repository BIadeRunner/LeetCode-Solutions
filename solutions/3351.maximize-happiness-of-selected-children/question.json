{"question_id": "3351", "problem_slug": "maximize-happiness-of-selected-children", "problem_title": "Maximize Happiness of Selected Children", "content": "You are given an array happiness of length n, and a positive integer k.\nThere are n children standing in a queue, where the ith child has happiness value happiness[i]. You want to select k children from these n children in k turns.\nIn each turn, when you select a child, the happiness value of all the children that have not been selected till now decreases by 1. Note that the happiness value cannot become negative and gets decremented only if it is positive.\nReturn the maximum sum of the happiness values of the selected children you can achieve by selecting k children.\n \nExample 1:\n\nInput: happiness = [1,2,3], k = 2\nOutput: 4\nExplanation: We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4.\n\nExample 2:\n\nInput: happiness = [1,1,1,1], k = 2\nOutput: 1\nExplanation: We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1.\n\nExample 3:\n\nInput: happiness = [2,3,4,5], k = 1\nOutput: 5\nExplanation: We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n\n \nConstraints:\n\n1 <= n == happiness.length <= 2 * 105\n1 <= happiness[i] <= 108\n1 <= k <= n\n\n", "hints": ["Since all the unselected numbers are decreasing at the same rate, we should greedily select <code>k</code> largest values.", "The <code>i<sup>th</code> largest number (<code>i = 1, 2, 3,…k</code>) should decrease by <code>(i - 1)</code> when it is picked.", "Add <code>0</code> if the decreased value is negative."], "exampleTestcases": "[1,2,3]\n2\n[1,1,1,1]\n2\n[2,3,4,5]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumHappinessSum(vector<int>& happiness, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumHappinessSum(int[] happiness, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumHappinessSum(self, happiness, k):\n        \"\"\"\n        :type happiness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumHappinessSum(int* happiness, int happinessSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumHappinessSum(int[] happiness, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} happiness\n * @param {number} k\n * @return {number}\n */\nvar maximumHappinessSum = function(happiness, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumHappinessSum(happiness: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $happiness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumHappinessSum($happiness, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumHappinessSum(_ happiness: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumHappinessSum(happiness: IntArray, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumHappinessSum(List<int> happiness, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumHappinessSum(happiness []int, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} happiness\n# @param {Integer} k\n# @return {Integer}\ndef maximum_happiness_sum(happiness, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumHappinessSum(happiness: Array[Int], k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_happiness_sum(happiness: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-happiness-sum happiness k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_happiness_sum(Happiness :: [integer()], K :: integer()) -> integer().\nmaximum_happiness_sum(Happiness, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_happiness_sum(happiness :: [integer], k :: integer) :: integer\n  def maximum_happiness_sum(happiness, k) do\n    \n  end\nend"}}}