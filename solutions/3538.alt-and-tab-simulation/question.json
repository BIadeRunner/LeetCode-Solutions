{"question_id": "3538", "problem_slug": "alt-and-tab-simulation", "problem_title": "Alt and Tab Simulation", "content": "There are n windows open numbered from 1 to n, we want to simulate using alt + tab to navigate between the windows.\nYou are given an array windows which contains the initial order of the windows (the first element is at the top and the last one is at the bottom).\nYou are also given an array queries where for each query, the window queries[i] is brought to the top.\nReturn the final state of the array windows.\n \nExample 1:\n\nInput: windows = [1,2,3], queries = [3,3,2]\nOutput: [2,3,1]\nExplanation:\nHere is the window array after each query:\n\nInitial order: [1,2,3]\nAfter the first query: [3,1,2]\nAfter the second query: [3,1,2]\nAfter the last query: [2,3,1]\n\n\nExample 2:\n\nInput: windows = [1,4,2,3], queries = [4,1,3]\nOutput: [3,1,4,2]\nExplanation:\nHere is the window array after each query:\n\nInitial order: [1,4,2,3]\nAfter the first query: [4,1,2,3]\nAfter the second query: [1,4,2,3]\nAfter the last query: [3,1,4,2]\n\n\n \nConstraints:\n\n1 <= n == windows.length <= 105\nwindows is a permutation of [1, n].\n1 <= queries.length <= 105\n1 <= queries[i] <= n\n\n", "hints": ["Let’s answer the queries offline.", "Start from the <b>last</b> query until you reach the first query.", "Each time, append the value of that query to a <code>ans</code> array if it wasn’t already appended.", "Then start from the <b>beginning</b> of <code>windows</code> and append to <code>ans</code> array if it wasn’t already appended."], "exampleTestcases": "[1,2,3]\n[3,3,2]\n[1,4,2,3]\n[4,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> simulationResult(vector<int>& windows, vector<int>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] simulationResult(int[] windows, int[] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def simulationResult(self, windows, queries):\n        \"\"\"\n        :type windows: List[int]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def simulationResult(self, windows: List[int], queries: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* simulationResult(int* windows, int windowsSize, int* queries, int queriesSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] SimulationResult(int[] windows, int[] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} windows\n * @param {number[]} queries\n * @return {number[]}\n */\nvar simulationResult = function(windows, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function simulationResult(windows: number[], queries: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $windows\n     * @param Integer[] $queries\n     * @return Integer[]\n     */\n    function simulationResult($windows, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func simulationResult(_ windows: [Int], _ queries: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun simulationResult(windows: IntArray, queries: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> simulationResult(List<int> windows, List<int> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func simulationResult(windows []int, queries []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} windows\n# @param {Integer[]} queries\n# @return {Integer[]}\ndef simulation_result(windows, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def simulationResult(windows: Array[Int], queries: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn simulation_result(windows: Vec<i32>, queries: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (simulation-result windows queries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec simulation_result(Windows :: [integer()], Queries :: [integer()]) -> [integer()].\nsimulation_result(Windows, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec simulation_result(windows :: [integer], queries :: [integer]) :: [integer]\n  def simulation_result(windows, queries) do\n    \n  end\nend"}}}