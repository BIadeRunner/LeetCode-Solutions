{"questionId": "1199", "acRate": 58.3036565180318, "difficulty": "Easy", "freqBar": 47.08291471517694, "frontendQuestionId": "1271", "paidOnly": true, "status": "ac", "title": "Hexspeak", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "hexspeak", "content": "<p>A decimal number can be converted to its <strong>Hexspeak representation</strong> by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit <code>&#39;0&#39;</code> with the letter <code>&#39;O&#39;</code>, and the digit <code>&#39;1&#39;</code> with the letter <code>&#39;I&#39;</code>. Such a representation is valid if and only if it consists only of the letters in the set <code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;I&#39;, &#39;O&#39;}</code>.</p>\n\n<p>Given a string <code>num</code> representing a decimal integer <code>n</code>, <em>return the <strong>Hexspeak representation</strong> of </em><code>n</code><em> if it is valid, otherwise return </em><code>&quot;ERROR&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;257&quot;\n<strong>Output:</strong> &quot;IOI&quot;\n<strong>Explanation:</strong> 257 is 101 in hexadecimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;3&quot;\n<strong>Output:</strong> &quot;ERROR&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 12</code></li>\n\t<li><code>num</code> does not contain leading zeros.</li>\n\t<li>num represents an integer in the range <code>[1, 10<sup>12</sup>]</code>.</li>\n</ul>\n", "hints": ["Convert the given number to hexadecimal.", "Replace all 0 and 1 with 'O' and 'I'.", "Check if the final string has any numerical digits."], "exampleTestcases": "\"257\"\n\"3\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string toHexspeak(string num) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String toHexspeak(String num) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def toHexspeak(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def toHexspeak(self, num: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* toHexspeak(char* num) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ToHexspeak(string num) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {string}\n */\nvar toHexspeak = function(num) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function toHexspeak(num: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function toHexspeak($num) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func toHexspeak(_ num: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun toHexspeak(num: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String toHexspeak(String num) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func toHexspeak(num string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @return {String}\ndef to_hexspeak(num)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def toHexspeak(num: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn to_hexspeak(num: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (to-hexspeak num)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec to_hexspeak(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nto_hexspeak(Num) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec to_hexspeak(num :: String.t) :: String.t\n  def to_hexspeak(num) do\n    \n  end\nend"}], "similarQuestionList": []}