{"question_id": "157", "problem_slug": "read-n-characters-given-read4", "problem_title": "Read N Characters Given Read4", "content": "Given a file and assume that you can only read the file using a given method read4, implement a method to read n characters.\nMethod read4: \nThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\nThe return value is the number of actual characters read.\nNote that read4() has its own file pointer, much like FILE *fp in C.\nDefinition of read4:\n\n    Parameter:  char[] buf4\n    Returns:    int\n\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n\nBelow is a high-level example of how read4 works:\n\n\nFile file(\"abcde\"); // File is \"abcde\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file\n\n \nMethod read:\nBy using the read4 method, implement the method read that reads n characters from file and store it in the buffer array buf. Consider that you cannot manipulate file directly.\nThe return value is the number of actual characters read.\nDefinition of read: \n\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\n\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n\nNote:\n\nConsider that you cannot manipulate the file directly. The file is only accessible for read4 but not for read.\nThe read function will only be called once for each test case.\nYou may assume the destination buffer array, buf, is guaranteed to have enough space for storing n characters.\n\n \nExample 1:\n\nInput: file = \"abc\", n = 4\nOutput: 3\nExplanation: After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3.\nNote that \"abc\" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.\n\nExample 2:\n\nInput: file = \"abcde\", n = 5\nOutput: 5\nExplanation: After calling your read method, buf should contain \"abcde\". We read a total of 5 characters from the file, so return 5.\n\nExample 3:\n\nInput: file = \"abcdABCD1234\", n = 12\nOutput: 12\nExplanation: After calling your read method, buf should contain \"abcdABCD1234\". We read a total of 12 characters from the file, so return 12.\n\n \nConstraints:\n\n1 <= file.length <= 500\nfile consist of English letters and digits.\n1 <= n <= 1000\n\n", "hints": [], "exampleTestcases": "\"abc\"\n4\n\"abcde\"\n5\n\"abcdABCD1234\"\n12", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\nclass Solution {\npublic:\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    int read(char *buf, int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char[] buf4);\n */\n\npublic class Solution extends Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int read(char[] buf, int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf4, a list of characters\n    @return an integer\n    def read4(buf4):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\n\nclass Solution(object):\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "\"\"\"\nThe read4 API is already defined for you.\n\n    @param buf4, a list of characters\n    @return an integer\n    def read4(buf4):\n\n# Below is an example of how the read4 API can be called.\nfile = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\n\nclass Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        "}, "C": {"langSlug": "c", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     int read4(char *buf4);\n */\n\n/**\n * @param buf Destination buffer\n * @param n   Number of characters to read\n * @return    The number of actual characters read\n */\nint _read(char* buf, int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * The Read4 API is defined in the parent class Reader4.\n *     int Read4(char[] buf4);\n */\n\npublic class Solution : Reader4 {\n    /**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    public int Read(char[] buf, int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for read4()\n * \n * @param {character[]} buf4 Destination buffer\n * @return {number} The number of actual characters read\n * read4 = function(buf4) {\n *     ...\n * };\n */\n\n/**\n * @param {function} read4()\n * @return {function}\n */\nvar solution = function(read4) {\n    /**\n     * @param {character[]} buf Destination buffer\n     * @param {number} n Number of characters to read\n     * @return {number} The number of actual characters read\n     */\n    return function(buf, n) {\n        \n    };\n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for read4()\n * read4 = function(buf4: string[]): number {\n *     ...\n * };\n */\n\nvar solution = function(read4: any) {\n\n    return function(buf: string[], n: number): number {\n        \n    };\n};"}, "PHP": {"langSlug": "php", "code": "/* The read4 API is defined in the parent class Reader4.\n      public function read4(&$buf4){} */\n\nclass Solution extends Reader4 {\n    /**\n     * @param  Char[]   &$buf\tDestination buffer\n     * @param  Integer  $n\t\tNumber of characters to read\n     * @return Integer \t\t\tThe number of actual characters read\n     */\n    function read(&$buf, $n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * The read4 API is defined in the parent class Reader4.\n *     func read4(_ buf4: inout [Character]) -> Int;\n */\n\nclass Solution : Reader4 {\n\t/**\n     * @param buf Destination buffer\n     * @param n   Number of characters to read\n     * @return    The number of actual characters read\n     */\n    func read(_ buf: inout [Character], _ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n* The read4 API is defined in the parent class Reader4.\n* fun read4(buf4:CharArray): Int {}\n*/\n\nclass Solution:Reader4() {\n    /**\n      * @param buf Destination buffer\n      * @param n Number of characters to read\n      * @return The number of actual characters read\n      */\n    override fun read(buf:CharArray, n:Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * The read4 API is already defined for you.\n *\n *     read4 := func(buf4 []byte) int\n *\n * // Below is an example of how the read4 API can be called.\n * file := File(\"abcdefghijk\") // File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\n * buf4 := make([]byte, 4) // Create buffer with enough space to store characters\n * read4(buf4) // read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\n * read4(buf4) // read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\n * read4(buf4) // read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n */\n\nvar solution = func(read4 func([]byte) int) func([]byte, int) int {\n    // implement read below.\n    return func(buf []byte, n int) int {\n        \n    }\n}\n"}, "Ruby": {"langSlug": "ruby", "code": "# The read4 API is already defined for you.\n# Below is an example of how the read4 API can be called.\n# file = File.new(\"abcdefghijk\") File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\n# buf4 = [' '] * 4 Create buffer with enough space to store characters\n# read4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\n# read4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\n# read4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\n# @param {List[str]} buf\n# @param {int} n\n# @return {int}\ndef read(buf, n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n  * The read4 API is defined in the parent class Reader4.\n  *     def read4(buf4: Array[Char]): Int = {}\n  */\n\nclass Solution extends Reader4 {\n    /**\n      * @param buf Destination buffer\n \t  * @param n   Number of characters to read\n      * @return    The number of actual characters read\n      */\n    def read(buf: Array[Char], n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/**\n * The read4 API is defined as.\n *     fn read4(&self,buf4: &mut [char]) -> i32;\n * You can call it using self.read4(buf4)\n */\n\nimpl Solution {\n    pub fn read(&self, buf: &mut [char], n: i32) -> i32 {\n         \n    }\n}\n"}}}