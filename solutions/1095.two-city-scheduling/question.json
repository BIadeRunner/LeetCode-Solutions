{"question_id": "1095", "problem_slug": "two-city-scheduling", "problem_title": "Two City Scheduling", "content": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.\n \nExample 1:\n\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n\nExample 2:\n\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859\n\nExample 3:\n\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086\n\n \nConstraints:\n\n2 * n == costs.length\n2 <= costs.length <= 100\ncosts.length is even.\n1 <= aCosti, bCosti <= 1000\n\n", "hints": [], "exampleTestcases": "[[10,20],[30,200],[400,50],[30,20]]\n[[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n[[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int twoCitySchedCost(vector<vector<int>>& costs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int twoCitySchedCost(int[][] costs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def twoCitySchedCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int twoCitySchedCost(int** costs, int costsSize, int* costsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TwoCitySchedCost(int[][] costs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} costs\n * @return {number}\n */\nvar twoCitySchedCost = function(costs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function twoCitySchedCost(costs: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function twoCitySchedCost($costs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func twoCitySchedCost(_ costs: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun twoCitySchedCost(costs: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int twoCitySchedCost(List<List<int>> costs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func twoCitySchedCost(costs [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} costs\n# @return {Integer}\ndef two_city_sched_cost(costs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def twoCitySchedCost(costs: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn two_city_sched_cost(costs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (two-city-sched-cost costs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec two_city_sched_cost(Costs :: [[integer()]]) -> integer().\ntwo_city_sched_cost(Costs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec two_city_sched_cost(costs :: [[integer]]) :: integer\n  def two_city_sched_cost(costs) do\n    \n  end\nend"}}}