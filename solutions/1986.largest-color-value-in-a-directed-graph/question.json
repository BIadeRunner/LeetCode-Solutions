{"question_id": "1986", "problem_slug": "largest-color-value-in-a-directed-graph", "problem_title": "Largest Color Value in a Directed Graph", "content": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.\n \nExample 1:\n\n\r\nInput: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\r\nOutput: 3\r\nExplanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image).\r\n\nExample 2:\n\n\r\nInput: colors = \"a\", edges = [[0,0]]\r\nOutput: -1\r\nExplanation: There is a cycle from 0 to 0.\r\n\n \nConstraints:\n\nn == colors.length\nm == edges.length\n1 <= n <= 105\n0 <= m <= 105\ncolors consists of lowercase English letters.\n0 <= aj, bj < n\n", "hints": ["Use topological sort.", "let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)"], "exampleTestcases": "\"abaca\"\n[[0,1],[0,2],[2,3],[3,4]]\n\"a\"\n[[0,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    int largestPathValue(string colors, vector<vector<int>>& edges) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def largestPathValue(self, colors, edges):\r\n        \"\"\"\r\n        :type colors: str\r\n        :type edges: List[List[int]]\r\n        :rtype: int\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:"}, "C": {"langSlug": "c", "code": "int largestPathValue(char * colors, int** edges, int edgesSize, int* edgesColSize){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public int LargestPathValue(string colors, int[][] edges) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {string} colors\r\n * @param {number[][]} edges\r\n * @return {number}\r\n */\r\nvar largestPathValue = function(colors, edges) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestPathValue(colors: string, edges: number[][]): number {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param String $colors\r\n     * @param Integer[][] $edges\r\n     * @return Integer\r\n     */\r\n    function largestPathValue($colors, $edges) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func largestPathValue(_ colors: String, _ edges: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun largestPathValue(colors: String, edges: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func largestPathValue(colors string, edges [][]int) int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} colors\r\n# @param {Integer[][]} edges\r\n# @return {Integer}\r\ndef largest_path_value(colors, edges)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def largestPathValue(colors: String, edges: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-path-value colors edges)\r\n  (-> string? (listof (listof exact-integer?)) exact-integer?)\r\n\r\n  )"}}}