{"question_id": "3415", "problem_slug": "check-if-grid-satisfies-conditions", "problem_title": "Check if Grid Satisfies Conditions", "content": "You are given a 2D matrix grid of size m x n. You need to check if each cell grid[i][j] is:\n\nEqual to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists).\nDifferent from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists).\n\nReturn true if all the cells satisfy these conditions, otherwise, return false.\n \nExample 1:\n\nInput: grid = [[1,0,2],[1,0,2]]\nOutput: true\nExplanation:\n\nAll the cells in the grid satisfy the conditions.\n\nExample 2:\n\nInput: grid = [[1,1,1],[0,0,0]]\nOutput: false\nExplanation:\n\nAll cells in the first row are equal.\n\nExample 3:\n\nInput: grid = [[1],[2],[3]]\nOutput: false\nExplanation:\n\nCells in the first column have different values.\n\n \nConstraints:\n\n1 <= n, m <= 10\n0 <= grid[i][j] <= 9\n\n", "hints": ["Check if each column has same value in each cell.", "If the previous condition is satisfied, we can simply check the first cells in adjacent columns."], "exampleTestcases": "[[1,0,2],[1,0,2]]\n[[1,1,1],[0,0,0]]\n[[1],[2],[3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool satisfiesConditions(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean satisfiesConditions(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def satisfiesConditions(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def satisfiesConditions(self, grid: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool satisfiesConditions(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool SatisfiesConditions(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar satisfiesConditions = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function satisfiesConditions(grid: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function satisfiesConditions($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func satisfiesConditions(_ grid: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun satisfiesConditions(grid: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool satisfiesConditions(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func satisfiesConditions(grid [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef satisfies_conditions(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def satisfiesConditions(grid: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn satisfies_conditions(grid: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (satisfies-conditions grid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec satisfies_conditions(Grid :: [[integer()]]) -> boolean().\nsatisfies_conditions(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec satisfies_conditions(grid :: [[integer]]) :: boolean\n  def satisfies_conditions(grid) do\n    \n  end\nend"}}}