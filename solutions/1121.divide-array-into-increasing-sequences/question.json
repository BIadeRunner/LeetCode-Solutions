{"questionId": "1118", "acRate": 60.913520097442145, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1121", "paidOnly": true, "status": "ac", "title": "Divide Array Into Increasing Sequences", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "divide-array-into-increasing-sequences", "content": "<p>Given an integer array <code>nums</code> sorted in non-decreasing order and an integer <code>k</code>, return <code>true</code><em> if this array can be divided into one or more disjoint increasing subsequences of length at least </em><code>k</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,3,4,4], k = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be divided into two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,6,6,7,8], k = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to divide the array using the conditions required.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums</code> is sorted in non-decreasing order.</li>\n</ul>\n", "hints": ["Think in the frequency of the numbers and how this affects the number of sequences needed.", "What is the minimum number of sequences we need to form? Considering frequency of the numbers.", "Think about the least number of sequences to maximize the lengths.", "The number of sequences needed is equal to the maximum frequency of an element.", "How to put the other elements into sequences ? Think in a greedy approach."], "exampleTestcases": "[1,2,2,3,3,4,4]\n3\n[5,6,6,7,8]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canDivideIntoSubsequences(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canDivideIntoSubsequences(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canDivideIntoSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canDivideIntoSubsequences(self, nums: List[int], k: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canDivideIntoSubsequences(int* nums, int numsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanDivideIntoSubsequences(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar canDivideIntoSubsequences = function(nums, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canDivideIntoSubsequences(nums: number[], k: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canDivideIntoSubsequences($nums, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canDivideIntoSubsequences(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canDivideIntoSubsequences(nums: IntArray, k: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canDivideIntoSubsequences(List<int> nums, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canDivideIntoSubsequences(nums []int, k int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef can_divide_into_subsequences(nums, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canDivideIntoSubsequences(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_divide_into_subsequences(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-divide-into-subsequences nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_divide_into_subsequences(Nums :: [integer()], K :: integer()) -> boolean().\ncan_divide_into_subsequences(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_divide_into_subsequences(nums :: [integer], k :: integer) :: boolean\n  def can_divide_into_subsequences(nums, k) do\n    \n  end\nend"}], "similarQuestionList": []}