{"question_id": "357", "problem_slug": "count-numbers-with-unique-digits", "problem_title": "Count Numbers with Unique Digits", "content": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n \nExample 1:\n\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99\n\nExample 2:\n\nInput: n = 0\nOutput: 1\n\n \nConstraints:\n\n0 <= n <= 8\n\n", "hints": ["A direct way is to use the backtracking approach.", "Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10<sup>n</sup>.", "This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.", "Let f(k) = count of numbers with unique digits with length equals k.", "f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0]."], "exampleTestcases": "2\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countNumbersWithUniqueDigits(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countNumbersWithUniqueDigits(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countNumbersWithUniqueDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countNumbersWithUniqueDigits(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountNumbersWithUniqueDigits(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countNumbersWithUniqueDigits = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countNumbersWithUniqueDigits(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countNumbersWithUniqueDigits($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countNumbersWithUniqueDigits(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countNumbersWithUniqueDigits(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countNumbersWithUniqueDigits(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countNumbersWithUniqueDigits(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_numbers_with_unique_digits(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countNumbersWithUniqueDigits(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_numbers_with_unique_digits(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-numbers-with-unique-digits n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_numbers_with_unique_digits(N :: integer()) -> integer().\ncount_numbers_with_unique_digits(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_numbers_with_unique_digits(n :: integer) :: integer\n  def count_numbers_with_unique_digits(n) do\n    \n  end\nend"}}}