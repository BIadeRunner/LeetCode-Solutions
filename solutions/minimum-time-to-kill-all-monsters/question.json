{"questionId": "2537", "acRate": 56.422887457370216, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2403", "paidOnly": true, "status": "ac", "title": "Minimum Time to Kill All Monsters", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "minimum-time-to-kill-all-monsters", "content": "<p>You are given an integer array <code>power</code> where <code>power[i]</code> is the power of the <code>i<sup>th</sup></code> monster.</p>\n\n<p>You start with <code>0</code> mana points, and each day you increase your mana points by <code>gain</code> where <code>gain</code> initially is equal to <code>1</code>.</p>\n\n<p>Each day, after gaining <code>gain</code> mana, you can defeat a monster if your mana points are greater than or equal to the power of that monster. When you defeat a monster:</p>\n\n<ul>\n\t<li>your mana points will be reset to <code>0</code>, and</li>\n\t<li>the value of <code>gain</code> increases by <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of days needed to defeat all the monsters.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> power = [3,1,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 2<sup>nd</sup> monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points.\n- Day 3: Gain 2 mana points to get a total of 4 mana points. Spend all mana points to kill the 3<sup>rd</sup> monster.\n- Day 4: Gain 3 mana points to get a total of 3 mana points. Spend all mana points to kill the 1<sup>st</sup> monster.\nIt can be proven that 4 is the minimum number of days needed. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> power = [1,1,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 1<sup>st</sup> monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points. Spend all mana points to kill the 2<sup>nd</sup> monster.\n- Day 3: Gain 3 mana points to get a total of 3 mana points.\n- Day 4: Gain 3 mana points to get a total of 6 mana points. Spend all mana points to kill the 3<sup>rd</sup> monster.\nIt can be proven that 4 is the minimum number of days needed. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> power = [1,2,4,9]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 1st monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points. Spend all mana points to kill the 2nd monster.\n- Day 3: Gain 3 mana points to get a total of 3 mana points.\n- Day 4: Gain 3 mana points to get a total of 6 mana points.\n- Day 5: Gain 3 mana points to get a total of 9 mana points. Spend all mana points to kill the 4th monster.\n- Day 6: Gain 4 mana points to get a total of 4 mana points. Spend all mana points to kill the 3rd monster.\nIt can be proven that 6 is the minimum number of days needed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= power.length &lt;= 17</code></li>\n\t<li><code>1 &lt;= power[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Each monster can only have two states. They are either alive or dead.", "We can use bitmasks to represent every possible combination of alive and dead monsters.", "Let dp[mask] represent the minimum number of days needed to reach the state mask."], "exampleTestcases": "[3,1,4]\n[1,1,4]\n[1,2,4,9]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumTime(vector<int>& power) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minimumTime(int[] power) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumTime(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumTime(self, power: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minimumTime(int* power, int powerSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinimumTime(int[] power) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar minimumTime = function(power) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumTime(power: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function minimumTime($power) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumTime(_ power: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumTime(power: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumTime(List<int> power) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumTime(power []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} power\n# @return {Integer}\ndef minimum_time(power)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumTime(power: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time(power: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-time power)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_time(Power :: [integer()]) -> integer().\nminimum_time(Power) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time(power :: [integer]) :: integer\n  def minimum_time(power) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "closest-room", "title": "Closest Room", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "eliminate-maximum-number-of-monsters", "title": "Eliminate Maximum Number of Monsters", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-ways-to-build-sturdy-brick-wall", "title": "Number of Ways to Build Sturdy Brick Wall", "isPaidOnly": true}]}