{"question_id": "3414", "problem_slug": "find-number-of-ways-to-reach-the-k-th-stair", "problem_title": "Find Number of Ways to Reach the K-th Stair", "content": "You are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\n\nGo down to stair i - 1. This operation cannot be used consecutively or on stair 0.\nGo up to stair i + 2jump. And then, jump becomes jump + 1.\n\nReturn the total number of ways Alice can reach stair k.\nNote that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.\n \nExample 1:\n\nInput: k = 0\nOutput: 2\nExplanation:\nThe 2 possible ways of reaching stair 0 are:\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 20 stairs to reach stair 1.\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\n\n\n\n\nExample 2:\n\nInput: k = 1\nOutput: 4\nExplanation:\nThe 4 possible ways of reaching stair 1 are:\n\nAlice starts at stair 1. Alice is at stair 1.\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 20 stairs to reach stair 1.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the second type, she goes up 20 stairs to reach stair 2.\nUsing an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 20 stairs to reach stair 1.\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 21 stairs to reach stair 2.\nUsing an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\n\n\n \nConstraints:\n\n0 <= k <= 109\n\n", "hints": ["On using <code>x</code> operations of the second type and <code>y</code> operations of the first type, the stair <code>2<sup>x</sup> - y</code> is reached.", "Since first operations cannot be consecutive, there are exactly <code>x + 1</code> positions (before and after each power of 2) to perform the second operation.", "Using combinatorics, we have <sup>x + 1</sup>C<sub>y</sub> number of ways to select the positions of second operations."], "exampleTestcases": "0\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int waysToReachStair(int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def waysToReachStair(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int waysToReachStair(int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WaysToReachStair(int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar waysToReachStair = function(k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function waysToReachStair(k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function waysToReachStair($k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func waysToReachStair(_ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun waysToReachStair(k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int waysToReachStair(int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func waysToReachStair(k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @return {Integer}\ndef ways_to_reach_stair(k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def waysToReachStair(k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn ways_to_reach_stair(k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (ways-to-reach-stair k)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec ways_to_reach_stair(K :: integer()) -> integer().\nways_to_reach_stair(K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec ways_to_reach_stair(k :: integer) :: integer\n  def ways_to_reach_stair(k) do\n    \n  end\nend"}}}