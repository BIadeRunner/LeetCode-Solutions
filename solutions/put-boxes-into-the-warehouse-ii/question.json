{"questionId": "1719", "acRate": 66.04516416580003, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1580", "paidOnly": true, "status": "ac", "title": "Put Boxes Into the Warehouse II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "put-boxes-into-the-warehouse-ii", "content": "<p>You are given two arrays of positive integers, <code>boxes</code> and <code>warehouse</code>, representing the heights of some boxes of unit width and the heights of <code>n</code> rooms in a warehouse respectively. The warehouse&#39;s rooms are labeled from <code>0</code> to <code>n - 1</code> from left to right where <code>warehouse[i]</code> (0-indexed) is the height of the <code>i<sup>th</sup></code> room.</p>\n\n<p>Boxes are put into the warehouse by the following rules:</p>\n\n<ul>\n\t<li>Boxes cannot be stacked.</li>\n\t<li>You can rearrange the insertion order of the boxes.</li>\n\t<li>Boxes can be pushed into the warehouse from <strong>either side</strong> (left or right)</li>\n\t<li>If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.</li>\n</ul>\n\n<p>Return <em>the maximum number of boxes you can put into the warehouse.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/30/22.png\" style=\"width: 401px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/30/22-1.png\" style=\"width: 240px; height: 202px;\" />\nWe can store the boxes in the following order:\n1- Put the yellow box in room 2 from either the left or right side.\n2- Put the orange box in room 3 from the right side.\n3- Put the green box in room 1 from the left side.\n4- Put the red box in room 0 from the left side.\nNotice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/30/22-2.png\" style=\"width: 401px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> boxes = [3,5,5,2], warehouse = [2,1,3,4,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/30/22-3.png\" style=\"width: 280px; height: 242px;\" />\nIt is not possible to put the two boxes of height 5 in the warehouse since there&#39;s only 1 room of height &gt;= 5.\nOther valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == warehouse.length</code></li>\n\t<li><code>1 &lt;= boxes.length, warehouse.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[i], warehouse[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Try to put at least one box in the house pushing it from either side.", "Once you put one box to the house, you can solve the problem with the same logic used to solve version I. You have a warehouse open from the left only and a warehouse open from the right only."], "exampleTestcases": "[1,2,2,3,4]\n[3,4,1,2]\n[3,5,5,2]\n[2,1,3,4,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxBoxesInWarehouse(vector<int>& boxes, vector<int>& warehouse) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxBoxesInWarehouse(self, boxes, warehouse):\n        \"\"\"\n        :type boxes: List[int]\n        :type warehouse: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxBoxesInWarehouse(int* boxes, int boxesSize, int* warehouse, int warehouseSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} boxes\n * @param {number[]} warehouse\n * @return {number}\n */\nvar maxBoxesInWarehouse = function(boxes, warehouse) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxBoxesInWarehouse(boxes: number[], warehouse: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $boxes\n     * @param Integer[] $warehouse\n     * @return Integer\n     */\n    function maxBoxesInWarehouse($boxes, $warehouse) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxBoxesInWarehouse(_ boxes: [Int], _ warehouse: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxBoxesInWarehouse(boxes: IntArray, warehouse: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxBoxesInWarehouse(List<int> boxes, List<int> warehouse) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxBoxesInWarehouse(boxes []int, warehouse []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} boxes\n# @param {Integer[]} warehouse\n# @return {Integer}\ndef max_boxes_in_warehouse(boxes, warehouse)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxBoxesInWarehouse(boxes: Array[Int], warehouse: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_boxes_in_warehouse(boxes: Vec<i32>, warehouse: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-boxes-in-warehouse boxes warehouse)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_boxes_in_warehouse(Boxes :: [integer()], Warehouse :: [integer()]) -> integer().\nmax_boxes_in_warehouse(Boxes, Warehouse) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_boxes_in_warehouse(boxes :: [integer], warehouse :: [integer]) :: integer\n  def max_boxes_in_warehouse(boxes, warehouse) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "put-boxes-into-the-warehouse-i", "title": "Put Boxes Into the Warehouse I", "isPaidOnly": true}]}