{"questionId": "1681", "acRate": 70.01918771985929, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1538", "paidOnly": true, "status": "ac", "title": "Guess the Majority in a Hidden Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "guess-the-majority-in-a-hidden-array", "content": "<p>We have an integer array <code>nums</code>, where all the integers in <code>nums</code> are <strong>0</strong> or <strong>1</strong>. You will not be given direct access to the array, instead, you will have an <strong>API</strong> <code>ArrayReader</code> which have the following functions:</p>\n\n<ul>\n\t<li><code>int query(int a, int b, int c, int d)</code>: where <code>0 &lt;= a &lt; b &lt; c &lt; d &lt; ArrayReader.length()</code>. The function returns the distribution of the value of the 4 elements and returns:\n\n\t<ul>\n\t\t<li><strong>4 </strong>: if the values of the 4 elements are the same (0 or 1).</li>\n\t\t<li><strong>2</strong> : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.</li>\n\t\t<li><strong>0 </strong>: if two element have a value equal to 0 and two elements have a value equal to 1.</li>\n\t</ul>\n\t</li>\n\t<li><code>int length()</code>: Returns the size of the array.</li>\n</ul>\n\n<p>You are allowed to call <code>query()</code> <b>2 * n times</b> at most where n is equal to <code>ArrayReader.length()</code>.</p>\n\n<p>Return <strong>any</strong> index of the most frequent value in <code>nums</code>, in case of tie, return -1.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,0,1,1,1,1]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The following calls to the API\nreader.length() // returns 8 because there are 8 elements in the hidden array.\nreader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums[0], nums[1], nums[2], nums[3]\n// Three elements have a value equal to 0 and one element has value equal to 1 or viceversa.\nreader.query(4,5,6,7) // returns 4 because nums[4], nums[5], nums[6], nums[7] have the same value.\nwe can infer that the most frequent value is found in the last 4 elements.\nIndex 2, 4, 6, 7 is also a correct answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,0]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,0,1,0,1,0]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>5 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What is the minimum number of calls needed to find the majority element?</p>\n", "hints": ["If you find that 2 indexes in the array (id1, id2) have the same value (nums [id1] == nums [id2]), you could infer the values of (x, y) based on the results of query (id1, id2, x, y)."], "exampleTestcases": "[0,0,1,0,1,1,1,1]\n[0,0,1,1,0]\n[1,0,1,0,1,0,1,0]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *   public:\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     int query(int a, int b, int c, int d);\n *\n *     // Returns the length of the array\n *     int length();\n * };\n */\n\nclass Solution {\npublic:\n    int guessMajority(ArrayReader &reader) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *   public:\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     public int query(int a, int b, int c, int d);\n *\n *     // Returns the length of the array\n *     public int length();\n * };\n */\n\nclass Solution {\n    public int guessMajority(ArrayReader reader) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is the ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#\t # Compares 4 different elements in the array\n#\t # return 4 if the values of the 4 elements are the same (0 or 1).\n#\t # return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n#\t # return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n#    def query(self, a, b, c, d):\n#        \"\"\"\n#        :type a, b, c, d: int\n#        :rtype int\n#        \"\"\"\n#\n#\t # Returns the length of the array\n#    def length(self):\n#        \"\"\"\n#        :rtype int\n#     \n\nclass Solution(object):\n    def guessMajority(self, reader):\n        \"\"\"\n        :type reader: ArrayReader\n        :rtype: integer\n        \"\"\""}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is the ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#\t # Compares 4 different elements in the array\n#\t # return 4 if the values of the 4 elements are the same (0 or 1).\n#\t # return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n#\t # return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n#    def query(self, a: int, b: int, c: int, d: int) -> int:\n#\n#\t # Returns the length of the array\n#    def length(self) -> int:\n#\n\nclass Solution:\n    def guessMajority(self, reader: 'ArrayReader') -> int:"}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Compares 4 different elements in the array\n * // return 4 if the values of the 4 elements are the same (0 or 1).\n * // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n * // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n * int query(ArrayReader *, int a, int b, int c, int d);\n *\n * // Returns the length of the array\n * int length(ArrayReader *);\n */\n\nint guessMajority(ArrayReader* reader) {\n\t\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *   public:\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     public int Query(int a, int b, int c, int d) {}\n *\n *     // Returns the length of the array\n *     public int Length() {}\n * };\n */\n\nclass Solution {\n    public int GuessMajority(ArrayReader reader) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * function ArrayReader() {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     @param {number} a, b, c, d\n *     @return {number}\n *     this.query = function(a, b, c, d) {\n *         ...\n *     }; \n *\n *     // Returns the length of the array\n *     @return {number}\n *     this.length = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {ArrayReader} reader\n * @return {number}\n */\nvar guessMajority = function(reader) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     query(a: number, b: number, c: number, d: number): number { };\n *\n *     // Returns the length of the array\n *     length(): number { };\n * };\n */\n\nfunction guessMajority(reader: ArrayReader): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     function query($a, $b, $c, $d) {}\n *\n *     // Returns the length of the array\n *     function length() {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param ArrayReader $reader\n     * @return Integer\n     */\n    function guessMajority($reader) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     public func query(_ a: Int, _ b: Int, _ c: Int, _ d: Int) -> Int {}\n *\n *     // Returns the length of the array\n *     public func length() -> Int {}\n * }\n */\n\nclass Solution {\n    func guessMajority(_ reader: ArrayReader) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     fun query(a: Int, b: Int, c: Int, d: Int): Int {}\n *\n *     // Returns the length of the array\n *     fun length(): Int {}\n * }\n */\n\nclass Solution {\n    fun guessMajority(reader: ArrayReader): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * type ArrayReader struct {\n * }\n * // Compares 4 different elements in the array\n * // return 4 if the values of the 4 elements are the same (0 or 1).\n * // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n * // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n * func (this *ArrayReader) query(a, b, c, d int) int {}\n * \n * // Returns the length of the array\n * func (this *ArrayReader) length() int {}\n */\n\nfunc guessMajority(reader *ArrayReader) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# class ArrayReader\n#\t # Compares 4 different elements in the array\n#\t # return 4 if the values of the 4 elements are the same (0 or 1).\n#\t # return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n#\t # return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n#    def query(a, b, c, d):\n#       \n#    end\n#\n#\t # Returns the length of the array\n#    def length()\n#\t\t\n#\t end\n# end\n\n# @param {ArrayReader} reader\n# @return {int}\ndef guess_majority(reader)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three\u00a0elements have a value\u00a0equal to 0\u00a0and one\u00a0element has value equal to 1\u00a0or vice versa.\n *     // return 0 :\u00a0if two element have a value equal to 0 and two elements have a value equal to 1.\n *     def query(a: Int, b: Int, c: Int, d: Int): Int {}\n *\n *     // Returns the length of the array\n *     def length(): Int {}\n * }\n */\n\nobject Solution {\n    def guessMajority(reader: ArrayReader): Int = {\n        \n\t}\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * struct ArrayReader;\n * impl ArrayReader {\n *     // Compares 4 different elements in the array\n *     // return 4 if the values of the 4 elements are the same (0 or 1).\n *     // return 2 if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.\n *     // return 0 : if two element have a value equal to 0 and two elements have a value equal to 1.\n *     pub fn query(a: i32, b: i32, c: i32, d: i32) -> i32 {}\n *\n *     // Returns the length of the array\n *     pub fn length() -> i32 {}\n * };\n */\n\nimpl Solution {\n    pub fn get_majority(reader: &ArrayReader) -> i32 {\n        \n    }\n}"}], "similarQuestionList": []}