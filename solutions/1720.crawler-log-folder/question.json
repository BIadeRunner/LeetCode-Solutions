{"question_id": "1720", "problem_slug": "crawler-log-folder", "problem_title": "Crawler Log Folder", "content": "The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\n\"./\" : Remain in the same folder.\n\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist).\n\nYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\n \nExample 1:\n\n\nInput: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\nOutput: 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.\n\nExample 2:\n\n\nInput: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\nOutput: 3\n\nExample 3:\n\nInput: logs = [\"d1/\",\"../\",\"../\",\"../\"]\nOutput: 0\n\n \nConstraints:\n\n1 <= logs.length <= 103\n2 <= logs[i].length <= 10\nlogs[i] contains lowercase English letters, digits, '.', and '/'.\nlogs[i] follows the format described in the statement.\nFolder names consist of lowercase English letters and digits.\n\n", "hints": ["Simulate the process but don’t move the pointer beyond the main folder."], "exampleTestcases": "[\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\n[\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\n[\"d1/\",\"../\",\"../\",\"../\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minOperations(vector<string>& logs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minOperations(String[] logs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minOperations(self, logs):\n        \"\"\"\n        :type logs: List[str]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minOperations(char** logs, int logsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinOperations(string[] logs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} logs\n * @return {number}\n */\nvar minOperations = function(logs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minOperations(logs: string[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $logs\n     * @return Integer\n     */\n    function minOperations($logs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minOperations(_ logs: [String]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minOperations(logs: Array<String>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minOperations(List<String> logs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minOperations(logs []string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} logs\n# @return {Integer}\ndef min_operations(logs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minOperations(logs: Array[String]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_operations(logs: Vec<String>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-operations logs)\n  (-> (listof string?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_operations(Logs :: [unicode:unicode_binary()]) -> integer().\nmin_operations(Logs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_operations(logs :: [String.t]) :: integer\n  def min_operations(logs) do\n    \n  end\nend"}}}