{"question_id": "1904", "problem_slug": "second-largest-digit-in-a-string", "problem_title": "Second Largest Digit in a String", "content": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.\n \nExample 1:\n\nInput: s = \"dfa12321afd\"\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n\nExample 2:\n\nInput: s = \"abc1111\"\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit. \n\n \nConstraints:\n\n1 <= s.length <= 500\ns consists of only lowercase English letters and digits.\n\n", "hints": ["First of all, get the distinct characters since we are only interested in those", "Let's note that there might not be any digits."], "exampleTestcases": "\"dfa12321afd\"\n\"abc1111\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int secondHighest(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int secondHighest(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def secondHighest(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def secondHighest(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int secondHighest(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SecondHighest(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar secondHighest = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function secondHighest(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function secondHighest($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func secondHighest(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun secondHighest(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int secondHighest(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func secondHighest(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef second_highest(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def secondHighest(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn second_highest(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (second-highest s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec second_highest(S :: unicode:unicode_binary()) -> integer().\nsecond_highest(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec second_highest(s :: String.t) :: integer\n  def second_highest(s) do\n    \n  end\nend"}}}