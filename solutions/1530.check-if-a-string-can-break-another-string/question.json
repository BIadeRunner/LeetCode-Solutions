{"question_id": "1530", "problem_slug": "check-if-a-string-can-break-another-string", "problem_title": "Check If a String Can Break Another String", "content": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.\nA string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.\n \nExample 1:\n\nInput: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".\n\nExample 2:\n\nInput: s1 = \"abe\", s2 = \"acd\"\nOutput: false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n\nExample 3:\n\nInput: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true\n\n \nConstraints:\n\ns1.length == n\ns2.length == n\n1 <= n <= 10^5\nAll strings consist of lowercase English letters.\n\n", "hints": ["Sort both strings and then check if one of them can break the other."], "exampleTestcases": "\"abc\"\n\"xya\"\n\"abe\"\n\"acd\"\n\"leetcodee\"\n\"interview\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkIfCanBreak(string s1, string s2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkIfCanBreak(String s1, String s2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkIfCanBreak(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkIfCanBreak(char* s1, char* s2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckIfCanBreak(string s1, string s2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkIfCanBreak = function(s1, s2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkIfCanBreak(s1: string, s2: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function checkIfCanBreak($s1, $s2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkIfCanBreak(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkIfCanBreak(s1: String, s2: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkIfCanBreak(String s1, String s2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkIfCanBreak(s1 string, s2 string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef check_if_can_break(s1, s2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkIfCanBreak(s1: String, s2: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_if_can_break(s1: String, s2: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-if-can-break s1 s2)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_if_can_break(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\ncheck_if_can_break(S1, S2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_if_can_break(s1 :: String.t, s2 :: String.t) :: boolean\n  def check_if_can_break(s1, s2) do\n    \n  end\nend"}}}