{"questionId": "1530", "acRate": 69.98521894438628, "difficulty": "Medium", "freqBar": 27.523036221123647, "frontendQuestionId": "1433", "paidOnly": false, "status": "ac", "title": "Check If a String Can Break Another String", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "check-if-a-string-can-break-another-string", "content": "<p>Given two strings: <code>s1</code> and <code>s2</code> with the same&nbsp;size, check if some&nbsp;permutation of string <code>s1</code> can break&nbsp;some&nbsp;permutation of string <code>s2</code> or vice-versa. In other words <code>s2</code> can break <code>s1</code>&nbsp;or vice-versa.</p>\n\n<p>A string <code>x</code>&nbsp;can break&nbsp;string <code>y</code>&nbsp;(both of size <code>n</code>) if <code>x[i] &gt;= y[i]</code>&nbsp;(in alphabetical order)&nbsp;for all <code>i</code>&nbsp;between <code>0</code> and <code>n-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abc&quot;, s2 = &quot;xya&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;ayx&quot; is a permutation of s2=&quot;xya&quot; which can break to string &quot;abc&quot; which is a permutation of s1=&quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abe&quot;, s2 = &quot;acd&quot;\n<strong>Output:</strong> false \n<strong>Explanation:</strong> All permutations for s1=&quot;abe&quot; are: &quot;abe&quot;, &quot;aeb&quot;, &quot;bae&quot;, &quot;bea&quot;, &quot;eab&quot; and &quot;eba&quot; and all permutation for s2=&quot;acd&quot; are: &quot;acd&quot;, &quot;adc&quot;, &quot;cad&quot;, &quot;cda&quot;, &quot;dac&quot; and &quot;dca&quot;. However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;leetcodee&quot;, s2 = &quot;interview&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == n</code></li>\n\t<li><code>s2.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\n\t<li>All strings consist of lowercase English letters.</li>\n</ul>\n", "hints": ["Sort both strings and then check if one of them can break the other."], "exampleTestcases": "\"abc\"\n\"xya\"\n\"abe\"\n\"acd\"\n\"leetcodee\"\n\"interview\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkIfCanBreak(string s1, string s2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkIfCanBreak(String s1, String s2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkIfCanBreak(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool checkIfCanBreak(char* s1, char* s2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckIfCanBreak(string s1, string s2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkIfCanBreak = function(s1, s2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkIfCanBreak(s1: string, s2: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function checkIfCanBreak($s1, $s2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkIfCanBreak(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkIfCanBreak(s1: String, s2: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool checkIfCanBreak(String s1, String s2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func checkIfCanBreak(s1 string, s2 string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef check_if_can_break(s1, s2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkIfCanBreak(s1: String, s2: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_if_can_break(s1: String, s2: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (check-if-can-break s1 s2)\n  (-> string? string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec check_if_can_break(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\ncheck_if_can_break(S1, S2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_if_can_break(s1 :: String.t, s2 :: String.t) :: boolean\n  def check_if_can_break(s1, s2) do\n    \n  end\nend"}], "similarQuestionList": []}