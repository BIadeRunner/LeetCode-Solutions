{"question_id": "2056", "problem_slug": "jump-game-viii", "problem_title": "Jump Game VIII", "content": "You are given a 0-indexed integer array nums of length n. You are initially standing at index 0. You can jump from index i to index j where i < j if:\n\nnums[i] <= nums[j] and nums[k] < nums[i] for all indexes k in the range i < k < j, or\nnums[i] > nums[j] and nums[k] >= nums[i] for all indexes k in the range i < k < j.\n\nYou are also given an integer array costs of length n where costs[i] denotes the cost of jumping to index i.\nReturn the minimum cost to jump to the index n - 1.\n \nExample 1:\n\nInput: nums = [3,2,4,4,1], costs = [3,7,6,4,2]\nOutput: 8\nExplanation: You start at index 0.\n- Jump to index 2 with a cost of costs[2] = 6.\n- Jump to index 4 with a cost of costs[4] = 2.\nThe total cost is 8. It can be proven that 8 is the minimum cost needed.\nTwo other possible paths are from index 0 -> 1 -> 4 and index 0 -> 2 -> 3 -> 4.\nThese have a total cost of 9 and 12, respectively.\n\nExample 2:\n\nInput: nums = [0,1,2], costs = [1,1,1]\nOutput: 2\nExplanation: Start at index 0.\n- Jump to index 1 with a cost of costs[1] = 1.\n- Jump to index 2 with a cost of costs[2] = 1.\nThe total cost is 2. Note that you cannot jump directly from index 0 to index 2 because nums[0] <= nums[1].\n\n \nConstraints:\n\nn == nums.length == costs.length\n1 <= n <= 105\n0 <= nums[i], costs[i] <= 105\n\n", "hints": ["For each index, find the indexes that you can jump to.", "We can do this by using a monotonic stack and iterating through the array backwards.", "Create another integer array of length n called dp where dp[i] is the minimum cost of getting to index i."], "exampleTestcases": "[3,2,4,4,1]\n[3,7,6,4,2]\n[0,1,2]\n[1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minCost(vector<int>& nums, vector<int>& costs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minCost(int[] nums, int[] costs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minCost(self, nums, costs):\n        \"\"\"\n        :type nums: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minCost(int* nums, int numsSize, int* costs, int costsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinCost(int[] nums, int[] costs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} costs\n * @return {number}\n */\nvar minCost = function(nums, costs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minCost(nums: number[], costs: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minCost($nums, $costs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minCost(_ nums: [Int], _ costs: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minCost(nums: IntArray, costs: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minCost(List<int> nums, List<int> costs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minCost(nums []int, costs []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} costs\n# @return {Integer}\ndef min_cost(nums, costs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minCost(nums: Array[Int], costs: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>, costs: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-cost nums costs)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_cost(Nums :: [integer()], Costs :: [integer()]) -> integer().\nmin_cost(Nums, Costs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost(nums :: [integer], costs :: [integer]) :: integer\n  def min_cost(nums, costs) do\n    \n  end\nend"}}}