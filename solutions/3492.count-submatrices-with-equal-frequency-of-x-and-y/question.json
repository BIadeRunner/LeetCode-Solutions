{"question_id": "3492", "problem_slug": "count-submatrices-with-equal-frequency-of-x-and-y", "problem_title": "Count Submatrices With Equal Frequency of X and Y", "content": "Given a 2D character matrix grid, where grid[i][j] is either 'X', 'Y', or '.', return the number of submatrices that contain:\n\ngrid[0][0]\nan equal frequency of 'X' and 'Y'.\nat least one 'X'.\n\n \nExample 1:\n\nInput: grid = [[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]\nOutput: 3\nExplanation:\n\n\nExample 2:\n\nInput: grid = [[\"X\",\"X\"],[\"X\",\"Y\"]]\nOutput: 0\nExplanation:\nNo submatrix has an equal frequency of 'X' and 'Y'.\n\nExample 3:\n\nInput: grid = [[\".\",\".\"],[\".\",\".\"]]\nOutput: 0\nExplanation:\nNo submatrix has at least one 'X'.\n\n \nConstraints:\n\n1 <= grid.length, grid[i].length <= 1000\ngrid[i][j] is either 'X', 'Y', or '.'.\n\n", "hints": ["Replace <code>’X’</code> with 1, <code>’Y’</code> with -1 and <code>’.’</code> with 0.", "You need to find how many submatrices <code>grid[0..x][0..y]</code> have a sum of 0 and at least one <code>’X’</code>.", "Use prefix sum to calculate submatrices sum."], "exampleTestcases": "[[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]]\n[[\"X\",\"X\"],[\"X\",\"Y\"]]\n[[\".\",\".\"],[\".\",\".\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfSubmatrices(vector<vector<char>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfSubmatrices(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfSubmatrices(self, grid: List[List[str]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfSubmatrices(char** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfSubmatrices(char[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numberOfSubmatrices = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfSubmatrices(grid: string[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numberOfSubmatrices($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfSubmatrices(_ grid: [[Character]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfSubmatrices(grid: Array<CharArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfSubmatrices(List<List<String>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfSubmatrices(grid [][]byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef number_of_submatrices(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfSubmatrices(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_submatrices(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-submatrices grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_submatrices(Grid :: [[char()]]) -> integer().\nnumber_of_submatrices(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_submatrices(grid :: [[char]]) :: integer\n  def number_of_submatrices(grid) do\n    \n  end\nend"}}}