{"questionId": "3330", "acRate": 68.8298522833328, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "3033", "paidOnly": false, "status": "ac", "title": "Modify the Matrix", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "modify-the-matrix", "content": "<p>Given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>matrix</code>, create a new <strong>0-indexed</strong> matrix called <code>answer</code>. Make <code>answer</code> equal to <code>matrix</code>, then replace each element with the value <code>-1</code> with the <strong>maximum</strong> element in its respective column.</p>\n\n<p>Return <em>the matrix</em> <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix1.png\" style=\"width: 491px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,-1],[4,-1,6],[7,8,9]]\n<strong>Output:</strong> [[1,2,9],[4,8,6],[7,8,9]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix2.png\" style=\"width: 411px; height: 111px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,-1],[5,2]]\n<strong>Output:</strong> [[3,2],[5,2]]\n<strong>Explanation:</strong> The diagram above shows the elements that are changed (in blue).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>-1 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li>The input is generated such that each column contains at least one non-negative integer.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[[1,2,-1],[4,-1,6],[7,8,9]]\n[[3,-1],[5,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix = function(matrix) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun modifiedMatrix(matrix: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> modifiedMatrix(List<List<int>> matrix) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func modifiedMatrix(matrix [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn modified_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (modified-matrix matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec modified_matrix(Matrix :: [[integer()]]) -> [[integer()]].\nmodified_matrix(Matrix) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend"}], "similarQuestionList": []}