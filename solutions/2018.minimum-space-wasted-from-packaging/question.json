{"questionId": "2018", "acRate": 32.00550428242663, "difficulty": "Hard", "freqBar": 35.08750492706422, "frontendQuestionId": "1889", "paidOnly": false, "status": "ac", "title": "Minimum Space Wasted From Packaging", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "minimum-space-wasted-from-packaging", "content": "<p>You have <code>n</code> packages that you are trying to place in boxes, <strong>one package in each box</strong>. There are <code>m</code> suppliers that each produce boxes of <strong>different sizes</strong> (with infinite supply). A package can be placed in a box if the size of the package is <strong>less than or equal to</strong> the size of the box.</p>\n\n<p>The package sizes are given as an integer array <code>packages</code>, where <code>packages[i]</code> is the <strong>size</strong> of the <code>i<sup>th</sup></code> package. The suppliers are given as a 2D integer array <code>boxes</code>, where <code>boxes[j]</code> is an array of <strong>box sizes</strong> that the <code>j<sup>th</sup></code> supplier produces.</p>\n\n<p>You want to choose a <strong>single supplier</strong> and use boxes from them such that the <strong>total wasted space </strong>is <strong>minimized</strong>. For each package in a box, we define the space <strong>wasted</strong> to be <code>size of the box - size of the package</code>. The <strong>total wasted space</strong> is the sum of the space wasted in <strong>all</strong> the boxes.</p>\n\n<ul>\n\t<li>For example, if you have to fit packages with sizes <code>[2,3,5]</code> and the supplier offers boxes of sizes <code>[4,8]</code>, you can fit the packages of size-<code>2</code> and size-<code>3</code> into two boxes of size-<code>4</code> and the package with size-<code>5</code> into a box of size-<code>8</code>. This would result in a waste of <code>(4-2) + (4-3) + (8-5) = 6</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum total wasted space</strong> by choosing the box supplier <strong>optimally</strong>, or </em><code>-1</code> <i>if it is <strong>impossible</strong> to fit all the packages inside boxes. </i>Since the answer may be <strong>large</strong>, return it <strong>modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [2,3,5], boxes = [[4,8],[2,8]]\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no box that the package of size 5 can fit in.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == packages.length</code></li>\n\t<li><code>m == boxes.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= packages[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[j].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[j][k] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>sum(boxes[j].length) &lt;= 10<sup>5</sup></code></li>\n\t<li>The elements in <code>boxes[j]</code> are <strong>distinct</strong>.</li>\n</ul>\n", "hints": ["Given a fixed size box, is there a way to quickly query which packages (i.e., count and sizes) should end up in that box size?", "Do we have to order the boxes a certain way to allow us to answer the query quickly?"], "exampleTestcases": "[2,3,5]\n[[4,8],[2,8]]\n[2,3,5]\n[[1,4],[2,3],[3,4]]\n[3,5,8,10,11,12]\n[[12],[11,9],[10,5,14]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minWastedSpace(vector<int>& packages, vector<vector<int>>& boxes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minWastedSpace(int[] packages, int[][] boxes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minWastedSpace(self, packages, boxes):\n        \"\"\"\n        :type packages: List[int]\n        :type boxes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minWastedSpace(int* packages, int packagesSize, int** boxes, int boxesSize, int* boxesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinWastedSpace(int[] packages, int[][] boxes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} packages\n * @param {number[][]} boxes\n * @return {number}\n */\nvar minWastedSpace = function(packages, boxes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minWastedSpace(packages: number[], boxes: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $packages\n     * @param Integer[][] $boxes\n     * @return Integer\n     */\n    function minWastedSpace($packages, $boxes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minWastedSpace(_ packages: [Int], _ boxes: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minWastedSpace(packages: IntArray, boxes: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minWastedSpace(List<int> packages, List<List<int>> boxes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minWastedSpace(packages []int, boxes [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} packages\n# @param {Integer[][]} boxes\n# @return {Integer}\ndef min_wasted_space(packages, boxes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minWastedSpace(packages: Array[Int], boxes: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_wasted_space(packages: Vec<i32>, boxes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-wasted-space packages boxes)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_wasted_space(Packages :: [integer()], Boxes :: [[integer()]]) -> integer().\nmin_wasted_space(Packages, Boxes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_wasted_space(packages :: [integer], boxes :: [[integer]]) :: integer\n  def min_wasted_space(packages, boxes) do\n    \n  end\nend"}], "similarQuestionList": []}