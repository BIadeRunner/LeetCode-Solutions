{"question_id": "3433", "problem_slug": "maximum-number-that-makes-result-of-bitwise-and-zero", "problem_title": "Maximum Number That Makes Result of Bitwise AND Zero", "content": "Given an integer n, return the maximum integer x such that x <= n, and the bitwise AND of all the numbers in the range [x, n] is 0.\n \nExample 1:\n\nInput: n = 7\nOutput: 3\nExplanation:\nThe bitwise AND of [6, 7] is 6.\nThe bitwise AND of [5, 6, 7] is 4.\nThe bitwise AND of [4, 5, 6, 7] is 4.\nThe bitwise AND of [3, 4, 5, 6, 7] is 0.\n\nExample 2:\n\nInput: n = 9\nOutput: 7\nExplanation:\nThe bitwise AND of [7, 8, 9] is 0.\n\nExample 3:\n\nInput: n = 17\nOutput: 15\nExplanation:\nThe bitwise AND of [15, 16, 17] is 0.\n\n \nConstraints:\n\n1 <= n <= 1015\n\n", "hints": ["Examine the set bits of <code>n</code>.", "When performing bitwise AND operations sequentially down from <code>n</code>, the last set bit to turn to 0 identifies the highest set bit.", "If the index of the highest set bit is <code>x</code>, the answer is <code>2<sup>x</sup> - 1</code>."], "exampleTestcases": "7\n9\n17", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxNumber(long long n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxNumber(long n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxNumber(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxNumber(long long n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxNumber(long n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar maxNumber = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxNumber(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function maxNumber($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxNumber(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxNumber(n: Long): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxNumber(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxNumber(n int64) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef max_number(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxNumber(n: Long): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_number(n: i64) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-number n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_number(N :: integer()) -> integer().\nmax_number(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_number(n :: integer) :: integer\n  def max_number(n) do\n    \n  end\nend"}}}