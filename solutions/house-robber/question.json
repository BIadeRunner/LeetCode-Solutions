{"questionId": "198", "acRate": 51.59068751867386, "difficulty": "Medium", "freqBar": 80.24810888973202, "frontendQuestionId": "198", "paidOnly": false, "status": "ac", "title": "House Robber", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "house-robber", "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9,3,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 400</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,2,3,1]\n[2,7,9,3,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int rob(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Rob(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rob(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function rob($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rob(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int rob(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func rob(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef rob(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rob(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (rob nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec rob(Nums :: [integer()]) -> integer().\nrob(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec rob(nums :: [integer]) :: integer\n  def rob(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-product-subarray", "title": "Maximum Product Subarray", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "house-robber-ii", "title": "House Robber II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "paint-house", "title": "Paint House", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "paint-fence", "title": "Paint Fence", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "house-robber-iii", "title": "House Robber III", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "coin-path", "title": "Coin Path", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "delete-and-earn", "title": "Delete and Earn", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "solving-questions-with-brainpower", "title": "Solving Questions With Brainpower", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-number-of-ways-to-place-houses", "title": "Count Number of Ways to Place Houses", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "house-robber-iv", "title": "House Robber IV", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "mice-and-cheese", "title": "Mice and Cheese", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "largest-element-in-an-array-after-merge-operations", "title": "Largest Element in an Array after Merge Operations", "isPaidOnly": false}]}