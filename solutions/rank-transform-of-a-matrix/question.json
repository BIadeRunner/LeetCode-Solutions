{"questionId": "1257", "acRate": 41.050272174191484, "difficulty": "Hard", "freqBar": 47.99348960401396, "frontendQuestionId": "1632", "paidOnly": false, "status": "ac", "title": "Rank Transform of a Matrix", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "rank-transform-of-a-matrix", "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>a new matrix </em><code>answer</code><em> where </em><code>answer[row][col]</code><em> is the </em><em><strong>rank</strong> of </em><code>matrix[row][col]</code>.</p>\n\n<p>The <strong>rank</strong> is an <strong>integer</strong> that represents how large an element is compared to other elements. It is calculated using the following rules:</p>\n\n<ul>\n\t<li>The rank is an integer starting from <code>1</code>.</li>\n\t<li>If two elements <code>p</code> and <code>q</code> are in the <strong>same row or column</strong>, then:\n\t<ul>\n\t\t<li>If <code>p &lt; q</code> then <code>rank(p) &lt; rank(q)</code></li>\n\t\t<li>If <code>p == q</code> then <code>rank(p) == rank(q)</code></li>\n\t\t<li>If <code>p &gt; q</code> then <code>rank(p) &gt; rank(q)</code></li>\n\t</ul>\n\t</li>\n\t<li>The <strong>rank</strong> should be as <strong>small</strong> as possible.</li>\n</ul>\n\n<p>The test cases are generated so that <code>answer</code> is unique under the given rules.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank1.jpg\" style=\"width: 442px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[3,4]]\n<strong>Output:</strong> [[1,2],[2,3]]\n<strong>Explanation:</strong>\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] &gt; matrix[0][1], matrix[1][1] &gt; matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank2.jpg\" style=\"width: 442px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[7,7],[7,7]]\n<strong>Output:</strong> [[1,1],[1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank3.jpg\" style=\"width: 601px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\n<strong>Output:</strong> [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[row][col] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Sort the cells by value and process them in increasing order.", "The rank of a cell is the maximum rank in its row and column plus one.", "Handle the equal cells by treating them as components using a union-find data structure."], "exampleTestcases": "[[1,2],[3,4]]\n[[7,7],[7,7]]\n[[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] matrixRankTransform(int[][] matrix) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def matrixRankTransform(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** matrixRankTransform(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] MatrixRankTransform(int[][] matrix) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar matrixRankTransform = function(matrix) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function matrixRankTransform(matrix: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function matrixRankTransform($matrix) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func matrixRankTransform(_ matrix: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun matrixRankTransform(matrix: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> matrixRankTransform(List<List<int>> matrix) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func matrixRankTransform(matrix [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef matrix_rank_transform(matrix)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def matrixRankTransform(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn matrix_rank_transform(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (matrix-rank-transform matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec matrix_rank_transform(Matrix :: [[integer()]]) -> [[integer()]].\nmatrix_rank_transform(Matrix) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec matrix_rank_transform(matrix :: [[integer]]) :: [[integer]]\n  def matrix_rank_transform(matrix) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "rank-transform-of-an-array", "title": "Rank Transform of an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "gcd-sort-of-an-array", "title": "GCD Sort of an Array", "isPaidOnly": false}]}