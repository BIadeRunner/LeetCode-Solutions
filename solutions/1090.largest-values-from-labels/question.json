{"questionId": "1169", "acRate": 62.572115016756705, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1090", "paidOnly": false, "status": "ac", "title": "Largest Values From Labels", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "largest-values-from-labels", "content": "<p>You are given <code>n</code> item&#39;s value and label as two integer arrays <code>values</code> and <code>labels</code>. You are also given two integers <code>numWanted</code> and <code>useLimit</code>.</p>\n\n<p>Your task is to find a subset of items with the <strong>maximum sum</strong> of their values such that:</p>\n\n<ul>\n\t<li>The number of items is <strong>at most</strong> <code>numWanted</code>.</li>\n\t<li>The number of items with the same label is <strong>at most</strong> <code>useLimit</code>.</li>\n</ul>\n\n<p>Return the maximum sum.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">16</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subset chosen is the first and fourth items with the sum of values 9 + 7.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == values.length == labels.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= values[i], labels[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= numWanted, useLimit &lt;= n</code></li>\n</ul>\n", "hints": ["Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table."], "exampleTestcases": "[5,4,3,2,1]\n[1,1,2,2,3]\n3\n1\n[5,4,3,2,1]\n[1,3,3,3,2]\n3\n2\n[9,8,8,7,6]\n[0,0,0,1,1]\n3\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestValsFromLabels(vector<int>& values, vector<int>& labels, int numWanted, int useLimit) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestValsFromLabels(self, values, labels, numWanted, useLimit):\n        \"\"\"\n        :type values: List[int]\n        :type labels: List[int]\n        :type numWanted: int\n        :type useLimit: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestValsFromLabels(self, values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int largestValsFromLabels(int* values, int valuesSize, int* labels, int labelsSize, int numWanted, int useLimit) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} values\n * @param {number[]} labels\n * @param {number} numWanted\n * @param {number} useLimit\n * @return {number}\n */\nvar largestValsFromLabels = function(values, labels, numWanted, useLimit) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestValsFromLabels(values: number[], labels: number[], numWanted: number, useLimit: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $values\n     * @param Integer[] $labels\n     * @param Integer $numWanted\n     * @param Integer $useLimit\n     * @return Integer\n     */\n    function largestValsFromLabels($values, $labels, $numWanted, $useLimit) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestValsFromLabels(_ values: [Int], _ labels: [Int], _ numWanted: Int, _ useLimit: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestValsFromLabels(values: IntArray, labels: IntArray, numWanted: Int, useLimit: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int largestValsFromLabels(List<int> values, List<int> labels, int numWanted, int useLimit) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func largestValsFromLabels(values []int, labels []int, numWanted int, useLimit int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} values\n# @param {Integer[]} labels\n# @param {Integer} num_wanted\n# @param {Integer} use_limit\n# @return {Integer}\ndef largest_vals_from_labels(values, labels, num_wanted, use_limit)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestValsFromLabels(values: Array[Int], labels: Array[Int], numWanted: Int, useLimit: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_vals_from_labels(values: Vec<i32>, labels: Vec<i32>, num_wanted: i32, use_limit: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (largest-vals-from-labels values labels numWanted useLimit)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec largest_vals_from_labels(Values :: [integer()], Labels :: [integer()], NumWanted :: integer(), UseLimit :: integer()) -> integer().\nlargest_vals_from_labels(Values, Labels, NumWanted, UseLimit) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_vals_from_labels(values :: [integer], labels :: [integer], num_wanted :: integer, use_limit :: integer) :: integer\n  def largest_vals_from_labels(values, labels, num_wanted, use_limit) do\n    \n  end\nend"}], "similarQuestionList": []}