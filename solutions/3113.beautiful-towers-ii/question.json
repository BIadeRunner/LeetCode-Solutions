{"question_id": "3113", "problem_slug": "beautiful-towers-ii", "problem_title": "Beautiful Towers II", "content": "You are given a 0-indexed array maxHeights of n integers.\nYou are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i].\nA configuration of towers is beautiful if the following conditions hold:\n\n1 <= heights[i] <= maxHeights[i]\nheights is a mountain array.\n\nArray heights is a mountain if there exists an index i such that:\n\nFor all 0 < j <= i, heights[j - 1] <= heights[j]\nFor all i <= k < n - 1, heights[k + 1] <= heights[k]\n\nReturn the maximum possible sum of heights of a beautiful configuration of towers.\n \nExample 1:\n\nInput: maxHeights = [5,3,4,1,1]\nOutput: 13\nExplanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\nExample 2:\n\nInput: maxHeights = [6,5,3,9,2,7]\nOutput: 22\nExplanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\nExample 3:\n\nInput: maxHeights = [3,2,5,5,2,3]\nOutput: 18\nExplanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n\n \nConstraints:\n\n1 <= n == maxHeights.length <= 105\n1 <= maxHeights[i] <= 109\n\n", "hints": ["Try all the possible indices <code>i</code> as the peak.", "Let <code>left[i]</code> be the maximum sum of heights for the prefix <code>0, …, i</code> when index <code>i</code> is the peak.", "Let <code>right[i]</code> be the maximum sum of heights for suffix <code>i, …, (n - 1)</code> when <code>i</code> is the peak", "Compute values of <code>left[i]</code> from left to right using DP.\r\nFor each <code>i</code> from <code>0</code> to <code>n - 1</code>, <code>left[i] = maxHeights * (i - j) + answer[j]</code>, where <code>j</code> is the rightmost index to the left of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>.", "For each <code>i</code> from <code>n - 1</code> to <code>0</code>, <code>right[i] = maxHeights * (j - i) + answer[j]</code>, where <code>j</code> is the leftmost index to the right of <code>i</code> such that <code>maxHeights[j] < maxHeights[i] </code>."], "exampleTestcases": "[5,3,4,1,1]\n[6,5,3,9,2,7]\n[3,2,5,5,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumSumOfHeights(int* maxHeights, int maxHeightsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumSumOfHeights(IList<int> maxHeights) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumSumOfHeights(maxHeights: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumSumOfHeights(maxHeights: List<Int>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumSumOfHeights(List<int> maxHeights) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumSumOfHeights(maxHeights []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-sum-of-heights maxHeights)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n    \n  end\nend"}}}