{"question_id": "443", "problem_slug": "string-compression", "problem_title": "String Compression", "content": "Given an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\n\nIf the group's length is 1, append the character to s.\nOtherwise, append the character followed by the group's length.\n\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nYou must write an algorithm that uses only constant extra space.\n \nExample 1:\n\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n\nExample 2:\n\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n\nExample 3:\n\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n \nConstraints:\n\n1 <= chars.length <= 2000\nchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.\n\n", "hints": ["How do you know if you are at the end of a consecutive group of characters?"], "exampleTestcases": "[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n[\"a\"]\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int compress(vector<char>& chars) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int compress(char[] chars) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int compress(char* chars, int charsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int Compress(char[] chars) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function compress(chars: string[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(&$chars) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func compress(_ chars: inout [Character]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun compress(chars: CharArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int compress(List<String> chars) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func compress(chars []byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def compress(chars: Array[Char]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n        \n    }\n}"}}}