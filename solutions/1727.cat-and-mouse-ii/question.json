{"questionId": "1727", "acRate": 39.85037669248195, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1728", "paidOnly": false, "status": "ac", "title": "Cat and Mouse II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Game Theory", "id": "VG9waWNUYWdOb2RlOjYxMDcz", "slug": "game-theory"}], "titleSlug": "cat-and-mouse-ii", "content": "<p>A game is played by a cat and a mouse named Cat and Mouse.</p>\n\n<p>The environment is represented by a <code>grid</code> of size <code>rows x cols</code>, where each element is a wall, floor, player (Cat, Mouse), or food.</p>\n\n<ul>\n\t<li>Players are represented by the characters <code>&#39;C&#39;</code>(Cat)<code>,&#39;M&#39;</code>(Mouse).</li>\n\t<li>Floors are represented by the character <code>&#39;.&#39;</code> and can be walked on.</li>\n\t<li>Walls are represented by the character <code>&#39;#&#39;</code> and cannot be walked on.</li>\n\t<li>Food is represented by the character <code>&#39;F&#39;</code> and can be walked on.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n</ul>\n\n<p>Mouse and Cat play according to the following rules:</p>\n\n<ul>\n\t<li>Mouse <strong>moves first</strong>, then they take turns to move.</li>\n\t<li>During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the <code>grid</code>.</li>\n\t<li><code>catJump, mouseJump</code> are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.</li>\n\t<li>Staying in the same position is allowed.</li>\n\t<li>Mouse can jump over Cat.</li>\n</ul>\n\n<p>The game can end in 4 ways:</p>\n\n<ul>\n\t<li>If Cat occupies the same position as Mouse, Cat wins.</li>\n\t<li>If Cat reaches the food first, Cat wins.</li>\n\t<li>If Mouse reaches the food first, Mouse wins.</li>\n\t<li>If Mouse cannot get to the food within 1000 turns, Cat wins.</li>\n</ul>\n\n<p>Given a <code>rows x cols</code> matrix <code>grid</code> and two integers <code>catJump</code> and <code>mouseJump</code>, return <code>true</code><em> if Mouse can win the game if both Cat and Mouse play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png\" style=\"width: 580px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;####F&quot;,&quot;#C...&quot;,&quot;M....&quot;], catJump = 1, mouseJump = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png\" style=\"width: 580px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == grid.length</code></li>\n\t<li><code>cols = grid[i].length</code></li>\n\t<li><code>1 &lt;= rows, cols &lt;= 8</code></li>\n\t<li><code>grid[i][j]</code> consist only of characters <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, <code>&#39;F&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39;#&#39;</code>.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n\t<li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li>\n</ul>\n", "hints": ["Try working backward: consider all trivial states you know to be winning or losing, and work backward to determine which other states can be labeled as winning or losing."], "exampleTestcases": "[\"####F\",\"#C...\",\"M....\"]\n1\n2\n[\"M.C...F\"]\n1\n4\n[\"M.C...F\"]\n1\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canMouseWin(String[] grid, int catJump, int mouseJump) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canMouseWin(self, grid, catJump, mouseJump):\n        \"\"\"\n        :type grid: List[str]\n        :type catJump: int\n        :type mouseJump: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canMouseWin(char** grid, int gridSize, int catJump, int mouseJump) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanMouseWin(string[] grid, int catJump, int mouseJump) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} grid\n * @param {number} catJump\n * @param {number} mouseJump\n * @return {boolean}\n */\nvar canMouseWin = function(grid, catJump, mouseJump) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canMouseWin(grid: string[], catJump: number, mouseJump: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $grid\n     * @param Integer $catJump\n     * @param Integer $mouseJump\n     * @return Boolean\n     */\n    function canMouseWin($grid, $catJump, $mouseJump) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canMouseWin(_ grid: [String], _ catJump: Int, _ mouseJump: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canMouseWin(grid: Array<String>, catJump: Int, mouseJump: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canMouseWin(List<String> grid, int catJump, int mouseJump) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canMouseWin(grid []string, catJump int, mouseJump int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} grid\n# @param {Integer} cat_jump\n# @param {Integer} mouse_jump\n# @return {Boolean}\ndef can_mouse_win(grid, cat_jump, mouse_jump)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canMouseWin(grid: Array[String], catJump: Int, mouseJump: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_mouse_win(grid: Vec<String>, cat_jump: i32, mouse_jump: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-mouse-win grid catJump mouseJump)\n  (-> (listof string?) exact-integer? exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_mouse_win(Grid :: [unicode:unicode_binary()], CatJump :: integer(), MouseJump :: integer()) -> boolean().\ncan_mouse_win(Grid, CatJump, MouseJump) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_mouse_win(grid :: [String.t], cat_jump :: integer, mouse_jump :: integer) :: boolean\n  def can_mouse_win(grid, cat_jump, mouse_jump) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "escape-the-ghosts", "title": "Escape The Ghosts", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "cat-and-mouse", "title": "Cat and Mouse", "isPaidOnly": false}]}