{"question_id": "1384", "problem_slug": "maximum-font-to-fit-a-sentence-in-a-screen", "problem_title": "Maximum Font to Fit a Sentence in a Screen", "content": "You are given a string text. We want to display text on a screen of width w and height h. You can choose any font size from array fonts, which contains the available font sizes in ascending order.\nYou can use the FontInfo interface to get the width and height of any character at any available font size.\nThe FontInfo interface is defined as such:\n\r\ninterface FontInfo {\r\n  // Returns the width of character ch on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getWidth(int fontSize, char ch);\r\n\r\n  // Returns the height of any character on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getHeight(int fontSize);\r\n}\nThe calculated width of text for some fontSize is the sum of every getWidth(fontSize, text[i]) call for each 0 <= i < text.length (0-indexed). The calculated height of text for some fontSize is getHeight(fontSize). Note that text is displayed on a single line.\nIt is guaranteed that FontInfo will return the same value if you call getHeight or getWidth with the same parameters.\nIt is also guaranteed that for any font size fontSize and any character ch:\n\ngetHeight(fontSize) <= getHeight(fontSize+1)\ngetWidth(fontSize, ch) <= getWidth(fontSize+1, ch)\n\nReturn the maximum font size you can use to display text on the screen. If text cannot fit on the display with any font size, return -1.\n \nExample 1:\n\r\nInput: text = \"helloworld\", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]\r\nOutput: 6\r\n\nExample 2:\n\r\nInput: text = \"leetcode\", w = 1000, h = 50, fonts = [1,2,4]\r\nOutput: 4\r\n\nExample 3:\n\r\nInput: text = \"easyquestion\", w = 100, h = 100, fonts = [10,15,20,25]\r\nOutput: -1\r\n\n \nConstraints:\n\n1 <= text.length <= 50000\ntext contains only lowercase English letters.\n1 <= w <= 107\n1 <= h <= 104\n1 <= fonts.length <= 105\n1 <= fonts[i] <= 105\nfonts is sorted in ascending order and does not contain duplicates.\n", "hints": ["Use <i>binary search</i>  to find the last valid font."], "exampleTestcases": "\"helloworld\"\n80\n20\n[6,8,10,12,14,16,18,24,36]\n\"leetcode\"\n1000\n50\n[1,2,4]\n\"easyquestion\"\n100\n100\n[10,15,20,25]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * class FontInfo {\n *   public:\n *     // Return the width of char ch when fontSize is used.\n *     int getWidth(int fontSize, char ch);\n *     \n *     // Return Height of any char when fontSize is used.\n *     int getHeight(int fontSize)\n * };\n */\nclass Solution {\npublic:\n    int maxFont(string text, int w, int h, vector<int>& fonts, FontInfo fontInfo) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface FontInfo {\n *     // Return the width of char ch when fontSize is used.\n *     public int getWidth(int fontSize, char ch) {}\n *     // Return Height of any char when fontSize is used.\n *     public int getHeight(int fontSize)\n * }\n */\nclass Solution {\n    public int maxFont(String text, int w, int h, int[] fonts, FontInfo fontInfo) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# \"\"\"\n# This is FontInfo's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class FontInfo(object):\n#    Return the width of char ch when fontSize is used.\n#    def getWidth(self, fontSize, ch):\n#        \"\"\"\n#        :type fontSize: int\n#        :type ch: char\n#        :rtype int\n#        \"\"\"\n# \n#    def getHeight(self, fontSize):\n#        \"\"\"\n#        :type fontSize: int\n#        :rtype int\n#        \"\"\"\nclass Solution(object):\n    def maxFont(self, text, w, h, fonts, fontInfo):\n        \"\"\"\n        :type text: str\n        :type w: int\n        :type h: int\n        :type fonts: List[int]\n        :type fontInfo: FontInfo\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is FontInfo's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class FontInfo(object):\n#    Return the width of char ch when fontSize is used.\n#    def getWidth(self, fontSize, ch):\n#        \"\"\"\n#        :type fontSize: int\n#        :type ch: char\n#        :rtype int\n#        \"\"\"\n# \n#    def getHeight(self, fontSize):\n#        \"\"\"\n#        :type fontSize: int\n#        :rtype int\n#        \"\"\"\nclass Solution:\n    def maxFont(self, text: str, w: int, h: int, fonts: List[int], fontInfo : 'FontInfo') -> int:\n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface FontInfo {\n *     // Return the width of char ch when fontSize is used.\n *     public int GetWidth(int fontSize, char ch) {}\n *     // Return Height of any char when fontSize is used.\n *     public int GetHeight(int fontSize)\n * }\n */\npublic class Solution {\n    public int MaxFont(string text, int w, int h, int[] fonts, FontInfo fontInfo) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * function FontInfo() {\n *\n *\t\t@param {number} fontSize\n *\t\t@param {char} ch\n *     \t@return {number}\n *     \tthis.getWidth = function(fontSize, ch) {\n *      \t...\n *     \t};\n *\n *\t\t@param {number} fontSize\n *     \t@return {number}\n *     \tthis.getHeight = function(fontSize) {\n *      \t...\n *     \t};\n * };\n */\n/**\n * @param {string} text\n * @param {number} w\n * @param {number} h\n * @param {number[]} fonts\n * @param {FontInfo} fontInfo\n * @return {number}\n */\nvar maxFont = function(text, w, h, fonts, fontInfo) {\n    \n};"}}}