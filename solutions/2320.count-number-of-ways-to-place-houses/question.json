{"questionId": "2397", "acRate": 42.2211142232846, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2320", "paidOnly": false, "status": "ac", "title": "Count Number of Ways to Place Houses", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "count-number-of-ways-to-place-houses", "content": "<p>There is a street with <code>n * 2</code> <strong>plots</strong>, where there are <code>n</code> plots on each side of the street. The plots on each side are numbered from <code>1</code> to <code>n</code>. On each plot, a house can be placed.</p>\n\n<p>Return <em>the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Note that if a house is placed on the <code>i<sup>th</sup></code> plot on one side of the street, a house can also be placed on the <code>i<sup>th</sup></code> plot on the other side of the street.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nPossible arrangements:\n1. All plots are empty.\n2. A house is placed on one side of the street.\n3. A house is placed on the other side of the street.\n4. Two houses are placed, one on each side of the street.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/12/arrangements.png\" style=\"width: 500px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The 9 possible arrangements are shown in the diagram above.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Try coming up with a DP solution for one side of the street.", "The DP for one side of the street will bear resemblance to the Fibonacci sequence.", "The number of different arrangements on both side of the street is the same."], "exampleTestcases": "1\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countHousePlacements(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countHousePlacements(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countHousePlacements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countHousePlacements(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countHousePlacements(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountHousePlacements(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countHousePlacements = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countHousePlacements(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countHousePlacements($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countHousePlacements(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countHousePlacements(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countHousePlacements(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countHousePlacements(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_house_placements(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countHousePlacements(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_house_placements(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-house-placements n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_house_placements(N :: integer()) -> integer().\ncount_house_placements(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_house_placements(n :: integer) :: integer\n  def count_house_placements(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "climbing-stairs", "title": "Climbing Stairs", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "house-robber", "title": "House Robber", "isPaidOnly": false}]}