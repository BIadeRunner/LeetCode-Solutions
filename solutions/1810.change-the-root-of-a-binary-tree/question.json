{"question_id": "1810", "problem_slug": "change-the-root-of-a-binary-tree", "problem_title": "Change the Root of a Binary Tree", "content": "Given the root of a binary tree and a leaf node, reroot the tree so that the leaf is the new root.\nYou can reroot the tree with the following steps for each node cur on the path starting from the leaf up to the root​​​ excluding the root:\n\nIf cur has a left child, then that child becomes cur's right child.\ncur's original parent becomes cur's left child. Note that in this process the original parent's pointer to cur becomes null, making it have at most one child.\n\nReturn the new root of the rerooted tree.\nNote: Ensure that your solution sets the Node.parent pointers correctly after rerooting or you will receive \"Wrong Answer\".\n \nExample 1:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7\nOutput: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]\n\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0\nOutput: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 100].\n-109 <= Node.val <= 109\nAll Node.val are unique.\nleaf exist in the tree.\n\n", "hints": ["Start traversing from the leaf. Always go up till you reach the root.", "Change pointers as asked, make the current node's parent its left child, and make the left child the right one if needed."], "exampleTestcases": "[3,5,1,6,2,0,8,null,null,7,4]\n7\n[3,5,1,6,2,0,8,null,null,7,4]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* parent;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flipBinaryTree(Node* root, Node * leaf) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n};\n*/\n\nclass Solution {\n    public Node flipBinaryTree(Node root, Node leaf) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution(object):\n    def flipBinaryTree(self, root, leaf):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution:\n    def flipBinaryTree(self, root: 'Node', leaf: 'Node') -> 'Node':\n        "}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n*/\n\npublic class Solution {\n    public Node FlipBinaryTree(Node root, Node leaf) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val) {\n *    this.val = val;\n *    this.left = null;\n *    this.right = null;\n *    this.parent = null;\n * };\n */\n\n/**\n * @param {Node} node\n * @return {Node}\n */\nvar flipBinaryTree = function(root, leaf) {\n    \n};"}}}