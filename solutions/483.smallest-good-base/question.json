{"question_id": "483", "problem_slug": "smallest-good-base", "problem_title": "Smallest Good Base", "content": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.\n \nExample 1:\n\nInput: n = \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.\n\nExample 2:\n\nInput: n = \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.\n\nExample 3:\n\nInput: n = \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\n\n \nConstraints:\n\nn is an integer in the range [3, 1018].\nn does not contain any leading zeros.\n\n", "hints": [], "exampleTestcases": "\"13\"\n\"4681\"\n\"1000000000000000000\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestGoodBase(string n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String smallestGoodBase(String n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestGoodBase(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* smallestGoodBase(char* n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SmallestGoodBase(string n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} n\n * @return {string}\n */\nvar smallestGoodBase = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestGoodBase(n: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $n\n     * @return String\n     */\n    function smallestGoodBase($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestGoodBase(_ n: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestGoodBase(n: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String smallestGoodBase(String n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestGoodBase(n string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} n\n# @return {String}\ndef smallest_good_base(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestGoodBase(n: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_good_base(n: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-good-base n)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_good_base(N :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_good_base(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_good_base(n :: String.t) :: String.t\n  def smallest_good_base(n) do\n    \n  end\nend"}}}