{"question_id": "1047", "problem_slug": "maximize-sum-of-array-after-k-negations", "problem_title": "Maximize Sum Of Array After K Negations", "content": "Given an integer array nums and an integer k, modify the array in the following way:\n\nchoose an index i and replace nums[i] with -nums[i].\n\nYou should apply this process exactly k times. You may choose the same index i multiple times.\nReturn the largest possible sum of the array after modifying it in this way.\n \nExample 1:\n\nInput: nums = [4,2,3], k = 1\nOutput: 5\nExplanation: Choose index 1 and nums becomes [4,-2,3].\n\nExample 2:\n\nInput: nums = [3,-1,0,2], k = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n\nExample 3:\n\nInput: nums = [2,-3,-1,5,-4], k = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-100 <= nums[i] <= 100\n1 <= k <= 104\n\n", "hints": [], "exampleTestcases": "[4,2,3]\n1\n[3,-1,0,2]\n3\n[2,-3,-1,5,-4]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestSumAfterKNegations(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int largestSumAfterKNegations(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestSumAfterKNegations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int largestSumAfterKNegations(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestSumAfterKNegations(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar largestSumAfterKNegations = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestSumAfterKNegations(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function largestSumAfterKNegations($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestSumAfterKNegations(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestSumAfterKNegations(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int largestSumAfterKNegations(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestSumAfterKNegations(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef largest_sum_after_k_negations(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestSumAfterKNegations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_sum_after_k_negations(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-sum-after-k-negations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_sum_after_k_negations(Nums :: [integer()], K :: integer()) -> integer().\nlargest_sum_after_k_negations(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_sum_after_k_negations(nums :: [integer], k :: integer) :: integer\n  def largest_sum_after_k_negations(nums, k) do\n    \n  end\nend"}}}