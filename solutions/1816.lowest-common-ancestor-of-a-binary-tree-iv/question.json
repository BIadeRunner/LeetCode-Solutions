{"question_id": "1816", "problem_slug": "lowest-common-ancestor-of-a-binary-tree-iv", "problem_title": "Lowest Common Ancestor of a Binary Tree IV", "content": "Given the root of a binary tree and an array of TreeNode objects nodes, return the lowest common ancestor (LCA) of all the nodes in nodes. All the nodes will exist in the tree, and all values of the tree's nodes are unique.\nExtending the definition of LCA on Wikipedia: \"The lowest common ancestor of n nodes p1, p2, ..., pn in a binary tree T is the lowest node that has every pi as a descendant (where we allow a node to be a descendant of itself) for every valid i\". A descendant of a node x is a node y that is on the path from node x to some leaf node.\n \nExample 1:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]\nOutput: 2\nExplanation: The lowest common ancestor of nodes 4 and 7 is node 2.\n\nExample 2:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]\nOutput: 1\nExplanation: The lowest common ancestor of a single node is the node itself.\n\n\nExample 3:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]\nOutput: 5\nExplanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-109 <= Node.val <= 109\nAll Node.val are unique.\nAll nodes[i] will exist in the tree.\nAll nodes[i] are distinct.\n\n", "hints": ["Starting from the root, traverse the left and the right subtrees, checking if one of the nodes exist there.", "If one of the subtrees doesn't contain any given node, the LCA can be the node returned from the other subtree", "If both subtrees contain nodes, the LCA node is the current node."], "exampleTestcases": "[3,5,1,6,2,0,8,null,null,7,4]\n[4,7]\n[3,5,1,6,2,0,8,null,null,7,4]\n[1]\n[3,5,1,6,2,0,8,null,null,7,4]\n[7,6,2,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode[] nodes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def lowestCommonAncestor(self, root, nodes):\n        \"\"\"\n        :type root: TreeNode\n        :type nodes: List[TreeNode]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':\n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode[] nodes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode[]} nodes\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, nodes) {\n    \n};"}}}