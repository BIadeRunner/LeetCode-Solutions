{"questionId": "1191", "acRate": 56.42997799142824, "difficulty": "Medium", "freqBar": 68.11036154263655, "frontendQuestionId": "1258", "paidOnly": true, "status": "ac", "title": "Synonymous Sentences", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}], "titleSlug": "synonymous-sentences", "content": "<p>You are given a list of equivalent string pairs <code>synonyms</code> where <code>synonyms[i] = [s<sub>i</sub>, t<sub>i</sub>]</code> indicates that <code>s<sub>i</sub></code> and <code>t<sub>i</sub></code> are equivalent strings. You are also given a sentence <code>text</code>.</p>\n\n<p>Return <em>all possible synonymous sentences <strong>sorted lexicographically</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> synonyms = [[&quot;happy&quot;,&quot;joy&quot;],[&quot;sad&quot;,&quot;sorrow&quot;],[&quot;joy&quot;,&quot;cheerful&quot;]], text = &quot;I am happy today but was sad yesterday&quot;\n<strong>Output:</strong> [&quot;I am cheerful today but was sad yesterday&quot;,&quot;I am cheerful today but was sorrow yesterday&quot;,&quot;I am happy today but was sad yesterday&quot;,&quot;I am happy today but was sorrow yesterday&quot;,&quot;I am joy today but was sad yesterday&quot;,&quot;I am joy today but was sorrow yesterday&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> synonyms = [[&quot;happy&quot;,&quot;joy&quot;],[&quot;cheerful&quot;,&quot;glad&quot;]], text = &quot;I am happy today but was sad yesterday&quot;\n<strong>Output:</strong> [&quot;I am happy today but was sad yesterday&quot;,&quot;I am joy today but was sad yesterday&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= synonyms.length &lt;= 10</code></li>\n\t<li><code>synonyms[i].length == 2</code></li>\n\t<li><code>1 &lt;= s<sub>i</sub>.length,<sub> </sub>t<sub>i</sub>.length &lt;= 10</code></li>\n\t<li><code>s<sub>i</sub> != t<sub>i</sub></code></li>\n\t<li><code>text</code> consists of at most <code>10</code> words.</li>\n\t<li>All the pairs of&nbsp;<code>synonyms</code> are <strong>unique</strong>.</li>\n\t<li>The words of <code>text</code> are separated by single spaces.</li>\n</ul>\n", "hints": ["Find all synonymous groups of words.", "Use union-find data structure.", "By backtracking, generate all possible statements."], "exampleTestcases": "[[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]]\n\"I am happy today but was sad yesterday\"\n[[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]]\n\"I am happy today but was sad yesterday\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generateSentences(vector<vector<string>>& synonyms, string text) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> generateSentences(List<List<String>> synonyms, String text) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def generateSentences(self, synonyms, text):\n        \"\"\"\n        :type synonyms: List[List[str]]\n        :type text: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def generateSentences(self, synonyms: List[List[str]], text: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateSentences(char*** synonyms, int synonymsSize, int* synonymsColSize, char* text, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GenerateSentences(IList<IList<string>> synonyms, string text) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[][]} synonyms\n * @param {string} text\n * @return {string[]}\n */\nvar generateSentences = function(synonyms, text) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function generateSentences(synonyms: string[][], text: string): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $synonyms\n     * @param String $text\n     * @return String[]\n     */\n    function generateSentences($synonyms, $text) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func generateSentences(_ synonyms: [[String]], _ text: String) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun generateSentences(synonyms: List<List<String>>, text: String): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> generateSentences(List<List<String>> synonyms, String text) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func generateSentences(synonyms [][]string, text string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[][]} synonyms\n# @param {String} text\n# @return {String[]}\ndef generate_sentences(synonyms, text)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def generateSentences(synonyms: List[List[String]], text: String): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn generate_sentences(synonyms: Vec<Vec<String>>, text: String) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (generate-sentences synonyms text)\n  (-> (listof (listof string?)) string? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec generate_sentences(Synonyms :: [[unicode:unicode_binary()]], Text :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_sentences(Synonyms, Text) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_sentences(synonyms :: [[String.t]], text :: String.t) :: [String.t]\n  def generate_sentences(synonyms, text) do\n    \n  end\nend"}], "similarQuestionList": []}