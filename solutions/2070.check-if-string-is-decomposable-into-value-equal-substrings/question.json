{"questionId": "2070", "acRate": 50.974453515933625, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1933", "paidOnly": true, "status": "ac", "title": "Check if String Is Decomposable Into Value-Equal Substrings", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "check-if-string-is-decomposable-into-value-equal-substrings", "content": "<p>A <strong>value-equal</strong> string is a string where <strong>all</strong> characters are the same.</p>\n\n<ul>\n\t<li>For example, <code>&quot;1111&quot;</code> and <code>&quot;33&quot;</code> are value-equal strings.</li>\n\t<li>In contrast, <code>&quot;123&quot;</code> is not a value-equal string.</li>\n</ul>\n\n<p>Given a digit string <code>s</code>, decompose the string into some number of <strong>consecutive value-equal</strong> substrings where <strong>exactly one</strong> substring has a <strong>length of </strong><code>2</code> and the remaining substrings have a <strong>length of </strong><code>3</code>.</p>\n\n<p>Return <code>true</code><em> if you can decompose </em><code>s</code><em> according to the above rules. Otherwise, return </em><code>false</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;000111000&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>s cannot be decomposed according to the rules because [&quot;000&quot;, &quot;111&quot;, &quot;000&quot;] does not have a substring of length 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00011111222&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>s can be decomposed into [&quot;000&quot;, &quot;111&quot;, &quot;11&quot;, &quot;222&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;011100022233&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>s cannot be decomposed according to the rules because of the first &#39;0&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of only digits <code>&#39;0&#39;</code> through <code>&#39;9&#39;</code>.</li>\n</ul>\n", "hints": ["Keep looking for 3-equals, if you find a 3-equal, keep going. If you don't find a 3-equal, check if it is a 2-equal.", "Make sure that it is the only 2-equal.", "If it is neither a 3-equal nor a 2-equal, then it is impossible."], "exampleTestcases": "\"000111000\"\n\"00011111222\"\n\"011100022233\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isDecomposable(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isDecomposable(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isDecomposable(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isDecomposable(self, s: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isDecomposable(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsDecomposable(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isDecomposable = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isDecomposable(s: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isDecomposable($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isDecomposable(_ s: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isDecomposable(s: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isDecomposable(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isDecomposable(s string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef is_decomposable(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isDecomposable(s: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_decomposable(s: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-decomposable s)\n  (-> string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_decomposable(S :: unicode:unicode_binary()) -> boolean().\nis_decomposable(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_decomposable(s :: String.t) :: boolean\n  def is_decomposable(s) do\n    \n  end\nend"}], "similarQuestionList": []}