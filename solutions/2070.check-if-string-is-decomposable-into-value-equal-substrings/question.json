{"question_id": "2070", "problem_slug": "check-if-string-is-decomposable-into-value-equal-substrings", "problem_title": "Check if String Is Decomposable Into Value-Equal Substrings", "content": "A value-equal string is a string where all characters are the same.\n\nFor example, \"1111\" and \"33\" are value-equal strings.\nIn contrast, \"123\" is not a value-equal string.\n\nGiven a digit string s, decompose the string into some number of consecutive value-equal substrings where exactly one substring has a length of 2 and the remaining substrings have a length of 3.\nReturn true if you can decompose s according to the above rules. Otherwise, return false.\nA substring is a contiguous sequence of characters in a string.\n \nExample 1:\n\nInput: s = \"000111000\"\nOutput: false\nExplanation: s cannot be decomposed according to the rules because [\"000\", \"111\", \"000\"] does not have a substring of length 2.\n\nExample 2:\n\nInput: s = \"00011111222\"\nOutput: true\nExplanation: s can be decomposed into [\"000\", \"111\", \"11\", \"222\"].\n\nExample 3:\n\nInput: s = \"011100022233\"\nOutput: false\nExplanation: s cannot be decomposed according to the rules because of the first '0'.\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of only digits '0' through '9'.\n\n", "hints": ["Keep looking for 3-equals, if you find a 3-equal, keep going. If you don't find a 3-equal, check if it is a 2-equal.", "Make sure that it is the only 2-equal.", "If it is neither a 3-equal nor a 2-equal, then it is impossible."], "exampleTestcases": "\"000111000\"\n\"00011111222\"\n\"011100022233\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isDecomposable(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isDecomposable(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isDecomposable(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isDecomposable(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isDecomposable(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsDecomposable(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isDecomposable = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isDecomposable(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isDecomposable($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isDecomposable(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isDecomposable(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isDecomposable(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isDecomposable(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef is_decomposable(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isDecomposable(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_decomposable(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-decomposable s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_decomposable(S :: unicode:unicode_binary()) -> boolean().\nis_decomposable(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_decomposable(s :: String.t) :: boolean\n  def is_decomposable(s) do\n    \n  end\nend"}}}