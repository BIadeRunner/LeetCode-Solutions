{"question_id": "379", "problem_slug": "design-phone-directory", "problem_title": "Design Phone Directory", "content": "Design a phone directory that initially has maxNumbers empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.\nImplement the PhoneDirectory class:\n\nPhoneDirectory(int maxNumbers) Initializes the phone directory with the number of available slots maxNumbers.\nint get() Provides a number that is not assigned to anyone. Returns -1 if no number is available.\nbool check(int number) Returns true if the slot number is available and false otherwise.\nvoid release(int number) Recycles or releases the slot number.\n\n \nExample 1:\n\nInput\n[\"PhoneDirectory\", \"get\", \"get\", \"check\", \"get\", \"check\", \"release\", \"check\"]\n[[3], [], [], [2], [], [2], [2], [2]]\nOutput\n[null, 0, 1, true, 2, false, null, true]\n\nExplanation\nPhoneDirectory phoneDirectory = new PhoneDirectory(3);\nphoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.\nphoneDirectory.get();      // Assume it returns 1.\nphoneDirectory.check(2);   // The number 2 is available, so return true.\nphoneDirectory.get();      // It returns 2, the only number that is left.\nphoneDirectory.check(2);   // The number 2 is no longer available, so return false.\nphoneDirectory.release(2); // Release number 2 back to the pool.\nphoneDirectory.check(2);   // Number 2 is available again, return true.\n\n \nConstraints:\n\n1 <= maxNumbers <= 104\n0 <= number < maxNumbers\nAt most 2 * 104 calls will be made to get, check, and release.\n\n", "hints": [], "exampleTestcases": "[\"PhoneDirectory\",\"get\",\"get\",\"check\",\"get\",\"check\",\"release\",\"check\"]\n[[3],[],[],[2],[],[2],[2],[2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class PhoneDirectory {\npublic:\n    PhoneDirectory(int maxNumbers) {\n        \n    }\n    \n    int get() {\n        \n    }\n    \n    bool check(int number) {\n        \n    }\n    \n    void release(int number) {\n        \n    }\n};\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * PhoneDirectory* obj = new PhoneDirectory(maxNumbers);\n * int param_1 = obj->get();\n * bool param_2 = obj->check(number);\n * obj->release(number);\n */"}, "Java": {"langSlug": "java", "code": "class PhoneDirectory {\n\n    public PhoneDirectory(int maxNumbers) {\n        \n    }\n    \n    public int get() {\n        \n    }\n    \n    public boolean check(int number) {\n        \n    }\n    \n    public void release(int number) {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * PhoneDirectory obj = new PhoneDirectory(maxNumbers);\n * int param_1 = obj.get();\n * boolean param_2 = obj.check(number);\n * obj.release(number);\n */"}, "Python": {"langSlug": "python", "code": "class PhoneDirectory(object):\n\n    def __init__(self, maxNumbers):\n        \"\"\"\n        :type maxNumbers: int\n        \"\"\"\n        \n\n    def get(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def check(self, number):\n        \"\"\"\n        :type number: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def release(self, number):\n        \"\"\"\n        :type number: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your PhoneDirectory object will be instantiated and called as such:\n# obj = PhoneDirectory(maxNumbers)\n# param_1 = obj.get()\n# param_2 = obj.check(number)\n# obj.release(number)"}, "Python3": {"langSlug": "python3", "code": "class PhoneDirectory:\n\n    def __init__(self, maxNumbers: int):\n        \n\n    def get(self) -> int:\n        \n\n    def check(self, number: int) -> bool:\n        \n\n    def release(self, number: int) -> None:\n        \n\n\n# Your PhoneDirectory object will be instantiated and called as such:\n# obj = PhoneDirectory(maxNumbers)\n# param_1 = obj.get()\n# param_2 = obj.check(number)\n# obj.release(number)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} PhoneDirectory;\n\n\nPhoneDirectory* phoneDirectoryCreate(int maxNumbers) {\n    \n}\n\nint phoneDirectoryGet(PhoneDirectory* obj) {\n    \n}\n\nbool phoneDirectoryCheck(PhoneDirectory* obj, int number) {\n    \n}\n\nvoid phoneDirectoryRelease(PhoneDirectory* obj, int number) {\n    \n}\n\nvoid phoneDirectoryFree(PhoneDirectory* obj) {\n    \n}\n\n/**\n * Your PhoneDirectory struct will be instantiated and called as such:\n * PhoneDirectory* obj = phoneDirectoryCreate(maxNumbers);\n * int param_1 = phoneDirectoryGet(obj);\n \n * bool param_2 = phoneDirectoryCheck(obj, number);\n \n * phoneDirectoryRelease(obj, number);\n \n * phoneDirectoryFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class PhoneDirectory {\n\n    public PhoneDirectory(int maxNumbers) {\n        \n    }\n    \n    public int Get() {\n        \n    }\n    \n    public bool Check(int number) {\n        \n    }\n    \n    public void Release(int number) {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * PhoneDirectory obj = new PhoneDirectory(maxNumbers);\n * int param_1 = obj.Get();\n * bool param_2 = obj.Check(number);\n * obj.Release(number);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} maxNumbers\n */\nvar PhoneDirectory = function(maxNumbers) {\n    \n};\n\n/**\n * @return {number}\n */\nPhoneDirectory.prototype.get = function() {\n    \n};\n\n/** \n * @param {number} number\n * @return {boolean}\n */\nPhoneDirectory.prototype.check = function(number) {\n    \n};\n\n/** \n * @param {number} number\n * @return {void}\n */\nPhoneDirectory.prototype.release = function(number) {\n    \n};\n\n/** \n * Your PhoneDirectory object will be instantiated and called as such:\n * var obj = new PhoneDirectory(maxNumbers)\n * var param_1 = obj.get()\n * var param_2 = obj.check(number)\n * obj.release(number)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class PhoneDirectory {\n    constructor(maxNumbers: number) {\n        \n    }\n\n    get(): number {\n        \n    }\n\n    check(number: number): boolean {\n        \n    }\n\n    release(number: number): void {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * var obj = new PhoneDirectory(maxNumbers)\n * var param_1 = obj.get()\n * var param_2 = obj.check(number)\n * obj.release(number)\n */"}, "PHP": {"langSlug": "php", "code": "class PhoneDirectory {\n    /**\n     * @param Integer $maxNumbers\n     */\n    function __construct($maxNumbers) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function get() {\n        \n    }\n  \n    /**\n     * @param Integer $number\n     * @return Boolean\n     */\n    function check($number) {\n        \n    }\n  \n    /**\n     * @param Integer $number\n     * @return NULL\n     */\n    function release($number) {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * $obj = PhoneDirectory($maxNumbers);\n * $ret_1 = $obj->get();\n * $ret_2 = $obj->check($number);\n * $obj->release($number);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass PhoneDirectory {\n\n    init(_ maxNumbers: Int) {\n        \n    }\n    \n    func get() -> Int {\n        \n    }\n    \n    func check(_ number: Int) -> Bool {\n        \n    }\n    \n    func release(_ number: Int) {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * let obj = PhoneDirectory(maxNumbers)\n * let ret_1: Int = obj.get()\n * let ret_2: Bool = obj.check(number)\n * obj.release(number)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class PhoneDirectory(maxNumbers: Int) {\n\n    fun get(): Int {\n        \n    }\n\n    fun check(number: Int): Boolean {\n        \n    }\n\n    fun release(number: Int) {\n        \n    }\n\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * var obj = PhoneDirectory(maxNumbers)\n * var param_1 = obj.get()\n * var param_2 = obj.check(number)\n * obj.release(number)\n */"}, "Dart": {"langSlug": "dart", "code": "class PhoneDirectory {\n\n  PhoneDirectory(int maxNumbers) {\n    \n  }\n  \n  int get() {\n    \n  }\n  \n  bool check(int number) {\n    \n  }\n  \n  void release(int number) {\n    \n  }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * PhoneDirectory obj = PhoneDirectory(maxNumbers);\n * int param1 = obj.get();\n * bool param2 = obj.check(number);\n * obj.release(number);\n */"}, "Go": {"langSlug": "golang", "code": "type PhoneDirectory struct {\n    \n}\n\n\nfunc Constructor(maxNumbers int) PhoneDirectory {\n    \n}\n\n\nfunc (this *PhoneDirectory) Get() int {\n    \n}\n\n\nfunc (this *PhoneDirectory) Check(number int) bool {\n    \n}\n\n\nfunc (this *PhoneDirectory) Release(number int)  {\n    \n}\n\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * obj := Constructor(maxNumbers);\n * param_1 := obj.Get();\n * param_2 := obj.Check(number);\n * obj.Release(number);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class PhoneDirectory\n\n=begin\n    :type max_numbers: Integer\n=end\n    def initialize(max_numbers)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get()\n        \n    end\n\n\n=begin\n    :type number: Integer\n    :rtype: Boolean\n=end\n    def check(number)\n        \n    end\n\n\n=begin\n    :type number: Integer\n    :rtype: Void\n=end\n    def release(number)\n        \n    end\n\n\nend\n\n# Your PhoneDirectory object will be instantiated and called as such:\n# obj = PhoneDirectory.new(max_numbers)\n# param_1 = obj.get()\n# param_2 = obj.check(number)\n# obj.release(number)"}, "Scala": {"langSlug": "scala", "code": "class PhoneDirectory(_maxNumbers: Int) {\n\n    def get(): Int = {\n        \n    }\n\n    def check(number: Int): Boolean = {\n        \n    }\n\n    def release(number: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * val obj = new PhoneDirectory(maxNumbers)\n * val param_1 = obj.get()\n * val param_2 = obj.check(number)\n * obj.release(number)\n */"}, "Rust": {"langSlug": "rust", "code": "struct PhoneDirectory {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl PhoneDirectory {\n\n    fn new(maxNumbers: i32) -> Self {\n        \n    }\n    \n    fn get(&self) -> i32 {\n        \n    }\n    \n    fn check(&self, number: i32) -> bool {\n        \n    }\n    \n    fn release(&self, number: i32) {\n        \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * let obj = PhoneDirectory::new(maxNumbers);\n * let ret_1: i32 = obj.get();\n * let ret_2: bool = obj.check(number);\n * obj.release(number);\n */"}, "Racket": {"langSlug": "racket", "code": "(define phone-directory%\n  (class object%\n    (super-new)\n    \n    ; max-numbers : exact-integer?\n    (init-field\n      max-numbers)\n    \n    ; get : -> exact-integer?\n    (define/public (get)\n      )\n    ; check : exact-integer? -> boolean?\n    (define/public (check number)\n      )\n    ; release : exact-integer? -> void?\n    (define/public (release number)\n      )))\n\n;; Your phone-directory% object will be instantiated and called as such:\n;; (define obj (new phone-directory% [max-numbers max-numbers]))\n;; (define param_1 (send obj get))\n;; (define param_2 (send obj check number))\n;; (send obj release number)"}, "Erlang": {"langSlug": "erlang", "code": "-spec phone_directory_init_(MaxNumbers :: integer()) -> any().\nphone_directory_init_(MaxNumbers) ->\n  .\n\n-spec phone_directory_get() -> integer().\nphone_directory_get() ->\n  .\n\n-spec phone_directory_check(Number :: integer()) -> boolean().\nphone_directory_check(Number) ->\n  .\n\n-spec phone_directory_release(Number :: integer()) -> any().\nphone_directory_release(Number) ->\n  .\n\n\n%% Your functions will be called as such:\n%% phone_directory_init_(MaxNumbers),\n%% Param_1 = phone_directory_get(),\n%% Param_2 = phone_directory_check(Number),\n%% phone_directory_release(Number),\n\n%% phone_directory_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule PhoneDirectory do\n  @spec init_(max_numbers :: integer) :: any\n  def init_(max_numbers) do\n    \n  end\n\n  @spec get() :: integer\n  def get() do\n    \n  end\n\n  @spec check(number :: integer) :: boolean\n  def check(number) do\n    \n  end\n\n  @spec release(number :: integer) :: any\n  def release(number) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# PhoneDirectory.init_(max_numbers)\n# param_1 = PhoneDirectory.get()\n# param_2 = PhoneDirectory.check(number)\n# PhoneDirectory.release(number)\n\n# PhoneDirectory.init_ will be called before every test case, in which you can do some necessary initializations."}}}