{"question_id": "2049", "problem_slug": "eliminate-maximum-number-of-monsters", "problem_title": "Eliminate Maximum Number of Monsters", "content": "You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.\nThe monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.\nYou have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge. The weapon is fully charged at the very start.\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.\nReturn the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.\n \nExample 1:\n\nInput: dist = [1,3,4], speed = [1,1,1]\nOutput: 3\nExplanation:\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster.\nAll 3 monsters can be eliminated.\nExample 2:\n\nInput: dist = [1,1,2,3], speed = [1,1,1,1]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster.\n\nExample 3:\n\nInput: dist = [3,2,4], speed = [5,3,2]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster.\n\n \nConstraints:\n\nn == dist.length == speed.length\n1 <= n <= 105\n1 <= dist[i], speed[i] <= 105\n\n", "hints": ["Find the amount of time it takes each monster to arrive.", "Find the order in which the monsters will arrive."], "exampleTestcases": "[1,3,4]\n[1,1,1]\n[1,1,2,3]\n[1,1,1,1]\n[3,2,4]\n[5,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int eliminateMaximum(int[] dist, int[] speed) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def eliminateMaximum(self, dist, speed):\n        \"\"\"\n        :type dist: List[int]\n        :type speed: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int eliminateMaximum(int* dist, int distSize, int* speed, int speedSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int EliminateMaximum(int[] dist, int[] speed) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} dist\n * @param {number[]} speed\n * @return {number}\n */\nvar eliminateMaximum = function(dist, speed) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function eliminateMaximum(dist: number[], speed: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $dist\n     * @param Integer[] $speed\n     * @return Integer\n     */\n    function eliminateMaximum($dist, $speed) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func eliminateMaximum(_ dist: [Int], _ speed: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun eliminateMaximum(dist: IntArray, speed: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int eliminateMaximum(List<int> dist, List<int> speed) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func eliminateMaximum(dist []int, speed []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} dist\n# @param {Integer[]} speed\n# @return {Integer}\ndef eliminate_maximum(dist, speed)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def eliminateMaximum(dist: Array[Int], speed: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn eliminate_maximum(dist: Vec<i32>, speed: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (eliminate-maximum dist speed)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec eliminate_maximum(Dist :: [integer()], Speed :: [integer()]) -> integer().\neliminate_maximum(Dist, Speed) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec eliminate_maximum(dist :: [integer], speed :: [integer]) :: integer\n  def eliminate_maximum(dist, speed) do\n    \n  end\nend"}}}