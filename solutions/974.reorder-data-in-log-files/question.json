{"question_id": "974", "problem_slug": "reorder-data-in-log-files", "problem_title": "Reorder Data in Log Files", "content": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\nThere are two types of logs:\n\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\nDigit-logs: All words (except the identifier) consist of digits.\n\nReorder these logs so that:\n\nThe letter-logs come before all digit-logs.\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\nThe digit-logs maintain their relative ordering.\n\nReturn the final order of the logs.\n \nExample 1:\n\nInput: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\nExplanation:\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".\n\nExample 2:\n\nInput: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\nOutput: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n\n \nConstraints:\n\n1 <= logs.length <= 100\n3 <= logs[i].length <= 100\nAll the tokens of logs[i] are separated by a single space.\nlogs[i] is guaranteed to have an identifier and at least one word after the identifier.\n\n", "hints": [], "exampleTestcases": "[\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n[\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> reorderLogFiles(vector<string>& logs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String[] reorderLogFiles(String[] logs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reorderLogFiles(self, logs):\n        \"\"\"\n        :type logs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** reorderLogFiles(char** logs, int logsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string[] ReorderLogFiles(string[] logs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} logs\n * @return {string[]}\n */\nvar reorderLogFiles = function(logs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reorderLogFiles(logs: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $logs\n     * @return String[]\n     */\n    function reorderLogFiles($logs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reorderLogFiles(_ logs: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reorderLogFiles(logs: Array<String>): Array<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> reorderLogFiles(List<String> logs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reorderLogFiles(logs []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} logs\n# @return {String[]}\ndef reorder_log_files(logs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reorderLogFiles(logs: Array[String]): Array[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reorder_log_files(logs: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reorder-log-files logs)\n  (-> (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reorder_log_files(Logs :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nreorder_log_files(Logs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reorder_log_files(logs :: [String.t]) :: [String.t]\n  def reorder_log_files(logs) do\n    \n  end\nend"}}}