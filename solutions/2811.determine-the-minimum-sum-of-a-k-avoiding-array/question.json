{"question_id": "2811", "problem_slug": "determine-the-minimum-sum-of-a-k-avoiding-array", "problem_title": "Determine the Minimum Sum of a k-avoiding Array", "content": "You are given two integers, n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\n \nExample 1:\n\nInput: n = 5, k = 4\nOutput: 18\nExplanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\nExample 2:\n\nInput: n = 2, k = 6\nOutput: 3\nExplanation: We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n \nConstraints:\n\n1 <= n, k <= 50\n\n", "hints": ["<div class=\"_1l1MA\">Try to start with the smallest possible integers.</div>", "<div class=\"_1l1MA\">Check if the current number can be added to the array.</div>", "<div class=\"_1l1MA\">To check if the current number can be added, keep track of already added numbers in a set.</div>", "<div class=\"_1l1MA\">If the number <code>i</code> is added to the array, then <code>i + k</code> can not be added.</div>"], "exampleTestcases": "5\n4\n2\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSum(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSum(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSum(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSum(int n, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSum(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minimumSum = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSum(n: number, k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSum($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSum(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSum(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSum(int n, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSum(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef minimum_sum(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSum(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_sum(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-sum n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_sum(N :: integer(), K :: integer()) -> integer().\nminimum_sum(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_sum(n :: integer, k :: integer) :: integer\n  def minimum_sum(n, k) do\n    \n  end\nend"}}}