{"question_id": "2051", "problem_slug": "longest-common-subpath", "problem_title": "Longest Common Subpath", "content": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.\n \nExample 1:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]\nOutput: 2\nExplanation: The longest common subpath is [2,3].\n\nExample 2:\n\nInput: n = 3, paths = [[0],[1],[2]]\nOutput: 0\nExplanation: There is no common subpath shared by the three paths.\n\nExample 3:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]\nOutput: 1\nExplanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.\n \nConstraints:\n\n1 <= n <= 105\nm == paths.length\n2 <= m <= 105\nsum(paths[i].length) <= 105\n0 <= paths[i][j] < n\nThe same city is not listed multiple times consecutively in paths[i].\n\n", "hints": ["If there is a common path with length x, there is for sure a common path of length y where y < x.", "We can use binary search over the answer with the range [0, min(path[i].length)].", "Using binary search, we want to verify if we have a common path of length m. We can achieve this using hashing."], "exampleTestcases": "5\n[[0,1,2,3,4],[2,3,4],[4,0,1,2,3]]\n3\n[[0],[1],[2]]\n5\n[[0,1,2,3,4],[4,3,2,1,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestCommonSubpath(int n, vector<vector<int>>& paths) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestCommonSubpath(int n, int[][] paths) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestCommonSubpath(self, n, paths):\n        \"\"\"\n        :type n: int\n        :type paths: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestCommonSubpath(int n, int** paths, int pathsSize, int* pathsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestCommonSubpath(int n, int[][] paths) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} paths\n * @return {number}\n */\nvar longestCommonSubpath = function(n, paths) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestCommonSubpath(n: number, paths: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $paths\n     * @return Integer\n     */\n    function longestCommonSubpath($n, $paths) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestCommonSubpath(_ n: Int, _ paths: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestCommonSubpath(n: Int, paths: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestCommonSubpath(int n, List<List<int>> paths) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestCommonSubpath(n int, paths [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} paths\n# @return {Integer}\ndef longest_common_subpath(n, paths)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestCommonSubpath(n: Int, paths: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_common_subpath(n: i32, paths: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-common-subpath n paths)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_common_subpath(N :: integer(), Paths :: [[integer()]]) -> integer().\nlongest_common_subpath(N, Paths) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_common_subpath(n :: integer, paths :: [[integer]]) :: integer\n  def longest_common_subpath(n, paths) do\n    \n  end\nend"}}}