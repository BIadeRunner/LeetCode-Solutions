{"question_id": "1730", "problem_slug": "special-array-with-x-elements-greater-than-or-equal-x", "problem_title": "Special Array With X Elements Greater Than or Equal X", "content": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.\n \nExample 1:\n\nInput: nums = [3,5]\nOutput: 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n\nExample 2:\n\nInput: nums = [0,0]\nOutput: -1\nExplanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n\nExample 3:\n\nInput: nums = [0,4,3,0,4]\nOutput: 3\nExplanation: There are 3 values that are greater than or equal to 3.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 1000\n\n", "hints": ["Count the number of elements greater than or equal to x for each x in the range [0, nums.length].", "If for any x, the condition satisfies, return that x. Otherwise, there is no answer."], "exampleTestcases": "[3,5]\n[0,0]\n[0,4,3,0,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int specialArray(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int specialArray(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def specialArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int specialArray(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SpecialArray(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialArray = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function specialArray(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function specialArray($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func specialArray(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun specialArray(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int specialArray(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func specialArray(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef special_array(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def specialArray(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn special_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (special-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec special_array(Nums :: [integer()]) -> integer().\nspecial_array(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec special_array(nums :: [integer]) :: integer\n  def special_array(nums) do\n    \n  end\nend"}}}