{"question_id": "2009", "problem_slug": "longest-word-with-all-prefixes", "problem_title": "Longest Word With All Prefixes", "content": "Given an array of strings words, find the longest string in words such that every prefix of it is also in words.\n\nFor example, let words = [\"a\", \"app\", \"ap\"]. The string \"app\" has prefixes \"ap\" and \"a\", all of which are in words.\n\nReturn the string described above. If there is more than one string with the same length, return the lexicographically smallest one, and if no string exists, return \"\".\n \nExample 1:\n\nInput: words = [\"k\",\"ki\",\"kir\",\"kira\", \"kiran\"]\nOutput: \"kiran\"\nExplanation: \"kiran\" has prefixes \"kira\", \"kir\", \"ki\", and \"k\", and all of them appear in words.\n\nExample 2:\n\nInput: words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\nOutput: \"apple\"\nExplanation: Both \"apple\" and \"apply\" have all their prefixes in words.\nHowever, \"apple\" is lexicographically smaller, so we return that.\n\nExample 3:\n\nInput: words = [\"abc\", \"bc\", \"ab\", \"qwe\"]\nOutput: \"\"\n\n \nConstraints:\n\n1 <= words.length <= 105\n1 <= words[i].length <= 105\n1 <= sum(words[i].length) <= 105\nwords[i] consists only of lowercase English letters.\n\n", "hints": ["Add all the words to a trie.", "Check the longest path where all the nodes are words."], "exampleTestcases": "[\"k\",\"ki\",\"kir\",\"kira\",\"kiran\"]\n[\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\n[\"abc\",\"bc\",\"ab\",\"qwe\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string longestWord(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String longestWord(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "\n\nchar * longestWord(char ** words, int wordsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LongestWord(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string}\n */\nvar longestWord = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestWord(words: string[]): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function longestWord($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestWord(_ words: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestWord(words: Array<String>): String {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func longestWord(words []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String}\ndef longest_word(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestWord(words: Array[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_word(words: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-word words)\n  (-> (listof string?) string?)\n\n  )"}}}