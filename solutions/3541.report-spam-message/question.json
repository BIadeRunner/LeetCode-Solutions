{"question_id": "3541", "problem_slug": "report-spam-message", "problem_title": "Report Spam Message", "content": "You are given an array of strings message and an array of strings bannedWords.\nAn array of words is considered spam if there are at least two words in it that exactly match any word in bannedWords.\nReturn true if the array message is spam, and false otherwise.\n \nExample 1:\n\nInput: message = [\"hello\",\"world\",\"leetcode\"], bannedWords = [\"world\",\"hello\"]\nOutput: true\nExplanation:\nThe words \"hello\" and \"world\" from the message array both appear in the bannedWords array.\n\nExample 2:\n\nInput: message = [\"hello\",\"programming\",\"fun\"], bannedWords = [\"world\",\"programming\",\"leetcode\"]\nOutput: false\nExplanation:\nOnly one word from the message array (\"programming\") appears in the bannedWords array.\n\n \nConstraints:\n\n1 <= message.length, bannedWords.length <= 105\n1 <= message[i].length, bannedWords[i].length <= 15\nmessage[i] and bannedWords[i] consist only of lowercase English letters.\n\n", "hints": ["Use hash set."], "exampleTestcases": "[\"hello\",\"world\",\"leetcode\"]\n[\"world\",\"hello\"]\n[\"hello\",\"programming\",\"fun\"]\n[\"world\",\"programming\",\"leetcode\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool reportSpam(vector<string>& message, vector<string>& bannedWords) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean reportSpam(String[] message, String[] bannedWords) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reportSpam(self, message, bannedWords):\n        \"\"\"\n        :type message: List[str]\n        :type bannedWords: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool reportSpam(char** message, int messageSize, char** bannedWords, int bannedWordsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ReportSpam(string[] message, string[] bannedWords) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} message\n * @param {string[]} bannedWords\n * @return {boolean}\n */\nvar reportSpam = function(message, bannedWords) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reportSpam(message: string[], bannedWords: string[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $message\n     * @param String[] $bannedWords\n     * @return Boolean\n     */\n    function reportSpam($message, $bannedWords) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reportSpam(_ message: [String], _ bannedWords: [String]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reportSpam(message: Array<String>, bannedWords: Array<String>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool reportSpam(List<String> message, List<String> bannedWords) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reportSpam(message []string, bannedWords []string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} message\n# @param {String[]} banned_words\n# @return {Boolean}\ndef report_spam(message, banned_words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reportSpam(message: Array[String], bannedWords: Array[String]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn report_spam(message: Vec<String>, banned_words: Vec<String>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (report-spam message bannedWords)\n  (-> (listof string?) (listof string?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec report_spam(Message :: [unicode:unicode_binary()], BannedWords :: [unicode:unicode_binary()]) -> boolean().\nreport_spam(Message, BannedWords) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec report_spam(message :: [String.t], banned_words :: [String.t]) :: boolean\n  def report_spam(message, banned_words) do\n    \n  end\nend"}}}