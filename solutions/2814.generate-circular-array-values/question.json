{"question_id": "2814", "problem_slug": "generate-circular-array-values", "problem_title": "Generate Circular Array Values", "content": "Given a circular array arr and an integer startIndex, return a generator object gen that yields values from arr.\nThe first time gen.next() is called on the generator, it should should yield arr[startIndex].\nEach subsequent time gen.next() is called, an integer jump will be passed into the function (Ex: gen.next(-3)).\n\nIf jump is positive, the index should increase by that value, however if the current index is the last index, it should instead jump to the first index.\nIf jump is negative, the index should decrease by the magnitude of that value, however if the current index is the first index, it should instead jump to the last index.\n\n \nExample 1:\n\nInput: arr = [1,2,3,4,5], steps = [1,2,6], startIndex = 0\nOutput: [1,2,4,5]\nExplanation:  \n const gen = cycleGenerator(arr, startIndex);\n gen.next().value;  // 1, index = startIndex = 0\n gen.next(1).value; // 2, index = 1, 0 -> 1\n gen.next(2).value; // 4, index = 3, 1 -> 2 -> 3\n gen.next(6).value; // 5, index = 4, 3 -> 4 -> 0 -> 1 -> 2 -> 3 -> 4\n\nExample 2:\n\nInput: arr = [10,11,12,13,14,15], steps = [1,4,0,-1,-3], startIndex = 1\nOutput: [11,12,10,10,15,12]\nExplanation: \n const gen = cycleGenerator(arr, startIndex);\n gen.next().value;   // 11, index = 1\n gen.next(1).value;  // 12, index = 2\n gen.next(4).value;  // 10, index = 0\n gen.next(0).value;  // 10, index = 0\n gen.next(-1).value; // 15, index = 5\n gen.next(-3).value; // 12, index = 2\n\nExample 3:\n\nInput: arr = [2,4,6,7,8,10], steps = [-4,5,-3,10], startIndex = 3\nOutput: [7,10,8,4,10]\nExplanation:  \n const gen = cycleGenerator(arr, startIndex);\n gen.next().value   // 7,  index = 3\n gen.next(-4).value // 10, index = 5\n gen.next(5).value  // 8,  index = 4\n gen.next(-3).value // 4,  index = 1  \n gen.next(10).value // 10, index = 5\n\n \nConstraints:\n\n1 <= arr.length <= 104\n1 <= steps.length <= 100\n-104 <= steps[i], arr[i] <= 104\n0 <= startIndex < arr.length\n\n", "hints": [], "exampleTestcases": "[1,2,3,4,5]\n[1,2,6]\n0\n[10,11,12,13,14,15]\n[1,4,0,-1,-3]\n1\n[2,4,6,7,8,10]\n[-4,5,-3,10]\n3", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Array<number>} arr\n * @param {number} startIndex\n * @yields {number}\n */\nvar cycleGenerator = function* (arr, startIndex) {\n    \n};\n\n/**\n *  const gen = cycleGenerator([1,2,3,4,5], 0);\n *  gen.next().value  // 1\n *  gen.next(1).value // 2\n *  gen.next(2).value // 4\n *  gen.next(6).value // 5\n */"}, "TypeScript": {"langSlug": "typescript", "code": "function* cycleGenerator(arr: number[], startIndex: number): Generator<number, void, number> {\n    \n};\n\n/**\n *  const gen = cycleGenerator([1,2,3,4,5], 0);\n *  gen.next().value  // 1\n *  gen.next(1).value // 2\n *  gen.next(2).value // 4\n *  gen.next(6).value // 5\n */"}}}