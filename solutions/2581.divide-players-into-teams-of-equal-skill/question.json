{"questionId": "2581", "acRate": 69.08352306396782, "difficulty": "Medium", "freqBar": 57.71421730982303, "frontendQuestionId": "2491", "paidOnly": false, "status": "ac", "title": "Divide Players Into Teams of Equal Skill", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "divide-players-into-teams-of-equal-skill", "content": "<p>You are given a positive integer array <code>skill</code> of <strong>even</strong> length <code>n</code> where <code>skill[i]</code> denotes the skill of the <code>i<sup>th</sup></code> player. Divide the players into <code>n / 2</code> teams of size <code>2</code> such that the total skill of each team is <strong>equal</strong>.</p>\n\n<p>The <strong>chemistry</strong> of a team is equal to the <strong>product</strong> of the skills of the players on that team.</p>\n\n<p>Return <em>the sum of the <strong>chemistry</strong> of all the teams, or return </em><code>-1</code><em> if there is no way to divide the players into teams such that the total skill of each team is equal.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,2,5,1,3,4]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,4]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [1,1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= skill.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>skill.length</code> is even.</li>\n\t<li><code>1 &lt;= skill[i] &lt;= 1000</code></li>\n</ul>\n", "hints": ["Try sorting the skill array.", "It is always optimal to pair the weakest available player with the strongest available player."], "exampleTestcases": "[3,2,5,1,3,4]\n[3,4]\n[1,1,2,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long dividePlayers(vector<int>& skill) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long dividePlayers(int[] skill) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def dividePlayers(self, skill):\n        \"\"\"\n        :type skill: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long dividePlayers(int* skill, int skillSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long DividePlayers(int[] skill) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} skill\n * @return {number}\n */\nvar dividePlayers = function(skill) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function dividePlayers(skill: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $skill\n     * @return Integer\n     */\n    function dividePlayers($skill) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func dividePlayers(_ skill: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun dividePlayers(skill: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int dividePlayers(List<int> skill) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func dividePlayers(skill []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} skill\n# @return {Integer}\ndef divide_players(skill)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def dividePlayers(skill: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn divide_players(skill: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (divide-players skill)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec divide_players(Skill :: [integer()]) -> integer().\ndivide_players(Skill) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec divide_players(skill :: [integer]) :: integer\n  def divide_players(skill) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-moves-to-equal-array-elements", "title": "Minimum Moves to Equal Array Elements", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "max-number-of-k-sum-pairs", "title": "Max Number of K-Sum Pairs", "isPaidOnly": false}]}