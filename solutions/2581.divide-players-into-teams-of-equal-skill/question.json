{"question_id": "2581", "problem_slug": "divide-players-into-teams-of-equal-skill", "problem_title": "Divide Players Into Teams of Equal Skill", "content": "You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.\nThe chemistry of a team is equal to the product of the skills of the players on that team.\nReturn the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.\n \nExample 1:\n\nInput: skill = [3,2,5,1,3,4]\nOutput: 22\nExplanation: \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n\nExample 2:\n\nInput: skill = [3,4]\nOutput: 12\nExplanation: \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n\nExample 3:\n\nInput: skill = [1,1,2,3]\nOutput: -1\nExplanation: \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n\n \nConstraints:\n\n2 <= skill.length <= 105\nskill.length is even.\n1 <= skill[i] <= 1000\n\n", "hints": ["Try sorting the skill array.", "It is always optimal to pair the weakest available player with the strongest available player."], "exampleTestcases": "[3,2,5,1,3,4]\n[3,4]\n[1,1,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long dividePlayers(vector<int>& skill) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long dividePlayers(int[] skill) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def dividePlayers(self, skill):\n        \"\"\"\n        :type skill: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long dividePlayers(int* skill, int skillSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long DividePlayers(int[] skill) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} skill\n * @return {number}\n */\nvar dividePlayers = function(skill) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function dividePlayers(skill: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $skill\n     * @return Integer\n     */\n    function dividePlayers($skill) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func dividePlayers(_ skill: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun dividePlayers(skill: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int dividePlayers(List<int> skill) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func dividePlayers(skill []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} skill\n# @return {Integer}\ndef divide_players(skill)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def dividePlayers(skill: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn divide_players(skill: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (divide-players skill)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec divide_players(Skill :: [integer()]) -> integer().\ndivide_players(Skill) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec divide_players(skill :: [integer]) :: integer\n  def divide_players(skill) do\n    \n  end\nend"}}}