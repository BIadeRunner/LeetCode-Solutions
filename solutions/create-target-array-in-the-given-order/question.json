{"questionId": "1505", "acRate": 86.05543945274471, "difficulty": "Easy", "freqBar": 57.825118115584, "frontendQuestionId": "1389", "paidOnly": false, "status": "ac", "title": "Create Target Array in the Given Order", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "create-target-array-in-the-given-order", "content": "<p>Given two arrays of integers&nbsp;<code>nums</code> and <code>index</code>. Your task is to create <em>target</em> array under the following rules:</p>\n\n<ul>\n\t<li>Initially <em>target</em> array is empty.</li>\n\t<li>From left to right read nums[i] and index[i], insert at index <code>index[i]</code>&nbsp;the value <code>nums[i]</code>&nbsp;in&nbsp;<em>target</em> array.</li>\n\t<li>Repeat the previous step until there are no elements to read in <code>nums</code> and <code>index.</code></li>\n</ul>\n\n<p>Return the <em>target</em> array.</p>\n\n<p>It is guaranteed that the insertion operations will be valid.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,3,4], index = [0,1,2,2,1]\n<strong>Output:</strong> [0,4,1,3,2]\n<strong>Explanation:</strong>\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,0], index = [0,1,2,3,0]\n<strong>Output:</strong> [0,1,2,3,4]\n<strong>Explanation:</strong>\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], index = [0]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, index.length &lt;= 100</code></li>\n\t<li><code>nums.length == index.length</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= index[i] &lt;= i</code></li>\n</ul>\n", "hints": ["Simulate the process and fill corresponding numbers in the designated spots."], "exampleTestcases": "[0,1,2,3,4]\n[0,1,2,2,1]\n[1,2,3,4,0]\n[0,1,2,3,0]\n[1]\n[0]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] createTargetArray(int[] nums, int[] index) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def createTargetArray(self, nums, index):\n        \"\"\"\n        :type nums: List[int]\n        :type index: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* createTargetArray(int* nums, int numsSize, int* index, int indexSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] CreateTargetArray(int[] nums, int[] index) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} index\n * @return {number[]}\n */\nvar createTargetArray = function(nums, index) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function createTargetArray(nums: number[], index: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $index\n     * @return Integer[]\n     */\n    function createTargetArray($nums, $index) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func createTargetArray(_ nums: [Int], _ index: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun createTargetArray(nums: IntArray, index: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> createTargetArray(List<int> nums, List<int> index) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func createTargetArray(nums []int, index []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} index\n# @return {Integer[]}\ndef create_target_array(nums, index)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def createTargetArray(nums: Array[Int], index: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn create_target_array(nums: Vec<i32>, index: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (create-target-array nums index)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec create_target_array(Nums :: [integer()], Index :: [integer()]) -> [integer()].\ncreate_target_array(Nums, Index) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec create_target_array(nums :: [integer], index :: [integer]) :: [integer]\n  def create_target_array(nums, index) do\n    \n  end\nend"}], "similarQuestionList": []}