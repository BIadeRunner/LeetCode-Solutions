{"question_id": "1604", "problem_slug": "least-number-of-unique-integers-after-k-removals", "problem_title": "Least Number of Unique Integers after K Removals", "content": "Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.\n\n\n \nExample 1:\n\r\nInput: arr = [5,5,4], k = 1\r\nOutput: 1\r\nExplanation: Remove the single 4, only 5 is left.\r\n\nExample 2:\n\r\nInput: arr = [4,3,1,1,3,3,2], k = 3\r\nOutput: 2\r\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n \nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^9\n0 <= k <= arr.length\n", "hints": ["Use a map to count the frequencies of the numbers in the array.", "An optimal strategy is to remove the numbers with the smallest count first."], "exampleTestcases": "[5,5,4]\n1\n[4,3,1,1,3,3,2]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public int findLeastNumOfUniqueInts(int[] arr, int k) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def findLeastNumOfUniqueInts(self, arr, k):\r\n        \"\"\"\r\n        :type arr: List[int]\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:"}, "C": {"langSlug": "c", "code": "int findLeastNumOfUniqueInts(int* arr, int arrSize, int k){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public int FindLeastNumOfUniqueInts(int[] arr, int k) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {number[]} arr\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findLeastNumOfUniqueInts = function(arr, k) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findLeastNumOfUniqueInts(arr: number[], k: number): number {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $arr\r\n     * @param Integer $k\r\n     * @return Integer\r\n     */\r\n    function findLeastNumOfUniqueInts($arr, $k) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func findLeastNumOfUniqueInts(_ arr: [Int], _ k: Int) -> Int {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun findLeastNumOfUniqueInts(arr: IntArray, k: Int): Int {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func findLeastNumOfUniqueInts(arr []int, k int) int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef find_least_num_of_unique_ints(arr, k)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def findLeastNumOfUniqueInts(arr: Array[Int], k: Int): Int = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn find_least_num_of_unique_ints(arr: Vec<i32>, k: i32) -> i32 {\r\n        \r\n    }\r\n}"}}}