{"question_id": "336", "problem_slug": "palindrome-pairs", "problem_title": "Palindrome Pairs", "content": "You are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n\n0 <= i, j < words.length,\ni != j, and\nwords[i] + words[j] (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with O(sum of words[i].length) runtime complexity.\n \nExample 1:\n\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n\nExample 2:\n\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\n\nExample 3:\n\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\",\"a\"]\n\n \nConstraints:\n\n1 <= words.length <= 5000\n0 <= words[i].length <= 300\nwords[i] consists of lowercase English letters.\n\n", "hints": ["Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.", "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?", "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."], "exampleTestcases": "[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n[\"bat\",\"tab\",\"cat\"]\n[\"a\",\"\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> palindromePairs(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** palindromePairs(char** words, int wordsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> PalindromePairs(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number[][]}\n */\nvar palindromePairs = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function palindromePairs(words: string[]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer[][]\n     */\n    function palindromePairs($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func palindromePairs(_ words: [String]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun palindromePairs(words: Array<String>): List<List<Int>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> palindromePairs(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func palindromePairs(words []string) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer[][]}\ndef palindrome_pairs(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def palindromePairs(words: Array[String]): List[List[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn palindrome_pairs(words: Vec<String>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (palindrome-pairs words)\n  (-> (listof string?) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec palindrome_pairs(Words :: [unicode:unicode_binary()]) -> [[integer()]].\npalindrome_pairs(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec palindrome_pairs(words :: [String.t]) :: [[integer]]\n  def palindrome_pairs(words) do\n    \n  end\nend"}}}