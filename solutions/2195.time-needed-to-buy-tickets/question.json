{"question_id": "2195", "problem_slug": "time-needed-to-buy-tickets", "problem_title": "Time Needed to Buy Tickets", "content": "There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.\nYou are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].\nEach person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.\nReturn the time taken for the person initially at position k (0-indexed) to finish buying tickets.\n \nExample 1:\n\nInput: tickets = [2,3,2], k = 2\nOutput: 6\nExplanation:\n\nThe queue starts as [2,3,2], where the kth person is underlined.\nAfter the person at the front has bought a ticket, the queue becomes [3,2,1] at 1 second.\nContinuing this process, the queue becomes [2,1,2] at 2 seconds.\nContinuing this process, the queue becomes [1,2,1] at 3 seconds.\nContinuing this process, the queue becomes [2,1] at 4 seconds. Note: the person at the front left the queue.\nContinuing this process, the queue becomes [1,1] at 5 seconds.\nContinuing this process, the queue becomes [1] at 6 seconds. The kth person has bought all their tickets, so return 6.\n\n\nExample 2:\n\nInput: tickets = [5,1,1,1], k = 0\nOutput: 8\nExplanation:\n\nThe queue starts as [5,1,1,1], where the kth person is underlined.\nAfter the person at the front has bought a ticket, the queue becomes [1,1,1,4] at 1 second.\nContinuing this process for 3 seconds, the queue becomes [4] at 4 seconds.\nContinuing this process for 4 seconds, the queue becomes [] at 8 seconds. The kth person has bought all their tickets, so return 8.\n\n\n \nConstraints:\n\nn == tickets.length\n1 <= n <= 100\n1 <= tickets[i] <= 100\n0 <= k < n\n\n", "hints": ["Loop through the line of people and decrement the number of tickets for each to buy one at a time as if simulating the line moving forward. Keep track of how many tickets have been sold up until person k has no more tickets to buy.", "Remember that those who have no more tickets to buy will leave the line."], "exampleTestcases": "[2,3,2]\n2\n[5,1,1,1]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int timeRequiredToBuy(vector<int>& tickets, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int timeRequiredToBuy(int[] tickets, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def timeRequiredToBuy(self, tickets, k):\n        \"\"\"\n        :type tickets: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int timeRequiredToBuy(int* tickets, int ticketsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TimeRequiredToBuy(int[] tickets, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} tickets\n * @param {number} k\n * @return {number}\n */\nvar timeRequiredToBuy = function(tickets, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function timeRequiredToBuy(tickets: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $tickets\n     * @param Integer $k\n     * @return Integer\n     */\n    function timeRequiredToBuy($tickets, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func timeRequiredToBuy(_ tickets: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun timeRequiredToBuy(tickets: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int timeRequiredToBuy(List<int> tickets, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func timeRequiredToBuy(tickets []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} tickets\n# @param {Integer} k\n# @return {Integer}\ndef time_required_to_buy(tickets, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def timeRequiredToBuy(tickets: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn time_required_to_buy(tickets: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (time-required-to-buy tickets k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec time_required_to_buy(Tickets :: [integer()], K :: integer()) -> integer().\ntime_required_to_buy(Tickets, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec time_required_to_buy(tickets :: [integer], k :: integer) :: integer\n  def time_required_to_buy(tickets, k) do\n    \n  end\nend"}}}