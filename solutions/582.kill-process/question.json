{"question_id": "582", "problem_slug": "kill-process", "problem_title": "Kill Process", "content": "You have n processes forming a rooted tree structure. You are given two integer arrays pid and ppid, where pid[i] is the ID of the ith process and ppid[i] is the ID of the ith process's parent process.\nEach process has only one parent process but may have multiple children processes. Only one process has ppid[i] = 0, which means this process has no parent process (the root of the tree).\nWhen a process is killed, all of its children processes will also be killed.\nGiven an integer kill representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.\n \nExample 1:\n\n\nInput: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5\nOutput: [5,10]\nExplanation: The processes colored in red are the processes that should be killed.\n\nExample 2:\n\nInput: pid = [1], ppid = [0], kill = 1\nOutput: [1]\n\n \nConstraints:\n\nn == pid.length\nn == ppid.length\n1 <= n <= 5 * 104\n1 <= pid[i] <= 5 * 104\n0 <= ppid[i] <= 5 * 104\nOnly one process has no parent.\nAll the values of pid are unique.\nkill is guaranteed to be in pid.\n\n", "hints": [], "exampleTestcases": "[1,3,10,5]\n[3,0,5,3]\n5\n[1]\n[0]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> killProcess(vector<int>& pid, vector<int>& ppid, int kill) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def killProcess(self, pid, ppid, kill):\n        \"\"\"\n        :type pid: List[int]\n        :type ppid: List[int]\n        :type kill: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* killProcess(int* pid, int pidSize, int* ppid, int ppidSize, int kill, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> KillProcess(IList<int> pid, IList<int> ppid, int kill) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} pid\n * @param {number[]} ppid\n * @param {number} kill\n * @return {number[]}\n */\nvar killProcess = function(pid, ppid, kill) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function killProcess(pid: number[], ppid: number[], kill: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $pid\n     * @param Integer[] $ppid\n     * @param Integer $kill\n     * @return Integer[]\n     */\n    function killProcess($pid, $ppid, $kill) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func killProcess(_ pid: [Int], _ ppid: [Int], _ kill: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun killProcess(pid: List<Int>, ppid: List<Int>, kill: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> killProcess(List<int> pid, List<int> ppid, int kill) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func killProcess(pid []int, ppid []int, kill int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} pid\n# @param {Integer[]} ppid\n# @param {Integer} kill\n# @return {Integer[]}\ndef kill_process(pid, ppid, kill)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def killProcess(pid: List[Int], ppid: List[Int], kill: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn kill_process(pid: Vec<i32>, ppid: Vec<i32>, kill: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (kill-process pid ppid kill)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec kill_process(Pid :: [integer()], Ppid :: [integer()], Kill :: integer()) -> [integer()].\nkill_process(Pid, Ppid, Kill) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec kill_process(pid :: [integer], ppid :: [integer], kill :: integer) :: [integer]\n  def kill_process(pid, ppid, kill) do\n    \n  end\nend"}}}