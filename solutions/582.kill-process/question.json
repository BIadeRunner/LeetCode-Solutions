{"questionId": "582", "acRate": 69.72230093510909, "difficulty": "Medium", "freqBar": 61.27296262476089, "frontendQuestionId": "582", "paidOnly": true, "status": "ac", "title": "Kill Process", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}], "titleSlug": "kill-process", "content": "<p>You have <code>n</code> processes forming a rooted tree structure. You are given two integer arrays <code>pid</code> and <code>ppid</code>, where <code>pid[i]</code> is the ID of the <code>i<sup>th</sup></code> process and <code>ppid[i]</code> is the ID of the <code>i<sup>th</sup></code> process&#39;s parent process.</p>\n\n<p>Each process has only <strong>one parent process</strong> but may have multiple children processes. Only one process has <code>ppid[i] = 0</code>, which means this process has <strong>no parent process</strong> (the root of the tree).</p>\n\n<p>When a process is <strong>killed</strong>, all of its children processes will also be killed.</p>\n\n<p>Given an integer <code>kill</code> representing the ID of a process you want to kill, return <em>a list of the IDs of the processes that will be killed. You may return the answer in <strong>any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/24/ptree.jpg\" style=\"width: 207px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong>&nbsp;The processes colored in red are the processes that should be killed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pid = [1], ppid = [0], kill = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == pid.length</code></li>\n\t<li><code>n == ppid.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= pid[i] &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ppid[i] &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li>Only one process has no parent.</li>\n\t<li>All the values of <code>pid</code> are <strong>unique</strong>.</li>\n\t<li><code>kill</code> is <strong>guaranteed</strong> to be in <code>pid</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,3,10,5]\n[3,0,5,3]\n5\n[1]\n[0]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> killProcess(vector<int>& pid, vector<int>& ppid, int kill) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def killProcess(self, pid, ppid, kill):\n        \"\"\"\n        :type pid: List[int]\n        :type ppid: List[int]\n        :type kill: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* killProcess(int* pid, int pidSize, int* ppid, int ppidSize, int kill, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> KillProcess(IList<int> pid, IList<int> ppid, int kill) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} pid\n * @param {number[]} ppid\n * @param {number} kill\n * @return {number[]}\n */\nvar killProcess = function(pid, ppid, kill) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function killProcess(pid: number[], ppid: number[], kill: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $pid\n     * @param Integer[] $ppid\n     * @param Integer $kill\n     * @return Integer[]\n     */\n    function killProcess($pid, $ppid, $kill) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func killProcess(_ pid: [Int], _ ppid: [Int], _ kill: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun killProcess(pid: List<Int>, ppid: List<Int>, kill: Int): List<Int> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> killProcess(List<int> pid, List<int> ppid, int kill) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func killProcess(pid []int, ppid []int, kill int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} pid\n# @param {Integer[]} ppid\n# @param {Integer} kill\n# @return {Integer[]}\ndef kill_process(pid, ppid, kill)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def killProcess(pid: List[Int], ppid: List[Int], kill: Int): List[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kill_process(pid: Vec<i32>, ppid: Vec<i32>, kill: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (kill-process pid ppid kill)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec kill_process(Pid :: [integer()], Ppid :: [integer()], Kill :: integer()) -> [integer()].\nkill_process(Pid, Ppid, Kill) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec kill_process(pid :: [integer], ppid :: [integer], kill :: integer) :: [integer]\n  def kill_process(pid, ppid, kill) do\n    \n  end\nend"}], "similarQuestionList": []}