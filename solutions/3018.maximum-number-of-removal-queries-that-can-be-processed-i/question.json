{"questionId": "3323", "acRate": 44.46546830652791, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3018", "paidOnly": true, "status": "ac", "title": "Maximum Number of Removal Queries That Can Be Processed I", "titleSlug": "maximum-number-of-removal-queries-that-can-be-processed-i", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> and a <strong>0-indexed</strong> array <code>queries</code>.</p>\n\n<p>You can do the following operation at the beginning <strong>at most once</strong>:</p>\n\n<ul>\n\t<li>Replace <code>nums</code> with a <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code>.</li>\n</ul>\n\n<p>We start processing queries in the given order; for each query, we do the following:</p>\n\n<ul>\n\t<li>If the first <strong>and</strong> the last element of <code>nums</code> is <strong>less than</strong> <code>queries[i]</code>, the processing of queries <strong>ends</strong>.</li>\n\t<li>Otherwise, we choose either the first <strong>or</strong> the last element of <code>nums</code> if it is <strong>greater than or equal to</strong> <code>queries[i]</code>, and we <strong>remove</strong> the chosen element from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of queries that can be processed by doing the operation optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], queries = [1,2,3,4,6]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We don&#39;t do any operation and process the queries as follows:\n1- We choose and remove nums[0] since 1 &lt;= 1, then nums becomes [2,3,4,5].\n2- We choose and remove nums[0] since 2 &lt;= 2, then nums becomes [3,4,5].\n3- We choose and remove nums[0] since 3 &lt;= 3, then nums becomes [4,5].\n4- We choose and remove nums[0] since 4 &lt;= 4, then nums becomes [5].\n5- We can not choose any elements from nums since they are not greater than or equal to 5.\nHence, the answer is 4.\nIt can be shown that we can&#39;t process more than 4 queries.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2], queries = [2,2,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We don&#39;t do any operation and process the queries as follows:\n1- We choose and remove nums[0] since 2 &lt;= 2, then nums becomes [3,2].\n2- We choose and remove nums[1] since 2 &lt;= 2, then nums becomes [3].\n3- We choose and remove nums[0] since 3 &lt;= 3, then nums becomes [].\nHence, the answer is 3.\nIt can be shown that we can&#39;t process more than 3 queries.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,3], queries = [4,3,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> First we replace nums with the subsequence of nums [4,3].\nThen we can process the queries as follows:\n1- We choose and remove nums[0] since 4 &lt;= 4, then nums becomes [3].\n2- We choose and remove nums[0] since 3 &lt;= 3, then nums becomes [].\n3- We can not process any more queries since nums is empty.\nHence, the answer is 2.\nIt can be shown that we can&#39;t process more than 2 queries.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Think of dynamic programming.", "The definition of <code>dp</code>Â is a little unusual. Try to think more.", "Let <code>dp[l][r]</code> be the maximum number of queries we can process if we want <code>a[l], a[l + 1], ..., a[r - 1]</code> not to be removed after processing <code>dp[l][r]</code> queries.", "So <code>dp[0][n] = 0</code> since we can not remove anything.", "The answer would be <code>max(dp[i][i])</code>."], "exampleTestcases": "[1,2,3,4,5]\n[1,2,3,4,6]\n[2,3,2]\n[2,2,3]\n[3,4,3]\n[4,3,2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumProcessableQueries(vector<int>& nums, vector<int>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumProcessableQueries(int[] nums, int[] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumProcessableQueries(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumProcessableQueries(self, nums: List[int], queries: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumProcessableQueries(int* nums, int numsSize, int* queries, int queriesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumProcessableQueries(int[] nums, int[] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @return {number}\n */\nvar maximumProcessableQueries = function(nums, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumProcessableQueries(nums: number[], queries: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @return Integer\n     */\n    function maximumProcessableQueries($nums, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumProcessableQueries(_ nums: [Int], _ queries: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumProcessableQueries(nums: IntArray, queries: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumProcessableQueries(List<int> nums, List<int> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumProcessableQueries(nums []int, queries []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @return {Integer}\ndef maximum_processable_queries(nums, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumProcessableQueries(nums: Array[Int], queries: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_processable_queries(nums: Vec<i32>, queries: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-processable-queries nums queries)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_processable_queries(Nums :: [integer()], Queries :: [integer()]) -> integer().\nmaximum_processable_queries(Nums, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_processable_queries(nums :: [integer], queries :: [integer]) :: integer\n  def maximum_processable_queries(nums, queries) do\n    \n  end\nend"}], "similarQuestionList": []}