{"questionId": "922", "acRate": 50.84700519019897, "difficulty": "Medium", "freqBar": 47.27851104566007, "frontendQuestionId": "886", "paidOnly": false, "status": "ac", "title": "Possible Bipartition", "topicTags": [{"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "possible-bipartition", "content": "<p>We want to split a group of <code>n</code> people (labeled from <code>1</code> to <code>n</code>) into two groups of <strong>any size</strong>. Each person may dislike some other people, and they should not go into the same group.</p>\n\n<p>Given the integer <code>n</code> and the array <code>dislikes</code> where <code>dislikes[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that the person labeled <code>a<sub>i</sub></code> does not like the person labeled <code>b<sub>i</sub></code>, return <code>true</code> <em>if it is possible to split everyone into two groups in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The first group has [1,4], and the second group has [2,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We need at least 3 groups to divide them. We cannot put them in two groups.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>dislikes[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= n</code></li>\n\t<li>All the pairs of <code>dislikes</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "4\n[[1,2],[1,3],[2,4]]\n3\n[[1,2],[1,3],[2,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean possibleBipartition(int n, int[][] dislikes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def possibleBipartition(self, n, dislikes):\n        \"\"\"\n        :type n: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool possibleBipartition(int n, int** dislikes, int dislikesSize, int* dislikesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool PossibleBipartition(int n, int[][] dislikes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} dislikes\n * @return {boolean}\n */\nvar possibleBipartition = function(n, dislikes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function possibleBipartition(n: number, dislikes: number[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $dislikes\n     * @return Boolean\n     */\n    function possibleBipartition($n, $dislikes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func possibleBipartition(_ n: Int, _ dislikes: [[Int]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun possibleBipartition(n: Int, dislikes: Array<IntArray>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool possibleBipartition(int n, List<List<int>> dislikes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func possibleBipartition(n int, dislikes [][]int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def possibleBipartition(n: Int, dislikes: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn possible_bipartition(n: i32, dislikes: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (possible-bipartition n dislikes)\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec possible_bipartition(N :: integer(), Dislikes :: [[integer()]]) -> boolean().\npossible_bipartition(N, Dislikes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec possible_bipartition(n :: integer, dislikes :: [[integer]]) :: boolean\n  def possible_bipartition(n, dislikes) do\n    \n  end\nend"}], "similarQuestionList": []}