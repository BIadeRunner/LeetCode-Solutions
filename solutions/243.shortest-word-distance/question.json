{"questionId": "243", "acRate": 65.53511303153947, "difficulty": "Easy", "freqBar": 53.366470569899526, "frontendQuestionId": "243", "paidOnly": true, "status": "ac", "title": "Shortest Word Distance", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "shortest-word-distance", "content": "<p>Given an array of strings <code>wordsDict</code> and two different strings that already exist in the array <code>word1</code> and <code>word2</code>, return <em>the shortest distance between these two words in the list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;coding&quot;, word2 = &quot;practice&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;makes&quot;, word2 = &quot;coding&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= wordsDict.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsDict[i].length &lt;= 10</code></li>\n\t<li><code>wordsDict[i]</code> consists of lowercase English letters.</li>\n\t<li><code>word1</code> and <code>word2</code> are in <code>wordsDict</code>.</li>\n\t<li><code>word1 != word2</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"coding\"\n\"practice\"\n[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"makes\"\n\"coding\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestDistance(vector<string>& wordsDict, string word1, string word2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shortestDistance(String[] wordsDict, String word1, String word2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestDistance(self, wordsDict, word1, word2):\n        \"\"\"\n        :type wordsDict: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int shortestDistance(char** wordsDict, int wordsDictSize, char* word1, char* word2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShortestDistance(string[] wordsDict, string word1, string word2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} wordsDict\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar shortestDistance = function(wordsDict, word1, word2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestDistance(wordsDict: string[], word1: string, word2: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $wordsDict\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function shortestDistance($wordsDict, $word1, $word2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestDistance(_ wordsDict: [String], _ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestDistance(wordsDict: Array<String>, word1: String, word2: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int shortestDistance(List<String> wordsDict, String word1, String word2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestDistance(wordsDict []string, word1 string, word2 string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words_dict\n# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef shortest_distance(words_dict, word1, word2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestDistance(wordsDict: Array[String], word1: String, word2: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_distance(words_dict: Vec<String>, word1: String, word2: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (shortest-distance wordsDict word1 word2)\n  (-> (listof string?) string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec shortest_distance(WordsDict :: [unicode:unicode_binary()], Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nshortest_distance(WordsDict, Word1, Word2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_distance(words_dict :: [String.t], word1 :: String.t, word2 :: String.t) :: integer\n  def shortest_distance(words_dict, word1, word2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "shortest-word-distance-ii", "title": "Shortest Word Distance II", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "shortest-word-distance-iii", "title": "Shortest Word Distance III", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "find-all-k-distant-indices-in-an-array", "title": "Find All K-Distant Indices in an Array", "isPaidOnly": false}]}