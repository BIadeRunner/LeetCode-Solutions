{"question_id": "243", "problem_slug": "shortest-word-distance", "problem_title": "Shortest Word Distance", "content": "Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\n \nExample 1:\n\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\"\nOutput: 3\n\nExample 2:\n\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"\nOutput: 1\n\n \nConstraints:\n\n2 <= wordsDict.length <= 3 * 104\n1 <= wordsDict[i].length <= 10\nwordsDict[i] consists of lowercase English letters.\nword1 and word2 are in wordsDict.\nword1 != word2\n\n", "hints": [], "exampleTestcases": "[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"coding\"\n\"practice\"\n[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"makes\"\n\"coding\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestDistance(vector<string>& wordsDict, string word1, string word2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shortestDistance(String[] wordsDict, String word1, String word2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestDistance(self, wordsDict, word1, word2):\n        \"\"\"\n        :type wordsDict: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shortestDistance(char** wordsDict, int wordsDictSize, char* word1, char* word2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShortestDistance(string[] wordsDict, string word1, string word2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} wordsDict\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar shortestDistance = function(wordsDict, word1, word2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestDistance(wordsDict: string[], word1: string, word2: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $wordsDict\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function shortestDistance($wordsDict, $word1, $word2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestDistance(_ wordsDict: [String], _ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestDistance(wordsDict: Array<String>, word1: String, word2: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shortestDistance(List<String> wordsDict, String word1, String word2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestDistance(wordsDict []string, word1 string, word2 string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words_dict\n# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef shortest_distance(words_dict, word1, word2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestDistance(wordsDict: Array[String], word1: String, word2: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_distance(words_dict: Vec<String>, word1: String, word2: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-distance wordsDict word1 word2)\n  (-> (listof string?) string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_distance(WordsDict :: [unicode:unicode_binary()], Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nshortest_distance(WordsDict, Word1, Word2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_distance(words_dict :: [String.t], word1 :: String.t, word2 :: String.t) :: integer\n  def shortest_distance(words_dict, word1, word2) do\n    \n  end\nend"}}}