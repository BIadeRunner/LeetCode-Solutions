{"question_id": "872", "problem_slug": "split-array-into-fibonacci-sequence", "problem_title": "Split Array into Fibonacci Sequence", "content": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n\n0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\nf.length >= 3, and\nf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\n \nExample 1:\n\nInput: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.\n\nExample 2:\n\nInput: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.\n\nExample 3:\n\nInput: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n\n \nConstraints:\n\n1 <= num.length <= 200\nnum contains only digits.\n\n", "hints": [], "exampleTestcases": "\"1101111\"\n\"112358130\"\n\"0123\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> splitIntoFibonacci(string num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> splitIntoFibonacci(String num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def splitIntoFibonacci(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* splitIntoFibonacci(char* num, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> SplitIntoFibonacci(string num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {number[]}\n */\nvar splitIntoFibonacci = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function splitIntoFibonacci(num: string): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Integer[]\n     */\n    function splitIntoFibonacci($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func splitIntoFibonacci(_ num: String) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun splitIntoFibonacci(num: String): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> splitIntoFibonacci(String num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func splitIntoFibonacci(num string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num\n# @return {Integer[]}\ndef split_into_fibonacci(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def splitIntoFibonacci(num: String): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn split_into_fibonacci(num: String) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (split-into-fibonacci num)\n  (-> string? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec split_into_fibonacci(Num :: unicode:unicode_binary()) -> [integer()].\nsplit_into_fibonacci(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_into_fibonacci(num :: String.t) :: [integer]\n  def split_into_fibonacci(num) do\n    \n  end\nend"}}}