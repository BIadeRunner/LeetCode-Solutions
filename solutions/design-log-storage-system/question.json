{"questionId": "635", "acRate": 59.683292687000964, "difficulty": "Medium", "freqBar": 53.366470569899526, "frontendQuestionId": "635", "paidOnly": true, "status": "ac", "title": "Design Log Storage System", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "titleSlug": "design-log-storage-system", "content": "<p>You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: <code>Year:Month:Day:Hour:Minute:Second</code>, for example, <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal numbers.</p>\n\n<p>Implement the <code>LogSystem</code> class:</p>\n\n<ul>\n\t<li><code>LogSystem()</code> Initializes the <code>LogSystem</code><b> </b>object.</li>\n\t<li><code>void put(int id, string timestamp)</code> Stores the given log <code>(id, timestamp)</code> in your storage system.</li>\n\t<li><code>int[] retrieve(string start, string end, string granularity)</code> Returns the IDs of the logs whose timestamps are within the range from <code>start</code> to <code>end</code> inclusive. <code>start</code> and <code>end</code> all have the same format as <code>timestamp</code>, and <code>granularity</code> means how precise the range should be (i.e. to the exact <code>Day</code>, <code>Minute</code>, etc.). For example, <code>start = &quot;2017:01:01:23:59:59&quot;</code>, <code>end = &quot;2017:01:02:23:59:59&quot;</code>, and <code>granularity = &quot;Day&quot;</code> means that we need to find the logs within the inclusive range from <strong>Jan. 1st 2017</strong> to <strong>Jan. 2nd 2017</strong>, and the <code>Hour</code>, <code>Minute</code>, and <code>Second</code> for each log entry can be ignored.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LogSystem&quot;, &quot;put&quot;, &quot;put&quot;, &quot;put&quot;, &quot;retrieve&quot;, &quot;retrieve&quot;]\n[[], [1, &quot;2017:01:01:23:59:59&quot;], [2, &quot;2017:01:01:22:59:59&quot;], [3, &quot;2016:01:01:00:00:00&quot;], [&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Year&quot;], [&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Hour&quot;]]\n<strong>Output</strong>\n[null, null, null, null, [3, 2, 1], [2, 1]]\n\n<strong>Explanation</strong>\nLogSystem logSystem = new LogSystem();\nlogSystem.put(1, &quot;2017:01:01:23:59:59&quot;);\nlogSystem.put(2, &quot;2017:01:01:22:59:59&quot;);\nlogSystem.put(3, &quot;2016:01:01:00:00:00&quot;);\n\n// return [3,2,1], because you need to return all logs between 2016 and 2017.\nlogSystem.retrieve(&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Year&quot;);\n\n// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.\n// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.\nlogSystem.retrieve(&quot;2016:01:01:01:01:01&quot;, &quot;2017:01:01:23:00:00&quot;, &quot;Hour&quot;);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= id &lt;= 500</code></li>\n\t<li><code>2000 &lt;= Year &lt;= 2017</code></li>\n\t<li><code>1 &lt;= Month &lt;= 12</code></li>\n\t<li><code>1 &lt;= Day &lt;= 31</code></li>\n\t<li><code>0 &lt;= Hour &lt;= 23</code></li>\n\t<li><code>0 &lt;= Minute, Second &lt;= 59</code></li>\n\t<li><code>granularity</code> is one of the values <code>[&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Hour&quot;, &quot;Minute&quot;, &quot;Second&quot;]</code>.</li>\n\t<li>At most <code>500</code> calls will be made to <code>put</code> and <code>retrieve</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"LogSystem\",\"put\",\"put\",\"put\",\"retrieve\",\"retrieve\"]\n[[],[1,\"2017:01:01:23:59:59\"],[2,\"2017:01:01:22:59:59\"],[3,\"2016:01:01:00:00:00\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class LogSystem {\npublic:\n    LogSystem() {\n        \n    }\n    \n    void put(int id, string timestamp) {\n        \n    }\n    \n    vector<int> retrieve(string start, string end, string granularity) {\n        \n    }\n};\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem* obj = new LogSystem();\n * obj->put(id,timestamp);\n * vector<int> param_2 = obj->retrieve(start,end,granularity);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class LogSystem {\n\n    public LogSystem() {\n        \n    }\n    \n    public void put(int id, String timestamp) {\n        \n    }\n    \n    public List<Integer> retrieve(String start, String end, String granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = new LogSystem();\n * obj.put(id,timestamp);\n * List<Integer> param_2 = obj.retrieve(start,end,granularity);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class LogSystem(object):\n\n    def __init__(self):\n        \n\n    def put(self, id, timestamp):\n        \"\"\"\n        :type id: int\n        :type timestamp: str\n        :rtype: None\n        \"\"\"\n        \n\n    def retrieve(self, start, end, granularity):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :type granularity: str\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem()\n# obj.put(id,timestamp)\n# param_2 = obj.retrieve(start,end,granularity)"}, {"lang": "Python3", "langSlug": "python3", "code": "class LogSystem:\n\n    def __init__(self):\n        \n\n    def put(self, id: int, timestamp: str) -> None:\n        \n\n    def retrieve(self, start: str, end: str, granularity: str) -> List[int]:\n        \n\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem()\n# obj.put(id,timestamp)\n# param_2 = obj.retrieve(start,end,granularity)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} LogSystem;\n\n\nLogSystem* logSystemCreate() {\n    \n}\n\nvoid logSystemPut(LogSystem* obj, int id, char* timestamp) {\n    \n}\n\nint* logSystemRetrieve(LogSystem* obj, char* start, char* end, char* granularity, int* retSize) {\n    \n}\n\nvoid logSystemFree(LogSystem* obj) {\n    \n}\n\n/**\n * Your LogSystem struct will be instantiated and called as such:\n * LogSystem* obj = logSystemCreate();\n * logSystemPut(obj, id, timestamp);\n \n * int* param_2 = logSystemRetrieve(obj, start, end, granularity, retSize);\n \n * logSystemFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class LogSystem {\n\n    public LogSystem() {\n        \n    }\n    \n    public void Put(int id, string timestamp) {\n        \n    }\n    \n    public IList<int> Retrieve(string start, string end, string granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = new LogSystem();\n * obj.Put(id,timestamp);\n * IList<int> param_2 = obj.Retrieve(start,end,granularity);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar LogSystem = function() {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} timestamp\n * @return {void}\n */\nLogSystem.prototype.put = function(id, timestamp) {\n    \n};\n\n/** \n * @param {string} start \n * @param {string} end \n * @param {string} granularity\n * @return {number[]}\n */\nLogSystem.prototype.retrieve = function(start, end, granularity) {\n    \n};\n\n/** \n * Your LogSystem object will be instantiated and called as such:\n * var obj = new LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class LogSystem {\n    constructor() {\n        \n    }\n\n    put(id: number, timestamp: string): void {\n        \n    }\n\n    retrieve(start: string, end: string, granularity: string): number[] {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = new LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class LogSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $timestamp\n     * @return NULL\n     */\n    function put($id, $timestamp) {\n        \n    }\n  \n    /**\n     * @param String $start\n     * @param String $end\n     * @param String $granularity\n     * @return Integer[]\n     */\n    function retrieve($start, $end, $granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * $obj = LogSystem();\n * $obj->put($id, $timestamp);\n * $ret_2 = $obj->retrieve($start, $end, $granularity);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass LogSystem {\n\n    init() {\n        \n    }\n    \n    func put(_ id: Int, _ timestamp: String) {\n        \n    }\n    \n    func retrieve(_ start: String, _ end: String, _ granularity: String) -> [Int] {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * let obj = LogSystem()\n * obj.put(id, timestamp)\n * let ret_2: [Int] = obj.retrieve(start, end, granularity)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class LogSystem() {\n\n    fun put(id: Int, timestamp: String) {\n        \n    }\n\n    fun retrieve(start: String, end: String, granularity: String): List<Int> {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class LogSystem {\n\n  LogSystem() {\n    \n  }\n  \n  void put(int id, String timestamp) {\n    \n  }\n  \n  List<int> retrieve(String start, String end, String granularity) {\n    \n  }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = LogSystem();\n * obj.put(id,timestamp);\n * List<int> param2 = obj.retrieve(start,end,granularity);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type LogSystem struct {\n    \n}\n\n\nfunc Constructor() LogSystem {\n    \n}\n\n\nfunc (this *LogSystem) Put(id int, timestamp string)  {\n    \n}\n\n\nfunc (this *LogSystem) Retrieve(start string, end string, granularity string) []int {\n    \n}\n\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Put(id,timestamp);\n * param_2 := obj.Retrieve(start,end,granularity);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class LogSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type timestamp: String\n    :rtype: Void\n=end\n    def put(id, timestamp)\n        \n    end\n\n\n=begin\n    :type start: String\n    :type end: String\n    :type granularity: String\n    :rtype: Integer[]\n=end\n    def retrieve(start, end, granularity)\n        \n    end\n\n\nend\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem.new()\n# obj.put(id, timestamp)\n# param_2 = obj.retrieve(start, end, granularity)"}, {"lang": "Scala", "langSlug": "scala", "code": "class LogSystem() {\n\n    def put(id: Int, timestamp: String): Unit = {\n        \n    }\n\n    def retrieve(start: String, end: String, granularity: String): List[Int] = {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * val obj = new LogSystem()\n * obj.put(id,timestamp)\n * val param_2 = obj.retrieve(start,end,granularity)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct LogSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LogSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn put(&self, id: i32, timestamp: String) {\n        \n    }\n    \n    fn retrieve(&self, start: String, end: String, granularity: String) -> Vec<i32> {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * let obj = LogSystem::new();\n * obj.put(id, timestamp);\n * let ret_2: Vec<i32> = obj.retrieve(start, end, granularity);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define log-system%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; put : exact-integer? string? -> void?\n    (define/public (put id timestamp)\n      )\n    ; retrieve : string? string? string? -> (listof exact-integer?)\n    (define/public (retrieve start end granularity)\n      )))\n\n;; Your log-system% object will be instantiated and called as such:\n;; (define obj (new log-system%))\n;; (send obj put id timestamp)\n;; (define param_2 (send obj retrieve start end granularity))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec log_system_init_() -> any().\nlog_system_init_() ->\n  .\n\n-spec log_system_put(Id :: integer(), Timestamp :: unicode:unicode_binary()) -> any().\nlog_system_put(Id, Timestamp) ->\n  .\n\n-spec log_system_retrieve(Start :: unicode:unicode_binary(), End :: unicode:unicode_binary(), Granularity :: unicode:unicode_binary()) -> [integer()].\nlog_system_retrieve(Start, End, Granularity) ->\n  .\n\n\n%% Your functions will be called as such:\n%% log_system_init_(),\n%% log_system_put(Id, Timestamp),\n%% Param_2 = log_system_retrieve(Start, End, Granularity),\n\n%% log_system_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule LogSystem do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec put(id :: integer, timestamp :: String.t) :: any\n  def put(id, timestamp) do\n    \n  end\n\n  @spec retrieve(start :: String.t, end :: String.t, granularity :: String.t) :: [integer]\n  def retrieve(start, end, granularity) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# LogSystem.init_()\n# LogSystem.put(id, timestamp)\n# param_2 = LogSystem.retrieve(start, end, granularity)\n\n# LogSystem.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "design-in-memory-file-system", "title": "Design In-Memory File System", "isPaidOnly": true}]}