{"question_id": "1885", "problem_slug": "count-number-of-homogenous-substrings", "problem_title": "Count Number of Homogenous Substrings", "content": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"abbcccaa\"\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\"aa\"  appears 1 time.\n\"b\"   appears 2 times.\n\"bb\"  appears 1 time.\n\"c\"   appears 3 times.\n\"cc\"  appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\nExample 2:\n\nInput: s = \"xy\"\nOutput: 2\nExplanation: The homogenous substrings are \"x\" and \"y\".\nExample 3:\n\nInput: s = \"zzzzz\"\nOutput: 15\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase letters.\n\n", "hints": ["A string of only 'a's of length k contains k + 1 choose 2 homogenous substrings.", "Split the string into substrings where each substring contains only one letter, and apply the formula on each substring's length."], "exampleTestcases": "\"abbcccaa\"\n\"xy\"\n\"zzzzz\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countHomogenous(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countHomogenous(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countHomogenous(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countHomogenous(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint countHomogenous(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountHomogenous(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countHomogenous = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countHomogenous(s: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countHomogenous($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countHomogenous(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countHomogenous(s: String): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func countHomogenous(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_homogenous(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countHomogenous(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_homogenous(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-homogenous s)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_homogenous(S :: unicode:unicode_binary()) -> integer().\ncount_homogenous(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_homogenous(s :: String.t) :: integer\n  def count_homogenous(s) do\n    \n  end\nend"}}}