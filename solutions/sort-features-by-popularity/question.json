{"questionId": "1919", "acRate": 65.94840982078111, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1772", "paidOnly": true, "status": "ac", "title": "Sort Features by Popularity", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "sort-features-by-popularity", "content": "<p>You are given a string array <code>features</code> where <code>features[i]</code> is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array <code>responses</code>, where each <code>responses[i]</code> is a string containing space-separated words.</p>\n\n<p>The <strong>popularity</strong> of a feature is the number of <code>responses[i]</code> that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in <code>features</code>. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.</p>\n\n<p>Return <em>the features in sorted order.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> features = [&quot;cooler&quot;,&quot;lock&quot;,&quot;touch&quot;], responses = [&quot;i like cooler cooler&quot;,&quot;lock touch cool&quot;,&quot;locker like touch&quot;]\n<strong>Output:</strong> [&quot;touch&quot;,&quot;cooler&quot;,&quot;lock&quot;]\n<strong>Explanation:</strong> appearances(&quot;cooler&quot;) = 1, appearances(&quot;lock&quot;) = 1, appearances(&quot;touch&quot;) = 2. Since &quot;cooler&quot; and &quot;lock&quot; both had 1 appearance, &quot;cooler&quot; comes first because &quot;cooler&quot; came first in the features array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> features = [&quot;a&quot;,&quot;aa&quot;,&quot;b&quot;,&quot;c&quot;], responses = [&quot;a&quot;,&quot;a aa&quot;,&quot;a a a a a&quot;,&quot;b a&quot;]\n<strong>Output:</strong> [&quot;a&quot;,&quot;aa&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= features.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= features[i].length &lt;= 10</code></li>\n\t<li><code>features</code> contains no duplicates.</li>\n\t<li><code>features[i]</code> consists of lowercase letters.</li>\n\t<li><code>1 &lt;= responses.length &lt;= 10<sup>2</sup></code></li>\n\t<li><code>1 &lt;= responses[i].length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>responses[i]</code> consists of lowercase letters and spaces.</li>\n\t<li><code>responses[i]</code> contains no two consecutive spaces.</li>\n\t<li><code>responses[i]</code> has no leading or trailing spaces.</li>\n</ul>\n", "hints": ["Use a hash map to count the frequency of each word of each string.", "Use the map for sorting the features."], "exampleTestcases": "[\"cooler\",\"lock\",\"touch\"]\n[\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]\n[\"a\",\"aa\",\"b\",\"c\"]\n[\"a\",\"a aa\",\"a a a a a\",\"b a\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> sortFeatures(vector<string>& features, vector<string>& responses) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] sortFeatures(String[] features, String[] responses) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortFeatures(self, features, responses):\n        \"\"\"\n        :type features: List[str]\n        :type responses: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortFeatures(self, features: List[str], responses: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** sortFeatures(char** features, int featuresSize, char** responses, int responsesSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] SortFeatures(string[] features, string[] responses) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} features\n * @param {string[]} responses\n * @return {string[]}\n */\nvar sortFeatures = function(features, responses) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortFeatures(features: string[], responses: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $features\n     * @param String[] $responses\n     * @return String[]\n     */\n    function sortFeatures($features, $responses) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortFeatures(_ features: [String], _ responses: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortFeatures(features: Array<String>, responses: Array<String>): Array<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> sortFeatures(List<String> features, List<String> responses) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func sortFeatures(features []string, responses []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} features\n# @param {String[]} responses\n# @return {String[]}\ndef sort_features(features, responses)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortFeatures(features: Array[String], responses: Array[String]): Array[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_features(features: Vec<String>, responses: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (sort-features features responses)\n  (-> (listof string?) (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec sort_features(Features :: [unicode:unicode_binary()], Responses :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nsort_features(Features, Responses) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec sort_features(features :: [String.t], responses :: [String.t]) :: [String.t]\n  def sort_features(features, responses) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "top-k-frequent-elements", "title": "Top K Frequent Elements", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "top-k-frequent-words", "title": "Top K Frequent Words", "isPaidOnly": false}]}