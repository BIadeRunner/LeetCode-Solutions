{"question_id": "1223", "problem_slug": "graph-connectivity-with-threshold", "problem_title": "Graph Connectivity With Threshold", "content": "We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:\n\nx % z == 0,\ny % z == 0, and\nz > threshold.\n\nGiven the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them).\nReturn an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.\n \nExample 1:\n\n\nInput: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\nOutput: [false,false,true]\nExplanation: The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6\n\nExample 2:\n\n\nInput: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\nOutput: [true,true,true,true,true]\nExplanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n\nExample 3:\n\n\nInput: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\nOutput: [false,false,false,false,false]\nExplanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n\n \nConstraints:\n\n2 <= n <= 104\n0 <= threshold <= n\n1 <= queries.length <= 105\nqueries[i].length == 2\n1 <= ai, bi <= cities\nai != bi\n\n", "hints": ["How to build the graph of the cities?", "Connect city i with all its multiples 2*i, 3*i, ...", "Answer the queries using union-find data structure."], "exampleTestcases": "6\n2\n[[1,4],[2,5],[3,6]]\n6\n0\n[[4,5],[3,4],[3,2],[2,6],[1,3]]\n5\n1\n[[4,5],[4,5],[3,2],[2,3],[3,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def areConnected(self, n, threshold, queries):\n        \"\"\"\n        :type n: int\n        :type threshold: int\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* areConnected(int n, int threshold, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<bool> AreConnected(int n, int threshold, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} threshold\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar areConnected = function(n, threshold, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function areConnected(n: number, threshold: number, queries: number[][]): boolean[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $threshold\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function areConnected($n, $threshold, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func areConnected(_ n: Int, _ threshold: Int, _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun areConnected(n: Int, threshold: Int, queries: Array<IntArray>): List<Boolean> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<bool> areConnected(int n, int threshold, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func areConnected(n int, threshold int, queries [][]int) []bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} threshold\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef are_connected(n, threshold, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def areConnected(n: Int, threshold: Int, queries: Array[Array[Int]]): List[Boolean] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn are_connected(n: i32, threshold: i32, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (are-connected n threshold queries)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec are_connected(N :: integer(), Threshold :: integer(), Queries :: [[integer()]]) -> [boolean()].\nare_connected(N, Threshold, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_connected(n :: integer, threshold :: integer, queries :: [[integer]]) :: [boolean]\n  def are_connected(n, threshold, queries) do\n    \n  end\nend"}}}