{"questionId": "1223", "acRate": 47.49247616398169, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1627", "paidOnly": false, "status": "ac", "title": "Graph Connectivity With Threshold", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "graph-connectivity-with-threshold", "content": "<p>We have <code>n</code> cities labeled from <code>1</code> to <code>n</code>. Two different cities with labels <code>x</code> and <code>y</code> are directly connected by a bidirectional road if and only if <code>x</code> and <code>y</code> share a common divisor <strong>strictly greater</strong> than some <code>threshold</code>. More formally, cities with labels <code>x</code> and <code>y</code> have a road between them if there exists an integer <code>z</code> such that all of the following are true:</p>\n\n<ul>\n\t<li><code>x % z == 0</code>,</li>\n\t<li><code>y % z == 0</code>, and</li>\n\t<li><code>z &gt; threshold</code>.</li>\n</ul>\n\n<p>Given the two integers, <code>n</code> and <code>threshold</code>, and an array of <code>queries</code>, you must determine for each <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> if cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> are connected directly or indirectly.&nbsp;(i.e. there is some path between them).</p>\n\n<p>Return <em>an array </em><code>answer</code><em>, where </em><code>answer.length == queries.length</code><em> and </em><code>answer[i]</code><em> is </em><code>true</code><em> if for the </em><code>i<sup>th</sup></code><em> query, there is a path between </em><code>a<sub>i</sub></code><em> and </em><code>b<sub>i</sub></code><em>, or </em><code>answer[i]</code><em> is </em><code>false</code><em> if there is no path.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg\" style=\"width: 382px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\n<strong>Output:</strong> [false,false,true]\n<strong>Explanation:</strong> The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, <u>3</u>\n4:   1, 2, <u>4</u>\n5:   1, <u>5</u>\n6:   1, 2, <u>3</u>, <u>6</u>\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg\" style=\"width: 532px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\n<strong>Output:</strong> [true,true,true,true,true]\n<strong>Explanation:</strong> The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg\" style=\"width: 282px; height: 282px;\" />\n<pre>\n<strong>Input:</strong> n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\n<strong>Output:</strong> [false,false,false,false,false]\n<strong>Explanation:</strong> Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= threshold &lt;= n</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n</ul>\n", "hints": ["How to build the graph of the cities?", "Connect city i with all its multiples 2*i, 3*i, ...", "Answer the queries using union-find data structure."], "exampleTestcases": "6\n2\n[[1,4],[2,5],[3,6]]\n6\n0\n[[4,5],[3,4],[3,2],[2,6],[1,3]]\n5\n1\n[[4,5],[4,5],[3,2],[2,3],[3,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def areConnected(self, n, threshold, queries):\n        \"\"\"\n        :type n: int\n        :type threshold: int\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* areConnected(int n, int threshold, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<bool> AreConnected(int n, int threshold, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} threshold\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar areConnected = function(n, threshold, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function areConnected(n: number, threshold: number, queries: number[][]): boolean[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $threshold\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function areConnected($n, $threshold, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func areConnected(_ n: Int, _ threshold: Int, _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun areConnected(n: Int, threshold: Int, queries: Array<IntArray>): List<Boolean> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<bool> areConnected(int n, int threshold, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func areConnected(n int, threshold int, queries [][]int) []bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} threshold\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef are_connected(n, threshold, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def areConnected(n: Int, threshold: Int, queries: Array[Array[Int]]): List[Boolean] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn are_connected(n: i32, threshold: i32, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (are-connected n threshold queries)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec are_connected(N :: integer(), Threshold :: integer(), Queries :: [[integer()]]) -> [boolean()].\nare_connected(N, Threshold, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_connected(n :: integer, threshold :: integer, queries :: [[integer]]) :: [boolean]\n  def are_connected(n, threshold, queries) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "greatest-common-divisor-traversal", "title": "Greatest Common Divisor Traversal", "isPaidOnly": false}]}