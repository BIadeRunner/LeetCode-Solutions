{"question_id": "3460", "problem_slug": "count-the-number-of-inversions", "problem_title": "Count the Number of Inversions", "content": "You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.\nA pair of indices (i, j) from an integer array nums is called an inversion if:\n\ni < j and nums[i] > nums[j]\n\nReturn the number of permutations perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.\nSince the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 3, requirements = [[2,2],[0,0]]\nOutput: 2\nExplanation:\nThe two permutations are:\n\n[2, 0, 1]\n\nPrefix [2, 0, 1] has inversions (0, 1) and (0, 2).\nPrefix [2] has 0 inversions.\n\n\n[1, 2, 0]\n\nPrefix [1, 2, 0] has inversions (0, 2) and (1, 2).\nPrefix [1] has 0 inversions.\n\n\n\n\nExample 2:\n\nInput: n = 3, requirements = [[2,2],[1,1],[0,0]]\nOutput: 1\nExplanation:\nThe only satisfying permutation is [2, 0, 1]:\n\nPrefix [2, 0, 1] has inversions (0, 1) and (0, 2).\nPrefix [2, 0] has an inversion (0, 1).\nPrefix [2] has 0 inversions.\n\n\nExample 3:\n\nInput: n = 2, requirements = [[0,0],[1,0]]\nOutput: 1\nExplanation:\nThe only satisfying permutation is [0, 1]:\n\nPrefix [0] has 0 inversions.\nPrefix [0, 1] has an inversion (0, 1).\n\n\n \nConstraints:\n\n2 <= n <= 300\n1 <= requirements.length <= n\nrequirements[i] = [endi, cnti]\n0 <= endi <= n - 1\n0 <= cnti <= 400\nThe input is generated such that there is at least one i such that endi == n - 1.\nThe input is generated such that all endi are unique.\n\n", "hints": ["Let <code>dp[i][j]</code> denote the number of arrays of length <code>i</code> with <code>j</code> inversions.", "<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + … + dp[i - 1][0]</code>.", "<code>dp[i][j] = 0</code> if for some <code>x</code>, <code>requirements[x][0] == i</code> and <code>requirements[x][1] != j</code>."], "exampleTestcases": "3\n[[2,2],[0,0]]\n3\n[[2,2],[1,1],[0,0]]\n2\n[[0,0],[1,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] requirements) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nvar numberOfPermutations = function(n, requirements) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfPermutations(n: number, requirements: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $requirements\n     * @return Integer\n     */\n    function numberOfPermutations($n, $requirements) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfPermutations(_ n: Int, _ requirements: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfPermutations(int n, List<List<int>> requirements) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfPermutations(n int, requirements [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} requirements\n# @return {Integer}\ndef number_of_permutations(n, requirements)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfPermutations(n: Int, requirements: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_permutations(n: i32, requirements: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-permutations n requirements)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_permutations(N :: integer(), Requirements :: [[integer()]]) -> integer().\nnumber_of_permutations(N, Requirements) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_permutations(n :: integer, requirements :: [[integer]]) :: integer\n  def number_of_permutations(n, requirements) do\n    \n  end\nend"}}}