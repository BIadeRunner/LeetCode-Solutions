{"questionId": "3460", "acRate": 34.025103765564836, "difficulty": "Hard", "freqBar": 43.10100006749623, "frontendQuestionId": "3193", "paidOnly": false, "status": "ac", "title": "Count the Number of Inversions", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "count-the-number-of-inversions", "content": "<p>You are given an integer <code>n</code> and a 2D array <code>requirements</code>, where <code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code> represents the end index and the <strong>inversion</strong> count of each requirement.</p>\n\n<p>A pair of indices <code>(i, j)</code> from an integer array <code>nums</code> is called an <strong>inversion</strong> if:</p>\n\n<ul>\n\t<li><code>i &lt; j</code> and <code>nums[i] &gt; nums[j]</code></li>\n</ul>\n\n<p>Return the number of <span data-keyword=\"permutation\">permutations</span> <code>perm</code> of <code>[0, 1, 2, ..., n - 1]</code> such that for <strong>all</strong> <code>requirements[i]</code>, <code>perm[0..end<sub>i</sub>]</code> has exactly <code>cnt<sub>i</sub></code> inversions.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two permutations are:</p>\n\n<ul>\n\t<li><code>[2, 0, 1]</code>\n\n\t<ul>\n\t\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n\t<li><code>[1, 2, 0]</code>\n\t<ul>\n\t\t<li>Prefix <code>[1, 2, 0]</code> has inversions <code>(0, 2)</code> and <code>(1, 2)</code>.</li>\n\t\t<li>Prefix <code>[1]</code> has 0 inversions.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, requirements = [[2,2],[1,1],[0,0]]</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[2, 0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>\n\t<li>Prefix <code>[2, 0]</code> has an inversion <code>(0, 1)</code>.</li>\n\t<li>Prefix <code>[2]</code> has 0 inversions.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, requirements = [[0,0],[1,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only satisfying permutation is <code>[0, 1]</code>:</p>\n\n<ul>\n\t<li>Prefix <code>[0]</code> has 0 inversions.</li>\n\t<li>Prefix <code>[0, 1]</code> has an inversion <code>(0, 1)</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 300</code></li>\n\t<li><code>1 &lt;= requirements.length &lt;= n</code></li>\n\t<li><code>requirements[i] = [end<sub>i</sub>, cnt<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= end<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= cnt<sub>i</sub> &lt;= 400</code></li>\n\t<li>The input is generated such that there is at least one <code>i</code> such that <code>end<sub>i</sub> == n - 1</code>.</li>\n\t<li>The input is generated such that all <code>end<sub>i</sub></code> are unique.</li>\n</ul>\n", "hints": ["Let <code>dp[i][j]</code> denote the number of arrays of length <code>i</code> with <code>j</code> inversions.", "<code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + \u2026 + dp[i - 1][0]</code>.", "<code>dp[i][j] = 0</code> if for some <code>x</code>, <code>requirements[x][0] == i</code> and <code>requirements[x][1] != j</code>."], "exampleTestcases": "3\n[[2,2],[0,0]]\n3\n[[2,2],[1,1],[0,0]]\n2\n[[0,0],[1,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] requirements) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nvar numberOfPermutations = function(n, requirements) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfPermutations(n: number, requirements: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $requirements\n     * @return Integer\n     */\n    function numberOfPermutations($n, $requirements) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfPermutations(_ n: Int, _ requirements: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfPermutations(int n, List<List<int>> requirements) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfPermutations(n int, requirements [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} requirements\n# @return {Integer}\ndef number_of_permutations(n, requirements)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfPermutations(n: Int, requirements: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_permutations(n: i32, requirements: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-permutations n requirements)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_permutations(N :: integer(), Requirements :: [[integer()]]) -> integer().\nnumber_of_permutations(N, Requirements) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_permutations(n :: integer, requirements :: [[integer]]) :: integer\n  def number_of_permutations(n, requirements) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "k-inverse-pairs-array", "title": "K Inverse Pairs Array", "isPaidOnly": false}]}