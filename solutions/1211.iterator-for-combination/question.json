{"question_id": "1211", "problem_slug": "iterator-for-combination", "problem_title": "Iterator for Combination", "content": "Design the CombinationIterator class:\n\nCombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.\nnext() Returns the next combination of length combinationLength in lexicographical order.\nhasNext() Returns true if and only if there exists a next combination.\n\n \nExample 1:\n\nInput\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]\nOutput\n[null, \"ab\", true, \"ac\", true, \"bc\", false]\n\nExplanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False\n\n \nConstraints:\n\n1 <= combinationLength <= characters.length <= 15\nAll the characters of characters are unique.\nAt most 104 calls will be made to next and hasNext.\nIt is guaranteed that all calls of the function next are valid.\n\n", "hints": ["Generate all combinations as a preprocessing.", "Use bit masking to generate all the combinations."], "exampleTestcases": "[\"CombinationIterator\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[\"abc\",2],[],[],[],[],[],[]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class CombinationIterator {\npublic:\n    CombinationIterator(string characters, int combinationLength) {\n        \n    }\n    \n    string next() {\n        \n    }\n    \n    bool hasNext() {\n        \n    }\n};\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);\n * string param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */"}, "Java": {"langSlug": "java", "code": "class CombinationIterator {\n\n    public CombinationIterator(String characters, int combinationLength) {\n        \n    }\n    \n    public String next() {\n        \n    }\n    \n    public boolean hasNext() {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator obj = new CombinationIterator(characters, combinationLength);\n * String param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */"}, "Python": {"langSlug": "python", "code": "class CombinationIterator(object):\n\n    def __init__(self, characters, combinationLength):\n        \"\"\"\n        :type characters: str\n        :type combinationLength: int\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your CombinationIterator object will be instantiated and called as such:\n# obj = CombinationIterator(characters, combinationLength)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"}, "Python3": {"langSlug": "python3", "code": "class CombinationIterator:\n\n    def __init__(self, characters: str, combinationLength: int):\n        \n\n    def next(self) -> str:\n        \n\n    def hasNext(self) -> bool:\n        \n\n\n# Your CombinationIterator object will be instantiated and called as such:\n# obj = CombinationIterator(characters, combinationLength)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} CombinationIterator;\n\n\nCombinationIterator* combinationIteratorCreate(char* characters, int combinationLength) {\n    \n}\n\nchar* combinationIteratorNext(CombinationIterator* obj) {\n    \n}\n\nbool combinationIteratorHasNext(CombinationIterator* obj) {\n    \n}\n\nvoid combinationIteratorFree(CombinationIterator* obj) {\n    \n}\n\n/**\n * Your CombinationIterator struct will be instantiated and called as such:\n * CombinationIterator* obj = combinationIteratorCreate(characters, combinationLength);\n * char* param_1 = combinationIteratorNext(obj);\n \n * bool param_2 = combinationIteratorHasNext(obj);\n \n * combinationIteratorFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class CombinationIterator {\n\n    public CombinationIterator(string characters, int combinationLength) {\n        \n    }\n    \n    public string Next() {\n        \n    }\n    \n    public bool HasNext() {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator obj = new CombinationIterator(characters, combinationLength);\n * string param_1 = obj.Next();\n * bool param_2 = obj.HasNext();\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} characters\n * @param {number} combinationLength\n */\nvar CombinationIterator = function(characters, combinationLength) {\n    \n};\n\n/**\n * @return {string}\n */\nCombinationIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nCombinationIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your CombinationIterator object will be instantiated and called as such:\n * var obj = new CombinationIterator(characters, combinationLength)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class CombinationIterator {\n    constructor(characters: string, combinationLength: number) {\n        \n    }\n\n    next(): string {\n        \n    }\n\n    hasNext(): boolean {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * var obj = new CombinationIterator(characters, combinationLength)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"}, "PHP": {"langSlug": "php", "code": "class CombinationIterator {\n    /**\n     * @param String $characters\n     * @param Integer $combinationLength\n     */\n    function __construct($characters, $combinationLength) {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function next() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * $obj = CombinationIterator($characters, $combinationLength);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->hasNext();\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass CombinationIterator {\n\n    init(_ characters: String, _ combinationLength: Int) {\n        \n    }\n    \n    func next() -> String {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * let obj = CombinationIterator(characters, combinationLength)\n * let ret_1: String = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class CombinationIterator(characters: String, combinationLength: Int) {\n\n    fun next(): String {\n        \n    }\n\n    fun hasNext(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * var obj = CombinationIterator(characters, combinationLength)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"}, "Dart": {"langSlug": "dart", "code": "class CombinationIterator {\n\n  CombinationIterator(String characters, int combinationLength) {\n    \n  }\n  \n  String next() {\n    \n  }\n  \n  bool hasNext() {\n    \n  }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator obj = CombinationIterator(characters, combinationLength);\n * String param1 = obj.next();\n * bool param2 = obj.hasNext();\n */"}, "Go": {"langSlug": "golang", "code": "type CombinationIterator struct {\n    \n}\n\n\nfunc Constructor(characters string, combinationLength int) CombinationIterator {\n    \n}\n\n\nfunc (this *CombinationIterator) Next() string {\n    \n}\n\n\nfunc (this *CombinationIterator) HasNext() bool {\n    \n}\n\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * obj := Constructor(characters, combinationLength);\n * param_1 := obj.Next();\n * param_2 := obj.HasNext();\n */"}, "Ruby": {"langSlug": "ruby", "code": "class CombinationIterator\n\n=begin\n    :type characters: String\n    :type combination_length: Integer\n=end\n    def initialize(characters, combination_length)\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def next()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def has_next()\n        \n    end\n\n\nend\n\n# Your CombinationIterator object will be instantiated and called as such:\n# obj = CombinationIterator.new(characters, combination_length)\n# param_1 = obj.next()\n# param_2 = obj.has_next()"}, "Scala": {"langSlug": "scala", "code": "class CombinationIterator(_characters: String, _combinationLength: Int) {\n\n    def next(): String = {\n        \n    }\n\n    def hasNext(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * val obj = new CombinationIterator(characters, combinationLength)\n * val param_1 = obj.next()\n * val param_2 = obj.hasNext()\n */"}, "Rust": {"langSlug": "rust", "code": "struct CombinationIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CombinationIterator {\n\n    fn new(characters: String, combinationLength: i32) -> Self {\n        \n    }\n    \n    fn next(&self) -> String {\n        \n    }\n    \n    fn has_next(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * let obj = CombinationIterator::new(characters, combinationLength);\n * let ret_1: String = obj.next();\n * let ret_2: bool = obj.has_next();\n */"}, "Racket": {"langSlug": "racket", "code": "(define combination-iterator%\n  (class object%\n    (super-new)\n    \n    ; characters : string?\n    ; combination-length : exact-integer?\n    (init-field\n      characters\n      combination-length)\n    \n    ; next : -> string?\n    (define/public (next)\n      )\n    ; has-next : -> boolean?\n    (define/public (has-next)\n      )))\n\n;; Your combination-iterator% object will be instantiated and called as such:\n;; (define obj (new combination-iterator% [characters characters] [combination-length combination-length]))\n;; (define param_1 (send obj next))\n;; (define param_2 (send obj has-next))"}, "Erlang": {"langSlug": "erlang", "code": "-spec combination_iterator_init_(Characters :: unicode:unicode_binary(), CombinationLength :: integer()) -> any().\ncombination_iterator_init_(Characters, CombinationLength) ->\n  .\n\n-spec combination_iterator_next() -> unicode:unicode_binary().\ncombination_iterator_next() ->\n  .\n\n-spec combination_iterator_has_next() -> boolean().\ncombination_iterator_has_next() ->\n  .\n\n\n%% Your functions will be called as such:\n%% combination_iterator_init_(Characters, CombinationLength),\n%% Param_1 = combination_iterator_next(),\n%% Param_2 = combination_iterator_has_next(),\n\n%% combination_iterator_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule CombinationIterator do\n  @spec init_(characters :: String.t, combination_length :: integer) :: any\n  def init_(characters, combination_length) do\n    \n  end\n\n  @spec next() :: String.t\n  def next() do\n    \n  end\n\n  @spec has_next() :: boolean\n  def has_next() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# CombinationIterator.init_(characters, combination_length)\n# param_1 = CombinationIterator.next()\n# param_2 = CombinationIterator.has_next()\n\n# CombinationIterator.init_ will be called before every test case, in which you can do some necessary initializations."}}}