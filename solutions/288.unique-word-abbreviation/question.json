{"question_id": "288", "problem_slug": "unique-word-abbreviation", "problem_title": "Unique Word Abbreviation", "content": "The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself.\nFor example:\n\ndog --> d1g because there is one letter between the first letter 'd' and the last letter 'g'.\ninternationalization --> i18n because there are 18 letters between the first letter 'i' and the last letter 'n'.\nit --> it because any word with only two characters is an abbreviation of itself.\n\nImplement the ValidWordAbbr class:\n\nValidWordAbbr(String[] dictionary) Initializes the object with a dictionary of words.\nboolean isUnique(string word) Returns true if either of the following conditions are met (otherwise returns false):\n\t\nThere is no word in dictionary whose abbreviation is equal to word's abbreviation.\nFor any word in dictionary whose abbreviation is equal to word's abbreviation, that word and word are the same.\n\n\n\n \nExample 1:\n\nInput\n[\"ValidWordAbbr\", \"isUnique\", \"isUnique\", \"isUnique\", \"isUnique\", \"isUnique\"]\n[[[\"deer\", \"door\", \"cake\", \"card\"]], [\"dear\"], [\"cart\"], [\"cane\"], [\"make\"], [\"cake\"]]\nOutput\n[null, false, true, false, true, true]\n\nExplanation\nValidWordAbbr validWordAbbr = new ValidWordAbbr([\"deer\", \"door\", \"cake\", \"card\"]);\nvalidWordAbbr.isUnique(\"dear\"); // return false, dictionary word \"deer\" and word \"dear\" have the same abbreviation \"d2r\" but are not the same.\nvalidWordAbbr.isUnique(\"cart\"); // return true, no words in the dictionary have the abbreviation \"c2t\".\nvalidWordAbbr.isUnique(\"cane\"); // return false, dictionary word \"cake\" and word \"cane\" have the same abbreviation  \"c2e\" but are not the same.\nvalidWordAbbr.isUnique(\"make\"); // return true, no words in the dictionary have the abbreviation \"m2e\".\nvalidWordAbbr.isUnique(\"cake\"); // return true, because \"cake\" is already in the dictionary and no other word in the dictionary has \"c2e\" abbreviation.\n\n \nConstraints:\n\n1 <= dictionary.length <= 3 * 104\n1 <= dictionary[i].length <= 20\ndictionary[i] consists of lowercase English letters.\n1 <= word.length <= 20\nword consists of lowercase English letters.\nAt most 5000 calls will be made to isUnique.\n\n", "hints": [], "exampleTestcases": "[\"ValidWordAbbr\",\"isUnique\",\"isUnique\",\"isUnique\",\"isUnique\",\"isUnique\"]\n[[[\"deer\",\"door\",\"cake\",\"card\"]],[\"dear\"],[\"cart\"],[\"cane\"],[\"make\"],[\"cake\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class ValidWordAbbr {\npublic:\n    ValidWordAbbr(vector<string>& dictionary) {\n        \n    }\n    \n    bool isUnique(string word) {\n        \n    }\n};\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr* obj = new ValidWordAbbr(dictionary);\n * bool param_1 = obj->isUnique(word);\n */"}, "Java": {"langSlug": "java", "code": "class ValidWordAbbr {\n\n    public ValidWordAbbr(String[] dictionary) {\n        \n    }\n    \n    public boolean isUnique(String word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * boolean param_1 = obj.isUnique(word);\n */"}, "Python": {"langSlug": "python", "code": "class ValidWordAbbr(object):\n\n    def __init__(self, dictionary):\n        \"\"\"\n        :type dictionary: List[str]\n        \"\"\"\n        \n\n    def isUnique(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr(dictionary)\n# param_1 = obj.isUnique(word)"}, "Python3": {"langSlug": "python3", "code": "class ValidWordAbbr:\n\n    def __init__(self, dictionary: List[str]):\n        \n\n    def isUnique(self, word: str) -> bool:\n        \n\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr(dictionary)\n# param_1 = obj.isUnique(word)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} ValidWordAbbr;\n\n\nValidWordAbbr* validWordAbbrCreate(char** dictionary, int dictionarySize) {\n    \n}\n\nbool validWordAbbrIsUnique(ValidWordAbbr* obj, char* word) {\n    \n}\n\nvoid validWordAbbrFree(ValidWordAbbr* obj) {\n    \n}\n\n/**\n * Your ValidWordAbbr struct will be instantiated and called as such:\n * ValidWordAbbr* obj = validWordAbbrCreate(dictionary, dictionarySize);\n * bool param_1 = validWordAbbrIsUnique(obj, word);\n \n * validWordAbbrFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class ValidWordAbbr {\n\n    public ValidWordAbbr(string[] dictionary) {\n        \n    }\n    \n    public bool IsUnique(string word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * bool param_1 = obj.IsUnique(word);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} dictionary\n */\nvar ValidWordAbbr = function(dictionary) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nValidWordAbbr.prototype.isUnique = function(word) {\n    \n};\n\n/** \n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = new ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class ValidWordAbbr {\n    constructor(dictionary: string[]) {\n        \n    }\n\n    isUnique(word: string): boolean {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = new ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"}, "PHP": {"langSlug": "php", "code": "class ValidWordAbbr {\n    /**\n     * @param String[] $dictionary\n     */\n    function __construct($dictionary) {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isUnique($word) {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * $obj = ValidWordAbbr($dictionary);\n * $ret_1 = $obj->isUnique($word);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass ValidWordAbbr {\n\n    init(_ dictionary: [String]) {\n        \n    }\n    \n    func isUnique(_ word: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * let obj = ValidWordAbbr(dictionary)\n * let ret_1: Bool = obj.isUnique(word)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class ValidWordAbbr(dictionary: Array<String>) {\n\n    fun isUnique(word: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * var obj = ValidWordAbbr(dictionary)\n * var param_1 = obj.isUnique(word)\n */"}, "Dart": {"langSlug": "dart", "code": "class ValidWordAbbr {\n\n  ValidWordAbbr(List<String> dictionary) {\n    \n  }\n  \n  bool isUnique(String word) {\n    \n  }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = ValidWordAbbr(dictionary);\n * bool param1 = obj.isUnique(word);\n */"}, "Go": {"langSlug": "golang", "code": "type ValidWordAbbr struct {\n    \n}\n\n\nfunc Constructor(dictionary []string) ValidWordAbbr {\n    \n}\n\n\nfunc (this *ValidWordAbbr) IsUnique(word string) bool {\n    \n}\n\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * obj := Constructor(dictionary);\n * param_1 := obj.IsUnique(word);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class ValidWordAbbr\n\n=begin\n    :type dictionary: String[]\n=end\n    def initialize(dictionary)\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Boolean\n=end\n    def is_unique(word)\n        \n    end\n\n\nend\n\n# Your ValidWordAbbr object will be instantiated and called as such:\n# obj = ValidWordAbbr.new(dictionary)\n# param_1 = obj.is_unique(word)"}, "Scala": {"langSlug": "scala", "code": "class ValidWordAbbr(_dictionary: Array[String]) {\n\n    def isUnique(word: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * val obj = new ValidWordAbbr(dictionary)\n * val param_1 = obj.isUnique(word)\n */"}, "Rust": {"langSlug": "rust", "code": "struct ValidWordAbbr {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl ValidWordAbbr {\n\n    fn new(dictionary: Vec<String>) -> Self {\n        \n    }\n    \n    fn is_unique(&self, word: String) -> bool {\n        \n    }\n}\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * let obj = ValidWordAbbr::new(dictionary);\n * let ret_1: bool = obj.is_unique(word);\n */"}, "Racket": {"langSlug": "racket", "code": "(define valid-word-abbr%\n  (class object%\n    (super-new)\n    \n    ; dictionary : (listof string?)\n    (init-field\n      dictionary)\n    \n    ; is-unique : string? -> boolean?\n    (define/public (is-unique word)\n      )))\n\n;; Your valid-word-abbr% object will be instantiated and called as such:\n;; (define obj (new valid-word-abbr% [dictionary dictionary]))\n;; (define param_1 (send obj is-unique word))"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_word_abbr_init_(Dictionary :: [unicode:unicode_binary()]) -> any().\nvalid_word_abbr_init_(Dictionary) ->\n  .\n\n-spec valid_word_abbr_is_unique(Word :: unicode:unicode_binary()) -> boolean().\nvalid_word_abbr_is_unique(Word) ->\n  .\n\n\n%% Your functions will be called as such:\n%% valid_word_abbr_init_(Dictionary),\n%% Param_1 = valid_word_abbr_is_unique(Word),\n\n%% valid_word_abbr_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule ValidWordAbbr do\n  @spec init_(dictionary :: [String.t]) :: any\n  def init_(dictionary) do\n    \n  end\n\n  @spec is_unique(word :: String.t) :: boolean\n  def is_unique(word) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# ValidWordAbbr.init_(dictionary)\n# param_1 = ValidWordAbbr.is_unique(word)\n\n# ValidWordAbbr.init_ will be called before every test case, in which you can do some necessary initializations."}}}