{"question_id": "1178", "problem_slug": "valid-palindrome-iii", "problem_title": "Valid Palindrome III", "content": "Given a string s and an integer k, return true if s is a k-palindrome.\nA string is k-palindrome if it can be transformed into a palindrome by removing at most k characters from it.\n \nExample 1:\n\nInput: s = \"abcdeca\", k = 2\nOutput: true\nExplanation: Remove 'b' and 'e' characters.\n\nExample 2:\n\nInput: s = \"abbababa\", k = 1\nOutput: true\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of only lowercase English letters.\n1 <= k <= s.length\n\n", "hints": ["Can you reduce this problem to a classic problem?", "The problem is equivalent to finding any palindromic subsequence of length at least N-K where N is the length of the string.", "Try to find the longest palindromic subsequence.", "Use DP to do that."], "exampleTestcases": "\"abcdeca\"\n2\n\"abbababa\"\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isValidPalindrome(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isValidPalindrome(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isValidPalindrome(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isValidPalindrome(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsValidPalindrome(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar isValidPalindrome = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isValidPalindrome(s: string, k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Boolean\n     */\n    function isValidPalindrome($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isValidPalindrome(_ s: String, _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isValidPalindrome(s: String, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isValidPalindrome(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isValidPalindrome(s string, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Boolean}\ndef is_valid_palindrome(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isValidPalindrome(s: String, k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_valid_palindrome(s: String, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-valid-palindrome s k)\n  (-> string? exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_valid_palindrome(S :: unicode:unicode_binary(), K :: integer()) -> boolean().\nis_valid_palindrome(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_valid_palindrome(s :: String.t, k :: integer) :: boolean\n  def is_valid_palindrome(s, k) do\n    \n  end\nend"}}}