{"question_id": "1502", "problem_slug": "construct-k-palindrome-strings", "problem_title": "Construct K Palindrome Strings", "content": "Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.\n \nExample 1:\n\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n\nExample 2:\n\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n\nExample 3:\n\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\n1 <= k <= 105\n\n", "hints": ["If the s.length < k we cannot construct k strings from s and answer is false.", "If the number of characters that have odd counts is > k then the minimum number of palindrome strings we can construct is > k and answer is false.", "Otherwise you can construct exactly k palindrome strings and answer is true (why ?)."], "exampleTestcases": "\"annabelle\"\n2\n\"leetcode\"\n3\n\"true\"\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canConstruct(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canConstruct(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canConstruct(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canConstruct(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanConstruct(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar canConstruct = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canConstruct(s: string, k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canConstruct($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canConstruct(_ s: String, _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canConstruct(s: String, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canConstruct(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canConstruct(s string, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Boolean}\ndef can_construct(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canConstruct(s: String, k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_construct(s: String, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-construct s k)\n  (-> string? exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_construct(S :: unicode:unicode_binary(), K :: integer()) -> boolean().\ncan_construct(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_construct(s :: String.t, k :: integer) :: boolean\n  def can_construct(s, k) do\n    \n  end\nend"}}}