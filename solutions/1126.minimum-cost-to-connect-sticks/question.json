{"question_id": "1126", "problem_slug": "minimum-cost-to-connect-sticks", "problem_title": "Minimum Cost to Connect Sticks", "content": "You have some number of sticks with positive integer lengths. These lengths are given as an array sticks, where sticks[i] is the length of the ith stick.\nYou can connect any two sticks of lengths x and y into one stick by paying a cost of x + y. You must connect all the sticks until there is only one stick remaining.\nReturn the minimum cost of connecting all the given sticks into one stick in this way.\n \nExample 1:\n\nInput: sticks = [2,4,3]\nOutput: 14\nExplanation: You start with sticks = [2,4,3].\n1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].\n2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].\nThere is only one stick left, so you are done. The total cost is 5 + 9 = 14.\n\nExample 2:\n\nInput: sticks = [1,8,3,5]\nOutput: 30\nExplanation: You start with sticks = [1,8,3,5].\n1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].\n2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].\n3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].\nThere is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.\n\nExample 3:\n\nInput: sticks = [5]\nOutput: 0\nExplanation: There is only one stick, so you don't need to do anything. The total cost is 0.\n\n \nConstraints:\n\n1 <= sticks.length <= 104\n1 <= sticks[i] <= 104\n\n", "hints": ["How many times does every stick contribute to the answer?", "Some of the sticks will be used more than the others. Which sticks should be used the most/least?", "The sticks with long lengths cost a lot so we should use these the least.", "What if we keep merging the two shortest sticks?"], "exampleTestcases": "[2,4,3]\n[1,8,3,5]\n[5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int connectSticks(vector<int>& sticks) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int connectSticks(int[] sticks) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def connectSticks(self, sticks):\n        \"\"\"\n        :type sticks: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def connectSticks(self, sticks: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int connectSticks(int* sticks, int sticksSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ConnectSticks(int[] sticks) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} sticks\n * @return {number}\n */\nvar connectSticks = function(sticks) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function connectSticks(sticks: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $sticks\n     * @return Integer\n     */\n    function connectSticks($sticks) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func connectSticks(_ sticks: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun connectSticks(sticks: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int connectSticks(List<int> sticks) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func connectSticks(sticks []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} sticks\n# @return {Integer}\ndef connect_sticks(sticks)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def connectSticks(sticks: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn connect_sticks(sticks: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (connect-sticks sticks)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec connect_sticks(Sticks :: [integer()]) -> integer().\nconnect_sticks(Sticks) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec connect_sticks(sticks :: [integer]) :: integer\n  def connect_sticks(sticks) do\n    \n  end\nend"}}}