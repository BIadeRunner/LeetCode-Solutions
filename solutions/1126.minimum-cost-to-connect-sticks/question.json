{"questionId": "1126", "acRate": 70.4135288822535, "difficulty": "Medium", "freqBar": 39.08586204908019, "frontendQuestionId": "1167", "paidOnly": true, "status": "ac", "title": "Minimum Cost to Connect Sticks", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}], "titleSlug": "minimum-cost-to-connect-sticks", "content": "<p>You have some number of sticks with positive integer lengths. These lengths are given as an array&nbsp;<code>sticks</code>, where&nbsp;<code>sticks[i]</code>&nbsp;is the length of the&nbsp;<code>i<sup>th</sup></code>&nbsp;stick.</p>\n\n<p>You can connect any two sticks of lengths <code>x</code> and <code>y</code> into one stick&nbsp;by paying a cost of <code>x + y</code>. You must connect&nbsp;all the sticks until there is only one stick remaining.</p>\n\n<p>Return&nbsp;<em>the minimum cost of connecting all the given sticks into one stick in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sticks = [2,4,3]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong>&nbsp;You start with sticks = [2,4,3].\n1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].\n2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].\nThere is only one stick left, so you are done. The total cost is 5 + 9 = 14.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sticks = [1,8,3,5]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> You start with sticks = [1,8,3,5].\n1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].\n2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].\n3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].\nThere is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sticks = [5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is only one stick, so you don&#39;t need to do anything. The total cost is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= sticks.length &lt;= 10<sup>4</sup></span></code></li>\n\t<li><code><span>1 &lt;= sticks[i] &lt;= 10<sup>4</sup></span></code></li>\n</ul>\n", "hints": ["How many times does every stick contribute to the answer?", "Some of the sticks will be used more than the others. Which sticks should be used the most/least?", "The sticks with long lengths cost a lot so we should use these the least.", "What if we keep merging the two shortest sticks?"], "exampleTestcases": "[2,4,3]\n[1,8,3,5]\n[5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int connectSticks(vector<int>& sticks) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int connectSticks(int[] sticks) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def connectSticks(self, sticks):\n        \"\"\"\n        :type sticks: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def connectSticks(self, sticks: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int connectSticks(int* sticks, int sticksSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ConnectSticks(int[] sticks) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} sticks\n * @return {number}\n */\nvar connectSticks = function(sticks) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function connectSticks(sticks: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $sticks\n     * @return Integer\n     */\n    function connectSticks($sticks) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func connectSticks(_ sticks: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun connectSticks(sticks: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int connectSticks(List<int> sticks) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func connectSticks(sticks []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} sticks\n# @return {Integer}\ndef connect_sticks(sticks)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def connectSticks(sticks: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn connect_sticks(sticks: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (connect-sticks sticks)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec connect_sticks(Sticks :: [integer()]) -> integer().\nconnect_sticks(Sticks) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec connect_sticks(sticks :: [integer]) :: integer\n  def connect_sticks(sticks) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-cost-to-merge-stones", "title": "Minimum Cost to Merge Stones", "isPaidOnly": false}]}