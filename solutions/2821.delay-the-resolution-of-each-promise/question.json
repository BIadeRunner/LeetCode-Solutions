{"questionId": "2909", "acRate": 67.25388601036269, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2821", "paidOnly": true, "status": "ac", "title": "Delay the Resolution of Each Promise", "topicTags": [], "titleSlug": "delay-the-resolution-of-each-promise", "content": "<p>Given an array&nbsp;<code>functions</code>&nbsp;and a number <code>ms</code>, return a new&nbsp;array of functions.</p>\n\n<ul>\n\t<li><code>functions</code>&nbsp;is an array of functions that return promises.</li>\n\t<li><code>ms</code>&nbsp;represents the delay duration in milliseconds. It determines the amount of time to wait before resolving or rejecting each promise in the new array.</li>\n</ul>\n\n<p>Each function in the new array should return a promise that resolves or rejects after an additional delay of <code>ms</code>&nbsp;milliseconds, preserving the order of the original <code>functions</code>&nbsp;array.</p>\n\n<p>The&nbsp;<code>delayAll</code>&nbsp;function should ensure&nbsp;that each promise from&nbsp;<code>functions</code>&nbsp;is executed with a delay, forming the new array of functions returning delayed promises.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfunctions = [\n&nbsp;  () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 30))\n], \nms = 50\n<strong>Output:</strong> [80]\n<strong>Explanation:</strong> The promise from the array would have resolved after 30 ms, but it was delayed by 50 ms, thus 30 ms + 50 ms = 80 ms.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfunctions = [\n&nbsp;   () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 50)),\n&nbsp;   () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 80))\n], \nms = 70\n<strong>Output:</strong> [120,150]\n<strong>Explanation:</strong> The promises from the array would have resolved after 50 ms and 80 ms, but they were delayed by 70 ms, thus 50 ms + 70 ms = 120 ms and 80 ms + 70 ms = 150 ms.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfunctions = [\n&nbsp;   () =&gt; new Promise((resolve, reject) =&gt; setTimeout(reject, 20)), \n&nbsp;   () =&gt; new Promise((resolve, reject) =&gt; setTimeout(reject, 100))\n], \nms = 30\n<strong>Output: </strong>[50,130]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>functions</code> is an array of functions that return promises</li>\n\t<li><code>10 &lt;= ms &lt;= 500</code></li>\n\t<li><code>1 &lt;= functions.length &lt;= 10</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[() => new Promise((resolve) => setTimeout(resolve, 30))]\n50\n[() => new Promise((resolve) => setTimeout(resolve, 50)),() => new Promise((resolve) => setTimeout(resolve, 80))]\n70\n[() => new Promise((resolve, reject) => setTimeout(reject, 20)), () => new Promise((resolve, reject) => setTimeout(reject, 100))]\n30", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Array<Function>} functions\n * @param {number} ms\n * @return {Array<Function>}\n */\nvar delayAll = function(functions, ms) {\n    \n};\n\n"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "type Fn = () => Promise<any>\n\nfunction delayAll(functions: Fn[], ms: number): Fn[] {\n    \n};"}], "similarQuestionList": []}