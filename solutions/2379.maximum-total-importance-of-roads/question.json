{"question_id": "2379", "problem_slug": "maximum-total-importance-of-roads", "problem_title": "Maximum Total Importance of Roads", "content": "You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.\nYou are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nYou need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.\nReturn the maximum total importance of all roads possible after assigning the values optimally.\n \nExample 1:\n\n\nInput: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\nOutput: 43\nExplanation: The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43.\n\nExample 2:\n\n\nInput: n = 5, roads = [[0,3],[2,4],[1,3]]\nOutput: 20\nExplanation: The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20.\n\n \nConstraints:\n\n2 <= n <= 5 * 104\n1 <= roads.length <= 5 * 104\nroads[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi\nThere are no duplicate roads.\n\n", "hints": ["Consider what each city contributes to the total importance of all roads.", "Based on that, how can you sort the cities such that assigning them values in that order will yield the maximum total importance?"], "exampleTestcases": "5\n[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n5\n[[0,3],[2,4],[1,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumImportance(int n, vector<vector<int>>& roads) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumImportance(int n, int[][] roads) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumImportance(self, n, roads):\n        \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumImportance(int n, int** roads, int roadsSize, int* roadsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumImportance(int n, int[][] roads) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} roads\n * @return {number}\n */\nvar maximumImportance = function(n, roads) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumImportance(n: number, roads: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $roads\n     * @return Integer\n     */\n    function maximumImportance($n, $roads) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumImportance(_ n: Int, _ roads: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumImportance(n: Int, roads: Array<IntArray>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumImportance(int n, List<List<int>> roads) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumImportance(n int, roads [][]int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} roads\n# @return {Integer}\ndef maximum_importance(n, roads)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumImportance(n: Int, roads: Array[Array[Int]]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_importance(n: i32, roads: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-importance n roads)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_importance(N :: integer(), Roads :: [[integer()]]) -> integer().\nmaximum_importance(N, Roads) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_importance(n :: integer, roads :: [[integer]]) :: integer\n  def maximum_importance(n, roads) do\n    \n  end\nend"}}}