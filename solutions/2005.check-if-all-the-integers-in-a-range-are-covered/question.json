{"questionId": "2005", "acRate": 50.11127596439169, "difficulty": "Easy", "freqBar": 28.808086489129987, "frontendQuestionId": "1893", "paidOnly": false, "status": "ac", "title": "Check if All the Integers in a Range Are Covered", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "check-if-all-the-integers-in-a-range-are-covered", "content": "<p>You are given a 2D integer array <code>ranges</code> and two integers <code>left</code> and <code>right</code>. Each <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents an <strong>inclusive</strong> interval between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code>.</p>\n\n<p>Return <code>true</code> <em>if each integer in the inclusive range</em> <code>[left, right]</code> <em>is covered by <strong>at least one</strong> interval in</em> <code>ranges</code>. Return <code>false</code> <em>otherwise</em>.</p>\n\n<p>An integer <code>x</code> is covered by an interval <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> if <code>start<sub>i</sub> &lt;= x &lt;= end<sub>i</sub></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,10],[10,20]], left = 21, right = 21\n<strong>Output:</strong> false\n<strong>Explanation:</strong> 21 is not covered by any range.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranges.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 50</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 50</code></li>\n</ul>\n", "hints": ["Iterate over every integer point in the range [left, right].", "For each of these points check if it is included in one of the ranges."], "exampleTestcases": "[[1,2],[3,4],[5,6]]\n2\n5\n[[1,10],[10,20]]\n21\n21", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isCovered(vector<vector<int>>& ranges, int left, int right) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isCovered(int[][] ranges, int left, int right) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isCovered(self, ranges, left, right):\n        \"\"\"\n        :type ranges: List[List[int]]\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isCovered(int** ranges, int rangesSize, int* rangesColSize, int left, int right) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsCovered(int[][] ranges, int left, int right) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} ranges\n * @param {number} left\n * @param {number} right\n * @return {boolean}\n */\nvar isCovered = function(ranges, left, right) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isCovered(ranges: number[][], left: number, right: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $ranges\n     * @param Integer $left\n     * @param Integer $right\n     * @return Boolean\n     */\n    function isCovered($ranges, $left, $right) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isCovered(_ ranges: [[Int]], _ left: Int, _ right: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isCovered(ranges: Array<IntArray>, left: Int, right: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isCovered(List<List<int>> ranges, int left, int right) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isCovered(ranges [][]int, left int, right int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} ranges\n# @param {Integer} left\n# @param {Integer} right\n# @return {Boolean}\ndef is_covered(ranges, left, right)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isCovered(ranges: Array[Array[Int]], left: Int, right: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_covered(ranges: Vec<Vec<i32>>, left: i32, right: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-covered ranges left right)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_covered(Ranges :: [[integer()]], Left :: integer(), Right :: integer()) -> boolean().\nis_covered(Ranges, Left, Right) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_covered(ranges :: [[integer]], left :: integer, right :: integer) :: boolean\n  def is_covered(ranges, left, right) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "find-maximal-uncovered-ranges", "title": "Find Maximal Uncovered Ranges", "isPaidOnly": true}]}