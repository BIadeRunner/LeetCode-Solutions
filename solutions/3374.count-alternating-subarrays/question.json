{"question_id": "3374", "problem_slug": "count-alternating-subarrays", "problem_title": "Count Alternating Subarrays", "content": "You are given a binary array nums.\nWe call a subarray alternating if no two adjacent elements in the subarray have the same value.\nReturn the number of alternating subarrays in nums.\n \nExample 1:\n\nInput: nums = [0,1,1,1]\nOutput: 5\nExplanation:\nThe following subarrays are alternating: [0], [1], [1], [1], and [0,1].\n\nExample 2:\n\nInput: nums = [1,0,1,0]\nOutput: 10\nExplanation:\nEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.\n\n \nConstraints:\n\n1 <= nums.length <= 105\nnums[i] is either 0 or 1.\n\n", "hints": ["Try using dynamic programming.", "Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.", "The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."], "exampleTestcases": "[0,1,1,1]\n[1,0,1,0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countAlternatingSubarrays(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countAlternatingSubarrays(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countAlternatingSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countAlternatingSubarrays(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountAlternatingSubarrays(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countAlternatingSubarrays = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countAlternatingSubarrays(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countAlternatingSubarrays($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countAlternatingSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countAlternatingSubarrays(nums: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countAlternatingSubarrays(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countAlternatingSubarrays(nums []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_alternating_subarrays(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countAlternatingSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_alternating_subarrays(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-alternating-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_alternating_subarrays(Nums :: [integer()]) -> integer().\ncount_alternating_subarrays(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_alternating_subarrays(nums :: [integer]) :: integer\n  def count_alternating_subarrays(nums) do\n    \n  end\nend"}}}