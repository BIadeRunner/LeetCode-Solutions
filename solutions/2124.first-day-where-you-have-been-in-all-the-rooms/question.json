{"questionId": "2124", "acRate": 37.7230976028676, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1997", "paidOnly": false, "status": "ac", "title": "First Day Where You Have Been in All the Rooms", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "first-day-where-you-have-been-in-all-the-rooms", "content": "<p>There are <code>n</code> rooms you need to visit, labeled from <code>0</code> to <code>n - 1</code>. Each day is labeled, starting from <code>0</code>. You will go in and visit one room a day.</p>\n\n<p>Initially on day <code>0</code>, you visit room <code>0</code>. The <strong>order</strong> you visit the rooms for the coming days is determined by the following <strong>rules</strong> and a given <strong>0-indexed</strong> array <code>nextVisit</code> of length <code>n</code>:</p>\n\n<ul>\n\t<li>Assuming that on a day, you visit room <code>i</code>,</li>\n\t<li>if you have been in room <code>i</code> an <strong>odd</strong> number of times (<strong>including</strong> the current visit), on the <strong>next</strong> day you will visit a room with a <strong>lower or equal room number</strong> specified by <code>nextVisit[i]</code> where <code>0 &lt;= nextVisit[i] &lt;= i</code>;</li>\n\t<li>if you have been in room <code>i</code> an <strong>even</strong> number of times (<strong>including</strong> the current visit), on the <strong>next</strong> day you will visit room <code>(i + 1) mod n</code>.</li>\n</ul>\n\n<p>Return <em>the label of the <strong>first</strong> day where you have been in <strong>all</strong> the rooms</em>. It can be shown that such a day exists. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n&nbsp; On the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n&nbsp; On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,0,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nextVisit = [0,1,2,0]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nextVisit.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nextVisit[i] &lt;= i</code></li>\n</ul>\n", "hints": ["The only way to get to room i+1 is when you are visiting room i and room i has been visited an even number of times.", "After visiting room i an odd number of times, you are required to visit room nextVisit[i] where nextVisit[i] <= i. It takes a fixed amount of days for you to come back from room nextVisit[i] to room i. Then, you have visited room i even number of times.nextVisit[i]", "Can you use Dynamic Programming to avoid recomputing the number of days it takes to visit room i from room nextVisit[i]?"], "exampleTestcases": "[0,0]\n[0,0,2]\n[0,1,2,0]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int firstDayBeenInAllRooms(vector<int>& nextVisit) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int firstDayBeenInAllRooms(int[] nextVisit) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def firstDayBeenInAllRooms(self, nextVisit):\n        \"\"\"\n        :type nextVisit: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int firstDayBeenInAllRooms(int* nextVisit, int nextVisitSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FirstDayBeenInAllRooms(int[] nextVisit) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nextVisit\n * @return {number}\n */\nvar firstDayBeenInAllRooms = function(nextVisit) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function firstDayBeenInAllRooms(nextVisit: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nextVisit\n     * @return Integer\n     */\n    function firstDayBeenInAllRooms($nextVisit) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func firstDayBeenInAllRooms(_ nextVisit: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun firstDayBeenInAllRooms(nextVisit: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int firstDayBeenInAllRooms(List<int> nextVisit) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func firstDayBeenInAllRooms(nextVisit []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} next_visit\n# @return {Integer}\ndef first_day_been_in_all_rooms(next_visit)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def firstDayBeenInAllRooms(nextVisit: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn first_day_been_in_all_rooms(next_visit: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (first-day-been-in-all-rooms nextVisit)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec first_day_been_in_all_rooms(NextVisit :: [integer()]) -> integer().\nfirst_day_been_in_all_rooms(NextVisit) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec first_day_been_in_all_rooms(next_visit :: [integer]) :: integer\n  def first_day_been_in_all_rooms(next_visit) do\n    \n  end\nend"}], "similarQuestionList": []}