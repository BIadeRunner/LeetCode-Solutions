{"questionId": "3517", "acRate": 47.41670602768593, "difficulty": "Medium", "freqBar": 43.72514772206985, "frontendQuestionId": "3243", "paidOnly": false, "status": "ac", "title": "Shortest Distance After Road Addition Queries I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "shortest-distance-after-road-addition-queries-i", "content": "<p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong> road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents the addition of a new <strong>unidirectional</strong> road from city <code>u<sub>i</sub></code> to city <code>v<sub>i</sub></code>. After each query, you need to find the <strong>length</strong> of the <strong>shortest path</strong> from city <code>0</code> to city <code>n - 1</code>.</p>\n\n<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the <em>length of the shortest path</em> from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first </strong><code>i + 1</code> queries.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, queries = [[2,4],[0,2],[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2,1]</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, queries = [[0,3],[0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n\t<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n\t<li>There are no repeated roads among the queries.</li>\n</ul>\n", "hints": ["Maintain the graph and use an efficient shortest path algorithm after each update.", "We use BFS/Dijkstra for each query."], "exampleTestcases": "5\n[[2,4],[0,2],[0,4]]\n4\n[[0,3],[0,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestDistanceAfterQueries(self, n, queries):\n        \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestDistanceAfterQueries(int n, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ShortestDistanceAfterQueries(int n, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar shortestDistanceAfterQueries = function(n, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestDistanceAfterQueries(n: number, queries: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function shortestDistanceAfterQueries($n, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestDistanceAfterQueries(_ n: Int, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestDistanceAfterQueries(n: Int, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> shortestDistanceAfterQueries(int n, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestDistanceAfterQueries(n int, queries [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef shortest_distance_after_queries(n, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestDistanceAfterQueries(n: Int, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_distance_after_queries(n: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (shortest-distance-after-queries n queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec shortest_distance_after_queries(N :: integer(), Queries :: [[integer()]]) -> [integer()].\nshortest_distance_after_queries(N, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_distance_after_queries(n :: integer, queries :: [[integer]]) :: [integer]\n  def shortest_distance_after_queries(n, queries) do\n    \n  end\nend"}], "similarQuestionList": []}