{"question_id": "469", "problem_slug": "convex-polygon", "problem_title": "Convex Polygon", "content": "You are given an array of points on the X-Y plane points where points[i] = [xi, yi]. The points form a polygon when joined sequentially.\nReturn true if this polygon is convex and false otherwise.\nYou may assume the polygon formed by given points is always a simple polygon. In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.\n \nExample 1:\n\n\nInput: points = [[0,0],[0,5],[5,5],[5,0]]\nOutput: true\n\nExample 2:\n\n\nInput: points = [[0,0],[0,10],[10,10],[10,0],[5,5]]\nOutput: false\n\n \nConstraints:\n\n3 <= points.length <= 104\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the given points are unique.\n\n", "hints": [], "exampleTestcases": "[[0,0],[0,5],[5,5],[5,0]]\n[[0,0],[0,10],[10,10],[10,0],[5,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isConvex(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isConvex(List<List<Integer>> points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isConvex(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isConvex(self, points: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isConvex(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsConvex(IList<IList<int>> points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {boolean}\n */\nvar isConvex = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isConvex(points: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Boolean\n     */\n    function isConvex($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isConvex(_ points: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isConvex(points: List<List<Int>>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isConvex(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isConvex(points [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Boolean}\ndef is_convex(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isConvex(points: List[List[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_convex(points: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-convex points)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_convex(Points :: [[integer()]]) -> boolean().\nis_convex(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_convex(points :: [[integer]]) :: boolean\n  def is_convex(points) do\n    \n  end\nend"}}}