{"questionId": "2045", "acRate": 49.74916643724573, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1891", "paidOnly": true, "status": "ac", "title": "Cutting Ribbons", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "cutting-ribbons", "content": "<p>You are given an integer array <code>ribbons</code>, where <code>ribbons[i]</code> represents the length of the <code>i<sup>th</sup></code> ribbon, and an integer <code>k</code>. You may cut any of the ribbons into any number of segments of <strong>positive integer</strong> lengths, or perform no cuts at all.</p>\n\n<ul>\n\t<li>For example, if you have a ribbon of length <code>4</code>, you can:\n\n\t<ul>\n\t\t<li>Keep the ribbon of length <code>4</code>,</li>\n\t\t<li>Cut it into one ribbon of length <code>3</code> and one ribbon of length <code>1</code>,</li>\n\t\t<li>Cut it into two ribbons of length <code>2</code>,</li>\n\t\t<li>Cut it into one ribbon of length <code>2</code> and two ribbons of length <code>1</code>, or</li>\n\t\t<li>Cut it into four ribbons of length <code>1</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Your goal is to obtain <code>k</code> ribbons of all the <strong>same positive integer length</strong>. You are allowed to throw away any excess ribbon as a result of cutting.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible positive integer length that you can obtain </em><code>k</code><em> ribbons of</em><em>, or </em><code>0</code><em> if you cannot obtain </em><code>k</code><em> ribbons of the same length</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ribbons = [9,7,5], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\n- Cut the first ribbon to two ribbons, one of length 5 and one of length 4.\n- Cut the second ribbon to two ribbons, one of length 5 and one of length 2.\n- Keep the third ribbon as it is.\nNow you have 3 ribbons of length 5.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ribbons = [7,5,9], k = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- Cut the first ribbon to two ribbons, one of length 4 and one of length 3.\n- Cut the second ribbon to two ribbons, one of length 4 and one of length 1.\n- Cut the third ribbon to three ribbons, two of length 4 and one of length 1.\nNow you have 4 ribbons of length 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ribbons = [5,7,9], k = 22\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You cannot obtain k ribbons of the same positive integer length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ribbons.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= ribbons[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Use binary search on the answer.", "You can get l/m branches of length m from a branch with length l."], "exampleTestcases": "[9,7,5]\n3\n[7,5,9]\n4\n[5,7,9]\n22", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxLength(vector<int>& ribbons, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxLength(int[] ribbons, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxLength(self, ribbons, k):\n        \"\"\"\n        :type ribbons: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxLength(self, ribbons: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxLength(int* ribbons, int ribbonsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxLength(int[] ribbons, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} ribbons\n * @param {number} k\n * @return {number}\n */\nvar maxLength = function(ribbons, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxLength(ribbons: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $ribbons\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxLength($ribbons, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxLength(_ ribbons: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxLength(ribbons: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxLength(List<int> ribbons, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxLength(ribbons []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} ribbons\n# @param {Integer} k\n# @return {Integer}\ndef max_length(ribbons, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxLength(ribbons: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_length(ribbons: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-length ribbons k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_length(Ribbons :: [integer()], K :: integer()) -> integer().\nmax_length(Ribbons, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_length(ribbons :: [integer], k :: integer) :: integer\n  def max_length(ribbons, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "add-minimum-number-of-rungs", "title": "Add Minimum Number of Rungs", "isPaidOnly": false}]}