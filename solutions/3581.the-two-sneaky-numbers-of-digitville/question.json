{"question_id": "3581", "problem_slug": "the-two-sneaky-numbers-of-digitville", "problem_title": "The Two Sneaky Numbers of Digitville", "content": "In the town of Digitville, there was a list of numbers called nums containing integers from 0 to n - 1. Each number was supposed to appear exactly once in the list, however, two mischievous numbers sneaked in an additional time, making the list longer than usual.\nAs the town detective, your task is to find these two sneaky numbers. Return an array of size two containing the two numbers (in any order), so peace can return to Digitville.\n \nExample 1:\n\nInput: nums = [0,1,1,0]\nOutput: [0,1]\nExplanation:\nThe numbers 0 and 1 each appear twice in the array.\n\nExample 2:\n\nInput: nums = [0,3,2,1,3,2]\nOutput: [2,3]\nExplanation: \nThe numbers 2 and 3 each appear twice in the array.\n\nExample 3:\n\nInput: nums = [7,1,5,4,3,4,6,0,9,5,8,2]\nOutput: [4,5]\nExplanation: \nThe numbers 4 and 5 each appear twice in the array.\n\n \nConstraints:\n\n2 <= n <= 100\nnums.length == n + 2\n0 <= nums[i] < n\nThe input is generated such that nums contains exactly two repeated elements.\n\n", "hints": ["To solve the problem without the extra space, we need to think about how many times each number occurs in relation to the index."], "exampleTestcases": "[0,1,1,0]\n[0,3,2,1,3,2]\n[7,1,5,4,3,4,6,0,9,5,8,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getSneakyNumbers(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] getSneakyNumbers(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getSneakyNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getSneakyNumbers(int* nums, int numsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] GetSneakyNumbers(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar getSneakyNumbers = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getSneakyNumbers(nums: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function getSneakyNumbers($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getSneakyNumbers(_ nums: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getSneakyNumbers(nums: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> getSneakyNumbers(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getSneakyNumbers(nums []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef get_sneaky_numbers(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getSneakyNumbers(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_sneaky_numbers(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-sneaky-numbers nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_sneaky_numbers(Nums :: [integer()]) -> [integer()].\nget_sneaky_numbers(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_sneaky_numbers(nums :: [integer]) :: [integer]\n  def get_sneaky_numbers(nums) do\n    \n  end\nend"}}}