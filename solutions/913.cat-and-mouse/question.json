{"questionId": "949", "acRate": 33.77669902912621, "difficulty": "Hard", "freqBar": 44.1133555767695, "frontendQuestionId": "913", "paidOnly": false, "status": "ac", "title": "Cat and Mouse", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}, {"name": "Game Theory", "id": "VG9waWNUYWdOb2RlOjYxMDcz", "slug": "game-theory"}], "titleSlug": "cat-and-mouse", "content": "<p>A game on an <strong>undirected</strong> graph is played by two players, Mouse and Cat, who alternate turns.</p>\n\n<p>The graph is given as follows: <code>graph[a]</code> is a list of all nodes <code>b</code> such that <code>ab</code> is an edge of the graph.</p>\n\n<p>The mouse starts at node <code>1</code> and goes first, the cat starts at node <code>2</code> and goes second, and there is a hole at node <code>0</code>.</p>\n\n<p>During each player&#39;s turn, they <strong>must</strong> travel along one&nbsp;edge of the graph that meets where they are.&nbsp; For example, if the Mouse is at node 1, it <strong>must</strong> travel to any node in <code>graph[1]</code>.</p>\n\n<p>Additionally, it is not allowed for the Cat to travel to the Hole (node <code>0</code>).</p>\n\n<p>Then, the game can end in three&nbsp;ways:</p>\n\n<ul>\n\t<li>If ever the Cat occupies the same node as the Mouse, the Cat wins.</li>\n\t<li>If ever the Mouse reaches the Hole, the Mouse wins.</li>\n\t<li>If ever a position is repeated (i.e., the players are in the same position as a previous turn, and&nbsp;it is the same player&#39;s turn to move), the game is a draw.</li>\n</ul>\n\n<p>Given a <code>graph</code>, and assuming both players play optimally, return</p>\n\n<ul>\n\t<li><code>1</code>&nbsp;if the mouse wins the game,</li>\n\t<li><code>2</code>&nbsp;if the cat wins the game, or</li>\n\t<li><code>0</code>&nbsp;if the game is a draw.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0],[3],[0,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= graph.length &lt;= 50</code></li>\n\t<li><code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li>\n\t<li><code>graph[i][j] != i</code></li>\n\t<li><code>graph[i]</code> is unique.</li>\n\t<li>The mouse and the cat can always move.&nbsp;</li>\n</ul>\n", "hints": [], "exampleTestcases": "[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n[[1,3],[0],[3],[0,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int catMouseGame(vector<vector<int>>& graph) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int catMouseGame(int[][] graph) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def catMouseGame(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int catMouseGame(int** graph, int graphSize, int* graphColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CatMouseGame(int[][] graph) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar catMouseGame = function(graph) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function catMouseGame(graph: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function catMouseGame($graph) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func catMouseGame(_ graph: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun catMouseGame(graph: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int catMouseGame(List<List<int>> graph) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func catMouseGame(graph [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer}\ndef cat_mouse_game(graph)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def catMouseGame(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn cat_mouse_game(graph: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (cat-mouse-game graph)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec cat_mouse_game(Graph :: [[integer()]]) -> integer().\ncat_mouse_game(Graph) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec cat_mouse_game(graph :: [[integer]]) :: integer\n  def cat_mouse_game(graph) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "isPaidOnly": false}]}