{"question_id": "2694", "problem_slug": "find-the-maximum-divisibility-score", "problem_title": "Find the Maximum Divisibility Score", "content": "You are given two integer arrays nums and divisors.\nThe divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i].\nReturn the integer divisors[i] with the maximum divisibility score. If multiple integers have the maximum score, return the smallest one.\n \nExample 1:\n\nInput: nums = [2,9,15,50], divisors = [5,3,7,2]\nOutput: 2\nExplanation:\nThe divisibility score of divisors[0] is 2 since nums[2] and nums[3] are divisible by 5.\nThe divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 3.\nThe divisibility score of divisors[2] is 0 since none of the numbers in nums is divisible by 7.\nThe divisibility score of divisors[3] is 2 since nums[0] and nums[3] are divisible by 2.\nAs divisors[0], divisors[1], and divisors[3] have the same divisibility score, we return the smaller one which is divisors[3].\n\nExample 2:\n\nInput: nums = [4,7,9,3,9], divisors = [5,2,3]\nOutput: 3\nExplanation:\nThe divisibility score of divisors[0] is 0 since none of numbers in nums is divisible by 5.\nThe divisibility score of divisors[1] is 1 since only nums[0] is divisible by 2.\nThe divisibility score of divisors[2] is 3 since nums[2], nums[3] and nums[4] are divisible by 3.\n\nExample 3:\n\nInput: nums = [20,14,21,10], divisors = [10,16,20]\nOutput: 10\nExplanation:\nThe divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 10.\nThe divisibility score of divisors[1] is 0 since none of the numbers in nums is divisible by 16.\nThe divisibility score of divisors[2] is 1 since nums[0] is divisible by 20.\n\n \nConstraints:\n\n1 <= nums.length, divisors.length <= 1000\n1 <= nums[i], divisors[i] <= 109\n\n", "hints": ["Consider counting for each element in divisors the count of elements in nums divisible by it using bruteforce.", "After counting for each divisor, take the one with the maximum count. In case of a tie, take the minimum one of them."], "exampleTestcases": "[2,9,15,50]\n[5,3,7,2]\n[4,7,9,3,9]\n[5,2,3]\n[20,14,21,10]\n[10,16,20]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxDivScore(int[] nums, int[] divisors) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxDivScore(self, nums, divisors):\n        \"\"\"\n        :type nums: List[int]\n        :type divisors: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxDivScore(int* nums, int numsSize, int* divisors, int divisorsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxDivScore(int[] nums, int[] divisors) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} divisors\n * @return {number}\n */\nvar maxDivScore = function(nums, divisors) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxDivScore(nums: number[], divisors: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $divisors\n     * @return Integer\n     */\n    function maxDivScore($nums, $divisors) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxDivScore(_ nums: [Int], _ divisors: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxDivScore(nums: IntArray, divisors: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxDivScore(List<int> nums, List<int> divisors) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxDivScore(nums []int, divisors []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} divisors\n# @return {Integer}\ndef max_div_score(nums, divisors)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxDivScore(nums: Array[Int], divisors: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_div_score(nums: Vec<i32>, divisors: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-div-score nums divisors)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_div_score(Nums :: [integer()], Divisors :: [integer()]) -> integer().\nmax_div_score(Nums, Divisors) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_div_score(nums :: [integer], divisors :: [integer]) :: integer\n  def max_div_score(nums, divisors) do\n    \n  end\nend"}}}