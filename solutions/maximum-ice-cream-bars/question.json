{"questionId": "1961", "acRate": 73.83199037937511, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1833", "paidOnly": false, "status": "ac", "title": "Maximum Ice Cream Bars", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting Sort", "id": "VG9waWNUYWdOb2RlOjYxMDcy", "slug": "counting-sort"}], "titleSlug": "maximum-ice-cream-bars", "content": "<p>It is a sweltering summer day, and a boy wants to buy some ice cream bars.</p>\n\n<p>At the store, there are <code>n</code> ice cream bars. You are given an array <code>costs</code> of length <code>n</code>, where <code>costs[i]</code> is the price of the <code>i<sup>th</sup></code> ice cream bar in coins. The boy initially has <code>coins</code> coins to spend, and he wants to buy as many ice cream bars as possible.&nbsp;</p>\n\n<p><strong>Note:</strong> The boy can buy the ice cream bars in any order.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of ice cream bars the boy can buy with </em><code>coins</code><em> coins.</em></p>\n\n<p>You must solve the problem by counting sort.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,3,2,4,1], coins = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [10,6,8,7,7,8], coins = 5\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>The boy cannot afford any of the ice cream bars.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,6,3,1,2,5], coins = 20\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>costs.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= coins &lt;= 10<sup>8</sup></code></li>\n</ul>\n", "hints": ["It is always optimal to buy the least expensive ice cream bar first.", "Sort the prices so that the cheapest ice cream bar comes first."], "exampleTestcases": "[1,3,2,4,1]\n7\n[10,6,8,7,7,8]\n5\n[1,6,3,1,2,5]\n20", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxIceCream(vector<int>& costs, int coins) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxIceCream(self, costs, coins):\n        \"\"\"\n        :type costs: List[int]\n        :type coins: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxIceCream(int* costs, int costsSize, int coins) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxIceCream(int[] costs, int coins) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} costs\n * @param {number} coins\n * @return {number}\n */\nvar maxIceCream = function(costs, coins) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxIceCream(costs: number[], coins: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $costs\n     * @param Integer $coins\n     * @return Integer\n     */\n    function maxIceCream($costs, $coins) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxIceCream(_ costs: [Int], _ coins: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxIceCream(costs: IntArray, coins: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxIceCream(List<int> costs, int coins) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxIceCream(costs []int, coins int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} costs\n# @param {Integer} coins\n# @return {Integer}\ndef max_ice_cream(costs, coins)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxIceCream(costs: Array[Int], coins: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_ice_cream(costs: Vec<i32>, coins: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-ice-cream costs coins)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_ice_cream(Costs :: [integer()], Coins :: integer()) -> integer().\nmax_ice_cream(Costs, Coins) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_ice_cream(costs :: [integer], coins :: integer) :: integer\n  def max_ice_cream(costs, coins) do\n    \n  end\nend"}], "similarQuestionList": []}