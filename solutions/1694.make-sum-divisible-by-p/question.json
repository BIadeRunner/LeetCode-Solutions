{"question_id": "1694", "problem_slug": "make-sum-divisible-by-p", "problem_title": "Make Sum Divisible by P", "content": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.\n \nExample 1:\n\nInput: nums = [3,1,4,2], p = 6\nOutput: 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n\nExample 2:\n\nInput: nums = [6,3,5,2], p = 9\nOutput: 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n\nExample 3:\n\nInput: nums = [1,2,3], p = 3\nOutput: 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= p <= 109\n\n", "hints": ["Use prefix sums to calculate the subarray sums.", "Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k?", "Use a map to keep track of the rightmost index for every prefix sum % p."], "exampleTestcases": "[3,1,4,2]\n6\n[6,3,5,2]\n9\n[1,2,3]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSubarray(vector<int>& nums, int p) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minSubarray(int[] nums, int p) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSubarray(self, nums, p):\n        \"\"\"\n        :type nums: List[int]\n        :type p: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minSubarray(int* nums, int numsSize, int p) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinSubarray(int[] nums, int p) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} p\n * @return {number}\n */\nvar minSubarray = function(nums, p) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSubarray(nums: number[], p: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $p\n     * @return Integer\n     */\n    function minSubarray($nums, $p) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSubarray(_ nums: [Int], _ p: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSubarray(nums: IntArray, p: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minSubarray(List<int> nums, int p) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSubarray(nums []int, p int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} p\n# @return {Integer}\ndef min_subarray(nums, p)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSubarray(nums: Array[Int], p: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_subarray(nums: Vec<i32>, p: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-subarray nums p)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_subarray(Nums :: [integer()], P :: integer()) -> integer().\nmin_subarray(Nums, P) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_subarray(nums :: [integer], p :: integer) :: integer\n  def min_subarray(nums, p) do\n    \n  end\nend"}}}