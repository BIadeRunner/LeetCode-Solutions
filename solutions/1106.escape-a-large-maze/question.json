{"question_id": "1106", "problem_slug": "escape-a-large-maze", "problem_title": "Escape a Large Maze", "content": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).\nWe start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).\nEach move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.\nReturn true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.\n \nExample 1:\n\nInput: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\nOutput: false\nExplanation: The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid.\n\nExample 2:\n\nInput: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation: Because there are no blocked cells, it is possible to reach the target square.\n\n \nConstraints:\n\n0 <= blocked.length <= 200\nblocked[i].length == 2\n0 <= xi, yi < 106\nsource.length == target.length == 2\n0 <= sx, sy, tx, ty < 106\nsource != target\nIt is guaranteed that source and target are not blocked.\n\n", "hints": ["If we become stuck, there's either a loop around the source or around the target.", "If there is a loop around say, the source, what is the maximum number of squares it can have?"], "exampleTestcases": "[[0,1],[1,0]]\n[0,0]\n[0,2]\n[]\n[0,0]\n[999999,999999]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isEscapePossible(self, blocked, source, target):\n        \"\"\"\n        :type blocked: List[List[int]]\n        :type source: List[int]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isEscapePossible(int** blocked, int blockedSize, int* blockedColSize, int* source, int sourceSize, int* target, int targetSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsEscapePossible(int[][] blocked, int[] source, int[] target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} blocked\n * @param {number[]} source\n * @param {number[]} target\n * @return {boolean}\n */\nvar isEscapePossible = function(blocked, source, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isEscapePossible(blocked: number[][], source: number[], target: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $blocked\n     * @param Integer[] $source\n     * @param Integer[] $target\n     * @return Boolean\n     */\n    function isEscapePossible($blocked, $source, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isEscapePossible(_ blocked: [[Int]], _ source: [Int], _ target: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isEscapePossible(blocked: Array<IntArray>, source: IntArray, target: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isEscapePossible(List<List<int>> blocked, List<int> source, List<int> target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isEscapePossible(blocked [][]int, source []int, target []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} blocked\n# @param {Integer[]} source\n# @param {Integer[]} target\n# @return {Boolean}\ndef is_escape_possible(blocked, source, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isEscapePossible(blocked: Array[Array[Int]], source: Array[Int], target: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_escape_possible(blocked: Vec<Vec<i32>>, source: Vec<i32>, target: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-escape-possible blocked source target)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_escape_possible(Blocked :: [[integer()]], Source :: [integer()], Target :: [integer()]) -> boolean().\nis_escape_possible(Blocked, Source, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_escape_possible(blocked :: [[integer]], source :: [integer], target :: [integer]) :: boolean\n  def is_escape_possible(blocked, source, target) do\n    \n  end\nend"}}}