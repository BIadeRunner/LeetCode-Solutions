{"question_id": "1033", "problem_slug": "broken-calculator", "problem_title": "Broken Calculator", "content": "There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\n\nmultiply the number on display by 2, or\nsubtract 1 from the number on display.\n\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.\n \nExample 1:\n\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\n\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\n\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n \nConstraints:\n\n1 <= startValue, target <= 109\n\n", "hints": [], "exampleTestcases": "2\n3\n5\n8\n3\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int brokenCalc(int startValue, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int brokenCalc(int startValue, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def brokenCalc(self, startValue, target):\n        \"\"\"\n        :type startValue: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int brokenCalc(int startValue, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BrokenCalc(int startValue, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} startValue\n * @param {number} target\n * @return {number}\n */\nvar brokenCalc = function(startValue, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function brokenCalc(startValue: number, target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $startValue\n     * @param Integer $target\n     * @return Integer\n     */\n    function brokenCalc($startValue, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func brokenCalc(_ startValue: Int, _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun brokenCalc(startValue: Int, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int brokenCalc(int startValue, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func brokenCalc(startValue int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} start_value\n# @param {Integer} target\n# @return {Integer}\ndef broken_calc(start_value, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def brokenCalc(startValue: Int, target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn broken_calc(start_value: i32, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (broken-calc startValue target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec broken_calc(StartValue :: integer(), Target :: integer()) -> integer().\nbroken_calc(StartValue, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec broken_calc(start_value :: integer, target :: integer) :: integer\n  def broken_calc(start_value, target) do\n    \n  end\nend"}}}