{"questionId": "1346", "acRate": 23.09373482272948, "difficulty": "Medium", "freqBar": 27.523036221123647, "frontendQuestionId": "2202", "paidOnly": false, "status": "ac", "title": "Maximize the Topmost Element After K Moves", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "maximize-the-topmost-element-after-k-moves", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> representing the contents of a <b>pile</b>, where <code>nums[0]</code> is the topmost element of the pile.</p>\n\n<p>In one move, you can perform <strong>either</strong> of the following:</p>\n\n<ul>\n\t<li>If the pile is not empty, <strong>remove</strong> the topmost element of the pile.</li>\n\t<li>If there are one or more removed elements, <strong>add</strong> any one of them back onto the pile. This element becomes the new topmost element.</li>\n</ul>\n\n<p>You are also given an integer <code>k</code>, which denotes the total number of moves to be made.</p>\n\n<p>Return <em>the <strong>maximum value</strong> of the topmost element of the pile possible after <strong>exactly</strong></em> <code>k</code> <em>moves</em>. In case it is not possible to obtain a non-empty pile after <code>k</code> moves, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,2,4,0,6], k = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["For each index i, how can we check if nums[i] can be present at the top of the pile or not after k moves?", "For which conditions will we end up with an empty pile?"], "exampleTestcases": "[5,2,2,4,0,6]\n4\n[2]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumTop(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumTop(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumTop(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumTop(self, nums: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumTop(int* nums, int numsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumTop(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumTop = function(nums, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumTop(nums: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumTop($nums, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumTop(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumTop(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumTop(List<int> nums, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumTop(nums []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_top(nums, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumTop(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_top(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-top nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_top(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_top(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_top(nums :: [integer], k :: integer) :: integer\n  def maximum_top(nums, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "gas-station", "title": "Gas Station", "isPaidOnly": false}]}