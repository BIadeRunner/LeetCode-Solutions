{"question_id": "3046", "problem_slug": "minimum-operations-to-make-a-special-number", "problem_title": "Minimum Operations to Make a Special Number", "content": "You are given a 0-indexed string num representing a non-negative integer.\nIn one operation, you can pick any digit of num and delete it. Note that if you delete all the digits of num, num becomes 0.\nReturn the minimum number of operations required to make num special.\nAn integer x is considered special if it is divisible by 25.\n \nExample 1:\n\nInput: num = \"2245047\"\nOutput: 2\nExplanation: Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\nExample 2:\n\nInput: num = \"2908305\"\nOutput: 3\nExplanation: Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\nExample 3:\n\nInput: num = \"10\"\nOutput: 1\nExplanation: Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n\n \nConstraints:\n\n1 <= num.length <= 100\nnum only consists of digits '0' through '9'.\nnum does not contain any leading zeros.\n\n", "hints": ["If <code>num</code> contains a single zero digit then the answer is at most <code>n - 1</code>.", "A number is divisible by <code>25</code> if its last two digits are <code>75</code>, <code>50</code>, <code>25</code>, or <code>00</code>.", "Iterate over all possible pairs of indices <code>i &lt; j</code> such that <code>num[i] * 10 + num[j]</code> is in <code>[00,25,50,75]</code>. Then, set the answer to <code> min(answer, n - i - 2) </code>."], "exampleTestcases": "\"2245047\"\n\"2908305\"\n\"10\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumOperations(string num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumOperations(String num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumOperations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumOperations(char* num){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumOperations(string num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {number}\n */\nvar minimumOperations = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumOperations(num: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Integer\n     */\n    function minimumOperations($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumOperations(_ num: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumOperations(num: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumOperations(String num) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumOperations(num string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num\n# @return {Integer}\ndef minimum_operations(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumOperations(num: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_operations(num: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-operations num)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_operations(Num :: unicode:unicode_binary()) -> integer().\nminimum_operations(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_operations(num :: String.t) :: integer\n  def minimum_operations(num) do\n    \n  end\nend"}}}