{"question_id": "2907", "problem_slug": "array-prototype-foreach", "problem_title": "Array Prototype ForEach", "content": "Write your version of method forEach that enhances all arrays such that you can call the array.forEach(callback, context) method on any array and it will execute callback on each element of the array. Method forEach should not return anything.\ncallback accepts the following arguments:\n\ncurrentValue - represents the current element being processed in the array. It is the value of the element in the current iteration.\nindex - represents the index of the current element being processed in the array.\narray - represents the array itself, allowing access to the entire array within the callback function.\n\nThe context is the object that should be passed as the function context parameter to the callback function, ensuring that the this keyword within the callback function refers to this context object.\nTry to implement it without using the built-in array methods.\n \nExample 1:\n\nInput: \narr = [1,2,3], \ncallback = (val, i, arr) => arr[i] = val * 2, \ncontext = {\"context\":true}\nOutput: [2,4,6]\nExplanation: \narr.forEach(callback, context)  \nconsole.log(arr) // [2,4,6]\n\nThe callback is executed on each element of the array.\n\nExample 2:\n\nInput: \narr = [true, true, false, false], \ncallback = (val, i, arr) => arr[i] = this, \ncontext = {\"context\": false}\nOutput: [{\"context\":false},{\"context\":false},{\"context\":false},{\"context\":false}]\nExplanation: \narr.forEach(callback, context) \nconsole.log(arr) // [{\"context\":false},{\"context\":false},{\"context\":false},{\"context\":false}]\n\nThe callback is executed on each element of the array with the right context.\n\nExample 3:\n\nInput: \narr = [true, true, false, false], \ncallback = (val, i, arr) => arr[i] = !val, \ncontext = {\"context\": 5}\nOutput: [false,false,true,true]\n\n \nConstraints:\n\narr is a valid JSON array\ncontext is a valid JSON object\nfn is a function\n0 <= arr.length <= 105\n\n", "hints": [], "exampleTestcases": "[1,2,3]\nfunction(val, i, arr){ arr[i] = val * 2 }\n{\"context\": true}\n[true, true, false, false]\nfunction(val, i, arr){ arr[i] = this }\n{\"context\": false}\n[true, true, false, false]\nfunction(val, i, arr){ arr[i] = !val }\n{\"context\": 5}", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Function} callback\n * @param {Object} context\n * @return {void}\n */\nArray.prototype.forEach = function(callback, context) {\n    \n}\n\n/**\n *  const arr = [1,2,3];\n *  const callback = (val, i, arr) => arr[i] = val * 2;\n *  const context = {\"context\":true};\n *\n *  arr.forEach(callback, context)  \n *\n *  console.log(arr) // [2,4,6]\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Callback = (currentValue: JSONValue, index: number, array: JSONValue[]) => any\ntype Context = Record<string, JSONValue>\n\nArray.prototype.forEach = function(callback: Callback, context: Context): void {\n    \n}\n\n/**\n *  const arr = [1,2,3];\n *  const callback = (val, i, arr) => arr[i] = val * 2;\n *  const context = {\"context\":true};\n *\n *  arr.forEach(callback, context)  \n *\n *  console.log(arr) // [2,4,6]\n */"}}}