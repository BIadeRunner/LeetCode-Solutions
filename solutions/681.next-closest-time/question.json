{"question_id": "681", "problem_slug": "next-closest-time", "problem_title": "Next Closest Time", "content": "Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\nYou may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.\n \nExample 1:\n\nInput: time = \"19:34\"\nOutput: \"19:39\"\nExplanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.\nIt is not 19:33, because this occurs 23 hours and 59 minutes later.\n\nExample 2:\n\nInput: time = \"23:59\"\nOutput: \"22:22\"\nExplanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.\nIt may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\n\n \nConstraints:\n\ntime.length == 5\ntime is a valid time in the form \"HH:MM\".\n0 <= HH < 24\n0 <= MM < 60\n\n", "hints": [], "exampleTestcases": "\"19:34\"\n\"23:59\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string nextClosestTime(string time) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String nextClosestTime(String time) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nextClosestTime(self, time: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* nextClosestTime(char* time) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string NextClosestTime(string time) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} time\n * @return {string}\n */\nvar nextClosestTime = function(time) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nextClosestTime(time: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $time\n     * @return String\n     */\n    function nextClosestTime($time) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nextClosestTime(_ time: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nextClosestTime(time: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String nextClosestTime(String time) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nextClosestTime(time string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} time\n# @return {String}\ndef next_closest_time(time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nextClosestTime(time: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn next_closest_time(time: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (next-closest-time time)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec next_closest_time(Time :: unicode:unicode_binary()) -> unicode:unicode_binary().\nnext_closest_time(Time) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec next_closest_time(time :: String.t) :: String.t\n  def next_closest_time(time) do\n    \n  end\nend"}}}