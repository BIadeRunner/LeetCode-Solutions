{"questionId": "681", "acRate": 46.81837283577072, "difficulty": "Medium", "freqBar": 51.074041806537416, "frontendQuestionId": "681", "paidOnly": true, "status": "ac", "title": "Next Closest Time", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "next-closest-time", "content": "<p>Given a <code>time</code> represented in the format <code>&quot;HH:MM&quot;</code>, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>\n\n<p>You may assume the given input string is always valid. For example, <code>&quot;01:34&quot;</code>, <code>&quot;12:09&quot;</code> are all valid. <code>&quot;1:34&quot;</code>, <code>&quot;12:9&quot;</code> are all invalid.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;19:34&quot;\n<strong>Output:</strong> &quot;19:39&quot;\n<strong>Explanation:</strong> The next closest time choosing from digits <strong>1</strong>, <strong>9</strong>, <strong>3</strong>, <strong>4</strong>, is <strong>19:39</strong>, which occurs 5 minutes later.\nIt is not <strong>19:33</strong>, because this occurs 23 hours and 59 minutes later.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;23:59&quot;\n<strong>Output:</strong> &quot;22:22&quot;\n<strong>Explanation:</strong> The next closest time choosing from digits <strong>2</strong>, <strong>3</strong>, <strong>5</strong>, <strong>9</strong>, is <strong>22:22</strong>.\nIt may be assumed that the returned time is next day&#39;s time since it is smaller than the input time numerically.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>time.length == 5</code></li>\n\t<li><code>time</code> is a valid time in the form <code>&quot;HH:MM&quot;</code>.</li>\n\t<li><code>0 &lt;= HH &lt; 24</code></li>\n\t<li><code>0 &lt;= MM &lt; 60</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"19:34\"\n\"23:59\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string nextClosestTime(string time) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String nextClosestTime(String time) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextClosestTime(self, time: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* nextClosestTime(char* time) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string NextClosestTime(string time) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} time\n * @return {string}\n */\nvar nextClosestTime = function(time) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextClosestTime(time: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $time\n     * @return String\n     */\n    function nextClosestTime($time) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextClosestTime(_ time: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextClosestTime(time: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String nextClosestTime(String time) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func nextClosestTime(time string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} time\n# @return {String}\ndef next_closest_time(time)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextClosestTime(time: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_closest_time(time: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (next-closest-time time)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec next_closest_time(Time :: unicode:unicode_binary()) -> unicode:unicode_binary().\nnext_closest_time(Time) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec next_closest_time(time :: String.t) :: String.t\n  def next_closest_time(time) do\n    \n  end\nend"}], "similarQuestionList": []}