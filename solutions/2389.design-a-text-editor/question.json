{"questionId": "2389", "acRate": 46.07587212258874, "difficulty": "Hard", "freqBar": 64.96821201220276, "frontendQuestionId": "2296", "paidOnly": false, "status": "ac", "title": "Design a Text Editor", "topicTags": [{"name": "Linked List", "id": "VG9waWNUYWdOb2RlOjc=", "slug": "linked-list"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}, {"name": "Doubly-Linked List", "id": "VG9waWNUYWdOb2RlOjYxMDU4", "slug": "doubly-linked-list"}], "titleSlug": "design-a-text-editor", "content": "<p>Design a text editor with a cursor that can do the following:</p>\n\n<ul>\n\t<li><strong>Add</strong> text to where the cursor is.</li>\n\t<li><strong>Delete</strong> text from where the cursor is (simulating the backspace key).</li>\n\t<li><strong>Move</strong> the cursor either left or right.</li>\n</ul>\n\n<p>When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that <code>0 &lt;= cursor.position &lt;= currentText.length</code> always holds.</p>\n\n<p>Implement the <code>TextEditor</code> class:</p>\n\n<ul>\n\t<li><code>TextEditor()</code> Initializes the object with empty text.</li>\n\t<li><code>void addText(string text)</code> Appends <code>text</code> to where the cursor is. The cursor ends to the right of <code>text</code>.</li>\n\t<li><code>int deleteText(int k)</code> Deletes <code>k</code> characters to the left of the cursor. Returns the number of characters actually deleted.</li>\n\t<li><code>string cursorLeft(int k)</code> Moves the cursor to the left <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n\t<li><code>string cursorRight(int k)</code> Moves the cursor to the right <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TextEditor&quot;, &quot;addText&quot;, &quot;deleteText&quot;, &quot;addText&quot;, &quot;cursorRight&quot;, &quot;cursorLeft&quot;, &quot;deleteText&quot;, &quot;cursorLeft&quot;, &quot;cursorRight&quot;]\n[[], [&quot;leetcode&quot;], [4], [&quot;practice&quot;], [3], [8], [10], [2], [6]]\n<strong>Output</strong>\n[null, null, 4, null, &quot;etpractice&quot;, &quot;leet&quot;, 4, &quot;&quot;, &quot;practi&quot;]\n\n<strong>Explanation</strong>\nTextEditor textEditor = new TextEditor(); // The current text is &quot;|&quot;. (The &#39;|&#39; character represents the cursor)\ntextEditor.addText(&quot;leetcode&quot;); // The current text is &quot;leetcode|&quot;.\ntextEditor.deleteText(4); // return 4\n                          // The current text is &quot;leet|&quot;. \n                          // 4 characters were deleted.\ntextEditor.addText(&quot;practice&quot;); // The current text is &quot;leetpractice|&quot;. \ntextEditor.cursorRight(3); // return &quot;etpractice&quot;\n                           // The current text is &quot;leetpractice|&quot;. \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // &quot;etpractice&quot; is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return &quot;leet&quot;\n                          // The current text is &quot;leet|practice&quot;.\n                          // &quot;leet&quot; is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is &quot;|practice&quot;.\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return &quot;&quot;\n                          // The current text is &quot;|practice&quot;.\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // &quot;&quot; is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return &quot;practi&quot;\n                           // The current text is &quot;practi|ce&quot;.\n                           // &quot;practi&quot; is the last min(10, 6) = 6 characters to the left of the cursor.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length, k &lt;= 40</code></li>\n\t<li><code>text</code> consists of lowercase English letters.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>addText</code>, <code>deleteText</code>, <code>cursorLeft</code> and <code>cursorRight</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you find a solution with time complexity of <code>O(k)</code> per call?</p>\n", "hints": ["Making changes in the middle of some data structures is generally harder than changing the front/back of the same data structure.", "Can you partition your data structure (text with cursor) into two parts, such that each part changes only near its ends?", "Can you think of a data structure that supports efficient removals/additions to the front/back?", "Try to solve the problem with two deques by maintaining the prefix and the suffix separately."], "exampleTestcases": "[\"TextEditor\",\"addText\",\"deleteText\",\"addText\",\"cursorRight\",\"cursorLeft\",\"deleteText\",\"cursorLeft\",\"cursorRight\"]\n[[],[\"leetcode\"],[4],[\"practice\"],[3],[8],[10],[2],[6]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class TextEditor {\npublic:\n    TextEditor() {\n        \n    }\n    \n    void addText(string text) {\n        \n    }\n    \n    int deleteText(int k) {\n        \n    }\n    \n    string cursorLeft(int k) {\n        \n    }\n    \n    string cursorRight(int k) {\n        \n    }\n};\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * TextEditor* obj = new TextEditor();\n * obj->addText(text);\n * int param_2 = obj->deleteText(k);\n * string param_3 = obj->cursorLeft(k);\n * string param_4 = obj->cursorRight(k);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class TextEditor {\n\n    public TextEditor() {\n        \n    }\n    \n    public void addText(String text) {\n        \n    }\n    \n    public int deleteText(int k) {\n        \n    }\n    \n    public String cursorLeft(int k) {\n        \n    }\n    \n    public String cursorRight(int k) {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * TextEditor obj = new TextEditor();\n * obj.addText(text);\n * int param_2 = obj.deleteText(k);\n * String param_3 = obj.cursorLeft(k);\n * String param_4 = obj.cursorRight(k);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class TextEditor(object):\n\n    def __init__(self):\n        \n\n    def addText(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: None\n        \"\"\"\n        \n\n    def deleteText(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n\n    def cursorLeft(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n\n    def cursorRight(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your TextEditor object will be instantiated and called as such:\n# obj = TextEditor()\n# obj.addText(text)\n# param_2 = obj.deleteText(k)\n# param_3 = obj.cursorLeft(k)\n# param_4 = obj.cursorRight(k)"}, {"lang": "Python3", "langSlug": "python3", "code": "class TextEditor:\n\n    def __init__(self):\n        \n\n    def addText(self, text: str) -> None:\n        \n\n    def deleteText(self, k: int) -> int:\n        \n\n    def cursorLeft(self, k: int) -> str:\n        \n\n    def cursorRight(self, k: int) -> str:\n        \n\n\n# Your TextEditor object will be instantiated and called as such:\n# obj = TextEditor()\n# obj.addText(text)\n# param_2 = obj.deleteText(k)\n# param_3 = obj.cursorLeft(k)\n# param_4 = obj.cursorRight(k)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} TextEditor;\n\n\nTextEditor* textEditorCreate() {\n    \n}\n\nvoid textEditorAddText(TextEditor* obj, char* text) {\n    \n}\n\nint textEditorDeleteText(TextEditor* obj, int k) {\n    \n}\n\nchar* textEditorCursorLeft(TextEditor* obj, int k) {\n    \n}\n\nchar* textEditorCursorRight(TextEditor* obj, int k) {\n    \n}\n\nvoid textEditorFree(TextEditor* obj) {\n    \n}\n\n/**\n * Your TextEditor struct will be instantiated and called as such:\n * TextEditor* obj = textEditorCreate();\n * textEditorAddText(obj, text);\n \n * int param_2 = textEditorDeleteText(obj, k);\n \n * char* param_3 = textEditorCursorLeft(obj, k);\n \n * char* param_4 = textEditorCursorRight(obj, k);\n \n * textEditorFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class TextEditor {\n\n    public TextEditor() {\n        \n    }\n    \n    public void AddText(string text) {\n        \n    }\n    \n    public int DeleteText(int k) {\n        \n    }\n    \n    public string CursorLeft(int k) {\n        \n    }\n    \n    public string CursorRight(int k) {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * TextEditor obj = new TextEditor();\n * obj.AddText(text);\n * int param_2 = obj.DeleteText(k);\n * string param_3 = obj.CursorLeft(k);\n * string param_4 = obj.CursorRight(k);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar TextEditor = function() {\n    \n};\n\n/** \n * @param {string} text\n * @return {void}\n */\nTextEditor.prototype.addText = function(text) {\n    \n};\n\n/** \n * @param {number} k\n * @return {number}\n */\nTextEditor.prototype.deleteText = function(k) {\n    \n};\n\n/** \n * @param {number} k\n * @return {string}\n */\nTextEditor.prototype.cursorLeft = function(k) {\n    \n};\n\n/** \n * @param {number} k\n * @return {string}\n */\nTextEditor.prototype.cursorRight = function(k) {\n    \n};\n\n/** \n * Your TextEditor object will be instantiated and called as such:\n * var obj = new TextEditor()\n * obj.addText(text)\n * var param_2 = obj.deleteText(k)\n * var param_3 = obj.cursorLeft(k)\n * var param_4 = obj.cursorRight(k)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class TextEditor {\n    constructor() {\n        \n    }\n\n    addText(text: string): void {\n        \n    }\n\n    deleteText(k: number): number {\n        \n    }\n\n    cursorLeft(k: number): string {\n        \n    }\n\n    cursorRight(k: number): string {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * var obj = new TextEditor()\n * obj.addText(text)\n * var param_2 = obj.deleteText(k)\n * var param_3 = obj.cursorLeft(k)\n * var param_4 = obj.cursorRight(k)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class TextEditor {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $text\n     * @return NULL\n     */\n    function addText($text) {\n        \n    }\n  \n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function deleteText($k) {\n        \n    }\n  \n    /**\n     * @param Integer $k\n     * @return String\n     */\n    function cursorLeft($k) {\n        \n    }\n  \n    /**\n     * @param Integer $k\n     * @return String\n     */\n    function cursorRight($k) {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * $obj = TextEditor();\n * $obj->addText($text);\n * $ret_2 = $obj->deleteText($k);\n * $ret_3 = $obj->cursorLeft($k);\n * $ret_4 = $obj->cursorRight($k);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass TextEditor {\n\n    init() {\n        \n    }\n    \n    func addText(_ text: String) {\n        \n    }\n    \n    func deleteText(_ k: Int) -> Int {\n        \n    }\n    \n    func cursorLeft(_ k: Int) -> String {\n        \n    }\n    \n    func cursorRight(_ k: Int) -> String {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * let obj = TextEditor()\n * obj.addText(text)\n * let ret_2: Int = obj.deleteText(k)\n * let ret_3: String = obj.cursorLeft(k)\n * let ret_4: String = obj.cursorRight(k)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class TextEditor() {\n\n    fun addText(text: String) {\n        \n    }\n\n    fun deleteText(k: Int): Int {\n        \n    }\n\n    fun cursorLeft(k: Int): String {\n        \n    }\n\n    fun cursorRight(k: Int): String {\n        \n    }\n\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * var obj = TextEditor()\n * obj.addText(text)\n * var param_2 = obj.deleteText(k)\n * var param_3 = obj.cursorLeft(k)\n * var param_4 = obj.cursorRight(k)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class TextEditor {\n\n  TextEditor() {\n    \n  }\n  \n  void addText(String text) {\n    \n  }\n  \n  int deleteText(int k) {\n    \n  }\n  \n  String cursorLeft(int k) {\n    \n  }\n  \n  String cursorRight(int k) {\n    \n  }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * TextEditor obj = TextEditor();\n * obj.addText(text);\n * int param2 = obj.deleteText(k);\n * String param3 = obj.cursorLeft(k);\n * String param4 = obj.cursorRight(k);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type TextEditor struct {\n    \n}\n\n\nfunc Constructor() TextEditor {\n    \n}\n\n\nfunc (this *TextEditor) AddText(text string)  {\n    \n}\n\n\nfunc (this *TextEditor) DeleteText(k int) int {\n    \n}\n\n\nfunc (this *TextEditor) CursorLeft(k int) string {\n    \n}\n\n\nfunc (this *TextEditor) CursorRight(k int) string {\n    \n}\n\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddText(text);\n * param_2 := obj.DeleteText(k);\n * param_3 := obj.CursorLeft(k);\n * param_4 := obj.CursorRight(k);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class TextEditor\n    def initialize()\n        \n    end\n\n\n=begin\n    :type text: String\n    :rtype: Void\n=end\n    def add_text(text)\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :rtype: Integer\n=end\n    def delete_text(k)\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :rtype: String\n=end\n    def cursor_left(k)\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :rtype: String\n=end\n    def cursor_right(k)\n        \n    end\n\n\nend\n\n# Your TextEditor object will be instantiated and called as such:\n# obj = TextEditor.new()\n# obj.add_text(text)\n# param_2 = obj.delete_text(k)\n# param_3 = obj.cursor_left(k)\n# param_4 = obj.cursor_right(k)"}, {"lang": "Scala", "langSlug": "scala", "code": "class TextEditor() {\n\n    def addText(text: String): Unit = {\n        \n    }\n\n    def deleteText(k: Int): Int = {\n        \n    }\n\n    def cursorLeft(k: Int): String = {\n        \n    }\n\n    def cursorRight(k: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * val obj = new TextEditor()\n * obj.addText(text)\n * val param_2 = obj.deleteText(k)\n * val param_3 = obj.cursorLeft(k)\n * val param_4 = obj.cursorRight(k)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct TextEditor {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TextEditor {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_text(&self, text: String) {\n        \n    }\n    \n    fn delete_text(&self, k: i32) -> i32 {\n        \n    }\n    \n    fn cursor_left(&self, k: i32) -> String {\n        \n    }\n    \n    fn cursor_right(&self, k: i32) -> String {\n        \n    }\n}\n\n/**\n * Your TextEditor object will be instantiated and called as such:\n * let obj = TextEditor::new();\n * obj.add_text(text);\n * let ret_2: i32 = obj.delete_text(k);\n * let ret_3: String = obj.cursor_left(k);\n * let ret_4: String = obj.cursor_right(k);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define text-editor%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add-text : string? -> void?\n    (define/public (add-text text)\n      )\n    ; delete-text : exact-integer? -> exact-integer?\n    (define/public (delete-text k)\n      )\n    ; cursor-left : exact-integer? -> string?\n    (define/public (cursor-left k)\n      )\n    ; cursor-right : exact-integer? -> string?\n    (define/public (cursor-right k)\n      )))\n\n;; Your text-editor% object will be instantiated and called as such:\n;; (define obj (new text-editor%))\n;; (send obj add-text text)\n;; (define param_2 (send obj delete-text k))\n;; (define param_3 (send obj cursor-left k))\n;; (define param_4 (send obj cursor-right k))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec text_editor_init_() -> any().\ntext_editor_init_() ->\n  .\n\n-spec text_editor_add_text(Text :: unicode:unicode_binary()) -> any().\ntext_editor_add_text(Text) ->\n  .\n\n-spec text_editor_delete_text(K :: integer()) -> integer().\ntext_editor_delete_text(K) ->\n  .\n\n-spec text_editor_cursor_left(K :: integer()) -> unicode:unicode_binary().\ntext_editor_cursor_left(K) ->\n  .\n\n-spec text_editor_cursor_right(K :: integer()) -> unicode:unicode_binary().\ntext_editor_cursor_right(K) ->\n  .\n\n\n%% Your functions will be called as such:\n%% text_editor_init_(),\n%% text_editor_add_text(Text),\n%% Param_2 = text_editor_delete_text(K),\n%% Param_3 = text_editor_cursor_left(K),\n%% Param_4 = text_editor_cursor_right(K),\n\n%% text_editor_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule TextEditor do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec add_text(text :: String.t) :: any\n  def add_text(text) do\n    \n  end\n\n  @spec delete_text(k :: integer) :: integer\n  def delete_text(k) do\n    \n  end\n\n  @spec cursor_left(k :: integer) :: String.t\n  def cursor_left(k) do\n    \n  end\n\n  @spec cursor_right(k :: integer) :: String.t\n  def cursor_right(k) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# TextEditor.init_()\n# TextEditor.add_text(text)\n# param_2 = TextEditor.delete_text(k)\n# param_3 = TextEditor.cursor_left(k)\n# param_4 = TextEditor.cursor_right(k)\n\n# TextEditor.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": []}