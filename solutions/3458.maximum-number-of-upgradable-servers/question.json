{"question_id": "3458", "problem_slug": "maximum-number-of-upgradable-servers", "problem_title": "Maximum Number of Upgradable Servers", "content": "You have n data centers and need to upgrade their servers.\nYou are given four arrays count, upgrade, sell, and money of length n, which show:\n\nThe number of servers\nThe cost of upgrading a single server\nThe money you get by selling a server\nThe money you initially have\n\nfor each data center respectively.\nReturn an array answer, where for each data center, the corresponding element in answer represents the maximum number of servers that can be upgraded.\nNote that the money from one data center cannot be used for another data center.\n \nExample 1:\n\nInput: count = [4,3], upgrade = [3,5], sell = [4,2], money = [8,9]\nOutput: [3,2]\nExplanation:\nFor the first data center, if we sell one server, we'll have 8 + 4 = 12 units of money and we can upgrade the remaining 3 servers.\nFor the second data center, if we sell one server, we'll have 9 + 2 = 11 units of money and we can upgrade the remaining 2 servers.\n\nExample 2:\n\nInput: count = [1], upgrade = [2], sell = [1], money = [1]\nOutput: [0]\n\n \nConstraints:\n\n1 <= count.length == upgrade.length == sell.length == money.length <= 105\n1 <= count[i], upgrade[i], sell[i], money[i] <= 105\n\n", "hints": ["Use binary search to find the maximum number of servers that can be upgraded for each data center separately."], "exampleTestcases": "[4,3]\n[3,5]\n[4,2]\n[8,9]\n[1]\n[2]\n[1]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxUpgrades(vector<int>& count, vector<int>& upgrade, vector<int>& sell, vector<int>& money) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] maxUpgrades(int[] count, int[] upgrade, int[] sell, int[] money) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxUpgrades(self, count, upgrade, sell, money):\n        \"\"\"\n        :type count: List[int]\n        :type upgrade: List[int]\n        :type sell: List[int]\n        :type money: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxUpgrades(self, count: List[int], upgrade: List[int], sell: List[int], money: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxUpgrades(int* count, int countSize, int* upgrade, int upgradeSize, int* sell, int sellSize, int* money, int moneySize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxUpgrades(int[] count, int[] upgrade, int[] sell, int[] money) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} count\n * @param {number[]} upgrade\n * @param {number[]} sell\n * @param {number[]} money\n * @return {number[]}\n */\nvar maxUpgrades = function(count, upgrade, sell, money) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxUpgrades(count: number[], upgrade: number[], sell: number[], money: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $count\n     * @param Integer[] $upgrade\n     * @param Integer[] $sell\n     * @param Integer[] $money\n     * @return Integer[]\n     */\n    function maxUpgrades($count, $upgrade, $sell, $money) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxUpgrades(_ count: [Int], _ upgrade: [Int], _ sell: [Int], _ money: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxUpgrades(count: IntArray, upgrade: IntArray, sell: IntArray, money: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> maxUpgrades(List<int> count, List<int> upgrade, List<int> sell, List<int> money) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxUpgrades(count []int, upgrade []int, sell []int, money []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} count\n# @param {Integer[]} upgrade\n# @param {Integer[]} sell\n# @param {Integer[]} money\n# @return {Integer[]}\ndef max_upgrades(count, upgrade, sell, money)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxUpgrades(count: Array[Int], upgrade: Array[Int], sell: Array[Int], money: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_upgrades(count: Vec<i32>, upgrade: Vec<i32>, sell: Vec<i32>, money: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-upgrades count upgrade sell money)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_upgrades(Count :: [integer()], Upgrade :: [integer()], Sell :: [integer()], Money :: [integer()]) -> [integer()].\nmax_upgrades(Count, Upgrade, Sell, Money) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_upgrades(count :: [integer], upgrade :: [integer], sell :: [integer], money :: [integer]) :: [integer]\n  def max_upgrades(count, upgrade, sell, money) do\n    \n  end\nend"}}}