{"question_id": "587", "problem_slug": "erect-the-fence", "problem_title": "Erect the Fence", "content": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.\n \nExample 1:\n\n\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n\nExample 2:\n\n\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]\nExplanation: The fence forms a line that passes through all the trees.\n\n \nConstraints:\n\n1 <= trees.length <= 3000\ntrees[i].length == 2\n0 <= xi, yi <= 100\nAll the given positions are unique.\n\n", "hints": [], "exampleTestcases": "[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n[[1,2],[2,2],[4,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> outerTrees(vector<vector<int>>& trees) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] outerTrees(int[][] trees) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def outerTrees(self, trees):\n        \"\"\"\n        :type trees: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** outerTrees(int** trees, int treesSize, int* treesColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] OuterTrees(int[][] trees) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} trees\n * @return {number[][]}\n */\nvar outerTrees = function(trees) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function outerTrees(trees: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $trees\n     * @return Integer[][]\n     */\n    function outerTrees($trees) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func outerTrees(_ trees: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun outerTrees(trees: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> outerTrees(List<List<int>> trees) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func outerTrees(trees [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} trees\n# @return {Integer[][]}\ndef outer_trees(trees)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def outerTrees(trees: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn outer_trees(trees: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (outer-trees trees)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec outer_trees(Trees :: [[integer()]]) -> [[integer()]].\nouter_trees(Trees) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec outer_trees(trees :: [[integer]]) :: [[integer]]\n  def outer_trees(trees) do\n    \n  end\nend"}}}