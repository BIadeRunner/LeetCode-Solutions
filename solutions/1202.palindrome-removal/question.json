{"question_id": "1202", "problem_slug": "palindrome-removal", "problem_title": "Palindrome Removal", "content": "You are given an integer array arr.\nIn one move, you can select a palindromic subarray arr[i], arr[i + 1], ..., arr[j] where i <= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\nReturn the minimum number of moves needed to remove all numbers from the array.\n \nExample 1:\n\nInput: arr = [1,2]\nOutput: 2\n\nExample 2:\n\nInput: arr = [1,3,4,1,5]\nOutput: 3\nExplanation: Remove [4] then remove [1,3,1] then remove [5].\n\n \nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 20\n\n", "hints": ["Use dynamic programming.", "Let dp[i][j] be the solution for the sub-array from index i to index j.", "Notice that if we have S[i] == S[j] one transition could be just dp(i + 1, j + 1) because in the last turn we would have a palindrome and we can extend this palindrome from both sides, the other transitions are not too difficult to deduce."], "exampleTestcases": "[1,2]\n[1,3,4,1,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumMoves(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumMoves(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumMoves(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumMoves(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumMoves(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumMoves(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar minimumMoves = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumMoves(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function minimumMoves($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumMoves(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumMoves(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumMoves(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumMoves(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef minimum_moves(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumMoves(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_moves(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-moves arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_moves(Arr :: [integer()]) -> integer().\nminimum_moves(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_moves(arr :: [integer]) :: integer\n  def minimum_moves(arr) do\n    \n  end\nend"}}}