{"question_id": "1141", "problem_slug": "how-many-apples-can-you-put-into-the-basket", "problem_title": "How Many Apples Can You Put into the Basket", "content": "You have some apples and a basket that can carry up to 5000 units of weight.\nGiven an integer array weight where weight[i] is the weight of the ith apple, return the maximum number of apples you can put in the basket.\n \nExample 1:\n\nInput: weight = [100,200,150,1000]\nOutput: 4\nExplanation: All 4 apples can be carried by the basket since their sum of weights is 1450.\n\nExample 2:\n\nInput: weight = [900,950,800,1000,700,800]\nOutput: 5\nExplanation: The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.\n\n \nConstraints:\n\n1 <= weight.length <= 103\n1 <= weight[i] <= 103\n\n", "hints": ["What if you think in a greedy approach?", "The best apple to take in one step is the one with the smallest weight.", "Sort the array and take apples with smaller weight first."], "exampleTestcases": "[100,200,150,1000]\n[900,950,800,1000,700,800]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxNumberOfApples(vector<int>& weight) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxNumberOfApples(int[] weight) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxNumberOfApples(self, weight):\n        \"\"\"\n        :type weight: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxNumberOfApples(self, weight: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxNumberOfApples(int* weight, int weightSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxNumberOfApples(int[] weight) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} weight\n * @return {number}\n */\nvar maxNumberOfApples = function(weight) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxNumberOfApples(weight: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $weight\n     * @return Integer\n     */\n    function maxNumberOfApples($weight) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxNumberOfApples(_ weight: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxNumberOfApples(weight: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxNumberOfApples(List<int> weight) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxNumberOfApples(weight []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} weight\n# @return {Integer}\ndef max_number_of_apples(weight)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxNumberOfApples(weight: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_number_of_apples(weight: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-number-of-apples weight)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_number_of_apples(Weight :: [integer()]) -> integer().\nmax_number_of_apples(Weight) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_number_of_apples(weight :: [integer]) :: integer\n  def max_number_of_apples(weight) do\n    \n  end\nend"}}}