{"questionId": "1141", "acRate": 67.04357658519613, "difficulty": "Easy", "freqBar": 24.04958010177, "frontendQuestionId": "1196", "paidOnly": true, "status": "ac", "title": "How Many Apples Can You Put into the Basket", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "how-many-apples-can-you-put-into-the-basket", "content": "<p>You have some apples and a basket that can carry up to <code>5000</code> units of weight.</p>\n\n<p>Given an integer array <code>weight</code> where <code>weight[i]</code> is the weight of the <code>i<sup>th</sup></code> apple, return <em>the maximum number of apples you can put in the basket</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> weight = [100,200,150,1000]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> All 4 apples can be carried by the basket since their sum of weights is 1450.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> weight = [900,950,800,1000,700,800]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= weight.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= weight[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n", "hints": ["What if you think in a greedy approach?", "The best apple to take in one step is the one with the smallest weight.", "Sort the array and take apples with smaller weight first."], "exampleTestcases": "[100,200,150,1000]\n[900,950,800,1000,700,800]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxNumberOfApples(vector<int>& weight) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxNumberOfApples(int[] weight) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxNumberOfApples(self, weight):\n        \"\"\"\n        :type weight: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxNumberOfApples(self, weight: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxNumberOfApples(int* weight, int weightSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxNumberOfApples(int[] weight) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} weight\n * @return {number}\n */\nvar maxNumberOfApples = function(weight) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxNumberOfApples(weight: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $weight\n     * @return Integer\n     */\n    function maxNumberOfApples($weight) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxNumberOfApples(_ weight: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxNumberOfApples(weight: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxNumberOfApples(List<int> weight) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxNumberOfApples(weight []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} weight\n# @return {Integer}\ndef max_number_of_apples(weight)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxNumberOfApples(weight: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_number_of_apples(weight: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-number-of-apples weight)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_number_of_apples(Weight :: [integer()]) -> integer().\nmax_number_of_apples(Weight) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_number_of_apples(weight :: [integer]) :: integer\n  def max_number_of_apples(weight) do\n    \n  end\nend"}], "similarQuestionList": []}