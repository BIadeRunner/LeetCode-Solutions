{"question_id": "1391", "problem_slug": "counting-elements", "problem_title": "Counting Elements", "content": "Given an integer array arr, count how many elements x there are, such that x + 1 is also in arr. If there are duplicates in arr, count them separately.\n \nExample 1:\n\nInput: arr = [1,2,3]\nOutput: 2\nExplanation: 1 and 2 are counted cause 2 and 3 are in arr.\n\nExample 2:\n\nInput: arr = [1,1,3,3,5,5,7,7]\nOutput: 0\nExplanation: No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.\n\n \nConstraints:\n\n1 <= arr.length <= 1000\n0 <= arr[i] <= 1000\n\n", "hints": ["Use hashset to store all elements.", "Loop again to count all valid elements."], "exampleTestcases": "[1,2,3]\n[1,1,3,3,5,5,7,7]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countElements(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countElements(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countElements(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countElements(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountElements(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar countElements = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countElements(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function countElements($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countElements(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countElements(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countElements(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countElements(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef count_elements(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countElements(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_elements(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-elements arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_elements(Arr :: [integer()]) -> integer().\ncount_elements(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_elements(arr :: [integer]) :: integer\n  def count_elements(arr) do\n    \n  end\nend"}}}