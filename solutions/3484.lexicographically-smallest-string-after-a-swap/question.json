{"questionId": "3484", "acRate": 53.9283993843334, "difficulty": "Easy", "freqBar": 39.5140821796871, "frontendQuestionId": "3216", "paidOnly": false, "status": "ac", "title": "Lexicographically Smallest String After a Swap", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "lexicographically-smallest-string-after-a-swap", "content": "<p>Given a string <code>s</code> containing only digits, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest string</span> that can be obtained after swapping <strong>adjacent</strong> digits in <code>s</code> with the same <strong>parity</strong> at most <strong>once</strong>.</p>\n\n<p>Digits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;45320&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;43520&quot;</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><code>s[1] == &#39;5&#39;</code> and <code>s[2] == &#39;3&#39;</code> both have the same parity, and swapping them results in the lexicographically smallest string.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;001&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;001&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no need to perform a swap because <code>s</code> is already the lexicographically smallest.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of digits.</li>\n</ul>\n", "hints": ["Try all possible swaps satisfying the constraints and find the one that results in the lexicographically smallest string."], "exampleTestcases": "\"45320\"\n\"001\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string getSmallestString(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String getSmallestString(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getSmallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getSmallestString(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* getSmallestString(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string GetSmallestString(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar getSmallestString = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getSmallestString(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function getSmallestString($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getSmallestString(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getSmallestString(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String getSmallestString(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getSmallestString(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef get_smallest_string(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getSmallestString(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_smallest_string(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-smallest-string s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nget_smallest_string(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t) :: String.t\n  def get_smallest_string(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "lexicographically-smallest-string-after-applying-operations", "title": "Lexicographically Smallest String After Applying Operations", "isPaidOnly": false}]}