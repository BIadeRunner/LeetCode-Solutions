{"question_id": "3580", "problem_slug": "find-the-occurrence-of-first-almost-equal-substring", "problem_title": "Find the Occurrence of First Almost Equal Substring", "content": "You are given two strings s and pattern.\nA string x is called almost equal to y if you can change at most one character in x to make it identical to y.\nReturn the smallest starting index of a substring in s that is almost equal to pattern. If no such index exists, return -1.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"abcdefg\", pattern = \"bcdffg\"\nOutput: 1\nExplanation:\nThe substring s[1..6] == \"bcdefg\" can be converted to \"bcdffg\" by changing s[4] to \"f\".\n\nExample 2:\n\nInput: s = \"ababbababa\", pattern = \"bacaba\"\nOutput: 4\nExplanation:\nThe substring s[4..9] == \"bababa\" can be converted to \"bacaba\" by changing s[6] to \"c\".\n\nExample 3:\n\nInput: s = \"abcd\", pattern = \"dba\"\nOutput: -1\n\nExample 4:\n\nInput: s = \"dde\", pattern = \"d\"\nOutput: 0\n\n \nConstraints:\n\n1 <= pattern.length < s.length <= 105\ns and pattern consist only of lowercase English letters.\n\n \nFollow-up: Could you solve the problem if at most k consecutive characters can be changed?", "hints": ["Let <code>dp1[i]</code> represent the maximum length of a substring of <code>s</code> starting at index <code>i</code> that is also a prefix of <code>pattern</code>.", "Let <code>dp2[i]</code> represent the maximum length of a substring of <code>s</code> ending at index <code>i</code> that is also a suffix of <code>pattern</code>.", "Consider a window of size <code>pattern.length</code>. If <code>dp1[i] + i == i + pattern.length - 1 - dp2[i + pattern.length - 1]</code>, what does this signify?"], "exampleTestcases": "\"abcdefg\"\n\"bcdffg\"\n\"ababbababa\"\n\"bacaba\"\n\"abcd\"\n\"dba\"\n\"dde\"\n\"d\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minStartingIndex(string s, string pattern) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minStartingIndex(String s, String pattern) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minStartingIndex(self, s, pattern):\n        \"\"\"\n        :type s: str\n        :type pattern: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minStartingIndex(self, s: str, pattern: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minStartingIndex(char* s, char* pattern) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinStartingIndex(string s, string pattern) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} pattern\n * @return {number}\n */\nvar minStartingIndex = function(s, pattern) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minStartingIndex(s: string, pattern: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $pattern\n     * @return Integer\n     */\n    function minStartingIndex($s, $pattern) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minStartingIndex(_ s: String, _ pattern: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minStartingIndex(s: String, pattern: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minStartingIndex(String s, String pattern) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minStartingIndex(s string, pattern string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} pattern\n# @return {Integer}\ndef min_starting_index(s, pattern)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minStartingIndex(s: String, pattern: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_starting_index(s: String, pattern: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-starting-index s pattern)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_starting_index(S :: unicode:unicode_binary(), Pattern :: unicode:unicode_binary()) -> integer().\nmin_starting_index(S, Pattern) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_starting_index(s :: String.t, pattern :: String.t) :: integer\n  def min_starting_index(s, pattern) do\n    \n  end\nend"}}}