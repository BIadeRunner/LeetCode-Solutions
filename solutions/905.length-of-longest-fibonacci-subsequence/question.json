{"questionId": "905", "acRate": 48.45575083458249, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "873", "paidOnly": false, "status": "ac", "title": "Length of Longest Fibonacci Subsequence", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "length-of-longest-fibonacci-subsequence", "content": "<p>A sequence <code>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></code> is <em>Fibonacci-like</em> if:</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li><code>x<sub>i</sub> + x<sub>i+1</sub> == x<sub>i+2</sub></code> for all <code>i + 2 &lt;= n</code></li>\n</ul>\n\n<p>Given a <b>strictly increasing</b> array <code>arr</code> of positive integers forming a sequence, return <em>the <strong>length</strong> of the longest Fibonacci-like subsequence of</em> <code>arr</code>. If one does not exist, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> is derived from another sequence <code>arr</code> by deleting any number of elements (including none) from <code>arr</code>, without changing the order of the remaining elements. For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4,5,6,7,8]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest subsequence that is fibonacci-like: [1,2,3,5,8].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,3,7,11,12,14,18]\n<strong>Output:</strong> 3\n<strong>Explanation</strong>:<strong> </strong>The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,2,3,4,5,6,7,8]\n[1,3,7,11,12,14,18]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lenLongestFibSubseq(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lenLongestFibSubseq(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lenLongestFibSubseq(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int lenLongestFibSubseq(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LenLongestFibSubseq(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar lenLongestFibSubseq = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lenLongestFibSubseq(arr: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function lenLongestFibSubseq($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lenLongestFibSubseq(_ arr: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lenLongestFibSubseq(arr: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int lenLongestFibSubseq(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func lenLongestFibSubseq(arr []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef len_longest_fib_subseq(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lenLongestFibSubseq(arr: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn len_longest_fib_subseq(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (len-longest-fib-subseq arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec len_longest_fib_subseq(Arr :: [integer()]) -> integer().\nlen_longest_fib_subseq(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec len_longest_fib_subseq(arr :: [integer]) :: integer\n  def len_longest_fib_subseq(arr) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "fibonacci-number", "title": "Fibonacci Number", "isPaidOnly": false}]}