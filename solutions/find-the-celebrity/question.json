{"questionId": "277", "acRate": 47.633602637749725, "difficulty": "Medium", "freqBar": 69.3656688053896, "frontendQuestionId": "277", "paidOnly": true, "status": "ac", "title": "Find the Celebrity", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "find-the-celebrity", "content": "<p>Suppose you are at a party with <code>n</code> people labeled from <code>0</code> to <code>n - 1</code> and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know the celebrity, but the celebrity does not know any of them.</p>\n\n<p>Now you want to find out who the celebrity is or verify that there is not one. You are only allowed to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>\n\n<p>You are given a helper function <code>bool knows(a, b)</code> that tells you whether <code>a</code> knows <code>b</code>. Implement a function <code>int findCelebrity(n)</code>. There will be exactly one celebrity if they are at the party.</p>\n\n<p>Return <em>the celebrity&#39;s label if there is a celebrity at the party</em>. If there is no celebrity, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/01/19/g1.jpg\" style=\"width: 224px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,1,0],[0,1,0],[1,1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/01/19/g2.jpg\" style=\"width: 224px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,0,1],[1,1,0],[0,1,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no celebrity.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length == graph[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>graph[i][i] == 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If the maximum number of allowed calls to the API <code>knows</code> is <code>3 * n</code>, could you find a solution without exceeding the maximum number of calls?</p>\n", "hints": ["The best hint for this problem can be provided by the following figure:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_find_celebrity.png\" width=\"700\"/>", "Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API."], "exampleTestcases": "[[1,1,0],[0,1,0],[1,1,1]]\n[[1,0,1],[1,1,0],[0,1,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/* The knows API is defined for you.\n      bool knows(int a, int b); */\n\nclass Solution {\npublic:\n    int findCelebrity(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/* The knows API is defined in the parent class Relation.\n      boolean knows(int a, int b); */\n\npublic class Solution extends Relation {\n    public int findCelebrity(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# The knows API is already defined for you.\n# @param a, person a\n# @param b, person b\n# @return a boolean, whether a knows b\n# def knows(a, b):\n\nclass Solution(object):\n    def findCelebrity(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# The knows API is already defined for you.\n# return a bool, whether a knows b\n# def knows(a: int, b: int) -> bool:\n\nclass Solution:\n    def findCelebrity(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "/* The knows API is defined for you.\n      bool knows(int a, int b); */\n\nint findCelebrity(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/* The Knows API is defined in the parent class Relation.\n      bool Knows(int a, int b); */\n\npublic class Solution : Relation {\n    public int FindCelebrity(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for knows()\n * \n * @param {integer} person a\n * @param {integer} person b\n * @return {boolean} whether a knows b\n * knows = function(a, b) {\n *     ...\n * };\n */\n\n/**\n * @param {function} knows()\n * @return {function}\n */\nvar solution = function(knows) {\n    /**\n     * @param {integer} n Total people\n     * @return {integer} The celebrity\n     */\n    return function(n) {\n        \n    };\n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * The knows API is defined in the parent class Relation.\n * knows(a: number, b: number): boolean {\n *     ...\n * };\n */\n\nvar solution = function(knows: any) {\n\n    return function(n: number): number {\n        \n    };\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/* The knows API is defined in the parent class Relation.\n      public function knows($a, $b){} */\n\nclass Solution extends Relation {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findCelebrity($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * The knows API is defined in the parent class Relation.\n *     func knows(_ a: Int, _ b: Int) -> Bool;\n */\n\nclass Solution : Relation {\n    func findCelebrity(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/* The knows API is defined in the parent class Relation.\n      fun knows(a: Int, b: Int) : Boolean {} */\n\nclass Solution: Relation() {\n    override fun findCelebrity(n: Int) : Int {\n        \n\t}\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * The knows API is already defined for you.\n *     knows := func(a int, b int) bool\n */\nfunc solution(knows func(a int, b int) bool) func(n int) int {\n    return func(n int) int {\n        \n    }\n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# The knows API is already defined for you.\n# @param {Integer} person a\n# @param {Integer} person b\n# @return {Boolean} whether a knows b\n# def knows(a, b)\n\n# @param {Integer} n\n# @return {Integer}\ndef find_celebrity(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/* The knows API is defined in the parent class Relation.\n      def knows(a: Int, b: Int): Boolean = {} */\n\nclass Solution extends Relation {\n    def findCelebrity(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/* The knows API is defined for you.\n       knows(a: i32, b: i32)->bool;\n    to call it use self.knows(a,b)\n*/\n\nimpl Solution {\n    pub fn find_celebrity(&self, n: i32) -> i32 {\n \n    }\n}"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "find-the-town-judge", "title": "Find the Town Judge", "isPaidOnly": false}]}