{"questionId": "340", "acRate": 49.07344130376908, "difficulty": "Medium", "freqBar": 61.998103099672086, "frontendQuestionId": "340", "paidOnly": true, "status": "ac", "title": "Longest Substring with At Most K Distinct Characters", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "longest-substring-with-at-most-k-distinct-characters", "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span><em> of</em> <code>s</code> <em>that contains at most</em> <code>k</code> <em><strong>distinct</strong> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eceba&quot;, k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substring is &quot;ece&quot; with length 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The substring is &quot;aa&quot; with length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 50</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"eceba\"\n2\n\"aa\"\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLongestSubstringKDistinct(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthOfLongestSubstringKDistinct(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthOfLongestSubstringKDistinct(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int lengthOfLongestSubstringKDistinct(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLongestSubstringKDistinct(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar lengthOfLongestSubstringKDistinct = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthOfLongestSubstringKDistinct(s: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function lengthOfLongestSubstringKDistinct($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthOfLongestSubstringKDistinct(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLongestSubstringKDistinct(s: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int lengthOfLongestSubstringKDistinct(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthOfLongestSubstringKDistinct(s string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef length_of_longest_substring_k_distinct(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthOfLongestSubstringKDistinct(s: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_longest_substring_k_distinct(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (length-of-longest-substring-k-distinct s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec length_of_longest_substring_k_distinct(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nlength_of_longest_substring_k_distinct(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec length_of_longest_substring_k_distinct(s :: String.t, k :: integer) :: integer\n  def length_of_longest_substring_k_distinct(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-substring-without-repeating-characters", "title": "Longest Substring Without Repeating Characters", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-substring-with-at-most-two-distinct-characters", "title": "Longest Substring with At Most Two Distinct Characters", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "longest-repeating-character-replacement", "title": "Longest Repeating Character Replacement", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "subarrays-with-k-different-integers", "title": "Subarrays with K Different Integers", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "max-consecutive-ones-iii", "title": "Max Consecutive Ones III", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximize-the-confusion-of-an-exam", "title": "Maximize the Confusion of an Exam", "isPaidOnly": false}]}