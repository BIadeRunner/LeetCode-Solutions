{"questionId": "1526", "acRate": 50.81150724972117, "difficulty": "Medium", "freqBar": 55.63997972269357, "frontendQuestionId": "1410", "paidOnly": false, "status": "ac", "title": "HTML Entity Parser", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "html-entity-parser", "content": "<p><strong>HTML entity parser</strong> is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.</p>\n\n<p>The special characters and their entities for HTML are:</p>\n\n<ul>\n\t<li><strong>Quotation Mark:</strong> the entity is <code>&amp;quot;</code> and symbol character is <code>&quot;</code>.</li>\n\t<li><strong>Single Quote Mark:</strong> the entity is <code>&amp;apos;</code> and symbol character is <code>&#39;</code>.</li>\n\t<li><strong>Ampersand:</strong> the entity is <code>&amp;amp;</code> and symbol character is <code>&amp;</code>.</li>\n\t<li><strong>Greater Than Sign:</strong> the entity is <code>&amp;gt;</code> and symbol character is <code>&gt;</code>.</li>\n\t<li><strong>Less Than Sign:</strong> the entity is <code>&amp;lt;</code> and symbol character is <code>&lt;</code>.</li>\n\t<li><strong>Slash:</strong> the entity is <code>&amp;frasl;</code> and symbol character is <code>/</code>.</li>\n</ul>\n\n<p>Given the input <code>text</code> string to the HTML parser, you have to implement the entity parser.</p>\n\n<p>Return <em>the text after replacing the entities by the special characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;&amp;amp; is an HTML entity but &amp;ambassador; is not.&quot;\n<strong>Output:</strong> &quot;&amp; is an HTML entity but &amp;ambassador; is not.&quot;\n<strong>Explanation:</strong> The parser will replace the &amp;amp; entity by &amp;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;and I quote: &amp;quot;...&amp;quot;&quot;\n<strong>Output:</strong> &quot;and I quote: \\&quot;...\\&quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li>\n\t<li>The string may contain any possible characters out of all the 256 ASCII characters.</li>\n</ul>\n", "hints": ["Search the string for all the occurrences of the character '&'.", "For every '&' check if it matches an HTML entity by checking the ';' character and if entity found replace it in the answer."], "exampleTestcases": "\"&amp; is an HTML entity but &ambassador; is not.\"\n\"and I quote: &quot;...&quot;\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string entityParser(string text) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String entityParser(String text) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def entityParser(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def entityParser(self, text: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* entityParser(char* text) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string EntityParser(string text) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {string}\n */\nvar entityParser = function(text) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function entityParser(text: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return String\n     */\n    function entityParser($text) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func entityParser(_ text: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun entityParser(text: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String entityParser(String text) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func entityParser(text string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} text\n# @return {String}\ndef entity_parser(text)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def entityParser(text: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn entity_parser(text: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (entity-parser text)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec entity_parser(Text :: unicode:unicode_binary()) -> unicode:unicode_binary().\nentity_parser(Text) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec entity_parser(text :: String.t) :: String.t\n  def entity_parser(text) do\n    \n  end\nend"}], "similarQuestionList": []}