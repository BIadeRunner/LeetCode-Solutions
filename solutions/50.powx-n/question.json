{"question_id": "50", "problem_slug": "powx-n", "problem_title": "Pow(x, n)", "content": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n \nExample 1:\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\nExample 2:\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\nExample 3:\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\n \nConstraints:\n\n-100.0 < x < 100.0\n-231 <= n <= 231-1\nn is an integer.\nEither x is not zero or n > 0.\n-104 <= xn <= 104\n\n", "hints": [], "exampleTestcases": "2.00000\n10\n2.10000\n3\n2.00000\n-2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double myPow(double x, int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function myPow(x: number, n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func myPow(x float64, n int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"}}}