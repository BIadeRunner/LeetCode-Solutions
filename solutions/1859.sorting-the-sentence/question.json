{"questionId": "1970", "acRate": 83.38639176764516, "difficulty": "Easy", "freqBar": 34.696608957385905, "frontendQuestionId": "1859", "paidOnly": false, "status": "ac", "title": "Sorting the Sentence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "sorting-the-sentence", "content": "<p>A <strong>sentence</strong> is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.</p>\r\n\r\n<p>A sentence can be <strong>shuffled</strong> by appending the <strong>1-indexed word position</strong> to each word then rearranging the words in the sentence.</p>\r\n\r\n<ul>\r\n\t<li>For example, the sentence <code>&quot;This is a sentence&quot;</code> can be shuffled as <code>&quot;sentence4 a3 is2 This1&quot;</code> or <code>&quot;is2 sentence4 This1 a3&quot;</code>.</li>\r\n</ul>\r\n\r\n<p>Given a <strong>shuffled sentence</strong> <code>s</code> containing no more than <code>9</code> words, reconstruct and return <em>the original sentence</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;is2 sentence4 This1 a3&quot;\r\n<strong>Output:</strong> &quot;This is a sentence&quot;\r\n<strong>Explanation:</strong> Sort the words in s to their original positions &quot;This1 is2 a3 sentence4&quot;, then remove the numbers.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;Myself2 Me1 I4 and3&quot;\r\n<strong>Output:</strong> &quot;Me Myself and I&quot;\r\n<strong>Explanation:</strong> Sort the words in s to their original positions &quot;Me1 Myself2 and3 I4&quot;, then remove the numbers.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= s.length &lt;= 200</code></li>\r\n\t<li><code>s</code> consists of lowercase and uppercase English letters, spaces, and digits from <code>1</code> to <code>9</code>.</li>\r\n\t<li>The number of words in <code>s</code> is between <code>1</code> and <code>9</code>.</li>\r\n\t<li>The words in <code>s</code> are separated by a single space.</li>\r\n\t<li><code>s</code> contains no leading or trailing spaces.</li>\r\n</ul>", "hints": ["Divide the string into the words as an array of strings", "Sort the words by removing the last character from each word and sorting according to it"], "exampleTestcases": "\"is2 sentence4 This1 a3\"\n\"Myself2 Me1 I4 and3\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string sortSentence(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String sortSentence(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortSentence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortSentence(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * sortSentence(char * s){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string SortSentence(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar sortSentence = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortSentence(s: string): string {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function sortSentence($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortSentence(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortSentence(s: String): String {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func sortSentence(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef sort_sentence(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortSentence(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_sentence(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (sort-sentence s)\n  (-> string? string?)\n\n  )"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "check-if-numbers-are-ascending-in-a-sentence", "title": "Check if Numbers Are Ascending in a Sentence", "isPaidOnly": false}]}