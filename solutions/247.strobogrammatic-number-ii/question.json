{"question_id": "247", "problem_slug": "strobogrammatic-number-ii", "problem_title": "Strobogrammatic Number II", "content": "Given an integer n, return all the strobogrammatic numbers that are of length n. You may return the answer in any order.\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n \nExample 1:\nInput: n = 2\nOutput: [\"11\",\"69\",\"88\",\"96\"]\nExample 2:\nInput: n = 1\nOutput: [\"0\",\"1\",\"8\"]\n\n \nConstraints:\n\n1 <= n <= 14\n\n", "hints": ["Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."], "exampleTestcases": "2\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findStrobogrammatic(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> findStrobogrammatic(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findStrobogrammatic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findStrobogrammatic(int n, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindStrobogrammatic(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar findStrobogrammatic = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findStrobogrammatic(n: number): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function findStrobogrammatic($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findStrobogrammatic(_ n: Int) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findStrobogrammatic(n: Int): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> findStrobogrammatic(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findStrobogrammatic(n int) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String[]}\ndef find_strobogrammatic(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findStrobogrammatic(n: Int): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_strobogrammatic(n: i32) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-strobogrammatic n)\n  (-> exact-integer? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_strobogrammatic(N :: integer()) -> [unicode:unicode_binary()].\nfind_strobogrammatic(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_strobogrammatic(n :: integer) :: [String.t]\n  def find_strobogrammatic(n) do\n    \n  end\nend"}}}