{"questionId": "247", "acRate": 52.660270545791064, "difficulty": "Medium", "freqBar": 51.074041806537416, "frontendQuestionId": "247", "paidOnly": true, "status": "ac", "title": "Strobogrammatic Number II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}], "titleSlug": "strobogrammatic-number-ii", "content": "<p>Given an integer <code>n</code>, return all the <strong>strobogrammatic numbers</strong> that are of length <code>n</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A <strong>strobogrammatic number</strong> is a number that looks the same when rotated <code>180</code> degrees (looked at upside down).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 2\n<strong>Output:</strong> [\"11\",\"69\",\"88\",\"96\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"0\",\"1\",\"8\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 14</code></li>\n</ul>\n", "hints": ["Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."], "exampleTestcases": "2\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findStrobogrammatic(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> findStrobogrammatic(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findStrobogrammatic(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findStrobogrammatic(int n, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindStrobogrammatic(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar findStrobogrammatic = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findStrobogrammatic(n: number): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function findStrobogrammatic($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findStrobogrammatic(_ n: Int) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findStrobogrammatic(n: Int): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> findStrobogrammatic(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findStrobogrammatic(n int) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String[]}\ndef find_strobogrammatic(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findStrobogrammatic(n: Int): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_strobogrammatic(n: i32) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-strobogrammatic n)\n  (-> exact-integer? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_strobogrammatic(N :: integer()) -> [unicode:unicode_binary()].\nfind_strobogrammatic(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_strobogrammatic(n :: integer) :: [String.t]\n  def find_strobogrammatic(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "strobogrammatic-number", "title": "Strobogrammatic Number", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "strobogrammatic-number-iii", "title": "Strobogrammatic Number III", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "sum-of-k-mirror-numbers", "title": "Sum of k-Mirror Numbers", "isPaidOnly": false}]}