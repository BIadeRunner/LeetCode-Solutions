{"question_id": "2293", "problem_slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii", "problem_title": "Minimum Number of Steps to Make Two Strings Anagram II", "content": "You are given two strings s and t. In one step, you can append any character to either s or t.\nReturn the minimum number of steps to make s and t anagrams of each other.\nAn anagram of a string is a string that contains the same characters with a different (or the same) ordering.\n \nExample 1:\n\nInput: s = \"leetcode\", t = \"coats\"\nOutput: 7\nExplanation: \n- In 2 steps, we can append the letters in \"as\" onto s = \"leetcode\", forming s = \"leetcodeas\".\n- In 5 steps, we can append the letters in \"leede\" onto t = \"coats\", forming t = \"coatsleede\".\n\"leetcodeas\" and \"coatsleede\" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps.\n\nExample 2:\n\nInput: s = \"night\", t = \"thing\"\nOutput: 0\nExplanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.\n\n \nConstraints:\n\n1 <= s.length, t.length <= 2 * 105\ns and t consist of lowercase English letters.\n\n", "hints": ["Notice that for anagrams, the order of the letters is irrelevant.", "For each letter, we can count its frequency in s and t.", "For each letter, its contribution to the answer is the absolute difference between its frequency in s and t."], "exampleTestcases": "\"leetcode\"\n\"coats\"\n\"night\"\n\"thing\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSteps(string s, string t) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minSteps(String s, String t) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSteps(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minSteps(char* s, char* t) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinSteps(string s, string t) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar minSteps = function(s, t) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSteps(s: string, t: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function minSteps($s, $t) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSteps(_ s: String, _ t: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSteps(s: String, t: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minSteps(String s, String t) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSteps(s string, t string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef min_steps(s, t)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSteps(s: String, t: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_steps(s: String, t: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-steps s t)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_steps(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nmin_steps(S, T) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_steps(s :: String.t, t :: String.t) :: integer\n  def min_steps(s, t) do\n    \n  end\nend"}}}