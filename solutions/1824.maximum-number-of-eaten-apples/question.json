{"question_id": "1824", "problem_slug": "maximum-number-of-eaten-apples", "problem_title": "Maximum Number of Eaten Apples", "content": "There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.\nYou decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.\nGiven two integer arrays days and apples of length n, return the maximum number of apples you can eat.\n \nExample 1:\n\nInput: apples = [1,2,3,5,2], days = [3,2,1,4,2]\nOutput: 7\nExplanation: You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.\n\nExample 2:\n\nInput: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\nOutput: 5\nExplanation: You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.\n\n \nConstraints:\n\nn == apples.length == days.length\n1 <= n <= 2 * 104\n0 <= apples[i], days[i] <= 2 * 104\ndays[i] = 0 if and only if apples[i] = 0.\n\n", "hints": ["It's optimal to finish the apples that will rot first before those that will rot last", "You need a structure to keep the apples sorted by their finish time"], "exampleTestcases": "[1,2,3,5,2]\n[3,2,1,4,2]\n[3,0,0,0,0,2]\n[3,0,0,0,0,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int eatenApples(vector<int>& apples, vector<int>& days) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int eatenApples(int[] apples, int[] days) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def eatenApples(self, apples, days):\n        \"\"\"\n        :type apples: List[int]\n        :type days: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int eatenApples(int* apples, int applesSize, int* days, int daysSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int EatenApples(int[] apples, int[] days) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} apples\n * @param {number[]} days\n * @return {number}\n */\nvar eatenApples = function(apples, days) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function eatenApples(apples: number[], days: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $apples\n     * @param Integer[] $days\n     * @return Integer\n     */\n    function eatenApples($apples, $days) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func eatenApples(_ apples: [Int], _ days: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun eatenApples(apples: IntArray, days: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int eatenApples(List<int> apples, List<int> days) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func eatenApples(apples []int, days []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} apples\n# @param {Integer[]} days\n# @return {Integer}\ndef eaten_apples(apples, days)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def eatenApples(apples: Array[Int], days: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn eaten_apples(apples: Vec<i32>, days: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (eaten-apples apples days)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec eaten_apples(Apples :: [integer()], Days :: [integer()]) -> integer().\neaten_apples(Apples, Days) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec eaten_apples(apples :: [integer], days :: [integer]) :: integer\n  def eaten_apples(apples, days) do\n    \n  end\nend"}}}