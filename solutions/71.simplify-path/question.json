{"question_id": "71", "problem_slug": "simplify-path", "problem_title": "Simplify Path", "content": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\nThe rules of a Unix-style file system are as follows:\n\nA single period '.' represents the current directory.\nA double period '..' represents the previous/parent directory.\nMultiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.\nAny sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.\n\nThe simplified canonical path should follow these rules:\n\nThe path must start with a single slash '/'.\nDirectories within the path must be separated by exactly one slash '/'.\nThe path must not end with a slash '/', unless it is the root directory.\nThe path must not have any single or double periods ('.' and '..') used to denote current or parent directories.\n\nReturn the simplified canonical path.\n \nExample 1:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation:\nThe trailing slash should be removed.\n\nExample 2:\n\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation:\nMultiple consecutive slashes are replaced by a single one.\n\nExample 3:\n\nInput: path = \"/home/user/Documents/../Pictures\"\nOutput: \"/home/user/Pictures\"\nExplanation:\nA double period \"..\" refers to the directory up a level (the parent directory).\n\nExample 4:\n\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation:\nGoing one level up from the root directory is not possible.\n\nExample 5:\n\nInput: path = \"/.../a/../b/c/../d/./\"\nOutput: \"/.../b/d\"\nExplanation:\n\"...\" is a valid name for a directory in this problem.\n\n \nConstraints:\n\n1 <= path.length <= 3000\npath consists of English letters, digits, period '.', slash '/' or '_'.\npath is a valid absolute Unix path.\n\n", "hints": [], "exampleTestcases": "\"/home/\"\n\"/home//foo/\"\n\"/home/user/Documents/../Pictures\"\n\"/../\"\n\"/.../a/../b/c/../d/./\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* simplifyPath(char* path) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function simplifyPath(path: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func simplifyPath(_ path: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String simplifyPath(String path) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func simplifyPath(path string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn simplify_path(path: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (simplify-path path)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsimplify_path(Path) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n    \n  end\nend"}}}