{"question_id": "1996", "problem_slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible", "problem_title": "Number of Ways to Rearrange Sticks With K Sticks Visible", "content": "There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A stick is visible from the left if there are no longer sticks to the left of it.\n\nFor example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.\n\nGiven n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 3, k = 2\nOutput: 3\nExplanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.\n\nExample 2:\n\nInput: n = 5, k = 5\nOutput: 1\nExplanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.\n\nExample 3:\n\nInput: n = 20, k = 11\nOutput: 647427950\nExplanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n\n \nConstraints:\n\n1 <= n <= 1000\n1 <= k <= n\n\n", "hints": ["Is there a way to build the solution from a base case?", "How many ways are there if we fix the position of one stick?"], "exampleTestcases": "3\n2\n5\n5\n20\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int rearrangeSticks(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int rearrangeSticks(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def rearrangeSticks(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int rearrangeSticks(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int RearrangeSticks(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar rearrangeSticks = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rearrangeSticks(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function rearrangeSticks($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func rearrangeSticks(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun rearrangeSticks(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int rearrangeSticks(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func rearrangeSticks(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef rearrange_sticks(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def rearrangeSticks(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn rearrange_sticks(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (rearrange-sticks n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec rearrange_sticks(N :: integer(), K :: integer()) -> integer().\nrearrange_sticks(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec rearrange_sticks(n :: integer, k :: integer) :: integer\n  def rearrange_sticks(n, k) do\n    \n  end\nend"}}}