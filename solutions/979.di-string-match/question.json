{"question_id": "979", "problem_slug": "di-string-match", "problem_title": "DI String Match", "content": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\n \nExample 1:\nInput: s = \"IDID\"\nOutput: [0,4,1,3,2]\nExample 2:\nInput: s = \"III\"\nOutput: [0,1,2,3]\nExample 3:\nInput: s = \"DDI\"\nOutput: [3,2,0,1]\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'I' or 'D'.\n\n", "hints": [], "exampleTestcases": "\"IDID\"\n\"III\"\n\"DDI\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> diStringMatch(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] diStringMatch(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def diStringMatch(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diStringMatch(char* s, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] DiStringMatch(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number[]}\n */\nvar diStringMatch = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function diStringMatch(s: string): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function diStringMatch($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func diStringMatch(_ s: String) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun diStringMatch(s: String): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> diStringMatch(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func diStringMatch(s string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[]}\ndef di_string_match(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def diStringMatch(s: String): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn di_string_match(s: String) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (di-string-match s)\n  (-> string? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec di_string_match(S :: unicode:unicode_binary()) -> [integer()].\ndi_string_match(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec di_string_match(s :: String.t) :: [integer]\n  def di_string_match(s) do\n    \n  end\nend"}}}