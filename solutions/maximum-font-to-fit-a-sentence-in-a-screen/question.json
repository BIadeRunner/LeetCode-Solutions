{"questionId": "1384", "acRate": 61.133957476594624, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1618", "paidOnly": true, "status": "ac", "title": "Maximum Font to Fit a Sentence in a Screen", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "maximum-font-to-fit-a-sentence-in-a-screen", "content": "<p>You are given a string <code>text</code>. We want to display <code>text</code> on a screen of width <code>w</code> and height <code>h</code>. You can choose any font size from array <code>fonts</code>, which contains the available font sizes <strong>in ascending order</strong>.</p>\r\n\r\n<p>You can use the <code>FontInfo</code> interface to get the width and height of any character at any available font size.</p>\r\n\r\n<p>The <code>FontInfo</code> interface is defined as such:</p>\r\n\r\n<pre>\r\ninterface FontInfo {\r\n  // Returns the width of character ch on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getWidth(int fontSize, char ch);\r\n\r\n  // Returns the height of any character on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getHeight(int fontSize);\r\n}</pre>\r\n\r\n<p>The calculated width of <code>text</code> for some <code>fontSize</code> is the <strong>sum</strong> of every <code>getWidth(fontSize, text[i])</code> call for each <code>0 &lt;= i &lt; text.length</code> (<strong>0-indexed</strong>). The calculated height of <code>text</code> for some <code>fontSize</code> is <code>getHeight(fontSize)</code>. Note that <code>text</code> is displayed on a <strong>single line</strong>.</p>\r\n\r\n<p>It is guaranteed that <code>FontInfo</code> will return the same value if you call <code>getHeight</code> or <code>getWidth</code> with the same parameters.</p>\r\n\r\n<p>It is also guaranteed that for any font size <code>fontSize</code> and any character <code>ch</code>:</p>\r\n\r\n<ul>\r\n\t<li><code>getHeight(fontSize) &lt;= getHeight(fontSize+1)</code></li>\r\n\t<li><code>getWidth(fontSize, ch) &lt;= getWidth(fontSize+1, ch)</code></li>\r\n</ul>\r\n\r\n<p>Return <em>the maximum font size you can use to display </em><code>text</code><em> on the screen</em>. If <code>text</code> cannot fit on the display with any font size, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;helloworld&quot;, w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]\r\n<strong>Output:</strong> 6\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;leetcode&quot;, w = 1000, h = 50, fonts = [1,2,4]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;easyquestion&quot;, w = 100, h = 100, fonts = [10,15,20,25]\r\n<strong>Output:</strong> -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= text.length &lt;= 50000</code></li>\r\n\t<li><code>text</code> contains only lowercase English letters.</li>\r\n\t<li><code>1 &lt;= w &lt;= 10<sup>7</sup></code></li>\r\n\t<li><code>1 &lt;= h &lt;= 10<sup>4</sup></code></li>\r\n\t<li><code>1 &lt;= fonts.length &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>1 &lt;= fonts[i] &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>fonts</code> is sorted in ascending order and does not contain duplicates.</li>\r\n</ul>", "hints": ["Use <i>binary search</i>  to find the last valid font."], "exampleTestcases": "\"helloworld\"\n80\n20\n[6,8,10,12,14,16,18,24,36]\n\"leetcode\"\n1000\n50\n[1,2,4]\n\"easyquestion\"\n100\n100\n[10,15,20,25]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * class FontInfo {\n *   public:\n *     // Return the width of char ch when fontSize is used.\n *     int getWidth(int fontSize, char ch);\n *     \n *     // Return Height of any char when fontSize is used.\n *     int getHeight(int fontSize)\n * };\n */\nclass Solution {\npublic:\n    int maxFont(string text, int w, int h, vector<int>& fonts, FontInfo fontInfo) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface FontInfo {\n *     // Return the width of char ch when fontSize is used.\n *     public int getWidth(int fontSize, char ch) {}\n *     // Return Height of any char when fontSize is used.\n *     public int getHeight(int fontSize)\n * }\n */\nclass Solution {\n    public int maxFont(String text, int w, int h, int[] fonts, FontInfo fontInfo) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is FontInfo's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class FontInfo(object):\n#    Return the width of char ch when fontSize is used.\n#    def getWidth(self, fontSize, ch):\n#        \"\"\"\n#        :type fontSize: int\n#        :type ch: char\n#        :rtype int\n#        \"\"\"\n# \n#    def getHeight(self, fontSize):\n#        \"\"\"\n#        :type fontSize: int\n#        :rtype int\n#        \"\"\"\nclass Solution(object):\n    def maxFont(self, text, w, h, fonts, fontInfo):\n        \"\"\"\n        :type text: str\n        :type w: int\n        :type h: int\n        :type fonts: List[int]\n        :type fontInfo: FontInfo\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is FontInfo's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class FontInfo(object):\n#    Return the width of char ch when fontSize is used.\n#    def getWidth(self, fontSize, ch):\n#        \"\"\"\n#        :type fontSize: int\n#        :type ch: char\n#        :rtype int\n#        \"\"\"\n# \n#    def getHeight(self, fontSize):\n#        \"\"\"\n#        :type fontSize: int\n#        :rtype int\n#        \"\"\"\nclass Solution:\n    def maxFont(self, text: str, w: int, h: int, fonts: List[int], fontInfo : 'FontInfo') -> int:\n        "}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface FontInfo {\n *     // Return the width of char ch when fontSize is used.\n *     public int GetWidth(int fontSize, char ch) {}\n *     // Return Height of any char when fontSize is used.\n *     public int GetHeight(int fontSize)\n * }\n */\npublic class Solution {\n    public int MaxFont(string text, int w, int h, int[] fonts, FontInfo fontInfo) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the FontInfo's API interface.\n * // You should not implement it, or speculate about its implementation\n * function FontInfo() {\n *\n *\t\t@param {number} fontSize\n *\t\t@param {char} ch\n *     \t@return {number}\n *     \tthis.getWidth = function(fontSize, ch) {\n *      \t...\n *     \t};\n *\n *\t\t@param {number} fontSize\n *     \t@return {number}\n *     \tthis.getHeight = function(fontSize) {\n *      \t...\n *     \t};\n * };\n */\n/**\n * @param {string} text\n * @param {number} w\n * @param {number} h\n * @param {number[]} fonts\n * @param {FontInfo} fontInfo\n * @return {number}\n */\nvar maxFont = function(text, w, h, fonts, fontInfo) {\n    \n};"}], "similarQuestionList": []}