{"question_id": "3548", "problem_slug": "find-the-count-of-good-integers", "problem_title": "Find the Count of Good Integers", "content": "You are given two positive integers n and k.\nAn integer x is called k-palindromic if:\n\nx is a palindrome.\nx is divisible by k.\n\nAn integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.\nReturn the count of good integers containing n digits.\nNote that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.\n \nExample 1:\n\nInput: n = 3, k = 5\nOutput: 27\nExplanation:\nSome of the good integers are:\n\n551 because it can be rearranged to form 515.\n525 because it is already k-palindromic.\n\n\nExample 2:\n\nInput: n = 1, k = 4\nOutput: 2\nExplanation:\nThe two good integers are 4 and 8.\n\nExample 3:\n\nInput: n = 5, k = 6\nOutput: 2468\n\n \nConstraints:\n\n1 <= n <= 10\n1 <= k <= 9\n\n", "hints": ["How to generate all K-palindromic strings of length <code>n</code>? Do we need to go through all <code>n</code> digits?", "Use permutations to calculate the number of possible rearrangements."], "exampleTestcases": "3\n5\n1\n4\n5\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countGoodIntegers(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countGoodIntegers(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countGoodIntegers(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countGoodIntegers(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countGoodIntegers(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountGoodIntegers(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar countGoodIntegers = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countGoodIntegers(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function countGoodIntegers($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countGoodIntegers(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countGoodIntegers(n: Int, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countGoodIntegers(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countGoodIntegers(n int, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef count_good_integers(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countGoodIntegers(n: Int, k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_good_integers(n: i32, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-good-integers n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_good_integers(N :: integer(), K :: integer()) -> integer().\ncount_good_integers(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_good_integers(n :: integer, k :: integer) :: integer\n  def count_good_integers(n, k) do\n    \n  end\nend"}}}