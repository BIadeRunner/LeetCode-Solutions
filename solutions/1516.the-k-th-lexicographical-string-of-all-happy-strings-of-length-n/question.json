{"question_id": "1516", "problem_slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n", "problem_title": "The k-th Lexicographical String of All Happy Strings of Length n", "content": "A happy string is a string that:\n\nconsists only of letters of the set ['a', 'b', 'c'].\ns[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).\n\nFor example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\nGiven two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.\nReturn the kth string of this list or return an empty string if there are less than k happy strings of length n.\n \nExample 1:\n\nInput: n = 1, k = 3\nOutput: \"c\"\nExplanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".\n\nExample 2:\n\nInput: n = 1, k = 4\nOutput: \"\"\nExplanation: There are only 3 happy strings of length 1.\n\nExample 3:\n\nInput: n = 3, k = 9\nOutput: \"cab\"\nExplanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"\n\n \nConstraints:\n\n1 <= n <= 10\n1 <= k <= 100\n\n", "hints": ["Generate recursively all the happy strings of length n.", "Sort them in lexicographical order and return the kth string if it exists."], "exampleTestcases": "1\n3\n1\n4\n3\n9", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string getHappyString(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String getHappyString(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getHappyString(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* getHappyString(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string GetHappyString(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getHappyString = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getHappyString(n: number, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getHappyString($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getHappyString(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getHappyString(n: Int, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String getHappyString(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getHappyString(n int, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_happy_string(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getHappyString(n: Int, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_happy_string(n: i32, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-happy-string n k)\n  (-> exact-integer? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_happy_string(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_happy_string(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_happy_string(n :: integer, k :: integer) :: String.t\n  def get_happy_string(n, k) do\n    \n  end\nend"}}}