{"question_id": "3471", "problem_slug": "minimum-average-of-smallest-and-largest-elements", "problem_title": "Minimum Average of Smallest and Largest Elements", "content": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even.\nYou repeat the following procedure n / 2 times:\n\nRemove the smallest element, minElement, and the largest element maxElement, from nums.\nAdd (minElement + maxElement) / 2 to averages.\n\nReturn the minimum element in averages.\n \nExample 1:\n\nInput: nums = [7,8,3,4,15,13,4,1]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[7,8,3,4,15,13,4,1]\n[]\n\n\n1\n[7,8,3,4,13,4]\n[8]\n\n\n2\n[7,8,4,4]\n[8,8]\n\n\n3\n[7,4]\n[8,8,6]\n\n\n4\n[]\n[8,8,6,5.5]\n\n\n\nThe smallest element of averages, 5.5, is returned.\nExample 2:\n\nInput: nums = [1,9,8,3,10,5]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,9,8,3,10,5]\n[]\n\n\n1\n[9,8,3,5]\n[5.5]\n\n\n2\n[8,5]\n[5.5,6]\n\n\n3\n[]\n[5.5,6,6.5]\n\n\n\n\nExample 3:\n\nInput: nums = [1,2,3,7,8,9]\nOutput: 5.0\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,2,3,7,8,9]\n[]\n\n\n1\n[2,3,7,8]\n[5]\n\n\n2\n[3,7]\n[5,5]\n\n\n3\n[]\n[5,5,5]\n\n\n\n\n \nConstraints:\n\n2 <= n == nums.length <= 50\nn is even.\n1 <= nums[i] <= 50\n\n", "hints": ["If <code>nums</code> is sorted, then the elements of <code>averages</code> are <code>(nums[i] + nums[n - i - 1]) / 2</code>  for all <code>i < n / 2</code>."], "exampleTestcases": "[7,8,3,4,15,13,4,1]\n[1,9,8,3,10,5]\n[1,2,3,7,8,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double minimumAverage(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double minimumAverage(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumAverage(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumAverage(self, nums: List[int]) -> float:\n        "}, "C": {"langSlug": "c", "code": "double minimumAverage(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double MinimumAverage(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumAverage = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumAverage(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Float\n     */\n    function minimumAverage($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumAverage(_ nums: [Int]) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumAverage(nums: IntArray): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double minimumAverage(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumAverage(nums []int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Float}\ndef minimum_average(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumAverage(nums: Array[Int]): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_average(nums: Vec<i32>) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-average nums)\n  (-> (listof exact-integer?) flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_average(Nums :: [integer()]) -> float().\nminimum_average(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_average(nums :: [integer]) :: float\n  def minimum_average(nums) do\n    \n  end\nend"}}}