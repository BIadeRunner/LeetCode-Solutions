{"question_id": "3111", "problem_slug": "smallest-number-with-given-digit-product", "problem_title": "Smallest Number With Given Digit Product", "content": "Given a positive integer n, return a string representing the smallest positive integer such that the product of its digits is equal to n, or \"-1\" if no such number exists.\n \nExample 1:\n\nInput: n = 105\nOutput: \"357\"\nExplanation: 3 * 5 * 7 = 105. It can be shown that 357 is the smallest number with a product of digits equal to 105. So the answer would be \"357\".\n\nExample 2:\n\nInput: n = 7\nOutput: \"7\"\nExplanation: Since 7 has only one digit, its product of digits would be 7. We will show that 7 is the smallest number with a product of digits equal to 7. Since the product of numbers 1 to 6 is 1 to 6 respectively, so \"7\" would be the answer.\n\nExample 3:\n\nInput: n = 44\nOutput: \"-1\"\nExplanation: It can be shown that there is no number such that its product of digits is equal to 44. So the answer would be \"-1\".\n\n \nConstraints:\n\n1 <= n <= 1018\n\n", "hints": ["Find the prime factors of <code>n</code>.", "If there is a prime factor <code>p</code> such that <code>p >= 11</code>, the answer is <code>-1</code>. Since there are no digits whose products equal <code>p</code>.", "Factors <code>5</code> and <code>7</code> should be included in the answer since their product with any number bigger than <code>1</code> is a 2-digit number.", "For factors <code>2</code> and <code>3</code>, we group every three <code>2</code> into an <code>8</code> and every two <code>3</code> into a <code>9</code>.", "For any leftover <code>2</code> or <code>3</code>, check all the possible combinations."], "exampleTestcases": "105\n7\n44", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestNumber(long long n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String smallestNumber(long n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestNumber(self, n: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* smallestNumber(long long n){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SmallestNumber(long n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar smallestNumber = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestNumber(n: number): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function smallestNumber($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestNumber(_ n: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestNumber(n: Long): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String smallestNumber(int n) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestNumber(n int64) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String}\ndef smallest_number(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestNumber(n: Long): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_number(n: i64) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-number n)\n  (-> exact-integer? string?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_number(N :: integer()) -> unicode:unicode_binary().\nsmallest_number(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_number(n :: integer) :: String.t\n  def smallest_number(n) do\n    \n  end\nend"}}}