{"question_id": "1177", "problem_slug": "tree-diameter", "problem_title": "Tree Diameter", "content": "The diameter of a tree is the number of edges in the longest path in that tree.\nThere is an undirected tree of n nodes labeled from 0 to n - 1. You are given a 2D array edges where edges.length == n - 1 and edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree.\nReturn the diameter of the tree.\n \nExample 1:\n\n\nInput: edges = [[0,1],[0,2]]\nOutput: 2\nExplanation: The longest path of the tree is the path 1 - 0 - 2.\n\nExample 2:\n\n\nInput: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\nOutput: 4\nExplanation: The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.\n\n \nConstraints:\n\nn == edges.length + 1\n1 <= n <= 104\n0 <= ai, bi < n\nai != bi\n\n", "hints": ["Start at any node A and traverse the tree to find the furthest node from it, let's call it B.", "Having found the furthest node B, traverse the tree from B to find the furthest node from it, lets call it C.", "The distance between B and C is the tree diameter."], "exampleTestcases": "[[0,1],[0,2]]\n[[0,1],[1,2],[2,3],[1,4],[4,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int treeDiameter(vector<vector<int>>& edges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int treeDiameter(int[][] edges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def treeDiameter(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int treeDiameter(int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TreeDiameter(int[][] edges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar treeDiameter = function(edges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function treeDiameter(edges: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function treeDiameter($edges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func treeDiameter(_ edges: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun treeDiameter(edges: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int treeDiameter(List<List<int>> edges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func treeDiameter(edges [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer}\ndef tree_diameter(edges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def treeDiameter(edges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn tree_diameter(edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (tree-diameter edges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec tree_diameter(Edges :: [[integer()]]) -> integer().\ntree_diameter(Edges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec tree_diameter(edges :: [[integer]]) :: integer\n  def tree_diameter(edges) do\n    \n  end\nend"}}}