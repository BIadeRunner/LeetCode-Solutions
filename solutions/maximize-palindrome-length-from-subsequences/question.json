{"questionId": "1897", "acRate": 36.85427197632845, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1771", "paidOnly": false, "status": "ac", "title": "Maximize Palindrome Length From Subsequences", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "maximize-palindrome-length-from-subsequences", "content": "<p>You are given two strings, <code>word1</code> and <code>word2</code>. You want to construct a string in the following manner:</p>\n\n<ul>\n\t<li>Choose some <strong>non-empty</strong> subsequence <code>subsequence1</code> from <code>word1</code>.</li>\n\t<li>Choose some <strong>non-empty</strong> subsequence <code>subsequence2</code> from <code>word2</code>.</li>\n\t<li>Concatenate the subsequences: <code>subsequence1 + subsequence2</code>, to make the string.</li>\n</ul>\n\n<p>Return <em>the <strong>length</strong> of the longest <strong>palindrome</strong> that can be constructed in the described manner. </em>If no palindromes can be constructed, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be made by deleting some (possibly none) characters from <code>s</code> without changing the order of the remaining characters.</p>\n\n<p>A <strong>palindrome</strong> is a string that reads the same forward&nbsp;as well as backward.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;cacb&quot;, word2 = &quot;cbba&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;cba&quot; from word2 to make &quot;abcba&quot;, which is a palindrome.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;ab&quot;, word2 = &quot;ab&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;a&quot; from word2 to make &quot;aba&quot;, which is a palindrome.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;aa&quot;, word2 = &quot;bb&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You cannot construct a palindrome from the described method, so return 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 1000</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n", "hints": ["Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.", "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."], "exampleTestcases": "\"cacb\"\n\"cbba\"\n\"ab\"\n\"ab\"\n\"aa\"\n\"bb\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPalindrome(string word1, string word2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestPalindrome(String word1, String word2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestPalindrome(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int longestPalindrome(char* word1, char* word2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestPalindrome(string word1, string word2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar longestPalindrome = function(word1, word2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestPalindrome(word1: string, word2: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function longestPalindrome($word1, $word2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestPalindrome(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindrome(word1: String, word2: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int longestPalindrome(String word1, String word2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func longestPalindrome(word1 string, word2 string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef longest_palindrome(word1, word2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestPalindrome(word1: String, word2: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome(word1: String, word2: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (longest-palindrome word1 word2)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec longest_palindrome(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nlongest_palindrome(Word1, Word2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_palindrome(word1 :: String.t, word2 :: String.t) :: integer\n  def longest_palindrome(word1, word2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "isPaidOnly": false}]}