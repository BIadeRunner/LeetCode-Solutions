{"question_id": "252", "problem_slug": "meeting-rooms", "problem_title": "Meeting Rooms", "content": "Given an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.\n \nExample 1:\nInput: intervals = [[0,30],[5,10],[15,20]]\nOutput: false\nExample 2:\nInput: intervals = [[7,10],[2,4]]\nOutput: true\n\n \nConstraints:\n\n0 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti < endi <= 106\n\n", "hints": [], "exampleTestcases": "[[0,30],[5,10],[15,20]]\n[[7,10],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canAttendMeetings(vector<vector<int>>& intervals) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canAttendMeetings(int[][] intervals) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canAttendMeetings(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canAttendMeetings(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanAttendMeetings(int[][] intervals) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {boolean}\n */\nvar canAttendMeetings = function(intervals) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canAttendMeetings(intervals: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Boolean\n     */\n    function canAttendMeetings($intervals) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canAttendMeetings(_ intervals: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canAttendMeetings(intervals: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canAttendMeetings(List<List<int>> intervals) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canAttendMeetings(intervals [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Boolean}\ndef can_attend_meetings(intervals)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canAttendMeetings(intervals: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_attend_meetings(intervals: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-attend-meetings intervals)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_attend_meetings(Intervals :: [[integer()]]) -> boolean().\ncan_attend_meetings(Intervals) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_attend_meetings(intervals :: [[integer]]) :: boolean\n  def can_attend_meetings(intervals) do\n    \n  end\nend"}}}