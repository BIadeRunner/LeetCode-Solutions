{"questionId": "2191", "acRate": 46.9155577460161, "difficulty": "Medium", "freqBar": 40.97205529817753, "frontendQuestionId": "2086", "paidOnly": false, "status": "ac", "title": "Minimum Number of Food Buckets to Feed the Hamsters", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "minimum-number-of-food-buckets-to-feed-the-hamsters", "content": "<p>You are given a <strong>0-indexed</strong> string <code>hamsters</code> where <code>hamsters[i]</code> is either:</p>\n\n<ul>\n\t<li><code>&#39;H&#39;</code> indicating that there is a hamster at index <code>i</code>, or</li>\n\t<li><code>&#39;.&#39;</code> indicating that index <code>i</code> is empty.</li>\n</ul>\n\n<p>You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index <code>i</code> can be fed if you place a food bucket at index <code>i - 1</code> <strong>and/or</strong> at index <code>i + 1</code>.</p>\n\n<p>Return <em>the minimum number of food buckets you should <strong>place at empty indices</strong> to feed all the hamsters or </em><code>-1</code><em> if it is impossible to feed all of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example1.png\" style=\"width: 482px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;H..H&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example2.png\" style=\"width: 602px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;.H.H.&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We place one food bucket at index 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example3.png\" style=\"width: 602px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;.HHH.&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hamsters.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>hamsters[i]</code> is either<code>&#39;H&#39;</code> or <code>&#39;.&#39;</code>.</li>\n</ul>\n", "hints": ["When is it impossible to feed all the hamsters?", "When one or more hamsters do not have an empty space adjacent to it.", "Assuming all previous hamsters are fed. If there is a hamster at index i and you are able to place a bucket at index i - 1 or i + 1, where should you put it?", "It is always better to place a bucket at index i + 1 because it can feed the next hamster as well."], "exampleTestcases": "\"H..H\"\n\".H.H.\"\n\".HHH.\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumBuckets(string hamsters) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumBuckets(String hamsters) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumBuckets(self, hamsters):\n        \"\"\"\n        :type hamsters: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumBuckets(self, hamsters: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumBuckets(char* hamsters) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumBuckets(string hamsters) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} hamsters\n * @return {number}\n */\nvar minimumBuckets = function(hamsters) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumBuckets(hamsters: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $hamsters\n     * @return Integer\n     */\n    function minimumBuckets($hamsters) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumBuckets(_ hamsters: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumBuckets(hamsters: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumBuckets(String hamsters) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumBuckets(hamsters string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} hamsters\n# @return {Integer}\ndef minimum_buckets(hamsters)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumBuckets(hamsters: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_buckets(hamsters: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-buckets hamsters)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_buckets(Hamsters :: unicode:unicode_binary()) -> integer().\nminimum_buckets(Hamsters) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_buckets(hamsters :: String.t) :: integer\n  def minimum_buckets(hamsters) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-number-of-people-that-can-be-caught-in-tag", "title": "Maximum Number of People That Can Be Caught in Tag", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "brightest-position-on-street", "title": "Brightest Position on Street", "isPaidOnly": true}]}