{"question_id": "1511", "problem_slug": "count-number-of-teams", "problem_title": "Count Number of Teams", "content": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\nChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\nA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n \nExample 1:\n\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\nExample 2:\n\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.\n\nExample 3:\n\nInput: rating = [1,2,3,4]\nOutput: 4\n\n \nConstraints:\n\nn == rating.length\n3 <= n <= 1000\n1 <= rating[i] <= 105\nAll the integers in rating are unique.\n\n", "hints": ["BruteForce, check all possibilities."], "exampleTestcases": "[2,5,3,4,1]\n[2,1,3]\n[1,2,3,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTeams(vector<int>& rating) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numTeams(int[] rating) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numTeams(self, rating):\n        \"\"\"\n        :type rating: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numTeams(int* rating, int ratingSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumTeams(int[] rating) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} rating\n * @return {number}\n */\nvar numTeams = function(rating) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numTeams(rating: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rating\n     * @return Integer\n     */\n    function numTeams($rating) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numTeams(_ rating: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numTeams(rating: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numTeams(List<int> rating) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numTeams(rating []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} rating\n# @return {Integer}\ndef num_teams(rating)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numTeams(rating: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_teams(rating: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-teams rating)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_teams(Rating :: [integer()]) -> integer().\nnum_teams(Rating) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_teams(rating :: [integer]) :: integer\n  def num_teams(rating) do\n    \n  end\nend"}}}