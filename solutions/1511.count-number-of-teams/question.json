{"questionId": "1511", "acRate": 70.13293444654458, "difficulty": "Medium", "freqBar": 82.08125616284103, "frontendQuestionId": "1395", "paidOnly": false, "status": "ac", "title": "Count Number of Teams", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Binary Indexed Tree", "id": "VG9waWNUYWdOb2RlOjI4", "slug": "binary-indexed-tree"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}], "titleSlug": "count-number-of-teams", "content": "<p>There are <code>n</code> soldiers standing in a line. Each soldier is assigned a <strong>unique</strong> <code>rating</code> value.</p>\n\n<p>You have to form a team of 3 soldiers amongst them under the following rules:</p>\n\n<ul>\n\t<li>Choose 3 soldiers with index (<code>i</code>, <code>j</code>, <code>k</code>) with rating (<code>rating[i]</code>, <code>rating[j]</code>, <code>rating[k]</code>).</li>\n\t<li>A team is valid if: (<code>rating[i] &lt; rating[j] &lt; rating[k]</code>) or (<code>rating[i] &gt; rating[j] &gt; rating[k]</code>) where (<code>0 &lt;= i &lt; j &lt; k &lt; n</code>).</li>\n</ul>\n\n<p>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [2,5,3,4,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [2,1,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We can&#39;t form any team given the conditions.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rating = [1,2,3,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == rating.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= rating[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All the integers in <code>rating</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["BruteForce, check all possibilities."], "exampleTestcases": "[2,5,3,4,1]\n[2,1,3]\n[1,2,3,4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTeams(vector<int>& rating) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numTeams(int[] rating) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numTeams(self, rating):\n        \"\"\"\n        :type rating: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numTeams(int* rating, int ratingSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumTeams(int[] rating) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} rating\n * @return {number}\n */\nvar numTeams = function(rating) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numTeams(rating: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rating\n     * @return Integer\n     */\n    function numTeams($rating) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numTeams(_ rating: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numTeams(rating: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numTeams(List<int> rating) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numTeams(rating []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} rating\n# @return {Integer}\ndef num_teams(rating)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numTeams(rating: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_teams(rating: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-teams rating)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_teams(Rating :: [integer()]) -> integer().\nnum_teams(Rating) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_teams(rating :: [integer]) :: integer\n  def num_teams(rating) do\n    \n  end\nend"}], "similarQuestionList": []}