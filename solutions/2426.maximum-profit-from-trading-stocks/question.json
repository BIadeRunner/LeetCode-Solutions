{"question_id": "2426", "problem_slug": "maximum-profit-from-trading-stocks", "problem_title": "Maximum Profit From Trading Stocks", "content": "You are given two 0-indexed integer arrays of the same length present and future where present[i] is the current price of the ith stock and future[i] is the price of the ith stock a year in the future. You may buy each stock at most once. You are also given an integer budget representing the amount of money you currently have.\nReturn the maximum amount of profit you can make.\n \nExample 1:\n\nInput: present = [5,4,6,2,3], future = [8,5,4,3,5], budget = 10\nOutput: 6\nExplanation: One possible way to maximize your profit is to:\nBuy the 0th, 3rd, and 4th stocks for a total of 5 + 2 + 3 = 10.\nNext year, sell all three stocks for a total of 8 + 3 + 5 = 16.\nThe profit you made is 16 - 10 = 6.\nIt can be shown that the maximum profit you can make is 6.\n\nExample 2:\n\nInput: present = [2,2,5], future = [3,4,10], budget = 6\nOutput: 5\nExplanation: The only possible way to maximize your profit is to:\nBuy the 2nd stock, and make a profit of 10 - 5 = 5.\nIt can be shown that the maximum profit you can make is 5.\n\nExample 3:\n\nInput: present = [3,3,12], future = [0,3,15], budget = 10\nOutput: 0\nExplanation: One possible way to maximize your profit is to:\nBuy the 1st stock, and make a profit of 3 - 3 = 0.\nIt can be shown that the maximum profit you can make is 0.\n\n \nConstraints:\n\nn == present.length == future.length\n1 <= n <= 1000\n0 <= present[i], future[i] <= 100\n0 <= budget <= 1000\n\n", "hints": ["Think of the 0-1 Knapsack Problem.", "For the ith stock, the weight is present[i], and the value is future[i] - present[i]."], "exampleTestcases": "[5,4,6,2,3]\n[8,5,4,3,5]\n10\n[2,2,5]\n[3,4,10]\n6\n[3,3,12]\n[0,3,15]\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumProfit(vector<int>& present, vector<int>& future, int budget) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumProfit(int[] present, int[] future, int budget) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumProfit(self, present, future, budget):\n        \"\"\"\n        :type present: List[int]\n        :type future: List[int]\n        :type budget: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumProfit(self, present: List[int], future: List[int], budget: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumProfit(int* present, int presentSize, int* future, int futureSize, int budget) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumProfit(int[] present, int[] future, int budget) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} present\n * @param {number[]} future\n * @param {number} budget\n * @return {number}\n */\nvar maximumProfit = function(present, future, budget) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumProfit(present: number[], future: number[], budget: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $present\n     * @param Integer[] $future\n     * @param Integer $budget\n     * @return Integer\n     */\n    function maximumProfit($present, $future, $budget) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumProfit(_ present: [Int], _ future: [Int], _ budget: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumProfit(present: IntArray, future: IntArray, budget: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumProfit(List<int> present, List<int> future, int budget) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumProfit(present []int, future []int, budget int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} present\n# @param {Integer[]} future\n# @param {Integer} budget\n# @return {Integer}\ndef maximum_profit(present, future, budget)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumProfit(present: Array[Int], future: Array[Int], budget: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_profit(present: Vec<i32>, future: Vec<i32>, budget: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-profit present future budget)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_profit(Present :: [integer()], Future :: [integer()], Budget :: integer()) -> integer().\nmaximum_profit(Present, Future, Budget) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_profit(present :: [integer], future :: [integer], budget :: integer) :: integer\n  def maximum_profit(present, future, budget) do\n    \n  end\nend"}}}