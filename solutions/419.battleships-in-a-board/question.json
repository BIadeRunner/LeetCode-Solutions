{"question_id": "419", "problem_slug": "battleships-in-a-board", "problem_title": "Battleships in a Board", "content": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n \nExample 1:\n\n\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\nOutput: 2\n\nExample 2:\n\nInput: board = [[\".\"]]\nOutput: 0\n\n \nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 200\nboard[i][j] is either '.' or 'X'.\n\n \nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?\n", "hints": [], "exampleTestcases": "[[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n[[\".\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countBattleships(vector<vector<char>>& board) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countBattleships(char[][] board) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countBattleships(char** board, int boardSize, int* boardColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountBattleships(char[][] board) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @return {number}\n */\nvar countBattleships = function(board) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countBattleships(board: string[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Integer\n     */\n    function countBattleships($board) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countBattleships(_ board: [[Character]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countBattleships(board: Array<CharArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countBattleships(List<List<String>> board) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countBattleships(board [][]byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countBattleships(board: Array[Array[Char]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_battleships(board: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-battleships board)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_battleships(Board :: [[char()]]) -> integer().\ncount_battleships(Board) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_battleships(board :: [[char]]) :: integer\n  def count_battleships(board) do\n    \n  end\nend"}}}