{"questionId": "2648", "acRate": 57.861224489795916, "difficulty": "Hard", "freqBar": 39.5140821796871, "frontendQuestionId": "2585", "paidOnly": false, "status": "ac", "title": "Number of Ways to Earn Points", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "number-of-ways-to-earn-points", "content": "<p>There is a test that has <code>n</code> types of questions. You are given an integer <code>target</code> and a <strong>0-indexed</strong> 2D integer array <code>types</code> where <code>types[i] = [count<sub>i</sub>, marks<sub>i</sub>]</code> indicates that there are <code>count<sub>i</sub></code> questions of the <code>i<sup>th</sup></code> type, and each one of them is worth <code>marks<sub>i</sub></code> points.</p>\n\n<ul>\n</ul>\n\n<p>Return <em>the number of ways you can earn <strong>exactly</strong> </em><code>target</code><em> points in the exam</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note</strong> that questions of the same type are indistinguishable.</p>\n\n<ul>\n\t<li>For example, if there are <code>3</code> questions of the same type, then solving the <code>1<sup>st</sup></code> and <code>2<sup>nd</sup></code> questions is the same as solving the <code>1<sup>st</sup></code> and <code>3<sup>rd</sup></code> questions, or the <code>2<sup>nd</sup></code> and <code>3<sup>rd</sup></code> questions.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 6, types = [[6,1],[3,2],[2,3]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0<sup>th</sup> type, 1 question of the 1<sup>st</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1<sup>st</sup> type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2<sup>nd</sup> type: 3 + 3 = 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 5, types = [[50,1],[50,2],[50,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2<sup>nd</sup> type: 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 18, types = [[6,1],[3,2],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can only earn 18 points by answering all questions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 1000</code></li>\n\t<li><code>n == types.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>types[i].length == 2</code></li>\n\t<li><code>1 &lt;= count<sub>i</sub>, marks<sub>i</sub> &lt;= 50</code></li>\n</ul>\n", "hints": ["Use Dynamic Programming", "Let ways[i][points] be the number of ways to score a given number of points after solving some questions of the first i types.", "ways[i][points] is equal to the sum of ways[i-1][points - solved * marks[i] over 0 <= solved <= count_i"], "exampleTestcases": "6\n[[6,1],[3,2],[2,3]]\n5\n[[50,1],[50,2],[50,5]]\n18\n[[6,1],[3,2],[2,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int waysToReachTarget(int target, vector<vector<int>>& types) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int waysToReachTarget(int target, int[][] types) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def waysToReachTarget(self, target, types):\n        \"\"\"\n        :type target: int\n        :type types: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int waysToReachTarget(int target, int** types, int typesSize, int* typesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int WaysToReachTarget(int target, int[][] types) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} target\n * @param {number[][]} types\n * @return {number}\n */\nvar waysToReachTarget = function(target, types) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function waysToReachTarget(target: number, types: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[][] $types\n     * @return Integer\n     */\n    function waysToReachTarget($target, $types) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func waysToReachTarget(_ target: Int, _ types: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun waysToReachTarget(target: Int, types: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int waysToReachTarget(int target, List<List<int>> types) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func waysToReachTarget(target int, types [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} target\n# @param {Integer[][]} types\n# @return {Integer}\ndef ways_to_reach_target(target, types)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def waysToReachTarget(target: Int, types: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn ways_to_reach_target(target: i32, types: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (ways-to-reach-target target types)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec ways_to_reach_target(Target :: integer(), Types :: [[integer()]]) -> integer().\nways_to_reach_target(Target, Types) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec ways_to_reach_target(target :: integer, types :: [[integer]]) :: integer\n  def ways_to_reach_target(target, types) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "coin-change-ii", "title": "Coin Change II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "isPaidOnly": false}]}