{"questionId": "1714", "acRate": 43.36489460273338, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1592", "paidOnly": false, "status": "ac", "title": "Rearrange Spaces Between Words", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "rearrange-spaces-between-words", "content": "<p>You are given a string <code>text</code> of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It&#39;s guaranteed that <code>text</code> <strong>contains at least one word</strong>.</p>\n\n<p>Rearrange the spaces so that there is an <strong>equal</strong> number of spaces between every pair of adjacent words and that number is <strong>maximized</strong>. If you cannot redistribute all the spaces equally, place the <strong>extra spaces at the end</strong>, meaning the returned string should be the same length as <code>text</code>.</p>\n\n<p>Return <em>the string after rearranging the spaces</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;  this   is  a sentence &quot;\n<strong>Output:</strong> &quot;this   is   a   sentence&quot;\n<strong>Explanation:</strong> There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot; practice   makes   perfect&quot;\n<strong>Output:</strong> &quot;practice   makes   perfect &quot;\n<strong>Explanation:</strong> There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 100</code></li>\n\t<li><code>text</code> consists of lowercase English letters and <code>&#39; &#39;</code>.</li>\n\t<li><code>text</code> contains at least one word.</li>\n</ul>\n", "hints": ["Count the total number of spaces and words. Then use the integer division to determine the numbers of spaces to add between each word and at the end."], "exampleTestcases": "\"  this   is  a sentence \"\n\" practice   makes   perfect\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reorderSpaces(string text) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reorderSpaces(String text) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reorderSpaces(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reorderSpaces(self, text: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* reorderSpaces(char* text) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReorderSpaces(string text) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {string}\n */\nvar reorderSpaces = function(text) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reorderSpaces(text: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return String\n     */\n    function reorderSpaces($text) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reorderSpaces(_ text: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reorderSpaces(text: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String reorderSpaces(String text) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func reorderSpaces(text string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} text\n# @return {String}\ndef reorder_spaces(text)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reorderSpaces(text: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reorder_spaces(text: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (reorder-spaces text)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec reorder_spaces(Text :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreorder_spaces(Text) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec reorder_spaces(text :: String.t) :: String.t\n  def reorder_spaces(text) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "text-justification", "title": "Text Justification", "isPaidOnly": false}]}