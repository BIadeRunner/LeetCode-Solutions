{"questionId": "2490", "acRate": 39.90605464027907, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2355", "paidOnly": true, "status": "ac", "title": "Maximum Number of Books You Can Take", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}], "titleSlug": "maximum-number-of-books-you-can-take", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>books</code> of length <code>n</code> where <code>books[i]</code> denotes the number of books on the <code>i<sup>th</sup></code> shelf of a bookshelf.</p>\n\n<p>You are going to take books from a <strong>contiguous</strong> section of the bookshelf spanning from <code>l</code> to <code>r</code> where <code>0 &lt;= l &lt;= r &lt; n</code>. For each index <code>i</code> in the range <code>l &lt;= i &lt; r</code>, you must take <strong>strictly fewer</strong> books from shelf <code>i</code> than shelf <code>i + 1</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of books you can take from the bookshelf.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> books = [8,5,2,7,9]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong>\n- Take 1 book from shelf 1.\n- Take 2 books from shelf 2.\n- Take 7 books from shelf 3.\n- Take 9 books from shelf 4.\nYou have taken 19 books, so return 19.\nIt can be proven that 19 is the maximum number of books you can take.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> books = [7,0,3,4,5]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong>\n- Take 3 books from shelf 2.\n- Take 4 books from shelf 3.\n- Take 5 books from shelf 4.\nYou have taken 12 books so return 12.\nIt can be proven that 12 is the maximum number of books you can take.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> books = [8,2,3,7,3,4,0,1,4,3]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong>\n- Take 1 book from shelf 0.\n- Take 2 books from shelf 1.\n- Take 3 books from shelf 2.\n- Take 7 books from shelf 3.\nYou have taken 13 books so return 13.\nIt can be proven that 13 is the maximum number of books you can take.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= books.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= books[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Create a dp array where dp[i] is the maximum number of books you can take if you can only take books from bookshelves 0 to i and you must take books from bookshelf i.", "Keep taking as many books as you can (i.e. starting from bookshelf i and going backwards, you take arr[i], arr[i] - 1, arr[i] - 2, \u2026 books).", "You may reach an index j where arr[j] < arr[i] - (i - j). Have we already found the maximum number of books you can take from bookshelves 0 to j? How do we quickly find such an index j?", "Keep a stack of possible indices for j. If x is the number at the top of the stack, keep popping from the stack while arr[x] \u2265 arr[i] - (i - x). This is because if the inequality mentioned before is true, x will never be an index j as index i will run out of items first."], "exampleTestcases": "[8,5,2,7,9]\n[7,0,3,4,5]\n[8,2,3,7,3,4,0,1,4,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumBooks(vector<int>& books) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maximumBooks(int[] books) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumBooks(self, books):\n        \"\"\"\n        :type books: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maximumBooks(int* books, int booksSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaximumBooks(int[] books) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} books\n * @return {number}\n */\nvar maximumBooks = function(books) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumBooks(books: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $books\n     * @return Integer\n     */\n    function maximumBooks($books) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumBooks(_ books: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumBooks(books: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumBooks(List<int> books) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumBooks(books []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} books\n# @return {Integer}\ndef maximum_books(books)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumBooks(books: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_books(books: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-books books)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_books(Books :: [integer()]) -> integer().\nmaximum_books(Books) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_books(books :: [integer]) :: integer\n  def maximum_books(books) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "beautiful-towers-ii", "title": "Beautiful Towers II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "beautiful-towers-i", "title": "Beautiful Towers I", "isPaidOnly": false}]}