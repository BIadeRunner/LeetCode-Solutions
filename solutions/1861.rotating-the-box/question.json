{"questionId": "1972", "acRate": 67.93846079474041, "difficulty": "Medium", "freqBar": 48.47893407563074, "frontendQuestionId": "1861", "paidOnly": false, "status": "ac", "title": "Rotating the Box", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "rotating-the-box", "content": "<p>You are given an <code>m x n</code> matrix of characters <code>box</code> representing a side-view of a box. Each cell of the box is one of the following:</p>\r\n\r\n<ul>\r\n\t<li>A stone <code>&#39;#&#39;</code></li>\r\n\t<li>A stationary obstacle <code>&#39;*&#39;</code></li>\r\n\t<li>Empty <code>&#39;.&#39;</code></li>\r\n</ul>\r\n\r\n<p>The box is rotated <strong>90 degrees clockwise</strong>, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity <strong>does not</strong> affect the obstacles&#39; positions, and the inertia from the box&#39;s rotation <strong>does not </strong>affect the stones&#39; horizontal positions.</p>\r\n\r\n<p>It is <strong>guaranteed</strong> that each stone in <code>box</code> rests on an obstacle, another stone, or the bottom of the box.</p>\r\n\r\n<p>Return <em>an </em><code>n x m</code><em> matrix representing the box after the rotation described above</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png\" style=\"width: 300px; height: 150px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> box = [[&quot;#&quot;,&quot;.&quot;,&quot;#&quot;]]\r\n<strong>Output:</strong> [[&quot;.&quot;],\r\n&nbsp;        [&quot;#&quot;],\r\n&nbsp;        [&quot;#&quot;]]\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png\" style=\"width: 375px; height: 195px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> box = [[&quot;#&quot;,&quot;.&quot;,&quot;*&quot;,&quot;.&quot;],\r\n&nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;]]\r\n<strong>Output:</strong> [[&quot;#&quot;,&quot;.&quot;],\r\n&nbsp;        [&quot;#&quot;,&quot;#&quot;],\r\n&nbsp;        [&quot;*&quot;,&quot;*&quot;],\r\n&nbsp;        [&quot;.&quot;,&quot;.&quot;]]\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png\" style=\"width: 400px; height: 218px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> box = [[&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;,&quot;*&quot;,&quot;.&quot;],\r\n&nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;*&quot;,&quot;.&quot;,&quot;.&quot;],\r\n&nbsp;             [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;.&quot;]]\r\n<strong>Output:</strong> [[&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],\r\n&nbsp;        [&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],\r\n&nbsp;        [&quot;#&quot;,&quot;#&quot;,&quot;*&quot;],\r\n&nbsp;        [&quot;#&quot;,&quot;*&quot;,&quot;.&quot;],\r\n&nbsp;        [&quot;#&quot;,&quot;.&quot;,&quot;*&quot;],\r\n&nbsp;        [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;]]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>m == box.length</code></li>\r\n\t<li><code>n == box[i].length</code></li>\r\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\r\n\t<li><code>box[i][j]</code> is either <code>&#39;#&#39;</code>, <code>&#39;*&#39;</code>, or <code>&#39;.&#39;</code>.</li>\r\n</ul>", "hints": ["Rotate the box using the relation rotatedBox[i][j] = box[m - 1 - j][i].", "Start iterating from the bottom of the box and for each empty cell check if there is any stone above it with no obstacles between them."], "exampleTestcases": "[[\"#\",\".\",\"#\"]]\n[[\"#\",\".\",\"*\",\".\"],[\"#\",\"#\",\"*\",\".\"]]\n[[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],[\"#\",\"#\",\"#\",\"*\",\".\",\".\"],[\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<char>> rotateTheBox(vector<vector<char>>& box) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public char[][] rotateTheBox(char[][] box) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rotateTheBox(self, box):\n        \"\"\"\n        :type box: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar** rotateTheBox(char** box, int boxSize, int* boxColSize, int* returnSize, int** returnColumnSizes){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public char[][] RotateTheBox(char[][] box) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} box\n * @return {character[][]}\n */\nvar rotateTheBox = function(box) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rotateTheBox(box: string[][]): string[][] {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $box\n     * @return String[][]\n     */\n    function rotateTheBox($box) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rotateTheBox(_ box: [[Character]]) -> [[Character]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rotateTheBox(box: Array<CharArray>): Array<CharArray> {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func rotateTheBox(box [][]byte) [][]byte {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} box\n# @return {Character[][]}\ndef rotate_the_box(box)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rotateTheBox(box: Array[Array[Char]]): Array[Array[Char]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rotate_the_box(box: Vec<Vec<char>>) -> Vec<Vec<char>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (rotate-the-box box)\n  (-> (listof (listof char?)) (listof (listof char?)))\n\n  )"}], "similarQuestionList": []}