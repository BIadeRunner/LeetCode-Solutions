{"questionId": "1707", "acRate": 48.79974394537501, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1585", "paidOnly": false, "status": "ac", "title": "Check If String Is Transformable With Substring Sort Operations", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "check-if-string-is-transformable-with-substring-sort-operations", "content": "<p>Given two strings <code>s</code> and <code>t</code>, transform string <code>s</code> into string <code>t</code> using the following operation any number of times:</p>\n\n<ul>\n\t<li>Choose a <strong>non-empty</strong> substring in <code>s</code> and sort it in place so the characters are in <strong>ascending order</strong>.\n\n\t<ul>\n\t\t<li>For example, applying the operation on the underlined substring in <code>&quot;1<u>4234</u>&quot;</code> results in <code>&quot;1<u>2344</u>&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <code>true</code> if <em>it is possible to transform <code>s</code> into <code>t</code></em>. Otherwise, return <code>false</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;84532&quot;, t = &quot;34852&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can transform s into t using the following sort operations:\n&quot;84<u>53</u>2&quot; (from index 2 to 3) -&gt; &quot;84<u>35</u>2&quot;\n&quot;<u>843</u>52&quot; (from index 0 to 2) -&gt; &quot;<u>348</u>52&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;34521&quot;, t = &quot;23415&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can transform s into t using the following sort operations:\n&quot;<u>3452</u>1&quot; -&gt; &quot;<u>2345</u>1&quot;\n&quot;234<u>51</u>&quot; -&gt; &quot;234<u>15</u>&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12345&quot;, t = &quot;12435&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s.length == t.length</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only digits.</li>\n</ul>\n", "hints": ["Suppose the first digit you need is 'd'. How can you determine if it's possible to get that digit there?", "Consider swapping adjacent characters to maintain relative ordering."], "exampleTestcases": "\"84532\"\n\"34852\"\n\"34521\"\n\"23415\"\n\"12345\"\n\"12435\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isTransformable(string s, string t) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isTransformable(String s, String t) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isTransformable(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isTransformable(char* s, char* t) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsTransformable(string s, string t) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isTransformable = function(s, t) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isTransformable(s: string, t: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isTransformable($s, $t) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isTransformable(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isTransformable(s: String, t: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isTransformable(String s, String t) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isTransformable(s string, t string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_transformable(s, t)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isTransformable(s: String, t: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_transformable(s: String, t: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-transformable s t)\n  (-> string? string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_transformable(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_transformable(S, T) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_transformable(s :: String.t, t :: String.t) :: boolean\n  def is_transformable(s, t) do\n    \n  end\nend"}], "similarQuestionList": []}