{"question_id": "2765", "problem_slug": "make-array-empty", "problem_title": "Make Array Empty", "content": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:\n\nIf the first element has the smallest value, remove it\nOtherwise, put the first element at the end of the array.\n\nReturn an integer denoting the number of operations it takes to make nums empty.\n \nExample 1:\n\nInput: nums = [3,4,-1]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[4, -1, 3]\n\n\n2\n[-1, 3, 4]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]\n\n\n\nExample 2:\n\nInput: nums = [1,2,4,3]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 4, 3]\n\n\n2\n[4, 3]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]\n\n\n\nExample 3:\n\nInput: nums = [1,2,3]\nOutput: 3\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 3]\n\n\n2\n[3]\n\n\n3\n[]\n\n\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-109 <= nums[i] <= 109\nAll values in nums are distinct.\n\n", "hints": ["Understand the order in which the indices are removed from the array.", "We don’t really need to delete or move the elements, only the array length matters.", "Upon removing an index, decide how many steps it takes to move to the next one.", "Use a data structure to speed up the calculation."], "exampleTestcases": "[3,4,-1]\n[1,2,4,3]\n[1,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countOperationsToEmptyArray(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countOperationsToEmptyArray(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countOperationsToEmptyArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countOperationsToEmptyArray(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountOperationsToEmptyArray(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countOperationsToEmptyArray = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countOperationsToEmptyArray(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countOperationsToEmptyArray($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countOperationsToEmptyArray(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countOperationsToEmptyArray(nums: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countOperationsToEmptyArray(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countOperationsToEmptyArray(nums []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_operations_to_empty_array(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countOperationsToEmptyArray(nums: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_operations_to_empty_array(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-operations-to-empty-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_operations_to_empty_array(Nums :: [integer()]) -> integer().\ncount_operations_to_empty_array(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_operations_to_empty_array(nums :: [integer]) :: integer\n  def count_operations_to_empty_array(nums) do\n    \n  end\nend"}}}