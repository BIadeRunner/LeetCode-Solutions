{"question_id": "2783", "problem_slug": "nested-array-generator", "problem_title": "Nested Array Generator", "content": "Given a multi-dimensional array of integers, return a generator object which yields integers in the same order as inorder traversal.\nA multi-dimensional array is a recursive data structure that contains both integers and other multi-dimensional arrays.\ninorder traversal iterates over each array from left to right, yielding any integers it encounters or applying inorder traversal to any arrays it encounters.\n \nExample 1:\n\nInput: arr = [[[6]],[1,3],[]]\nOutput: [6,1,3]\nExplanation:\nconst generator = inorderTraversal(arr);\ngenerator.next().value; // 6\ngenerator.next().value; // 1\ngenerator.next().value; // 3\ngenerator.next().done; // true\n\nExample 2:\n\nInput: arr = []\nOutput: []\nExplanation: There are no integers so the generator doesn't yield anything.\n\n \nConstraints:\n\n0 <= arr.flat().length <= 105\n0 <= arr.flat()[i] <= 105\nmaxNestingDepth <= 105\n\n \nCan you solve this without creating a new flattened version of the array?", "hints": ["Generator functions can pass control to another generator function with \"yield*\" syntax.", "Generator functions can recursively yield control to themselves.", "You don't need to worry about recursion depth for this problem."], "exampleTestcases": "[[[6]],[1,3],[]]\n[]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Array} arr\n * @return {Generator}\n */\nvar inorderTraversal = function*(arr) {\n    \n};\n\n/**\n * const gen = inorderTraversal([1, [2, 3]]);\n * gen.next().value; // 1\n * gen.next().value; // 2\n * gen.next().value; // 3\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type MultidimensionalArray = (MultidimensionalArray | number)[]\n\nfunction* inorderTraversal(arr: MultidimensionalArray): Generator<number, void, unknown> {\n    \n};\n\n/**\n * const gen = inorderTraversal([1, [2, 3]]);\n * gen.next().value; // 1\n * gen.next().value; // 2\n * gen.next().value; // 3\n */"}}}