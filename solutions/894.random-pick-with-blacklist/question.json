{"question_id": "894", "problem_slug": "random-pick-with-blacklist", "problem_title": "Random Pick with Blacklist", "content": "You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\nOptimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\nImplement the Solution class:\n\nSolution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.\nint pick() Returns a random integer in the range [0, n - 1] and not in blacklist.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\nOutput\n[null, 0, 4, 1, 6, 1, 0, 4]\n\nExplanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n\n \nConstraints:\n\n1 <= n <= 109\n0 <= blacklist.length <= min(105, n - 1)\n0 <= blacklist[i] < n\nAll the values of blacklist are unique.\nAt most 2 * 104 calls will be made to pick.\n\n", "hints": [], "exampleTestcases": "[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\n[[7,[2,3,5]],[],[],[],[],[],[],[]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(int n, vector<int>& blacklist) {\n        \n    }\n    \n    int pick() {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(n, blacklist);\n * int param_1 = obj->pick();\n */"}, "Java": {"langSlug": "java", "code": "class Solution {\n\n    public Solution(int n, int[] blacklist) {\n        \n    }\n    \n    public int pick() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n, blacklist);\n * int param_1 = obj.pick();\n */"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, n, blacklist):\n        \"\"\"\n        :type n: int\n        :type blacklist: List[int]\n        \"\"\"\n        \n\n    def pick(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n, blacklist)\n# param_1 = obj.pick()"}, "Python3": {"langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, n: int, blacklist: List[int]):\n        \n\n    def pick(self) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n, blacklist)\n# param_1 = obj.pick()"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int n, int* blacklist, int blacklistSize) {\n    \n}\n\nint solutionPick(Solution* obj) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(n, blacklist, blacklistSize);\n * int param_1 = solutionPick(obj);\n \n * solutionFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int n, int[] blacklist) {\n        \n    }\n    \n    public int Pick() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n, blacklist);\n * int param_1 = obj.Pick();\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} blacklist\n */\nvar Solution = function(n, blacklist) {\n    \n};\n\n/**\n * @return {number}\n */\nSolution.prototype.pick = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n, blacklist)\n * var param_1 = obj.pick()\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class Solution {\n    constructor(n: number, blacklist: number[]) {\n        \n    }\n\n    pick(): number {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n, blacklist)\n * var param_1 = obj.pick()\n */"}, "PHP": {"langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer $n\n     * @param Integer[] $blacklist\n     */\n    function __construct($n, $blacklist) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pick() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($n, $blacklist);\n * $ret_1 = $obj->pick();\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ n: Int, _ blacklist: [Int]) {\n        \n    }\n    \n    func pick() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(n, blacklist)\n * let ret_1: Int = obj.pick()\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution(n: Int, blacklist: IntArray) {\n\n    fun pick(): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(n, blacklist)\n * var param_1 = obj.pick()\n */"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n\n  Solution(int n, List<int> blacklist) {\n    \n  }\n  \n  int pick() {\n    \n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(n, blacklist);\n * int param1 = obj.pick();\n */"}, "Go": {"langSlug": "golang", "code": "type Solution struct {\n    \n}\n\n\nfunc Constructor(n int, blacklist []int) Solution {\n    \n}\n\n\nfunc (this *Solution) Pick() int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(n, blacklist);\n * param_1 := obj.Pick();\n */"}, "Ruby": {"langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type n: Integer\n    :type blacklist: Integer[]\n=end\n    def initialize(n, blacklist)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pick()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(n, blacklist)\n# param_1 = obj.pick()"}, "Scala": {"langSlug": "scala", "code": "class Solution(_n: Int, _blacklist: Array[Int]) {\n\n    def pick(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * val obj = new Solution(n, blacklist)\n * val param_1 = obj.pick()\n */"}, "Rust": {"langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(n: i32, blacklist: Vec<i32>) -> Self {\n        \n    }\n    \n    fn pick(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(n, blacklist);\n * let ret_1: i32 = obj.pick();\n */"}, "Racket": {"langSlug": "racket", "code": "(define solution%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    ; blacklist : (listof exact-integer?)\n    (init-field\n      n\n      blacklist)\n    \n    ; pick : -> exact-integer?\n    (define/public (pick)\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [n n] [blacklist blacklist]))\n;; (define param_1 (send obj pick))"}, "Erlang": {"langSlug": "erlang", "code": "-spec solution_init_(N :: integer(), Blacklist :: [integer()]) -> any().\nsolution_init_(N, Blacklist) ->\n  .\n\n-spec solution_pick() -> integer().\nsolution_pick() ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(N, Blacklist),\n%% Param_1 = solution_pick(),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec init_(n :: integer, blacklist :: [integer]) :: any\n  def init_(n, blacklist) do\n    \n  end\n\n  @spec pick() :: integer\n  def pick() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(n, blacklist)\n# param_1 = Solution.pick()\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."}}}