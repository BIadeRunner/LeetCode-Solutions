{"question_id": "1812", "problem_slug": "reformat-phone-number", "problem_title": "Reformat Phone Number", "content": "You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n\n2 digits: A single block of length 2.\n3 digits: A single block of length 3.\n4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.\n \nExample 1:\n\nInput: number = \"1-23-45 6\"\nOutput: \"123-456\"\nExplanation: The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\".\n\nExample 2:\n\nInput: number = \"123 4-567\"\nOutput: \"123-45-67\"\nExplanation: The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\".\n\nExample 3:\n\nInput: number = \"123 4-5678\"\nOutput: \"123-456-78\"\nExplanation: The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\".\n\n \nConstraints:\n\n2 <= number.length <= 100\nnumber consists of digits and the characters '-' and ' '.\nThere are at least two digits in number.\n\n", "hints": ["Discard all the spaces and dashes.", "Use a while loop. While the string still has digits, check its length and see which rule to apply."], "exampleTestcases": "\"1-23-45 6\"\n\"123 4-567\"\n\"123 4-5678\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string reformatNumber(string number) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String reformatNumber(String number) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reformatNumber(self, number):\n        \"\"\"\n        :type number: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reformatNumber(self, number: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* reformatNumber(char* number) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ReformatNumber(string number) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} number\n * @return {string}\n */\nvar reformatNumber = function(number) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reformatNumber(number: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $number\n     * @return String\n     */\n    function reformatNumber($number) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reformatNumber(_ number: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reformatNumber(number: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String reformatNumber(String number) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reformatNumber(number string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} number\n# @return {String}\ndef reformat_number(number)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reformatNumber(number: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reformat_number(number: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reformat-number number)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reformat_number(Number :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreformat_number(Number) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reformat_number(number :: String.t) :: String.t\n  def reformat_number(number) do\n    \n  end\nend"}}}