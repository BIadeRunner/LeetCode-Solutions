{"question_id": "2708", "problem_slug": "find-the-string-with-lcp", "problem_title": "Find the String with LCP", "content": "We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\n\nlcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].\n\nGiven an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\n \nExample 1:\n\nInput: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\nOutput: \"abab\"\nExplanation: lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n\nExample 2:\n\nInput: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\nOutput: \"aaaa\"\nExplanation: lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n\nExample 3:\n\nInput: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\nOutput: \"\"\nExplanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n\n \nConstraints:\n\n1 <= n == lcp.length == lcp[i].length <= 1000\n0 <= lcp[i][j] <= n\n\n", "hints": ["Use the LCP array to determine which groups of elements must be equal.", "Match the smallest letter to the group that contains the smallest unassigned index.", "Build the LCP matrix of the resulting string then check if it is equal to the target LCP."], "exampleTestcases": "[[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string findTheString(vector<vector<int>>& lcp) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String findTheString(int[][] lcp) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findTheString(self, lcp):\n        \"\"\"\n        :type lcp: List[List[int]]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char * findTheString(int** lcp, int lcpSize, int* lcpColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string FindTheString(int[][] lcp) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} lcp\n * @return {string}\n */\nvar findTheString = function(lcp) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findTheString(lcp: number[][]): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $lcp\n     * @return String\n     */\n    function findTheString($lcp) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findTheString(_ lcp: [[Int]]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findTheString(lcp: Array<IntArray>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String findTheString(List<List<int>> lcp) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findTheString(lcp [][]int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} lcp\n# @return {String}\ndef find_the_string(lcp)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findTheString(lcp: Array[Array[Int]]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_the_string(lcp: Vec<Vec<i32>>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-the-string lcp)\n  (-> (listof (listof exact-integer?)) string?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_the_string(Lcp :: [[integer()]]) -> unicode:unicode_binary().\nfind_the_string(Lcp) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_the_string(lcp :: [[integer]]) :: String.t\n  def find_the_string(lcp) do\n    \n  end\nend"}}}