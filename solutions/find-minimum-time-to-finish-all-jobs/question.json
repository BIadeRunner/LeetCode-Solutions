{"questionId": "1825", "acRate": 42.76766602979414, "difficulty": "Hard", "freqBar": 48.01288687415242, "frontendQuestionId": "1723", "paidOnly": false, "status": "ac", "title": "Find Minimum Time to Finish All Jobs", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "find-minimum-time-to-finish-all-jobs", "content": "<p>You are given an integer array <code>jobs</code>, where <code>jobs[i]</code> is the amount of time it takes to complete the <code>i<sup>th</sup></code> job.</p>\n\n<p>There are <code>k</code> workers that you can assign jobs to. Each job should be assigned to <strong>exactly</strong> one worker. The <strong>working time</strong> of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the <strong>maximum working time</strong> of any worker is <strong>minimized</strong>.</p>\n\n<p><em>Return the <strong>minimum</strong> possible <strong>maximum working time</strong> of any assignment. </em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobs = [3,2,3], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> By assigning each person one job, the maximum time is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobs = [1,2,4,7,8], k = 2\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= jobs[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n", "hints": ["We can select a subset of tasks and assign it to a worker then solve the subproblem on the remaining tasks"], "exampleTestcases": "[3,2,3]\n3\n[1,2,4,7,8]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumTimeRequired(vector<int>& jobs, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumTimeRequired(int[] jobs, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumTimeRequired(self, jobs, k):\n        \"\"\"\n        :type jobs: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumTimeRequired(int* jobs, int jobsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumTimeRequired(int[] jobs, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} jobs\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeRequired = function(jobs, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumTimeRequired(jobs: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $jobs\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeRequired($jobs, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumTimeRequired(_ jobs: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumTimeRequired(jobs: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumTimeRequired(List<int> jobs, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumTimeRequired(jobs []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} jobs\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_required(jobs, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumTimeRequired(jobs: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time_required(jobs: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-time-required jobs k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_time_required(Jobs :: [integer()], K :: integer()) -> integer().\nminimum_time_required(Jobs, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time_required(jobs :: [integer], k :: integer) :: integer\n  def minimum_time_required(jobs, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-minimum-time-to-finish-all-jobs-ii", "title": "Find Minimum Time to Finish All Jobs II", "isPaidOnly": true}]}