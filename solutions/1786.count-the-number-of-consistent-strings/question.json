{"question_id": "1786", "problem_slug": "count-the-number-of-consistent-strings", "problem_title": "Count the Number of Consistent Strings", "content": "You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\n \nExample 1:\n\nInput: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\nOutput: 2\nExplanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.\n\nExample 2:\n\nInput: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\nOutput: 7\nExplanation: All strings are consistent.\n\nExample 3:\n\nInput: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\nOutput: 4\nExplanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.\n\n \nConstraints:\n\n1 <= words.length <= 104\n1 <= allowed.length <= 26\n1 <= words[i].length <= 10\nThe characters in allowed are distinct.\nwords[i] and allowed contain only lowercase English letters.\n\n", "hints": ["A string is incorrect if it contains a character that is not allowed", "Constraints are small enough for brute force"], "exampleTestcases": "\"ab\"\n[\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\n\"abc\"\n[\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\n\"cad\"\n[\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countConsistentStrings(string allowed, vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countConsistentStrings(String allowed, String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countConsistentStrings(self, allowed, words):\n        \"\"\"\n        :type allowed: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint countConsistentStrings(char * allowed, char ** words, int wordsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountConsistentStrings(string allowed, string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} allowed\n * @param {string[]} words\n * @return {number}\n */\nvar countConsistentStrings = function(allowed, words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countConsistentStrings(allowed: string, words: string[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $allowed\n     * @param String[] $words\n     * @return Integer\n     */\n    function countConsistentStrings($allowed, $words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countConsistentStrings(_ allowed: String, _ words: [String]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countConsistentStrings(allowed: String, words: Array<String>): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func countConsistentStrings(allowed string, words []string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} allowed\n# @param {String[]} words\n# @return {Integer}\ndef count_consistent_strings(allowed, words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countConsistentStrings(allowed: String, words: Array[String]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_consistent_strings(allowed: String, words: Vec<String>) -> i32 {\n        \n    }\n}"}}}