{"questionId": "2665", "acRate": 45.47630899049515, "difficulty": "Medium", "freqBar": 50.224624396766075, "frontendQuestionId": "2594", "paidOnly": false, "status": "ac", "title": "Minimum Time to Repair Cars", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimum-time-to-repair-cars", "content": "<p>You are given an integer array <code>ranks</code> representing the <strong>ranks</strong> of some mechanics. <font face=\"monospace\">ranks<sub>i</sub></font> is the rank of the <font face=\"monospace\">i<sup>th</sup></font> mechanic<font face=\"monospace\">.</font> A mechanic with a rank <code>r</code> can repair <font face=\"monospace\">n</font> cars in <code>r * n<sup>2</sup></code> minutes.</p>\n\n<p>You are also given an integer <code>cars</code> representing the total number of cars waiting in the garage to be repaired.</p>\n\n<p>Return <em>the <strong>minimum</strong> time taken to repair all the cars.</em></p>\n\n<p><strong>Note:</strong> All the mechanics can repair the cars simultaneously.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [4,2,3,1], cars = 10\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [5,1,8], cars = 6\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= ranks[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= cars &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["For a predefined fixed time, can all the cars be repaired?", "Try using binary search on the answer."], "exampleTestcases": "[4,2,3,1]\n10\n[5,1,8]\n6", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long repairCars(vector<int>& ranks, int cars) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long repairCars(int[] ranks, int cars) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def repairCars(self, ranks, cars):\n        \"\"\"\n        :type ranks: List[int]\n        :type cars: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long repairCars(int* ranks, int ranksSize, int cars) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long RepairCars(int[] ranks, int cars) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} ranks\n * @param {number} cars\n * @return {number}\n */\nvar repairCars = function(ranks, cars) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function repairCars(ranks: number[], cars: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $ranks\n     * @param Integer $cars\n     * @return Integer\n     */\n    function repairCars($ranks, $cars) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func repairCars(_ ranks: [Int], _ cars: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun repairCars(ranks: IntArray, cars: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int repairCars(List<int> ranks, int cars) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func repairCars(ranks []int, cars int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} ranks\n# @param {Integer} cars\n# @return {Integer}\ndef repair_cars(ranks, cars)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def repairCars(ranks: Array[Int], cars: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn repair_cars(ranks: Vec<i32>, cars: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (repair-cars ranks cars)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec repair_cars(Ranks :: [integer()], Cars :: integer()) -> integer().\nrepair_cars(Ranks, Cars) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec repair_cars(ranks :: [integer], cars :: integer) :: integer\n  def repair_cars(ranks, cars) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "sort-transformed-array", "title": "Sort Transformed Array", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "koko-eating-bananas", "title": "Koko Eating Bananas", "isPaidOnly": false}]}