{"questionId": "159", "acRate": 55.76842109629556, "difficulty": "Medium", "freqBar": 31.94743221311026, "frontendQuestionId": "159", "paidOnly": true, "status": "ac", "title": "Longest Substring with At Most Two Distinct Characters", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "longest-substring-with-at-most-two-distinct-characters", "content": "<p>Given a string <code>s</code>, return <em>the length of the longest </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span><em> that contains at most <strong>two distinct characters</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eceba&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substring is &quot;ece&quot; which its length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ccaabbb&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The substring is &quot;aabbb&quot; which its length is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"eceba\"\n\"ccaabbb\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLongestSubstringTwoDistinct(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthOfLongestSubstringTwoDistinct(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int lengthOfLongestSubstringTwoDistinct(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLongestSubstringTwoDistinct(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstringTwoDistinct = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthOfLongestSubstringTwoDistinct(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstringTwoDistinct($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthOfLongestSubstringTwoDistinct(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLongestSubstringTwoDistinct(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int lengthOfLongestSubstringTwoDistinct(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthOfLongestSubstringTwoDistinct(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring_two_distinct(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthOfLongestSubstringTwoDistinct(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_longest_substring_two_distinct(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (length-of-longest-substring-two-distinct s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec length_of_longest_substring_two_distinct(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring_two_distinct(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec length_of_longest_substring_two_distinct(s :: String.t) :: integer\n  def length_of_longest_substring_two_distinct(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-substring-without-repeating-characters", "title": "Longest Substring Without Repeating Characters", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "sliding-window-maximum", "title": "Sliding Window Maximum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-substring-with-at-most-k-distinct-characters", "title": "Longest Substring with At Most K Distinct Characters", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "subarrays-with-k-different-integers", "title": "Subarrays with K Different Integers", "isPaidOnly": false}]}