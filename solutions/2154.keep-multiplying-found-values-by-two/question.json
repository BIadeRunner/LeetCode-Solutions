{"questionId": "2274", "acRate": 71.32789058683971, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2154", "paidOnly": false, "status": "ac", "title": "Keep Multiplying Found Values by Two", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "keep-multiplying-found-values-by-two", "content": "<p>You are given an array of integers <code>nums</code>. You are also given an integer <code>original</code> which is the first number that needs to be searched for in <code>nums</code>.</p>\n\n<p>You then do the following steps:</p>\n\n<ol>\n\t<li>If <code>original</code> is found in <code>nums</code>, <strong>multiply</strong> it by two (i.e., set <code>original = 2 * original</code>).</li>\n\t<li>Otherwise, <strong>stop</strong> the process.</li>\n\t<li><strong>Repeat</strong> this process with the new number as long as you keep finding the number.</li>\n</ol>\n\n<p>Return <em>the <strong>final</strong> value of </em><code>original</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,3,6,1,12], original = 3\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9], original = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- 4 is not found in nums. Thus, 4 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], original &lt;= 1000</code></li>\n</ul>\n", "hints": ["Repeatedly iterate through the array and check if the current value of original is in the array.", "If original is not found, stop and return its current value.", "Otherwise, multiply original by 2 and repeat the process.", "Use set data structure to check the existence faster."], "exampleTestcases": "[5,3,6,1,12]\n3\n[2,7,9]\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findFinalValue(vector<int>& nums, int original) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findFinalValue(int[] nums, int original) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findFinalValue(self, nums, original):\n        \"\"\"\n        :type nums: List[int]\n        :type original: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findFinalValue(int* nums, int numsSize, int original) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindFinalValue(int[] nums, int original) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} original\n * @return {number}\n */\nvar findFinalValue = function(nums, original) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findFinalValue(nums: number[], original: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $original\n     * @return Integer\n     */\n    function findFinalValue($nums, $original) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findFinalValue(_ nums: [Int], _ original: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findFinalValue(nums: IntArray, original: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findFinalValue(List<int> nums, int original) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findFinalValue(nums []int, original int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} original\n# @return {Integer}\ndef find_final_value(nums, original)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findFinalValue(nums: Array[Int], original: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_final_value(nums: Vec<i32>, original: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-final-value nums original)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_final_value(Nums :: [integer()], Original :: integer()) -> integer().\nfind_final_value(Nums, Original) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_final_value(nums :: [integer], original :: integer) :: integer\n  def find_final_value(nums, original) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "largest-number-at-least-twice-of-others", "title": "Largest Number At Least Twice of Others", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-if-n-and-its-double-exist", "title": "Check If N and Its Double Exist", "isPaidOnly": false}]}