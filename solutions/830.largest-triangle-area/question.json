{"question_id": "830", "problem_slug": "largest-triangle-area", "problem_title": "Largest Triangle Area", "content": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\n\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\n\nExample 2:\n\nInput: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000\n\n \nConstraints:\n\n3 <= points.length <= 50\n-50 <= xi, yi <= 50\nAll the given points are unique.\n\n", "hints": [], "exampleTestcases": "[[0,0],[0,1],[1,0],[0,2],[2,0]]\n[[1,0],[0,0],[0,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double largestTriangleArea(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double largestTriangleArea(int[][] points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n        "}, "C": {"langSlug": "c", "code": "double largestTriangleArea(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double LargestTriangleArea(int[][] points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar largestTriangleArea = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestTriangleArea(points: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function largestTriangleArea($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestTriangleArea(_ points: [[Int]]) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestTriangleArea(points: Array<IntArray>): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double largestTriangleArea(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestTriangleArea(points [][]int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Float}\ndef largest_triangle_area(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestTriangleArea(points: Array[Array[Int]]): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_triangle_area(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-triangle-area points)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_triangle_area(Points :: [[integer()]]) -> float().\nlargest_triangle_area(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_triangle_area(points :: [[integer]]) :: float\n  def largest_triangle_area(points) do\n    \n  end\nend"}}}