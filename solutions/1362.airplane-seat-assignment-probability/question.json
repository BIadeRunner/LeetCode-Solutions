{"question_id": "1362", "problem_slug": "airplane-seat-assignment-probability", "problem_title": "Airplane Seat Assignment Probability", "content": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\nTake their own seat if it is still available, and\nPick other seats randomly when they find their seat occupied\n\nReturn the probability that the nth person gets his own seat.\n \nExample 1:\n\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.\nExample 2:\n\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\n\n \nConstraints:\n\n1 <= n <= 105\n\n", "hints": ["Let f(n) denote the probability of the n-th person getting correct seat in n-person case, then:\r\n\r\nf(1) = 1 (base case, trivial)\r\nf(2) = 1/2 (also trivial)", "Try to calculate f(3), f(4), and f(5) using the base cases. What is the value of them?\r\nf(i) for i >= 2 will also be 1/2.", "Try to proof why f(i) = 1/2 for i >= 2."], "exampleTestcases": "1\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double nthPersonGetsNthSeat(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double nthPersonGetsNthSeat(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nthPersonGetsNthSeat(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double nthPersonGetsNthSeat(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double NthPersonGetsNthSeat(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar nthPersonGetsNthSeat = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nthPersonGetsNthSeat(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Float\n     */\n    function nthPersonGetsNthSeat($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nthPersonGetsNthSeat(_ n: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nthPersonGetsNthSeat(n: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double nthPersonGetsNthSeat(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nthPersonGetsNthSeat(n int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Float}\ndef nth_person_gets_nth_seat(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nthPersonGetsNthSeat(n: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn nth_person_gets_nth_seat(n: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (nth-person-gets-nth-seat n)\n  (-> exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec nth_person_gets_nth_seat(N :: integer()) -> float().\nnth_person_gets_nth_seat(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec nth_person_gets_nth_seat(n :: integer) :: float\n  def nth_person_gets_nth_seat(n) do\n    \n  end\nend"}}}