{"questionId": "3507", "acRate": 26.746940709395982, "difficulty": "Medium", "freqBar": 47.08291471517694, "frontendQuestionId": "3233", "paidOnly": false, "status": "ac", "title": "Find the Count of Numbers Which Are Not Special", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "find-the-count-of-numbers-which-are-not-special", "content": "<p>You are given 2 <strong>positive</strong> integers <code>l</code> and <code>r</code>. For any number <code>x</code>, all positive divisors of <code>x</code> <em>except</em> <code>x</code> are called the <strong>proper divisors</strong> of <code>x</code>.</p>\n\n<p>A number is called <strong>special</strong> if it has exactly 2 <strong>proper divisors</strong>. For example:</p>\n\n<ul>\n\t<li>The number 4 is <em>special</em> because it has proper divisors 1 and 2.</li>\n\t<li>The number 6 is <em>not special</em> because it has proper divisors 1, 2, and 3.</li>\n</ul>\n\n<p>Return the count of numbers in the range <code>[l, r]</code> that are <strong>not</strong> <strong>special</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 5, r = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no special numbers in the range <code>[5, 7]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">l = 4, r = 16</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The special numbers in the range <code>[4, 16]</code> are 4 and 9.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= l &lt;= r &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["A special number must be a square of a prime number.", "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.", "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."], "exampleTestcases": "5\n7\n4\n16", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int nonSpecialCount(int l, int r) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nonSpecialCount(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int nonSpecialCount(int l, int r) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NonSpecialCount(int l, int r) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar nonSpecialCount = function(l, r) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nonSpecialCount(l: number, r: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function nonSpecialCount($l, $r) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nonSpecialCount(_ l: Int, _ r: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nonSpecialCount(l: Int, r: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int nonSpecialCount(int l, int r) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func nonSpecialCount(l int, r int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef non_special_count(l, r)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nonSpecialCount(l: Int, r: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn non_special_count(l: i32, r: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (non-special-count l r)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec non_special_count(L :: integer(), R :: integer()) -> integer().\nnon_special_count(L, R) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec non_special_count(l :: integer, r :: integer) :: integer\n  def non_special_count(l, r) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "count-primes", "title": "Count Primes", "isPaidOnly": false}]}