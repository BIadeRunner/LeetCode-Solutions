{"question_id": "2537", "problem_slug": "minimum-time-to-kill-all-monsters", "problem_title": "Minimum Time to Kill All Monsters", "content": "You are given an integer array power where power[i] is the power of the ith monster.\nYou start with 0 mana points, and each day you increase your mana points by gain where gain initially is equal to 1.\nEach day, after gaining gain mana, you can defeat a monster if your mana points are greater than or equal to the power of that monster. When you defeat a monster:\n\nyour mana points will be reset to 0, and\nthe value of gain increases by 1.\n\nReturn the minimum number of days needed to defeat all the monsters.\n \nExample 1:\n\nInput: power = [3,1,4]\nOutput: 4\nExplanation: The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 2nd monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points.\n- Day 3: Gain 2 mana points to get a total of 4 mana points. Spend all mana points to kill the 3rd monster.\n- Day 4: Gain 3 mana points to get a total of 3 mana points. Spend all mana points to kill the 1st monster.\nIt can be proven that 4 is the minimum number of days needed. \n\nExample 2:\n\nInput: power = [1,1,4]\nOutput: 4\nExplanation: The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 1st monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points. Spend all mana points to kill the 2nd monster.\n- Day 3: Gain 3 mana points to get a total of 3 mana points.\n- Day 4: Gain 3 mana points to get a total of 6 mana points. Spend all mana points to kill the 3rd monster.\nIt can be proven that 4 is the minimum number of days needed. \n\nExample 3:\n\nInput: power = [1,2,4,9]\nOutput: 6\nExplanation: The optimal way to beat all the monsters is to:\n- Day 1: Gain 1 mana point to get a total of 1 mana point. Spend all mana points to kill the 1st monster.\n- Day 2: Gain 2 mana points to get a total of 2 mana points. Spend all mana points to kill the 2nd monster.\n- Day 3: Gain 3 mana points to get a total of 3 mana points.\n- Day 4: Gain 3 mana points to get a total of 6 mana points.\n- Day 5: Gain 3 mana points to get a total of 9 mana points. Spend all mana points to kill the 4th monster.\n- Day 6: Gain 4 mana points to get a total of 4 mana points. Spend all mana points to kill the 3rd monster.\nIt can be proven that 6 is the minimum number of days needed.\n\n \nConstraints:\n\n1 <= power.length <= 17\n1 <= power[i] <= 109\n\n", "hints": ["Each monster can only have two states. They are either alive or dead.", "We can use bitmasks to represent every possible combination of alive and dead monsters.", "Let dp[mask] represent the minimum number of days needed to reach the state mask."], "exampleTestcases": "[3,1,4]\n[1,1,4]\n[1,2,4,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumTime(vector<int>& power) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minimumTime(int[] power) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumTime(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumTime(self, power: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minimumTime(int* power, int powerSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinimumTime(int[] power) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar minimumTime = function(power) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumTime(power: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function minimumTime($power) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumTime(_ power: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumTime(power: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumTime(List<int> power) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumTime(power []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} power\n# @return {Integer}\ndef minimum_time(power)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumTime(power: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time(power: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-time power)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_time(Power :: [integer()]) -> integer().\nminimum_time(Power) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time(power :: [integer]) :: integer\n  def minimum_time(power) do\n    \n  end\nend"}}}