{"question_id": "1304", "problem_slug": "longest-happy-string", "problem_title": "Longest Happy String", "content": "A string s is called happy if it satisfies the following conditions:\n\ns only contains the letters 'a', 'b', and 'c'.\ns does not contain any of \"aaa\", \"bbb\", or \"ccc\" as a substring.\ns contains at most a occurrences of the letter 'a'.\ns contains at most b occurrences of the letter 'b'.\ns contains at most c occurrences of the letter 'c'.\n\nGiven three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string \"\".\nA substring is a contiguous sequence of characters within a string.\n \nExample 1:\n\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\n\nExample 2:\n\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It is the only correct answer in this case.\n\n \nConstraints:\n\n0 <= a, b, c <= 100\na + b + c > 0\n\n", "hints": ["Use a greedy approach.", "Use the letter with the maximum current limit that can be added without breaking the condition."], "exampleTestcases": "1\n1\n7\n7\n1\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string longestDiverseString(int a, int b, int c) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String longestDiverseString(int a, int b, int c) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestDiverseString(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestDiverseString(self, a: int, b: int, c: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* longestDiverseString(int a, int b, int c) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LongestDiverseString(int a, int b, int c) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {string}\n */\nvar longestDiverseString = function(a, b, c) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestDiverseString(a: number, b: number, c: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return String\n     */\n    function longestDiverseString($a, $b, $c) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestDiverseString(_ a: Int, _ b: Int, _ c: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestDiverseString(a: Int, b: Int, c: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String longestDiverseString(int a, int b, int c) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestDiverseString(a int, b int, c int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {String}\ndef longest_diverse_string(a, b, c)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestDiverseString(a: Int, b: Int, c: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_diverse_string(a: i32, b: i32, c: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-diverse-string a b c)\n  (-> exact-integer? exact-integer? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_diverse_string(A :: integer(), B :: integer(), C :: integer()) -> unicode:unicode_binary().\nlongest_diverse_string(A, B, C) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_diverse_string(a :: integer, b :: integer, c :: integer) :: String.t\n  def longest_diverse_string(a, b, c) do\n    \n  end\nend"}}}