{"question_id": "1413", "problem_slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold", "problem_title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold", "content": "Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.\n \nExample 1:\n\n\nInput: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.\n\nExample 2:\n\nInput: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 300\n0 <= mat[i][j] <= 104\n0 <= threshold <= 105\n\n", "hints": ["Store prefix sum of all grids in another 2D array.", "Try all possible solutions and if you cannot find one return -1.", "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."], "exampleTestcases": "[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]]\n4\n[[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSideLength(vector<vector<int>>& mat, int threshold) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxSideLength(int[][] mat, int threshold) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxSideLength(self, mat, threshold):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxSideLength(int** mat, int matSize, int* matColSize, int threshold) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxSideLength(int[][] mat, int threshold) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @param {number} threshold\n * @return {number}\n */\nvar maxSideLength = function(mat, threshold) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxSideLength(mat: number[][], threshold: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function maxSideLength($mat, $threshold) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxSideLength(_ mat: [[Int]], _ threshold: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxSideLength(mat: Array<IntArray>, threshold: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxSideLength(List<List<int>> mat, int threshold) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxSideLength(mat [][]int, threshold int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @param {Integer} threshold\n# @return {Integer}\ndef max_side_length(mat, threshold)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxSideLength(mat: Array[Array[Int]], threshold: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_side_length(mat: Vec<Vec<i32>>, threshold: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-side-length mat threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_side_length(Mat :: [[integer()]], Threshold :: integer()) -> integer().\nmax_side_length(Mat, Threshold) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_side_length(mat :: [[integer]], threshold :: integer) :: integer\n  def max_side_length(mat, threshold) do\n    \n  end\nend"}}}