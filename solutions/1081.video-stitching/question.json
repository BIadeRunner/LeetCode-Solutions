{"question_id": "1081", "problem_slug": "video-stitching", "problem_title": "Video Stitching", "content": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\n\nFor example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].\n\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.\n \nExample 1:\n\nInput: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n\nExample 2:\n\nInput: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].\n\nExample 3:\n\nInput: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].\n\n \nConstraints:\n\n1 <= clips.length <= 100\n0 <= starti <= endi <= 100\n1 <= time <= 100\n\n", "hints": ["What if we sort the intervals?  Considering the sorted intervals, how can we solve the problem with dynamic programming?", "Let's consider a DP(pos, limit) where pos represents the position of the current interval we are gonna take the decision and limit is the current covered area from [0 - limit]. This DP returns the minimum number of taken intervals or infinite if it's not possible to cover the [0 - T] section."], "exampleTestcases": "[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]\n10\n[[0,1],[1,2]]\n5\n[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]]\n9", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int videoStitching(vector<vector<int>>& clips, int time) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int videoStitching(int[][] clips, int time) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def videoStitching(self, clips, time):\n        \"\"\"\n        :type clips: List[List[int]]\n        :type time: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def videoStitching(self, clips: List[List[int]], time: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int videoStitching(int** clips, int clipsSize, int* clipsColSize, int time) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int VideoStitching(int[][] clips, int time) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} clips\n * @param {number} time\n * @return {number}\n */\nvar videoStitching = function(clips, time) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function videoStitching(clips: number[][], time: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $clips\n     * @param Integer $time\n     * @return Integer\n     */\n    function videoStitching($clips, $time) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func videoStitching(_ clips: [[Int]], _ time: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun videoStitching(clips: Array<IntArray>, time: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int videoStitching(List<List<int>> clips, int time) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func videoStitching(clips [][]int, time int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} clips\n# @param {Integer} time\n# @return {Integer}\ndef video_stitching(clips, time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def videoStitching(clips: Array[Array[Int]], time: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn video_stitching(clips: Vec<Vec<i32>>, time: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (video-stitching clips time)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec video_stitching(Clips :: [[integer()]], Time :: integer()) -> integer().\nvideo_stitching(Clips, Time) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec video_stitching(clips :: [[integer]], time :: integer) :: integer\n  def video_stitching(clips, time) do\n    \n  end\nend"}}}