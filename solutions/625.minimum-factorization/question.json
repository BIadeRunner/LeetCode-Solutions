{"question_id": "625", "problem_slug": "minimum-factorization", "problem_title": "Minimum Factorization", "content": "Given a positive integer num, return the smallest positive integer x whose multiplication of each digit equals num. If there is no answer or the answer is not fit in 32-bit signed integer, return 0.\n \nExample 1:\nInput: num = 48\nOutput: 68\nExample 2:\nInput: num = 15\nOutput: 35\n\n \nConstraints:\n\n1 <= num <= 231 - 1\n\n", "hints": [], "exampleTestcases": "48\n15", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestFactorization(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int smallestFactorization(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestFactorization(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int smallestFactorization(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SmallestFactorization(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar smallestFactorization = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestFactorization(num: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function smallestFactorization($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestFactorization(_ num: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestFactorization(num: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int smallestFactorization(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestFactorization(num int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef smallest_factorization(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestFactorization(num: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_factorization(num: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-factorization num)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_factorization(Num :: integer()) -> integer().\nsmallest_factorization(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_factorization(num :: integer) :: integer\n  def smallest_factorization(num) do\n    \n  end\nend"}}}