{"question_id": "3489", "problem_slug": "the-number-of-ways-to-make-the-sum", "problem_title": "The Number of Ways to Make the Sum", "content": "You have an infinite number of coins with values 1, 2, and 6, and only 2 coins with value 4.\nGiven an integer n, return the number of ways to make the sum of n with the coins you have.\nSince the answer may be very large, return it modulo 109 + 7.\nNote that the order of the coins doesn't matter and [2, 2, 3] is the same as [2, 3, 2].\n \nExample 1:\n\nInput: n = 4\nOutput: 4\nExplanation:\nHere are the four combinations: [1, 1, 1, 1], [1, 1, 2], [2, 2], [4].\n\nExample 2:\n\nInput: n = 12\nOutput: 22\nExplanation:\nNote that [4, 4, 4] is not a valid combination since we cannot use 4 three times.\n\nExample 3:\n\nInput: n = 5\nOutput: 4\nExplanation:\nHere are the four combinations: [1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 2, 2], [1, 4].\n\n \nConstraints:\n\n1 <= n <= 105\n\n", "hints": ["Consider using dynamic programming.", "Define <code>dp[i][x]</code> as the number of ways to make the sum <code>x</code> using only the first <code>i</code> coins; and define <code>coin[i]</code> as the value of coin <code>i</code>.", "We can calculate <code>dp[i][x]</code> as the sum of <code>dp[i - 1][x]</code> and <code>dp[i][x - coin[i]]</code>.", "Remember that 4 can at most be multiplied twice, so we calculate the <code>dp</code> for our infinite coins and then manually handle the existence of 4."], "exampleTestcases": "4\n12\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfWays(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numberOfWays = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfWays(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numberOfWays($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfWays(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef number_of_ways(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfWays(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-ways n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_ways(N :: integer()) -> integer().\nnumber_of_ways(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(n :: integer) :: integer\n  def number_of_ways(n) do\n    \n  end\nend"}}}