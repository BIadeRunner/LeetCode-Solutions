{"question_id": "2770", "problem_slug": "bind-function-to-context", "problem_title": "Bind Function to Context", "content": "Enhance all functions to have the bindPolyfill method. When bindPolyfill is called with a passed object obj, that object becomes the this context for the function.\nFor example, if you had the code:\n\nfunction f() {\n  console.log('My context is ' + this.ctx);\n}\nf();\n\nThe output would be \"My context is undefined\". However, if you bound the function:\n\nfunction f() {\n  console.log('My context is ' + this.ctx);\n}\nconst boundFunc = f.boundPolyfill({ \"ctx\": \"My Object\" })\nboundFunc();\n\nThe output should be \"My context is My Object\".\nYou may assume that a single non-null object will be passed to the bindPolyfill method.\nPlease solve it without the built-in Function.bind method.\n \nExample 1:\n\nInput: \nfn = function f(multiplier) { \n  return this.x * multiplier; \n}\nobj = {\"x\": 10}\ninputs = [5]\nOutput: 50\nExplanation:\nconst boundFunc = f.bindPolyfill({\"x\": 10});\nboundFunc(5); // 50\nA multiplier of 5 is passed as a parameter.\nThe context is set to {\"x\": 10}.\nMultiplying those two numbers yields 50.\nExample 2:\n\nInput: \nfn = function speak() { \n  return \"My name is \" + this.name; \n}\nobj = {\"name\": \"Kathy\"}\ninputs = []\nOutput: \"My name is Kathy\"\nExplanation:\nconst boundFunc = f.bindPolyfill({\"name\": \"Kathy\"});\nboundFunc(); // \"My name is Kathy\"\n\n \nConstraints:\n\nobj is a non-null object\n0 <= inputs.length <= 100\n\n \nCan you solve it without using any built-in methods?", "hints": ["The easiest way to solve this is to use the built-in fn.apply() method.", "Without built-in methods, you need to figure out a way to call the function (this) from context object. That will associate \"this\" appropriately.", "You can create a new Symbol(). Attach the symbol to the context object and set the method to be \"this\". Then call the method on the symbol."], "exampleTestcases": "function f(multiplier) { return this.x * multiplier; }\n{\"x\":10}\n[5]\nfunction speak() { return \"My name is \" + this.name; }\n{\"name\":\"Kathy\"}\n[]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Object} obj\n * @return {Function}\n */\nFunction.prototype.bindPolyfill = function(obj) {\n    \n}"}, "TypeScript": {"langSlug": "typescript", "code": "type Fn = (...args) => any\n\ninterface Function {\n    bindPolyfill(obj: Record<any, any>): Fn;\n}\n\nFunction.prototype.bindPolyfill = function(obj): Fn {\n    \n}"}}}