{"question_id": "573", "problem_slug": "squirrel-simulation", "problem_title": "Squirrel Simulation", "content": "You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\n\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\nThe distance is the number of moves.\n \nExample 1:\n\n\nInput: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.\n\nExample 2:\n\n\nInput: height = 1, width = 3, tree = [0,1], squirrel = [0,0], nuts = [[0,2]]\nOutput: 3\n\n \nConstraints:\n\n1 <= height, width <= 100\ntree.length == 2\nsquirrel.length == 2\n1 <= nuts.length <= 5000\nnuts[i].length == 2\n0 <= treer, squirrelr, nutir <= height\n0 <= treec, squirrelc, nutic <= width\n\n", "hints": ["Will Brute force solution works here? What will be its complexity?", "Brute force definitely won't work here. Think of some simple solution. Take some example and make some observations.", "Will order of nuts traversed by squirrel is important or only first nut traversed by squirrel is important?", "Are there some paths which squirrel have to cover in any case? If yes, what are they?", "Did you notice only first nut traversed by squirrel matters? Obviously squirrel will choose first nut which will result in minimum distance."], "exampleTestcases": "5\n7\n[2,2]\n[4,4]\n[[3,0], [2,5]]\n1\n3\n[0,1]\n[0,0]\n[[0,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDistance(int height, int width, vector<int>& tree, vector<int>& squirrel, vector<vector<int>>& nuts) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minDistance(self, height, width, tree, squirrel, nuts):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :type tree: List[int]\n        :type squirrel: List[int]\n        :type nuts: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minDistance(int height, int width, int* tree, int treeSize, int* squirrel, int squirrelSize, int** nuts, int nutsSize, int* nutsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} height\n * @param {number} width\n * @param {number[]} tree\n * @param {number[]} squirrel\n * @param {number[][]} nuts\n * @return {number}\n */\nvar minDistance = function(height, width, tree, squirrel, nuts) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minDistance(height: number, width: number, tree: number[], squirrel: number[], nuts: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $height\n     * @param Integer $width\n     * @param Integer[] $tree\n     * @param Integer[] $squirrel\n     * @param Integer[][] $nuts\n     * @return Integer\n     */\n    function minDistance($height, $width, $tree, $squirrel, $nuts) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minDistance(_ height: Int, _ width: Int, _ tree: [Int], _ squirrel: [Int], _ nuts: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minDistance(height: Int, width: Int, tree: IntArray, squirrel: IntArray, nuts: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minDistance(int height, int width, List<int> tree, List<int> squirrel, List<List<int>> nuts) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minDistance(height int, width int, tree []int, squirrel []int, nuts [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} height\n# @param {Integer} width\n# @param {Integer[]} tree\n# @param {Integer[]} squirrel\n# @param {Integer[][]} nuts\n# @return {Integer}\ndef min_distance(height, width, tree, squirrel, nuts)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minDistance(height: Int, width: Int, tree: Array[Int], squirrel: Array[Int], nuts: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_distance(height: i32, width: i32, tree: Vec<i32>, squirrel: Vec<i32>, nuts: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-distance height width tree squirrel nuts)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_distance(Height :: integer(), Width :: integer(), Tree :: [integer()], Squirrel :: [integer()], Nuts :: [[integer()]]) -> integer().\nmin_distance(Height, Width, Tree, Squirrel, Nuts) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_distance(height :: integer, width :: integer, tree :: [integer], squirrel :: [integer], nuts :: [[integer]]) :: integer\n  def min_distance(height, width, tree, squirrel, nuts) do\n    \n  end\nend"}}}