{"questionId": "322", "acRate": 44.99416077460859, "difficulty": "Medium", "freqBar": 80.48864674094075, "frontendQuestionId": "322", "paidOnly": false, "status": "ac", "title": "Coin Change", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}], "titleSlug": "coin-change", "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>\n\n<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>\n\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1,2,5], amount = 11\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 11 = 5 + 5 + 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [2], amount = 3\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,2,5]\n11\n[2]\n3\n[1]\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def coinChange(self, coins, amount):\n        \"\"\"\n        :type coins: List[int]\n        :type amount: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int coinChange(int* coins, int coinsSize, int amount) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CoinChange(int[] coins, int amount) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function(coins, amount) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function coinChange(coins: number[], amount: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $amount\n     * @return Integer\n     */\n    function coinChange($coins, $amount) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func coinChange(_ coins: [Int], _ amount: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun coinChange(coins: IntArray, amount: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int coinChange(List<int> coins, int amount) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func coinChange(coins []int, amount int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} coins\n# @param {Integer} amount\n# @return {Integer}\ndef coin_change(coins, amount)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def coinChange(coins: Array[Int], amount: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn coin_change(coins: Vec<i32>, amount: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (coin-change coins amount)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec coin_change(Coins :: [integer()], Amount :: integer()) -> integer().\ncoin_change(Coins, Amount) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec coin_change(coins :: [integer], amount :: integer) :: integer\n  def coin_change(coins, amount) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-cost-for-tickets", "title": "Minimum Cost For Tickets", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-value-of-k-coins-from-piles", "title": "Maximum Value of K Coins From Piles", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "minimum-number-of-operations-to-convert-time", "title": "Minimum Number of Operations to Convert Time", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "count-of-sub-multisets-with-bounded-sum", "title": "Count of Sub-Multisets With Bounded Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-number-of-coins-to-be-added", "title": "Minimum Number of Coins to be Added", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "most-expensive-item-that-can-not-be-bought", "title": "Most Expensive Item That Can Not Be Bought", "isPaidOnly": true}]}