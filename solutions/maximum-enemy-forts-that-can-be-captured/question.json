{"questionId": "2602", "acRate": 38.93083106641807, "difficulty": "Easy", "freqBar": 24.38514346074863, "frontendQuestionId": "2511", "paidOnly": false, "status": "ac", "title": "Maximum Enemy Forts That Can Be Captured", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}], "titleSlug": "maximum-enemy-forts-that-can-be-captured", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>forts</code> of length <code>n</code> representing the positions of several forts. <code>forts[i]</code> can be <code>-1</code>, <code>0</code>, or <code>1</code> where:</p>\n\n<ul>\n\t<li><code>-1</code> represents there is <strong>no fort</strong> at the <code>i<sup>th</sup></code> position.</li>\n\t<li><code>0</code> indicates there is an <strong>enemy</strong> fort at the <code>i<sup>th</sup></code> position.</li>\n\t<li><code>1</code> indicates the fort at the <code>i<sup>th</sup></code> the position is under your command.</li>\n</ul>\n\n<p>Now you have decided to move your army from one of your forts at position <code>i</code> to an empty position <code>j</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt;= n - 1</code></li>\n\t<li>The army travels over enemy forts <strong>only</strong>. Formally, for all <code>k</code> where <code>min(i,j) &lt; k &lt; max(i,j)</code>, <code>forts[k] == 0.</code></li>\n</ul>\n\n<p>While moving the army, all the enemy forts that come in the way are <strong>captured</strong>.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of enemy forts that can be captured</em>. In case it is <strong>impossible</strong> to move your army, or you do not have any fort under your command, return <code>0</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> forts = [1,0,0,-1,0,0,0,0,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.\n- Moving the army from position 8 to position 3 captures 4 enemy forts.\nSince 4 is the maximum number of enemy forts that can be captured, we return 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> forts = [0,0,1,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since no enemy fort can be captured, 0 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= forts.length &lt;= 1000</code></li>\n\t<li><code>-1 &lt;= forts[i] &lt;= 1</code></li>\n</ul>\n", "hints": ["For each fort under your command, check if you can move the army from here.", "If yes, find the closest empty positions satisfying all criteria.", "How can two-pointers be used to solve this problem optimally?"], "exampleTestcases": "[1,0,0,-1,0,0,0,0,1]\n[0,0,1,-1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int captureForts(vector<int>& forts) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int captureForts(int[] forts) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def captureForts(self, forts):\n        \"\"\"\n        :type forts: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def captureForts(self, forts: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int captureForts(int* forts, int fortsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CaptureForts(int[] forts) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} forts\n * @return {number}\n */\nvar captureForts = function(forts) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function captureForts(forts: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $forts\n     * @return Integer\n     */\n    function captureForts($forts) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func captureForts(_ forts: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun captureForts(forts: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int captureForts(List<int> forts) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func captureForts(forts []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} forts\n# @return {Integer}\ndef capture_forts(forts)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def captureForts(forts: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn capture_forts(forts: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (capture-forts forts)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec capture_forts(Forts :: [integer()]) -> integer().\ncapture_forts(Forts) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec capture_forts(forts :: [integer]) :: integer\n  def capture_forts(forts) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "max-consecutive-ones", "title": "Max Consecutive Ones", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "max-consecutive-ones-iii", "title": "Max Consecutive Ones III", "isPaidOnly": false}]}