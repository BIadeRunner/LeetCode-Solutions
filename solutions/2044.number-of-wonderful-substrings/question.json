{"question_id": "2044", "problem_slug": "number-of-wonderful-substrings", "problem_title": "Number of Wonderful Substrings", "content": "A wonderful string is a string where at most one letter appears an odd number of times.\n\nFor example, \"ccjjc\" and \"abab\" are wonderful, but \"ab\" is not.\n\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.\nA substring is a contiguous sequence of characters in a string.\n \nExample 1:\n\r\nInput: word = \"aba\"\r\nOutput: 4\r\nExplanation: The four wonderful substrings are underlined below:\r\n- \"aba\" -> \"a\"\r\n- \"aba\" -> \"b\"\r\n- \"aba\" -> \"a\"\r\n- \"aba\" -> \"aba\"\r\n\nExample 2:\n\r\nInput: word = \"aabb\"\r\nOutput: 9\r\nExplanation: The nine wonderful substrings are underlined below:\r\n- \"aabb\" -> \"a\"\r\n- \"aabb\" -> \"aa\"\r\n- \"aabb\" -> \"aab\"\r\n- \"aabb\" -> \"aabb\"\r\n- \"aabb\" -> \"a\"\r\n- \"aabb\" -> \"abb\"\r\n- \"aabb\" -> \"b\"\r\n- \"aabb\" -> \"bb\"\r\n- \"aabb\" -> \"b\"\r\n\nExample 3:\n\r\nInput: word = \"he\"\r\nOutput: 2\r\nExplanation: The two wonderful substrings are underlined below:\r\n- \"he\" -> \"h\"\r\n- \"he\" -> \"e\"\r\n\n \nConstraints:\n\n1 <= word.length <= 105\nword consists of lowercase English letters from 'a' to 'j'.\n", "hints": ["For each prefix of the string, check which characters are of even frequency and which are not and represent it by a bitmask.", "Find the other prefixes whose masks differs from the current prefix mask by at most one bit."], "exampleTestcases": "\"aba\"\n\"aabb\"\n\"he\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    long long wonderfulSubstrings(string word) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public long wonderfulSubstrings(String word) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def wonderfulSubstrings(self, word):\r\n        \"\"\"\r\n        :type word: str\r\n        :rtype: int\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def wonderfulSubstrings(self, word: str) -> int:"}, "C": {"langSlug": "c", "code": "long long wonderfulSubstrings(char * word){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public long WonderfulSubstrings(string word) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {string} word\r\n * @return {number}\r\n */\r\nvar wonderfulSubstrings = function(word) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wonderfulSubstrings(word: string): number {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param String $word\r\n     * @return Integer\r\n     */\r\n    function wonderfulSubstrings($word) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func wonderfulSubstrings(_ word: String) -> Int {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun wonderfulSubstrings(word: String): Long {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func wonderfulSubstrings(word string) int64 {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\r\n# @return {Integer}\r\ndef wonderful_substrings(word)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def wonderfulSubstrings(word: String): Long = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn wonderful_substrings(word: String) -> i64 {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (wonderful-substrings word)\r\n  (-> string? exact-integer?)\r\n\r\n  )"}}}