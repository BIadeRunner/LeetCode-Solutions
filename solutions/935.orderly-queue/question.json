{"question_id": "935", "problem_slug": "orderly-queue", "problem_title": "Orderly Queue", "content": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n \nExample 1:\n\nInput: s = \"cba\", k = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\".\n\nExample 2:\n\nInput: s = \"baaca\", k = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\".\n\n \nConstraints:\n\n1 <= k <= s.length <= 1000\ns consist of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"cba\"\n1\n\"baaca\"\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string orderlyQueue(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String orderlyQueue(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def orderlyQueue(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* orderlyQueue(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string OrderlyQueue(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar orderlyQueue = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function orderlyQueue(s: string, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function orderlyQueue($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func orderlyQueue(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun orderlyQueue(s: String, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String orderlyQueue(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func orderlyQueue(s string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef orderly_queue(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def orderlyQueue(s: String, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn orderly_queue(s: String, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (orderly-queue s k)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec orderly_queue(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\norderly_queue(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec orderly_queue(s :: String.t, k :: integer) :: String.t\n  def orderly_queue(s, k) do\n    \n  end\nend"}}}