{"questionId": "3030", "acRate": 76.88304574089291, "difficulty": "Medium", "freqBar": 77.36493258813104, "frontendQuestionId": "2802", "paidOnly": true, "status": "ac", "title": "Find The K-th Lucky Number", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "find-the-k-th-lucky-number", "content": "<p>We know that <code>4</code> and <code>7</code> are <strong>lucky</strong> digits. Also, a number is called <strong>lucky</strong>&nbsp;if it contains <strong>only</strong> lucky digits.</p>\n\n<p>You are given an integer <code>k</code>, return<em> the </em><code>k<sup>th</sup></code><em>&nbsp;lucky number represented as a <strong>string</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4\n<strong>Output:</strong> &quot;47&quot;\n<strong>Explanation:</strong> The first lucky number is 4, the second one is 7, the third one is 44 and the fourth one is 47.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 10\n<strong>Output:</strong> &quot;477&quot;\n<strong>Explanation:</strong> Here are lucky numbers sorted in increasing order:\n4, 7, 44, 47, 74, 77, 444, 447, 474, 477. So the 10<sup>th</sup> lucky number is 477.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 1000\n<strong>Output:</strong> &quot;777747447&quot;\n<strong>Explanation:</strong> It can be shown that the 1000<sup>th</sup> lucky number is 777747447.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["<div class=\"_1l1MA\">The number of lucky numbers with <strong>exactly</strong> <code>n</code> digits is equal to <code>2<sup>n</sup></code>.</div>", "<div class=\"_1l1MA\">We can obtain how many digits the <code>k<sup>th</sup></code>\u00a0lucky number has.</div>", "<div class=\"_1l1MA\">Imagine we know that <code>k<sup>th</sup></code>\u00a0lucky number has <code>c</code>\u00a0digits. Then calculate how many numbers with <code>c</code> digits exist before the <code>k<sup>th</sup></code>\u00a0lucky number.</div>", "<div class=\"_1l1MA\">Imagine the number from the previous hint is <code>x</code>. Now look at the binary representation of\u00a0<code>x</code>\u00a0and add some leading zero to\u00a0make its length equal to\u00a0<code>c</code>.</div>", "<div class=\"_1l1MA\">Replace\u00a0<code>0</code>\u00a0and\u00a0<code>1</code>\u00a0with\u00a0<code>4</code>\u00a0and\u00a0<code>7</code>\u00a0in the number\u00a0you've obtained from the previous hint.</div>"], "exampleTestcases": "4\n10\n1000", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string kthLuckyNumber(int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String kthLuckyNumber(int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kthLuckyNumber(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kthLuckyNumber(self, k: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* kthLuckyNumber(int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string KthLuckyNumber(int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n * @return {string}\n */\nvar kthLuckyNumber = function(k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kthLuckyNumber(k: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return String\n     */\n    function kthLuckyNumber($k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kthLuckyNumber(_ k: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kthLuckyNumber(k: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String kthLuckyNumber(int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func kthLuckyNumber(k int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @return {String}\ndef kth_lucky_number(k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kthLuckyNumber(k: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kth_lucky_number(k: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (kth-lucky-number k)\n  (-> exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec kth_lucky_number(K :: integer()) -> unicode:unicode_binary().\nkth_lucky_number(K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_lucky_number(k :: integer) :: String.t\n  def kth_lucky_number(k) do\n    \n  end\nend"}], "similarQuestionList": []}