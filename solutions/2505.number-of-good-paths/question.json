{"questionId": "2505", "acRate": 56.266793878266284, "difficulty": "Hard", "freqBar": 49.444223213468696, "frontendQuestionId": "2421", "paidOnly": false, "status": "ac", "title": "Number of Good Paths", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "number-of-good-paths", "content": "<p>There is a tree (i.e. a connected, undirected graph with no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>A <strong>good path</strong> is a simple path that satisfies the following conditions:</p>\n\n<ol>\n\t<li>The starting node and the ending node have the <strong>same</strong> value.</li>\n\t<li>All nodes between the starting node and the ending node have values <strong>less than or equal to</strong> the starting node (i.e. the starting node&#39;s value should be the maximum value along the path).</li>\n</ol>\n\n<p>Return <em>the number of distinct good paths</em>.</p>\n\n<p>Note that a path and its reverse are counted as the <strong>same</strong> path. For example, <code>0 -&gt; 1</code> is considered to be the same as <code>1 -&gt; 0</code>. A single node is also considered as a valid path.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png\" style=\"width: 400px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4.\n(The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1 -&gt; 0 -&gt; 2 -&gt; 4.)\nNote that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt; vals[0].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png\" style=\"width: 273px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png\" style=\"width: 100px; height: 88px;\" />\n<pre>\n<strong>Input:</strong> vals = [1], edges = []\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The tree consists of only one node, so there is one good path.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == vals.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= vals[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n", "hints": ["Can you process nodes from smallest to largest value?", "Try to build the graph from nodes with the smallest value to the largest value.", "May union find help?"], "exampleTestcases": "[1,3,2,1,3]\n[[0,1],[0,2],[2,3],[2,4]]\n[1,1,2,2,3]\n[[0,1],[1,2],[2,3],[2,4]]\n[1]\n[]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfGoodPaths(int[] vals, int[][] edges) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfGoodPaths(self, vals, edges):\n        \"\"\"\n        :type vals: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfGoodPaths(int* vals, int valsSize, int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfGoodPaths(int[] vals, int[][] edges) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} vals\n * @param {number[][]} edges\n * @return {number}\n */\nvar numberOfGoodPaths = function(vals, edges) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfGoodPaths(vals: number[], edges: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $vals\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function numberOfGoodPaths($vals, $edges) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfGoodPaths(_ vals: [Int], _ edges: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfGoodPaths(vals: IntArray, edges: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfGoodPaths(List<int> vals, List<List<int>> edges) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfGoodPaths(vals []int, edges [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} vals\n# @param {Integer[][]} edges\n# @return {Integer}\ndef number_of_good_paths(vals, edges)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfGoodPaths(vals: Array[Int], edges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_good_paths(vals: Vec<i32>, edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-good-paths vals edges)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_good_paths(Vals :: [integer()], Edges :: [[integer()]]) -> integer().\nnumber_of_good_paths(Vals, Edges) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_good_paths(vals :: [integer], edges :: [[integer]]) :: integer\n  def number_of_good_paths(vals, edges) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "longest-nice-substring", "title": "Longest Nice Substring", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-pairs-of-similar-strings", "title": "Count Pairs Of Similar Strings", "isPaidOnly": false}]}