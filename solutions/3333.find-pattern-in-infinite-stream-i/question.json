{"questionId": "3333", "acRate": 59.922822491730976, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3023", "paidOnly": true, "status": "ac", "title": "Find Pattern in Infinite Stream I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}, {"name": "Rolling Hash", "id": "VG9waWNUYWdOb2RlOjU2NTk4", "slug": "rolling-hash"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}, {"name": "Hash Function", "id": "VG9waWNUYWdOb2RlOjYxMDY1", "slug": "hash-function"}], "titleSlug": "find-pattern-in-infinite-stream-i", "content": "<p>You are given a binary array <code>pattern</code> and an object <code>stream</code> of class <code>InfiniteStream</code> representing a <strong>0-indexed</strong> infinite stream of bits.</p>\n\n<p>The class <code>InfiniteStream</code> contains the following function:</p>\n\n<ul>\n\t<li><code>int next()</code>: Reads a <strong>single</strong> bit (which is either <code>0</code> or <code>1</code>) from the stream and returns it.</li>\n</ul>\n\n<p>Return <em>the <strong>first starting</strong> index where the pattern matches the bits read from the stream</em>. For example, if the pattern is <code>[1, 0]</code>, the first match is the highlighted part in the stream <code>[0, <strong><u>1, 0</u></strong>, 1, ...]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stream = [1,1,1,0,1,1,1,...], pattern = [0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The first occurrence of the pattern [0,1] is highlighted in the stream [1,1,1,<strong><u>0,1</u></strong>,...], which starts at index 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stream = [0,0,0,0,...], pattern = [0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The first occurrence of the pattern [0] is highlighted in the stream [<strong><u>0</u></strong>,...], which starts at index 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> stream = [1,0,1,1,0,1,1,0,1,...], pattern = [1,1,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The first occurrence of the pattern [1,1,0,1] is highlighted in the stream [1,0,<strong><u>1,1,0,1</u></strong>,...], which starts at index 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 100</code></li>\n\t<li><code>pattern</code> consists only of <code>0</code> and <code>1</code>.</li>\n\t<li><code>stream</code> consists only of <code>0</code> and <code>1</code>.</li>\n\t<li>The input is generated such that the pattern&#39;s start index exists in the first <code>10<sup>5</sup></code> bits of the stream.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,1,1,0,1]\n[0,1]\n[0]\n[0]\n[1,0,1,1,0,1]\n[1,1,0,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n * public:\n *     InfiniteStream(vector<int> bits);\n *     int next();\n * };\n */\nclass Solution {\npublic:\n    int findPattern(InfiniteStream* stream, vector<int>& pattern) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     public InfiniteStream(int[] bits);\n *     public int next();\n * }\n */\nclass Solution {\n    public int findPattern(InfiniteStream infiniteStream, int[] pattern) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for an infinite stream.\n# class InfiniteStream:\n#     def next(self):\n#         pass\nclass Solution(object):\n    def findPattern(self, stream, pattern):\n        \"\"\"\n        :type stream: InfiniteStream\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for an infinite stream.\n# class InfiniteStream:\n#     def next(self) -> int:\n#         pass\nclass Solution:\n    def findPattern(self, stream: Optional['InfiniteStream'], pattern: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for an infinite stream.\n * \n * YOU HAVE TO PASS THE OBJECT ITSELF AS THE FIRST PARAMETER\n * \n * struct InfiniteStream {\n *     int (*next)(struct InfiniteStream*);\n * };\n */\nint findPattern(struct InfiniteStream* stream, int* pattern, int patternSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     public InfiniteStream(int[] bits);\n *     public int Next();\n * }\n */\npublic class Solution {\n    public int FindPattern(InfiniteStream stream, int[] pattern) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     @param {number[]} bits\n *     constructor(bits);\n * \n *     @return {number}\n *     next();\n * }\n */\n/**\n * @param {InfiniteStream} stream\n * @param {number[]} pattern\n * @return {number}\n */\nvar findPattern = function(stream, pattern) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     constructor(bits: number[]);\n *     public next(): number;\n * }\n */\nfunction findPattern(stream: InfiniteStream, pattern: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     function __construct(bits);\n *     function next();\n *      * @return Integer\n * }\n */\nclass Solution {\n    \n    /**\n     * @param InfiniteStream $stream\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function findPattern($stream, $pattern) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     init(bits: [Int]) {}\n *     func next() -> Int {}\n * }\n */\nclass Solution {\n    func findPattern(_ stream: InfiniteStream, _ pattern: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream(bits: IntArray) {\n *     fun next(): Int\n * }\n */\nclass Solution {\n    fun findPattern(stream: InfiniteStream, pattern: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *   InfiniteStream(List<int> bits);\n *   int next();\n * }\n */\nclass Solution {\n    int findPattern(InfiniteStream stream, List<int> pattern) {\n\n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for an infinite stream.\n * type InfiniteStream interface {\n *     Next() int\n * }\n */\nfunc findPattern(stream InfiniteStream, pattern []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for an infinite stream.\n# class InfiniteStream\n#   def initialize(bits)\n#   end\n#   def next\n#   end\n# end\n# @param {InfiniteStream} stream\n# @param {Integer[]} pattern\n# @return {Integer}\ndef find_pattern(stream, pattern)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream(bits: Array[Int]) {\n *     def next(): Int\n * }\n */\nobject Solution {\n    def findPattern(stream: InfiniteStream, pattern: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * Definition for an infinite stream.\n * impl InfiniteStream {\n *     pub fn new(bits: Vec<i32>) -> Self {}\n *     pub fn next(&mut self) -> i32 {}\n * }\n */\nimpl Solution {\n    pub fn find_pattern(mut stream: InfiniteStream, pattern: Vec<i32>) -> i32 {\n        \n    }\n}"}], "similarQuestionList": []}