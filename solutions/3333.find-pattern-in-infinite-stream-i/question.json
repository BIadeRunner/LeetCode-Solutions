{"question_id": "3333", "problem_slug": "find-pattern-in-infinite-stream-i", "problem_title": "Find Pattern in Infinite Stream I", "content": "You are given a binary array pattern and an object stream of class InfiniteStream representing a 0-indexed infinite stream of bits.\nThe class InfiniteStream contains the following function:\n\nint next(): Reads a single bit (which is either 0 or 1) from the stream and returns it.\n\nReturn the first starting index where the pattern matches the bits read from the stream. For example, if the pattern is [1, 0], the first match is the highlighted part in the stream [0, 1, 0, 1, ...].\n \nExample 1:\n\nInput: stream = [1,1,1,0,1,1,1,...], pattern = [0,1]\nOutput: 3\nExplanation: The first occurrence of the pattern [0,1] is highlighted in the stream [1,1,1,0,1,...], which starts at index 3.\n\nExample 2:\n\nInput: stream = [0,0,0,0,...], pattern = [0]\nOutput: 0\nExplanation: The first occurrence of the pattern [0] is highlighted in the stream [0,...], which starts at index 0.\n\nExample 3:\n\nInput: stream = [1,0,1,1,0,1,1,0,1,...], pattern = [1,1,0,1]\nOutput: 2\nExplanation: The first occurrence of the pattern [1,1,0,1] is highlighted in the stream [1,0,1,1,0,1,...], which starts at index 2.\n\n \nConstraints:\n\n1 <= pattern.length <= 100\npattern consists only of 0 and 1.\nstream consists only of 0 and 1.\nThe input is generated such that the pattern's start index exists in the first 105 bits of the stream.\n\n", "hints": [], "exampleTestcases": "[1,1,1,0,1]\n[0,1]\n[0]\n[0]\n[1,0,1,1,0,1]\n[1,1,0,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n * public:\n *     InfiniteStream(vector<int> bits);\n *     int next();\n * };\n */\nclass Solution {\npublic:\n    int findPattern(InfiniteStream* stream, vector<int>& pattern) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     public InfiniteStream(int[] bits);\n *     public int next();\n * }\n */\nclass Solution {\n    public int findPattern(InfiniteStream infiniteStream, int[] pattern) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition for an infinite stream.\n# class InfiniteStream:\n#     def next(self):\n#         pass\nclass Solution(object):\n    def findPattern(self, stream, pattern):\n        \"\"\"\n        :type stream: InfiniteStream\n        :type pattern: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for an infinite stream.\n# class InfiniteStream:\n#     def next(self) -> int:\n#         pass\nclass Solution:\n    def findPattern(self, stream: Optional['InfiniteStream'], pattern: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for an infinite stream.\n * \n * YOU HAVE TO PASS THE OBJECT ITSELF AS THE FIRST PARAMETER\n * \n * struct InfiniteStream {\n *     int (*next)(struct InfiniteStream*);\n * };\n */\nint findPattern(struct InfiniteStream* stream, int* pattern, int patternSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     public InfiniteStream(int[] bits);\n *     public int Next();\n * }\n */\npublic class Solution {\n    public int FindPattern(InfiniteStream stream, int[] pattern) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     @param {number[]} bits\n *     constructor(bits);\n * \n *     @return {number}\n *     next();\n * }\n */\n/**\n * @param {InfiniteStream} stream\n * @param {number[]} pattern\n * @return {number}\n */\nvar findPattern = function(stream, pattern) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     constructor(bits: number[]);\n *     public next(): number;\n * }\n */\nfunction findPattern(stream: InfiniteStream, pattern: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     function __construct(bits);\n *     function next();\n *      * @return Integer\n * }\n */\nclass Solution {\n    \n    /**\n     * @param InfiniteStream $stream\n     * @param Integer[] $pattern\n     * @return Integer\n     */\n    function findPattern($stream, $pattern) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *     init(bits: [Int]) {}\n *     func next() -> Int {}\n * }\n */\nclass Solution {\n    func findPattern(_ stream: InfiniteStream, _ pattern: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream(bits: IntArray) {\n *     fun next(): Int\n * }\n */\nclass Solution {\n    fun findPattern(stream: InfiniteStream, pattern: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream {\n *   InfiniteStream(List<int> bits);\n *   int next();\n * }\n */\nclass Solution {\n    int findPattern(InfiniteStream stream, List<int> pattern) {\n\n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for an infinite stream.\n * type InfiniteStream interface {\n *     Next() int\n * }\n */\nfunc findPattern(stream InfiniteStream, pattern []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for an infinite stream.\n# class InfiniteStream\n#   def initialize(bits)\n#   end\n#   def next\n#   end\n# end\n# @param {InfiniteStream} stream\n# @param {Integer[]} pattern\n# @return {Integer}\ndef find_pattern(stream, pattern)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for an infinite stream.\n * class InfiniteStream(bits: Array[Int]) {\n *     def next(): Int\n * }\n */\nobject Solution {\n    def findPattern(stream: InfiniteStream, pattern: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/**\n * Definition for an infinite stream.\n * impl InfiniteStream {\n *     pub fn new(bits: Vec<i32>) -> Self {}\n *     pub fn next(&mut self) -> i32 {}\n * }\n */\nimpl Solution {\n    pub fn find_pattern(mut stream: InfiniteStream, pattern: Vec<i32>) -> i32 {\n        \n    }\n}"}}}