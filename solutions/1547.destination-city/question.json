{"question_id": "1547", "problem_slug": "destination-city", "problem_title": "Destination City", "content": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n \nExample 1:\n\nInput: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\nOutput: \"Sao Paulo\" \nExplanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".\n\nExample 2:\n\nInput: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\nOutput: \"A\"\nExplanation: All possible trips are: \n\"D\" -> \"B\" -> \"C\" -> \"A\". \n\"B\" -> \"C\" -> \"A\". \n\"C\" -> \"A\". \n\"A\". \nClearly the destination city is \"A\".\n\nExample 3:\n\nInput: paths = [[\"A\",\"Z\"]]\nOutput: \"Z\"\n\n \nConstraints:\n\n1 <= paths.length <= 100\npaths[i].length == 2\n1 <= cityAi.length, cityBi.length <= 10\ncityAi != cityBi\nAll strings consist of lowercase and uppercase English letters and the space character.\n\n", "hints": ["Start in any city and use the path to move to the next city.", "Eventually, you will reach a city with no path outgoing, this is the destination city."], "exampleTestcases": "[[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n[[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n[[\"A\",\"Z\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string destCity(vector<vector<string>>& paths) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String destCity(List<List<String>> paths) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def destCity(self, paths):\n        \"\"\"\n        :type paths: List[List[str]]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def destCity(self, paths: List[List[str]]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* destCity(char*** paths, int pathsSize, int* pathsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string DestCity(IList<IList<string>> paths) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[][]} paths\n * @return {string}\n */\nvar destCity = function(paths) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function destCity(paths: string[][]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $paths\n     * @return String\n     */\n    function destCity($paths) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func destCity(_ paths: [[String]]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun destCity(paths: List<List<String>>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String destCity(List<List<String>> paths) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func destCity(paths [][]string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[][]} paths\n# @return {String}\ndef dest_city(paths)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def destCity(paths: List[List[String]]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn dest_city(paths: Vec<Vec<String>>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (dest-city paths)\n  (-> (listof (listof string?)) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec dest_city(Paths :: [[unicode:unicode_binary()]]) -> unicode:unicode_binary().\ndest_city(Paths) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec dest_city(paths :: [[String.t]]) :: String.t\n  def dest_city(paths) do\n    \n  end\nend"}}}