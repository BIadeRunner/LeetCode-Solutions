{"question_id": "1227", "problem_slug": "number-of-equivalent-domino-pairs", "problem_title": "Number of Equivalent Domino Pairs", "content": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].\n \nExample 1:\n\nInput: dominoes = [[1,2],[2,1],[3,4],[5,6]]\nOutput: 1\n\nExample 2:\n\nInput: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]\nOutput: 3\n\n \nConstraints:\n\n1 <= dominoes.length <= 4 * 104\ndominoes[i].length == 2\n1 <= dominoes[i][j] <= 9\n\n", "hints": ["For each domino j, find the number of dominoes you've already seen (dominoes i with i < j) that are equivalent.", "You can keep track of what you've seen using a hashmap."], "exampleTestcases": "[[1,2],[2,1],[3,4],[5,6]]\n[[1,2],[1,2],[1,1],[1,2],[2,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numEquivDominoPairs(self, dominoes):\n        \"\"\"\n        :type dominoes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} dominoes\n * @return {number}\n */\nvar numEquivDominoPairs = function(dominoes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numEquivDominoPairs(dominoes: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dominoes\n     * @return Integer\n     */\n    function numEquivDominoPairs($dominoes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numEquivDominoPairs(_ dominoes: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numEquivDominoPairs(dominoes: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numEquivDominoPairs(List<List<int>> dominoes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numEquivDominoPairs(dominoes [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} dominoes\n# @return {Integer}\ndef num_equiv_domino_pairs(dominoes)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numEquivDominoPairs(dominoes: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_equiv_domino_pairs(dominoes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-equiv-domino-pairs dominoes)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_equiv_domino_pairs(Dominoes :: [[integer()]]) -> integer().\nnum_equiv_domino_pairs(Dominoes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_equiv_domino_pairs(dominoes :: [[integer]]) :: integer\n  def num_equiv_domino_pairs(dominoes) do\n    \n  end\nend"}}}