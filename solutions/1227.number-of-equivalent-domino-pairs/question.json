{"questionId": "1227", "acRate": 48.72005119795208, "difficulty": "Easy", "freqBar": 34.64189274010941, "frontendQuestionId": "1128", "paidOnly": false, "status": "ac", "title": "Number of Equivalent Domino Pairs", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "number-of-equivalent-domino-pairs", "content": "<p>Given a list of <code>dominoes</code>, <code>dominoes[i] = [a, b]</code> is <strong>equivalent to</strong> <code>dominoes[j] = [c, d]</code> if and only if either (<code>a == c</code> and <code>b == d</code>), or (<code>a == d</code> and <code>b == c</code>) - that is, one domino can be rotated to be equal to another domino.</p>\n\n<p>Return <em>the number of pairs </em><code>(i, j)</code><em> for which </em><code>0 &lt;= i &lt; j &lt; dominoes.length</code><em>, and </em><code>dominoes[i]</code><em> is <strong>equivalent to</strong> </em><code>dominoes[j]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dominoes = [[1,2],[2,1],[3,4],[5,6]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dominoes.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>dominoes[i].length == 2</code></li>\n\t<li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li>\n</ul>\n", "hints": ["For each domino j, find the number of dominoes you've already seen (dominoes i with i < j) that are equivalent.", "You can keep track of what you've seen using a hashmap."], "exampleTestcases": "[[1,2],[2,1],[3,4],[5,6]]\n[[1,2],[1,2],[1,1],[1,2],[2,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numEquivDominoPairs(self, dominoes):\n        \"\"\"\n        :type dominoes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumEquivDominoPairs(int[][] dominoes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} dominoes\n * @return {number}\n */\nvar numEquivDominoPairs = function(dominoes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numEquivDominoPairs(dominoes: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dominoes\n     * @return Integer\n     */\n    function numEquivDominoPairs($dominoes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numEquivDominoPairs(_ dominoes: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numEquivDominoPairs(dominoes: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numEquivDominoPairs(List<List<int>> dominoes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numEquivDominoPairs(dominoes [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} dominoes\n# @return {Integer}\ndef num_equiv_domino_pairs(dominoes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numEquivDominoPairs(dominoes: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_equiv_domino_pairs(dominoes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-equiv-domino-pairs dominoes)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_equiv_domino_pairs(Dominoes :: [[integer()]]) -> integer().\nnum_equiv_domino_pairs(Dominoes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_equiv_domino_pairs(dominoes :: [[integer]]) :: integer\n  def num_equiv_domino_pairs(dominoes) do\n    \n  end\nend"}], "similarQuestionList": []}