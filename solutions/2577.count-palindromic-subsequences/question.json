{"questionId": "2577", "acRate": 38.309072004159084, "difficulty": "Hard", "freqBar": 78.65142239298997, "frontendQuestionId": "2484", "paidOnly": false, "status": "ac", "title": "Count Palindromic Subsequences", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "count-palindromic-subsequences", "content": "<p>Given a string of digits <code>s</code>, return <em>the number of <strong>palindromic subsequences</strong> of</em> <code>s</code><em> having length </em><code>5</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A string is <strong>palindromic</strong> if it reads the same forward and backward.</li>\n\t<li>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;103301&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThere are 6 possible subsequences of length 5: &quot;10330&quot;,&quot;10331&quot;,&quot;10301&quot;,&quot;10301&quot;,&quot;13301&quot;,&quot;03301&quot;. \nTwo of them (both equal to &quot;10301&quot;) are palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000000&quot;\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> All 21 subsequences are &quot;00000&quot;, which is palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;9999900000&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The only two palindromic subsequences are &quot;99999&quot; and &quot;00000&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits.</li>\n</ul>\n", "hints": ["There are 100 possibilities for the first two characters of the palindrome.", "Iterate over all characters, letting the current character be the center of the palindrome."], "exampleTestcases": "\"103301\"\n\"0000000\"\n\"9999900000\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPalindromes(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPalindromes(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPalindromes(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countPalindromes(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPalindromes(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countPalindromes = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPalindromes(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countPalindromes($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPalindromes(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPalindromes(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countPalindromes(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countPalindromes(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_palindromes(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPalindromes(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_palindromes(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-palindromes s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_palindromes(S :: unicode:unicode_binary()) -> integer().\ncount_palindromes(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_palindromes(s :: String.t) :: integer\n  def count_palindromes(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "unique-length-3-palindromic-subsequences", "title": "Unique Length-3 Palindromic Subsequences", "isPaidOnly": false}]}