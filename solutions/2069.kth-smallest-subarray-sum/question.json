{"question_id": "2069", "problem_slug": "kth-smallest-subarray-sum", "problem_title": "Kth Smallest Subarray Sum", "content": "Given an integer array nums of length n and an integer k, return the kth smallest subarray sum.\nA subarray is defined as a non-empty contiguous sequence of elements in an array. A subarray sum is the sum of all elements in the subarray.\n \nExample 1:\n\nInput: nums = [2,1,3], k = 4\nOutput: 3\nExplanation: The subarrays of [2,1,3] are:\n- [2] with sum 2\n- [1] with sum 1\n- [3] with sum 3\n- [2,1] with sum 3\n- [1,3] with sum 4\n- [2,1,3] with sum 6 \nOrdering the sums from smallest to largest gives 1, 2, 3, 3, 4, 6. The 4th smallest is 3.\n\nExample 2:\n\nInput: nums = [3,3,5,5], k = 7\nOutput: 10\nExplanation: The subarrays of [3,3,5,5] are:\n- [3] with sum 3\n- [3] with sum 3\n- [5] with sum 5\n- [5] with sum 5\n- [3,3] with sum 6\n- [3,5] with sum 8\n- [5,5] with sum 10\n- [3,3,5], with sum 11\n- [3,5,5] with sum 13\n- [3,3,5,5] with sum 16\nOrdering the sums from smallest to largest gives 3, 3, 5, 5, 6, 8, 10, 11, 13, 16. The 7th smallest is 10.\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 2 * 104\n1 <= nums[i] <= 5 * 104\n1 <= k <= n * (n + 1) / 2\n\n", "hints": ["How can you compute the number of subarrays with a sum less than a given value?", "Can we use binary search to help find the answer?"], "exampleTestcases": "[2,1,3]\n4\n[3,3,5,5]\n7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kthSmallestSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kthSmallestSubarraySum(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kthSmallestSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kthSmallestSubarraySum(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kthSmallestSubarraySum(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KthSmallestSubarraySum(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar kthSmallestSubarraySum = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kthSmallestSubarraySum(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthSmallestSubarraySum($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kthSmallestSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kthSmallestSubarraySum(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kthSmallestSubarraySum(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kthSmallestSubarraySum(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef kth_smallest_subarray_sum(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kthSmallestSubarraySum(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn kth_smallest_subarray_sum(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (kth-smallest-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec kth_smallest_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nkth_smallest_subarray_sum(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_smallest_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def kth_smallest_subarray_sum(nums, k) do\n    \n  end\nend"}}}