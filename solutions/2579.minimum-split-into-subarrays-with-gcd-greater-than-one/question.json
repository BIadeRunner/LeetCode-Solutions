{"question_id": "2579", "problem_slug": "minimum-split-into-subarrays-with-gcd-greater-than-one", "problem_title": "Minimum Split Into Subarrays With GCD Greater Than One", "content": "You are given an array nums consisting of positive integers.\nSplit the array into one or more disjoint subarrays such that:\n\nEach element of the array belongs to exactly one subarray, and\nThe GCD of the elements of each subarray is strictly greater than 1.\n\nReturn the minimum number of subarrays that can be obtained after the split.\nNote that:\n\nThe GCD of a subarray is the largest positive integer that evenly divides all the elements of the subarray.\nA subarray is a contiguous part of the array.\n\n \nExample 1:\n\nInput: nums = [12,6,3,14,8]\nOutput: 2\nExplanation: We can split the array into the subarrays: [12,6,3] and [14,8].\n- The GCD of 12, 6 and 3 is 3, which is strictly greater than 1.\n- The GCD of 14 and 8 is 2, which is strictly greater than 1.\nIt can be shown that splitting the array into one subarray will make the GCD = 1.\n\nExample 2:\n\nInput: nums = [4,12,6,14]\nOutput: 1\nExplanation: We can split the array into only one subarray, which is the whole array.\n\n \nConstraints:\n\n1 <= nums.length <= 2000\n2 <= nums[i] <= 109\n\n", "hints": ["How does the GCD of an array change when you add more elements to a subarray?", "The GCD will always decrease when increasing the size of the subarray,", "Keep adding elements to a subarray and if adding a new element will make the GCD = 1, add a new split and a new subarray."], "exampleTestcases": "[12,6,3,14,8]\n[4,12,6,14]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSplits(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSplits(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSplits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSplits(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSplits(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSplits(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumSplits = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSplits(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSplits($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSplits(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSplits(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSplits(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSplits(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_splits(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSplits(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_splits(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-splits nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_splits(Nums :: [integer()]) -> integer().\nminimum_splits(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_splits(nums :: [integer]) :: integer\n  def minimum_splits(nums) do\n    \n  end\nend"}}}