{"question_id": "161", "problem_slug": "one-edit-distance", "problem_title": "One Edit Distance", "content": "Given two strings s and t, return true if they are both one edit distance apart, otherwise return false.\nA string s is said to be one distance apart from a string t if you can:\n\nInsert exactly one character into s to get t.\nDelete exactly one character from s to get t.\nReplace exactly one character of s with a different character to get t.\n\n \nExample 1:\n\nInput: s = \"ab\", t = \"acb\"\nOutput: true\nExplanation: We can insert 'c' into s to get t.\n\nExample 2:\n\nInput: s = \"\", t = \"\"\nOutput: false\nExplanation: We cannot get t from s by only one step.\n\n \nConstraints:\n\n0 <= s.length, t.length <= 104\ns and t consist of lowercase letters, uppercase letters, and digits.\n\n", "hints": [], "exampleTestcases": "\"ab\"\n\"acb\"\n\"\"\n\"\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isOneEditDistance(string s, string t) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isOneEditDistance(String s, String t) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isOneEditDistance(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isOneEditDistance(char* s, char* t) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsOneEditDistance(string s, string t) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isOneEditDistance = function(s, t) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isOneEditDistance(s: string, t: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isOneEditDistance($s, $t) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isOneEditDistance(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isOneEditDistance(s: String, t: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isOneEditDistance(String s, String t) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isOneEditDistance(s string, t string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_one_edit_distance(s, t)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isOneEditDistance(s: String, t: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_one_edit_distance(s: String, t: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-one-edit-distance s t)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_one_edit_distance(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_one_edit_distance(S, T) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_one_edit_distance(s :: String.t, t :: String.t) :: boolean\n  def is_one_edit_distance(s, t) do\n    \n  end\nend"}}}