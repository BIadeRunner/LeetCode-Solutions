{"questionId": "2729", "acRate": 42.77818181818182, "difficulty": "Hard", "freqBar": 68.73915414199124, "frontendQuestionId": "2702", "paidOnly": true, "status": "ac", "title": "Minimum Operations to Make Numbers Non-positive", "titleSlug": "minimum-operations-to-make-numbers-non-positive", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and two integers <code>x</code> and <code>y</code>. In one operation, you must choose an index <code>i</code> such that <code>0 &lt;= i &lt; nums.length</code> and perform the following:</p>\n\n<ul>\n\t<li>Decrement <code>nums[i]</code> by <code>x</code>.</li>\n\t<li>Decrement values by <code>y</code> at all indices except the <code>i<sup>th</sup></code> one.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations to make all the integers in </em><code>nums</code> <em><strong>less than or equal to zero.</strong></em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,1,7,6], x = 4, y = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You will need three operations. One of the optimal sequence of operations is:\nOperation 1: Choose i = 3. Then, nums = [1,2,-1,3,4]. \nOperation 2: Choose i = 3. Then, nums = [-1,0,-3,-1,2].\nOperation 3: Choose i = 4. Then, nums = [-3,-2,-5,-3,-2].\nNow, all the numbers in nums are non-positive. Therefore, we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1], x = 2, y = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can perform the operation once on i = 1. Then, nums becomes [0,0,0]. All the positive numbers are removed, and therefore, we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= y &lt; x &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Given a candidate, can you check if it is possible to decrement all values to be less than or equal to 0 within the given steps in O(N) time?", "If so, run a binary search to look for the minimum such valid candidate."], "exampleTestcases": "[3,4,1,7,6]\n4\n2\n[1,2,1]\n2\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x, int y) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minOperations(int[] nums, int x, int y) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minOperations(self, nums, x, y):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int, y: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minOperations(int* nums, int numsSize, int x, int y) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinOperations(int[] nums, int x, int y) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minOperations = function(nums, x, y) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minOperations(nums: number[], x: number, y: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function minOperations($nums, $x, $y) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minOperations(_ nums: [Int], _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minOperations(nums: IntArray, x: Int, y: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minOperations(List<int> nums, int x, int y) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minOperations(nums []int, x int, y int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef min_operations(nums, x, y)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minOperations(nums: Array[Int], x: Int, y: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-operations nums x y)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_operations(Nums :: [integer()], X :: integer(), Y :: integer()) -> integer().\nmin_operations(Nums, X, Y) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], x :: integer, y :: integer) :: integer\n  def min_operations(nums, x, y) do\n    \n  end\nend"}], "similarQuestionList": []}