{"question_id": "1290", "problem_slug": "make-array-strictly-increasing", "problem_title": "Make Array Strictly Increasing", "content": "Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.\nIn one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].\nIf there is no way to make arr1 strictly increasing, return -1.\n \nExample 1:\n\nInput: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].\n\nExample 2:\n\nInput: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].\n\nExample 3:\n\nInput: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing.\n \nConstraints:\n\n1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9\n\n \n", "hints": ["Use dynamic programming.", "The state would be the index in arr1 and the index of the previous element in arr2 after sorting it and removing duplicates."], "exampleTestcases": "[1,5,3,6,7]\n[1,3,2,4]\n[1,5,3,6,7]\n[4,3,1]\n[1,5,3,6,7]\n[1,6,3,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeArrayIncreasing(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int makeArrayIncreasing(int* arr1, int arr1Size, int* arr2, int arr2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MakeArrayIncreasing(int[] arr1, int[] arr2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number}\n */\nvar makeArrayIncreasing = function(arr1, arr2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeArrayIncreasing(arr1: number[], arr2: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer\n     */\n    function makeArrayIncreasing($arr1, $arr2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeArrayIncreasing(_ arr1: [Int], _ arr2: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeArrayIncreasing(arr1: IntArray, arr2: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int makeArrayIncreasing(List<int> arr1, List<int> arr2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeArrayIncreasing(arr1 []int, arr2 []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer}\ndef make_array_increasing(arr1, arr2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeArrayIncreasing(arr1: Array[Int], arr2: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_array_increasing(arr1: Vec<i32>, arr2: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-array-increasing arr1 arr2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_array_increasing(Arr1 :: [integer()], Arr2 :: [integer()]) -> integer().\nmake_array_increasing(Arr1, Arr2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_array_increasing(arr1 :: [integer], arr2 :: [integer]) :: integer\n  def make_array_increasing(arr1, arr2) do\n    \n  end\nend"}}}