{"question_id": "500", "problem_slug": "keyboard-row", "problem_title": "Keyboard Row", "content": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nIn the American keyboard:\n\nthe first row consists of the characters \"qwertyuiop\",\nthe second row consists of the characters \"asdfghjkl\", and\nthe third row consists of the characters \"zxcvbnm\".\n\n\n \nExample 1:\n\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nOutput: [\"Alaska\",\"Dad\"]\n\nExample 2:\n\nInput: words = [\"omk\"]\nOutput: []\n\nExample 3:\n\nInput: words = [\"adsdf\",\"sfd\"]\nOutput: [\"adsdf\",\"sfd\"]\n\n \nConstraints:\n\n1 <= words.length <= 20\n1 <= words[i].length <= 100\nwords[i] consists of English letters (both lowercase and uppercase). \n\n", "hints": [], "exampleTestcases": "[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n[\"omk\"]\n[\"adsdf\",\"sfd\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String[] findWords(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findWords(char** words, int wordsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string[] FindWords(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findWords(words: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function findWords($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findWords(_ words: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findWords(words: Array<String>): Array<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> findWords(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findWords(words []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef find_words(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findWords(words: Array[String]): Array[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_words(words: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-words words)\n  (-> (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_words(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nfind_words(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_words(words :: [String.t]) :: [String.t]\n  def find_words(words) do\n    \n  end\nend"}}}