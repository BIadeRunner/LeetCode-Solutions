{"question_id": "3561", "problem_slug": "remove-methods-from-project", "problem_title": "Remove Methods From Project", "content": "You are maintaining a project that has n methods numbered from 0 to n - 1.\nYou are given two integers n and k, and a 2D integer array invocations, where invocations[i] = [ai, bi] indicates that method ai invokes method bi.\nThere is a known bug in method k. Method k, along with any method invoked by it, either directly or indirectly, are considered suspicious and we aim to remove them.\nA group of methods can only be removed if no method outside the group invokes any methods within it.\nReturn an array containing all the remaining methods after removing all the suspicious methods. You may return the answer in any order. If it is not possible to remove all the suspicious methods, none should be removed.\n \nExample 1:\n\nInput: n = 4, k = 1, invocations = [[1,2],[0,1],[3,2]]\nOutput: [0,1,2,3]\nExplanation:\n\nMethod 2 and method 1 are suspicious, but they are directly invoked by methods 3 and 0, which are not suspicious. We return all elements without removing anything.\n\nExample 2:\n\nInput: n = 5, k = 0, invocations = [[1,2],[0,2],[0,1],[3,4]]\nOutput: [3,4]\nExplanation:\n\nMethods 0, 1, and 2 are suspicious and they are not directly invoked by any other method. We can remove them.\n\nExample 3:\n\nInput: n = 3, k = 2, invocations = [[1,2],[0,1],[2,0]]\nOutput: []\nExplanation:\n\nAll methods are suspicious. We can remove them.\n\n \nConstraints:\n\n1 <= n <= 105\n0 <= k <= n - 1\n0 <= invocations.length <= 2 * 105\ninvocations[i] == [ai, bi]\n0 <= ai, bi <= n - 1\nai != bi\ninvocations[i] != invocations[j]\n\n", "hints": ["Use DFS from node <code>k</code>.", "Mark all the nodes visited from node <code>k</code>, and then check if they can be visited from the other nodes."], "exampleTestcases": "4\n1\n[[1,2],[0,1],[3,2]]\n5\n0\n[[1,2],[0,2],[0,1],[3,4]]\n3\n2\n[[1,2],[0,1],[2,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> remainingMethods(int n, int k, vector<vector<int>>& invocations) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> remainingMethods(int n, int k, int[][] invocations) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def remainingMethods(self, n, k, invocations):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type invocations: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def remainingMethods(self, n: int, k: int, invocations: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* remainingMethods(int n, int k, int** invocations, int invocationsSize, int* invocationsColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> RemainingMethods(int n, int k, int[][] invocations) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number[][]} invocations\n * @return {number[]}\n */\nvar remainingMethods = function(n, k, invocations) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function remainingMethods(n: number, k: number, invocations: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer[][] $invocations\n     * @return Integer[]\n     */\n    function remainingMethods($n, $k, $invocations) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func remainingMethods(_ n: Int, _ k: Int, _ invocations: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun remainingMethods(n: Int, k: Int, invocations: Array<IntArray>): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> remainingMethods(int n, int k, List<List<int>> invocations) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func remainingMethods(n int, k int, invocations [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer[][]} invocations\n# @return {Integer[]}\ndef remaining_methods(n, k, invocations)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def remainingMethods(n: Int, k: Int, invocations: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn remaining_methods(n: i32, k: i32, invocations: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (remaining-methods n k invocations)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec remaining_methods(N :: integer(), K :: integer(), Invocations :: [[integer()]]) -> [integer()].\nremaining_methods(N, K, Invocations) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec remaining_methods(n :: integer, k :: integer, invocations :: [[integer]]) :: [integer]\n  def remaining_methods(n, k, invocations) do\n    \n  end\nend"}}}