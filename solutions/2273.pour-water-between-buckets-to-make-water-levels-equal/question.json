{"question_id": "2273", "problem_slug": "pour-water-between-buckets-to-make-water-levels-equal", "problem_title": "Pour Water Between Buckets to Make Water Levels Equal", "content": "You have n buckets each containing some gallons of water in it, represented by a 0-indexed integer array buckets, where the ith bucket contains buckets[i] gallons of water. You are also given an integer loss.\nYou want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour k gallons of water, you spill loss percent of k.\nReturn the maximum amount of water in each bucket after making the amount of water equal. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\nInput: buckets = [1,2,7], loss = 80\nOutput: 2.00000\nExplanation: Pour 5 gallons of water from buckets[2] to buckets[0].\n5 * 80% = 4 gallons are spilled and buckets[0] only receives 5 - 4 = 1 gallon of water.\nAll buckets have 2 gallons of water in them so return 2.\n\nExample 2:\n\nInput: buckets = [2,4,6], loss = 50\nOutput: 3.50000\nExplanation: Pour 0.5 gallons of water from buckets[1] to buckets[0].\n0.5 * 50% = 0.25 gallons are spilled and buckets[0] only receives 0.5 - 0.25 = 0.25 gallons of water.\nNow, buckets = [2.25, 3.5, 6].\nPour 2.5 gallons of water from buckets[2] to buckets[0].\n2.5 * 50% = 1.25 gallons are spilled and buckets[0] only receives 2.5 - 1.25 = 1.25 gallons of water.\nAll buckets have 3.5 gallons of water in them so return 3.5.\n\nExample 3:\n\nInput: buckets = [3,3,3,3], loss = 40\nOutput: 3.00000\nExplanation: All buckets already have the same amount of water in them.\n\n \nConstraints:\n\n1 <= buckets.length <= 105\n0 <= buckets[i] <= 105\n0 <= loss <= 99\n\n", "hints": ["What is the range that the answer must fall into?", "The answer has to be in the range [0, max(buckets)] (inclusive).", "For a number x, is there an efficient way to check if it is possible to make the amount of water in each bucket x.", "Let in be the total amount of water that needs to be poured into buckets and out be the total amount of water that needs to be poured out of buckets to make the amount of water in each bucket x. If out - (out * loss) >= in, then it is possible."], "exampleTestcases": "[1,2,7]\n80\n[2,4,6]\n50\n[3,3,3,3]\n40", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double equalizeWater(vector<int>& buckets, int loss) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double equalizeWater(int[] buckets, int loss) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def equalizeWater(self, buckets, loss):\n        \"\"\"\n        :type buckets: List[int]\n        :type loss: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def equalizeWater(self, buckets: List[int], loss: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double equalizeWater(int* buckets, int bucketsSize, int loss) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double EqualizeWater(int[] buckets, int loss) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} buckets\n * @param {number} loss\n * @return {number}\n */\nvar equalizeWater = function(buckets, loss) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function equalizeWater(buckets: number[], loss: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $buckets\n     * @param Integer $loss\n     * @return Float\n     */\n    function equalizeWater($buckets, $loss) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func equalizeWater(_ buckets: [Int], _ loss: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun equalizeWater(buckets: IntArray, loss: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double equalizeWater(List<int> buckets, int loss) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func equalizeWater(buckets []int, loss int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} buckets\n# @param {Integer} loss\n# @return {Float}\ndef equalize_water(buckets, loss)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def equalizeWater(buckets: Array[Int], loss: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn equalize_water(buckets: Vec<i32>, loss: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (equalize-water buckets loss)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec equalize_water(Buckets :: [integer()], Loss :: integer()) -> float().\nequalize_water(Buckets, Loss) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec equalize_water(buckets :: [integer], loss :: integer) :: float\n  def equalize_water(buckets, loss) do\n    \n  end\nend"}}}