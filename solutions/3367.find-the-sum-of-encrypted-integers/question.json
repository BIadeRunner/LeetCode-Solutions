{"question_id": "3367", "problem_slug": "find-the-sum-of-encrypted-integers", "problem_title": "Find the Sum of Encrypted Integers", "content": "You are given an integer array nums containing positive integers. We define a function encrypt such that encrypt(x) replaces every digit in x with the largest digit in x. For example, encrypt(523) = 555 and encrypt(213) = 333.\nReturn the sum of encrypted elements.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 6\nExplanation: The encrypted elements are [1,2,3]. The sum of encrypted elements is 1 + 2 + 3 == 6.\n\nExample 2:\n\nInput: nums = [10,21,31]\nOutput: 66\nExplanation: The encrypted elements are [11,22,33]. The sum of encrypted elements is 11 + 22 + 33 == 66.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 1000\n\n", "hints": ["Encrypted numbers are of the form <code>11…1 * maxDigit</code>."], "exampleTestcases": "[1,2,3]\n[10,21,31]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumOfEncryptedInt(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumOfEncryptedInt(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOfEncryptedInt(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOfEncryptedInt(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumOfEncryptedInt(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumOfEncryptedInt(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfEncryptedInt = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOfEncryptedInt(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfEncryptedInt($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOfEncryptedInt(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOfEncryptedInt(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumOfEncryptedInt(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOfEncryptedInt(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_encrypted_int(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOfEncryptedInt(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_encrypted_int(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-of-encrypted-int nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_of_encrypted_int(Nums :: [integer()]) -> integer().\nsum_of_encrypted_int(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_of_encrypted_int(nums :: [integer]) :: integer\n  def sum_of_encrypted_int(nums) do\n    \n  end\nend"}}}