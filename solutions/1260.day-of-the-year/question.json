{"question_id": "1260", "problem_slug": "day-of-the-year", "problem_title": "Day of the Year", "content": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.\n \nExample 1:\n\nInput: date = \"2019-01-09\"\nOutput: 9\nExplanation: Given date is the 9th day of the year in 2019.\n\nExample 2:\n\nInput: date = \"2019-02-10\"\nOutput: 41\n\n \nConstraints:\n\ndate.length == 10\ndate[4] == date[7] == '-', and all other date[i]'s are digits\ndate represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.\n\n", "hints": ["Have a integer array of how many days there are per month.  February gets one extra day if its a leap year.  Then, we can manually count the ordinal as day + (number of days in months before this one)."], "exampleTestcases": "\"2019-01-09\"\n\"2019-02-10\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int dayOfYear(string date) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int dayOfYear(String date) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def dayOfYear(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def dayOfYear(self, date: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int dayOfYear(char* date) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DayOfYear(string date) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function dayOfYear(date: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $date\n     * @return Integer\n     */\n    function dayOfYear($date) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func dayOfYear(_ date: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun dayOfYear(date: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int dayOfYear(String date) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func dayOfYear(date string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} date\n# @return {Integer}\ndef day_of_year(date)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def dayOfYear(date: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn day_of_year(date: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (day-of-year date)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec day_of_year(Date :: unicode:unicode_binary()) -> integer().\nday_of_year(Date) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec day_of_year(date :: String.t) :: integer\n  def day_of_year(date) do\n    \n  end\nend"}}}