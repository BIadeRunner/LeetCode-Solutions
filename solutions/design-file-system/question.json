{"questionId": "1125", "acRate": 63.35947456131752, "difficulty": "Medium", "freqBar": 66.00284801215281, "frontendQuestionId": "1166", "paidOnly": true, "status": "ac", "title": "Design File System", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Trie", "id": "VG9waWNUYWdOb2RlOjI3", "slug": "trie"}], "titleSlug": "design-file-system", "content": "<p>You are asked to design a file system&nbsp;that allows you to create new paths and associate them with different values.</p>\n\n<p>The format of a path is&nbsp;one or more concatenated strings of the form:&nbsp;<code>/</code> followed by one or more lowercase English letters. For example, &quot;<code>/leetcode&quot;</code>&nbsp;and &quot;<code>/leetcode/problems&quot;</code>&nbsp;are valid paths while an empty&nbsp;string <code>&quot;&quot;</code> and <code>&quot;/&quot;</code>&nbsp;are not.</p>\n\n<p>Implement the&nbsp;<code>FileSystem</code> class:</p>\n\n<ul>\n\t<li><code>bool createPath(string path, int value)</code>&nbsp;Creates a new <code>path</code> and associates a <code>value</code> to it if possible and returns <code>true</code>.&nbsp;Returns <code>false</code>&nbsp;if the path <strong>already exists</strong> or its parent path <strong>doesn&#39;t exist</strong>.</li>\n\t<li><code>int get(string path)</code>&nbsp;Returns the value associated with <code>path</code> or returns&nbsp;<code>-1</code>&nbsp;if the path doesn&#39;t exist.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \n[&quot;FileSystem&quot;,&quot;createPath&quot;,&quot;get&quot;]\n[[],[&quot;/a&quot;,1],[&quot;/a&quot;]]\n<strong>Output:</strong> \n[null,true,1]\n<strong>Explanation:</strong> \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(&quot;/a&quot;, 1); // return true\nfileSystem.get(&quot;/a&quot;); // return 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \n[&quot;FileSystem&quot;,&quot;createPath&quot;,&quot;createPath&quot;,&quot;get&quot;,&quot;createPath&quot;,&quot;get&quot;]\n[[],[&quot;/leet&quot;,1],[&quot;/leet/code&quot;,2],[&quot;/leet/code&quot;],[&quot;/c/d&quot;,1],[&quot;/c&quot;]]\n<strong>Output:</strong> \n[null,true,true,2,false,-1]\n<strong>Explanation:</strong> \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(&quot;/leet&quot;, 1); // return true\nfileSystem.createPath(&quot;/leet/code&quot;, 2); // return true\nfileSystem.get(&quot;/leet/code&quot;); // return 2\nfileSystem.createPath(&quot;/c/d&quot;, 1); // return false because the parent path &quot;/c&quot; doesn&#39;t exist.\nfileSystem.get(&quot;/c&quot;); // return -1 because this path doesn&#39;t exist.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= path.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= value &lt;= 10<sup>9</sup></code></li>\n\t<li>Each <code>path</code> is <strong>valid</strong> and consists of lowercase English letters and <code>&#39;/&#39;</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>createPath</code> and <code>get</code>.</li>\n</ul>\n", "hints": ["What if you think of a tree hierarchy for the files?.", "A path is a node in the tree.", "Use a hash table to store the valid paths along with their values."], "exampleTestcases": "[\"FileSystem\",\"createPath\",\"get\"]\n[[],[\"/a\",1],[\"/a\"]]\n[\"FileSystem\",\"createPath\",\"createPath\",\"get\",\"createPath\",\"get\"]\n[[],[\"/leet\",1],[\"/leet/code\",2],[\"/leet/code\"],[\"/c/d\",1],[\"/c\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class FileSystem {\npublic:\n    FileSystem() {\n        \n    }\n    \n    bool createPath(string path, int value) {\n        \n    }\n    \n    int get(string path) {\n        \n    }\n};\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem* obj = new FileSystem();\n * bool param_1 = obj->createPath(path,value);\n * int param_2 = obj->get(path);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class FileSystem {\n\n    public FileSystem() {\n        \n    }\n    \n    public boolean createPath(String path, int value) {\n        \n    }\n    \n    public int get(String path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * boolean param_1 = obj.createPath(path,value);\n * int param_2 = obj.get(path);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class FileSystem(object):\n\n    def __init__(self):\n        \n\n    def createPath(self, path, value):\n        \"\"\"\n        :type path: str\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def get(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem()\n# param_1 = obj.createPath(path,value)\n# param_2 = obj.get(path)"}, {"lang": "Python3", "langSlug": "python3", "code": "class FileSystem:\n\n    def __init__(self):\n        \n\n    def createPath(self, path: str, value: int) -> bool:\n        \n\n    def get(self, path: str) -> int:\n        \n\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem()\n# param_1 = obj.createPath(path,value)\n# param_2 = obj.get(path)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FileSystem;\n\n\nFileSystem* fileSystemCreate() {\n    \n}\n\nbool fileSystemCreatePath(FileSystem* obj, char* path, int value) {\n    \n}\n\nint fileSystemGet(FileSystem* obj, char* path) {\n    \n}\n\nvoid fileSystemFree(FileSystem* obj) {\n    \n}\n\n/**\n * Your FileSystem struct will be instantiated and called as such:\n * FileSystem* obj = fileSystemCreate();\n * bool param_1 = fileSystemCreatePath(obj, path, value);\n \n * int param_2 = fileSystemGet(obj, path);\n \n * fileSystemFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class FileSystem {\n\n    public FileSystem() {\n        \n    }\n    \n    public bool CreatePath(string path, int value) {\n        \n    }\n    \n    public int Get(string path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * bool param_1 = obj.CreatePath(path,value);\n * int param_2 = obj.Get(path);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar FileSystem = function() {\n    \n};\n\n/** \n * @param {string} path \n * @param {number} value\n * @return {boolean}\n */\nFileSystem.prototype.createPath = function(path, value) {\n    \n};\n\n/** \n * @param {string} path\n * @return {number}\n */\nFileSystem.prototype.get = function(path) {\n    \n};\n\n/** \n * Your FileSystem object will be instantiated and called as such:\n * var obj = new FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class FileSystem {\n    constructor() {\n        \n    }\n\n    createPath(path: string, value: number): boolean {\n        \n    }\n\n    get(path: string): number {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * var obj = new FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class FileSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $path\n     * @param Integer $value\n     * @return Boolean\n     */\n    function createPath($path, $value) {\n        \n    }\n  \n    /**\n     * @param String $path\n     * @return Integer\n     */\n    function get($path) {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * $obj = FileSystem();\n * $ret_1 = $obj->createPath($path, $value);\n * $ret_2 = $obj->get($path);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass FileSystem {\n\n    init() {\n        \n    }\n    \n    func createPath(_ path: String, _ value: Int) -> Bool {\n        \n    }\n    \n    func get(_ path: String) -> Int {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * let obj = FileSystem()\n * let ret_1: Bool = obj.createPath(path, value)\n * let ret_2: Int = obj.get(path)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class FileSystem() {\n\n    fun createPath(path: String, value: Int): Boolean {\n        \n    }\n\n    fun get(path: String): Int {\n        \n    }\n\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * var obj = FileSystem()\n * var param_1 = obj.createPath(path,value)\n * var param_2 = obj.get(path)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class FileSystem {\n\n  FileSystem() {\n    \n  }\n  \n  bool createPath(String path, int value) {\n    \n  }\n  \n  int get(String path) {\n    \n  }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = FileSystem();\n * bool param1 = obj.createPath(path,value);\n * int param2 = obj.get(path);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type FileSystem struct {\n    \n}\n\n\nfunc Constructor() FileSystem {\n    \n}\n\n\nfunc (this *FileSystem) CreatePath(path string, value int) bool {\n    \n}\n\n\nfunc (this *FileSystem) Get(path string) int {\n    \n}\n\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.CreatePath(path,value);\n * param_2 := obj.Get(path);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class FileSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type path: String\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def create_path(path, value)\n        \n    end\n\n\n=begin\n    :type path: String\n    :rtype: Integer\n=end\n    def get(path)\n        \n    end\n\n\nend\n\n# Your FileSystem object will be instantiated and called as such:\n# obj = FileSystem.new()\n# param_1 = obj.create_path(path, value)\n# param_2 = obj.get(path)"}, {"lang": "Scala", "langSlug": "scala", "code": "class FileSystem() {\n\n    def createPath(path: String, value: Int): Boolean = {\n        \n    }\n\n    def get(path: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * val obj = new FileSystem()\n * val param_1 = obj.createPath(path,value)\n * val param_2 = obj.get(path)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct FileSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FileSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn create_path(&self, path: String, value: i32) -> bool {\n        \n    }\n    \n    fn get(&self, path: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * let obj = FileSystem::new();\n * let ret_1: bool = obj.create_path(path, value);\n * let ret_2: i32 = obj.get(path);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define file-system%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; create-path : string? exact-integer? -> boolean?\n    (define/public (create-path path value)\n      )\n    ; get : string? -> exact-integer?\n    (define/public (get path)\n      )))\n\n;; Your file-system% object will be instantiated and called as such:\n;; (define obj (new file-system%))\n;; (define param_1 (send obj create-path path value))\n;; (define param_2 (send obj get path))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec file_system_init_() -> any().\nfile_system_init_() ->\n  .\n\n-spec file_system_create_path(Path :: unicode:unicode_binary(), Value :: integer()) -> boolean().\nfile_system_create_path(Path, Value) ->\n  .\n\n-spec file_system_get(Path :: unicode:unicode_binary()) -> integer().\nfile_system_get(Path) ->\n  .\n\n\n%% Your functions will be called as such:\n%% file_system_init_(),\n%% Param_1 = file_system_create_path(Path, Value),\n%% Param_2 = file_system_get(Path),\n\n%% file_system_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule FileSystem do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec create_path(path :: String.t, value :: integer) :: boolean\n  def create_path(path, value) do\n    \n  end\n\n  @spec get(path :: String.t) :: integer\n  def get(path) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FileSystem.init_()\n# param_1 = FileSystem.create_path(path, value)\n# param_2 = FileSystem.get(path)\n\n# FileSystem.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": []}