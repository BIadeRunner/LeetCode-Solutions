{"questionId": "1275", "acRate": 43.81806675693177, "difficulty": "Medium", "freqBar": 17.35431693451712, "frontendQuestionId": "1361", "paidOnly": false, "status": "ac", "title": "Validate Binary Tree Nodes", "topicTags": [{"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Binary Tree", "id": "VG9waWNUYWdOb2RlOjYxMDU3", "slug": "binary-tree"}], "titleSlug": "validate-binary-tree-nodes", "content": "<p>You have <code>n</code> binary tree nodes numbered from <code>0</code> to <code>n - 1</code> where node <code>i</code> has two children <code>leftChild[i]</code> and <code>rightChild[i]</code>, return <code>true</code> if and only if <strong>all</strong> the given nodes form <strong>exactly one</strong> valid binary tree.</p>\n\n<p>If node <code>i</code> has no left child then <code>leftChild[i]</code> will equal <code>-1</code>, similarly for the right child.</p>\n\n<p>Note that the nodes have no values and that we only use the node numbers in this problem.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex1.png\" style=\"width: 195px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex2.png\" style=\"width: 183px; height: 272px;\" />\n<pre>\n<strong>Input:</strong> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex3.png\" style=\"width: 82px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 2, leftChild = [1,0], rightChild = [-1,-1]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == leftChild.length == rightChild.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li>\n</ul>\n", "hints": ["Find the parent of each node.", "A valid tree must have nodes with only one parent and exactly one node with no parent."], "exampleTestcases": "4\n[1,-1,3,-1]\n[2,-1,-1,-1]\n4\n[1,-1,3,-1]\n[2,3,-1,-1]\n2\n[1,0]\n[-1,-1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n        \"\"\"\n        :type n: int\n        :type leftChild: List[int]\n        :type rightChild: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool validateBinaryTreeNodes(int n, int* leftChild, int leftChildSize, int* rightChild, int rightChildSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} leftChild\n * @param {number[]} rightChild\n * @return {boolean}\n */\nvar validateBinaryTreeNodes = function(n, leftChild, rightChild) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validateBinaryTreeNodes(n: number, leftChild: number[], rightChild: number[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $leftChild\n     * @param Integer[] $rightChild\n     * @return Boolean\n     */\n    function validateBinaryTreeNodes($n, $leftChild, $rightChild) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validateBinaryTreeNodes(_ n: Int, _ leftChild: [Int], _ rightChild: [Int]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validateBinaryTreeNodes(n: Int, leftChild: IntArray, rightChild: IntArray): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool validateBinaryTreeNodes(int n, List<int> leftChild, List<int> rightChild) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validateBinaryTreeNodes(n int, leftChild []int, rightChild []int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} left_child\n# @param {Integer[]} right_child\n# @return {Boolean}\ndef validate_binary_tree_nodes(n, left_child, right_child)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validateBinaryTreeNodes(n: Int, leftChild: Array[Int], rightChild: Array[Int]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn validate_binary_tree_nodes(n: i32, left_child: Vec<i32>, right_child: Vec<i32>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (validate-binary-tree-nodes n leftChild rightChild)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec validate_binary_tree_nodes(N :: integer(), LeftChild :: [integer()], RightChild :: [integer()]) -> boolean().\nvalidate_binary_tree_nodes(N, LeftChild, RightChild) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec validate_binary_tree_nodes(n :: integer, left_child :: [integer], right_child :: [integer]) :: boolean\n  def validate_binary_tree_nodes(n, left_child, right_child) do\n    \n  end\nend"}], "similarQuestionList": []}