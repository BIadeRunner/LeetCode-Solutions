{"question_id": "1283", "problem_slug": "reformat-date", "problem_title": "Reformat Date", "content": "Given a date string in the form Day Month Year, where:\n\nDay is in the set {\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}.\nMonth is in the set {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}.\nYear is in the range [1900, 2100].\n\nConvert the date string to the format YYYY-MM-DD, where:\n\nYYYY denotes the 4 digit year.\nMM denotes the 2 digit month.\nDD denotes the 2 digit day.\n\n \nExample 1:\n\nInput: date = \"20th Oct 2052\"\nOutput: \"2052-10-20\"\n\nExample 2:\n\nInput: date = \"6th Jun 1933\"\nOutput: \"1933-06-06\"\n\nExample 3:\n\nInput: date = \"26th May 1960\"\nOutput: \"1960-05-26\"\n\n \nConstraints:\n\nThe given dates are guaranteed to be valid, so no error handling is necessary.\n\n", "hints": ["Handle the conversions of day, month and year separately.", "Notice that days always have a two-word ending, so if you erase the last two characters of this days you'll get the number."], "exampleTestcases": "\"20th Oct 2052\"\n\"6th Jun 1933\"\n\"26th May 1960\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string reformatDate(string date) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String reformatDate(String date) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reformatDate(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reformatDate(self, date: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* reformatDate(char* date) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ReformatDate(string date) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} date\n * @return {string}\n */\nvar reformatDate = function(date) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reformatDate(date: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $date\n     * @return String\n     */\n    function reformatDate($date) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reformatDate(_ date: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reformatDate(date: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String reformatDate(String date) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reformatDate(date string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} date\n# @return {String}\ndef reformat_date(date)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reformatDate(date: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reformat_date(date: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reformat-date date)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reformat_date(Date :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreformat_date(Date) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reformat_date(date :: String.t) :: String.t\n  def reformat_date(date) do\n    \n  end\nend"}}}