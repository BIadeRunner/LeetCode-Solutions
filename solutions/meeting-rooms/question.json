{"questionId": "252", "acRate": 58.45732873249961, "difficulty": "Easy", "freqBar": 53.06522700952565, "frontendQuestionId": "252", "paidOnly": true, "status": "ac", "title": "Meeting Rooms", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "meeting-rooms", "content": "<p>Given an array of meeting time <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, determine if a person could attend all meetings.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> intervals = [[0,30],[5,10],[15,20]]\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> intervals = [[7,10],[2,4]]\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;&nbsp;end<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[[0,30],[5,10],[15,20]]\n[[7,10],[2,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canAttendMeetings(vector<vector<int>>& intervals) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canAttendMeetings(int[][] intervals) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canAttendMeetings(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canAttendMeetings(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanAttendMeetings(int[][] intervals) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {boolean}\n */\nvar canAttendMeetings = function(intervals) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canAttendMeetings(intervals: number[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Boolean\n     */\n    function canAttendMeetings($intervals) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canAttendMeetings(_ intervals: [[Int]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canAttendMeetings(intervals: Array<IntArray>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canAttendMeetings(List<List<int>> intervals) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canAttendMeetings(intervals [][]int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Boolean}\ndef can_attend_meetings(intervals)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canAttendMeetings(intervals: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_attend_meetings(intervals: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-attend-meetings intervals)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_attend_meetings(Intervals :: [[integer()]]) -> boolean().\ncan_attend_meetings(Intervals) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_attend_meetings(intervals :: [[integer]]) :: boolean\n  def can_attend_meetings(intervals) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "merge-intervals", "title": "Merge Intervals", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "meeting-rooms-ii", "title": "Meeting Rooms II", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "meeting-rooms-iii", "title": "Meeting Rooms III", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "points-that-intersect-with-cars", "title": "Points That Intersect With Cars", "isPaidOnly": false}]}