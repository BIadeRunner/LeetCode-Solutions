{"question_id": "3254", "problem_slug": "number-of-divisible-triplet-sums", "problem_title": "Number of Divisible Triplet Sums", "content": "Given a 0-indexed integer array nums and an integer d, return the number of triplets (i, j, k) such that i < j < k and (nums[i] + nums[j] + nums[k]) % d == 0.\n \nExample 1:\n\nInput: nums = [3,3,4,7,8], d = 5\nOutput: 3\nExplanation: The triplets which are divisible by 5 are: (0, 1, 2), (0, 2, 4), (1, 2, 4).\nIt can be shown that no other triplet is divisible by 5. Hence, the answer is 3.\n\nExample 2:\n\nInput: nums = [3,3,3,3], d = 3\nOutput: 4\nExplanation: Any triplet chosen here has a sum of 9, which is divisible by 3. Hence, the answer is the total number of triplets which is 4.\n\nExample 3:\n\nInput: nums = [3,3,3,3], d = 6\nOutput: 0\nExplanation: Any triplet chosen here has a sum of 9, which is not divisible by 6. Hence, the answer is 0.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 109\n1 <= d <= 109\n\n", "hints": ["Fix index <code>L</code> to be the leftmost element of a triplet.", "Starting from <code>L</code>, go forward and add the remainder of each element to a map.", "Now when you are at index <code>R</code>, consider <code>nums[L] + nums[R]</code> and calculate what the remainder of the third element should be.", "Then use the map to find the number of valid third elements between <code>L</code> and <code>R</code>."], "exampleTestcases": "[3,3,4,7,8]\n5\n[3,3,3,3]\n3\n[3,3,3,3]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int divisibleTripletCount(vector<int>& nums, int d) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int divisibleTripletCount(int[] nums, int d) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def divisibleTripletCount(self, nums, d):\n        \"\"\"\n        :type nums: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def divisibleTripletCount(self, nums: List[int], d: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int divisibleTripletCount(int* nums, int numsSize, int d) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DivisibleTripletCount(int[] nums, int d) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} d\n * @return {number}\n */\nvar divisibleTripletCount = function(nums, d) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function divisibleTripletCount(nums: number[], d: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $d\n     * @return Integer\n     */\n    function divisibleTripletCount($nums, $d) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func divisibleTripletCount(_ nums: [Int], _ d: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun divisibleTripletCount(nums: IntArray, d: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int divisibleTripletCount(List<int> nums, int d) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func divisibleTripletCount(nums []int, d int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} d\n# @return {Integer}\ndef divisible_triplet_count(nums, d)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def divisibleTripletCount(nums: Array[Int], d: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn divisible_triplet_count(nums: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (divisible-triplet-count nums d)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec divisible_triplet_count(Nums :: [integer()], D :: integer()) -> integer().\ndivisible_triplet_count(Nums, D) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec divisible_triplet_count(nums :: [integer], d :: integer) :: integer\n  def divisible_triplet_count(nums, d) do\n    \n  end\nend"}}}