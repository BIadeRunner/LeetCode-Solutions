{"question_id": "1053", "problem_slug": "minimize-rounding-error-to-meet-target", "problem_title": "Minimize Rounding Error to Meet Target", "content": "Given an array of prices [p1,p2...,pn] and a target, round each price pi to Roundi(pi) so that the rounded array [Round1(p1),Round2(p2)...,Roundn(pn)] sums to the given target. Each operation Roundi(pi) could be either Floor(pi) or Ceil(pi).\nReturn the string \"-1\" if the rounded array is impossible to sum to target. Otherwise, return the smallest rounding error, which is defined as Σ |Roundi(pi) - (pi)| for i from 1 to n, as a string with three places after the decimal.\n \nExample 1:\n\nInput: prices = [\"0.700\",\"2.800\",\"4.900\"], target = 8\nOutput: \"1.000\"\nExplanation:\nUse Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .\n\nExample 2:\n\nInput: prices = [\"1.500\",\"2.500\",\"3.500\"], target = 10\nOutput: \"-1\"\nExplanation: It is impossible to meet the target.\n\nExample 3:\n\nInput: prices = [\"1.500\",\"2.500\",\"3.500\"], target = 9\nOutput: \"1.500\"\n\n \nConstraints:\n\n1 <= prices.length <= 500\nEach string prices[i] represents a real number in the range [0.0, 1000.0] and has exactly 3 decimal places.\n0 <= target <= 106\n\n", "hints": ["If we have integer values in the array then we just need to subtract the target those integer values, so we reduced the problem.", "Similarly if we have non integer values we have two options to put them flor(value) or ceil(value) = floor(value) + 1, so the idea is to just subtract floor(value).", "Now the problem is different for each position we can sum just add 0 or 1 in order to sum the target, minimizing the deltas. This can be solved with DP."], "exampleTestcases": "[\"0.700\",\"2.800\",\"4.900\"]\n8\n[\"1.500\",\"2.500\",\"3.500\"]\n10\n[\"1.500\",\"2.500\",\"3.500\"]\n9", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string minimizeError(vector<string>& prices, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String minimizeError(String[] prices, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizeError(self, prices, target):\n        \"\"\"\n        :type prices: List[str]\n        :type target: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizeError(self, prices: List[str], target: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* minimizeError(char** prices, int pricesSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string MinimizeError(string[] prices, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} prices\n * @param {number} target\n * @return {string}\n */\nvar minimizeError = function(prices, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizeError(prices: string[], target: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $prices\n     * @param Integer $target\n     * @return String\n     */\n    function minimizeError($prices, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizeError(_ prices: [String], _ target: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizeError(prices: Array<String>, target: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String minimizeError(List<String> prices, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizeError(prices []string, target int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} prices\n# @param {Integer} target\n# @return {String}\ndef minimize_error(prices, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizeError(prices: Array[String], target: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_error(prices: Vec<String>, target: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimize-error prices target)\n  (-> (listof string?) exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimize_error(Prices :: [unicode:unicode_binary()], Target :: integer()) -> unicode:unicode_binary().\nminimize_error(Prices, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_error(prices :: [String.t], target :: integer) :: String.t\n  def minimize_error(prices, target) do\n    \n  end\nend"}}}