{"questionId": "1272", "acRate": 31.048407352878666, "difficulty": "Medium", "freqBar": 33.453696781111006, "frontendQuestionId": "1169", "paidOnly": false, "status": "ac", "title": "Invalid Transactions", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "invalid-transactions", "content": "<p>A transaction is possibly invalid if:</p>\n\n<ul>\n\t<li>the amount exceeds <code>$1000</code>, or;</li>\n\t<li>if it occurs within (and including) <code>60</code> minutes of another transaction with the <strong>same name</strong> in a <strong>different city</strong>.</li>\n</ul>\n\n<p>You are given an array of strings <code>transaction</code> where <code>transactions[i]</code> consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.</p>\n\n<p>Return a list of <code>transactions</code> that are possibly invalid. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]\n<strong>Output:</strong> [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]\n<strong>Explanation:</strong> The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;alice,50,1200,mtv&quot;]\n<strong>Output:</strong> [&quot;alice,50,1200,mtv&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> transactions = [&quot;alice,20,800,mtv&quot;,&quot;bob,50,1200,mtv&quot;]\n<strong>Output:</strong> [&quot;bob,50,1200,mtv&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>transactions.length &lt;= 1000</code></li>\n\t<li>Each <code>transactions[i]</code> takes the form <code>&quot;{name},{time},{amount},{city}&quot;</code></li>\n\t<li>Each <code>{name}</code> and <code>{city}</code> consist of lowercase English letters, and have lengths between <code>1</code> and <code>10</code>.</li>\n\t<li>Each <code>{time}</code> consist of digits, and represent an integer between <code>0</code> and <code>1000</code>.</li>\n\t<li>Each <code>{amount}</code> consist of digits, and represent an integer between <code>0</code> and <code>2000</code>.</li>\n</ul>\n", "hints": ["Split each string into four arrays.", "For each transaction check if it's invalid, you can do this with just a loop with help of the four arrays generated on step 1.", "At the end you perform O(N ^ 2) operations."], "exampleTestcases": "[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n[\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\n[\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> invalidTransactions(vector<string>& transactions) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> invalidTransactions(String[] transactions) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def invalidTransactions(self, transactions):\n        \"\"\"\n        :type transactions: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** invalidTransactions(char** transactions, int transactionsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> InvalidTransactions(string[] transactions) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} transactions\n * @return {string[]}\n */\nvar invalidTransactions = function(transactions) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function invalidTransactions(transactions: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $transactions\n     * @return String[]\n     */\n    function invalidTransactions($transactions) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func invalidTransactions(_ transactions: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun invalidTransactions(transactions: Array<String>): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> invalidTransactions(List<String> transactions) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func invalidTransactions(transactions []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} transactions\n# @return {String[]}\ndef invalid_transactions(transactions)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def invalidTransactions(transactions: Array[String]): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn invalid_transactions(transactions: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (invalid-transactions transactions)\n  (-> (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec invalid_transactions(Transactions :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\ninvalid_transactions(Transactions) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec invalid_transactions(transactions :: [String.t]) :: [String.t]\n  def invalid_transactions(transactions) do\n    \n  end\nend"}], "similarQuestionList": []}