{"question_id": "1098", "problem_slug": "largest-unique-number", "problem_title": "Largest Unique Number", "content": "Given an integer array nums, return the largest integer that only occurs once. If no integer occurs once, return -1.\n \nExample 1:\n\nInput: nums = [5,7,3,9,4,9,8,3,1]\nOutput: 8\nExplanation: The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer.\nExample 2:\n\nInput: nums = [9,9,8,8]\nOutput: -1\nExplanation: There is no number that occurs only once.\n\n \nConstraints:\n\n1 <= nums.length <= 2000\n0 <= nums[i] <= 1000\n\n", "hints": ["Find the number of occurrences of each value.", "Use an array or a hash table to do that.", "Look for the largest value with number of occurrences = 1."], "exampleTestcases": "[5,7,3,9,4,9,8,3,1]\n[9,9,8,8]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestUniqueNumber(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int largestUniqueNumber(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestUniqueNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestUniqueNumber(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int largestUniqueNumber(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestUniqueNumber(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar largestUniqueNumber = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestUniqueNumber(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function largestUniqueNumber($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestUniqueNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestUniqueNumber(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int largestUniqueNumber(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestUniqueNumber(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef largest_unique_number(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestUniqueNumber(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_unique_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-unique-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_unique_number(Nums :: [integer()]) -> integer().\nlargest_unique_number(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_unique_number(nums :: [integer]) :: integer\n  def largest_unique_number(nums) do\n    \n  end\nend"}}}