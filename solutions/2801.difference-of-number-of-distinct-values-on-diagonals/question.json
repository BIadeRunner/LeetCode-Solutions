{"question_id": "2801", "problem_slug": "difference-of-number-of-distinct-values-on-diagonals", "problem_title": "Difference of Number of Distinct Values on Diagonals", "content": "Given a 2D grid of size m x n, you should find the matrix answer of size m x n.\nThe cell answer[r][c] is calculated by looking at the diagonal values of the cell grid[r][c]:\n\nLet leftAbove[r][c] be the number of distinct values on the diagonal to the left and above the cell grid[r][c] not including the cell grid[r][c] itself.\nLet rightBelow[r][c] be the number of distinct values on the diagonal to the right and below the cell grid[r][c], not including the cell grid[r][c] itself.\nThen answer[r][c] = |leftAbove[r][c] - rightBelow[r][c]|.\n\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached.\n\nFor example, in the below diagram the diagonal is highlighted using the cell with indices (2, 3) colored gray:\n\n\t\nRed-colored cells are left and above the cell.\nBlue-colored cells are right and below the cell.\n\n\n\n\nReturn the matrix answer.\n \nExample 1:\n\nInput: grid = [[1,2,3],[3,1,5],[3,2,1]]\nOutput: Output: [[1,1,0],[1,0,1],[0,1,1]]\nExplanation:\nTo calculate the answer cells:\n\n\n\nanswer\nleft-above elements\nleftAbove\nright-below elements\nrightBelow\n|leftAbove - rightBelow|\n\n\n\n\n[0][0]\n[]\n0\n[grid[1][1], grid[2][2]]\n|{1, 1}| = 1\n1\n\n\n[0][1]\n[]\n0\n[grid[1][2]]\n|{5}| = 1\n1\n\n\n[0][2]\n[]\n0\n[]\n0\n0\n\n\n[1][0]\n[]\n0\n[grid[2][1]]\n|{2}| = 1\n1\n\n\n[1][1]\n[grid[0][0]]\n|{1}| = 1\n[grid[2][2]]\n|{1}| = 1\n0\n\n\n[1][2]\n[grid[0][1]]\n|{2}| = 1\n[]\n0\n1\n\n\n[2][0]\n[]\n0\n[]\n0\n0\n\n\n[2][1]\n[grid[1][0]]\n|{3}| = 1\n[]\n0\n1\n\n\n[2][2]\n[grid[0][0], grid[1][1]]\n|{1, 1}| = 1\n[]\n0\n1\n\n\n\n\nExample 2:\n\nInput: grid = [[1]]\nOutput: Output: [[0]]\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n, grid[i][j] <= 50\n\n", "hints": ["Use the set to count the number of distinct elements on diagonals."], "exampleTestcases": "[[1,2,3],[3,1,5],[3,2,1]]\n[[1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> differenceOfDistinctValues(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] differenceOfDistinctValues(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def differenceOfDistinctValues(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** differenceOfDistinctValues(int** grid, int gridSize, int* gridColSize, int* returnSize, int** returnColumnSizes){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] DifferenceOfDistinctValues(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar differenceOfDistinctValues = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function differenceOfDistinctValues(grid: number[][]): number[][] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function differenceOfDistinctValues($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func differenceOfDistinctValues(_ grid: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun differenceOfDistinctValues(grid: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> differenceOfDistinctValues(List<List<int>> grid) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func differenceOfDistinctValues(grid [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer[][]}\ndef difference_of_distinct_values(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def differenceOfDistinctValues(grid: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn difference_of_distinct_values(grid: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (difference-of-distinct-values grid)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec difference_of_distinct_values(Grid :: [[integer()]]) -> [[integer()]].\ndifference_of_distinct_values(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec difference_of_distinct_values(grid :: [[integer]]) :: [[integer]]\n  def difference_of_distinct_values(grid) do\n    \n  end\nend"}}}