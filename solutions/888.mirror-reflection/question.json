{"question_id": "888", "problem_slug": "mirror-reflection", "problem_title": "Mirror Reflection", "content": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n \nExample 1:\n\n\nInput: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n\nExample 2:\n\nInput: p = 3, q = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= q <= p <= 1000\n\n", "hints": [], "exampleTestcases": "2\n1\n3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int mirrorReflection(int p, int q) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int mirrorReflection(int p, int q) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MirrorReflection(int p, int q) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar mirrorReflection = function(p, q) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mirrorReflection(p: number, q: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $p\n     * @param Integer $q\n     * @return Integer\n     */\n    function mirrorReflection($p, $q) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mirrorReflection(_ p: Int, _ q: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mirrorReflection(p: Int, q: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int mirrorReflection(int p, int q) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mirrorReflection(p int, q int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} p\n# @param {Integer} q\n# @return {Integer}\ndef mirror_reflection(p, q)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mirrorReflection(p: Int, q: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn mirror_reflection(p: i32, q: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (mirror-reflection p q)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec mirror_reflection(P :: integer(), Q :: integer()) -> integer().\nmirror_reflection(P, Q) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec mirror_reflection(p :: integer, q :: integer) :: integer\n  def mirror_reflection(p, q) do\n    \n  end\nend"}}}