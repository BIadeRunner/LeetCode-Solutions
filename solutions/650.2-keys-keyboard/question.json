{"question_id": "650", "problem_slug": "2-keys-keyboard", "problem_title": "2 Keys Keyboard", "content": "There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n\nCopy All: You can copy all the characters present on the screen (a partial copy is not allowed).\nPaste: You can paste the characters which are copied last time.\n\nGiven an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.\n \nExample 1:\n\nInput: n = 3\nOutput: 3\nExplanation: Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n\nExample 2:\n\nInput: n = 1\nOutput: 0\n\n \nConstraints:\n\n1 <= n <= 1000\n\n", "hints": ["How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"], "exampleTestcases": "3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSteps(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minSteps(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSteps(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSteps(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minSteps(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinSteps(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar minSteps = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSteps(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minSteps($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSteps(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSteps(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minSteps(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSteps(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef min_steps(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSteps(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_steps(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-steps n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_steps(N :: integer()) -> integer().\nmin_steps(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_steps(n :: integer) :: integer\n  def min_steps(n) do\n    \n  end\nend"}}}