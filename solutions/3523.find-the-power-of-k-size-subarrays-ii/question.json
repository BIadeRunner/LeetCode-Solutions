{"question_id": "3523", "problem_slug": "find-the-power-of-k-size-subarrays-ii", "problem_title": "Find the Power of K-Size Subarrays II", "content": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\n\nIts maximum element if all of its elements are consecutive and sorted in ascending order.\n-1 otherwise.\n\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\n \nExample 1:\n\nInput: nums = [1,2,3,4,3,2,5], k = 3\nOutput: [3,4,-1,-1,-1]\nExplanation:\nThere are 5 subarrays of nums of size 3:\n\n[1, 2, 3] with the maximum element 3.\n[2, 3, 4] with the maximum element 4.\n[3, 4, 3] whose elements are not consecutive.\n[4, 3, 2] whose elements are not sorted.\n[3, 2, 5] whose elements are not consecutive.\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2], k = 4\nOutput: [-1,-1]\n\nExample 3:\n\nInput: nums = [3,2,3,2,3,2], k = 2\nOutput: [-1,3,-1,3,-1]\n\n \nConstraints:\n\n1 <= n == nums.length <= 105\n1 <= nums[i] <= 106\n1 <= k <= n\n\n", "hints": ["Let <code>dp[i]</code> denote the length of the longest subarray ending at index <code>i</code> that has consecutive and sorted elements.", "Use a TreeMap with a sliding window to check if there are <code>k</code> elements in the subarray ending at index <code>i</code>.", "If TreeMap has less than <code>k</code> elements and <code>dp[i] < k</code>, the subarray has power equal to -1.", "Is it possible to achieve <code>O(nums.length)</code> using a Stack?"], "exampleTestcases": "[1,2,3,4,3,2,5]\n3\n[2,2,2,2,2]\n4\n[3,2,3,2,3,2]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> resultsArray(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] resultsArray(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def resultsArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultsArray(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ResultsArray(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar resultsArray = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function resultsArray(nums: number[], k: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function resultsArray($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func resultsArray(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun resultsArray(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> resultsArray(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func resultsArray(nums []int, k int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef results_array(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def resultsArray(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn results_array(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (results-array nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec results_array(Nums :: [integer()], K :: integer()) -> [integer()].\nresults_array(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec results_array(nums :: [integer], k :: integer) :: [integer]\n  def results_array(nums, k) do\n    \n  end\nend"}}}