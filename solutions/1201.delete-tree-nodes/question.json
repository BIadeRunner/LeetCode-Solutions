{"question_id": "1201", "problem_slug": "delete-tree-nodes", "problem_title": "Delete Tree Nodes", "content": "A tree rooted at node 0 is given as follows:\n\nThe number of nodes is nodes;\nThe value of the ith node is value[i];\nThe parent of the ith node is parent[i].\n\nRemove every subtree whose sum of values of nodes is zero.\nReturn the number of the remaining nodes in the tree.\n \nExample 1:\n\n\nInput: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]\nOutput: 2\n\nExample 2:\n\nInput: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]\nOutput: 6\n\n \nConstraints:\n\n1 <= nodes <= 104\nparent.length == nodes\n0 <= parent[i] <= nodes - 1\nparent[0] == -1 which indicates that 0 is the root.\nvalue.length == nodes\n-105 <= value[i] <= 105\nThe given input is guaranteed to represent a valid tree.\n\n", "hints": ["Traverse the tree using depth first search.", "Find for every node the sum of values of its sub-tree.", "Traverse the tree again from the root and return once you reach a node with zero sum of values in its sub-tree."], "exampleTestcases": "7\n[-1,0,0,1,2,2,2]\n[1,-2,4,0,-2,-1,-1]\n7\n[-1,0,0,1,2,2,2]\n[1,-2,4,0,-2,-1,-2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int deleteTreeNodes(int nodes, vector<int>& parent, vector<int>& value) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int deleteTreeNodes(int nodes, int[] parent, int[] value) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def deleteTreeNodes(self, nodes, parent, value):\n        \"\"\"\n        :type nodes: int\n        :type parent: List[int]\n        :type value: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def deleteTreeNodes(self, nodes: int, parent: List[int], value: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int deleteTreeNodes(int nodes, int* parent, int parentSize, int* value, int valueSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DeleteTreeNodes(int nodes, int[] parent, int[] value) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} nodes\n * @param {number[]} parent\n * @param {number[]} value\n * @return {number}\n */\nvar deleteTreeNodes = function(nodes, parent, value) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function deleteTreeNodes(nodes: number, parent: number[], value: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $nodes\n     * @param Integer[] $parent\n     * @param Integer[] $value\n     * @return Integer\n     */\n    function deleteTreeNodes($nodes, $parent, $value) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func deleteTreeNodes(_ nodes: Int, _ parent: [Int], _ value: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun deleteTreeNodes(nodes: Int, parent: IntArray, value: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int deleteTreeNodes(int nodes, List<int> parent, List<int> value) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func deleteTreeNodes(nodes int, parent []int, value []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} nodes\n# @param {Integer[]} parent\n# @param {Integer[]} value\n# @return {Integer}\ndef delete_tree_nodes(nodes, parent, value)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def deleteTreeNodes(nodes: Int, parent: Array[Int], value: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn delete_tree_nodes(nodes: i32, parent: Vec<i32>, value: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (delete-tree-nodes nodes parent value)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec delete_tree_nodes(Nodes :: integer(), Parent :: [integer()], Value :: [integer()]) -> integer().\ndelete_tree_nodes(Nodes, Parent, Value) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec delete_tree_nodes(nodes :: integer, parent :: [integer], value :: [integer]) :: integer\n  def delete_tree_nodes(nodes, parent, value) do\n    \n  end\nend"}}}