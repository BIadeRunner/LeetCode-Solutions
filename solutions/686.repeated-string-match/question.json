{"question_id": "686", "problem_slug": "repeated-string-match", "problem_title": "Repeated String Match", "content": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\n \nExample 1:\n\nInput: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\n\nExample 2:\n\nInput: a = \"a\", b = \"aa\"\nOutput: 2\n\n \nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"abcd\"\n\"cdabcdab\"\n\"a\"\n\"aa\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int repeatedStringMatch(String a, String b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def repeatedStringMatch(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int repeatedStringMatch(char* a, char* b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int RepeatedStringMatch(string a, string b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar repeatedStringMatch = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function repeatedStringMatch(a: string, b: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return Integer\n     */\n    function repeatedStringMatch($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func repeatedStringMatch(_ a: String, _ b: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun repeatedStringMatch(a: String, b: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int repeatedStringMatch(String a, String b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func repeatedStringMatch(a string, b string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef repeated_string_match(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def repeatedStringMatch(a: String, b: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn repeated_string_match(a: String, b: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (repeated-string-match a b)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec repeated_string_match(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> integer().\nrepeated_string_match(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec repeated_string_match(a :: String.t, b :: String.t) :: integer\n  def repeated_string_match(a, b) do\n    \n  end\nend"}}}