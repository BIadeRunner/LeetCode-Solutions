{"question_id": "1189", "problem_slug": "encode-number", "problem_title": "Encode Number", "content": "Given a non-negative integer num, Return its encoding string.\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:\n\n \nExample 1:\n\r\nInput: num = 23\r\nOutput: \"1000\"\r\n\nExample 2:\n\r\nInput: num = 107\r\nOutput: \"101100\"\r\n\n \nConstraints:\n\n0 <= num <= 10^9\n", "hints": ["Try to find the number of binary digits returned by the function.", "The pattern is to start counting from zero after determining the number of binary digits."], "exampleTestcases": "23\n107", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string encode(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String encode(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def encode(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def encode(self, num: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "\n\nchar * encode(int num){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string Encode(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar encode = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function encode(num: number): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function encode($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func encode(_ num: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun encode(num: Int): String {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func encode(num int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String}\ndef encode(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def encode(num: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn encode(num: i32) -> String {\n        \n    }\n}"}}}