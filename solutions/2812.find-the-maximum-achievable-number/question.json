{"question_id": "2812", "problem_slug": "find-the-maximum-achievable-number", "problem_title": "Find the Maximum Achievable Number", "content": "Given two integers, num and t. A number is achievable if it can become equal to num after applying the following operation:\n\nIncrease or decrease the number by 1, and simultaneously increase or decrease num by 1.\n\nReturn the maximum achievable number after applying the operation at most t times.\n \nExample 1:\n\nInput: num = 4, t = 1\nOutput: 6\nExplanation:\nApply the following operation once to make the maximum achievable number equal to num:\n\nDecrease the maximum achievable number by 1, and increase num by 1.\n\n\nExample 2:\n\nInput: num = 3, t = 2\nOutput: 7\nExplanation:\nApply the following operation twice to make the maximum achievable number equal to num:\n\nDecrease the maximum achievable number by 1, and increase num by 1.\n\n\n \nConstraints:\n\n1 <= num, t <= 50\n\n", "hints": ["Let x be the answer, it’s always optimal to decrease x in each operation and increase nums."], "exampleTestcases": "4\n1\n3\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int theMaximumAchievableX(int num, int t) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int theMaximumAchievableX(int num, int t) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def theMaximumAchievableX(self, num, t):\n        \"\"\"\n        :type num: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int theMaximumAchievableX(int num, int t){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TheMaximumAchievableX(int num, int t) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @param {number} t\n * @return {number}\n */\nvar theMaximumAchievableX = function(num, t) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function theMaximumAchievableX(num: number, t: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $t\n     * @return Integer\n     */\n    function theMaximumAchievableX($num, $t) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func theMaximumAchievableX(_ num: Int, _ t: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun theMaximumAchievableX(num: Int, t: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int theMaximumAchievableX(int num, int t) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func theMaximumAchievableX(num int, t int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @param {Integer} t\n# @return {Integer}\ndef the_maximum_achievable_x(num, t)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def theMaximumAchievableX(num: Int, t: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn the_maximum_achievable_x(num: i32, t: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (the-maximum-achievable-x num t)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec the_maximum_achievable_x(Num :: integer(), T :: integer()) -> integer().\nthe_maximum_achievable_x(Num, T) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec the_maximum_achievable_x(num :: integer, t :: integer) :: integer\n  def the_maximum_achievable_x(num, t) do\n    \n  end\nend"}}}