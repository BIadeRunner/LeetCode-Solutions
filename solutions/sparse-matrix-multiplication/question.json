{"questionId": "311", "acRate": 68.33442780157813, "difficulty": "Medium", "freqBar": 57.859640000523385, "frontendQuestionId": "311", "paidOnly": true, "status": "ac", "title": "Sparse Matrix Multiplication", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "sparse-matrix-multiplication", "content": "<p>Given two <a href=\"https://en.wikipedia.org/wiki/Sparse_matrix\" target=\"_blank\">sparse matrices</a> <code>mat1</code> of size <code>m x k</code> and <code>mat2</code> of size <code>k x n</code>, return the result of <code>mat1 x mat2</code>. You may assume that multiplication is always possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/mult-grid.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]\n<strong>Output:</strong> [[7,0,0],[-7,0,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat1 = [[0]], mat2 = [[0]]\n<strong>Output:</strong> [[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat1.length</code></li>\n\t<li><code>k == mat1[i].length == mat2.length</code></li>\n\t<li><code>n == mat2[i].length</code></li>\n\t<li><code>1 &lt;= m, n, k &lt;= 100</code></li>\n\t<li><code>-100 &lt;= mat1[i][j], mat2[i][j] &lt;= 100</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[[1,0,0],[-1,0,3]]\n[[7,0,0],[0,0,0],[0,0,1]]\n[[0]]\n[[0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> multiply(vector<vector<int>>& mat1, vector<vector<int>>& mat2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] multiply(int[][] mat1, int[][] mat2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def multiply(self, mat1, mat2):\n        \"\"\"\n        :type mat1: List[List[int]]\n        :type mat2: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** multiply(int** mat1, int mat1Size, int* mat1ColSize, int** mat2, int mat2Size, int* mat2ColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] Multiply(int[][] mat1, int[][] mat2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} mat1\n * @param {number[][]} mat2\n * @return {number[][]}\n */\nvar multiply = function(mat1, mat2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function multiply(mat1: number[][], mat2: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat1\n     * @param Integer[][] $mat2\n     * @return Integer[][]\n     */\n    function multiply($mat1, $mat2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func multiply(_ mat1: [[Int]], _ mat2: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun multiply(mat1: Array<IntArray>, mat2: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> multiply(List<List<int>> mat1, List<List<int>> mat2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func multiply(mat1 [][]int, mat2 [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} mat1\n# @param {Integer[][]} mat2\n# @return {Integer[][]}\ndef multiply(mat1, mat2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def multiply(mat1: Array[Array[Int]], mat2: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn multiply(mat1: Vec<Vec<i32>>, mat2: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (multiply mat1 mat2)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec multiply(Mat1 :: [[integer()]], Mat2 :: [[integer()]]) -> [[integer()]].\nmultiply(Mat1, Mat2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec multiply(mat1 :: [[integer]], mat2 :: [[integer]]) :: [[integer]]\n  def multiply(mat1, mat2) do\n    \n  end\nend"}], "similarQuestionList": []}