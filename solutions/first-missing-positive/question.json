{"questionId": "41", "acRate": 40.058837037163705, "difficulty": "Hard", "freqBar": 81.33903191300037, "frontendQuestionId": "41", "paidOnly": false, "status": "ac", "title": "First Missing Positive", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}], "titleSlug": "first-missing-positive", "content": "<p>Given an unsorted integer array <code>nums</code>. Return the <em>smallest positive integer</em> that is <em>not present</em> in <code>nums</code>.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "hints": ["Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?", "We don't care about duplicates or non-positive integers", "Remember that O(2n) = O(n)"], "exampleTestcases": "[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int firstMissingPositive(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function firstMissingPositive(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int firstMissingPositive(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func firstMissingPositive(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (first-missing-positive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec first_missing_positive(Nums :: [integer()]) -> integer().\nfirst_missing_positive(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "missing-number", "title": "Missing Number", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-duplicate-number", "title": "Find the Duplicate Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-all-numbers-disappeared-in-an-array", "title": "Find All Numbers Disappeared in an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "couples-holding-hands", "title": "Couples Holding Hands", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "smallest-number-in-infinite-set", "title": "Smallest Number in Infinite Set", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i", "title": "Maximum Number of Integers to Choose From a Range I", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "smallest-missing-non-negative-integer-after-operations", "title": "Smallest Missing Non-negative Integer After Operations", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii", "title": "Maximum Number of Integers to Choose From a Range II", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "smallest-missing-integer-greater-than-sequential-prefix-sum", "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum", "isPaidOnly": false}]}