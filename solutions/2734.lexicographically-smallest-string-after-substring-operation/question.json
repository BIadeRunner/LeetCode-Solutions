{"questionId": "2828", "acRate": 32.01335611466604, "difficulty": "Medium", "freqBar": 62.66917258980861, "frontendQuestionId": "2734", "paidOnly": false, "status": "ac", "title": "Lexicographically Smallest String After Substring Operation", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "lexicographically-smallest-string-after-substring-operation", "content": "<p>Given a string <code>s</code> consisting of lowercase English letters. Perform the following operation:</p>\n\n<ul>\n\t<li>Select any non-empty <span data-keyword=\"substring-nonempty\">substring</span> then replace every letter of the substring with the preceding letter of the English alphabet. For example, &#39;b&#39; is converted to &#39;a&#39;, and &#39;a&#39; is converted to &#39;z&#39;.</li>\n</ul>\n\n<p>Return the <span data-keyword=\"lexicographically-smaller-string\"><strong>lexicographically smallest</strong></span> string <strong>after performing the operation</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cbabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;baabc&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Perform the operation on the substring starting at index 0, and ending at index 1 inclusive.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;az&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Perform the operation on the last letter.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;acbbc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;abaab&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Perform the operation on the substring starting at index 1, and ending at index 4 inclusive.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;kddsbncd&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Perform the operation on the entire string.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters</li>\n</ul>\n", "hints": ["When a character is replaced by the one that comes before it on the alphabet, it makes the string lexicographically smaller, except for \u2018a'.", "Find the leftmost substring that doesn\u2019t contain the character 'a' and change all characters in it."], "exampleTestcases": "\"cbabc\"\n\"aa\"\n\"acbbc\"\n\"leetcode\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestString(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String smallestString(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestString(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* smallestString(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string SmallestString(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar smallestString = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestString(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function smallestString($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestString(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestString(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String smallestString(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestString(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef smallest_string(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestString(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_string(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (smallest-string s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_string(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_string(s :: String.t) :: String.t\n  def smallest_string(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "shifting-letters", "title": "Shifting Letters", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "lexicographically-smallest-string-after-applying-operations", "title": "Lexicographically Smallest String After Applying Operations", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "lexicographically-smallest-string-after-operations-with-constraint", "title": "Lexicographically Smallest String After Operations With Constraint", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "replace-question-marks-in-string-to-minimize-its-value", "title": "Replace Question Marks in String to Minimize Its Value", "isPaidOnly": false}]}