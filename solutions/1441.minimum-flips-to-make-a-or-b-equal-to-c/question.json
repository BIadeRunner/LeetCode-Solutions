{"question_id": "1441", "problem_slug": "minimum-flips-to-make-a-or-b-equal-to-c", "problem_title": "Minimum Flips to Make a OR b Equal to c", "content": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).\r\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\n \nExample 1:\n\n\r\nInput: a = 2, b = 6, c = 5\r\nOutput: 3\r\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)\nExample 2:\n\r\nInput: a = 4, b = 2, c = 7\r\nOutput: 1\r\n\nExample 3:\n\r\nInput: a = 1, b = 2, c = 3\r\nOutput: 0\r\n\n \nConstraints:\n\n1 <= a <= 10^9\n1 <= b <= 10^9\n1 <= c <= 10^9\n", "hints": ["Check the bits one by one whether they need to be flipped."], "exampleTestcases": "2\n6\n5\n4\n2\n7\n1\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFlips(int a, int b, int c) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minFlips(int a, int b, int c) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minFlips(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint minFlips(int a, int b, int c){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinFlips(int a, int b, int c) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar minFlips = function(a, b, c) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minFlips(a: number, b: number, c: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer\n     */\n    function minFlips($a, $b, $c) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minFlips(_ a: Int, _ b: Int, _ c: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minFlips(a: Int, b: Int, c: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func minFlips(a int, b int, c int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer}\ndef min_flips(a, b, c)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minFlips(a: Int, b: Int, c: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_flips(a: i32, b: i32, c: i32) -> i32 {\n        \n    }\n}"}}}