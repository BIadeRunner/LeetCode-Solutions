{"questionId": "760", "acRate": 51.682365183979506, "difficulty": "Medium", "freqBar": 40.97205529817753, "frontendQuestionId": "758", "paidOnly": true, "status": "ac", "title": "Bold Words in String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Trie", "id": "VG9waWNUYWdOb2RlOjI3", "slug": "trie"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}], "titleSlug": "bold-words-in-string", "content": "<p>Given an array of keywords <code>words</code> and a string <code>s</code>, make all appearances of all keywords <code>words[i]</code> in <code>s</code> bold. Any letters between <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> tags become bold.</p>\n\n<p>Return <code>s</code> <em>after adding the bold tags</em>. The returned string should use the least number of tags possible, and the tags should form a valid combination.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;ab&quot;,&quot;bc&quot;], s = &quot;aabcd&quot;\n<strong>Output:</strong> &quot;a&lt;b&gt;abc&lt;/b&gt;d&quot;\n<strong>Explanation:</strong> Note that returning <code>&quot;a&lt;b&gt;a&lt;b&gt;b&lt;/b&gt;c&lt;/b&gt;d&quot;</code> would use more tags, so it is incorrect.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;ab&quot;,&quot;cb&quot;], s = &quot;aabcd&quot;\n<strong>Output:</strong> &quot;a&lt;b&gt;ab&lt;/b&gt;cd&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as <a href=\"https://leetcode.com/problems/add-bold-tag-in-string/description/\" target=\"_blank\">616. Add Bold Tag in String</a>.</p>\n", "hints": ["First, determine which letters are bold and store that information in mask[i] = if i-th character is bold.\r\nThen, insert the tags at the beginning and end of groups.  The start of a group is if and only if (mask[i] and (i == 0 or not mask[i-1])), and the end of a group is similar."], "exampleTestcases": "[\"ab\",\"bc\"]\n\"aabcd\"\n[\"ab\",\"cb\"]\n\"aabcd\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string boldWords(vector<string>& words, string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String boldWords(String[] words, String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def boldWords(self, words, s):\n        \"\"\"\n        :type words: List[str]\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def boldWords(self, words: List[str], s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* boldWords(char** words, int wordsSize, char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string BoldWords(string[] words, string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} s\n * @return {string}\n */\nvar boldWords = function(words, s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function boldWords(words: string[], s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $s\n     * @return String\n     */\n    function boldWords($words, $s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func boldWords(_ words: [String], _ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun boldWords(words: Array<String>, s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String boldWords(List<String> words, String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func boldWords(words []string, s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} s\n# @return {String}\ndef bold_words(words, s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def boldWords(words: Array[String], s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn bold_words(words: Vec<String>, s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (bold-words words s)\n  (-> (listof string?) string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec bold_words(Words :: [unicode:unicode_binary()], S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nbold_words(Words, S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec bold_words(words :: [String.t], s :: String.t) :: String.t\n  def bold_words(words, s) do\n    \n  end\nend"}], "similarQuestionList": []}