{"questionId": "1103", "acRate": 49.0994289061356, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1033", "paidOnly": false, "status": "ac", "title": "Moving Stones Until Consecutive", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Brainteaser", "id": "VG9waWNUYWdOb2RlOjMy", "slug": "brainteaser"}], "titleSlug": "moving-stones-until-consecutive", "content": "<p>There are three stones in different positions on the X-axis. You are given three integers <code>a</code>, <code>b</code>, and <code>c</code>, the positions of the stones.</p>\n\n<p>In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let&#39;s say the stones are currently at positions <code>x</code>, <code>y</code>, and <code>z</code> with <code>x &lt; y &lt; z</code>. You pick up the stone at either position <code>x</code> or position <code>z</code>, and move that stone to an integer position <code>k</code>, with <code>x &lt; k &lt; z</code> and <code>k != y</code>.</p>\n\n<p>The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of length </em><code>2</code><em> where</em>:</p>\n\n<ul>\n\t<li><code>answer[0]</code> <em>is the minimum number of moves you can play, and</em></li>\n\t<li><code>answer[1]</code> <em>is the maximum number of moves you can play</em>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = 2, c = 5\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 4, b = 3, c = 2\n<strong>Output:</strong> [0,0]\n<strong>Explanation:</strong> We cannot make any moves.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 3, b = 5, c = 1\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a, b, c &lt;= 100</code></li>\n\t<li><code>a</code>, <code>b</code>, and <code>c</code> have different values.</li>\n</ul>\n", "hints": ["For the minimum:  We can always do it in at most 2 moves, by moving one stone next to another, then the third stone next to the other two.  When can we do it in 1 move?  0 moves?\r\n\r\nFor the maximum:  Every move, the maximum position minus the minimum position must decrease by at least 1."], "exampleTestcases": "1\n2\n5\n4\n3\n2\n3\n5\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> numMovesStones(int a, int b, int c) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] numMovesStones(int a, int b, int c) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numMovesStones(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numMovesStones(int a, int b, int c, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] NumMovesStones(int a, int b, int c) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number[]}\n */\nvar numMovesStones = function(a, b, c) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numMovesStones(a: number, b: number, c: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer[]\n     */\n    function numMovesStones($a, $b, $c) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numMovesStones(_ a: Int, _ b: Int, _ c: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numMovesStones(a: Int, b: Int, c: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> numMovesStones(int a, int b, int c) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numMovesStones(a int, b int, c int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer[]}\ndef num_moves_stones(a, b, c)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numMovesStones(a: Int, b: Int, c: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_moves_stones(a: i32, b: i32, c: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-moves-stones a b c)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_moves_stones(A :: integer(), B :: integer(), C :: integer()) -> [integer()].\nnum_moves_stones(A, B, C) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_moves_stones(a :: integer, b :: integer, c :: integer) :: [integer]\n  def num_moves_stones(a, b, c) do\n    \n  end\nend"}], "similarQuestionList": []}