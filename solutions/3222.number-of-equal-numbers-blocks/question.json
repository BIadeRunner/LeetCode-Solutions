{"question_id": "3222", "problem_slug": "number-of-equal-numbers-blocks", "problem_title": "Number of Equal Numbers Blocks", "content": "You are given a 0-indexed array of integers, nums. The following property holds for nums:\n\nAll occurrences of a value are adjacent. In other words, if there are two indices i < j such that nums[i] == nums[j], then for every index k that i < k < j, nums[k] == nums[i].\n\nSince nums is a very large array, you are given an instance of the class BigArray which has the following functions:\n\nint at(long long index): Returns the value of nums[i].\nvoid size(): Returns nums.length.\n\nLet's partition the array into maximal blocks such that each block contains equal values. Return the number of these blocks.\nNote that if you want to test your solution using a custom test, behavior for tests with nums.length > 10 is undefined.\n \nExample 1:\n\nInput: nums = [3,3,3,3,3]\nOutput: 1\nExplanation: There is only one block here which is the whole array (because all numbers are equal) and that is: [3,3,3,3,3]. So the answer would be 1. \n\nExample 2:\n\nInput: nums = [1,1,1,3,9,9,9,2,10,10]\nOutput: 5\nExplanation: There are 5 blocks here:\nBlock number 1: [1,1,1,3,9,9,9,2,10,10]\nBlock number 2: [1,1,1,3,9,9,9,2,10,10]\nBlock number 3: [1,1,1,3,9,9,9,2,10,10]\nBlock number 4: [1,1,1,3,9,9,9,2,10,10]\nBlock number 5: [1,1,1,3,9,9,9,2,10,10]\nSo the answer would be 5.\nExample 3:\n\nInput: nums = [1,2,3,4,5,6,7]\nOutput: 7\nExplanation: Since all numbers are distinct, there are 7 blocks here and each element representing one block. So the answer would be 7. \n\n \nConstraints:\n\n1 <= nums.length <= 1015\n1 <= nums[i] <= 109\nThe input is generated such that all equal values are adjacent.\nThe sum of the elements of nums is at most 1015.\n\n", "hints": ["Start from the beginning of the array <code>nums.at(0)</code>.", "Do a binary search on the last index <code>last</code> such that <code>nums.at(0) == nums.at(last)</code>.", "Continue this process until you get to the end of the array (<code>nums.size()</code>)."], "exampleTestcases": "[3,3,3,3,3]\n[1,1,1,3,9,9,9,2,10,10]\n[1,2,3,4,5,6,7]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n * public:\n *     BigArray(vector<int> elements);\n *     int at(long long index);\n *     long long size();\n * };\n */\nclass Solution {\npublic:\n    int countBlocks(BigArray* nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *     public BigArray(int[] elements);\n *     public int at(long index);\n *     public long size();\n * }\n */\nclass Solution {\n    public int countBlocks(BigArray nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition for BigArray.\n# class BigArray:\n#     def at(self, index):\n#         pass\n#     def size(self):\n#         pass\nclass Solution(object):\n    def countBlocks(self, nums):\n        \"\"\"\n        :type nums: BigArray\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for BigArray.\n# class BigArray:\n#     def at(self, index: long) -> int:\n#         pass\n#     def size(self) -> long:\n#         pass\nclass Solution(object):\n    def countBlocks(self, nums: Optional['BigArray']) -> int:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for BigArray.\n * \n * YOU HAVE TO PASS THE OBJECT ITSELF AS THE FIRST PARAMETER\n * \n * struct BigArray {\n *     int (*at)(struct BigArray*, long long);\n *     long long (*size)(struct BigArray*);\n * };\n */\nint countBlocks(struct BigArray* nums){\n\n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *     public BigArray(int[] elements);\n *     public int at(long index);\n *     public long size();\n * }\n */\npublic class Solution {\n    public int CountBlocks(BigArray nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *     @param {number[]} elements\n *     constructor(elements);\n * \n *     @param {number} index\n *     @return {number}\n *     at(index);\n * \n *     @return {number}\n *     size();\n * }\n */\n/**\n * @param {BigArray} nums\n * @return {number}\n */\nvar countBlocks = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *     constructor(elements: number[]);\n *     public at(index: number): number;\n *     public size(): number;\n * }\n */\nfunction countBlocks(nums: BigArray | null): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *      * @param Integer[] $elements\n *     function __construct($elements);\n *      * @param Integer $index\n *      * @return Integer\n *     function at($index);\n *      * @return Integer\n *     function size();\n * }\n */\nclass Solution {\n\n    /**\n     * @param BigArray $nums\n     * @return Integer\n     */\n    function countBlocks($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *     init(elements: [Int]) {}\n *     func at(_ index: Int) -> Int {}\n *     func size() -> Int {}\n * }\n */\nclass Solution {\n    func countBlocks(_ nums: BigArray) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for BigArray.\n * class BigArray(elements: IntArray) {\n *     fun at(index: Long): Int\n *     fun size(): Long\n * }\n */\nclass Solution {\n    fun countBlocks(nums: BigArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "/**\n * Definition for BigArray.\n * class BigArray {\n *   BigArray(List<int> elements);\n *   int at(int);\n *   int size();\n * }\n */\nclass Solution {\n  int countBlocks(BigArray nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for BigArray.\n * type BigArray interface {\n *     At(int64) int\n *     Size() int64\n * }\n */\nfunc countBlocks(nums BigArray) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for BigArray.\n# class BigArray\n#   def initialize(elements)\n#   end\n#   def at(index)\n#   end\n#   def size\n#   end\n# end\n# @param {BigArray} nums\n# @return {Integer}\ndef count_blocks(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for BigArray.\n * class BigArray(elements: Array[Int]) {\n *     def at(Long): Int\n *     def size(): Long\n * }\n */\nobject Solution {\n    def countBlocks(nums: BigArray): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/**\n * Definition for BigArray.\n * impl BigArray {\n *     pub fn new(elements: Vec<i32>) -> Self {}\n *     pub fn at(&self, usize) -> i32 {}\n *     pub fn size(&self) -> usize {}\n * }\n */\nimpl Solution {\n    pub fn count_blocks(nums: BigArray) -> i32 {\n        \n    }\n}"}}}