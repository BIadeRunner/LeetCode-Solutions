{"question_id": "1645", "problem_slug": "find-a-value-of-a-mysterious-function-closest-to-target", "problem_title": "Find a Value of a Mysterious Function Closest to Target", "content": "\nWinston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.\n \nExample 1:\n\nInput: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n\nExample 2:\n\nInput: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.\n\nExample 3:\n\nInput: arr = [1,2,4,8,16], target = 0\nOutput: 0\n\n \nConstraints:\n\n1 <= arr.length <= 105\n1 <= arr[i] <= 106\n0 <= target <= 107\n\n", "hints": ["If the and value of sub-array arr[i...j] is ≥ the and value of the sub-array arr[i...j+1].", "For each index i using binary search or ternary search find the index j where |target - AND(arr[i...j])| is minimum, minimize this value with the global answer."], "exampleTestcases": "[9,12,3,7,15]\n5\n[1000000,1000000,1000000]\n1\n[1,2,4,8,16]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int closestToTarget(vector<int>& arr, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int closestToTarget(int[] arr, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def closestToTarget(self, arr, target):\n        \"\"\"\n        :type arr: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int closestToTarget(int* arr, int arrSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ClosestToTarget(int[] arr, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number}\n */\nvar closestToTarget = function(arr, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function closestToTarget(arr: number[], target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $target\n     * @return Integer\n     */\n    function closestToTarget($arr, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func closestToTarget(_ arr: [Int], _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun closestToTarget(arr: IntArray, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int closestToTarget(List<int> arr, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func closestToTarget(arr []int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} target\n# @return {Integer}\ndef closest_to_target(arr, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def closestToTarget(arr: Array[Int], target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn closest_to_target(arr: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (closest-to-target arr target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec closest_to_target(Arr :: [integer()], Target :: integer()) -> integer().\nclosest_to_target(Arr, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec closest_to_target(arr :: [integer], target :: integer) :: integer\n  def closest_to_target(arr, target) do\n    \n  end\nend"}}}