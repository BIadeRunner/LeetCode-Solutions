{"question_id": "838", "problem_slug": "design-linked-list", "problem_title": "Design Linked List", "content": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\nImplement the MyLinkedList class:\n\nMyLinkedList() Initializes the MyLinkedList object.\nint get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.\nvoid addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\nvoid addAtTail(int val) Append a node of value val as the last element of the linked list.\nvoid addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.\nvoid deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.\n\n \nExample 1:\n\nInput\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\nOutput\n[null, null, null, null, 2, null, 3]\n\nExplanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3\n\n \nConstraints:\n\n0 <= index, val <= 1000\nPlease do not use the built-in LinkedList library.\nAt most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.\n\n", "hints": [], "exampleTestcases": "[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class MyLinkedList {\npublic:\n    MyLinkedList() {\n        \n    }\n    \n    int get(int index) {\n        \n    }\n    \n    void addAtHead(int val) {\n        \n    }\n    \n    void addAtTail(int val) {\n        \n    }\n    \n    void addAtIndex(int index, int val) {\n        \n    }\n    \n    void deleteAtIndex(int index) {\n        \n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */"}, "Java": {"langSlug": "java", "code": "class MyLinkedList {\n\n    public MyLinkedList() {\n        \n    }\n    \n    public int get(int index) {\n        \n    }\n    \n    public void addAtHead(int val) {\n        \n    }\n    \n    public void addAtTail(int val) {\n        \n    }\n    \n    public void addAtIndex(int index, int val) {\n        \n    }\n    \n    public void deleteAtIndex(int index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */"}, "Python": {"langSlug": "python", "code": "class MyLinkedList(object):\n\n    def __init__(self):\n        \n\n    def get(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        \n\n    def addAtHead(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtTail(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)"}, "Python3": {"langSlug": "python3", "code": "class MyLinkedList:\n\n    def __init__(self):\n        \n\n    def get(self, index: int) -> int:\n        \n\n    def addAtHead(self, val: int) -> None:\n        \n\n    def addAtTail(self, val: int) -> None:\n        \n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \n\n    def deleteAtIndex(self, index: int) -> None:\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyLinkedList;\n\n\nMyLinkedList* myLinkedListCreate() {\n    \n}\n\nint myLinkedListGet(MyLinkedList* obj, int index) {\n    \n}\n\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\n    \n}\n\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\n    \n}\n\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\n    \n}\n\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\n    \n}\n\nvoid myLinkedListFree(MyLinkedList* obj) {\n    \n}\n\n/**\n * Your MyLinkedList struct will be instantiated and called as such:\n * MyLinkedList* obj = myLinkedListCreate();\n * int param_1 = myLinkedListGet(obj, index);\n \n * myLinkedListAddAtHead(obj, val);\n \n * myLinkedListAddAtTail(obj, val);\n \n * myLinkedListAddAtIndex(obj, index, val);\n \n * myLinkedListDeleteAtIndex(obj, index);\n \n * myLinkedListFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class MyLinkedList {\n\n    public MyLinkedList() {\n        \n    }\n    \n    public int Get(int index) {\n        \n    }\n    \n    public void AddAtHead(int val) {\n        \n    }\n    \n    public void AddAtTail(int val) {\n        \n    }\n    \n    public void AddAtIndex(int index, int val) {\n        \n    }\n    \n    public void DeleteAtIndex(int index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar MyLinkedList = function() {\n    \n};\n\n/** \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtTail = function(val) {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtIndex = function(index, val) {\n    \n};\n\n/** \n * @param {number} index\n * @return {void}\n */\nMyLinkedList.prototype.deleteAtIndex = function(index) {\n    \n};\n\n/** \n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class MyLinkedList {\n    constructor() {\n        \n    }\n\n    get(index: number): number {\n        \n    }\n\n    addAtHead(val: number): void {\n        \n    }\n\n    addAtTail(val: number): void {\n        \n    }\n\n    addAtIndex(index: number, val: number): void {\n        \n    }\n\n    deleteAtIndex(index: number): void {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */"}, "PHP": {"langSlug": "php", "code": "class MyLinkedList {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtHead($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtTail($val) {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtIndex($index, $val) {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @return NULL\n     */\n    function deleteAtIndex($index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * $obj = MyLinkedList();\n * $ret_1 = $obj->get($index);\n * $obj->addAtHead($val);\n * $obj->addAtTail($val);\n * $obj->addAtIndex($index, $val);\n * $obj->deleteAtIndex($index);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass MyLinkedList {\n\n    init() {\n        \n    }\n    \n    func get(_ index: Int) -> Int {\n        \n    }\n    \n    func addAtHead(_ val: Int) {\n        \n    }\n    \n    func addAtTail(_ val: Int) {\n        \n    }\n    \n    func addAtIndex(_ index: Int, _ val: Int) {\n        \n    }\n    \n    func deleteAtIndex(_ index: Int) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList()\n * let ret_1: Int = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index, val)\n * obj.deleteAtIndex(index)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class MyLinkedList() {\n\n    fun get(index: Int): Int {\n        \n    }\n\n    fun addAtHead(`val`: Int) {\n        \n    }\n\n    fun addAtTail(`val`: Int) {\n        \n    }\n\n    fun addAtIndex(index: Int, `val`: Int) {\n        \n    }\n\n    fun deleteAtIndex(index: Int) {\n        \n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */"}, "Dart": {"langSlug": "dart", "code": "class MyLinkedList {\n\n  MyLinkedList() {\n    \n  }\n  \n  int get(int index) {\n    \n  }\n  \n  void addAtHead(int val) {\n    \n  }\n  \n  void addAtTail(int val) {\n    \n  }\n  \n  void addAtIndex(int index, int val) {\n    \n  }\n  \n  void deleteAtIndex(int index) {\n    \n  }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = MyLinkedList();\n * int param1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */"}, "Go": {"langSlug": "golang", "code": "type MyLinkedList struct {\n    \n}\n\n\nfunc Constructor() MyLinkedList {\n    \n}\n\n\nfunc (this *MyLinkedList) Get(index int) int {\n    \n}\n\n\nfunc (this *MyLinkedList) AddAtHead(val int)  {\n    \n}\n\n\nfunc (this *MyLinkedList) AddAtTail(val int)  {\n    \n}\n\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\n    \n}\n\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\n    \n}\n\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class MyLinkedList\n    def initialize()\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_head(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_tail(val)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_index(index, val)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :rtype: Void\n=end\n    def delete_at_index(index)\n        \n    end\n\n\nend\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList.new()\n# param_1 = obj.get(index)\n# obj.add_at_head(val)\n# obj.add_at_tail(val)\n# obj.add_at_index(index, val)\n# obj.delete_at_index(index)"}, "Scala": {"langSlug": "scala", "code": "class MyLinkedList() {\n\n    def get(index: Int): Int = {\n        \n    }\n\n    def addAtHead(`val`: Int): Unit = {\n        \n    }\n\n    def addAtTail(`val`: Int): Unit = {\n        \n    }\n\n    def addAtIndex(index: Int, `val`: Int): Unit = {\n        \n    }\n\n    def deleteAtIndex(index: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * val obj = new MyLinkedList()\n * val param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */"}, "Rust": {"langSlug": "rust", "code": "struct MyLinkedList {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn get(&self, index: i32) -> i32 {\n        \n    }\n    \n    fn add_at_head(&self, val: i32) {\n        \n    }\n    \n    fn add_at_tail(&self, val: i32) {\n        \n    }\n    \n    fn add_at_index(&self, index: i32, val: i32) {\n        \n    }\n    \n    fn delete_at_index(&self, index: i32) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */"}, "Racket": {"langSlug": "racket", "code": "(define my-linked-list%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get index)\n      )\n    ; add-at-head : exact-integer? -> void?\n    (define/public (add-at-head val)\n      )\n    ; add-at-tail : exact-integer? -> void?\n    (define/public (add-at-tail val)\n      )\n    ; add-at-index : exact-integer? exact-integer? -> void?\n    (define/public (add-at-index index val)\n      )\n    ; delete-at-index : exact-integer? -> void?\n    (define/public (delete-at-index index)\n      )))\n\n;; Your my-linked-list% object will be instantiated and called as such:\n;; (define obj (new my-linked-list%))\n;; (define param_1 (send obj get index))\n;; (send obj add-at-head val)\n;; (send obj add-at-tail val)\n;; (send obj add-at-index index val)\n;; (send obj delete-at-index index)"}, "Erlang": {"langSlug": "erlang", "code": "-spec my_linked_list_init_() -> any().\nmy_linked_list_init_() ->\n  .\n\n-spec my_linked_list_get(Index :: integer()) -> integer().\nmy_linked_list_get(Index) ->\n  .\n\n-spec my_linked_list_add_at_head(Val :: integer()) -> any().\nmy_linked_list_add_at_head(Val) ->\n  .\n\n-spec my_linked_list_add_at_tail(Val :: integer()) -> any().\nmy_linked_list_add_at_tail(Val) ->\n  .\n\n-spec my_linked_list_add_at_index(Index :: integer(), Val :: integer()) -> any().\nmy_linked_list_add_at_index(Index, Val) ->\n  .\n\n-spec my_linked_list_delete_at_index(Index :: integer()) -> any().\nmy_linked_list_delete_at_index(Index) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_linked_list_init_(),\n%% Param_1 = my_linked_list_get(Index),\n%% my_linked_list_add_at_head(Val),\n%% my_linked_list_add_at_tail(Val),\n%% my_linked_list_add_at_index(Index, Val),\n%% my_linked_list_delete_at_index(Index),\n\n%% my_linked_list_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule MyLinkedList do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec get(index :: integer) :: integer\n  def get(index) do\n    \n  end\n\n  @spec add_at_head(val :: integer) :: any\n  def add_at_head(val) do\n    \n  end\n\n  @spec add_at_tail(val :: integer) :: any\n  def add_at_tail(val) do\n    \n  end\n\n  @spec add_at_index(index :: integer, val :: integer) :: any\n  def add_at_index(index, val) do\n    \n  end\n\n  @spec delete_at_index(index :: integer) :: any\n  def delete_at_index(index) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyLinkedList.init_()\n# param_1 = MyLinkedList.get(index)\n# MyLinkedList.add_at_head(val)\n# MyLinkedList.add_at_tail(val)\n# MyLinkedList.add_at_index(index, val)\n# MyLinkedList.delete_at_index(index)\n\n# MyLinkedList.init_ will be called before every test case, in which you can do some necessary initializations."}}}