{"questionId": "1056", "acRate": 70.58645943806762, "difficulty": "Medium", "freqBar": 68.36158673461632, "frontendQuestionId": "1011", "paidOnly": false, "status": "ac", "title": "Capacity To Ship Packages Within D Days", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "capacity-to-ship-packages-within-d-days", "content": "<p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p>\n\n<p>The <code>i<sup>th</sup></code> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> weights = [1,2,3,4,5,6,7,8,9,10], days = 5\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> weights = [3,2,2,4,1,4], days = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> weights = [1,2,3,1,1], days = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= weights[i] &lt;= 500</code></li>\n</ul>\n", "hints": ["Binary search on the answer.  We need a function possible(capacity) which returns true if and only if we can do the task in D days."], "exampleTestcases": "[1,2,3,4,5,6,7,8,9,10]\n5\n[3,2,2,4,1,4]\n3\n[1,2,3,1,1]\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int days) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shipWithinDays(int[] weights, int days) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shipWithinDays(self, weights, days):\n        \"\"\"\n        :type weights: List[int]\n        :type days: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int shipWithinDays(int* weights, int weightsSize, int days) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShipWithinDays(int[] weights, int days) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} weights\n * @param {number} days\n * @return {number}\n */\nvar shipWithinDays = function(weights, days) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shipWithinDays(weights: number[], days: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $weights\n     * @param Integer $days\n     * @return Integer\n     */\n    function shipWithinDays($weights, $days) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shipWithinDays(_ weights: [Int], _ days: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shipWithinDays(weights: IntArray, days: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int shipWithinDays(List<int> weights, int days) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shipWithinDays(weights []int, days int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} weights\n# @param {Integer} days\n# @return {Integer}\ndef ship_within_days(weights, days)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shipWithinDays(weights: Array[Int], days: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn ship_within_days(weights: Vec<i32>, days: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (ship-within-days weights days)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec ship_within_days(Weights :: [integer()], Days :: integer()) -> integer().\nship_within_days(Weights, Days) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec ship_within_days(weights :: [integer], days :: integer) :: integer\n  def ship_within_days(weights, days) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "split-array-largest-sum", "title": "Split Array Largest Sum", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "divide-chocolate", "title": "Divide Chocolate", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "cutting-ribbons", "title": "Cutting Ribbons", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "minimized-maximum-of-products-distributed-to-any-store", "title": "Minimized Maximum of Products Distributed to Any Store", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-bags-with-full-capacity-of-rocks", "title": "Maximum Bags With Full Capacity of Rocks", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "isPaidOnly": false}]}