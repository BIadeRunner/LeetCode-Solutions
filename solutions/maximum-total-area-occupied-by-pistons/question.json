{"questionId": "3590", "acRate": 56.48351648351648, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3279", "paidOnly": true, "status": "ac", "title": "Maximum Total Area Occupied by Pistons", "titleSlug": "maximum-total-area-occupied-by-pistons", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "content": "<p>There are several pistons in an old car engine, and we want to calculate the <strong>maximum</strong> possible area <strong>under</strong> the pistons.</p>\n\n<p>You are given:</p>\n\n<ul>\n\t<li>An integer <code>height</code>, representing the <strong>maximum</strong> height a piston can reach.</li>\n\t<li>An integer array <code>positions</code>, where <code>positions[i]</code> is the current position of piston <code>i</code>, which is equal to the current area <strong>under</strong> it.</li>\n\t<li>A string <code>directions</code>, where <code>directions[i]</code> is the current moving direction of piston <code>i</code>, <code>&#39;U&#39;</code> for up, and <code>&#39;D&#39;</code> for down.</li>\n</ul>\n\n<p>Each second:</p>\n\n<ul>\n\t<li>Every piston moves in its current direction 1 unit. e.g., if the direction is up, <code>positions[i]</code> is incremented by 1.</li>\n\t<li>If a piston has reached one of the ends, i.e., <code>positions[i] == 0</code> or <code>positions[i] == height</code>, its direction will change.</li>\n</ul>\n\n<p>Return the <em>maximum possible area</em> under all the pistons.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">height = 5, positions = [2,5], directions = &quot;UD&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The current position of the pistons has the maximum possible area under it.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">height = 6, positions = [0,0,6,3], directions = &quot;UUDU&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After 3 seconds, the pistons will be in positions <code>[3, 3, 3, 6]</code>, which has the maximum possible area under it.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= height &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= positions.length == directions.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= positions[i] &lt;= height</code></li>\n\t<li><code>directions[i]</code> is either <code>&#39;U&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n", "hints": ["Simulate the process.", "We only need to keep track of the times when a piston reaches one end and letâ€™s call these critical points.", "For each piston, find the first time it reaches one end and sort these times (these times are critical points).", "Find a way to calculate the area difference between two consecutive critical points in constant time."], "exampleTestcases": "5\n[2,5]\n\"UD\"\n6\n[0,0,6,3]\n\"UUDU\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxArea(int height, vector<int>& positions, string directions) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maxArea(int height, int[] positions, String directions) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxArea(self, height, positions, directions):\n        \"\"\"\n        :type height: int\n        :type positions: List[int]\n        :type directions: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxArea(self, height: int, positions: List[int], directions: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maxArea(int height, int* positions, int positionsSize, char* directions) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaxArea(int height, int[] positions, string directions) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} height\n * @param {number[]} positions\n * @param {string} directions\n * @return {number}\n */\nvar maxArea = function(height, positions, directions) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxArea(height: number, positions: number[], directions: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $height\n     * @param Integer[] $positions\n     * @param String $directions\n     * @return Integer\n     */\n    function maxArea($height, $positions, $directions) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxArea(_ height: Int, _ positions: [Int], _ directions: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxArea(height: Int, positions: IntArray, directions: String): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxArea(int height, List<int> positions, String directions) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxArea(height int, positions []int, directions string) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} height\n# @param {Integer[]} positions\n# @param {String} directions\n# @return {Integer}\ndef max_area(height, positions, directions)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxArea(height: Int, positions: Array[Int], directions: String): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_area(height: i32, positions: Vec<i32>, directions: String) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-area height positions directions)\n  (-> exact-integer? (listof exact-integer?) string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_area(Height :: integer(), Positions :: [integer()], Directions :: unicode:unicode_binary()) -> integer().\nmax_area(Height, Positions, Directions) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_area(height :: integer, positions :: [integer], directions :: String.t) :: integer\n  def max_area(height, positions, directions) do\n    \n  end\nend"}], "similarQuestionList": []}