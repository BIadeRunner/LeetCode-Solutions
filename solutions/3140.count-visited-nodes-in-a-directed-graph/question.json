{"question_id": "3140", "problem_slug": "count-visited-nodes-in-a-directed-graph", "problem_title": "Count Visited Nodes in a Directed Graph", "content": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\nYou are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\nConsider the following process on the graph:\n\nYou start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\n\nReturn an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\n \nExample 1:\n\n\nInput: edges = [1,2,0,0]\nOutput: [3,3,3,4]\nExplanation: We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.\n\nExample 2:\n\n\nInput: edges = [1,2,3,4,0]\nOutput: [5,5,5,5,5]\nExplanation: Starting from any node we can visit every node in the graph in the process.\n\n \nConstraints:\n\nn == edges.length\n2 <= n <= 105\n0 <= edges[i] <= n - 1\nedges[i] != i\n\n", "hints": ["Consider if the graph was only one cycle, what will be the answer for each node?", "The actual graph will always consist of at least one cycle and some other nodes.", "Calculate the answer for nodes in cycles the same way as in hint 1. How do you calculate the answer for the remaining nodes?"], "exampleTestcases": "[1,2,0,0]\n[1,2,3,4,0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> countVisitedNodes(vector<int>& edges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] countVisitedNodes(List<Integer> edges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countVisitedNodes(self, edges):\n        \"\"\"\n        :type edges: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countVisitedNodes(self, edges: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countVisitedNodes(int* edges, int edgesSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] CountVisitedNodes(IList<int> edges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} edges\n * @return {number[]}\n */\nvar countVisitedNodes = function(edges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countVisitedNodes(edges: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $edges\n     * @return Integer[]\n     */\n    function countVisitedNodes($edges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countVisitedNodes(_ edges: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countVisitedNodes(edges: List<Int>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> countVisitedNodes(List<int> edges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countVisitedNodes(edges []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} edges\n# @return {Integer[]}\ndef count_visited_nodes(edges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countVisitedNodes(edges: List[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_visited_nodes(edges: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-visited-nodes edges)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_visited_nodes(Edges :: [integer()]) -> [integer()].\ncount_visited_nodes(Edges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_visited_nodes(edges :: [integer]) :: [integer]\n  def count_visited_nodes(edges) do\n    \n  end\nend"}}}