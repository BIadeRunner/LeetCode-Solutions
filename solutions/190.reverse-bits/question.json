{"question_id": "190", "problem_slug": "reverse-bits", "problem_title": "Reverse Bits", "content": "Reverse bits of a given 32 bits unsigned integer.\nNote:\n\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n\n \nExample 1:\n\nInput: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n\nExample 2:\n\nInput: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n\n \nConstraints:\n\nThe input must be a binary string of length 32\n\n \nFollow up: If this function is called many times, how would you optimize it?\n", "hints": [], "exampleTestcases": "00000010100101000001111010011100\n11111111111111111111111111111101", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "uint32_t reverseBits(uint32_t n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reverseBits(n: number): number {\n\t\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reverseBits($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    // you need treat n as an unsigned value\n    fun reverseBits(n:Int):Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func reverseBits(num uint32) uint32 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n, a positive integer\n# @return {Integer}\ndef reverse_bits(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    // you need treat n as an unsigned value\n    def reverseBits(x: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_bits(x: u32) -> u32 {\n        \n    }\n}"}}}