{"questionId": "1936", "acRate": 33.80344951491197, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1808", "paidOnly": false, "status": "ac", "title": "Maximize Number of Nice Divisors", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}], "titleSlug": "maximize-number-of-nice-divisors", "content": "<p>You are given a positive integer <code>primeFactors</code>. You are asked to construct a positive integer <code>n</code> that satisfies the following conditions:</p>\r\n\r\n<ul>\r\n  <li>The number of prime factors of <code>n</code> (not necessarily distinct) is <strong>at most</strong> <code>primeFactors</code>.</li>\r\n  <li>The number of nice divisors of <code>n</code> is maximized. Note that a divisor of <code>n</code> is <strong>nice</strong> if it is divisible by every prime factor of <code>n</code>. For example, if <code>n = 12</code>, then its prime factors are <code>[2,2,3]</code>, then <code>6</code> and <code>12</code> are nice divisors, while <code>3</code> and <code>4</code> are not.</li>\r\n</ul>\r\n\r\n<p>Return <em>the number of nice divisors of</em> <code>n</code>. Since that number can be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\r\n\r\n<p>Note that a prime number is a natural number greater than <code>1</code> that is not a product of two smaller natural numbers. The prime factors of a number <code>n</code> is a list of prime numbers such that their product equals <code>n</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> primeFactors = 5\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> primeFactors = 8\r\n<strong>Output:</strong> 18\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= primeFactors &lt;= 10<sup>9</sup></code></li>\r\n</ul>", "hints": ["The number of nice divisors is equal to the product of the count of each prime factor. Then the problem is reduced to: given n, find a sequence of numbers whose sum equals n and whose product is maximized.", "This sequence can have no numbers that are larger than 4. Proof: if it contains a number x that is larger than 4, then you can replace x with floor(x/2) and ceil(x/2), and floor(x/2) * ceil(x/2) > x. You can also replace 4s with two 2s. Hence, there will always be optimal solutions with only 2s and 3s.", "If there are three 2s, you can replace them with two 3s to get a better product. Hence, you'll never have more than two 2s.", "Keep adding 3s as long as n \u2265 5."], "exampleTestcases": "5\n8", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxNiceDivisors(int primeFactors) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxNiceDivisors(int primeFactors) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxNiceDivisors(self, primeFactors):\n        \"\"\"\n        :type primeFactors: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxNiceDivisors(self, primeFactors: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxNiceDivisors(int primeFactors){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxNiceDivisors(int primeFactors) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} primeFactors\n * @return {number}\n */\nvar maxNiceDivisors = function(primeFactors) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxNiceDivisors(primeFactors: number): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $primeFactors\n     * @return Integer\n     */\n    function maxNiceDivisors($primeFactors) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxNiceDivisors(_ primeFactors: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxNiceDivisors(primeFactors: Int): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxNiceDivisors(primeFactors int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} prime_factors\n# @return {Integer}\ndef max_nice_divisors(prime_factors)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxNiceDivisors(primeFactors: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_nice_divisors(prime_factors: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-nice-divisors primeFactors)\n  (-> exact-integer? exact-integer?)\n\n  )"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "integer-break", "title": "Integer Break", "isPaidOnly": false}]}