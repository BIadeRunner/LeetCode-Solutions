{"question_id": "2425", "problem_slug": "number-of-people-that-can-be-seen-in-a-grid", "problem_title": "Number of People That Can Be Seen in a Grid", "content": "You are given an m x n 0-indexed 2D array of positive integers heights where heights[i][j] is the height of the person standing at position (i, j).\nA person standing at position (row1, col1) can see a person standing at position (row2, col2) if:\n\nThe person at (row2, col2) is to the right or below the person at (row1, col1). More formally, this means that either row1 == row2 and col1 < col2 or row1 < row2 and col1 == col2.\nEveryone in between them is shorter than both of them.\n\nReturn an m x n 2D array of integers answer where answer[i][j] is the number of people that the person at position (i, j) can see.\n \nExample 1:\n\n\nInput: heights = [[3,1,4,2,5]]\nOutput: [[2,1,2,1,0]]\nExplanation:\n- The person at (0, 0) can see the people at (0, 1) and (0, 2).\n  Note that he cannot see the person at (0, 4) because the person at (0, 2) is taller than him.\n- The person at (0, 1) can see the person at (0, 2).\n- The person at (0, 2) can see the people at (0, 3) and (0, 4).\n- The person at (0, 3) can see the person at (0, 4).\n- The person at (0, 4) cannot see anybody.\n\nExample 2:\n\n\nInput: heights = [[5,1],[3,1],[4,1]]\nOutput: [[3,1],[2,1],[1,0]]\nExplanation:\n- The person at (0, 0) can see the people at (0, 1), (1, 0) and (2, 0).\n- The person at (0, 1) can see the person at (1, 1).\n- The person at (1, 0) can see the people at (1, 1) and (2, 0).\n- The person at (1, 1) can see the person at (2, 1).\n- The person at (2, 0) can see the person at (2, 1).\n- The person at (2, 1) cannot see anybody.\n\n \nConstraints:\n\n1 <= heights.length <= 400\n1 <= heights[i].length <= 400\n1 <= heights[i][j] <= 105\n\n", "hints": ["Imagine you are looking to the right. The heights of the people you see form an ascending sequence.", "Iterate through the row from right to left. Use a decreasing monotonic stack to keep track of the people that you can see.", "Use binary search to find the number of people in the stack that are shorter than the current person.", "Repeat this process for each column."], "exampleTestcases": "[[3,1,4,2,5]]\n[[5,1],[3,1],[4,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> seePeople(vector<vector<int>>& heights) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] seePeople(int[][] heights) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def seePeople(self, heights):\n        \"\"\"\n        :type heights: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def seePeople(self, heights: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** seePeople(int** heights, int heightsSize, int* heightsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] SeePeople(int[][] heights) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} heights\n * @return {number[][]}\n */\nvar seePeople = function(heights) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function seePeople(heights: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $heights\n     * @return Integer[][]\n     */\n    function seePeople($heights) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func seePeople(_ heights: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun seePeople(heights: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> seePeople(List<List<int>> heights) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func seePeople(heights [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} heights\n# @return {Integer[][]}\ndef see_people(heights)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def seePeople(heights: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn see_people(heights: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (see-people heights)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec see_people(Heights :: [[integer()]]) -> [[integer()]].\nsee_people(Heights) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec see_people(heights :: [[integer]]) :: [[integer]]\n  def see_people(heights) do\n    \n  end\nend"}}}