{"question_id": "1822", "problem_slug": "longest-palindromic-subsequence-ii", "problem_title": "Longest Palindromic Subsequence II", "content": "A subsequence of a string s is considered a good palindromic subsequence if:\n\nIt is a subsequence of s.\nIt is a palindrome (has the same value if reversed).\nIt has an even length.\nNo two consecutive characters are equal, except the two middle ones.\n\nFor example, if s = \"abcabcabb\", then \"abba\" is considered a good palindromic subsequence, while \"bcb\" (not even length) and \"bbbb\" (has equal consecutive characters) are not.\nGiven a string s, return the length of the longest good palindromic subsequence in s.\n \nExample 1:\n\nInput: s = \"bbabab\"\nOutput: 4\nExplanation: The longest good palindromic subsequence of s is \"baab\".\n\nExample 2:\n\nInput: s = \"dcbccacdb\"\nOutput: 4\nExplanation: The longest good palindromic subsequence of s is \"dccd\".\n\n \nConstraints:\n\n1 <= s.length <= 250\ns consists of lowercase English letters.\n\n", "hints": ["As with any good dp problem that uses palindromes, try building the palindrome from the edges", "The prime point is to check that no two adjacent characters are equal, so save the past character while building the palindrome."], "exampleTestcases": "\"bbabab\"\n\"dcbccacdb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestPalindromeSubseq(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestPalindromeSubseq(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestPalindromeSubseq(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestPalindromeSubseq(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestPalindromeSubseq($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestPalindromeSubseq(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindromeSubseq(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestPalindromeSubseq(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestPalindromeSubseq(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_palindrome_subseq(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestPalindromeSubseq(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome_subseq(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-palindrome-subseq s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_palindrome_subseq(S :: unicode:unicode_binary()) -> integer().\nlongest_palindrome_subseq(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_palindrome_subseq(s :: String.t) :: integer\n  def longest_palindrome_subseq(s) do\n    \n  end\nend"}}}