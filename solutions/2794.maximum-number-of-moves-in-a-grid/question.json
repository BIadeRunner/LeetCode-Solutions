{"question_id": "2794", "problem_slug": "maximum-number-of-moves-in-a-grid", "problem_title": "Maximum Number of Moves in a Grid", "content": "You are given a 0-indexed m x n matrix grid consisting of positive integers.\nYou can start at any cell in the first column of the matrix, and traverse the grid in the following way:\n\nFrom a cell (row, col), you can move to any of the cells: (row - 1, col + 1), (row, col + 1) and (row + 1, col + 1) such that the value of the cell you move to, should be strictly bigger than the value of the current cell.\n\nReturn the maximum number of moves that you can perform.\n \nExample 1:\n\n\nInput: grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]\nOutput: 3\nExplanation: We can start at the cell (0, 0) and make the following moves:\n- (0, 0) -> (0, 1).\n- (0, 1) -> (1, 2).\n- (1, 2) -> (2, 3).\nIt can be shown that it is the maximum number of moves that can be made.\nExample 2:\n\n\nInput: grid = [[3,2,4],[2,1,9],[1,1,7]]\nOutput: 0\nExplanation: Starting from any cell in the first column we cannot perform any moves.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\n1 <= grid[i][j] <= 106\n\n", "hints": ["Consider using dynamic programming to find the maximum number of moves that can be made from each cell.", "The final answer will be the maximum value in cells of the first column."], "exampleTestcases": "[[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]\n[[3,2,4],[2,1,9],[1,1,7]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxMoves(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxMoves(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxMoves(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxMoves(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxMoves(int** grid, int gridSize, int* gridColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxMoves(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxMoves = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxMoves(grid: number[][]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxMoves($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxMoves(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxMoves(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxMoves(List<List<int>> grid) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxMoves(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_moves(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxMoves(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_moves(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-moves grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_moves(Grid :: [[integer()]]) -> integer().\nmax_moves(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_moves(grid :: [[integer]]) :: integer\n  def max_moves(grid) do\n    \n  end\nend"}}}