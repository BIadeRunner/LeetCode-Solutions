{"question_id": "3569", "problem_slug": "count-of-substrings-containing-every-vowel-and-k-consonants-ii", "problem_title": "Count of Substrings Containing Every Vowel and K Consonants II", "content": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.\n \nExample 1:\n\nInput: word = \"aeioqq\", k = 1\nOutput: 0\nExplanation:\nThere is no substring with every vowel.\n\nExample 2:\n\nInput: word = \"aeiou\", k = 0\nOutput: 1\nExplanation:\nThe only substring with every vowel and zero consonants is word[0..4], which is \"aeiou\".\n\nExample 3:\n\nInput: word = \"ieaouqqieaouqq\", k = 1\nOutput: 3\nExplanation:\nThe substrings with every vowel and one consonant are:\n\nword[0..5], which is \"ieaouq\".\nword[6..11], which is \"qieaou\".\nword[7..12], which is \"ieaouq\".\n\n\n \nConstraints:\n\n5 <= word.length <= 2 * 105\nword consists only of lowercase English letters.\n0 <= k <= word.length - 5\n\n", "hints": ["We can use sliding window and binary search.", "For each index <code>r</code>, find the maximum <code>l</code> such that both conditions are satisfied using binary search."], "exampleTestcases": "\"aeioqq\"\n1\n\"aeiou\"\n0\n\"ieaouqqieaouqq\"\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countOfSubstrings(string word, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countOfSubstrings(String word, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countOfSubstrings(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countOfSubstrings(self, word: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countOfSubstrings(char* word, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountOfSubstrings(string word, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar countOfSubstrings = function(word, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countOfSubstrings(word: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function countOfSubstrings($word, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countOfSubstrings(_ word: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countOfSubstrings(word: String, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countOfSubstrings(String word, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countOfSubstrings(word string, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef count_of_substrings(word, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countOfSubstrings(word: String, k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_of_substrings(word: String, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-of-substrings word k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_of_substrings(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_of_substrings(Word, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_of_substrings(word :: String.t, k :: integer) :: integer\n  def count_of_substrings(word, k) do\n    \n  end\nend"}}}