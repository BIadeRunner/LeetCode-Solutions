{"question_id": "3385", "problem_slug": "match-alphanumerical-pattern-in-matrix-i", "problem_title": "Match Alphanumerical Pattern in Matrix I", "content": "You are given a 2D integer matrix board and a 2D character matrix pattern. Where 0 <= board[r][c] <= 9 and each element of pattern is either a digit or a lowercase English letter.\nYour task is to find a submatrix of board that matches pattern.\nAn integer matrix part matches pattern if we can replace cells containing letters in pattern with some digits (each distinct letter with a unique digit) in such a way that the resulting matrix becomes identical to the integer matrix part. In other words,\n\nThe matrices have identical dimensions.\nIf pattern[r][c] is a digit, then part[r][c] must be the same digit.\nIf pattern[r][c] is a letter x:\n\t\nFor every pattern[i][j] == x, part[i][j] must be the same as part[r][c].\nFor every pattern[i][j] != x, part[i][j] must be different than part[r][c]. \n\n\n\nReturn an array of length 2 containing the row number and column number of the upper-left corner of a submatrix of board which matches pattern. If there is more than one such submatrix, return the coordinates of the submatrix with the lowest row index, and in case there is still a tie, return the coordinates of the submatrix with the lowest column index. If there are no suitable answers, return [-1, -1].\n \nExample 1:\n\n\n\n\n1\n2\n2\n\n\n2\n2\n3\n\n\n2\n3\n3\n\n\n\n\n\n\na\nb\n\n\nb\nb\n\n\n\n\n\nInput: board = [[1,2,2],[2,2,3],[2,3,3]], pattern = [\"ab\",\"bb\"]\nOutput: [0,0]\nExplanation: If we consider this mapping: \"a\" -> 1 and \"b\" -> 2; the submatrix with the upper-left corner (0,0) is a match as outlined in the matrix above.\nNote that the submatrix with the upper-left corner (1,1) is also a match but since it comes after the other one, we return [0,0].\n\nExample 2:\n\n\n\n\n1\n1\n2\n\n\n3\n3\n4\n\n\n6\n6\n6\n\n\n\n\n\n\na\nb\n\n\n6\n6\n\n\n\n\n\nInput: board = [[1,1,2],[3,3,4],[6,6,6]], pattern = [\"ab\",\"66\"]\nOutput: [1,1]\nExplanation: If we consider this mapping: \"a\" -> 3 and \"b\" -> 4; the submatrix with the upper-left corner (1,1) is a match as outlined in the matrix above.\nNote that since the corresponding values of \"a\" and \"b\" must differ, the submatrix with the upper-left corner (1,0) is not a match. Hence, we return [1,1].\n\nExample 3:\n\n\n\n\n1\n2\n\n\n2\n1\n\n\n\n\n\n\nx\nx\n\n\n\n\n\nInput: board = [[1,2],[2,1]], pattern = [\"xx\"]\nOutput: [-1,-1]\nExplanation: Since the values of the matched submatrix must be the same, there is no match. Hence, we return [-1,-1].\n\n \nConstraints:\n\n1 <= board.length <= 50\n1 <= board[i].length <= 50\n0 <= board[i][j] <= 9\n1 <= pattern.length <= 50\n1 <= pattern[i].length <= 50\npattern[i][j] is either a digit represented as a string or a lowercase English letter.\n\n", "hints": ["Use brute force and check all the possible submatrices."], "exampleTestcases": "[[1,2,2],[2,2,3],[2,3,3]]\n[\"ab\",\"bb\"]\n[[1,1,2],[3,3,4],[6,6,6]]\n[\"ab\",\"66\"]\n[[1,2],[2,1]]\n[\"xx\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findPattern(vector<vector<int>>& board, vector<string>& pattern) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findPattern(int[][] board, String[] pattern) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findPattern(self, board, pattern):\n        \"\"\"\n        :type board: List[List[int]]\n        :type pattern: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findPattern(self, board: List[List[int]], pattern: List[str]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPattern(int** board, int boardSize, int* boardColSize, char** pattern, int patternSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindPattern(int[][] board, string[] pattern) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @param {string[]} pattern\n * @return {number[]}\n */\nvar findPattern = function(board, pattern) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findPattern(board: number[][], pattern: string[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @param String[] $pattern\n     * @return Integer[]\n     */\n    function findPattern($board, $pattern) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findPattern(_ board: [[Int]], _ pattern: [String]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findPattern(board: Array<IntArray>, pattern: Array<String>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findPattern(List<List<int>> board, List<String> pattern) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findPattern(board [][]int, pattern []string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @param {String[]} pattern\n# @return {Integer[]}\ndef find_pattern(board, pattern)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findPattern(board: Array[Array[Int]], pattern: Array[String]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_pattern(board: Vec<Vec<i32>>, pattern: Vec<String>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-pattern board pattern)\n  (-> (listof (listof exact-integer?)) (listof string?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_pattern(Board :: [[integer()]], Pattern :: [unicode:unicode_binary()]) -> [integer()].\nfind_pattern(Board, Pattern) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_pattern(board :: [[integer]], pattern :: [String.t]) :: [integer]\n  def find_pattern(board, pattern) do\n    \n  end\nend"}}}