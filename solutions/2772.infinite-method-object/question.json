{"questionId": "2772", "acRate": 92.41285030758715, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2690", "paidOnly": true, "status": "ac", "title": "Infinite Method Object", "topicTags": [], "titleSlug": "infinite-method-object", "content": "<p>Write a function that&nbsp;returns an&nbsp;<strong>infinite-method</strong><strong>&nbsp;object</strong>.</p>\n\n<p>An&nbsp;<strong>infinite-method</strong><strong>&nbsp;object</strong>&nbsp;is defined as an object that allows you to call any method and it will always return the name of the method.</p>\n\n<p>For example, if you execute&nbsp;<code>obj.abc123()</code>, it will return&nbsp;<code>&quot;abc123&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> method = &quot;abc123&quot;\n<strong>Output:</strong> &quot;abc123&quot;\n<strong>Explanation:</strong>\nconst obj = createInfiniteObject();\nobj[&#39;abc123&#39;](); // &quot;abc123&quot;\nThe returned string should always match the method name.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> method = &quot;.-qw73n|^2It&quot;\n<strong>Output:</strong> &quot;.-qw73n|^2It&quot;\n<strong>Explanation:</strong> The returned string should always match the method name.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= method.length &lt;= 1000</code></li>\n</ul>\n", "hints": ["Javascript has the concept of Proxy. That concept is critical to this problem.", "Override all \"get\" for the object. Return a function instead.", "That function should return the \"prop\", i.e. the method name."], "exampleTestcases": "\"abc123\"\n\".-qw73n|^2It\"", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @return {Object}\n */\nvar createInfiniteObject = function() {\n    \n};\n\n/**\n * const obj = createInfiniteObject();\n * obj['abc123'](); // \"abc123\"\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function createInfiniteObject(): Record<string, () => string> {\n    \n};\n\n/**\n * const obj = createInfiniteObject();\n * obj['abc123'](); // \"abc123\"\n */"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "immutability-helper", "title": "Immutability Helper", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "make-object-immutable", "title": "Make Object Immutable", "isPaidOnly": true}]}