{"question_id": "2772", "problem_slug": "infinite-method-object", "problem_title": "Infinite Method Object", "content": "Write a function that returns an infinite-method object.\nAn infinite-method object is defined as an object that allows you to call any method and it will always return the name of the method.\nFor example, if you execute obj.abc123(), it will return \"abc123\".\n \nExample 1:\n\nInput: method = \"abc123\"\nOutput: \"abc123\"\nExplanation:\nconst obj = createInfiniteObject();\nobj['abc123'](); // \"abc123\"\nThe returned string should always match the method name.\nExample 2:\n\nInput: method = \".-qw73n|^2It\"\nOutput: \".-qw73n|^2It\"\nExplanation: The returned string should always match the method name.\n \nConstraints:\n\n0 <= method.length <= 1000\n\n", "hints": ["Javascript has the concept of Proxy. That concept is critical to this problem.", "Override all \"get\" for the object. Return a function instead.", "That function should return the \"prop\", i.e. the method name."], "exampleTestcases": "\"abc123\"\n\".-qw73n|^2It\"", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @return {Object}\n */\nvar createInfiniteObject = function() {\n    \n};\n\n/**\n * const obj = createInfiniteObject();\n * obj['abc123'](); // \"abc123\"\n */"}, "TypeScript": {"langSlug": "typescript", "code": "function createInfiniteObject(): Record<string, () => string> {\n    \n};\n\n/**\n * const obj = createInfiniteObject();\n * obj['abc123'](); // \"abc123\"\n */"}}}