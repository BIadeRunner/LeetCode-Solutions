{"questionId": "191", "acRate": 72.69074673859275, "difficulty": "Easy", "freqBar": 56.15875629067223, "frontendQuestionId": "191", "paidOnly": false, "status": "ac", "title": "Number of 1 Bits", "topicTags": [{"name": "Divide and Conquer", "id": "VG9waWNUYWdOb2RlOjEy", "slug": "divide-and-conquer"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "number-of-1-bits", "content": "<p>Write a function that takes the binary representation of a positive integer and returns the number of <span data-keyword=\"set-bit\">set bits</span> it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>1011</strong> has a total of three set bits.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 128</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>10000000</strong> has a total of one set bit.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2147483645</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">30</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>1111111111111111111111111111101</strong> has a total of thirty set bits.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If this function is called many times, how would you optimize it?", "hints": [], "exampleTestcases": "11\n128\n2147483645", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int hammingWeight(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int hammingWeight(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int hammingWeight(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HammingWeight(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar hammingWeight = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hammingWeight(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function hammingWeight($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hammingWeight(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int hammingWeight(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func hammingWeight(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef hamming_weight(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hammingWeight(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn hamming_weight(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (hamming-weight n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec hamming_weight(N :: integer()) -> integer().\nhamming_weight(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec hamming_weight(n :: integer) :: integer\n  def hamming_weight(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "reverse-bits", "title": "Reverse Bits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "power-of-two", "title": "Power of Two", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "counting-bits", "title": "Counting Bits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "binary-watch", "title": "Binary Watch", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "hamming-distance", "title": "Hamming Distance", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "binary-number-with-alternating-bits", "title": "Binary Number with Alternating Bits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "prime-number-of-set-bits-in-binary-representation", "title": "Prime Number of Set Bits in Binary Representation", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "convert-date-to-binary", "title": "Convert Date to Binary", "isPaidOnly": false}]}