{"question_id": "3329", "problem_slug": "find-the-length-of-the-longest-common-prefix", "problem_title": "Find the Length of the Longest Common Prefix", "content": "You are given two arrays with positive integers arr1 and arr2.\nA prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not.\nA common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have a common prefix 565 while 1223 and 43456 do not have a common prefix.\nYou need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2.\nReturn the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0.\n \nExample 1:\n\nInput: arr1 = [1,10,100], arr2 = [1000]\nOutput: 3\nExplanation: There are 3 pairs (arr1[i], arr2[j]):\n- The longest common prefix of (1, 1000) is 1.\n- The longest common prefix of (10, 1000) is 10.\n- The longest common prefix of (100, 1000) is 100.\nThe longest common prefix is 100 with a length of 3.\n\nExample 2:\n\nInput: arr1 = [1,2,3], arr2 = [4,4,4]\nOutput: 0\nExplanation: There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.\nNote that common prefixes between elements of the same array do not count.\n\n \nConstraints:\n\n1 <= arr1.length, arr2.length <= 5 * 104\n1 <= arr1[i], arr2[i] <= 108\n\n", "hints": ["Put all the possible prefixes of each element in <code>arr1</code> into a HashSet.", "For all the possible prefixes of each element in <code>arr2</code>, check if it exists in the HashSet."], "exampleTestcases": "[1,10,100]\n[1000]\n[1,2,3]\n[4,4,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestCommonPrefix(int[] arr1, int[] arr2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestCommonPrefix(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestCommonPrefix(self, arr1: List[int], arr2: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestCommonPrefix(int* arr1, int arr1Size, int* arr2, int arr2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestCommonPrefix(int[] arr1, int[] arr2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number}\n */\nvar longestCommonPrefix = function(arr1, arr2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestCommonPrefix(arr1: number[], arr2: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer\n     */\n    function longestCommonPrefix($arr1, $arr2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestCommonPrefix(_ arr1: [Int], _ arr2: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestCommonPrefix(arr1: IntArray, arr2: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestCommonPrefix(List<int> arr1, List<int> arr2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestCommonPrefix(arr1 []int, arr2 []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer}\ndef longest_common_prefix(arr1, arr2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestCommonPrefix(arr1: Array[Int], arr2: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_common_prefix(arr1: Vec<i32>, arr2: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-common-prefix arr1 arr2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_common_prefix(Arr1 :: [integer()], Arr2 :: [integer()]) -> integer().\nlongest_common_prefix(Arr1, Arr2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_common_prefix(arr1 :: [integer], arr2 :: [integer]) :: integer\n  def longest_common_prefix(arr1, arr2) do\n    \n  end\nend"}}}