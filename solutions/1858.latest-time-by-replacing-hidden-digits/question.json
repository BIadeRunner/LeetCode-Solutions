{"questionId": "1858", "acRate": 42.980521056230835, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1736", "paidOnly": false, "status": "ac", "title": "Latest Time by Replacing Hidden Digits", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "latest-time-by-replacing-hidden-digits", "content": "<p>You are given a string <code>time</code> in the form of <code> hh:mm</code>, where some of the digits in the string are hidden (represented by <code>?</code>).</p>\n\n<p>The valid times are those inclusively between <code>00:00</code> and <code>23:59</code>.</p>\n\n<p>Return <em>the latest valid time you can get from</em> <code>time</code><em> by replacing the hidden</em> <em>digits</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;2?:?0&quot;\n<strong>Output:</strong> &quot;23:50&quot;\n<strong>Explanation:</strong> The latest hour beginning with the digit &#39;2&#39; is 23 and the latest minute ending with the digit &#39;0&#39; is 50.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;0?:3?&quot;\n<strong>Output:</strong> &quot;09:39&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;1?:22&quot;\n<strong>Output:</strong> &quot;19:22&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>time</code> is in the format <code>hh:mm</code>.</li>\n\t<li>It is guaranteed that you can produce a valid time from the given string.</li>\n</ul>\n", "hints": ["Trying out all possible solutions from biggest to smallest would fit in the time limit.", "To check if the solution is okay, you need to find out if it's valid and matches every character"], "exampleTestcases": "\"2?:?0\"\n\"0?:3?\"\n\"1?:22\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string maximumTime(string time) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String maximumTime(String time) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumTime(self, time: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* maximumTime(char* time) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MaximumTime(string time) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} time\n * @return {string}\n */\nvar maximumTime = function(time) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumTime(time: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $time\n     * @return String\n     */\n    function maximumTime($time) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumTime(_ time: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumTime(time: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String maximumTime(String time) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumTime(time string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} time\n# @return {String}\ndef maximum_time(time)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumTime(time: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_time(time: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-time time)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_time(Time :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmaximum_time(Time) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_time(time :: String.t) :: String.t\n  def maximum_time(time) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "number-of-valid-clock-times", "title": "Number of Valid Clock Times", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "latest-time-you-can-obtain-after-replacing-characters", "title": "Latest Time You Can Obtain After Replacing Characters", "isPaidOnly": false}]}