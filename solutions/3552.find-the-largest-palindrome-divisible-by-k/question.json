{"question_id": "3552", "problem_slug": "find-the-largest-palindrome-divisible-by-k", "problem_title": "Find the Largest Palindrome Divisible by K", "content": "You are given two positive integers n and k.\nAn integer x is called k-palindromic if:\n\nx is a palindrome.\nx is divisible by k.\n\nReturn the largest integer having n digits (as a string) that is k-palindromic.\nNote that the integer must not have leading zeros.\n \nExample 1:\n\nInput: n = 3, k = 5\nOutput: \"595\"\nExplanation:\n595 is the largest k-palindromic integer with 3 digits.\n\nExample 2:\n\nInput: n = 1, k = 4\nOutput: \"8\"\nExplanation:\n4 and 8 are the only k-palindromic integers with 1 digit.\n\nExample 3:\n\nInput: n = 5, k = 6\nOutput: \"89898\"\n\n \nConstraints:\n\n1 <= n <= 105\n1 <= k <= 9\n\n", "hints": ["It must have a solution since we can have all digits equal to <code>k</code>.", "Use string dp, store modulus along with length of number currently formed.", "Is it possible to solve greedily using divisibility rules?"], "exampleTestcases": "3\n5\n1\n4\n5\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestPalindrome(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* largestPalindrome(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LargestPalindrome(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar largestPalindrome = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestPalindrome(n: number, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function largestPalindrome($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestPalindrome(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestPalindrome(n: Int, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String largestPalindrome(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestPalindrome(n int, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef largest_palindrome(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestPalindrome(n: Int, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_palindrome(n: i32, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-palindrome n k)\n  (-> exact-integer? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_palindrome(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nlargest_palindrome(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_palindrome(n :: integer, k :: integer) :: String.t\n  def largest_palindrome(n, k) do\n    \n  end\nend"}}}