{"questionId": "3552", "acRate": 14.687212712866085, "difficulty": "Hard", "freqBar": 62.44851582765263, "frontendQuestionId": "3260", "paidOnly": false, "status": "ac", "title": "Find the Largest Palindrome Divisible by K", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "find-the-largest-palindrome-divisible-by-k", "content": "<p>You are given two <strong>positive</strong> integers <code>n</code> and <code>k</code>.</p>\n\n<p>An integer <code>x</code> is called <strong>k-palindromic</strong> if:</p>\n\n<ul>\n\t<li><code>x</code> is a <span data-keyword=\"palindrome-integer\">palindrome</span>.</li>\n\t<li><code>x</code> is divisible by <code>k</code>.</li>\n</ul>\n\n<p>Return the<strong> largest</strong> integer having <code>n</code> digits (as a string) that is <strong>k-palindromic</strong>.</p>\n\n<p><strong>Note</strong> that the integer must <strong>not</strong> have leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;595&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>595 is the largest k-palindromic integer with 3 digits.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;8&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>4 and 8 are the only k-palindromic integers with 1 digit.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;89898&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 9</code></li>\n</ul>\n", "hints": ["It must have a solution since we can have all digits equal to <code>k</code>.", "Use string dp, store modulus along with length of number currently formed.", "Is it possible to solve greedily using divisibility rules?"], "exampleTestcases": "3\n5\n1\n4\n5\n6", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestPalindrome(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* largestPalindrome(int n, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LargestPalindrome(int n, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar largestPalindrome = function(n, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestPalindrome(n: number, k: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function largestPalindrome($n, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestPalindrome(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestPalindrome(n: Int, k: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String largestPalindrome(int n, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func largestPalindrome(n int, k int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef largest_palindrome(n, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestPalindrome(n: Int, k: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_palindrome(n: i32, k: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (largest-palindrome n k)\n  (-> exact-integer? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec largest_palindrome(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nlargest_palindrome(N, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_palindrome(n :: integer, k :: integer) :: String.t\n  def largest_palindrome(n, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "palindrome-number", "title": "Palindrome Number", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "isPaidOnly": false}]}