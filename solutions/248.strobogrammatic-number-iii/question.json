{"question_id": "248", "problem_slug": "strobogrammatic-number-iii", "problem_title": "Strobogrammatic Number III", "content": "Given two strings low and high that represent two integers low and high where low <= high, return the number of strobogrammatic numbers in the range [low, high].\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\n \nExample 1:\nInput: low = \"50\", high = \"100\"\nOutput: 3\nExample 2:\nInput: low = \"0\", high = \"0\"\nOutput: 1\n\n \nConstraints:\n\n1 <= low.length, high.length <= 15\nlow and high consist of only digits.\nlow <= high\nlow and high do not contain any leading zeros except for zero itself.\n\n", "hints": [], "exampleTestcases": "\"50\"\n\"100\"\n\"0\"\n\"0\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int strobogrammaticInRange(string low, string high) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int strobogrammaticInRange(String low, String high) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def strobogrammaticInRange(self, low, high):\n        \"\"\"\n        :type low: str\n        :type high: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def strobogrammaticInRange(self, low: str, high: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int strobogrammaticInRange(char* low, char* high) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int StrobogrammaticInRange(string low, string high) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} low\n * @param {string} high\n * @return {number}\n */\nvar strobogrammaticInRange = function(low, high) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function strobogrammaticInRange(low: string, high: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $low\n     * @param String $high\n     * @return Integer\n     */\n    function strobogrammaticInRange($low, $high) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func strobogrammaticInRange(_ low: String, _ high: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun strobogrammaticInRange(low: String, high: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int strobogrammaticInRange(String low, String high) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func strobogrammaticInRange(low string, high string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} low\n# @param {String} high\n# @return {Integer}\ndef strobogrammatic_in_range(low, high)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def strobogrammaticInRange(low: String, high: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn strobogrammatic_in_range(low: String, high: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (strobogrammatic-in-range low high)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec strobogrammatic_in_range(Low :: unicode:unicode_binary(), High :: unicode:unicode_binary()) -> integer().\nstrobogrammatic_in_range(Low, High) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec strobogrammatic_in_range(low :: String.t, high :: String.t) :: integer\n  def strobogrammatic_in_range(low, high) do\n    \n  end\nend"}}}