{"question_id": "2649", "problem_slug": "count-total-number-of-colored-cells", "problem_title": "Count Total Number of Colored Cells", "content": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes:\n\nAt the first minute, color any arbitrary unit cell blue.\nEvery minute thereafter, color blue every uncolored cell that touches a blue cell.\n\nBelow is a pictorial representation of the state of the grid after minutes 1, 2, and 3.\n\nReturn the number of colored cells at the end of n minutes.\n \nExample 1:\n\nInput: n = 1\nOutput: 1\nExplanation: After 1 minute, there is only 1 blue cell, so we return 1.\n\nExample 2:\n\nInput: n = 2\nOutput: 5\nExplanation: After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5. \n\n \nConstraints:\n\n1 <= n <= 105\n\n", "hints": ["Derive a mathematical relation between total number of colored cells and the time elapsed in minutes."], "exampleTestcases": "1\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long coloredCells(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long coloredCells(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def coloredCells(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def coloredCells(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long coloredCells(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long ColoredCells(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar coloredCells = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function coloredCells(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function coloredCells($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func coloredCells(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun coloredCells(n: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int coloredCells(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func coloredCells(n int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef colored_cells(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def coloredCells(n: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn colored_cells(n: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (colored-cells n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec colored_cells(N :: integer()) -> integer().\ncolored_cells(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec colored_cells(n :: integer) :: integer\n  def colored_cells(n) do\n    \n  end\nend"}}}