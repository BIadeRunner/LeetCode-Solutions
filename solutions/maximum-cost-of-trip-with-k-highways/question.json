{"questionId": "2007", "acRate": 50.25085819910219, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2247", "paidOnly": true, "status": "ac", "title": "Maximum Cost of Trip With K Highways", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "maximum-cost-of-trip-with-k-highways", "content": "<p>A series of highways connect <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>highways</code> where <code>highways[i] = [city1<sub>i</sub>, city2<sub>i</sub>, toll<sub>i</sub>]</code> indicates that there is a highway that connects <code>city1<sub>i</sub></code> and <code>city2<sub>i</sub></code>, allowing a car to go from <code>city1<sub>i</sub></code> to <code>city2<sub>i</sub></code> and <strong>vice versa</strong> for a cost of <code>toll<sub>i</sub></code>.</p>\n\n<p>You are also given an integer <code>k</code>. You are going on a trip that crosses <strong>exactly</strong> <code>k</code> highways. You may start at any city, but you may only visit each city <strong>at most</strong> once during your trip.</p>\n\n<p>Return<em> the <strong>maximum</strong> cost of your trip. If there is no trip that meets the requirements, return </em><code>-1</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/04/18/image-20220418173304-1.png\" style=\"height: 200px; width: 327px;\" />\n<pre>\n<strong>Input:</strong> n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], k = 3\n<strong>Output:</strong> 17\n<strong>Explanation:</strong>\nOne possible trip is to go from 0 -&gt; 1 -&gt; 4 -&gt; 3. The cost of this trip is 4 + 11 + 2 = 17.\nAnother possible trip is to go from 4 -&gt; 1 -&gt; 2 -&gt; 3. The cost of this trip is 11 + 3 + 3 = 17.\nIt can be proven that 17 is the maximum possible cost of any valid trip.\n\nNote that the trip 4 -&gt; 1 -&gt; 0 -&gt; 1 is not allowed because you visit the city 1 twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/04/18/image-20220418173342-2.png\" style=\"height: 200px; width: 217px;\" />\n<pre>\n<strong>Input:</strong> n = 4, highways = [[0,1,3],[2,3,2]], k = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no valid trips of length 2, so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\n\t<li><code>1 &lt;= highways.length &lt;= 50</code></li>\n\t<li><code>highways[i].length == 3</code></li>\n\t<li><code>0 &lt;= city1<sub>i</sub>, city2<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>city1<sub>i</sub> != city2<sub>i</sub></code></li>\n\t<li><code>0 &lt;= toll<sub>i</sub> &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n\t<li>There are no duplicate highways.</li>\n</ul>\n", "hints": ["Are there any computations being repeated?", "The same path can be visited multiple times. Could we reuse the previously calculated result?", "Store the nodes seen on the current path and the last node on the current path as a dynamic programming state."], "exampleTestcases": "5\n[[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]]\n3\n4\n[[0,1,3],[2,3,2]]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumCost(int n, vector<vector<int>>& highways, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumCost(int n, int[][] highways, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumCost(self, n, highways, k):\n        \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumCost(self, n: int, highways: List[List[int]], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumCost(int n, int** highways, int highwaysSize, int* highwaysColSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumCost(int n, int[][] highways, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} highways\n * @param {number} k\n * @return {number}\n */\nvar maximumCost = function(n, highways, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumCost(n: number, highways: number[][], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $highways\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumCost($n, $highways, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumCost(_ n: Int, _ highways: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumCost(n: Int, highways: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumCost(int n, List<List<int>> highways, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumCost(n int, highways [][]int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} highways\n# @param {Integer} k\n# @return {Integer}\ndef maximum_cost(n, highways, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumCost(n: Int, highways: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_cost(n: i32, highways: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-cost n highways k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_cost(N :: integer(), Highways :: [[integer()]], K :: integer()) -> integer().\nmaximum_cost(N, Highways, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_cost(n :: integer, highways :: [[integer]], k :: integer) :: integer\n  def maximum_cost(n, highways, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "isPaidOnly": true}]}