{"questionId": "2099", "acRate": 81.35235575711766, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1967", "paidOnly": false, "status": "ac", "title": "Number of Strings That Appear as Substrings in Word", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "number-of-strings-that-appear-as-substrings-in-word", "content": "<p>Given an array of strings <code>patterns</code> and a string <code>word</code>, return <em>the <strong>number</strong> of strings in </em><code>patterns</code><em> that exist as a <strong>substring</strong> in </em><code>word</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> patterns = [&quot;a&quot;,&quot;abc&quot;,&quot;bc&quot;,&quot;d&quot;], word = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- &quot;a&quot; appears as a substring in &quot;<u>a</u>bc&quot;.\n- &quot;abc&quot; appears as a substring in &quot;<u>abc</u>&quot;.\n- &quot;bc&quot; appears as a substring in &quot;a<u>bc</u>&quot;.\n- &quot;d&quot; does not appear as a substring in &quot;abc&quot;.\n3 of the strings in patterns appear as a substring in word.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> patterns = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], word = &quot;aaaaabbbbb&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- &quot;a&quot; appears as a substring in &quot;a<u>a</u>aaabbbbb&quot;.\n- &quot;b&quot; appears as a substring in &quot;aaaaabbbb<u>b</u>&quot;.\n- &quot;c&quot; does not appear as a substring in &quot;aaaaabbbbb&quot;.\n2 of the strings in patterns appear as a substring in word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> patterns = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;], word = &quot;ab&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Each of the patterns appears as a substring in word &quot;<u>a</u>b&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= patterns.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= patterns[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>patterns[i]</code> and <code>word</code> consist of lowercase English letters.</li>\n</ul>\n", "hints": ["Deal with each of the patterns individually.", "Use the built-in function in the language you are using to find if the pattern exists as a substring in <code>word</code>."], "exampleTestcases": "[\"a\",\"abc\",\"bc\",\"d\"]\n\"abc\"\n[\"a\",\"b\",\"c\"]\n\"aaaaabbbbb\"\n[\"a\",\"a\",\"a\"]\n\"ab\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numOfStrings(vector<string>& patterns, string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numOfStrings(String[] patterns, String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numOfStrings(self, patterns, word):\n        \"\"\"\n        :type patterns: List[str]\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numOfStrings(char** patterns, int patternsSize, char* word) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumOfStrings(string[] patterns, string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} patterns\n * @param {string} word\n * @return {number}\n */\nvar numOfStrings = function(patterns, word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numOfStrings(patterns: string[], word: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $patterns\n     * @param String $word\n     * @return Integer\n     */\n    function numOfStrings($patterns, $word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numOfStrings(_ patterns: [String], _ word: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numOfStrings(patterns: Array<String>, word: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numOfStrings(List<String> patterns, String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numOfStrings(patterns []string, word string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} patterns\n# @param {String} word\n# @return {Integer}\ndef num_of_strings(patterns, word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numOfStrings(patterns: Array[String], word: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_of_strings(patterns: Vec<String>, word: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-of-strings patterns word)\n  (-> (listof string?) string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_of_strings(Patterns :: [unicode:unicode_binary()], Word :: unicode:unicode_binary()) -> integer().\nnum_of_strings(Patterns, Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_of_strings(patterns :: [String.t], word :: String.t) :: integer\n  def num_of_strings(patterns, word) do\n    \n  end\nend"}], "similarQuestionList": []}