{"questionId": "980", "acRate": 44.23991967754609, "difficulty": "Hard", "freqBar": 66.33343109125515, "frontendQuestionId": "943", "paidOnly": false, "status": "ac", "title": "Find the Shortest Superstring", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "find-the-shortest-superstring", "content": "<p>Given an array of strings <code>words</code>, return <em>the smallest string that contains each string in</em> <code>words</code> <em>as a substring</em>. If there are multiple valid strings of the smallest length, return <strong>any of them</strong>.</p>\n\n<p>You may assume that no string in <code>words</code> is a substring of another string in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>Output:</strong> &quot;alexlovesleetcode&quot;\n<strong>Explanation:</strong> All permutations of &quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot; would also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>Output:</strong> &quot;gctaagttcatgcatc&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"alex\",\"loves\",\"leetcode\"]\n[\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shortestSuperstring(vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shortestSuperstring(String[] words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestSuperstring(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestSuperstring(self, words: List[str]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* shortestSuperstring(char** words, int wordsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShortestSuperstring(string[] words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string}\n */\nvar shortestSuperstring = function(words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestSuperstring(words: string[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function shortestSuperstring($words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestSuperstring(_ words: [String]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestSuperstring(words: Array<String>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String shortestSuperstring(List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestSuperstring(words []string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String}\ndef shortest_superstring(words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestSuperstring(words: Array[String]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_superstring(words: Vec<String>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (shortest-superstring words)\n  (-> (listof string?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec shortest_superstring(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nshortest_superstring(Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_superstring(words :: [String.t]) :: String.t\n  def shortest_superstring(words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "isPaidOnly": false}]}