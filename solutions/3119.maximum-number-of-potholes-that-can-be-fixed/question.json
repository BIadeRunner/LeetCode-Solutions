{"questionId": "3425", "acRate": 58.12124016658954, "difficulty": "Medium", "freqBar": 62.30851264999113, "frontendQuestionId": "3119", "paidOnly": true, "status": "ac", "title": "Maximum Number of Potholes That Can Be Fixed", "titleSlug": "maximum-number-of-potholes-that-can-be-fixed", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "content": "<p>You are given a string <code>road</code>, consisting only of characters <code>&quot;x&quot;</code> and <code>&quot;.&quot;</code>, where each <code>&quot;x&quot;</code> denotes a <em>pothole</em> and each <code>&quot;.&quot;</code> denotes a smooth road, and an integer <code>budget</code>.</p>\n\n<p>In one repair operation, you can repair <code>n</code> <strong>consecutive</strong> potholes for a price of <code>n + 1</code>.</p>\n\n<p>Return the <strong>maximum</strong> number of potholes that can be fixed such that the sum of the prices of all of the fixes <strong>doesn&#39;t go over</strong> the given budget.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">road = &quot;..&quot;, budget = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no potholes to be fixed.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">road = &quot;..xxxxx&quot;, budget = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We fix the first three potholes (they are consecutive). The budget needed for this task is <code>3 + 1 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">road = &quot;x.x.xxx...x&quot;, budget = 14</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can fix all the potholes. The total cost would be <code>(1 + 1) + (1 + 1) + (3 + 1) + (1 + 1) = 10</code> which is within our budget of 14.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= road.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= budget &lt;= 10<sup>5</sup> + 1</code></li>\n\t<li><code>road</code> consists only of characters <code>&#39;.&#39;</code> and <code>&#39;x&#39;</code>.</li>\n</ul>\n", "hints": ["Find all consecutive blocks of <code>’x’</code>.", "Sort them by their length.", "Try to fix the block from the largest one until you have enough budget."], "exampleTestcases": "\"..\"\n5\n\"..xxxxx\"\n4\n\"x.x.xxx...x\"\n14", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxPotholes(string road, int budget) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxPotholes(String road, int budget) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxPotholes(self, road, budget):\n        \"\"\"\n        :type road: str\n        :type budget: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxPotholes(self, road: str, budget: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxPotholes(char* road, int budget) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxPotholes(string road, int budget) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} road\n * @param {number} budget\n * @return {number}\n */\nvar maxPotholes = function(road, budget) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxPotholes(road: string, budget: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $road\n     * @param Integer $budget\n     * @return Integer\n     */\n    function maxPotholes($road, $budget) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxPotholes(_ road: String, _ budget: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxPotholes(road: String, budget: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxPotholes(String road, int budget) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxPotholes(road string, budget int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} road\n# @param {Integer} budget\n# @return {Integer}\ndef max_potholes(road, budget)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxPotholes(road: String, budget: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_potholes(road: String, budget: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-potholes road budget)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_potholes(Road :: unicode:unicode_binary(), Budget :: integer()) -> integer().\nmax_potholes(Road, Budget) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_potholes(road :: String.t, budget :: integer) :: integer\n  def max_potholes(road, budget) do\n    \n  end\nend"}], "similarQuestionList": []}