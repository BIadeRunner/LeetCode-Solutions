{"question_id": "3427", "problem_slug": "special-array-ii", "problem_title": "Special Array II", "content": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity.\nYou are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not.\nReturn an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.\n \nExample 1:\n\nInput: nums = [3,4,1,2,6], queries = [[0,4]]\nOutput: [false]\nExplanation:\nThe subarray is [3,4,1,2,6]. 2 and 6 are both even.\n\nExample 2:\n\nInput: nums = [4,3,1,6], queries = [[0,2],[2,3]]\nOutput: [false,true]\nExplanation:\n\nThe subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false.\nThe subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.\n\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\n1 <= queries.length <= 105\nqueries[i].length == 2\n0 <= queries[i][0] <= queries[i][1] <= nums.length - 1\n\n", "hints": ["Try to split the array into some non-intersected continuous special subarrays.", "For each query check that the first and the last elements of that query are in the same subarray or not."], "exampleTestcases": "[3,4,1,2,6]\n[[0,4]]\n[4,3,1,6]\n[[0,2],[2,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> isArraySpecial(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean[] isArraySpecial(int[] nums, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isArraySpecial(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* isArraySpecial(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool[] IsArraySpecial(int[] nums, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar isArraySpecial = function(nums, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isArraySpecial(nums: number[], queries: number[][]): boolean[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function isArraySpecial($nums, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isArraySpecial(_ nums: [Int], _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isArraySpecial(nums: IntArray, queries: Array<IntArray>): BooleanArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<bool> isArraySpecial(List<int> nums, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isArraySpecial(nums []int, queries [][]int) []bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef is_array_special(nums, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isArraySpecial(nums: Array[Int], queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_array_special(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-array-special nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof boolean?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_array_special(Nums :: [integer()], Queries :: [[integer()]]) -> [boolean()].\nis_array_special(Nums, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_array_special(nums :: [integer], queries :: [[integer]]) :: [boolean]\n  def is_array_special(nums, queries) do\n    \n  end\nend"}}}