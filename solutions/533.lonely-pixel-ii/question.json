{"questionId": "533", "acRate": 48.72911866359447, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "533", "paidOnly": true, "status": "ac", "title": "Lonely Pixel II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "lonely-pixel-ii", "content": "<p>Given an <code>m x n</code> <code>picture</code> consisting of black <code>&#39;B&#39;</code> and white <code>&#39;W&#39;</code> pixels and an integer target, return <em>the number of <b>black</b> lonely pixels</em>.</p>\n\n<p>A black lonely pixel is a character <code>&#39;B&#39;</code> that located at a specific position <code>(r, c)</code> where:</p>\n\n<ul>\n\t<li>Row <code>r</code> and column <code>c</code> both contain exactly <code>target</code> black pixels.</li>\n\t<li>For all rows that have a black pixel at column <code>c</code>, they should be exactly the same as row <code>r</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/pixel2-1-grid.jpg\" style=\"width: 493px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> picture = [[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;,&quot;B&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;,&quot;B&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;,&quot;B&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;W&quot;,&quot;W&quot;,&quot;B&quot;,&quot;W&quot;,&quot;B&quot;,&quot;W&quot;]], target = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> All the green &#39;B&#39; are the black pixels we need (all &#39;B&#39;s at column 1 and 3).\nTake &#39;B&#39; at row r = 0 and column c = 1 as an example:\n - Rule 1, row r = 0 and column c = 1 both have exactly target = 3 black pixels. \n - Rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. They are exactly the same as row r = 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/pixel2-2-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> picture = [[&quot;W&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;W&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;W&quot;,&quot;W&quot;,&quot;B&quot;]], target = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;picture.length</code></li>\n\t<li><code>n ==&nbsp;picture[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>picture[i][j]</code> is <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n\t<li><code>1 &lt;= target &lt;= min(m, n)</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]]\n3\n[[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"]]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findBlackPixel(vector<vector<char>>& picture, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findBlackPixel(char[][] picture, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findBlackPixel(self, picture, target):\n        \"\"\"\n        :type picture: List[List[str]]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findBlackPixel(self, picture: List[List[str]], target: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findBlackPixel(char** picture, int pictureSize, int* pictureColSize, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindBlackPixel(char[][] picture, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} picture\n * @param {number} target\n * @return {number}\n */\nvar findBlackPixel = function(picture, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findBlackPixel(picture: string[][], target: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $picture\n     * @param Integer $target\n     * @return Integer\n     */\n    function findBlackPixel($picture, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findBlackPixel(_ picture: [[Character]], _ target: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findBlackPixel(picture: Array<CharArray>, target: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findBlackPixel(List<List<String>> picture, int target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findBlackPixel(picture [][]byte, target int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} picture\n# @param {Integer} target\n# @return {Integer}\ndef find_black_pixel(picture, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findBlackPixel(picture: Array[Array[Char]], target: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_black_pixel(picture: Vec<Vec<char>>, target: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-black-pixel picture target)\n  (-> (listof (listof char?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_black_pixel(Picture :: [[char()]], Target :: integer()) -> integer().\nfind_black_pixel(Picture, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_black_pixel(picture :: [[char]], target :: integer) :: integer\n  def find_black_pixel(picture, target) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "lonely-pixel-i", "title": "Lonely Pixel I", "isPaidOnly": true}]}