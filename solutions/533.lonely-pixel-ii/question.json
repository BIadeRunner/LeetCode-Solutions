{"question_id": "533", "problem_slug": "lonely-pixel-ii", "problem_title": "Lonely Pixel II", "content": "Given an m x n picture consisting of black 'B' and white 'W' pixels and an integer target, return the number of black lonely pixels.\nA black lonely pixel is a character 'B' that located at a specific position (r, c) where:\n\nRow r and column c both contain exactly target black pixels.\nFor all rows that have a black pixel at column c, they should be exactly the same as row r.\n\n \nExample 1:\n\n\nInput: picture = [[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]], target = 3\nOutput: 6\nExplanation: All the green 'B' are the black pixels we need (all 'B's at column 1 and 3).\nTake 'B' at row r = 0 and column c = 1 as an example:\n - Rule 1, row r = 0 and column c = 1 both have exactly target = 3 black pixels. \n - Rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. They are exactly the same as row r = 0.\n\nExample 2:\n\n\nInput: picture = [[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"]], target = 1\nOutput: 0\n\n \nConstraints:\n\nm == picture.length\nn == picture[i].length\n1 <= m, n <= 200\npicture[i][j] is 'W' or 'B'.\n1 <= target <= min(m, n)\n\n", "hints": [], "exampleTestcases": "[[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]]\n3\n[[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"]]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findBlackPixel(vector<vector<char>>& picture, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findBlackPixel(char[][] picture, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findBlackPixel(self, picture, target):\n        \"\"\"\n        :type picture: List[List[str]]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findBlackPixel(self, picture: List[List[str]], target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findBlackPixel(char** picture, int pictureSize, int* pictureColSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindBlackPixel(char[][] picture, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} picture\n * @param {number} target\n * @return {number}\n */\nvar findBlackPixel = function(picture, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findBlackPixel(picture: string[][], target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $picture\n     * @param Integer $target\n     * @return Integer\n     */\n    function findBlackPixel($picture, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findBlackPixel(_ picture: [[Character]], _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findBlackPixel(picture: Array<CharArray>, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findBlackPixel(List<List<String>> picture, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findBlackPixel(picture [][]byte, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} picture\n# @param {Integer} target\n# @return {Integer}\ndef find_black_pixel(picture, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findBlackPixel(picture: Array[Array[Char]], target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_black_pixel(picture: Vec<Vec<char>>, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-black-pixel picture target)\n  (-> (listof (listof char?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_black_pixel(Picture :: [[char()]], Target :: integer()) -> integer().\nfind_black_pixel(Picture, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_black_pixel(picture :: [[char]], target :: integer) :: integer\n  def find_black_pixel(picture, target) do\n    \n  end\nend"}}}