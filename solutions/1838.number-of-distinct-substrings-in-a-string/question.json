{"question_id": "1838", "problem_slug": "number-of-distinct-substrings-in-a-string", "problem_title": "Number of Distinct Substrings in a String", "content": "Given a string s, return the number of distinct substrings of s.\nA substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.\n \nExample 1:\n\nInput: s = \"aabbaba\"\nOutput: 21\nExplanation: The set of distinct strings is [\"a\",\"b\",\"aa\",\"bb\",\"ab\",\"ba\",\"aab\",\"abb\",\"bab\",\"bba\",\"aba\",\"aabb\",\"abba\",\"bbab\",\"baba\",\"aabba\",\"abbab\",\"bbaba\",\"aabbab\",\"abbaba\",\"aabbaba\"]\n\nExample 2:\n\nInput: s = \"abcdefg\"\nOutput: 28\n\n \nConstraints:\n\n1 <= s.length <= 500\ns consists of lowercase English letters.\n\n \nFollow up: Can you solve this problem in O(n) time complexity?", "hints": ["Calculate the prefix hashing array for s.", "Use the prefix hashing array to calculate the hashing value of each substring.", "Compare the hashing values to determine the unique substrings.", "There could be collisions if you use hashing, what about double hashing."], "exampleTestcases": "\"aabbaba\"\n\"abcdefg\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countDistinct(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countDistinct(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countDistinct(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countDistinct(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountDistinct(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countDistinct = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countDistinct(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countDistinct($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countDistinct(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countDistinct(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countDistinct(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countDistinct(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_distinct(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countDistinct(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_distinct(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-distinct s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_distinct(S :: unicode:unicode_binary()) -> integer().\ncount_distinct(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_distinct(s :: String.t) :: integer\n  def count_distinct(s) do\n    \n  end\nend"}}}