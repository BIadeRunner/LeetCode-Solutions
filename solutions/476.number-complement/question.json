{"question_id": "476", "problem_slug": "number-complement", "problem_title": "Number Complement", "content": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n\nGiven an integer num, return its complement.\n \nExample 1:\n\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n\nExample 2:\n\nInput: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n \nConstraints:\n\n1 <= num < 231\n\n \nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n", "hints": [], "exampleTestcases": "5\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findComplement(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findComplement(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findComplement(self, num: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findComplement(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindComplement(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar findComplement = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findComplement(num: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function findComplement($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findComplement(_ num: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findComplement(num: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findComplement(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findComplement(num int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef find_complement(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findComplement(num: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_complement(num: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-complement num)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_complement(Num :: integer()) -> integer().\nfind_complement(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_complement(num :: integer) :: integer\n  def find_complement(num) do\n    \n  end\nend"}}}