{"question_id": "786", "problem_slug": "search-in-a-sorted-array-of-unknown-size", "problem_title": "Search in a Sorted Array of Unknown Size", "content": "This is an interactive problem.\nYou have a sorted array of unique elements and an unknown size. You do not have an access to the array but you can use the ArrayReader interface to access it. You can call ArrayReader.get(i) that:\n\nreturns the value at the ith index (0-indexed) of the secret array (i.e., secret[i]), or\nreturns 231 - 1 if the i is out of the boundary of the array.\n\nYou are also given an integer target.\nReturn the index k of the hidden array where secret[k] == target or return -1 otherwise.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\n\nInput: secret = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in secret and its index is 4.\n\nExample 2:\n\nInput: secret = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in secret so return -1.\n\n \nConstraints:\n\n1 <= secret.length <= 104\n-104 <= secret[i], target <= 104\nsecret is sorted in a strictly increasing order.\n\n", "hints": [], "exampleTestcases": "[-1,0,3,5,9,12]\n9\n[-1,0,3,5,9,12]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *   public:\n *     int get(int index);\n * };\n */\n\nclass Solution {\npublic:\n    int search(const ArrayReader& reader, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     public int get(int index) {}\n * }\n */\n\nclass Solution {\n    public int search(ArrayReader reader, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#    def get(self, index):\n#        \"\"\"\n#        :type index: int\n#        :rtype int\n#        \"\"\"\n\nclass Solution(object):\n    def search(self, reader, target):\n        \"\"\"\n        :type reader: ArrayReader\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader:\n#    def get(self, index: int) -> int:\n\nclass Solution:\n    def search(self, reader: 'ArrayReader', target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * int getElement(ArrayReader *, int index);\n */\n\nint search(struct ArrayReader* reader, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     public int Get(int index) {}\n * }\n */\n\nclass Solution {\n    public int Search(ArrayReader reader, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * function ArrayReader() {\n *\n *     @param {number} index\n *     @return {number}\n *     this.get = function(index) {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {ArrayReader} reader\n * @param {number} target\n * @return {number}\n */\nvar search = function (reader, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * class ArrayReader {\n *\t\t// This is the ArrayReader's API interface.\n *\t\t// You should not implement it, or speculate about its implementation\n *\t\tget(index: number): number {};\n *  };\n */\n\nfunction search(reader: ArrayReader, target: number): number {\n\t\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     function get($index) {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param ArrayReader $reader\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($reader, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * public class ArrayReader {\n *     public func get(_ index: Int) -> Int {}\n * }\n */\n\nclass Solution {\n    func search(_ reader: ArrayReader, _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     fun get(index: Int): Int {}\n * }\n */\n\nclass Solution {\n    fun search(reader: ArrayReader, target: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * type ArrayReader struct {\n * }\n *\n * func (this *ArrayReader) get(index int) int {}\n */\n\nfunc search(reader ArrayReader, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# class ArrayReader\n#     def get(index)\n#\t\t\n#     end\n# end\n\n# @param {ArrayReader} reader\n# @param {int} target\n# @return {int}\ndef search(reader, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     def get(index: Int): Int = {}\n * }\n */\n\nobject Solution {\n    def search(reader: ArrayReader, target: Int): Int = {\n        \n    }\n}"}}}