{"question_id": "1445", "problem_slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold", "problem_title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold", "content": "Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.\n \nExample 1:\n\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\nExample 2:\n\nInput: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\nOutput: 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\n \nConstraints:\n\n1 <= arr.length <= 105\n1 <= arr[i] <= 104\n1 <= k <= arr.length\n0 <= threshold <= 104\n\n", "hints": ["Start with a window of size K and test its average against the threshold.", "Keep moving the window by one element maintaining its size k until you cover the whole array. Count the number of windows that have an average greater than or equal to the threshold."], "exampleTestcases": "[2,2,2,2,5,5,5,8]\n3\n4\n[11,13,17,23,29,31,7,5,2,3]\n3\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numOfSubarrays(vector<int>& arr, int k, int threshold) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numOfSubarrays(self, arr, k, threshold):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numOfSubarrays(int* arr, int arrSize, int k, int threshold) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumOfSubarrays(int[] arr, int k, int threshold) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @param {number} threshold\n * @return {number}\n */\nvar numOfSubarrays = function(arr, k, threshold) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numOfSubarrays(arr: number[], k: number, threshold: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function numOfSubarrays($arr, $k, $threshold) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numOfSubarrays(_ arr: [Int], _ k: Int, _ threshold: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numOfSubarrays(arr: IntArray, k: Int, threshold: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numOfSubarrays(List<int> arr, int k, int threshold) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numOfSubarrays(arr []int, k int, threshold int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @param {Integer} threshold\n# @return {Integer}\ndef num_of_subarrays(arr, k, threshold)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numOfSubarrays(arr: Array[Int], k: Int, threshold: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_of_subarrays(arr: Vec<i32>, k: i32, threshold: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-of-subarrays arr k threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_of_subarrays(Arr :: [integer()], K :: integer(), Threshold :: integer()) -> integer().\nnum_of_subarrays(Arr, K, Threshold) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_of_subarrays(arr :: [integer], k :: integer, threshold :: integer) :: integer\n  def num_of_subarrays(arr, k, threshold) do\n    \n  end\nend"}}}