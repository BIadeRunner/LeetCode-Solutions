{"question_id": "788", "problem_slug": "minimize-max-distance-to-gas-station", "problem_title": "Minimize Max Distance to Gas Station", "content": "You are given an integer array stations that represents the positions of the gas stations on the x-axis. You are also given an integer k.\nYou should add k new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.\nLet penalty() be the maximum distance between adjacent gas stations after adding the k new stations.\nReturn the smallest possible value of penalty(). Answers within 10-6 of the actual answer will be accepted.\n \nExample 1:\nInput: stations = [1,2,3,4,5,6,7,8,9,10], k = 9\nOutput: 0.50000\nExample 2:\nInput: stations = [23,24,36,39,46,56,57,65,84,98], k = 1\nOutput: 14.00000\n\n \nConstraints:\n\n10 <= stations.length <= 2000\n0 <= stations[i] <= 108\nstations is sorted in a strictly increasing order.\n1 <= k <= 106\n\n", "hints": ["Use a binary search.  We'll binary search the monotone function \"possible(D) = can we use K or less gas stations to ensure each adjacent distance between gas stations is at most D?\""], "exampleTestcases": "[1,2,3,4,5,6,7,8,9,10]\n9\n[23,24,36,39,46,56,57,65,84,98]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double minmaxGasDist(vector<int>& stations, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double minmaxGasDist(int[] stations, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minmaxGasDist(self, stations, k):\n        \"\"\"\n        :type stations: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minmaxGasDist(self, stations: List[int], k: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double minmaxGasDist(int* stations, int stationsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double MinmaxGasDist(int[] stations, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} stations\n * @param {number} k\n * @return {number}\n */\nvar minmaxGasDist = function(stations, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minmaxGasDist(stations: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stations\n     * @param Integer $k\n     * @return Float\n     */\n    function minmaxGasDist($stations, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minmaxGasDist(_ stations: [Int], _ k: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minmaxGasDist(stations: IntArray, k: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double minmaxGasDist(List<int> stations, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minmaxGasDist(stations []int, k int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} stations\n# @param {Integer} k\n# @return {Float}\ndef minmax_gas_dist(stations, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minmaxGasDist(stations: Array[Int], k: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minmax_gas_dist(stations: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minmax-gas-dist stations k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minmax_gas_dist(Stations :: [integer()], K :: integer()) -> float().\nminmax_gas_dist(Stations, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minmax_gas_dist(stations :: [integer], k :: integer) :: float\n  def minmax_gas_dist(stations, k) do\n    \n  end\nend"}}}