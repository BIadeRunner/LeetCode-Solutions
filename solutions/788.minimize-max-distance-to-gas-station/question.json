{"questionId": "788", "acRate": 52.47725143851197, "difficulty": "Hard", "freqBar": 50.224624396766075, "frontendQuestionId": "774", "paidOnly": true, "status": "ac", "title": "Minimize Max Distance to Gas Station", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimize-max-distance-to-gas-station", "content": "<p>You are given an integer array <code>stations</code> that represents the positions of the gas stations on the <strong>x-axis</strong>. You are also given an integer <code>k</code>.</p>\n\n<p>You should add <code>k</code> new gas stations. You can add the stations anywhere on the <strong>x-axis</strong>, and not necessarily on an integer position.</p>\n\n<p>Let <code>penalty()</code> be the maximum distance between <strong>adjacent</strong> gas stations after adding the <code>k</code> new stations.</p>\n\n<p>Return <em>the smallest possible value of</em> <code>penalty()</code>. Answers within <code>10<sup>-6</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> stations = [1,2,3,4,5,6,7,8,9,10], k = 9\n<strong>Output:</strong> 0.50000\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> stations = [23,24,36,39,46,56,57,65,84,98], k = 1\n<strong>Output:</strong> 14.00000\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>10 &lt;= stations.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stations[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>stations</code> is sorted in a <strong>strictly increasing</strong> order.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Use a binary search.  We'll binary search the monotone function \"possible(D) = can we use K or less gas stations to ensure each adjacent distance between gas stations is at most D?\""], "exampleTestcases": "[1,2,3,4,5,6,7,8,9,10]\n9\n[23,24,36,39,46,56,57,65,84,98]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double minmaxGasDist(vector<int>& stations, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double minmaxGasDist(int[] stations, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minmaxGasDist(self, stations, k):\n        \"\"\"\n        :type stations: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minmaxGasDist(self, stations: List[int], k: int) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double minmaxGasDist(int* stations, int stationsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double MinmaxGasDist(int[] stations, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} stations\n * @param {number} k\n * @return {number}\n */\nvar minmaxGasDist = function(stations, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minmaxGasDist(stations: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stations\n     * @param Integer $k\n     * @return Float\n     */\n    function minmaxGasDist($stations, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minmaxGasDist(_ stations: [Int], _ k: Int) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minmaxGasDist(stations: IntArray, k: Int): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double minmaxGasDist(List<int> stations, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minmaxGasDist(stations []int, k int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} stations\n# @param {Integer} k\n# @return {Float}\ndef minmax_gas_dist(stations, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minmaxGasDist(stations: Array[Int], k: Int): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minmax_gas_dist(stations: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minmax-gas-dist stations k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minmax_gas_dist(Stations :: [integer()], K :: integer()) -> float().\nminmax_gas_dist(Stations, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minmax_gas_dist(stations :: [integer], k :: integer) :: float\n  def minmax_gas_dist(stations, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "koko-eating-bananas", "title": "Koko Eating Bananas", "isPaidOnly": false}]}