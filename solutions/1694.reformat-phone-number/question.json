{"questionId": "1812", "acRate": 66.43402644076498, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1694", "paidOnly": false, "status": "ac", "title": "Reformat Phone Number", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "reformat-phone-number", "content": "<p>You are given a phone number as a string <code>number</code>. <code>number</code> consists of digits, spaces <code>&#39; &#39;</code>, and/or dashes <code>&#39;-&#39;</code>.</p>\n\n<p>You would like to reformat the phone number in a certain manner. Firstly, <strong>remove</strong> all spaces and dashes. Then, <strong>group</strong> the digits from left to right into blocks of length 3 <strong>until</strong> there are 4 or fewer digits. The final digits are then grouped as follows:</p>\n\n<ul>\n\t<li>2 digits: A single block of length 2.</li>\n\t<li>3 digits: A single block of length 3.</li>\n\t<li>4 digits: Two blocks of length 2 each.</li>\n</ul>\n\n<p>The blocks are then joined by dashes. Notice that the reformatting process should <strong>never</strong> produce any blocks of length 1 and produce <strong>at most</strong> two blocks of length 2.</p>\n\n<p>Return <em>the phone number after formatting.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;1-23-45 6&quot;\n<strong>Output:</strong> &quot;123-456&quot;\n<strong>Explanation:</strong> The digits are &quot;123456&quot;.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is &quot;123&quot;.\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is &quot;456&quot;.\nJoining the blocks gives &quot;123-456&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;123 4-567&quot;\n<strong>Output:</strong> &quot;123-45-67&quot;\n<strong>Explanation: </strong>The digits are &quot;1234567&quot;.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is &quot;123&quot;.\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are &quot;45&quot; and &quot;67&quot;.\nJoining the blocks gives &quot;123-45-67&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;123 4-5678&quot;\n<strong>Output:</strong> &quot;123-456-78&quot;\n<strong>Explanation:</strong> The digits are &quot;12345678&quot;.\nStep 1: The 1st block is &quot;123&quot;.\nStep 2: The 2nd block is &quot;456&quot;.\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is &quot;78&quot;.\nJoining the blocks gives &quot;123-456-78&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= number.length &lt;= 100</code></li>\n\t<li><code>number</code> consists of digits and the characters <code>&#39;-&#39;</code> and <code>&#39; &#39;</code>.</li>\n\t<li>There are at least <strong>two</strong> digits in <code>number</code>.</li>\n</ul>\n", "hints": ["Discard all the spaces and dashes.", "Use a while loop. While the string still has digits, check its length and see which rule to apply."], "exampleTestcases": "\"1-23-45 6\"\n\"123 4-567\"\n\"123 4-5678\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reformatNumber(string number) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reformatNumber(String number) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reformatNumber(self, number):\n        \"\"\"\n        :type number: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reformatNumber(self, number: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* reformatNumber(char* number) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReformatNumber(string number) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} number\n * @return {string}\n */\nvar reformatNumber = function(number) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reformatNumber(number: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $number\n     * @return String\n     */\n    function reformatNumber($number) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reformatNumber(_ number: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reformatNumber(number: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String reformatNumber(String number) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func reformatNumber(number string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} number\n# @return {String}\ndef reformat_number(number)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reformatNumber(number: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reformat_number(number: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (reformat-number number)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec reformat_number(Number :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreformat_number(Number) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec reformat_number(number :: String.t) :: String.t\n  def reformat_number(number) do\n    \n  end\nend"}], "similarQuestionList": []}