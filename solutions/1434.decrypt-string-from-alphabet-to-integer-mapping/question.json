{"question_id": "1434", "problem_slug": "decrypt-string-from-alphabet-to-integer-mapping", "problem_title": "Decrypt String from Alphabet to Integer Mapping", "content": "You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:\n\nCharacters ('a' to 'i') are represented by ('1' to '9') respectively.\nCharacters ('j' to 'z') are represented by ('10#' to '26#') respectively.\n\nReturn the string formed after mapping.\nThe test cases are generated so that a unique mapping will always exist.\n \nExample 1:\n\nInput: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".\n\nExample 2:\n\nInput: s = \"1326#\"\nOutput: \"acz\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of digits and the '#' letter.\ns will be a valid string such that mapping is always possible.\n\n", "hints": ["Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."], "exampleTestcases": "\"10#11#12\"\n\"1326#\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string freqAlphabets(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String freqAlphabets(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def freqAlphabets(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def freqAlphabets(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* freqAlphabets(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string FreqAlphabets(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar freqAlphabets = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function freqAlphabets(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function freqAlphabets($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func freqAlphabets(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun freqAlphabets(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String freqAlphabets(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func freqAlphabets(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef freq_alphabets(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def freqAlphabets(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn freq_alphabets(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (freq-alphabets s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec freq_alphabets(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfreq_alphabets(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec freq_alphabets(s :: String.t) :: String.t\n  def freq_alphabets(s) do\n    \n  end\nend"}}}