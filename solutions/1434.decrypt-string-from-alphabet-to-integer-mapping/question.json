{"questionId": "1434", "acRate": 79.92650520639074, "difficulty": "Easy", "freqBar": 15.105158078714434, "frontendQuestionId": "1309", "paidOnly": false, "status": "ac", "title": "Decrypt String from Alphabet to Integer Mapping", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping", "content": "<p>You are given a string <code>s</code> formed by digits and <code>&#39;#&#39;</code>. We want to map <code>s</code> to English lowercase characters as follows:</p>\n\n<ul>\n\t<li>Characters (<code>&#39;a&#39;</code> to <code>&#39;i&#39;</code>) are represented by (<code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>) respectively.</li>\n\t<li>Characters (<code>&#39;j&#39;</code> to <code>&#39;z&#39;</code>) are represented by (<code>&#39;10#&#39;</code> to <code>&#39;26#&#39;</code>) respectively.</li>\n</ul>\n\n<p>Return <em>the string formed after mapping</em>.</p>\n\n<p>The test cases are generated so that a unique mapping will always exist.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10#11#12&quot;\n<strong>Output:</strong> &quot;jkab&quot;\n<strong>Explanation:</strong> &quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1326#&quot;\n<strong>Output:</strong> &quot;acz&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of digits and the <code>&#39;#&#39;</code> letter.</li>\n\t<li><code>s</code> will be a valid string such that mapping is always possible.</li>\n</ul>\n", "hints": ["Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."], "exampleTestcases": "\"10#11#12\"\n\"1326#\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string freqAlphabets(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String freqAlphabets(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def freqAlphabets(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def freqAlphabets(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* freqAlphabets(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FreqAlphabets(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar freqAlphabets = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function freqAlphabets(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function freqAlphabets($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func freqAlphabets(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun freqAlphabets(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String freqAlphabets(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func freqAlphabets(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef freq_alphabets(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def freqAlphabets(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn freq_alphabets(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (freq-alphabets s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec freq_alphabets(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfreq_alphabets(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec freq_alphabets(s :: String.t) :: String.t\n  def freq_alphabets(s) do\n    \n  end\nend"}], "similarQuestionList": []}