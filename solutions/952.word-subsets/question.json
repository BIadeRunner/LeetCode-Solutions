{"question_id": "952", "problem_slug": "word-subsets", "problem_title": "Word Subsets", "content": "You are given two string arrays words1 and words2.\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\n\nFor example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\n\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\nReturn an array of all the universal strings in words1. You may return the answer in any order.\n \nExample 1:\n\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\nOutput: [\"facebook\",\"google\",\"leetcode\"]\n\nExample 2:\n\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\nOutput: [\"apple\",\"google\",\"leetcode\"]\n\n \nConstraints:\n\n1 <= words1.length, words2.length <= 104\n1 <= words1[i].length, words2[i].length <= 10\nwords1[i] and words2[i] consist only of lowercase English letters.\nAll the strings of words1 are unique.\n\n", "hints": [], "exampleTestcases": "[\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"]\n[\"e\",\"o\"]\n[\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"]\n[\"l\",\"e\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> wordSubsets(String[] words1, String[] words2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wordSubsets(self, words1, words2):\n        \"\"\"\n        :type words1: List[str]\n        :type words2: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordSubsets(char** words1, int words1Size, char** words2, int words2Size, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> WordSubsets(string[] words1, string[] words2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words1\n * @param {string[]} words2\n * @return {string[]}\n */\nvar wordSubsets = function(words1, words2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wordSubsets(words1: string[], words2: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words1\n     * @param String[] $words2\n     * @return String[]\n     */\n    function wordSubsets($words1, $words2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wordSubsets(_ words1: [String], _ words2: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wordSubsets(words1: Array<String>, words2: Array<String>): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> wordSubsets(List<String> words1, List<String> words2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wordSubsets(words1 []string, words2 []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words1\n# @param {String[]} words2\n# @return {String[]}\ndef word_subsets(words1, words2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wordSubsets(words1: Array[String], words2: Array[String]): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn word_subsets(words1: Vec<String>, words2: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (word-subsets words1 words2)\n  (-> (listof string?) (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec word_subsets(Words1 :: [unicode:unicode_binary()], Words2 :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nword_subsets(Words1, Words2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec word_subsets(words1 :: [String.t], words2 :: [String.t]) :: [String.t]\n  def word_subsets(words1, words2) do\n    \n  end\nend"}}}