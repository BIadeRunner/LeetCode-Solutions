{"questionId": "2621", "acRate": 68.7242662801805, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2527", "paidOnly": false, "status": "ac", "title": "Find Xor-Beauty of Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "find-xor-beauty-of-array", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>\n\n<p>The <strong>effective value</strong> of three indices <code>i</code>, <code>j</code>, and <code>k</code> is defined as <code>((nums[i] | nums[j]) &amp; nums[k])</code>.</p>\n\n<p>The <strong>xor-beauty</strong> of the array is the XORing of <strong>the effective values of all the possible triplets</strong> of indices <code>(i, j, k)</code> where <code>0 &lt;= i, j, k &lt; n</code>.</p>\n\n<p>Return <em>the xor-beauty of</em> <code>nums</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li><code>val1 | val2</code> is bitwise OR of <code>val1</code> and <code>val2</code>.</li>\n\t<li><code>val1 &amp; val2</code> is bitwise AND of <code>val1</code> and <code>val2</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) &amp; 1) = 1\n- (0,0,1) with effective value ((1 | 1) &amp; 4) = 0\n- (0,1,0) with effective value ((1 | 4) &amp; 1) = 1\n- (0,1,1) with effective value ((1 | 4) &amp; 4) = 4\n- (1,0,0) with effective value ((4 | 1) &amp; 1) = 1\n- (1,0,1) with effective value ((4 | 1) &amp; 4) = 4\n- (1,1,0) with effective value ((4 | 4) &amp; 1) = 0\n- (1,1,1) with effective value ((4 | 4) &amp; 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [15,45,20,2,34,35,5,44,32,30]\n<strong>Output:</strong> 34\n<strong>Explanation:</strong> <code>The xor-beauty of the given array is 34.</code>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Try to simplify the given expression.", "Try constructing the answer bit by bit."], "exampleTestcases": "[1,4]\n[15,45,20,2,34,35,5,44,32,30]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int xorBeauty(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int xorBeauty(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def xorBeauty(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def xorBeauty(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int xorBeauty(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int XorBeauty(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar xorBeauty = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function xorBeauty(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function xorBeauty($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func xorBeauty(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun xorBeauty(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int xorBeauty(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func xorBeauty(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef xor_beauty(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def xorBeauty(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn xor_beauty(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (xor-beauty nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec xor_beauty(Nums :: [integer()]) -> integer().\nxor_beauty(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec xor_beauty(nums :: [integer]) :: integer\n  def xor_beauty(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "decode-xored-permutation", "title": "Decode XORed Permutation", "isPaidOnly": false}]}