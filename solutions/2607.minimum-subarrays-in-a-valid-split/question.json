{"question_id": "2607", "problem_slug": "minimum-subarrays-in-a-valid-split", "problem_title": "Minimum Subarrays in a Valid Split", "content": "You are given an integer array nums.\nSplitting of an integer array nums into subarrays is valid if:\n\nthe greatest common divisor of the first and last elements of each subarray is greater than 1, and\neach element of nums belongs to exactly one subarray.\n\nReturn the minimum number of subarrays in a valid subarray splitting of nums. If a valid subarray splitting is not possible, return -1.\nNote that:\n\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\nA subarray is a contiguous non-empty part of an array.\n\n \nExample 1:\n\nInput: nums = [2,6,3,4,3]\nOutput: 2\nExplanation: We can create a valid split in the following way: [2,6] | [3,4,3].\n- The starting element of the 1st subarray is 2 and the ending is 6. Their greatest common divisor is 2, which is greater than 1.\n- The starting element of the 2nd subarray is 3 and the ending is 3. Their greatest common divisor is 3, which is greater than 1.\nIt can be proved that 2 is the minimum number of subarrays that we can obtain in a valid split.\n\nExample 2:\n\nInput: nums = [3,5]\nOutput: 2\nExplanation: We can create a valid split in the following way: [3] | [5].\n- The starting element of the 1st subarray is 3 and the ending is 3. Their greatest common divisor is 3, which is greater than 1.\n- The starting element of the 2nd subarray is 5 and the ending is 5. Their greatest common divisor is 5, which is greater than 1.\nIt can be proved that 2 is the minimum number of subarrays that we can obtain in a valid split.\n\nExample 3:\n\nInput: nums = [1,2,1]\nOutput: -1\nExplanation: It is impossible to create valid split.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 105\n\n", "hints": ["Find the minimum number of subarrays needed to validly split each prefix of the input array a.", "Denote dp[i] as the minimum number of subarrays needed to validly split [a[0], a[1], … , a[i - 1]], where dp[0] = 0.", "Think about the dynamic programming transitions.", "If we split the first i elements of the array, the last subarray in this splitting will end with a[i - 1] and start with some a[j], where gcd(a[j], a[i - 1]) ≠ 1. Then, we need to validly split the first j elements of the array, or [a[0]…a[j - 1]].", "Iterate over all possible j < i such that gcd(a[j], a[i - 1]) ≠ 1 and let dp[i] = min(dp[i], dp[j] + 1)."], "exampleTestcases": "[2,6,3,4,3]\n[3,5]\n[1,2,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int validSubarraySplit(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int validSubarraySplit(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validSubarraySplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validSubarraySplit(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int validSubarraySplit(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ValidSubarraySplit(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar validSubarraySplit = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validSubarraySplit(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function validSubarraySplit($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validSubarraySplit(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validSubarraySplit(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int validSubarraySplit(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validSubarraySplit(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef valid_subarray_split(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validSubarraySplit(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_subarray_split(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-subarray-split nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_subarray_split(Nums :: [integer()]) -> integer().\nvalid_subarray_split(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_subarray_split(nums :: [integer]) :: integer\n  def valid_subarray_split(nums) do\n    \n  end\nend"}}}