{"questionId": "1736", "acRate": 62.45941181927822, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1597", "paidOnly": true, "status": "ac", "title": "Build Binary Expression Tree From Infix Expression", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Binary Tree", "id": "VG9waWNUYWdOb2RlOjYxMDU3", "slug": "binary-tree"}], "titleSlug": "build-binary-expression-tree-from-infix-expression", "content": "<p>A <strong><a href=\"https://en.wikipedia.org/wiki/Binary_expression_tree\" target=\"_blank\">binary expression tree</a></strong> is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators <code>&#39;+&#39;</code> (addition), <code>&#39;-&#39;</code> (subtraction), <code>&#39;*&#39;</code> (multiplication), and <code>&#39;/&#39;</code> (division).</p>\n\n<p>For each internal node with operator <code>o</code>, the <a href=\"https://en.wikipedia.org/wiki/Infix_notation\" target=\"_blank\"><strong>infix expression</strong></a> it represents is <code>(A o B)</code>, where <code>A</code> is the expression the left subtree represents and <code>B</code> is the expression the right subtree represents.</p>\n\n<p>You are given a string <code>s</code>, an <strong>infix expression</strong> containing operands, the operators described above, and parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</p>\n\n<p>Return <em>any valid <strong>binary expression tree</strong>, whose <strong><a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)\" target=\"_blank\">in-order traversal</a></strong> reproduces </em><code>s</code> <em>after omitting the parenthesis from it.</em></p>\n\n<p><strong>Please note that order of operations applies in </strong><code>s</code><strong>.</strong> That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.</p>\n\n<p>Operands must also appear in the <strong>same order</strong> in both <code>s</code> and the in-order traversal of the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1-4.png\" style=\"width: 250px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;3*4-2*5&quot;\n<strong>Output:</strong> [-,*,*,3,4,2,5]\n<strong>Explanation:</strong> The tree above is the only valid tree whose inorder traversal produces s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1-2.png\" style=\"width: 150px; height: 210px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;2-3/(5*2)+1&quot;\n<strong>Output:</strong> [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]\n<strong>Explanation:</strong> The inorder traversal of the tree above is 2-3/5*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s.\nThe tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1-1.png\" style=\"width: 201px; height: 281px;\" />\nThe third tree below is also not valid. Although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1-3.png\" style=\"width: 281px; height: 281px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1+2+3+4+5&quot;\n<strong>Output:</strong> [+,+,5,+,4,null,null,+,3,null,null,1,2]\n<strong>Explanation:</strong> The tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of digits and the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, and <code>&#39;/&#39;</code>.</li>\n\t<li>Operands in <code>s</code> are <strong>exactly</strong> 1 digit.</li>\n\t<li>It is guaranteed that <code>s</code> is a valid expression.</li>\n</ul>\n", "hints": ["Convert infix expression to postfix expression.", "Build an expression tree from the postfix expression."], "exampleTestcases": "\"3*4-2*5\"\n\"2-3/(5*2)+1\"\n\"1+2+3+4+5\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct Node {\n *     char val;\n *     Node *left;\n *     Node *right;\n *     Node() : val(' '), left(nullptr), right(nullptr) {}\n *     Node(char x) : val(x), left(nullptr), right(nullptr) {}\n *     Node(char x, Node *left, Node *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    Node* expTree(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * class Node {\n *     char val;\n *     Node left;\n *     Node right;\n *     Node() {this.val = ' ';}\n *     Node(char val) { this.val = val; }\n *     Node(char val, Node left, Node right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public Node expTree(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class Node(object):\n#     def __init__(self, val=\" \", left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def expTree(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: Node\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class Node(object):\n#     def __init__(self, val=\" \", left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def expTree(self, s: str) -> 'Node':\n        "}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class Node {\n *     public char val;\n *     public Node left;\n *     public Node right;\n *     public Node(char val=' ', TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public Node ExpTree(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function Node(val, left, right) {\n *     this.val = (val===undefined ? \" \" : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {string} s\n * @return {Node}\n */\nvar expTree = function(s) {\n    \n};"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "basic-calculator-iii", "title": "Basic Calculator III", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "check-if-two-expression-trees-are-equivalent", "title": "Check If Two Expression Trees are Equivalent", "isPaidOnly": true}]}