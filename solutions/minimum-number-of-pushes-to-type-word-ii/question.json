{"questionId": "3276", "acRate": 80.67980846043378, "difficulty": "Medium", "freqBar": 75.33014566326571, "frontendQuestionId": "3016", "paidOnly": false, "status": "ac", "title": "Minimum Number of Pushes to Type Word II", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "minimum-number-of-pushes-to-type-word-ii", "content": "<p>You are given a string <code>word</code> containing lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/20/edited.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xyzxyzxyzxyz&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; one push on key 3\n&quot;z&quot; -&gt; one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/27/keypadv2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;aabbccddeeffgghhiiiiii&quot;\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\n&quot;f&quot; -&gt; one push on key 7\n&quot;g&quot; -&gt; one push on key 8\n&quot;h&quot; -&gt; two pushes on key 9\n&quot;i&quot; -&gt; one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n</ul>\n", "hints": ["We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.", "The optimal way is to map letters to keys evenly.", "Sort the letters by frequencies in the word in non-increasing order."], "exampleTestcases": "\"abcde\"\n\"xyzxyzxyzxyz\"\n\"aabbccddeeffgghhiiiiii\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumPushes(string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumPushes(String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumPushes(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumPushes(self, word: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumPushes(char* word) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumPushes(string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumPushes = function(word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumPushes(word: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumPushes($word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumPushes(_ word: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumPushes(word: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumPushes(String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumPushes(word string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @return {Integer}\ndef minimum_pushes(word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumPushes(word: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_pushes(word: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-pushes word)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_pushes(Word :: unicode:unicode_binary()) -> integer().\nminimum_pushes(Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_pushes(word :: String.t) :: integer\n  def minimum_pushes(word) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "letter-combinations-of-a-phone-number", "title": "Letter Combinations of a Phone Number", "isPaidOnly": false}]}