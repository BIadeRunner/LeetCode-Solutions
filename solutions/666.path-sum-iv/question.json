{"question_id": "666", "problem_slug": "path-sum-iv", "problem_title": "Path Sum IV", "content": "If the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. You are given an ascending array nums consisting of three-digit integers representing a binary tree with a depth smaller than 5, where for each integer:\n\nThe hundreds digit represents the depth d of this node, where 1 <= d <= 4.\nThe tens digit represents the position p of this node within its level, where 1 <= p <= 8, corresponding to its position in a full binary tree.\nThe units digit represents the value v of this node, where 0 <= v <= 9.\n\nReturn the sum of all paths from the root towards the leaves.\nIt is guaranteed that the given array represents a valid connected binary tree.\n \nExample 1:\n\n\nInput: nums = [113,215,221]\nOutput: 12\nExplanation:\nThe tree that the list represents is shown.\nThe path sum is (3 + 5) + (3 + 1) = 12.\n\nExample 2:\n\n\nInput: nums = [113,221]\nOutput: 4\nExplanation:\nThe tree that the list represents is shown. \nThe path sum is (3 + 1) = 4.\n\n \nConstraints:\n\n1 <= nums.length <= 15\n110 <= nums[i] <= 489\nnums represents a valid binary tree with depth less than 5.\nnums is sorted in ascending order.\n\n", "hints": [], "exampleTestcases": "[113,215,221]\n[113,221]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int pathSum(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int pathSum(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def pathSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int pathSum(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PathSum(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pathSum = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function pathSum(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function pathSum($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func pathSum(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun pathSum(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int pathSum(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func pathSum(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef path_sum(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def pathSum(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn path_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (path-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec path_sum(Nums :: [integer()]) -> integer().\npath_sum(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec path_sum(nums :: [integer]) :: integer\n  def path_sum(nums) do\n    \n  end\nend"}}}