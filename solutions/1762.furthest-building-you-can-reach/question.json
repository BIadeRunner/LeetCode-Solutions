{"question_id": "1762", "problem_slug": "furthest-building-you-can-reach", "problem_title": "Furthest Building You Can Reach", "content": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),\n\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\nIf the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.\n\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.\n \nExample 1:\n\n\nInput: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\nOutput: 4\nExplanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.\n\nExample 2:\n\nInput: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\nOutput: 7\n\nExample 3:\n\nInput: heights = [14,3,19,3], bricks = 17, ladders = 0\nOutput: 3\n\n \nConstraints:\n\n1 <= heights.length <= 105\n1 <= heights[i] <= 106\n0 <= bricks <= 109\n0 <= ladders <= heights.length\n\n", "hints": ["Assume the problem is to check whether you can reach the last building or not.", "You'll have to do a set of jumps, and choose for each one whether to do it using a ladder or bricks. It's always optimal to use ladders in the largest jumps.", "Iterate on the buildings, maintaining the largest r jumps and the sum of the remaining ones so far, and stop whenever this sum exceeds b."], "exampleTestcases": "[4,2,7,6,9,14,12]\n5\n1\n[4,12,2,7,3,18,20,3,19]\n10\n2\n[14,3,19,3]\n17\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int furthestBuilding(int[] heights, int bricks, int ladders) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def furthestBuilding(self, heights, bricks, ladders):\n        \"\"\"\n        :type heights: List[int]\n        :type bricks: int\n        :type ladders: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int furthestBuilding(int* heights, int heightsSize, int bricks, int ladders) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FurthestBuilding(int[] heights, int bricks, int ladders) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @param {number} bricks\n * @param {number} ladders\n * @return {number}\n */\nvar furthestBuilding = function(heights, bricks, ladders) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function furthestBuilding(heights: number[], bricks: number, ladders: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @param Integer $bricks\n     * @param Integer $ladders\n     * @return Integer\n     */\n    function furthestBuilding($heights, $bricks, $ladders) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func furthestBuilding(_ heights: [Int], _ bricks: Int, _ ladders: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun furthestBuilding(heights: IntArray, bricks: Int, ladders: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int furthestBuilding(List<int> heights, int bricks, int ladders) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func furthestBuilding(heights []int, bricks int, ladders int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @param {Integer} bricks\n# @param {Integer} ladders\n# @return {Integer}\ndef furthest_building(heights, bricks, ladders)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def furthestBuilding(heights: Array[Int], bricks: Int, ladders: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn furthest_building(heights: Vec<i32>, bricks: i32, ladders: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (furthest-building heights bricks ladders)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec furthest_building(Heights :: [integer()], Bricks :: integer(), Ladders :: integer()) -> integer().\nfurthest_building(Heights, Bricks, Ladders) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec furthest_building(heights :: [integer], bricks :: integer, ladders :: integer) :: integer\n  def furthest_building(heights, bricks, ladders) do\n    \n  end\nend"}}}