{"question_id": "1768", "problem_slug": "design-an-expression-tree-with-evaluate-function", "problem_title": "Design an Expression Tree With Evaluate Function", "content": "Given the postfix tokens of an arithmetic expression, build and return the binary expression tree that represents this expression.\nPostfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression 4*(5-(7+2)) are represented in the array postfix = [\"4\",\"5\",\"7\",\"2\",\"+\",\"-\",\"*\"].\nThe class Node is an interface you should use to implement the binary expression tree. The returned tree will be tested using the evaluate function, which is supposed to evaluate the tree's value. You should not remove the Node class; however, you can modify it as you wish, and you can define other classes to implement it if needed.\nA binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators '+' (addition), '-' (subtraction), '*' (multiplication), and '/' (division).\nIt's guaranteed that no subtree will yield a value that exceeds 109 in absolute value, and all the operations are valid (i.e., no division by zero).\nFollow up: Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing evaluate implementation?\n \nExample 1:\n\n\nInput: s = [\"3\",\"4\",\"+\",\"2\",\"*\",\"7\",\"/\"]\nOutput: 2\nExplanation: this expression evaluates to the above binary tree with expression ((3+4)*2)/7) = 14/7 = 2.\n\nExample 2:\n\n\nInput: s = [\"4\",\"5\",\"2\",\"7\",\"+\",\"-\",\"*\"]\nOutput: -16\nExplanation: this expression evaluates to the above binary tree with expression 4*(5-(2+7)) = 4*(-4) = -16.\n\n \nConstraints:\n\n1 <= s.length < 100\ns.length is odd.\ns consists of numbers and the characters '+', '-', '*', and '/'.\nIf s[i] is a number, its integer representation is no more than 105.\nIt is guaranteed that s is a valid expression.\nThe absolute value of the result and intermediate values will not exceed 109.\nIt is guaranteed that no expression will include division by zero.\n\n", "hints": ["Apply the concept of Polymorphism to get a good design", "Implement the Node class using NumericNode and OperatorNode classes.", "NumericNode only maintains the value and evaluate returns this value.", "OperatorNode Maintains the left and right nodes representing the left and right operands, and the evaluate function applies the operator to them."], "exampleTestcases": "[\"3\",\"4\",\"+\",\"2\",\"*\",\"7\",\"/\"]\n[\"4\",\"5\",\"2\",\"7\",\"+\",\"-\",\"*\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * This is the interface for the expression tree Node.\n * You should not remove it, and you can define some classes to implement it.\n */\n\nclass Node {\npublic:\n    virtual ~Node () {};\n    virtual int evaluate() const = 0;\nprotected:\n    // define your fields here\n};\n\n\n/**\n * This is the TreeBuilder class.\n * You can treat it as the driver code that takes the postinfix input \n * and returns the expression tree representing it as a Node.\n */\n\nclass TreeBuilder {\npublic:\n    Node* buildTree(vector<string>& postfix) {\n        \n    }\n};\n\n\n/**\n * Your TreeBuilder object will be instantiated and called as such:\n * TreeBuilder* obj = new TreeBuilder();\n * Node* expTree = obj->buildTree(postfix);\n * int ans = expTree->evaluate();\n */"}, "Java": {"langSlug": "java", "code": "/**\n * This is the interface for the expression tree Node.\n * You should not remove it, and you can define some classes to implement it.\n */\n\nabstract class Node {\n    public abstract int evaluate();\n    // define your fields here\n};\n\n\n/**\n * This is the TreeBuilder class.\n * You can treat it as the driver code that takes the postinfix input \n * and returns the expression tree representing it as a Node.\n */\n\nclass TreeBuilder {\n    Node buildTree(String[] postfix) {\n        \n    }\n};\n\n\n/**\n * Your TreeBuilder object will be instantiated and called as such:\n * TreeBuilder obj = new TreeBuilder();\n * Node expTree = obj.buildTree(postfix);\n * int ans = expTree.evaluate();\n */"}, "Python": {"langSlug": "python", "code": "import abc \nfrom abc import ABCMeta, abstractmethod \n\"\"\"\nThis is the interface for the expression tree Node.\nYou should not remove it, and you can define some classes to implement it.\n\"\"\"\n\nclass Node:\n    __metaclass__ = ABCMeta\n    # define your fields here\n    @abstractmethod\n    def evaluate(self):\n        pass\n\n\n\"\"\"    \nThis is the TreeBuilder class.\nYou can treat it as the driver code that takes the postinfix input\nand returns the expression tree representing it as a Node.\n\"\"\"\n\nclass TreeBuilder(object):\n    def buildTree(self, postfix):\n        \"\"\"\n        :type s: List[str]\n        :rtype: int\n        \"\"\"\n\n\"\"\"\nYour TreeBuilder object will be instantiated and called as such:\nobj = TreeBuilder();\nexpTree = obj.buildTree(postfix);\nans = expTree.evaluate();\n\"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "import abc \nfrom abc import ABC, abstractmethod \n\"\"\"\nThis is the interface for the expression tree Node.\nYou should not remove it, and you can define some classes to implement it.\n\"\"\"\n\nclass Node(ABC):\n    @abstractmethod\n    # define your fields here\n    def evaluate(self) -> int:\n        pass\n\n\n\"\"\"    \nThis is the TreeBuilder class.\nYou can treat it as the driver code that takes the postinfix input\nand returns the expression tree representing it as a Node.\n\"\"\"\n\nclass TreeBuilder(object):\n    def buildTree(self, postfix: List[str]) -> 'Node':\n        \n\t\t\n\"\"\"\nYour TreeBuilder object will be instantiated and called as such:\nobj = TreeBuilder();\nexpTree = obj.buildTree(postfix);\nans = expTree.evaluate();\n\"\"\"\n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * This is the interface for the expression tree Node.\n * You should not remove it, and you can define some classes to implement it.\n */\n\npublic abstract class Node {\n    public abstract int evaluate();\n    // define your fields here\n};\n\n\n/**\n * This is the TreeBuilder class.\n * You can treat it as the driver code that takes the postinfix input \n * and returns the expression tree representing it as a Node.\n */\n\npublic class TreeBuilder {\n    public Node buildTree(string[] postfix) {\n        \n    }\n}\n\n\n/**\n * Your TreeBuilder object will be instantiated and called as such:\n * TreeBuilder obj = new TreeBuilder();\n * Node expTree = obj.buildTree(postfix);\n * int ans = expTree.evaluate();\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * This is the interface for the expression tree Node.\n * You should not remove it, and you can define some classes to implement it.\n */\n\nvar Node = function () {\n  if (this.constructor === Node) {\n    throw new Error('Cannot instanciate abstract class');\n  }\n};\n\nNode.prototype.evaluate = function () {\n  throw new Error('Cannot call abstract method')\n};\n\n/**\n * This is the TreeBuilder class.\n * You can treat it as the driver code that takes the postinfix input \n * and returns the expression tree representing it as a Node.\n */\n\nclass TreeBuilder{\n\t/**\n     * @param {string[]} s\n     * @return {Node}\n     */\n\tbuildTree(postfix) {\n    \t\n\t}\n    \n}\n\n/**\n * Your TreeBuilder object will be instantiated and called as such:\n * var obj = new TreeBuilder();\n * var expTree = obj.buildTree(postfix);\n * var ans = expTree.evaluate();\n */"}}}