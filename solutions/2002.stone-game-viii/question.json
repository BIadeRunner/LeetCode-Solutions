{"question_id": "2002", "problem_slug": "stone-game-viii", "problem_title": "Stone Game VIII", "content": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:\n\nChoose an integer x > 1, and remove the leftmost x stones from the row.\nAdd the sum of the removed stones' values to the player's score.\nPlace a new stone, whose value is equal to that sum, on the left side of the row.\n\nThe game stops when only one stone is left in the row.\nThe score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.\nGiven an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.\n \nExample 1:\n\r\nInput: stones = [-1,2,-3,4,-5]\r\nOutput: 5\r\nExplanation:\r\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\r\n  value 2 on the left. stones = [2,-5].\r\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\r\n  the left. stones = [-3].\r\nThe difference between their scores is 2 - (-3) = 5.\r\n\nExample 2:\n\r\nInput: stones = [7,-6,5,10,5,-2,-6]\r\nOutput: 13\r\nExplanation:\r\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\r\n  stone of value 13 on the left. stones = [13].\r\nThe difference between their scores is 13 - 0 = 13.\r\n\nExample 3:\n\r\nInput: stones = [-10,-12]\r\nOutput: -22\r\nExplanation:\r\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\r\n  score and places a stone of value -22 on the left. stones = [-22].\r\nThe difference between their scores is (-22) - 0 = -22.\r\n\n \nConstraints:\n\nn == stones.length\n2 <= n <= 105\n-104 <= stones[i] <= 104\n", "hints": ["Let's note that the only thing that matters is how many stones were removed so we can maintain dp[numberOfRemovedStones]", "dp[x] = max(sum of all elements up to y - dp[y]) for all y > x"], "exampleTestcases": "[-1,2,-3,4,-5]\n[7,-6,5,10,5,-2,-6]\n[-10,-12]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int stoneGameVIII(vector<int>& stones) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int stoneGameVIII(int[] stones) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def stoneGameVIII(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def stoneGameVIII(self, stones: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint stoneGameVIII(int* stones, int stonesSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int StoneGameVIII(int[] stones) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} stones\n * @return {number}\n */\nvar stoneGameVIII = function(stones) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function stoneGameVIII(stones: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @return Integer\n     */\n    function stoneGameVIII($stones) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func stoneGameVIII(_ stones: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun stoneGameVIII(stones: IntArray): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func stoneGameVIII(stones []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} stones\n# @return {Integer}\ndef stone_game_viii(stones)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def stoneGameVIII(stones: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn stone_game_viii(stones: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (stone-game-viii stones)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}}}