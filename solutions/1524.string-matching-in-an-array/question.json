{"questionId": "1524", "acRate": 64.19575290862419, "difficulty": "Easy", "freqBar": 26.038018708370835, "frontendQuestionId": "1408", "paidOnly": false, "status": "ac", "title": "String Matching in an Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}], "titleSlug": "string-matching-in-an-array", "content": "<p>Given an array of string <code>words</code>, return <em>all strings in </em><code>words</code><em> that is a <strong>substring</strong> of another word</em>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;mass&quot;,&quot;as&quot;,&quot;hero&quot;,&quot;superhero&quot;]\n<strong>Output:</strong> [&quot;as&quot;,&quot;hero&quot;]\n<strong>Explanation:</strong> &quot;as&quot; is substring of &quot;mass&quot; and &quot;hero&quot; is substring of &quot;superhero&quot;.\n[&quot;hero&quot;,&quot;as&quot;] is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;leetcode&quot;,&quot;et&quot;,&quot;code&quot;]\n<strong>Output:</strong> [&quot;et&quot;,&quot;code&quot;]\n<strong>Explanation:</strong> &quot;et&quot;, &quot;code&quot; are substring of &quot;leetcode&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;blue&quot;,&quot;green&quot;,&quot;bu&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> No string of words is substring of another string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> contains only lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Bruteforce to find if one string is substring of another or use KMP algorithm."], "exampleTestcases": "[\"mass\",\"as\",\"hero\",\"superhero\"]\n[\"leetcode\",\"et\",\"code\"]\n[\"blue\",\"green\",\"bu\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> stringMatching(vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> stringMatching(String[] words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def stringMatching(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def stringMatching(self, words: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** stringMatching(char** words, int wordsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> StringMatching(string[] words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar stringMatching = function(words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function stringMatching(words: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function stringMatching($words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func stringMatching(_ words: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun stringMatching(words: Array<String>): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> stringMatching(List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func stringMatching(words []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef string_matching(words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def stringMatching(words: Array[String]): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn string_matching(words: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (string-matching words)\n  (-> (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec string_matching(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nstring_matching(Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec string_matching(words :: [String.t]) :: [String.t]\n  def string_matching(words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "substring-xor-queries", "title": "Substring XOR Queries", "isPaidOnly": false}]}