{"question_id": "2445", "problem_slug": "reachable-nodes-with-restrictions", "problem_title": "Reachable Nodes With Restrictions", "content": "There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.\nReturn the maximum number of nodes you can reach from node 0 without visiting a restricted node.\nNote that node 0 will not be a restricted node.\n \nExample 1:\n\n\nInput: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]\nOutput: 4\nExplanation: The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.\n\nExample 2:\n\n\nInput: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]\nOutput: 3\nExplanation: The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.\n\n \nConstraints:\n\n2 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nedges represents a valid tree.\n1 <= restricted.length < n\n1 <= restricted[i] < n\nAll the values of restricted are unique.\n\n", "hints": ["Can we find all the reachable nodes in a single traversal?", "Traverse the graph from node 0 while avoiding the nodes in restricted and do not revisit nodes that have been visited.", "Keep count of how many nodes are visited in total."], "exampleTestcases": "7\n[[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]]\n[4,5]\n7\n[[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]]\n[4,2,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int reachableNodes(int n, int[][] edges, int[] restricted) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reachableNodes(self, n, edges, restricted):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type restricted: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int reachableNodes(int n, int** edges, int edgesSize, int* edgesColSize, int* restricted, int restrictedSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ReachableNodes(int n, int[][] edges, int[] restricted) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} restricted\n * @return {number}\n */\nvar reachableNodes = function(n, edges, restricted) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reachableNodes(n: number, edges: number[][], restricted: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[] $restricted\n     * @return Integer\n     */\n    function reachableNodes($n, $edges, $restricted) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reachableNodes(_ n: Int, _ edges: [[Int]], _ restricted: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reachableNodes(n: Int, edges: Array<IntArray>, restricted: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int reachableNodes(int n, List<List<int>> edges, List<int> restricted) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reachableNodes(n int, edges [][]int, restricted []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[]} restricted\n# @return {Integer}\ndef reachable_nodes(n, edges, restricted)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reachableNodes(n: Int, edges: Array[Array[Int]], restricted: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reachable_nodes(n: i32, edges: Vec<Vec<i32>>, restricted: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reachable-nodes n edges restricted)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reachable_nodes(N :: integer(), Edges :: [[integer()]], Restricted :: [integer()]) -> integer().\nreachable_nodes(N, Edges, Restricted) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reachable_nodes(n :: integer, edges :: [[integer]], restricted :: [integer]) :: integer\n  def reachable_nodes(n, edges, restricted) do\n    \n  end\nend"}}}