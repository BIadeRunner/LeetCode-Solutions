{"question_id": "432", "problem_slug": "all-oone-data-structure", "problem_title": "All O`one Data Structure", "content": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:\n\nAllOne() Initializes the object of the data structure.\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n\nNote that each function must run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"\n\n \nConstraints:\n\n1 <= key.length <= 10\nkey consists of lowercase English letters.\nIt is guaranteed that for each call to dec, key is existing in the data structure.\nAt most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.\n\n", "hints": [], "exampleTestcases": "[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]\n[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class AllOne {\npublic:\n    AllOne() {\n        \n    }\n    \n    void inc(string key) {\n        \n    }\n    \n    void dec(string key) {\n        \n    }\n    \n    string getMaxKey() {\n        \n    }\n    \n    string getMinKey() {\n        \n    }\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne* obj = new AllOne();\n * obj->inc(key);\n * obj->dec(key);\n * string param_3 = obj->getMaxKey();\n * string param_4 = obj->getMinKey();\n */"}, "Java": {"langSlug": "java", "code": "class AllOne {\n\n    public AllOne() {\n        \n    }\n    \n    public void inc(String key) {\n        \n    }\n    \n    public void dec(String key) {\n        \n    }\n    \n    public String getMaxKey() {\n        \n    }\n    \n    public String getMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */"}, "Python": {"langSlug": "python", "code": "class AllOne(object):\n\n    def __init__(self):\n        \n\n    def inc(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n\n    def dec(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n        \n\n    def getMaxKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n    def getMinKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"}, "Python3": {"langSlug": "python3", "code": "class AllOne:\n\n    def __init__(self):\n        \n\n    def inc(self, key: str) -> None:\n        \n\n    def dec(self, key: str) -> None:\n        \n\n    def getMaxKey(self) -> str:\n        \n\n    def getMinKey(self) -> str:\n        \n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} AllOne;\n\n\nAllOne* allOneCreate() {\n    \n}\n\nvoid allOneInc(AllOne* obj, char* key) {\n    \n}\n\nvoid allOneDec(AllOne* obj, char* key) {\n    \n}\n\nchar* allOneGetMaxKey(AllOne* obj) {\n    \n}\n\nchar* allOneGetMinKey(AllOne* obj) {\n    \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n \n * allOneDec(obj, key);\n \n * char* param_3 = allOneGetMaxKey(obj);\n \n * char* param_4 = allOneGetMinKey(obj);\n \n * allOneFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class AllOne {\n\n    public AllOne() {\n        \n    }\n    \n    public void Inc(string key) {\n        \n    }\n    \n    public void Dec(string key) {\n        \n    }\n    \n    public string GetMaxKey() {\n        \n    }\n    \n    public string GetMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.Inc(key);\n * obj.Dec(key);\n * string param_3 = obj.GetMaxKey();\n * string param_4 = obj.GetMinKey();\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar AllOne = function() {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMaxKey = function() {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMinKey = function() {\n    \n};\n\n/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class AllOne {\n    constructor() {\n        \n    }\n\n    inc(key: string): void {\n        \n    }\n\n    dec(key: string): void {\n        \n    }\n\n    getMaxKey(): string {\n        \n    }\n\n    getMinKey(): string {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"}, "PHP": {"langSlug": "php", "code": "class AllOne {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function inc($key) {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function dec($key) {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function getMaxKey() {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function getMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * $obj = AllOne();\n * $obj->inc($key);\n * $obj->dec($key);\n * $ret_3 = $obj->getMaxKey();\n * $ret_4 = $obj->getMinKey();\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass AllOne {\n\n    init() {\n        \n    }\n    \n    func inc(_ key: String) {\n        \n    }\n    \n    func dec(_ key: String) {\n        \n    }\n    \n    func getMaxKey() -> String {\n        \n    }\n    \n    func getMinKey() -> String {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * let ret_3: String = obj.getMaxKey()\n * let ret_4: String = obj.getMinKey()\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class AllOne() {\n\n    fun inc(key: String) {\n        \n    }\n\n    fun dec(key: String) {\n        \n    }\n\n    fun getMaxKey(): String {\n        \n    }\n\n    fun getMinKey(): String {\n        \n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"}, "Dart": {"langSlug": "dart", "code": "class AllOne {\n\n  AllOne() {\n    \n  }\n  \n  void inc(String key) {\n    \n  }\n  \n  void dec(String key) {\n    \n  }\n  \n  String getMaxKey() {\n    \n  }\n  \n  String getMinKey() {\n    \n  }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param3 = obj.getMaxKey();\n * String param4 = obj.getMinKey();\n */"}, "Go": {"langSlug": "golang", "code": "type AllOne struct {\n    \n}\n\n\nfunc Constructor() AllOne {\n    \n}\n\n\nfunc (this *AllOne) Inc(key string)  {\n    \n}\n\n\nfunc (this *AllOne) Dec(key string)  {\n    \n}\n\n\nfunc (this *AllOne) GetMaxKey() string {\n    \n}\n\n\nfunc (this *AllOne) GetMinKey() string {\n    \n}\n\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Inc(key);\n * obj.Dec(key);\n * param_3 := obj.GetMaxKey();\n * param_4 := obj.GetMinKey();\n */"}, "Ruby": {"langSlug": "ruby", "code": "class AllOne\n    def initialize()\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def inc(key)\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def dec(key)\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_max_key()\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_min_key()\n        \n    end\n\n\nend\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne.new()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.get_max_key()\n# param_4 = obj.get_min_key()"}, "Scala": {"langSlug": "scala", "code": "class AllOne() {\n\n    def inc(key: String): Unit = {\n        \n    }\n\n    def dec(key: String): Unit = {\n        \n    }\n\n    def getMaxKey(): String = {\n        \n    }\n\n    def getMinKey(): String = {\n        \n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * val obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * val param_3 = obj.getMaxKey()\n * val param_4 = obj.getMinKey()\n */"}, "Rust": {"langSlug": "rust", "code": "struct AllOne {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl AllOne {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn inc(&self, key: String) {\n        \n    }\n    \n    fn dec(&self, key: String) {\n        \n    }\n    \n    fn get_max_key(&self) -> String {\n        \n    }\n    \n    fn get_min_key(&self) -> String {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne::new();\n * obj.inc(key);\n * obj.dec(key);\n * let ret_3: String = obj.get_max_key();\n * let ret_4: String = obj.get_min_key();\n */"}, "Racket": {"langSlug": "racket", "code": "(define all-one%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; inc : string? -> void?\n    (define/public (inc key)\n      )\n    ; dec : string? -> void?\n    (define/public (dec key)\n      )\n    ; get-max-key : -> string?\n    (define/public (get-max-key)\n      )\n    ; get-min-key : -> string?\n    (define/public (get-min-key)\n      )))\n\n;; Your all-one% object will be instantiated and called as such:\n;; (define obj (new all-one%))\n;; (send obj inc key)\n;; (send obj dec key)\n;; (define param_3 (send obj get-max-key))\n;; (define param_4 (send obj get-min-key))"}, "Erlang": {"langSlug": "erlang", "code": "-spec all_one_init_() -> any().\nall_one_init_() ->\n  .\n\n-spec all_one_inc(Key :: unicode:unicode_binary()) -> any().\nall_one_inc(Key) ->\n  .\n\n-spec all_one_dec(Key :: unicode:unicode_binary()) -> any().\nall_one_dec(Key) ->\n  .\n\n-spec all_one_get_max_key() -> unicode:unicode_binary().\nall_one_get_max_key() ->\n  .\n\n-spec all_one_get_min_key() -> unicode:unicode_binary().\nall_one_get_min_key() ->\n  .\n\n\n%% Your functions will be called as such:\n%% all_one_init_(),\n%% all_one_inc(Key),\n%% all_one_dec(Key),\n%% Param_3 = all_one_get_max_key(),\n%% Param_4 = all_one_get_min_key(),\n\n%% all_one_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule AllOne do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec inc(key :: String.t) :: any\n  def inc(key) do\n    \n  end\n\n  @spec dec(key :: String.t) :: any\n  def dec(key) do\n    \n  end\n\n  @spec get_max_key() :: String.t\n  def get_max_key() do\n    \n  end\n\n  @spec get_min_key() :: String.t\n  def get_min_key() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# AllOne.init_()\n# AllOne.inc(key)\n# AllOne.dec(key)\n# param_3 = AllOne.get_max_key()\n# param_4 = AllOne.get_min_key()\n\n# AllOne.init_ will be called before every test case, in which you can do some necessary initializations."}}}