{"question_id": "1159", "problem_slug": "smallest-subsequence-of-distinct-characters", "problem_title": "Smallest Subsequence of Distinct Characters", "content": "Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.\n \nExample 1:\n\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\n\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of lowercase English letters.\n\n \nNote: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/", "hints": ["Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."], "exampleTestcases": "\"bcabc\"\n\"cbacdcbc\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestSubsequence(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String smallestSubsequence(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* smallestSubsequence(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SmallestSubsequence(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar smallestSubsequence = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestSubsequence(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function smallestSubsequence($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestSubsequence(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestSubsequence(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String smallestSubsequence(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestSubsequence(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef smallest_subsequence(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestSubsequence(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_subsequence(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-subsequence s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_subsequence(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_subsequence(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_subsequence(s :: String.t) :: String.t\n  def smallest_subsequence(s) do\n    \n  end\nend"}}}