{"question_id": "683", "problem_slug": "k-empty-slots", "problem_title": "K Empty Slots", "content": "You have n bulbs in a row numbered from 1 to n. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after n days.\nYou are given an array bulbs of length n where bulbs[i] = x means that on the (i+1)th day, we will turn on the bulb at position x where i is 0-indexed and x is 1-indexed.\nGiven an integer k, return the minimum day number such that there exists two turned on bulbs that have exactly k bulbs between them that are all turned off. If there isn't such day, return -1.\n \nExample 1:\n\nInput: bulbs = [1,3,2], k = 1\nOutput: 2\nExplanation:\nOn the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]\nOn the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]\nOn the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]\nWe return 2 because on the second day, there were two on bulbs with one off bulb between them.\nExample 2:\n\nInput: bulbs = [1,2,3], k = 1\nOutput: -1\n\n \nConstraints:\n\nn == bulbs.length\n1 <= n <= 2 * 104\n1 <= bulbs[i] <= n\nbulbs is a permutation of numbers from 1 to n.\n0 <= k <= 2 * 104\n\n", "hints": [], "exampleTestcases": "[1,3,2]\n1\n[1,2,3]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kEmptySlots(vector<int>& bulbs, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kEmptySlots(int[] bulbs, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kEmptySlots(self, bulbs, k):\n        \"\"\"\n        :type bulbs: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kEmptySlots(self, bulbs: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kEmptySlots(int* bulbs, int bulbsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KEmptySlots(int[] bulbs, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} bulbs\n * @param {number} k\n * @return {number}\n */\nvar kEmptySlots = function(bulbs, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kEmptySlots(bulbs: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $bulbs\n     * @param Integer $k\n     * @return Integer\n     */\n    function kEmptySlots($bulbs, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kEmptySlots(_ bulbs: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kEmptySlots(bulbs: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kEmptySlots(List<int> bulbs, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kEmptySlots(bulbs []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} bulbs\n# @param {Integer} k\n# @return {Integer}\ndef k_empty_slots(bulbs, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kEmptySlots(bulbs: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn k_empty_slots(bulbs: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (k-empty-slots bulbs k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec k_empty_slots(Bulbs :: [integer()], K :: integer()) -> integer().\nk_empty_slots(Bulbs, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec k_empty_slots(bulbs :: [integer], k :: integer) :: integer\n  def k_empty_slots(bulbs, k) do\n    \n  end\nend"}}}