{"questionId": "1997", "acRate": 53.48141432456936, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1842", "paidOnly": true, "status": "ac", "title": "Next Palindrome Using Same Digits", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "next-palindrome-using-same-digits", "content": "<p>You are given a numeric string <code>num</code>, representing a very large <strong>palindrome</strong>.</p>\n\n<p>Return<em> the <strong>smallest palindrome larger than </strong></em><code>num</code><em> that can be created by rearranging its digits. If no such palindrome exists, return an empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>A <strong>palindrome</strong> is a number that reads the same backward as forward.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;1221&quot;\n<strong>Output:</strong> &quot;2112&quot;\n<strong>Explanation:</strong>&nbsp;The next palindrome larger than &quot;1221&quot; is &quot;2112&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;32123&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong>&nbsp;No palindromes larger than &quot;32123&quot; can be made by rearranging the digits.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;45544554&quot;\n<strong>Output:</strong> &quot;54455445&quot;\n<strong>Explanation:</strong> The next palindrome larger than &quot;45544554&quot; is &quot;54455445&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> is a <strong>palindrome</strong>.</li>\n</ul>\n", "hints": ["Is it possible to swap one character in the first half of the palindrome to make the next one?", "Are there different cases for when the length is odd and even?"], "exampleTestcases": "\"1221\"\n\"32123\"\n\"45544554\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string nextPalindrome(string num) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String nextPalindrome(String num) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextPalindrome(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextPalindrome(self, num: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* nextPalindrome(char* num) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string NextPalindrome(string num) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {string}\n */\nvar nextPalindrome = function(num) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextPalindrome(num: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function nextPalindrome($num) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextPalindrome(_ num: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextPalindrome(num: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String nextPalindrome(String num) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func nextPalindrome(num string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @return {String}\ndef next_palindrome(num)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextPalindrome(num: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_palindrome(num: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (next-palindrome num)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec next_palindrome(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nnext_palindrome(Num) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec next_palindrome(num :: String.t) :: String.t\n  def next_palindrome(num) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "next-greater-element-iii", "title": "Next Greater Element III", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "isPaidOnly": false}]}