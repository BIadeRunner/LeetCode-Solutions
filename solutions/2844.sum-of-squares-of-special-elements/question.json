{"question_id": "2844", "problem_slug": "sum-of-squares-of-special-elements", "problem_title": "Sum of Squares of Special Elements ", "content": "You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\n \nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 21\nExplanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.  \n\nExample 2:\n\nInput: nums = [2,7,1,19,18,3]\nOutput: 63\nExplanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63. \n\n \nConstraints:\n\n1 <= nums.length == n <= 50\n1 <= nums[i] <= 50\n\n", "hints": ["Iterate over all the elements of the array. For each index i, check if it is special using the modulo operator.", "if n%i == 0, index i is special and you should add nums[i] to the answer."], "exampleTestcases": "[1,2,3,4]\n[2,7,1,19,18,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumOfSquares(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumOfSquares(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOfSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumOfSquares(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumOfSquares(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfSquares = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOfSquares(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfSquares($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOfSquares(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOfSquares(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumOfSquares(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOfSquares(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_squares(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOfSquares(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_squares(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-of-squares nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_of_squares(Nums :: [integer()]) -> integer().\nsum_of_squares(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_of_squares(nums :: [integer]) :: integer\n  def sum_of_squares(nums) do\n    \n  end\nend"}}}