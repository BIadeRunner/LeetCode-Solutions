{"question_id": "2870", "problem_slug": "longest-alternating-subarray", "problem_title": "Longest Alternating Subarray", "content": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\n\nm is greater than 1.\ns1 = s0 + 1.\nThe 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.\n\nReturn the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\nA subarray is a contiguous non-empty sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [2,3,4,3,4]\nOutput: 4\nExplanation:\nThe alternating subarrays are [2, 3], [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n\nExample 2:\n\nInput: nums = [4,5,6]\nOutput: 2\nExplanation:\n[4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n\n \nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 104\n\n", "hints": ["As the constraints are low, you can check each subarray for the given condition."], "exampleTestcases": "[2,3,4,3,4]\n[4,5,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int alternatingSubarray(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int alternatingSubarray(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def alternatingSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int alternatingSubarray(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int AlternatingSubarray(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar alternatingSubarray = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function alternatingSubarray(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function alternatingSubarray($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func alternatingSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun alternatingSubarray(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int alternatingSubarray(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func alternatingSubarray(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef alternating_subarray(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def alternatingSubarray(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn alternating_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (alternating-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec alternating_subarray(Nums :: [integer()]) -> integer().\nalternating_subarray(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec alternating_subarray(nums :: [integer]) :: integer\n  def alternating_subarray(nums) do\n    \n  end\nend"}}}