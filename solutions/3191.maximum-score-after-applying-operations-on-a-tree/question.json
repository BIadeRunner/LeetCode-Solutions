{"questionId": "3191", "acRate": 49.46448806521183, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2925", "paidOnly": false, "status": "ac", "title": "Maximum Score After Applying Operations on a Tree", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}], "titleSlug": "maximum-score-after-applying-operations-on-a-tree", "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given&nbsp;a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>i<sup>th</sup></code> node.</p>\n\n<p>You start with a score of <code>0</code>. In one operation, you can:</p>\n\n<ul>\n\t<li>Pick any node <code>i</code>.</li>\n\t<li>Add <code>values[i]</code> to your score.</li>\n\t<li>Set <code>values[i]</code> to <code>0</code>.</li>\n</ul>\n\n<p>A tree is <strong>healthy</strong> if the sum of values on the path from the root to any leaf node is different than zero.</p>\n\n<p>Return <em>the <strong>maximum score</strong> you can obtain after performing these operations on the tree any number of times so that it remains <strong>healthy</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/10/11/graph-13-1.png\" style=\"width: 515px; height: 443px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/10/11/graph-14-2.png\" style=\"width: 522px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]\n<strong>Output:</strong> 40\n<strong>Explanation:</strong> We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>values.length == n</code></li>\n\t<li><code>1 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n", "hints": ["Let <code>dp[i]</code> be the maximum score we can get on the subtree rooted at <code>i</code> and <code>sum[i]</code> be the sum of all the values of the subtree rooted at <code>i</code>.", "If we don\u2019t take <code>value[i]</code> into the final score, we can take all the nodes of the subtrees rooted at <code>i</code>\u2019s children.", "If we take <code>value[i]</code> into the score, then each subtree rooted at its children should satisfy the constraints.", "<code>dp[x] = max(value[x] + sigma(dp[y]), sigma(sum[y]))</code>, where <code>y</code> is a direct child of <code>x</code>."], "exampleTestcases": "[[0,1],[0,2],[0,3],[2,4],[4,5]]\n[5,2,5,2,1,1]\n[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n[20,10,9,7,4,3,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumScoreAfterOperations(vector<vector<int>>& edges, vector<int>& values) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maximumScoreAfterOperations(int[][] edges, int[] values) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumScoreAfterOperations(self, edges, values):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type values: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], values: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maximumScoreAfterOperations(int** edges, int edgesSize, int* edgesColSize, int* values, int valuesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaximumScoreAfterOperations(int[][] edges, int[] values) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @param {number[]} values\n * @return {number}\n */\nvar maximumScoreAfterOperations = function(edges, values) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumScoreAfterOperations(edges: number[][], values: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer[] $values\n     * @return Integer\n     */\n    function maximumScoreAfterOperations($edges, $values) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumScoreAfterOperations(_ edges: [[Int]], _ values: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumScoreAfterOperations(edges: Array<IntArray>, values: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumScoreAfterOperations(List<List<int>> edges, List<int> values) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumScoreAfterOperations(edges [][]int, values []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @param {Integer[]} values\n# @return {Integer}\ndef maximum_score_after_operations(edges, values)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumScoreAfterOperations(edges: Array[Array[Int]], values: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_score_after_operations(edges: Vec<Vec<i32>>, values: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-score-after-operations edges values)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_score_after_operations(Edges :: [[integer()]], Values :: [integer()]) -> integer().\nmaximum_score_after_operations(Edges, Values) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_score_after_operations(edges :: [[integer]], values :: [integer]) :: integer\n  def maximum_score_after_operations(edges, values) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "isPaidOnly": false}]}