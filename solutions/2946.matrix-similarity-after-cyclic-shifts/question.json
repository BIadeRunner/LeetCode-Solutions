{"questionId": "3215", "acRate": 58.8680797522261, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2946", "paidOnly": false, "status": "ac", "title": "Matrix Similarity After Cyclic Shifts", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "matrix-similarity-after-cyclic-shifts", "content": "<p>You are given an <code>m x n</code> integer matrix <code>mat</code> and an integer <code>k</code>. The matrix rows are 0-indexed.</p>\n\n<p>The following proccess happens <code>k</code> times:</p>\n\n<ul>\n\t<li><strong>Even-indexed</strong> rows (0, 2, 4, ...) are cyclically shifted to the left.</li>\n</ul>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/lshift.jpg\" style=\"width: 283px; height: 90px;\" /></p>\n\n<ul>\n\t<li><strong>Odd-indexed</strong> rows (1, 3, 5, ...) are cyclically shifted to the right.</li>\n</ul>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/rshift-stlone.jpg\" style=\"width: 283px; height: 90px;\" /></p>\n\n<p>Return <code>true</code> if the final modified matrix after <code>k</code> steps is identical to the original matrix, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>In each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index).</p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/t1-2.jpg\" style=\"width: 857px; height: 150px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/t1-3.jpg\" style=\"width: 632px; height: 150px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">mat = [[2,2],[2,2]], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= mat.length &lt;= 25</code></li>\n\t<li><code>1 &lt;= mat[i].length &lt;= 25</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 25</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n", "hints": ["You can reduce <code>k</code> shifts to <code>(k % n)</code> shifts as after <code>n</code> shifts the matrix will become similar to the initial matrix."], "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n4\n[[1,2,1,2],[5,5,5,5],[6,3,6,3]]\n2\n[[2,2],[2,2]]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areSimilar(vector<vector<int>>& mat, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean areSimilar(int[][] mat, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def areSimilar(self, mat, k):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def areSimilar(self, mat: List[List[int]], k: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool areSimilar(int** mat, int matSize, int* matColSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool AreSimilar(int[][] mat, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {boolean}\n */\nvar areSimilar = function(mat, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function areSimilar(mat: number[][], k: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $k\n     * @return Boolean\n     */\n    function areSimilar($mat, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func areSimilar(_ mat: [[Int]], _ k: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun areSimilar(mat: Array<IntArray>, k: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool areSimilar(List<List<int>> mat, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func areSimilar(mat [][]int, k int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @param {Integer} k\n# @return {Boolean}\ndef are_similar(mat, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def areSimilar(mat: Array[Array[Int]], k: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn are_similar(mat: Vec<Vec<i32>>, k: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (are-similar mat k)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec are_similar(Mat :: [[integer()]], K :: integer()) -> boolean().\nare_similar(Mat, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_similar(mat :: [[integer]], k :: integer) :: boolean\n  def are_similar(mat, k) do\n    \n  end\nend"}], "similarQuestionList": []}