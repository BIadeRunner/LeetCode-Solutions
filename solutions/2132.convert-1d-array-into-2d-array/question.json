{"question_id": "2132", "problem_slug": "convert-1d-array-into-2d-array", "problem_title": "Convert 1D Array Into 2D Array", "content": "You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with  m rows and n columns using all the elements from original.\nThe elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.\nReturn an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.\n \nExample 1:\n\n\nInput: original = [1,2,3,4], m = 2, n = 2\nOutput: [[1,2],[3,4]]\nExplanation: The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.\n\nExample 2:\n\nInput: original = [1,2,3], m = 1, n = 3\nOutput: [[1,2,3]]\nExplanation: The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.\n\nExample 3:\n\nInput: original = [1,2], m = 1, n = 1\nOutput: []\nExplanation: There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.\n\n \nConstraints:\n\n1 <= original.length <= 5 * 104\n1 <= original[i] <= 105\n1 <= m, n <= 4 * 104\n\n", "hints": ["When is it possible to convert original into a 2D array and when is it impossible?", "It is possible if and only if m * n == original.length", "If it is possible to convert original to a 2D array, keep an index i such that original[i] is the next element to add to the 2D array."], "exampleTestcases": "[1,2,3,4]\n2\n2\n[1,2,3]\n1\n3\n[1,2]\n1\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] construct2DArray(int[] original, int m, int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def construct2DArray(self, original, m, n):\n        \"\"\"\n        :type original: List[int]\n        :type m: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** construct2DArray(int* original, int originalSize, int m, int n, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] Construct2DArray(int[] original, int m, int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} original\n * @param {number} m\n * @param {number} n\n * @return {number[][]}\n */\nvar construct2DArray = function(original, m, n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function construct2DArray(original: number[], m: number, n: number): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $original\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function construct2DArray($original, $m, $n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func construct2DArray(_ original: [Int], _ m: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun construct2DArray(original: IntArray, m: Int, n: Int): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> construct2DArray(List<int> original, int m, int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func construct2DArray(original []int, m int, n int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} original\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer[][]}\ndef construct2_d_array(original, m, n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def construct2DArray(original: Array[Int], m: Int, n: Int): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn construct2_d_array(original: Vec<i32>, m: i32, n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (construct2-d-array original m n)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec construct2_d_array(Original :: [integer()], M :: integer(), N :: integer()) -> [[integer()]].\nconstruct2_d_array(Original, M, N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec construct2_d_array(original :: [integer], m :: integer, n :: integer) :: [[integer]]\n  def construct2_d_array(original, m, n) do\n    \n  end\nend"}}}