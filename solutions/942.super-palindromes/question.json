{"question_id": "942", "problem_slug": "super-palindromes", "problem_title": "Super Palindromes", "content": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].\n \nExample 1:\n\nInput: left = \"4\", right = \"1000\"\nOutput: 4\nExplanation: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n\nExample 2:\n\nInput: left = \"1\", right = \"2\"\nOutput: 1\n\n \nConstraints:\n\n1 <= left.length, right.length <= 18\nleft and right consist of only digits.\nleft and right cannot have leading zeros.\nleft and right represent integers in the range [1, 1018 - 1].\nleft is less than or equal to right.\n\n", "hints": [], "exampleTestcases": "\"4\"\n\"1000\"\n\"1\"\n\"2\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int superpalindromesInRange(string left, string right) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int superpalindromesInRange(String left, String right) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def superpalindromesInRange(self, left, right):\n        \"\"\"\n        :type left: str\n        :type right: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def superpalindromesInRange(self, left: str, right: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int superpalindromesInRange(char* left, char* right) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SuperpalindromesInRange(string left, string right) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} left\n * @param {string} right\n * @return {number}\n */\nvar superpalindromesInRange = function(left, right) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function superpalindromesInRange(left: string, right: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $left\n     * @param String $right\n     * @return Integer\n     */\n    function superpalindromesInRange($left, $right) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func superpalindromesInRange(_ left: String, _ right: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun superpalindromesInRange(left: String, right: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int superpalindromesInRange(String left, String right) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func superpalindromesInRange(left string, right string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} left\n# @param {String} right\n# @return {Integer}\ndef superpalindromes_in_range(left, right)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def superpalindromesInRange(left: String, right: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn superpalindromes_in_range(left: String, right: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (superpalindromes-in-range left right)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec superpalindromes_in_range(Left :: unicode:unicode_binary(), Right :: unicode:unicode_binary()) -> integer().\nsuperpalindromes_in_range(Left, Right) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec superpalindromes_in_range(left :: String.t, right :: String.t) :: integer\n  def superpalindromes_in_range(left, right) do\n    \n  end\nend"}}}