{"questionId": "3449", "acRate": 70.72419106317412, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3141", "paidOnly": true, "status": "ac", "title": "Maximum Hamming Distances", "titleSlug": "maximum-hamming-distances", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}], "content": "<p>Given an array <code>nums</code> and an integer <code>m</code>, with each element <code>nums[i]</code> satisfying <code>0 &lt;= nums[i] &lt; 2<sup>m</sup></code>, return an array <code>answer</code>. The <code>answer</code> array should be of the same length as <code>nums</code>, where each element <code>answer[i]</code> represents the <em>maximum</em> <strong>Hamming distance </strong>between <code>nums[i]</code> and any other element <code>nums[j]</code> in the array.</p>\n\n<p>The <strong>Hamming distance</strong> between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [9,12,9,11], m = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,3,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The binary representation of <code>nums = [1001,1100,1001,1011]</code>.</p>\n\n<p>The maximum hamming distances for each index are:</p>\n\n<ul>\n\t<li><code>nums[0]</code>: 1001 and 1100 have a distance of 2.</li>\n\t<li><code>nums[1]</code>: 1100 and 1011 have a distance of 3.</li>\n\t<li><code>nums[2]</code>: 1001 and 1100 have a distance of 2.</li>\n\t<li><code>nums[3]</code>: 1011 and 1100 have a distance of 3.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,4,6,10], m = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,3,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The binary representation of <code>nums = [0011,0100,0110,1010]</code>.</p>\n\n<p>The maximum hamming distances for each index are:</p>\n\n<ul>\n\t<li><code>nums[0]</code>: 0011 and 0100 have a distance of 3.</li>\n\t<li><code>nums[1]</code>: 0100 and 0011 have a distance of 3.</li>\n\t<li><code>nums[2]</code>: 0110 and 1010 have a distance of 2.</li>\n\t<li><code>nums[3]</code>: 1010 and 0100 have a distance of 3.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m &lt;= 17</code></li>\n\t<li><code>2 &lt;= nums.length &lt;= 2<sup>m</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; 2<sup>m</sup></code></li>\n</ul>\n", "hints": ["For each <code>nums[i]</code>, complement it (for each bit, if it is 1, it becomes 0 and vice-versa).", "Instead of finding the maximum Hamming distance from <code>x = nums[i]</code>, let's think of finding the minimum Hamming distance from the complement of <code>x</code> to any element of the array.", "Create a graph with <code>V = {0, 1, ..., 2<sup>m</sup> - 1}</code>. Put an edge between two vertices if they differ in exactly one bit.", "Run a multi-source BFS from elements of <code>nums</code>.", "Now for each <code>x</code>, to find its minimum Hamming distance from elements of the array, simply calculate its shortest path from array elements."], "exampleTestcases": "[9,12,9,11]\n4\n[3,4,6,10]\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxHammingDistances(vector<int>& nums, int m) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxHammingDistances(int[] nums, int m) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxHammingDistances(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxHammingDistances(self, nums: List[int], m: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxHammingDistances(int* nums, int numsSize, int m, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxHammingDistances(int[] nums, int m) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number[]}\n */\nvar maxHammingDistances = function(nums, m) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxHammingDistances(nums: number[], m: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Integer[]\n     */\n    function maxHammingDistances($nums, $m) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxHammingDistances(_ nums: [Int], _ m: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxHammingDistances(nums: IntArray, m: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> maxHammingDistances(List<int> nums, int m) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxHammingDistances(nums []int, m int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Integer[]}\ndef max_hamming_distances(nums, m)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxHammingDistances(nums: Array[Int], m: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_hamming_distances(nums: Vec<i32>, m: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-hamming-distances nums m)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_hamming_distances(Nums :: [integer()], M :: integer()) -> [integer()].\nmax_hamming_distances(Nums, M) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_hamming_distances(nums :: [integer], m :: integer) :: [integer]\n  def max_hamming_distances(nums, m) do\n    \n  end\nend"}], "similarQuestionList": []}