{"question_id": "115", "problem_slug": "distinct-subsequences", "problem_title": "Distinct Subsequences", "content": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n \nExample 1:\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit\n\nExample 2:\n\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n \nConstraints:\n\n1 <= s.length, t.length <= 1000\ns and t consist of English letters.\n\n", "hints": [], "exampleTestcases": "\"rabbbit\"\n\"rabbit\"\n\"babgbag\"\n\"bag\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numDistinct(String s, String t) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numDistinct(char* s, char* t) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumDistinct(string s, string t) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar numDistinct = function(s, t) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numDistinct(s: string, t: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function numDistinct($s, $t) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numDistinct(_ s: String, _ t: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numDistinct(s: String, t: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numDistinct(String s, String t) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numDistinct(s string, t string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef num_distinct(s, t)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numDistinct(s: String, t: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_distinct(s: String, t: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-distinct s t)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_distinct(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nnum_distinct(S, T) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_distinct(s :: String.t, t :: String.t) :: integer\n  def num_distinct(s, t) do\n    \n  end\nend"}}}