{"question_id": "2775", "problem_slug": "generate-fibonacci-sequence", "problem_title": "Generate Fibonacci Sequence", "content": "Write a generator function that returns a generator object which yields the fibonacci sequence.\nThe fibonacci sequence is defined by the relation Xn = Xn-1 + Xn-2.\nThe first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.\n \nExample 1:\n\nInput: callCount = 5\nOutput: [0,1,1,2,3]\nExplanation:\nconst gen = fibGenerator();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // 1\ngen.next().value; // 2\ngen.next().value; // 3\n\nExample 2:\n\nInput: callCount = 0\nOutput: []\nExplanation: gen.next() is never called so nothing is outputted\n\n \nConstraints:\n\n0 <= callCount <= 50\n\n", "hints": ["Javascript has the concept of generators. They are critical to this problem.", "First yield 0 and 1.", "Create an infinite \"while(true)\" loop.", "In that loop, continuously yield the next value which is the sum of the previous two."], "exampleTestcases": "5\n0", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @return {Generator<number>}\n */\nvar fibGenerator = function*() {\n    \n};\n\n/**\n * const gen = fibGenerator();\n * gen.next().value; // 0\n * gen.next().value; // 1\n */"}, "TypeScript": {"langSlug": "typescript", "code": "function* fibGenerator(): Generator<number, any, number> {\n    \n};\n\n/**\n * const gen = fibGenerator();\n * gen.next().value; // 0\n * gen.next().value; // 1\n */"}}}