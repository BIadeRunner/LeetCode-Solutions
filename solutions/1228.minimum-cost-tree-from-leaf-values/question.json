{"question_id": "1228", "problem_slug": "minimum-cost-tree-from-leaf-values", "problem_title": "Minimum Cost Tree From Leaf Values", "content": "Given an array arr of positive integers, consider all binary trees such that:\n\nEach node has either 0 or 2 children;\nThe values of arr correspond to the values of each leaf in an in-order traversal of the tree.\nThe value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\n\nAmong all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.\nA node is a leaf if and only if it has zero children.\n \nExample 1:\n\n\nInput: arr = [6,2,4]\nOutput: 32\nExplanation: There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n\nExample 2:\n\n\nInput: arr = [4,11]\nOutput: 44\n\n \nConstraints:\n\n2 <= arr.length <= 40\n1 <= arr[i] <= 15\nIt is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231).\n\n", "hints": ["Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j].", "For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j)."], "exampleTestcases": "[6,2,4]\n[4,11]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int mctFromLeafValues(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mctFromLeafValues(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mctFromLeafValues(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int mctFromLeafValues(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MctFromLeafValues(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar mctFromLeafValues = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mctFromLeafValues(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function mctFromLeafValues($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mctFromLeafValues(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mctFromLeafValues(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int mctFromLeafValues(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mctFromLeafValues(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef mct_from_leaf_values(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mctFromLeafValues(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn mct_from_leaf_values(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (mct-from-leaf-values arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec mct_from_leaf_values(Arr :: [integer()]) -> integer().\nmct_from_leaf_values(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec mct_from_leaf_values(arr :: [integer]) :: integer\n  def mct_from_leaf_values(arr) do\n    \n  end\nend"}}}