{"question_id": "1440", "problem_slug": "convert-integer-to-the-sum-of-two-no-zero-integers", "problem_title": "Convert Integer to the Sum of Two No-Zero Integers", "content": "No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.\nGiven an integer n, return a list of two integers [a, b] where:\n\na and b are No-Zero integers.\na + b = n\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n \nExample 1:\n\nInput: n = 2\nOutput: [1,1]\nExplanation: Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.\n\nExample 2:\n\nInput: n = 11\nOutput: [2,9]\nExplanation: Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted.\n\n \nConstraints:\n\n2 <= n <= 104\n\n", "hints": ["Loop through all elements from 1 to n.", "Choose A = i and B = n - i then check if A and B are both No-Zero integers."], "exampleTestcases": "2\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getNoZeroIntegers(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] getNoZeroIntegers(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getNoZeroIntegers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getNoZeroIntegers(self, n: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getNoZeroIntegers(int n, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] GetNoZeroIntegers(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar getNoZeroIntegers = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getNoZeroIntegers(n: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function getNoZeroIntegers($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getNoZeroIntegers(_ n: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getNoZeroIntegers(n: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> getNoZeroIntegers(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getNoZeroIntegers(n int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef get_no_zero_integers(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getNoZeroIntegers(n: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_no_zero_integers(n: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-no-zero-integers n)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_no_zero_integers(N :: integer()) -> [integer()].\nget_no_zero_integers(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_no_zero_integers(n :: integer) :: [integer]\n  def get_no_zero_integers(n) do\n    \n  end\nend"}}}