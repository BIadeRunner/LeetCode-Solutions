{"question_id": "3557", "problem_slug": "minimum-number-of-valid-strings-to-form-target-ii", "problem_title": "Minimum Number of Valid Strings to Form Target II", "content": "You are given an array of strings words and a string target.\nA string x is called valid if x is a prefix of any string in words.\nReturn the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.\n \nExample 1:\n\nInput: words = [\"abc\",\"aaaaa\",\"bcdef\"], target = \"aabcdabc\"\nOutput: 3\nExplanation:\nThe target string can be formed by concatenating:\n\nPrefix of length 2 of words[1], i.e. \"aa\".\nPrefix of length 3 of words[2], i.e. \"bcd\".\nPrefix of length 3 of words[0], i.e. \"abc\".\n\n\nExample 2:\n\nInput: words = [\"abababab\",\"ab\"], target = \"ababaababa\"\nOutput: 2\nExplanation:\nThe target string can be formed by concatenating:\n\nPrefix of length 5 of words[0], i.e. \"ababa\".\nPrefix of length 5 of words[0], i.e. \"ababa\".\n\n\nExample 3:\n\nInput: words = [\"abcdef\"], target = \"xyz\"\nOutput: -1\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 5 * 104\nThe input is generated such that sum(words[i].length) <= 105.\nwords[i] consists only of lowercase English letters.\n1 <= target.length <= 5 * 104\ntarget consists only of lowercase English letters.\n\n", "hints": ["Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.", "Use Rabin-Karp to hash every prefix and store it in a HashSet.", "Use Binary search to find the longest substring starting at index <code>i</code> (<code>target[i..j]</code>) that has a hash present in the HashSet.", "Inverse Modulo precomputation can optimise hash calculation.", "Use Lazy Segment Tree, or basic Segment Tree to update <code>dp[i..j]</code>.", "Is it possible to use two TreeSets to update <code>dp[i..j]</code>?"], "exampleTestcases": "[\"abc\",\"aaaaa\",\"bcdef\"]\n\"aabcdabc\"\n[\"abababab\",\"ab\"]\n\"ababaababa\"\n[\"abcdef\"]\n\"xyz\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minValidStrings(vector<string>& words, string target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minValidStrings(String[] words, String target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minValidStrings(self, words, target):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minValidStrings(self, words: List[str], target: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minValidStrings(char** words, int wordsSize, char* target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinValidStrings(string[] words, string target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} target\n * @return {number}\n */\nvar minValidStrings = function(words, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minValidStrings(words: string[], target: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $target\n     * @return Integer\n     */\n    function minValidStrings($words, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minValidStrings(_ words: [String], _ target: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minValidStrings(words: Array<String>, target: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minValidStrings(List<String> words, String target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minValidStrings(words []string, target string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} target\n# @return {Integer}\ndef min_valid_strings(words, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minValidStrings(words: Array[String], target: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_valid_strings(words: Vec<String>, target: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-valid-strings words target)\n  (-> (listof string?) string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_valid_strings(Words :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\nmin_valid_strings(Words, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_valid_strings(words :: [String.t], target :: String.t) :: integer\n  def min_valid_strings(words, target) do\n    \n  end\nend"}}}