{"question_id": "320", "problem_slug": "generalized-abbreviation", "problem_title": "Generalized Abbreviation", "content": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\nFor example, \"abcde\" can be abbreviated into:\n\n\t\n\"a3e\" (\"bcd\" turned into \"3\")\n\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n\"5\" (\"abcde\" turned into \"5\")\n\"abcde\" (no substrings replaced)\n\n\nHowever, these abbreviations are invalid:\n\t\n\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\n\n\n\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.\n \nExample 1:\nInput: word = \"word\"\nOutput: [\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"]\nExample 2:\nInput: word = \"a\"\nOutput: [\"1\",\"a\"]\n\n \nConstraints:\n\n1 <= word.length <= 15\nword consists of only lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"word\"\n\"a\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generateAbbreviations(string word) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> generateAbbreviations(String word) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def generateAbbreviations(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def generateAbbreviations(self, word: str) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateAbbreviations(char* word, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GenerateAbbreviations(string word) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {string[]}\n */\nvar generateAbbreviations = function(word) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function generateAbbreviations(word: string): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return String[]\n     */\n    function generateAbbreviations($word) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func generateAbbreviations(_ word: String) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun generateAbbreviations(word: String): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> generateAbbreviations(String word) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func generateAbbreviations(word string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @return {String[]}\ndef generate_abbreviations(word)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def generateAbbreviations(word: String): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn generate_abbreviations(word: String) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (generate-abbreviations word)\n  (-> string? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec generate_abbreviations(Word :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_abbreviations(Word) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_abbreviations(word :: String.t) :: [String.t]\n  def generate_abbreviations(word) do\n    \n  end\nend"}}}