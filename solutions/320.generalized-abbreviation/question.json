{"questionId": "320", "acRate": 59.793526556558454, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "320", "paidOnly": true, "status": "ac", "title": "Generalized Abbreviation", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "generalized-abbreviation", "content": "<p>A word&#39;s <strong>generalized abbreviation</strong> can be constructed by taking any number of <strong>non-overlapping</strong> and <strong>non-adjacent</strong> <span data-keyword=\"substring-nonempty\">substrings</span> and replacing them with their respective lengths.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abcde&quot;</code> can be abbreviated into:\n\n\t<ul>\n\t\t<li><code>&quot;a3e&quot;</code> (<code>&quot;bcd&quot;</code> turned into <code>&quot;3&quot;</code>)</li>\n\t\t<li><code>&quot;1bcd1&quot;</code> (<code>&quot;a&quot;</code> and <code>&quot;e&quot;</code> both turned into <code>&quot;1&quot;</code>)</li>\n\t\t<li><code>&quot;5&quot;</code> (<code>&quot;abcde&quot;</code> turned into <code>&quot;5&quot;</code>)</li>\n\t\t<li><code>&quot;abcde&quot;</code> (no substrings replaced)</li>\n\t</ul>\n\t</li>\n\t<li>However, these abbreviations are <strong>invalid</strong>:\n\t<ul>\n\t\t<li><code>&quot;23&quot;</code> (<code>&quot;ab&quot;</code> turned into <code>&quot;2&quot;</code> and <code>&quot;cde&quot;</code> turned into <code>&quot;3&quot;</code>) is invalid as the substrings chosen are adjacent.</li>\n\t\t<li><code>&quot;22de&quot;</code> (<code>&quot;ab&quot;</code> turned into <code>&quot;2&quot;</code> and <code>&quot;bc&quot;</code> turned into <code>&quot;2&quot;</code>) is invalid as the substring chosen overlap.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given a string <code>word</code>, return <em>a list of all the possible <strong>generalized abbreviations</strong> of</em> <code>word</code>. Return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> word = \"word\"\n<strong>Output:</strong> [\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> word = \"a\"\n<strong>Output:</strong> [\"1\",\"a\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 15</code></li>\n\t<li><code>word</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"word\"\n\"a\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generateAbbreviations(string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> generateAbbreviations(String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def generateAbbreviations(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def generateAbbreviations(self, word: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateAbbreviations(char* word, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GenerateAbbreviations(string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {string[]}\n */\nvar generateAbbreviations = function(word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function generateAbbreviations(word: string): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return String[]\n     */\n    function generateAbbreviations($word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func generateAbbreviations(_ word: String) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun generateAbbreviations(word: String): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> generateAbbreviations(String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func generateAbbreviations(word string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @return {String[]}\ndef generate_abbreviations(word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def generateAbbreviations(word: String): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn generate_abbreviations(word: String) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (generate-abbreviations word)\n  (-> string? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec generate_abbreviations(Word :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_abbreviations(Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_abbreviations(word :: String.t) :: [String.t]\n  def generate_abbreviations(word) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "subsets", "title": "Subsets", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "unique-word-abbreviation", "title": "Unique Word Abbreviation", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "minimum-unique-word-abbreviation", "title": "Minimum Unique Word Abbreviation", "isPaidOnly": true}]}