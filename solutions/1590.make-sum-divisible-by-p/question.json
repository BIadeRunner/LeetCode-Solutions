{"questionId": "1694", "acRate": 39.717453124287175, "difficulty": "Medium", "freqBar": 59.10103075643034, "frontendQuestionId": "1590", "paidOnly": false, "status": "ac", "title": "Make Sum Divisible by P", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "make-sum-divisible-by-p", "content": "<p>Given an array of positive integers <code>nums</code>, remove the <strong>smallest</strong> subarray (possibly <strong>empty</strong>) such that the <strong>sum</strong> of the remaining elements is divisible by <code>p</code>. It is <strong>not</strong> allowed to remove the whole array.</p>\n\n<p>Return <em>the length of the smallest subarray that you need to remove, or </em><code>-1</code><em> if it&#39;s impossible</em>.</p>\n\n<p>A <strong>subarray</strong> is defined as a contiguous block of elements in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,2], p = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,3,5,2], p = 9\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], p = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= p &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Use prefix sums to calculate the subarray sums.", "Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k?", "Use a map to keep track of the rightmost index for every prefix sum % p."], "exampleTestcases": "[3,1,4,2]\n6\n[6,3,5,2]\n9\n[1,2,3]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSubarray(vector<int>& nums, int p) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSubarray(int[] nums, int p) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSubarray(self, nums, p):\n        \"\"\"\n        :type nums: List[int]\n        :type p: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minSubarray(int* nums, int numsSize, int p) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSubarray(int[] nums, int p) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} p\n * @return {number}\n */\nvar minSubarray = function(nums, p) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSubarray(nums: number[], p: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $p\n     * @return Integer\n     */\n    function minSubarray($nums, $p) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSubarray(_ nums: [Int], _ p: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSubarray(nums: IntArray, p: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minSubarray(List<int> nums, int p) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minSubarray(nums []int, p int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} p\n# @return {Integer}\ndef min_subarray(nums, p)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSubarray(nums: Array[Int], p: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_subarray(nums: Vec<i32>, p: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-subarray nums p)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_subarray(Nums :: [integer()], P :: integer()) -> integer().\nmin_subarray(Nums, P) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_subarray(nums :: [integer], p :: integer) :: integer\n  def min_subarray(nums, p) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "subarray-sums-divisible-by-k", "title": "Subarray Sums Divisible by K", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-divisibility-array-of-a-string", "title": "Find the Divisibility Array of a String", "isPaidOnly": false}]}