{"question_id": "1972", "problem_slug": "rotating-the-box", "problem_title": "Rotating the Box", "content": "You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\n\nA stone '#'\nA stationary obstacle '*'\nEmpty '.'\n\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.\n \nExample 1:\n\n\r\nInput: box = [[\"#\",\".\",\"#\"]]\r\nOutput: [[\".\"],\r\n         [\"#\"],\r\n         [\"#\"]]\r\n\nExample 2:\n\n\r\nInput: box = [[\"#\",\".\",\"*\",\".\"],\r\n              [\"#\",\"#\",\"*\",\".\"]]\r\nOutput: [[\"#\",\".\"],\r\n         [\"#\",\"#\"],\r\n         [\"*\",\"*\"],\r\n         [\".\",\".\"]]\r\n\nExample 3:\n\n\r\nInput: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\r\n              [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\r\n              [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\r\nOutput: [[\".\",\"#\",\"#\"],\r\n         [\".\",\"#\",\"#\"],\r\n         [\"#\",\"#\",\"*\"],\r\n         [\"#\",\"*\",\".\"],\r\n         [\"#\",\".\",\"*\"],\r\n         [\"#\",\".\",\".\"]]\r\n\n \nConstraints:\n\nm == box.length\nn == box[i].length\n1 <= m, n <= 500\nbox[i][j] is either '#', '*', or '.'.\n", "hints": ["Rotate the box using the relation rotatedBox[i][j] = box[m - 1 - j][i].", "Start iterating from the bottom of the box and for each empty cell check if there is any stone above it with no obstacles between them."], "exampleTestcases": "[[\"#\",\".\",\"#\"]]\n[[\"#\",\".\",\"*\",\".\"],[\"#\",\"#\",\"*\",\".\"]]\n[[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],[\"#\",\"#\",\"#\",\"*\",\".\",\".\"],[\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<char>> rotateTheBox(vector<vector<char>>& box) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public char[][] rotateTheBox(char[][] box) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def rotateTheBox(self, box):\n        \"\"\"\n        :type box: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        "}, "C": {"langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar** rotateTheBox(char** box, int boxSize, int* boxColSize, int* returnSize, int** returnColumnSizes){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public char[][] RotateTheBox(char[][] box) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} box\n * @return {character[][]}\n */\nvar rotateTheBox = function(box) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rotateTheBox(box: string[][]): string[][] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $box\n     * @return String[][]\n     */\n    function rotateTheBox($box) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func rotateTheBox(_ box: [[Character]]) -> [[Character]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun rotateTheBox(box: Array<CharArray>): Array<CharArray> {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func rotateTheBox(box [][]byte) [][]byte {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} box\n# @return {Character[][]}\ndef rotate_the_box(box)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def rotateTheBox(box: Array[Array[Char]]): Array[Array[Char]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn rotate_the_box(box: Vec<Vec<char>>) -> Vec<Vec<char>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (rotate-the-box box)\n  (-> (listof (listof char?)) (listof (listof char?)))\n\n  )"}}}