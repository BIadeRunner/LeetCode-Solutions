{"question_id": "3567", "problem_slug": "convert-date-to-binary", "problem_title": "Convert Date to Binary", "content": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format.\ndate can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format.\nReturn the binary representation of date.\n \nExample 1:\n\nInput: date = \"2080-02-29\"\nOutput: \"100000100000-10-11101\"\nExplanation:\n100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.\n\nExample 2:\n\nInput: date = \"1900-01-01\"\nOutput: \"11101101100-1-1\"\nExplanation:\n11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.\n\n \nConstraints:\n\ndate.length == 10\ndate[4] == date[7] == '-', and all other date[i]'s are digits.\nThe input is generated such that date represents a valid Gregorian calendar date between Jan 1st, 1900 and Dec 31st, 2100 (both inclusive).\n\n", "hints": [], "exampleTestcases": "\"2080-02-29\"\n\"1900-01-01\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string convertDateToBinary(string date) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String convertDateToBinary(String date) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def convertDateToBinary(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* convertDateToBinary(char* date) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ConvertDateToBinary(string date) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} date\n * @return {string}\n */\nvar convertDateToBinary = function(date) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function convertDateToBinary(date: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $date\n     * @return String\n     */\n    function convertDateToBinary($date) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func convertDateToBinary(_ date: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun convertDateToBinary(date: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String convertDateToBinary(String date) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func convertDateToBinary(date string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} date\n# @return {String}\ndef convert_date_to_binary(date)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def convertDateToBinary(date: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn convert_date_to_binary(date: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (convert-date-to-binary date)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec convert_date_to_binary(Date :: unicode:unicode_binary()) -> unicode:unicode_binary().\nconvert_date_to_binary(Date) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_date_to_binary(date :: String.t) :: String.t\n  def convert_date_to_binary(date) do\n    \n  end\nend"}}}