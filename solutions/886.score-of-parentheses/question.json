{"question_id": "886", "problem_slug": "score-of-parentheses", "problem_title": "Score of Parentheses", "content": "Given a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:\n\n\"()\" has score 1.\nAB has score A + B, where A and B are balanced parentheses strings.\n(A) has score 2 * A, where A is a balanced parentheses string.\n\n \nExample 1:\n\nInput: s = \"()\"\nOutput: 1\n\nExample 2:\n\nInput: s = \"(())\"\nOutput: 2\n\nExample 3:\n\nInput: s = \"()()\"\nOutput: 2\n\n \nConstraints:\n\n2 <= s.length <= 50\ns consists of only '(' and ')'.\ns is a balanced parentheses string.\n\n", "hints": [], "exampleTestcases": "\"()\"\n\"(())\"\n\"()()\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int scoreOfParentheses(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int scoreOfParentheses(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def scoreOfParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def scoreOfParentheses(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int scoreOfParentheses(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ScoreOfParentheses(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar scoreOfParentheses = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function scoreOfParentheses(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function scoreOfParentheses($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func scoreOfParentheses(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun scoreOfParentheses(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int scoreOfParentheses(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func scoreOfParentheses(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef score_of_parentheses(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def scoreOfParentheses(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn score_of_parentheses(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (score-of-parentheses s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec score_of_parentheses(S :: unicode:unicode_binary()) -> integer().\nscore_of_parentheses(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec score_of_parentheses(s :: String.t) :: integer\n  def score_of_parentheses(s) do\n    \n  end\nend"}}}