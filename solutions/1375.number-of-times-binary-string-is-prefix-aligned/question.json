{"questionId": "1491", "acRate": 65.80442475745684, "difficulty": "Medium", "freqBar": 32.65181933158042, "frontendQuestionId": "1375", "paidOnly": false, "status": "ac", "title": "Number of Times Binary String Is Prefix-Aligned", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "number-of-times-binary-string-is-prefix-aligned", "content": "<p>You have a <strong>1-indexed</strong> binary string of length <code>n</code> where all the bits are <code>0</code> initially. We will flip all the bits of this binary string (i.e., change them from <code>0</code> to <code>1</code>) one by one. You are given a <strong>1-indexed</strong> integer array <code>flips</code> where <code>flips[i]</code> indicates that the bit at index <code>i</code> will be flipped in the <code>i<sup>th</sup></code> step.</p>\n\n<p>A binary string is <strong>prefix-aligned</strong> if, after the <code>i<sup>th</sup></code> step, all the bits in the <strong>inclusive</strong> range <code>[1, i]</code> are ones and all the other bits are zeros.</p>\n\n<p>Return <em>the number of times the binary string is <strong>prefix-aligned</strong> during the flipping process</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> flips = [3,2,4,1,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary string is initially &quot;00000&quot;.\nAfter applying step 1: The string becomes &quot;00100&quot;, which is not prefix-aligned.\nAfter applying step 2: The string becomes &quot;01100&quot;, which is not prefix-aligned.\nAfter applying step 3: The string becomes &quot;01110&quot;, which is not prefix-aligned.\nAfter applying step 4: The string becomes &quot;11110&quot;, which is prefix-aligned.\nAfter applying step 5: The string becomes &quot;11111&quot;, which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> flips = [4,1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The binary string is initially &quot;0000&quot;.\nAfter applying step 1: The string becomes &quot;0001&quot;, which is not prefix-aligned.\nAfter applying step 2: The string becomes &quot;1001&quot;, which is not prefix-aligned.\nAfter applying step 3: The string becomes &quot;1101&quot;, which is not prefix-aligned.\nAfter applying step 4: The string becomes &quot;1111&quot;, which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == flips.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>flips</code> is a permutation of the integers in the range <code>[1, n]</code>.</li>\n</ul>\n", "hints": ["If in the step x all bulb shines then bulbs 1,2,3,..,x should shines too."], "exampleTestcases": "[3,2,4,1,5]\n[4,1,2,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTimesAllBlue(vector<int>& flips) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numTimesAllBlue(int[] flips) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numTimesAllBlue(self, flips):\n        \"\"\"\n        :type flips: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numTimesAllBlue(self, flips: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numTimesAllBlue(int* flips, int flipsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumTimesAllBlue(int[] flips) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} flips\n * @return {number}\n */\nvar numTimesAllBlue = function(flips) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numTimesAllBlue(flips: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $flips\n     * @return Integer\n     */\n    function numTimesAllBlue($flips) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numTimesAllBlue(_ flips: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numTimesAllBlue(flips: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numTimesAllBlue(List<int> flips) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numTimesAllBlue(flips []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} flips\n# @return {Integer}\ndef num_times_all_blue(flips)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numTimesAllBlue(flips: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_times_all_blue(flips: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-times-all-blue flips)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_times_all_blue(Flips :: [integer()]) -> integer().\nnum_times_all_blue(Flips) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_times_all_blue(flips :: [integer]) :: integer\n  def num_times_all_blue(flips) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "bulb-switcher", "title": "Bulb Switcher", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "bulb-switcher-ii", "title": "Bulb Switcher II", "isPaidOnly": false}]}