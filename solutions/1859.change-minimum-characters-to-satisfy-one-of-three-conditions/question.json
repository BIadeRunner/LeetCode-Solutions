{"question_id": "1859", "problem_slug": "change-minimum-characters-to-satisfy-one-of-three-conditions", "problem_title": "Change Minimum Characters to Satisfy One of Three Conditions", "content": "You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.\nYour goal is to satisfy one of the following three conditions:\n\nEvery letter in a is strictly less than every letter in b in the alphabet.\nEvery letter in b is strictly less than every letter in a in the alphabet.\nBoth a and b consist of only one distinct letter.\n\nReturn the minimum number of operations needed to achieve your goal.\n \nExample 1:\n\nInput: a = \"aba\", b = \"caa\"\nOutput: 2\nExplanation: Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3).\n\nExample 2:\n\nInput: a = \"dabadd\", b = \"cda\"\nOutput: 3\nExplanation: The best way is to make condition 1 true by changing b to \"eee\".\n\n \nConstraints:\n\n1 <= a.length, b.length <= 105\na and b consist only of lowercase letters.\n\n", "hints": ["Iterate on each letter in the alphabet, and check the smallest number of operations needed to make it one of the following: the largest letter in a and smaller than the smallest one in b, vice versa, or let a and b consist only of this letter.", "For the first 2 conditions, take care that you can only change characters to lowercase letters, so you can't make 'z' the smallest letter in one of the strings or 'a' the largest letter in one of them."], "exampleTestcases": "\"aba\"\n\"caa\"\n\"dabadd\"\n\"cda\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minCharacters(string a, string b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minCharacters(String a, String b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minCharacters(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minCharacters(self, a: str, b: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minCharacters(char* a, char* b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinCharacters(string a, string b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar minCharacters = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minCharacters(a: string, b: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return Integer\n     */\n    function minCharacters($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minCharacters(_ a: String, _ b: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minCharacters(a: String, b: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minCharacters(String a, String b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minCharacters(a string, b string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef min_characters(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minCharacters(a: String, b: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_characters(a: String, b: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-characters a b)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_characters(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> integer().\nmin_characters(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_characters(a :: String.t, b :: String.t) :: integer\n  def min_characters(a, b) do\n    \n  end\nend"}}}