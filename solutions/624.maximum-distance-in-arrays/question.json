{"question_id": "624", "problem_slug": "maximum-distance-in-arrays", "problem_title": "Maximum Distance in Arrays", "content": "You are given m arrays, where each array is sorted in ascending order.\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|.\nReturn the maximum distance.\n \nExample 1:\n\nInput: arrays = [[1,2,3],[4,5],[1,2,3]]\nOutput: 4\nExplanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n\nExample 2:\n\nInput: arrays = [[1],[1]]\nOutput: 0\n\n \nConstraints:\n\nm == arrays.length\n2 <= m <= 105\n1 <= arrays[i].length <= 500\n-104 <= arrays[i][j] <= 104\narrays[i] is sorted in ascending order.\nThere will be at most 105 integers in all the arrays.\n\n", "hints": [], "exampleTestcases": "[[1,2,3],[4,5],[1,2,3]]\n[[1],[1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxDistance(vector<vector<int>>& arrays) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxDistance(List<List<Integer>> arrays) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxDistance(self, arrays):\n        \"\"\"\n        :type arrays: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxDistance(int** arrays, int arraysSize, int* arraysColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxDistance(IList<IList<int>> arrays) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} arrays\n * @return {number}\n */\nvar maxDistance = function(arrays) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxDistance(arrays: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $arrays\n     * @return Integer\n     */\n    function maxDistance($arrays) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxDistance(_ arrays: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxDistance(arrays: List<List<Int>>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxDistance(List<List<int>> arrays) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxDistance(arrays [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} arrays\n# @return {Integer}\ndef max_distance(arrays)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxDistance(arrays: List[List[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_distance(arrays: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-distance arrays)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_distance(Arrays :: [[integer()]]) -> integer().\nmax_distance(Arrays) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_distance(arrays :: [[integer]]) :: integer\n  def max_distance(arrays) do\n    \n  end\nend"}}}