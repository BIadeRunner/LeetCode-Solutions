{"question_id": "2013", "problem_slug": "minimum-skips-to-arrive-at-meeting-on-time", "problem_title": "Minimum Skips to Arrive at Meeting On Time", "content": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.\nAfter you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\n\nFor example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours, you do not need to wait.\n\nHowever, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\n\nFor example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.\n\nReturn the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.\n \nExample 1:\n\nInput: dist = [1,3,2], speed = 4, hoursBefore = 2\nOutput: 1\nExplanation:\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.\n\nExample 2:\n\nInput: dist = [7,3,5,5], speed = 2, hoursBefore = 10\nOutput: 2\nExplanation:\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.\n\nExample 3:\n\nInput: dist = [7,3,5,5], speed = 1, hoursBefore = 10\nOutput: -1\nExplanation: It is impossible to arrive at the meeting on time even if you skip all the rests.\n\n \nConstraints:\n\nn == dist.length\n1 <= n <= 1000\n1 <= dist[i] <= 105\n1 <= speed <= 106\n1 <= hoursBefore <= 107\n\n", "hints": ["Is there something you can keep track of from one road to another?", "How would knowing the start time for each state help us solve the problem?"], "exampleTestcases": "[1,3,2]\n4\n2\n[7,3,5,5]\n2\n10\n[7,3,5,5]\n1\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSkips(vector<int>& dist, int speed, int hoursBefore) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minSkips(int[] dist, int speed, int hoursBefore) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSkips(self, dist, speed, hoursBefore):\n        \"\"\"\n        :type dist: List[int]\n        :type speed: int\n        :type hoursBefore: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minSkips(int* dist, int distSize, int speed, int hoursBefore) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinSkips(int[] dist, int speed, int hoursBefore) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} dist\n * @param {number} speed\n * @param {number} hoursBefore\n * @return {number}\n */\nvar minSkips = function(dist, speed, hoursBefore) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSkips(dist: number[], speed: number, hoursBefore: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $dist\n     * @param Integer $speed\n     * @param Integer $hoursBefore\n     * @return Integer\n     */\n    function minSkips($dist, $speed, $hoursBefore) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSkips(_ dist: [Int], _ speed: Int, _ hoursBefore: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSkips(dist: IntArray, speed: Int, hoursBefore: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minSkips(List<int> dist, int speed, int hoursBefore) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSkips(dist []int, speed int, hoursBefore int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} dist\n# @param {Integer} speed\n# @param {Integer} hours_before\n# @return {Integer}\ndef min_skips(dist, speed, hours_before)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSkips(dist: Array[Int], speed: Int, hoursBefore: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_skips(dist: Vec<i32>, speed: i32, hours_before: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-skips dist speed hoursBefore)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_skips(Dist :: [integer()], Speed :: integer(), HoursBefore :: integer()) -> integer().\nmin_skips(Dist, Speed, HoursBefore) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_skips(dist :: [integer], speed :: integer, hours_before :: integer) :: integer\n  def min_skips(dist, speed, hours_before) do\n    \n  end\nend"}}}