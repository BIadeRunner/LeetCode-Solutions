{"question_id": "2011", "problem_slug": "maximum-value-after-insertion", "problem_title": "Maximum Value after Insertion", "content": "You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​. You cannot insert x to the left of the negative sign.\n\nFor example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.\nIf n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.\n\nReturn a string representing the maximum value of n​​​​​​ after the insertion.\n \nExample 1:\n\nInput: n = \"99\", x = 9\nOutput: \"999\"\nExplanation: The result is the same regardless of where you insert 9.\n\nExample 2:\n\nInput: n = \"-13\", x = 2\nOutput: \"-123\"\nExplanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.\n\n \nConstraints:\n\n1 <= n.length <= 105\n1 <= x <= 9\nThe digits in n​​​ are in the range [1, 9].\nn is a valid representation of an integer.\nIn the case of a negative n,​​​​​​ it will begin with '-'.\n\n", "hints": ["Note that if the number is negative it's the same as positive but you look for the minimum instead.", "In the case of maximum, if s[i] < x it's optimal that x is put before s[i].", "In the case of minimum, if s[i] > x it's optimal that x is put before s[i]."], "exampleTestcases": "\"99\"\n9\n\"-13\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string maxValue(string n, int x) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String maxValue(String n, int x) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxValue(self, n, x):\n        \"\"\"\n        :type n: str\n        :type x: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxValue(self, n: str, x: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* maxValue(char* n, int x) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string MaxValue(string n, int x) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} n\n * @param {number} x\n * @return {string}\n */\nvar maxValue = function(n, x) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxValue(n: string, x: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $n\n     * @param Integer $x\n     * @return String\n     */\n    function maxValue($n, $x) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxValue(_ n: String, _ x: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxValue(n: String, x: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String maxValue(String n, int x) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxValue(n string, x int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} n\n# @param {Integer} x\n# @return {String}\ndef max_value(n, x)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxValue(n: String, x: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_value(n: String, x: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-value n x)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_value(N :: unicode:unicode_binary(), X :: integer()) -> unicode:unicode_binary().\nmax_value(N, X) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_value(n :: String.t, x :: integer) :: String.t\n  def max_value(n, x) do\n    \n  end\nend"}}}