{"question_id": "2768", "problem_slug": "array-upper-bound", "problem_title": "Array Upper Bound", "content": "Write code that enhances all arrays such that you can call the upperBound() method on any array and it will return the last index of a given target number. nums is a sorted ascending array of numbers that may contain duplicates. If the target number is not found in the array, return -1.\n \nExample 1:\n\nInput: nums = [3,4,5], target = 5\nOutput: 2\nExplanation: Last index of target value is 2\n\nExample 2:\n\nInput: nums = [1,4,5], target = 2\nOutput: -1\nExplanation: Because there is no digit 2 in the array, return -1.\nExample 3:\n\nInput: nums = [3,4,6,6,6,6,7], target = 6\nOutput: 5\nExplanation: Last index of target value is 5\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i], target <= 104\nnums is sorted in ascending order.\n\n \nFollow up: Can you write an algorithm with O(log n) runtime complexity?", "hints": ["Inside the Array.prototype.upperBound function you have access to the \"this\" keyword. You can access array elements, values, and methods. For example \"this[0]\", \"this[1]\", \"this.length\", \"this.map()\", etc.", "The most efficient way to solve this problem is with binary search.", "Choose the middle element and check if it's less than or equal to the goal value. If so, you can rule out the left side of the array."], "exampleTestcases": "[3,4,5]\n5\n[1,4,5]\n2\n[3,4,6,6,6,6,7]\n6", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/** \n * @param {number} target\n * @return {number}\n */\nArray.prototype.upperBound = function(target) {\n    \n};\n\n\n// [3,4,5].upperBound(5); // 2\n// [1,4,5].upperBound(2); // -1\n// [3,4,6,6,6,6,7].upperBound(6) // 5"}, "TypeScript": {"langSlug": "typescript", "code": "interface Array<T> {\n    upperBound(target: number): number;\n}\n\nArray.prototype.upperBound = function(target): number {\n    \n};\n\n// [3,4,5].upperBound(5); // 2\n// [1,4,5].upperBound(2); // -1\n// [3,4,6,6,6,6,7].upperBound(6) // 5"}}}