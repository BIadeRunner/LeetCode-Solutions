{"question_id": "2015", "problem_slug": "determine-whether-matrix-can-be-obtained-by-rotation", "problem_title": "Determine Whether Matrix Can Be Obtained By Rotation", "content": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.\n \nExample 1:\n\n\nInput: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise to make mat equal target.\n\nExample 2:\n\n\nInput: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\nOutput: false\nExplanation: It is impossible to make mat equal to target by rotating mat.\n\nExample 3:\n\n\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.\n\n \nConstraints:\n\nn == mat.length == target.length\nn == mat[i].length == target[i].length\n1 <= n <= 10\nmat[i][j] and target[i][j] are either 0 or 1.\n\n", "hints": ["What is the maximum number of rotations you have to check?", "Is there a formula you can use to rotate a matrix 90 degrees?"], "exampleTestcases": "[[0,1],[1,0]]\n[[1,0],[0,1]]\n[[0,1],[1,1]]\n[[1,0],[0,1]]\n[[0,0,0],[0,1,0],[1,1,1]]\n[[1,1,1],[0,1,0],[0,0,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean findRotation(int[][] mat, int[][] target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findRotation(self, mat, target):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type target: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool findRotation(int** mat, int matSize, int* matColSize, int** target, int targetSize, int* targetColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool FindRotation(int[][] mat, int[][] target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @param {number[][]} target\n * @return {boolean}\n */\nvar findRotation = function(mat, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findRotation(mat: number[][], target: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer[][] $target\n     * @return Boolean\n     */\n    function findRotation($mat, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findRotation(_ mat: [[Int]], _ target: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findRotation(mat: Array<IntArray>, target: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool findRotation(List<List<int>> mat, List<List<int>> target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findRotation(mat [][]int, target [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @param {Integer[][]} target\n# @return {Boolean}\ndef find_rotation(mat, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findRotation(mat: Array[Array[Int]], target: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_rotation(mat: Vec<Vec<i32>>, target: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-rotation mat target)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_rotation(Mat :: [[integer()]], Target :: [[integer()]]) -> boolean().\nfind_rotation(Mat, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_rotation(mat :: [[integer]], target :: [[integer]]) :: boolean\n  def find_rotation(mat, target) do\n    \n  end\nend"}}}