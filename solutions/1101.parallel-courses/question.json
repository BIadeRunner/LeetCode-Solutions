{"question_id": "1101", "problem_slug": "parallel-courses", "problem_title": "Parallel Courses", "content": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei.\nIn one semester, you can take any number of courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. If there is no way to take all the courses, return -1.\n \nExample 1:\n\n\nInput: n = 3, relations = [[1,3],[2,3]]\nOutput: 2\nExplanation: The figure above represents the given graph.\nIn the first semester, you can take courses 1 and 2.\nIn the second semester, you can take course 3.\n\nExample 2:\n\n\nInput: n = 3, relations = [[1,2],[2,3],[3,1]]\nOutput: -1\nExplanation: No course can be studied because they are prerequisites of each other.\n\n \nConstraints:\n\n1 <= n <= 5000\n1 <= relations.length <= 5000\nrelations[i].length == 2\n1 <= prevCoursei, nextCoursei <= n\nprevCoursei != nextCoursei\nAll the pairs [prevCoursei, nextCoursei] are unique.\n\n", "hints": ["Try to think of it as a graph problem. It will be impossible to study all the courses if the graph had a cycle.", "The graph is a directed acyclic graph (DAG). The answer is the longes path in this DAG.", "You can use DP to find the longest path in the DAG."], "exampleTestcases": "3\n[[1,3],[2,3]]\n3\n[[1,2],[2,3],[3,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSemesters(int n, vector<vector<int>>& relations) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSemesters(int n, int[][] relations) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSemesters(self, n, relations):\n        \"\"\"\n        :type n: int\n        :type relations: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSemesters(int n, int** relations, int relationsSize, int* relationsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSemesters(int n, int[][] relations) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} relations\n * @return {number}\n */\nvar minimumSemesters = function(n, relations) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSemesters(n: number, relations: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $relations\n     * @return Integer\n     */\n    function minimumSemesters($n, $relations) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSemesters(_ n: Int, _ relations: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSemesters(n: Int, relations: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSemesters(int n, List<List<int>> relations) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSemesters(n int, relations [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} relations\n# @return {Integer}\ndef minimum_semesters(n, relations)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSemesters(n: Int, relations: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_semesters(n: i32, relations: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-semesters n relations)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_semesters(N :: integer(), Relations :: [[integer()]]) -> integer().\nminimum_semesters(N, Relations) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_semesters(n :: integer, relations :: [[integer]]) :: integer\n  def minimum_semesters(n, relations) do\n    \n  end\nend"}}}