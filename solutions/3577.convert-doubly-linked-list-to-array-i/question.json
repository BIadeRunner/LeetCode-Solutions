{"question_id": "3577", "problem_slug": "convert-doubly-linked-list-to-array-i", "problem_title": "Convert Doubly Linked List to Array I", "content": "You are given the head of a doubly linked list, which contains nodes that have a next pointer and a previous pointer.\nReturn an integer array which contains the elements of the linked list in order.\n \nExample 1:\n\nInput: head = [1,2,3,4,3,2,1]\nOutput: [1,2,3,4,3,2,1]\n\nExample 2:\n\nInput: head = [2,2,2,2,2]\nOutput: [2,2,2,2,2]\n\nExample 3:\n\nInput: head = [3,2,3,2,3,2]\nOutput: [3,2,3,2,3,2]\n\n \nConstraints:\n\nThe number of nodes in the given list is in the range [1, 50].\n1 <= Node.val <= 50\n\n", "hints": [], "exampleTestcases": "[1,2,3,4,3,2,1]\n[2,2,2,2,2]\n[3,2,3,2,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for doubly-linked list.\n * class Node {\n *     int val;\n *     Node* prev;\n *     Node* next;\n *     Node() : val(0), next(nullptr), prev(nullptr) {}\n *     Node(int x) : val(x), next(nullptr), prev(nullptr) {}\n *     Node(int x, Node *prev, Node *next) : val(x), next(next), prev(prev) {}\n * };\n */\nclass Solution {\npublic:\n\tvector<int> toArray(Node *head){\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node prev;\n    public Node next;\n};\n*/\n\nclass Solution {\n    public int[] toArray(Node head) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev=None, next=None):\n        self.val = val\n        self.prev = prev\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def toArray(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: List[int]\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev=None, next=None):\n        self.val = val\n        self.prev = prev\n        self.next = next\n\"\"\"\nclass Solution:\n    def toArray(self, root: 'Optional[Node]') -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/*\n// Definition for a Node.\nstruct Node {\n    int val;\n    struct Node* next;\n    struct Node* prev;\n};\n*/\n\nint* toArray(struct Node *head, int *returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n}\n*/\n\npublic class Solution {\n    public int[] ToArray(Node head) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val,prev,next) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n * };\n */\n\n/**\n * @param {_Node} head\n * @return {number[]}\n */\nvar toArray = function(head) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     prev: _Node | null\n *     next: _Node | null\n *     \n *     constructor(val?: number, prev? : _Node, next? : _Node) {\n *         this.val = (val===undefined ? 0 : val);\n *         this.prev = (prev===undefined ? null : prev);\n *         this.next = (next===undefined ? null : next);\n *     }\n * }\n */\n\n\nfunction toArray(head: _Node | null): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $prev = null;\n *     public $next = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->prev = null;\n *         $this->next = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $head\n     * @return Node\n     */\n    function toArray($head) {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var prev: Node? = null\n *     var next: Node? = null\n * }\n */\n\nclass Solution {\n    fun toArray(root: Node?): IntArray {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Next *Node\n *     Prev *Node\n * }\n */\n\nfunc toArray(head *Node) []int {\n    \n}"}}}