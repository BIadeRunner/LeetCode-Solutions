{"question_id": "1580", "problem_slug": "shuffle-the-array", "problem_title": "Shuffle the Array", "content": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\nReturn the array in the form [x1,y1,x2,y2,...,xn,yn].\n \nExample 1:\n\r\nInput: nums = [2,5,1,3,4,7], n = 3\r\nOutput: [2,3,5,4,1,7] \r\nExplanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\r\n\nExample 2:\n\r\nInput: nums = [1,2,3,4,4,3,2,1], n = 4\r\nOutput: [1,4,2,3,3,2,4,1]\r\n\nExample 3:\n\r\nInput: nums = [1,1,2,2], n = 2\r\nOutput: [1,2,1,2]\r\n\n \nConstraints:\n\n1 <= n <= 500\nnums.length == 2n\n1 <= nums[i] <= 10^3\n", "hints": ["Use two pointers to create the new array of 2n elements. The first starting at the beginning and the other starting at (n+1)th position. Alternate between them and create the new array."], "exampleTestcases": "[2,5,1,3,4,7]\n3\n[1,2,3,4,4,3,2,1]\n4\n[1,1,2,2]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> shuffle(vector<int>& nums, int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] shuffle(int[] nums, int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shuffle(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shuffle(int* nums, int numsSize, int n, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] Shuffle(int[] nums, int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\nvar shuffle = function(nums, n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shuffle(nums: number[], n: number): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function shuffle($nums, $n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shuffle(_ nums: [Int], _ n: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shuffle(nums: IntArray, n: Int): IntArray {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func shuffle(nums []int, n int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} n\n# @return {Integer[]}\ndef shuffle(nums, n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shuffle(nums: Array[Int], n: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shuffle(nums: Vec<i32>, n: i32) -> Vec<i32> {\n        \n    }\n}"}}}