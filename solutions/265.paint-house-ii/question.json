{"question_id": "265", "problem_slug": "paint-house-ii", "problem_title": "Paint House II", "content": "There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\nThe cost of painting each house with a certain color is represented by an n x k cost matrix costs.\n\nFor example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on...\n\nReturn the minimum cost to paint all houses.\n \nExample 1:\n\nInput: costs = [[1,5,3],[2,9,4]]\nOutput: 5\nExplanation:\nPaint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \nOr paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.\n\nExample 2:\n\nInput: costs = [[1,3],[2,4]]\nOutput: 5\n\n \nConstraints:\n\ncosts.length == n\ncosts[i].length == k\n1 <= n <= 100\n2 <= k <= 20\n1 <= costs[i][j] <= 20\n\n \nFollow up: Could you solve it in O(nk) runtime?\n", "hints": [], "exampleTestcases": "[[1,5,3],[2,9,4]]\n[[1,3],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minCostII(vector<vector<int>>& costs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minCostII(int[][] costs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minCostII(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minCostII(int** costs, int costsSize, int* costsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinCostII(int[][] costs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} costs\n * @return {number}\n */\nvar minCostII = function(costs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minCostII(costs: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function minCostII($costs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minCostII(_ costs: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minCostII(costs: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minCostII(List<List<int>> costs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minCostII(costs [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} costs\n# @return {Integer}\ndef min_cost_ii(costs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minCostII(costs: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost_ii(costs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-cost-ii costs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_cost_ii(Costs :: [[integer()]]) -> integer().\nmin_cost_ii(Costs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost_ii(costs :: [[integer]]) :: integer\n  def min_cost_ii(costs) do\n    \n  end\nend"}}}