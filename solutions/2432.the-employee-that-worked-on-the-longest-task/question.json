{"questionId": "2518", "acRate": 50.63626868953386, "difficulty": "Easy", "freqBar": 28.979918709233317, "frontendQuestionId": "2432", "paidOnly": false, "status": "ac", "title": "The Employee That Worked on the Longest Task", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "the-employee-that-worked-on-the-longest-task", "content": "<p>There are <code>n</code> employees, each with a unique id from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a 2D integer array <code>logs</code> where <code>logs[i] = [id<sub>i</sub>, leaveTime<sub>i</sub>]</code> where:</p>\n\n<ul>\n\t<li><code>id<sub>i</sub></code> is the id of the employee that worked on the <code>i<sup>th</sup></code> task, and</li>\n\t<li><code>leaveTime<sub>i</sub></code> is the time at which the employee finished the <code>i<sup>th</sup></code> task. All the values <code>leaveTime<sub>i</sub></code> are <strong>unique</strong>.</li>\n</ul>\n\n<p>Note that the <code>i<sup>th</sup></code> task starts the moment right after the <code>(i - 1)<sup>th</sup></code> task ends, and the <code>0<sup>th</sup></code> task starts at time <code>0</code>.</p>\n\n<p>Return <em>the id of the employee that worked the task with the longest time.</em> If there is a tie between two or more employees, return<em> the <strong>smallest</strong> id among them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [[0,10],[1,20]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 500</code></li>\n\t<li><code>logs[i].length == 2</code></li>\n\t<li><code>0 &lt;= id<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= leaveTime<sub>i</sub> &lt;= 500</code></li>\n\t<li><code>id<sub>i</sub> != id<sub>i+1</sub></code></li>\n\t<li><code>leaveTime<sub>i</sub></code> are sorted in a strictly increasing order.</li>\n</ul>\n", "hints": ["Find the time of the longest task", "Store each employee\u2019s longest task time in a hash table", "For employees that have the same longest task time, we only need the employee with the smallest ID"], "exampleTestcases": "10\n[[0,3],[2,5],[0,9],[1,15]]\n26\n[[1,1],[3,7],[2,12],[7,17]]\n2\n[[0,10],[1,20]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int hardestWorker(int n, vector<vector<int>>& logs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int hardestWorker(int n, int[][] logs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hardestWorker(self, n, logs):\n        \"\"\"\n        :type n: int\n        :type logs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int hardestWorker(int n, int** logs, int logsSize, int* logsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HardestWorker(int n, int[][] logs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} logs\n * @return {number}\n */\nvar hardestWorker = function(n, logs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hardestWorker(n: number, logs: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $logs\n     * @return Integer\n     */\n    function hardestWorker($n, $logs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hardestWorker(_ n: Int, _ logs: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hardestWorker(n: Int, logs: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int hardestWorker(int n, List<List<int>> logs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func hardestWorker(n int, logs [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} logs\n# @return {Integer}\ndef hardest_worker(n, logs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hardestWorker(n: Int, logs: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn hardest_worker(n: i32, logs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (hardest-worker n logs)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec hardest_worker(N :: integer(), Logs :: [[integer()]]) -> integer().\nhardest_worker(N, Logs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec hardest_worker(n :: integer, logs :: [[integer]]) :: integer\n  def hardest_worker(n, logs) do\n    \n  end\nend"}], "similarQuestionList": []}