{"questionId": "1677", "acRate": 83.30597227365055, "difficulty": "Easy", "freqBar": 42.3203847766875, "frontendQuestionId": "1572", "paidOnly": false, "status": "ac", "title": "Matrix Diagonal Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "matrix-diagonal-sum", "content": "<p>Given a&nbsp;square&nbsp;matrix&nbsp;<code>mat</code>, return the sum of the matrix diagonals.</p>\n\n<p>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/14/sample_1911.png\" style=\"width: 336px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> mat = [[<strong>1</strong>,2,<strong>3</strong>],\n&nbsp;             [4,<strong>5</strong>,6],\n&nbsp;             [<strong>7</strong>,8,<strong>9</strong>]]\n<strong>Output:</strong> 25\n<strong>Explanation: </strong>Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[<strong>1</strong>,1,1,<strong>1</strong>],\n&nbsp;             [1,<strong>1</strong>,<strong>1</strong>,1],\n&nbsp;             [1,<strong>1</strong>,<strong>1</strong>,1],\n&nbsp;             [<strong>1</strong>,1,1,<strong>1</strong>]]\n<strong>Output:</strong> 8\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[<strong>5</strong>]]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == mat.length == mat[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 100</code></li>\n</ul>\n", "hints": ["There will be overlap of elements in the primary and secondary diagonals if and only if the length of the matrix is odd, which is at the center."], "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]\n[[5]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int diagonalSum(vector<vector<int>>& mat) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int diagonalSum(int[][] mat) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def diagonalSum(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int diagonalSum(int** mat, int matSize, int* matColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DiagonalSum(int[][] mat) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar diagonalSum = function(mat) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function diagonalSum(mat: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function diagonalSum($mat) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func diagonalSum(_ mat: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun diagonalSum(mat: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int diagonalSum(List<List<int>> mat) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func diagonalSum(mat [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef diagonal_sum(mat)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def diagonalSum(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn diagonal_sum(mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (diagonal-sum mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec diagonal_sum(Mat :: [[integer()]]) -> integer().\ndiagonal_sum(Mat) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec diagonal_sum(mat :: [[integer]]) :: integer\n  def diagonal_sum(mat) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "check-if-every-row-and-column-contains-all-numbers", "title": "Check if Every Row and Column Contains All Numbers", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-if-matrix-is-x-matrix", "title": "Check if Matrix Is X-Matrix", "isPaidOnly": false}]}