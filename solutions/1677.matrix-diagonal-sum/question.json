{"question_id": "1677", "problem_slug": "matrix-diagonal-sum", "problem_title": "Matrix Diagonal Sum", "content": "Given a square matrix mat, return the sum of the matrix diagonals.\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\n \nExample 1:\n\n\nInput: mat = [[1,2,3],\n              [4,5,6],\n              [7,8,9]]\nOutput: 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.\n\nExample 2:\n\nInput: mat = [[1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1]]\nOutput: 8\n\nExample 3:\n\nInput: mat = [[5]]\nOutput: 5\n\n \nConstraints:\n\nn == mat.length == mat[i].length\n1 <= n <= 100\n1 <= mat[i][j] <= 100\n\n", "hints": ["There will be overlap of elements in the primary and secondary diagonals if and only if the length of the matrix is odd, which is at the center."], "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]\n[[5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int diagonalSum(vector<vector<int>>& mat) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int diagonalSum(int[][] mat) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def diagonalSum(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int diagonalSum(int** mat, int matSize, int* matColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DiagonalSum(int[][] mat) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar diagonalSum = function(mat) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function diagonalSum(mat: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function diagonalSum($mat) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func diagonalSum(_ mat: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun diagonalSum(mat: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int diagonalSum(List<List<int>> mat) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func diagonalSum(mat [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef diagonal_sum(mat)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def diagonalSum(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn diagonal_sum(mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (diagonal-sum mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec diagonal_sum(Mat :: [[integer()]]) -> integer().\ndiagonal_sum(Mat) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec diagonal_sum(mat :: [[integer]]) :: integer\n  def diagonal_sum(mat) do\n    \n  end\nend"}}}