{"questionId": "1566", "acRate": 64.58603890010734, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1455", "paidOnly": false, "status": "ac", "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}], "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence", "content": "<p>Given a <code>sentence</code> that consists of some words separated by a <strong>single space</strong>, and a <code>searchWord</code>, check if <code>searchWord</code> is a prefix of any word in <code>sentence</code>.</p>\n\n<p>Return <em>the index of the word in </em><code>sentence</code><em> (<strong>1-indexed</strong>) where </em><code>searchWord</code><em> is a prefix of this word</em>. If <code>searchWord</code> is a prefix of more than one word, return the index of the first word <strong>(minimum index)</strong>. If there is no such word return <code>-1</code>.</p>\n\n<p>A <strong>prefix</strong> of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;i love eating burger&quot;, searchWord = &quot;burg&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> &quot;burg&quot; is prefix of &quot;burger&quot; which is the 4th word in the sentence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;this problem is an easy problem&quot;, searchWord = &quot;pro&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> &quot;pro&quot; is prefix of &quot;problem&quot; which is the 2nd and the 6th word in the sentence, but we return 2 as it&#39;s the minimal index.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;i am tired&quot;, searchWord = &quot;you&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;you&quot; is not a prefix of any word in the sentence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= searchWord.length &lt;= 10</code></li>\n\t<li><code>sentence</code> consists of lowercase English letters and spaces.</li>\n\t<li><code>searchWord</code> consists of lowercase English letters.</li>\n</ul>\n", "hints": ["First extract the words of the sentence.", "Check for each word if searchWord occurs at index 0, if so return the index of this word (1-indexed)", "If searchWord doesn't exist as a prefix of any word return the default value (-1)."], "exampleTestcases": "\"i love eating burger\"\n\"burg\"\n\"this problem is an easy problem\"\n\"pro\"\n\"i am tired\"\n\"you\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int isPrefixOfWord(string sentence, string searchWord) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int isPrefixOfWord(String sentence, String searchWord) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPrefixOfWord(self, sentence, searchWord):\n        \"\"\"\n        :type sentence: str\n        :type searchWord: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int isPrefixOfWord(char* sentence, char* searchWord) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IsPrefixOfWord(string sentence, string searchWord) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @param {string} searchWord\n * @return {number}\n */\nvar isPrefixOfWord = function(sentence, searchWord) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPrefixOfWord(sentence: string, searchWord: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @param String $searchWord\n     * @return Integer\n     */\n    function isPrefixOfWord($sentence, $searchWord) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPrefixOfWord(_ sentence: String, _ searchWord: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPrefixOfWord(sentence: String, searchWord: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int isPrefixOfWord(String sentence, String searchWord) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isPrefixOfWord(sentence string, searchWord string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} sentence\n# @param {String} search_word\n# @return {Integer}\ndef is_prefix_of_word(sentence, search_word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPrefixOfWord(sentence: String, searchWord: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_prefix_of_word(sentence: String, search_word: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-prefix-of-word sentence searchWord)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_prefix_of_word(Sentence :: unicode:unicode_binary(), SearchWord :: unicode:unicode_binary()) -> integer().\nis_prefix_of_word(Sentence, SearchWord) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_prefix_of_word(sentence :: String.t, search_word :: String.t) :: integer\n  def is_prefix_of_word(sentence, search_word) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "counting-words-with-a-given-prefix", "title": "Counting Words With a Given Prefix", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-prefixes-of-a-given-string", "title": "Count Prefixes of a Given String", "isPaidOnly": false}]}