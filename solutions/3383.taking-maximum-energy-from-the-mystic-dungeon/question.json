{"question_id": "3383", "problem_slug": "taking-maximum-energy-from-the-mystic-dungeon", "problem_title": "Taking Maximum Energy From the Mystic Dungeon", "content": "In a mystic dungeon, n magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\nYou have been cursed in such a way that after absorbing energy from magician i, you will be instantly transported to magician (i + k). This process will be repeated until you reach the magician where (i + k) does not exist.\nIn other words, you will choose a starting point and then teleport with k jumps until you reach the end of the magicians' sequence, absorbing all the energy during the journey.\nYou are given an array energy and an integer k. Return the maximum possible energy you can gain.\n \nExample 1:\n\nInput:  energy = [5,2,-10,-5,1], k = 3\nOutput: 3\nExplanation: We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.\n\nExample 2:\n\nInput: energy = [-2,-3,-1], k = 2\nOutput: -1\nExplanation: We can gain a total energy of -1 by starting from magician 2.\n\n \nConstraints:\n\n1 <= energy.length <= 105\n-1000 <= energy[i] <= 1000\n1 <= k <= energy.length - 1\n\n \n​​​​​​", "hints": ["Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.", "We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."], "exampleTestcases": "[5,2,-10,-5,1]\n3\n[-2,-3,-1]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumEnergy(vector<int>& energy, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumEnergy(int[] energy, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumEnergy(self, energy, k):\n        \"\"\"\n        :type energy: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumEnergy(self, energy: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumEnergy(int* energy, int energySize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumEnergy(int[] energy, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} energy\n * @param {number} k\n * @return {number}\n */\nvar maximumEnergy = function(energy, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumEnergy(energy: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $energy\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumEnergy($energy, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumEnergy(_ energy: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumEnergy(energy: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumEnergy(List<int> energy, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumEnergy(energy []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} energy\n# @param {Integer} k\n# @return {Integer}\ndef maximum_energy(energy, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumEnergy(energy: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_energy(energy: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-energy energy k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_energy(Energy :: [integer()], K :: integer()) -> integer().\nmaximum_energy(Energy, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_energy(energy :: [integer], k :: integer) :: integer\n  def maximum_energy(energy, k) do\n    \n  end\nend"}}}