{"questionId": "2076", "acRate": 74.93484493093563, "difficulty": "Easy", "freqBar": 65.9579071924587, "frontendQuestionId": "1945", "paidOnly": false, "status": "ac", "title": "Sum of Digits of String After Convert", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "sum-of-digits-of-string-after-convert", "content": "<p>You are given a string <code>s</code> consisting of lowercase English letters, and an integer <code>k</code>. Your task is to <em>convert</em> the string into an integer by a special process, and then <em>transform</em> it by summing its digits repeatedly <code>k</code> times. More specifically, perform the following steps:</p>\n\n<ol>\n\t<li><strong>Convert</strong> <code>s</code> into an integer by replacing each letter with its position in the alphabet (i.e.&nbsp;replace <code>&#39;a&#39;</code> with <code>1</code>, <code>&#39;b&#39;</code> with <code>2</code>, ..., <code>&#39;z&#39;</code> with <code>26</code>).</li>\n\t<li><strong>T</strong><strong>ransform</strong> the integer by replacing it with the <strong>sum of its digits</strong>.</li>\n\t<li>Repeat the <strong>transform</strong> operation (step 2) <code>k</code><strong> times</strong> in total.</li>\n</ol>\n\n<p>For example, if <code>s = &quot;zbax&quot;</code> and <code>k = 2</code>, then the resulting integer would be <code>8</code> by the following operations:</p>\n\n<ol>\n\t<li><strong>Convert</strong>: <code>&quot;zbax&quot; \u279d &quot;(26)(2)(1)(24)&quot; \u279d &quot;262124&quot; \u279d 262124</code></li>\n\t<li><strong>Transform #1</strong>: <code>262124 \u279d 2 + 6 + 2 + 1 + 2 + 4 \u279d 17</code></li>\n\t<li><strong>Transform #2</strong>: <code>17 \u279d 1 + 7 \u279d 8</code></li>\n</ol>\n\n<p>Return the <strong>resulting</strong> <strong>integer</strong> after performing the <strong>operations</strong> described above.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;iiii&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">36</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The operations are as follows:<br />\n- Convert: &quot;iiii&quot; \u279d &quot;(9)(9)(9)(9)&quot; \u279d &quot;9999&quot; \u279d 9999<br />\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36<br />\nThus the resulting integer is 36.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcode&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The operations are as follows:<br />\n- Convert: &quot;leetcode&quot; \u279d &quot;(12)(5)(5)(20)(3)(15)(4)(5)&quot; \u279d &quot;12552031545&quot; \u279d 12552031545<br />\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33<br />\n- Transform #2: 33 \u279d 3 + 3 \u279d 6<br />\nThus the resulting integer is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;zbax&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n", "hints": ["First, let's note that after the first transform the value will be at most 100 * 10 which is not much", "After The first transform, we can just do the rest of the transforms by brute force"], "exampleTestcases": "\"iiii\"\n1\n\"leetcode\"\n2\n\"zbax\"\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getLucky(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getLucky(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getLucky(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getLucky(self, s: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int getLucky(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetLucky(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar getLucky = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getLucky(s: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function getLucky($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getLucky(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getLucky(s: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int getLucky(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getLucky(s string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef get_lucky(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getLucky(s: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_lucky(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-lucky s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_lucky(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nget_lucky(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_lucky(s :: String.t, k :: integer) :: integer\n  def get_lucky(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "happy-number", "title": "Happy Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "add-digits", "title": "Add Digits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-integers-with-even-digit-sum", "title": "Count Integers With Even Digit Sum", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "minimum-element-after-replacement-with-digit-sum", "title": "Minimum Element After Replacement With Digit Sum", "isPaidOnly": false}]}