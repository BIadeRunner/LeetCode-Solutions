{"question_id": "2836", "problem_slug": "neither-minimum-nor-maximum", "problem_title": "Neither Minimum nor Maximum", "content": "Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.\nReturn the selected integer.\n \nExample 1:\n\nInput: nums = [3,2,1,4]\nOutput: 2\nExplanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.\n\nExample 2:\n\nInput: nums = [1,2]\nOutput: -1\nExplanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.\n\nExample 3:\n\nInput: nums = [2,1,3]\nOutput: 2\nExplanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. \n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\nAll values in nums are distinct\n\n", "hints": ["Find any value in the array that is not the minimum or the maximum value."], "exampleTestcases": "[3,2,1,4]\n[1,2]\n[2,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findNonMinOrMax(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findNonMinOrMax(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findNonMinOrMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findNonMinOrMax(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findNonMinOrMax(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindNonMinOrMax(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNonMinOrMax = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findNonMinOrMax(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findNonMinOrMax($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findNonMinOrMax(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findNonMinOrMax(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findNonMinOrMax(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findNonMinOrMax(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_non_min_or_max(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findNonMinOrMax(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_non_min_or_max(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-non-min-or-max nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_non_min_or_max(Nums :: [integer()]) -> integer().\nfind_non_min_or_max(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_non_min_or_max(nums :: [integer]) :: integer\n  def find_non_min_or_max(nums) do\n    \n  end\nend"}}}