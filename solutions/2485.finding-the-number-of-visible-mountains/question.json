{"question_id": "2485", "problem_slug": "finding-the-number-of-visible-mountains", "problem_title": "Finding the Number of Visible Mountains", "content": "You are given a 0-indexed 2D integer array peaks where peaks[i] = [xi, yi] states that mountain i has a peak at coordinates (xi, yi). A mountain can be described as a right-angled isosceles triangle, with its base along the x-axis and a right angle at its peak. More formally, the gradients of ascending and descending the mountain are 1 and -1 respectively.\nA mountain is considered visible if its peak does not lie within another mountain (including the border of other mountains).\nReturn the number of visible mountains.\n \nExample 1:\n\n\nInput: peaks = [[2,2],[6,3],[5,4]]\nOutput: 2\nExplanation: The diagram above shows the mountains.\n- Mountain 0 is visible since its peak does not lie within another mountain or its sides.\n- Mountain 1 is not visible since its peak lies within the side of mountain 2.\n- Mountain 2 is visible since its peak does not lie within another mountain or its sides.\nThere are 2 mountains that are visible.\nExample 2:\n\n\nInput: peaks = [[1,3],[1,3]]\nOutput: 0\nExplanation: The diagram above shows the mountains (they completely overlap).\nBoth mountains are not visible since their peaks lie within each other.\n\n \nConstraints:\n\n1 <= peaks.length <= 105\npeaks[i].length == 2\n1 <= xi, yi <= 105\n\n", "hints": ["How can we efficiently find for each mountain the relevant mountains to compare itself against to check whether or not it would be visible?", "Do you notice a pattern after sorting the peaks by their x-coordinates?", "After sorting, process the peaks sequentially and use a monotonic stack to store currently visible mountains."], "exampleTestcases": "[[2,2],[6,3],[5,4]]\n[[1,3],[1,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int visibleMountains(vector<vector<int>>& peaks) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int visibleMountains(int[][] peaks) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def visibleMountains(self, peaks):\n        \"\"\"\n        :type peaks: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def visibleMountains(self, peaks: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int visibleMountains(int** peaks, int peaksSize, int* peaksColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int VisibleMountains(int[][] peaks) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} peaks\n * @return {number}\n */\nvar visibleMountains = function(peaks) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function visibleMountains(peaks: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $peaks\n     * @return Integer\n     */\n    function visibleMountains($peaks) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func visibleMountains(_ peaks: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun visibleMountains(peaks: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int visibleMountains(List<List<int>> peaks) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func visibleMountains(peaks [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} peaks\n# @return {Integer}\ndef visible_mountains(peaks)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def visibleMountains(peaks: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn visible_mountains(peaks: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (visible-mountains peaks)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec visible_mountains(Peaks :: [[integer()]]) -> integer().\nvisible_mountains(Peaks) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec visible_mountains(peaks :: [[integer]]) :: integer\n  def visible_mountains(peaks) do\n    \n  end\nend"}}}