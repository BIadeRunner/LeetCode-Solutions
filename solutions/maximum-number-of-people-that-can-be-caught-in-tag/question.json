{"questionId": "1979", "acRate": 51.43827859569649, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1989", "paidOnly": true, "status": "ac", "title": "Maximum Number of People That Can Be Caught in Tag", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "maximum-number-of-people-that-can-be-caught-in-tag", "content": "<p>You are playing a game of tag with your friends. In tag, people are divided into two teams: people who are &quot;it&quot;, and people who are not &quot;it&quot;. The people who are &quot;it&quot; want to catch as many people as possible who are not &quot;it&quot;.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>team</code> containing only zeros (denoting people who are <strong>not</strong> &quot;it&quot;) and ones (denoting people who are &quot;it&quot;), and an integer <code>dist</code>. A person who is &quot;it&quot; at index <code>i</code> can catch any <strong>one</strong> person whose index is in the range <code>[i - dist, i + dist]</code> (<strong>inclusive</strong>) and is <strong>not</strong> &quot;it&quot;.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of people that the people who are &quot;it&quot; can catch</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> team = [0,1,0,1,0], dist = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe person who is &quot;it&quot; at index 1 can catch people in the range [i-dist, i+dist] = [1-3, 1+3] = [-2, 4].\nThey can catch the person who is not &quot;it&quot; at index 2.\nThe person who is &quot;it&quot; at index 3 can catch people in the range [i-dist, i+dist] = [3-3, 3+3] = [0, 6].\nThey can catch the person who is not &quot;it&quot; at index 0.\nThe person who is not &quot;it&quot; at index 4 will not be caught because the people at indices 1 and 3 are already catching one person.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> team = [1], dist = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThere are no people who are not &quot;it&quot; to catch.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> team = [0], dist = 1\n<strong>Output:</strong> 0\n<strong>Explanation:\n</strong>There are no people who are &quot;it&quot; to catch people.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= team.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= team[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= dist &lt;= team.length</code></li>\n</ul>\n", "hints": ["Try to use as much of the range of a person who is \"it\" as possible.", "Find the leftmost person who is \"it\" that has not caught anyone yet, and the leftmost person who is not \"it\" that has not been caught yet.", "If the person who is not \"it\" can be caught, pair them together and repeat the process.", "If the person who is not \"it\" cannot be caught, and the person who is not \"it\" is on the left of the person who is \"it\", find the next leftmost person who is not \"it\".", "If the person who is not \"it\" cannot be caught, and the person who is \"it\" is on the left of the person who is not \"it\", find the next leftmost person who is \"it\"."], "exampleTestcases": "[0,1,0,1,0]\n3\n[1]\n1\n[0]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int catchMaximumAmountofPeople(vector<int>& team, int dist) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int catchMaximumAmountofPeople(int[] team, int dist) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def catchMaximumAmountofPeople(self, team, dist):\n        \"\"\"\n        :type team: List[int]\n        :type dist: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int catchMaximumAmountofPeople(int* team, int teamSize, int dist) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CatchMaximumAmountofPeople(int[] team, int dist) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} team\n * @param {number} dist\n * @return {number}\n */\nvar catchMaximumAmountofPeople = function(team, dist) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function catchMaximumAmountofPeople(team: number[], dist: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $team\n     * @param Integer $dist\n     * @return Integer\n     */\n    function catchMaximumAmountofPeople($team, $dist) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func catchMaximumAmountofPeople(_ team: [Int], _ dist: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun catchMaximumAmountofPeople(team: IntArray, dist: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int catchMaximumAmountofPeople(List<int> team, int dist) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func catchMaximumAmountofPeople(team []int, dist int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} team\n# @param {Integer} dist\n# @return {Integer}\ndef catch_maximum_amountof_people(team, dist)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def catchMaximumAmountofPeople(team: Array[Int], dist: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn catch_maximum_amountof_people(team: Vec<i32>, dist: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (catch-maximum-amountof-people team dist)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec catch_maximum_amountof_people(Team :: [integer()], Dist :: integer()) -> integer().\ncatch_maximum_amountof_people(Team, Dist) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec catch_maximum_amountof_people(team :: [integer], dist :: integer) :: integer\n  def catch_maximum_amountof_people(team, dist) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-number-of-food-buckets-to-feed-the-hamsters", "title": "Minimum Number of Food Buckets to Feed the Hamsters", "isPaidOnly": false}]}