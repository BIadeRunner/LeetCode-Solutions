{"question_id": "555", "problem_slug": "split-concatenated-strings", "problem_title": "Split Concatenated Strings", "content": "You are given an array of strings strs. You could concatenate these strings together into a loop, where for each string, you could choose to reverse it or not. Among all the possible loops\nReturn the lexicographically largest string after cutting the loop, which will make the looped string into a regular one.\nSpecifically, to find the lexicographically largest string, you need to experience two phases:\n\nConcatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\nCut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint.\n\nAnd your job is to find the lexicographically largest one among all the possible regular strings.\n \nExample 1:\n\nInput: strs = [\"abc\",\"xyz\"]\nOutput: \"zyxcba\"\nExplanation: You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", where '-' represents the looped status. \nThe answer string came from the fourth looped one, where you could cut from the middle character 'a' and get \"zyxcba\".\n\nExample 2:\n\nInput: strs = [\"abc\"]\nOutput: \"cba\"\n\n \nConstraints:\n\n1 <= strs.length <= 1000\n1 <= strs[i].length <= 1000\n1 <= sum(strs[i].length) <= 1000\nstrs[i] consists of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "[\"abc\",\"xyz\"]\n[\"abc\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string splitLoopedString(vector<string>& strs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String splitLoopedString(String[] strs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def splitLoopedString(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def splitLoopedString(self, strs: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* splitLoopedString(char** strs, int strsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SplitLoopedString(string[] strs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar splitLoopedString = function(strs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function splitLoopedString(strs: string[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function splitLoopedString($strs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func splitLoopedString(_ strs: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun splitLoopedString(strs: Array<String>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String splitLoopedString(List<String> strs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func splitLoopedString(strs []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} strs\n# @return {String}\ndef split_looped_string(strs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def splitLoopedString(strs: Array[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn split_looped_string(strs: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (split-looped-string strs)\n  (-> (listof string?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec split_looped_string(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nsplit_looped_string(Strs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_looped_string(strs :: [String.t]) :: String.t\n  def split_looped_string(strs) do\n    \n  end\nend"}}}