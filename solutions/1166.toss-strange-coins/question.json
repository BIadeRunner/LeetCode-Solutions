{"question_id": "1166", "problem_slug": "toss-strange-coins", "problem_title": "Toss Strange Coins", "content": "You have some coins.  The i-th coin has a probability prob[i] of facing heads when tossed.\nReturn the probability that the number of coins facing heads equals target if you toss every coin exactly once.\n \nExample 1:\nInput: prob = [0.4], target = 1\nOutput: 0.40000\nExample 2:\nInput: prob = [0.5,0.5,0.5,0.5,0.5], target = 0\nOutput: 0.03125\n\n \nConstraints:\n\n1 <= prob.length <= 1000\n0 <= prob[i] <= 1\n0 <= target <= prob.length\nAnswers will be accepted as correct if they are within 10^-5 of the correct answer.\n\n", "hints": ["What about solving the problem with DP?", "Use DP with two states dp[pos][cnt], where pos represents the pos-th coin and cnt is the number of heads seen so far.", "You can do the transitions with a little bit math.", "For the base case, when pos == n return (cnt == target) to filter out the invalid scenarios."], "exampleTestcases": "[0.4]\n1\n[0.5,0.5,0.5,0.5,0.5]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double probabilityOfHeads(vector<double>& prob, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double probabilityOfHeads(double[] prob, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def probabilityOfHeads(self, prob, target):\n        \"\"\"\n        :type prob: List[float]\n        :type target: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double probabilityOfHeads(double* prob, int probSize, int target){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double ProbabilityOfHeads(double[] prob, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prob\n * @param {number} target\n * @return {number}\n */\nvar probabilityOfHeads = function(prob, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function probabilityOfHeads(prob: number[], target: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float[] $prob\n     * @param Integer $target\n     * @return Float\n     */\n    function probabilityOfHeads($prob, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func probabilityOfHeads(_ prob: [Double], _ target: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun probabilityOfHeads(prob: DoubleArray, target: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double probabilityOfHeads(List<double> prob, int target) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func probabilityOfHeads(prob []float64, target int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Float[]} prob\n# @param {Integer} target\n# @return {Float}\ndef probability_of_heads(prob, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def probabilityOfHeads(prob: Array[Double], target: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn probability_of_heads(prob: Vec<f64>, target: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (probability-of-heads prob target)\n  (-> (listof flonum?) exact-integer? flonum?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec probability_of_heads(Prob :: [float()], Target :: integer()) -> float().\nprobability_of_heads(Prob, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec probability_of_heads(prob :: [float], target :: integer) :: float\n  def probability_of_heads(prob, target) do\n\n  end\nend"}}}