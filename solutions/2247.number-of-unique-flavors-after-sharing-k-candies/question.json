{"questionId": "2247", "acRate": 55.64466378778532, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2107", "paidOnly": true, "status": "ac", "title": "Number of Unique Flavors After Sharing K Candies", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "number-of-unique-flavors-after-sharing-k-candies", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>candies</code>, where <code>candies[i]</code> represents the flavor of the <code>i<sup>th</sup></code> candy. Your mom wants you to share these candies with your little sister by giving her <code>k</code> <strong>consecutive</strong> candies, but you want to keep as many flavors of candies as possible.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of <strong>unique</strong> flavors of candy you can keep after sharing </em><em> with your sister.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [1,<u>2,2,3</u>,4,3], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nGive the candies in the range [1, 3] (inclusive) with flavors [2,2,3].\nYou can eat candies with flavors [1,4,3].\nThere are 3 unique flavors, so return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [2,2,2,<u>2,3</u>,3], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nGive the candies in the range [3, 4] (inclusive) with flavors [2,3].\nYou can eat candies with flavors [2,2,2,3].\nThere are 2 unique flavors, so return 2.\nNote that you can also share the candies with flavors [2,2] and eat the candies with flavors [2,2,3,3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [2,4,5], k = 0\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nYou do not have to give any candies.\nYou can eat the candies with flavors [2,4,5].\nThere are 3 unique flavors, so return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candies.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= candies[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= candies.length</code></li>\n</ul>\n", "hints": ["For every group of k consecutive candies, count the number of unique flavors not inside that group. Return the largest number of unique flavors.", "When calculating an adjacent group of k consecutive candies, can you use some of your previous calculations?", "Use a sliding window where the window is the group of k consecutive candies you are sharing. Use a hash map to store the number of candies of each type you can keep."], "exampleTestcases": "[1,2,2,3,4,3]\n3\n[2,2,2,2,3,3]\n2\n[2,4,5]\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shareCandies(vector<int>& candies, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shareCandies(int[] candies, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shareCandies(self, candies, k):\n        \"\"\"\n        :type candies: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shareCandies(self, candies: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int shareCandies(int* candies, int candiesSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShareCandies(int[] candies, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} candies\n * @param {number} k\n * @return {number}\n */\nvar shareCandies = function(candies, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shareCandies(candies: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $k\n     * @return Integer\n     */\n    function shareCandies($candies, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shareCandies(_ candies: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shareCandies(candies: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int shareCandies(List<int> candies, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shareCandies(candies []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} candies\n# @param {Integer} k\n# @return {Integer}\ndef share_candies(candies, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shareCandies(candies: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn share_candies(candies: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (share-candies candies k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec share_candies(Candies :: [integer()], K :: integer()) -> integer().\nshare_candies(Candies, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec share_candies(candies :: [integer], k :: integer) :: integer\n  def share_candies(candies, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "remove-boxes", "title": "Remove Boxes", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "subarrays-with-k-different-integers", "title": "Subarrays with K Different Integers", "isPaidOnly": false}]}