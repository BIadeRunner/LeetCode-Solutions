{"question_id": "2247", "problem_slug": "number-of-unique-flavors-after-sharing-k-candies", "problem_title": "Number of Unique Flavors After Sharing K Candies", "content": "You are given a 0-indexed integer array candies, where candies[i] represents the flavor of the ith candy. Your mom wants you to share these candies with your little sister by giving her k consecutive candies, but you want to keep as many flavors of candies as possible.\nReturn the maximum number of unique flavors of candy you can keep after sharing  with your sister.\n \nExample 1:\n\nInput: candies = [1,2,2,3,4,3], k = 3\nOutput: 3\nExplanation: \nGive the candies in the range [1, 3] (inclusive) with flavors [2,2,3].\nYou can eat candies with flavors [1,4,3].\nThere are 3 unique flavors, so return 3.\n\nExample 2:\n\nInput: candies = [2,2,2,2,3,3], k = 2\nOutput: 2\nExplanation: \nGive the candies in the range [3, 4] (inclusive) with flavors [2,3].\nYou can eat candies with flavors [2,2,2,3].\nThere are 2 unique flavors, so return 2.\nNote that you can also share the candies with flavors [2,2] and eat the candies with flavors [2,2,3,3].\n\nExample 3:\n\nInput: candies = [2,4,5], k = 0\nOutput: 3\nExplanation: \nYou do not have to give any candies.\nYou can eat the candies with flavors [2,4,5].\nThere are 3 unique flavors, so return 3.\n\n \nConstraints:\n\n1 <= candies.length <= 105\n1 <= candies[i] <= 105\n0 <= k <= candies.length\n\n", "hints": ["For every group of k consecutive candies, count the number of unique flavors not inside that group. Return the largest number of unique flavors.", "When calculating an adjacent group of k consecutive candies, can you use some of your previous calculations?", "Use a sliding window where the window is the group of k consecutive candies you are sharing. Use a hash map to store the number of candies of each type you can keep."], "exampleTestcases": "[1,2,2,3,4,3]\n3\n[2,2,2,2,3,3]\n2\n[2,4,5]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shareCandies(vector<int>& candies, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shareCandies(int[] candies, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shareCandies(self, candies, k):\n        \"\"\"\n        :type candies: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shareCandies(self, candies: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shareCandies(int* candies, int candiesSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShareCandies(int[] candies, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} candies\n * @param {number} k\n * @return {number}\n */\nvar shareCandies = function(candies, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shareCandies(candies: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $k\n     * @return Integer\n     */\n    function shareCandies($candies, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shareCandies(_ candies: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shareCandies(candies: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shareCandies(List<int> candies, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shareCandies(candies []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} candies\n# @param {Integer} k\n# @return {Integer}\ndef share_candies(candies, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shareCandies(candies: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn share_candies(candies: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (share-candies candies k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec share_candies(Candies :: [integer()], K :: integer()) -> integer().\nshare_candies(Candies, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec share_candies(candies :: [integer], k :: integer) :: integer\n  def share_candies(candies, k) do\n    \n  end\nend"}}}