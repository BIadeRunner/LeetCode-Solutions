{"question_id": "2612", "problem_slug": "minimum-cost-to-buy-apples", "problem_title": "Minimum Cost to Buy Apples", "content": "You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads, where roads[i] = [ai, bi, costi] indicates that there is a bidirectional road between cities ai and bi with a cost of traveling equal to costi.\nYou can buy apples in any city you want, but some cities have different costs to buy apples. You are given the 1-based array appleCost where appleCost[i] is the cost of buying one apple from city i.\nYou start at some city, traverse through various roads, and eventually buy exactly one apple from any city. After you buy that apple, you have to return back to the city you started at, but now the cost of all the roads will be multiplied by a given factor k.\nGiven the integer k, return a 1-based array answer of size n where answer[i] is the minimum total cost to buy an apple if you start at city i.\n \nExample 1:\n\n\nInput: n = 4, roads = [[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]], appleCost = [56,42,102,301], k = 2\nOutput: [54,42,48,51]\nExplanation: The minimum cost for each starting city is the following:\n- Starting at city 1: You take the path 1 -> 2, buy an apple at city 2, and finally take the path 2 -> 1. The total cost is 4 + 42 + 4 * 2 = 54.\n- Starting at city 2: You directly buy an apple at city 2. The total cost is 42.\n- Starting at city 3: You take the path 3 -> 2, buy an apple at city 2, and finally take the path 2 -> 3. The total cost is 2 + 42 + 2 * 2 = 48.\n- Starting at city 4: You take the path 4 -> 3 -> 2 then you buy at city 2, and finally take the path 2 -> 3 -> 4. The total cost is 1 + 2 + 42 + 1 * 2 + 2 * 2 = 51.\n\nExample 2:\n\n\nInput: n = 3, roads = [[1,2,5],[2,3,1],[3,1,2]], appleCost = [2,3,1], k = 3\nOutput: [2,3,1]\nExplanation: It is always optimal to buy the apple in the starting city.\n\n \nConstraints:\n\n2 <= n <= 1000\n1 <= roads.length <= 2000\n1 <= ai, bi <= n\nai != bi\n1 <= costi <= 105\nappleCost.length == n\n1 <= appleCost[i] <= 105\n1 <= k <= 100\nThere are no repeated edges.\n\n", "hints": ["Notice that the path you take to buy an apple will be the same path to return to the starting city.", "Starting from each city, use Dijkstra’s algorithm to find the best city to travel to."], "exampleTestcases": "4\n[[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]]\n[56,42,102,301]\n2\n3\n[[1,2,5],[2,3,1],[3,1,2]]\n[2,3,1]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> minCost(int n, vector<vector<int>>& roads, vector<int>& appleCost, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long[] minCost(int n, int[][] roads, int[] appleCost, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minCost(self, n, roads, appleCost, k):\n        \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :type appleCost: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minCost(self, n: int, roads: List[List[int]], appleCost: List[int], k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* minCost(int n, int** roads, int roadsSize, int* roadsColSize, int* appleCost, int appleCostSize, int k, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long[] MinCost(int n, int[][] roads, int[] appleCost, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} roads\n * @param {number[]} appleCost\n * @param {number} k\n * @return {number[]}\n */\nvar minCost = function(n, roads, appleCost, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minCost(n: number, roads: number[][], appleCost: number[], k: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $roads\n     * @param Integer[] $appleCost\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function minCost($n, $roads, $appleCost, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minCost(_ n: Int, _ roads: [[Int]], _ appleCost: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minCost(n: Int, roads: Array<IntArray>, appleCost: IntArray, k: Int): LongArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> minCost(int n, List<List<int>> roads, List<int> appleCost, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minCost(n int, roads [][]int, appleCost []int, k int) []int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} roads\n# @param {Integer[]} apple_cost\n# @param {Integer} k\n# @return {Integer[]}\ndef min_cost(n, roads, apple_cost, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minCost(n: Int, roads: Array[Array[Int]], appleCost: Array[Int], k: Int): Array[Long] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost(n: i32, roads: Vec<Vec<i32>>, apple_cost: Vec<i32>, k: i32) -> Vec<i64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-cost n roads appleCost k)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_cost(N :: integer(), Roads :: [[integer()]], AppleCost :: [integer()], K :: integer()) -> [integer()].\nmin_cost(N, Roads, AppleCost, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost(n :: integer, roads :: [[integer]], apple_cost :: [integer], k :: integer) :: [integer]\n  def min_cost(n, roads, apple_cost, k) do\n    \n  end\nend"}}}