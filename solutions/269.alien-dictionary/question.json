{"question_id": "269", "problem_slug": "alien-dictionary", "problem_title": "Alien Dictionary", "content": "There is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.\nYou are given a list of strings words from the alien language's dictionary. Now it is claimed that the strings in words are sorted lexicographically by the rules of this new language.\nIf this claim is incorrect, and the given arrangement of string in words cannot correspond to any order of letters, return \"\".\nOtherwise, return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there are multiple solutions, return any of them.\n \nExample 1:\n\nInput: words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\nOutput: \"wertf\"\n\nExample 2:\n\nInput: words = [\"z\",\"x\"]\nOutput: \"zx\"\n\nExample 3:\n\nInput: words = [\"z\",\"x\",\"z\"]\nOutput: \"\"\nExplanation: The order is invalid, so return \"\".\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists of only lowercase English letters.\n\n", "hints": [], "exampleTestcases": "[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\n[\"z\",\"x\"]\n[\"z\",\"x\",\"z\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string alienOrder(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String alienOrder(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def alienOrder(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* alienOrder(char** words, int wordsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AlienOrder(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string}\n */\nvar alienOrder = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function alienOrder(words: string[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function alienOrder($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func alienOrder(_ words: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun alienOrder(words: Array<String>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String alienOrder(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func alienOrder(words []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String}\ndef alien_order(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def alienOrder(words: Array[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn alien_order(words: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (alien-order words)\n  (-> (listof string?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec alien_order(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nalien_order(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec alien_order(words :: [String.t]) :: String.t\n  def alien_order(words) do\n    \n  end\nend"}}}