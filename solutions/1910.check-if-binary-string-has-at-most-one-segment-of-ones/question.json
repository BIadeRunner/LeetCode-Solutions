{"question_id": "1910", "problem_slug": "check-if-binary-string-has-at-most-one-segment-of-ones", "problem_title": "Check if Binary String Has at Most One Segment of Ones", "content": "Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.\n \nExample 1:\n\nInput: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.\n\nExample 2:\n\nInput: s = \"110\"\nOutput: true\n \nConstraints:\n\n1 <= s.length <= 100\ns[i]​​​​ is either '0' or '1'.\ns[0] is '1'.\n\n", "hints": ["It's guaranteed to have at least one segment", "The string size is small so you can count all segments of ones with no that have no adjacent ones."], "exampleTestcases": "\"1001\"\n\"110\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkOnesSegment(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkOnesSegment(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkOnesSegment(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkOnesSegment(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkOnesSegment(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckOnesSegment(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkOnesSegment = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkOnesSegment(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkOnesSegment($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkOnesSegment(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkOnesSegment(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkOnesSegment(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkOnesSegment(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef check_ones_segment(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkOnesSegment(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_ones_segment(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-ones-segment s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_ones_segment(S :: unicode:unicode_binary()) -> boolean().\ncheck_ones_segment(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_ones_segment(s :: String.t) :: boolean\n  def check_ones_segment(s) do\n    \n  end\nend"}}}