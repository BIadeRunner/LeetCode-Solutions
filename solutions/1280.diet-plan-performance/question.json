{"question_id": "1280", "problem_slug": "diet-plan-performance", "problem_title": "Diet Plan Performance", "content": "A dieter consumes calories[i] calories on the i-th day. \nGiven an integer k, for every consecutive sequence of k days (calories[i], calories[i+1], ..., calories[i+k-1] for all 0 <= i <= n-k), they look at T, the total calories consumed during that sequence of k days (calories[i] + calories[i+1] + ... + calories[i+k-1]):\n\nIf T < lower, they performed poorly on their diet and lose 1 point; \nIf T > upper, they performed well on their diet and gain 1 point;\nOtherwise, they performed normally and there is no change in points.\n\nInitially, the dieter has zero points. Return the total number of points the dieter has after dieting for calories.length days.\nNote that the total points can be negative.\n \nExample 1:\n\nInput: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3\nOutput: 0\nExplanation: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories[0] and calories[1] are less than lower so 2 points are lost.\ncalories[3] and calories[4] are greater than upper so 2 points are gained.\n\nExample 2:\n\nInput: calories = [3,2], k = 2, lower = 0, upper = 1\nOutput: 1\nExplanation: Since k = 2, we consider subarrays of length 2.\ncalories[0] + calories[1] > upper so 1 point is gained.\n\nExample 3:\n\nInput: calories = [6,5,0,0], k = 2, lower = 1, upper = 5\nOutput: 0\nExplanation:\ncalories[0] + calories[1] > upper so 1 point is gained.\nlower <= calories[1] + calories[2] <= upper so no change in points.\ncalories[2] + calories[3] < lower so 1 point is lost.\n\n \nConstraints:\n\n1 <= k <= calories.length <= 10^5\n0 <= calories[i] <= 20000\n0 <= lower <= upper\n\n", "hints": ["Use sliding window technique (aka two pointers)."], "exampleTestcases": "[1,2,3,4,5]\n1\n3\n3\n[3,2]\n2\n0\n1\n[6,5,0,0]\n2\n1\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int dietPlanPerformance(vector<int>& calories, int k, int lower, int upper) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int dietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def dietPlanPerformance(self, calories, k, lower, upper):\n        \"\"\"\n        :type calories: List[int]\n        :type k: int\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def dietPlanPerformance(self, calories: List[int], k: int, lower: int, upper: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int dietPlanPerformance(int* calories, int caloriesSize, int k, int lower, int upper) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} calories\n * @param {number} k\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar dietPlanPerformance = function(calories, k, lower, upper) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function dietPlanPerformance(calories: number[], k: number, lower: number, upper: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $calories\n     * @param Integer $k\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function dietPlanPerformance($calories, $k, $lower, $upper) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func dietPlanPerformance(_ calories: [Int], _ k: Int, _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun dietPlanPerformance(calories: IntArray, k: Int, lower: Int, upper: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int dietPlanPerformance(List<int> calories, int k, int lower, int upper) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func dietPlanPerformance(calories []int, k int, lower int, upper int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} calories\n# @param {Integer} k\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef diet_plan_performance(calories, k, lower, upper)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def dietPlanPerformance(calories: Array[Int], k: Int, lower: Int, upper: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn diet_plan_performance(calories: Vec<i32>, k: i32, lower: i32, upper: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (diet-plan-performance calories k lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec diet_plan_performance(Calories :: [integer()], K :: integer(), Lower :: integer(), Upper :: integer()) -> integer().\ndiet_plan_performance(Calories, K, Lower, Upper) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec diet_plan_performance(calories :: [integer], k :: integer, lower :: integer, upper :: integer) :: integer\n  def diet_plan_performance(calories, k, lower, upper) do\n    \n  end\nend"}}}