{"questionId": "1119", "acRate": 55.97215529270972, "difficulty": "Medium", "freqBar": 60.26114503629394, "frontendQuestionId": "1041", "paidOnly": false, "status": "ac", "title": "Robot Bounded In Circle", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "robot-bounded-in-circle", "content": "<p>On an infinite plane, a robot initially stands at <code>(0, 0)</code> and faces north. Note that:</p>\n\n<ul>\n\t<li>The <strong>north direction</strong> is the positive direction of the y-axis.</li>\n\t<li>The <strong>south direction</strong> is the negative direction of the y-axis.</li>\n\t<li>The <strong>east direction</strong> is the positive direction of the x-axis.</li>\n\t<li>The <strong>west direction</strong> is the negative direction of the x-axis.</li>\n</ul>\n\n<p>The robot can receive one of three instructions:</p>\n\n<ul>\n\t<li><code>&quot;G&quot;</code>: go straight 1 unit.</li>\n\t<li><code>&quot;L&quot;</code>: turn 90 degrees to the left (i.e., anti-clockwise direction).</li>\n\t<li><code>&quot;R&quot;</code>: turn 90 degrees to the right (i.e., clockwise direction).</li>\n</ul>\n\n<p>The robot performs the <code>instructions</code> given in order, and repeats them forever.</p>\n\n<p>Return <code>true</code> if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GGLLGG&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;G&quot;: move one step. Position: (0, 2). Direction: North.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: South.\n&quot;G&quot;: move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 1) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GG&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;G&quot;: move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GL&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n&quot;G&quot;: move one step. Position: (-1, 1). Direction: West.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n&quot;G&quot;: move one step. Position: (-1, 0). Direction: South.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n&quot;G&quot;: move one step. Position: (0, 0). Direction: East.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (-1, 1) --&gt; (-1, 0) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= instructions.length &lt;= 100</code></li>\n\t<li><code>instructions[i]</code> is <code>&#39;G&#39;</code>, <code>&#39;L&#39;</code> or, <code>&#39;R&#39;</code>.</li>\n</ul>\n", "hints": ["Calculate the final vector of how the robot travels after executing all instructions once - it consists of a change in position plus a change in direction.", "The robot stays in the circle if and only if (looking at the final vector) it changes direction (ie. doesn't stay pointing north), or it moves 0."], "exampleTestcases": "\"GGLLGG\"\n\"GG\"\n\"GL\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isRobotBounded(string instructions) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isRobotBounded(String instructions) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isRobotBounded(self, instructions):\n        \"\"\"\n        :type instructions: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isRobotBounded(char* instructions) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsRobotBounded(string instructions) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} instructions\n * @return {boolean}\n */\nvar isRobotBounded = function(instructions) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isRobotBounded(instructions: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $instructions\n     * @return Boolean\n     */\n    function isRobotBounded($instructions) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isRobotBounded(_ instructions: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isRobotBounded(instructions: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isRobotBounded(String instructions) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isRobotBounded(instructions string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} instructions\n# @return {Boolean}\ndef is_robot_bounded(instructions)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isRobotBounded(instructions: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_robot_bounded(instructions: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-robot-bounded instructions)\n  (-> string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_robot_bounded(Instructions :: unicode:unicode_binary()) -> boolean().\nis_robot_bounded(Instructions) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_robot_bounded(instructions :: String.t) :: boolean\n  def is_robot_bounded(instructions) do\n    \n  end\nend"}], "similarQuestionList": []}