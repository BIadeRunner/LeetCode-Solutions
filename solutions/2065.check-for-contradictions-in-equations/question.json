{"question_id": "2065", "problem_slug": "check-for-contradictions-in-equations", "problem_title": "Check for Contradictions in Equations", "content": "You are given a 2D array of strings equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] means that Ai / Bi = values[i].\nDetermine if there exists a contradiction in the equations. Return true if there is a contradiction, or false otherwise.\nNote:\n\nWhen checking if two numbers are equal, check that their absolute difference is less than 10-5.\nThe testcases are generated such that there are no cases targeting precision, i.e. using double is enough to solve the problem.\n\n \nExample 1:\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"a\",\"c\"]], values = [3,0.5,1.5]\nOutput: false\nExplanation:\nThe given equations are: a / b = 3, b / c = 0.5, a / c = 1.5\nThere are no contradictions in the equations. One possible assignment to satisfy all equations is:\na = 3, b = 1 and c = 2.\n\nExample 2:\n\nInput: equations = [[\"le\",\"et\"],[\"le\",\"code\"],[\"code\",\"et\"]], values = [2,5,0.5]\nOutput: true\nExplanation:\nThe given equations are: le / et = 2, le / code = 5, code / et = 0.5\nBased on the first two equations, we get code / et = 0.4.\nSince the third equation is code / et = 0.5, we get a contradiction.\n\n \nConstraints:\n\n1 <= equations.length <= 100\nequations[i].length == 2\n1 <= Ai.length, Bi.length <= 5\nAi, Bi consist of lowercase English letters.\nequations.length == values.length\n0.0 < values[i] <= 10.0\nvalues[i] has a maximum of 2 decimal places.\n\n", "hints": ["Try treating this as a graph problem.", "Each variable is a node, and each equation is an edge.", "Try performing DFS multiple times to find contradictions."], "exampleTestcases": "[[\"a\",\"b\"],[\"b\",\"c\"],[\"a\",\"c\"]]\n[3,0.5,1.5]\n[[\"le\",\"et\"],[\"le\",\"code\"],[\"code\",\"et\"]]\n[2,5,0.5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkContradictions(vector<vector<string>>& equations, vector<double>& values) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkContradictions(List<List<String>> equations, double[] values) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkContradictions(self, equations, values):\n        \"\"\"\n        :type equations: List[List[str]]\n        :type values: List[float]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkContradictions(self, equations: List[List[str]], values: List[float]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkContradictions(char*** equations, int equationsSize, int* equationsColSize, double* values, int valuesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckContradictions(IList<IList<string>> equations, double[] values) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @return {boolean}\n */\nvar checkContradictions = function(equations, values) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkContradictions(equations: string[][], values: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @return Boolean\n     */\n    function checkContradictions($equations, $values) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkContradictions(_ equations: [[String]], _ values: [Double]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkContradictions(equations: List<List<String>>, values: DoubleArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkContradictions(List<List<String>> equations, List<double> values) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkContradictions(equations [][]string, values []float64) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[][]} equations\n# @param {Float[]} values\n# @return {Boolean}\ndef check_contradictions(equations, values)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkContradictions(equations: List[List[String]], values: Array[Double]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_contradictions(equations: Vec<Vec<String>>, values: Vec<f64>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-contradictions equations values)\n  (-> (listof (listof string?)) (listof flonum?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_contradictions(Equations :: [[unicode:unicode_binary()]], Values :: [float()]) -> boolean().\ncheck_contradictions(Equations, Values) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_contradictions(equations :: [[String.t]], values :: [float]) :: boolean\n  def check_contradictions(equations, values) do\n    \n  end\nend"}}}