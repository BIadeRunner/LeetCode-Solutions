{"questionId": "1107", "acRate": 60.32681885367055, "difficulty": "Medium", "freqBar": 65.96405885693261, "frontendQuestionId": "1151", "paidOnly": true, "status": "ac", "title": "Minimum Swaps to Group All 1's Together", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "minimum-swaps-to-group-all-1s-together", "content": "<p>Given a&nbsp;binary array <code>data</code>, return&nbsp;the minimum number of swaps required to group all <code>1</code>&rsquo;s present in the array together in <strong>any place</strong> in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> data = [1,0,1,0,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are 3 ways to group all 1&#39;s together:\n[1,1,1,0,0] using 1 swap.\n[0,1,1,1,0] using 2 swaps.\n[0,0,1,1,1] using 1 swap.\nThe minimum is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> data = [0,0,0,1,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since there is only one 1 in the array, no swaps are needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> data = [1,0,1,0,1,0,0,1,1,0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= data.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>data[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["How many 1's should be grouped together ? Is not a fixed number?", "Yeah it's just the number of 1's the whole array has. Let's name this number as ones", "Every subarray of size of ones, needs some number of swaps to reach, Can you find the number of swaps needed to group all 1's in this subarray?", "It's the number of zeros in that subarray.", "Do you need to count the number of zeros all over again for every position ?", "Use Sliding Window technique."], "exampleTestcases": "[1,0,1,0,1]\n[0,0,0,1,0]\n[1,0,1,0,1,0,0,1,1,0,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSwaps(vector<int>& data) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSwaps(int[] data) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSwaps(self, data):\n        \"\"\"\n        :type data: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSwaps(self, data: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minSwaps(int* data, int dataSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSwaps(int[] data) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} data\n * @return {number}\n */\nvar minSwaps = function(data) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSwaps(data: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $data\n     * @return Integer\n     */\n    function minSwaps($data) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSwaps(_ data: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSwaps(data: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minSwaps(List<int> data) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minSwaps(data []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} data\n# @return {Integer}\ndef min_swaps(data)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSwaps(data: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_swaps(data: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-swaps data)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_swaps(Data :: [integer()]) -> integer().\nmin_swaps(Data) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_swaps(data :: [integer]) :: integer\n  def min_swaps(data) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones", "title": "Minimum Adjacent Swaps for K Consecutive Ones", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-swaps-to-group-all-1s-together-ii", "title": "Minimum Swaps to Group All 1's Together II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "time-needed-to-rearrange-a-binary-string", "title": "Time Needed to Rearrange a Binary String", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-moves-to-pick-k-ones", "title": "Minimum Moves to Pick K Ones", "isPaidOnly": false}]}