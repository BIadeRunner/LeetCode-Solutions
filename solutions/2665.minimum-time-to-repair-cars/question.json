{"question_id": "2665", "problem_slug": "minimum-time-to-repair-cars", "problem_title": "Minimum Time to Repair Cars", "content": "You are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank r can repair n cars in r * n2 minutes.\nYou are also given an integer cars representing the total number of cars waiting in the garage to be repaired.\nReturn the minimum time taken to repair all the cars.\nNote: All the mechanics can repair the cars simultaneously.\n \nExample 1:\n\nInput: ranks = [4,2,3,1], cars = 10\nOutput: 16\nExplanation: \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​\n\nExample 2:\n\nInput: ranks = [5,1,8], cars = 6\nOutput: 16\nExplanation: \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​\n\n \nConstraints:\n\n1 <= ranks.length <= 105\n1 <= ranks[i] <= 100\n1 <= cars <= 106\n\n", "hints": ["For a predefined fixed time, can all the cars be repaired?", "Try using binary search on the answer."], "exampleTestcases": "[4,2,3,1]\n10\n[5,1,8]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long repairCars(vector<int>& ranks, int cars) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long repairCars(int[] ranks, int cars) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def repairCars(self, ranks, cars):\n        \"\"\"\n        :type ranks: List[int]\n        :type cars: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long repairCars(int* ranks, int ranksSize, int cars) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long RepairCars(int[] ranks, int cars) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} ranks\n * @param {number} cars\n * @return {number}\n */\nvar repairCars = function(ranks, cars) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function repairCars(ranks: number[], cars: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $ranks\n     * @param Integer $cars\n     * @return Integer\n     */\n    function repairCars($ranks, $cars) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func repairCars(_ ranks: [Int], _ cars: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun repairCars(ranks: IntArray, cars: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int repairCars(List<int> ranks, int cars) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func repairCars(ranks []int, cars int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} ranks\n# @param {Integer} cars\n# @return {Integer}\ndef repair_cars(ranks, cars)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def repairCars(ranks: Array[Int], cars: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn repair_cars(ranks: Vec<i32>, cars: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (repair-cars ranks cars)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec repair_cars(Ranks :: [integer()], Cars :: integer()) -> integer().\nrepair_cars(Ranks, Cars) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec repair_cars(ranks :: [integer], cars :: integer) :: integer\n  def repair_cars(ranks, cars) do\n    \n  end\nend"}}}