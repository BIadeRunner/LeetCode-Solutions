{"question_id": "2458", "problem_slug": "find-minimum-time-to-finish-all-jobs-ii", "problem_title": "Find Minimum Time to Finish All Jobs II", "content": "You are given two 0-indexed integer arrays jobs and workers of equal length, where jobs[i] is the amount of time needed to complete the ith job, and workers[j] is the amount of time the jth worker can work each day.\nEach job should be assigned to exactly one worker, such that each worker completes exactly one job.\nReturn the minimum number of days needed to complete all the jobs after assignment.\n \nExample 1:\n\nInput: jobs = [5,2,4], workers = [1,7,5]\nOutput: 2\nExplanation:\n- Assign the 2nd worker to the 0th job. It takes them 1 day to finish the job.\n- Assign the 0th worker to the 1st job. It takes them 2 days to finish the job.\n- Assign the 1st worker to the 2nd job. It takes them 1 day to finish the job.\nIt takes 2 days for all the jobs to be completed, so return 2.\nIt can be proven that 2 days is the minimum number of days needed.\n\nExample 2:\n\nInput: jobs = [3,18,15,9], workers = [6,5,1,3]\nOutput: 3\nExplanation:\n- Assign the 2nd worker to the 0th job. It takes them 3 days to finish the job.\n- Assign the 0th worker to the 1st job. It takes them 3 days to finish the job.\n- Assign the 1st worker to the 2nd job. It takes them 3 days to finish the job.\n- Assign the 3rd worker to the 3rd job. It takes them 3 days to finish the job.\nIt takes 3 days for all the jobs to be completed, so return 3.\nIt can be proven that 3 days is the minimum number of days needed.\n\n \nConstraints:\n\nn == jobs.length == workers.length\n1 <= n <= 105\n1 <= jobs[i], workers[i] <= 105\n\n", "hints": ["It is always optimal to pair the worker with the least amount of time with the job that requires the least amount of time.", "Sort both arrays."], "exampleTestcases": "[5,2,4]\n[1,7,5]\n[3,18,15,9]\n[6,5,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumTime(vector<int>& jobs, vector<int>& workers) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumTime(int[] jobs, int[] workers) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumTime(self, jobs, workers):\n        \"\"\"\n        :type jobs: List[int]\n        :type workers: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumTime(self, jobs: List[int], workers: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumTime(int* jobs, int jobsSize, int* workers, int workersSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumTime(int[] jobs, int[] workers) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} jobs\n * @param {number[]} workers\n * @return {number}\n */\nvar minimumTime = function(jobs, workers) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumTime(jobs: number[], workers: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $jobs\n     * @param Integer[] $workers\n     * @return Integer\n     */\n    function minimumTime($jobs, $workers) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumTime(_ jobs: [Int], _ workers: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumTime(jobs: IntArray, workers: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumTime(List<int> jobs, List<int> workers) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumTime(jobs []int, workers []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} jobs\n# @param {Integer[]} workers\n# @return {Integer}\ndef minimum_time(jobs, workers)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumTime(jobs: Array[Int], workers: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time(jobs: Vec<i32>, workers: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-time jobs workers)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_time(Jobs :: [integer()], Workers :: [integer()]) -> integer().\nminimum_time(Jobs, Workers) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time(jobs :: [integer], workers :: [integer]) :: integer\n  def minimum_time(jobs, workers) do\n    \n  end\nend"}}}