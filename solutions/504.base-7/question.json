{"question_id": "504", "problem_slug": "base-7", "problem_title": "Base 7", "content": "Given an integer num, return a string of its base 7 representation.\n \nExample 1:\nInput: num = 100\nOutput: \"202\"\nExample 2:\nInput: num = -7\nOutput: \"-10\"\n\n \nConstraints:\n\n-107 <= num <= 107\n\n", "hints": [], "exampleTestcases": "100\n-7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string convertToBase7(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String convertToBase7(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* convertToBase7(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ConvertToBase7(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar convertToBase7 = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function convertToBase7(num: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function convertToBase7($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func convertToBase7(_ num: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun convertToBase7(num: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String convertToBase7(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func convertToBase7(num int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String}\ndef convert_to_base7(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def convertToBase7(num: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn convert_to_base7(num: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (convert-to-base7 num)\n  (-> exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec convert_to_base7(Num :: integer()) -> unicode:unicode_binary().\nconvert_to_base7(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_to_base7(num :: integer) :: String.t\n  def convert_to_base7(num) do\n    \n  end\nend"}}}