{"question_id": "3396", "problem_slug": "valid-word", "problem_title": "Valid Word", "content": "A word is considered valid if:\n\nIt contains a minimum of 3 characters.\nIt contains only digits (0-9), and English letters (uppercase and lowercase).\nIt includes at least one vowel.\nIt includes at least one consonant.\n\nYou are given a string word.\nReturn true if word is valid, otherwise, return false.\nNotes:\n\n'a', 'e', 'i', 'o', 'u', and their uppercases are vowels.\nA consonant is an English letter that is not a vowel.\n\n \nExample 1:\n\nInput: word = \"234Adas\"\nOutput: true\nExplanation:\nThis word satisfies the conditions.\n\nExample 2:\n\nInput: word = \"b3\"\nOutput: false\nExplanation:\nThe length of this word is fewer than 3, and does not have a vowel.\n\nExample 3:\n\nInput: word = \"a3$e\"\nOutput: false\nExplanation:\nThis word contains a '$' character and does not have a consonant.\n\n \nConstraints:\n\n1 <= word.length <= 20\nword consists of English uppercase and lowercase letters, digits, '@', '#', and '$'.\n\n", "hints": ["Use if-else to check all the conditions."], "exampleTestcases": "\"234Adas\"\n\"b3\"\n\"a3$e\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isValid(string word) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isValid(String word) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isValid(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isValid(self, word: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isValid(char* word) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsValid(string word) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar isValid = function(word) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isValid(word: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function isValid($word) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isValid(_ word: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isValid(word: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isValid(String word) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isValid(word string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @return {Boolean}\ndef is_valid(word)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isValid(word: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_valid(word: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-valid word)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_valid(Word :: unicode:unicode_binary()) -> boolean().\nis_valid(Word) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_valid(word :: String.t) :: boolean\n  def is_valid(word) do\n    \n  end\nend"}}}