{"question_id": "3584", "problem_slug": "find-the-lexicographically-smallest-valid-sequence", "problem_title": "Find the Lexicographically Smallest Valid Sequence", "content": "You are given two strings word1 and word2.\nA string x is called almost equal to y if you can change at most one character in x to make it identical to y.\nA sequence of indices seq is called valid if:\n\nThe indices are sorted in ascending order.\nConcatenating the characters at these indices in word1 in the same order results in a string that is almost equal to word2.\n\nReturn an array of size word2.length representing the lexicographically smallest valid sequence of indices. If no such sequence of indices exists, return an empty array.\nNote that the answer must represent the lexicographically smallest array, not the corresponding string formed by those indices.\n \nExample 1:\n\nInput: word1 = \"vbcca\", word2 = \"abc\"\nOutput: [0,1,2]\nExplanation:\nThe lexicographically smallest valid sequence of indices is [0, 1, 2]:\n\nChange word1[0] to 'a'.\nword1[1] is already 'b'.\nword1[2] is already 'c'.\n\n\nExample 2:\n\nInput: word1 = \"bacdc\", word2 = \"abc\"\nOutput: [1,2,4]\nExplanation:\nThe lexicographically smallest valid sequence of indices is [1, 2, 4]:\n\nword1[1] is already 'a'.\nChange word1[2] to 'b'.\nword1[4] is already 'c'.\n\n\nExample 3:\n\nInput: word1 = \"aaaaaa\", word2 = \"aaabc\"\nOutput: []\nExplanation:\nThere is no valid sequence of indices.\n\nExample 4:\n\nInput: word1 = \"abc\", word2 = \"ab\"\nOutput: [0,1]\n\n \nConstraints:\n\n1 <= word2.length < word1.length <= 3 * 105\nword1 and word2 consist only of lowercase English letters.\n\n", "hints": ["Let <code>dp[i]</code> be the longest suffix of <code>word2</code> that exists as a subsequence of suffix of the substring of <code>word1</code> starting at index <code>i</code>.", "If <code>dp[i + 1] < m</code> and <code>word1[i] == word2[m - dp[i + 1] - 1]</code>,<code>dp[i] =  dp[i + 1] + 1</code>. Otherwise, <code>dp[i] =  dp[i + 1]</code>.", "For each index <code>i</code>, greedily select characters using the <code>dp</code> array to know whether a solution exists."], "exampleTestcases": "\"vbcca\"\n\"abc\"\n\"bacdc\"\n\"abc\"\n\"aaaaaa\"\n\"aaabc\"\n\"abc\"\n\"ab\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> validSequence(string word1, string word2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] validSequence(String word1, String word2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validSequence(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validSequence(self, word1: str, word2: str) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* validSequence(char* word1, char* word2, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ValidSequence(string word1, string word2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number[]}\n */\nvar validSequence = function(word1, word2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validSequence(word1: string, word2: string): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer[]\n     */\n    function validSequence($word1, $word2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validSequence(_ word1: String, _ word2: String) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validSequence(word1: String, word2: String): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> validSequence(String word1, String word2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validSequence(word1 string, word2 string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer[]}\ndef valid_sequence(word1, word2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validSequence(word1: String, word2: String): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_sequence(word1: String, word2: String) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-sequence word1 word2)\n  (-> string? string? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_sequence(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> [integer()].\nvalid_sequence(Word1, Word2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_sequence(word1 :: String.t, word2 :: String.t) :: [integer]\n  def valid_sequence(word1, word2) do\n    \n  end\nend"}}}