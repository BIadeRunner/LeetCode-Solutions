{"question_id": "3468", "problem_slug": "find-the-encrypted-string", "problem_title": "Find the Encrypted String", "content": "You are given a string s and an integer k. Encrypt the string using the following algorithm:\n\nFor each character c in s, replace c with the kth character after c in the string (in a cyclic manner).\n\nReturn the encrypted string.\n \nExample 1:\n\nInput: s = \"dart\", k = 3\nOutput: \"tdar\"\nExplanation:\n\nFor i = 0, the 3rd character after 'd' is 't'.\nFor i = 1, the 3rd character after 'a' is 'd'.\nFor i = 2, the 3rd character after 'r' is 'a'.\nFor i = 3, the 3rd character after 't' is 'r'.\n\n\nExample 2:\n\nInput: s = \"aaa\", k = 1\nOutput: \"aaa\"\nExplanation:\nAs all the characters are the same, the encrypted string will also be the same.\n\n \nConstraints:\n\n1 <= s.length <= 100\n1 <= k <= 104\ns consists only of lowercase English letters.\n\n", "hints": ["Make a new string such that for each character in <code>s</code>, character <code>i</code> will correspond to <code>(i + k) % s.length</code> character in the original string."], "exampleTestcases": "\"dart\"\n3\n\"aaa\"\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string getEncryptedString(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String getEncryptedString(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getEncryptedString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* getEncryptedString(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string GetEncryptedString(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar getEncryptedString = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getEncryptedString(s: string, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function getEncryptedString($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getEncryptedString(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getEncryptedString(s: String, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String getEncryptedString(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getEncryptedString(s string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef get_encrypted_string(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getEncryptedString(s: String, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_encrypted_string(s: String, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-encrypted-string s k)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_encrypted_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nget_encrypted_string(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_encrypted_string(s :: String.t, k :: integer) :: String.t\n  def get_encrypted_string(s, k) do\n    \n  end\nend"}}}