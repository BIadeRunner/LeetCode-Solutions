{"question_id": "2396", "problem_slug": "design-video-sharing-platform", "problem_title": "Design Video Sharing Platform", "content": "You have a video sharing platform where users can upload and delete videos. Each video is a string of digits, where the ith digit of the string represents the content of the video at minute i. For example, the first digit represents the content at minute 0 in the video, the second digit represents the content at minute 1 in the video, and so on. Viewers of videos can also like and dislike videos. Internally, the platform keeps track of the number of views, likes, and dislikes on each video.\nWhen a video is uploaded, it is associated with the smallest available integer videoId starting from 0. Once a video is deleted, the videoId associated with that video can be reused for another video.\nImplement the VideoSharingPlatform class:\n\nVideoSharingPlatform() Initializes the object.\nint upload(String video) The user uploads a video. Return the videoId associated with the video.\nvoid remove(int videoId) If there is a video associated with videoId, remove the video.\nString watch(int videoId, int startMinute, int endMinute) If there is a video associated with videoId, increase the number of views on the video by 1 and return the substring of the video string starting at startMinute and ending at min(endMinute, video.length - 1) (inclusive). Otherwise, return \"-1\".\nvoid like(int videoId) Increases the number of likes on the video associated with videoId by 1 if there is a video associated with videoId.\nvoid dislike(int videoId) Increases the number of dislikes on the video associated with videoId by 1 if there is a video associated with videoId.\nint[] getLikesAndDislikes(int videoId) Return a 0-indexed integer array values of length 2 where values[0] is the number of likes and values[1] is the number of dislikes on the video associated with videoId. If there is no video associated with videoId, return [-1].\nint getViews(int videoId) Return the number of views on the video associated with videoId, if there is no video associated with videoId, return -1.\n\n \nExample 1:\n\nInput\n[\"VideoSharingPlatform\", \"upload\", \"upload\", \"remove\", \"remove\", \"upload\", \"watch\", \"watch\", \"like\", \"dislike\", \"dislike\", \"getLikesAndDislikes\", \"getViews\"]\n[[], [\"123\"], [\"456\"], [4], [0], [\"789\"], [1, 0, 5], [1, 0, 1], [1], [1], [1], [1], [1]]\nOutput\n[null, 0, 1, null, null, 0, \"456\", \"45\", null, null, null, [1, 2], 2]\n\nExplanation\nVideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();\nvideoSharingPlatform.upload(\"123\");          // The smallest available videoId is 0, so return 0.\nvideoSharingPlatform.upload(\"456\");          // The smallest available videoId is 1, so return 1.\nvideoSharingPlatform.remove(4);              // There is no video associated with videoId 4, so do nothing.\nvideoSharingPlatform.remove(0);              // Remove the video associated with videoId 0.\nvideoSharingPlatform.upload(\"789\");          // Since the video associated with videoId 0 was deleted,\n                                             // 0 is the smallest available videoId, so return 0.\nvideoSharingPlatform.watch(1, 0, 5);         // The video associated with videoId 1 is \"456\".\n                                             // The video from minute 0 to min(5, 3 - 1) = 2 is \"456\", so return \"456\".\nvideoSharingPlatform.watch(1, 0, 1);         // The video associated with videoId 1 is \"456\".\n                                             // The video from minute 0 to min(1, 3 - 1) = 1 is \"45\", so return \"45\".\nvideoSharingPlatform.like(1);                // Increase the number of likes on the video associated with videoId 1.\nvideoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.\nvideoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.\nvideoSharingPlatform.getLikesAndDislikes(1); // There is 1 like and 2 dislikes on the video associated with videoId 1, so return [1, 2].\nvideoSharingPlatform.getViews(1);            // The video associated with videoId 1 has 2 views, so return 2.\n\nExample 2:\n\nInput\n[\"VideoSharingPlatform\", \"remove\", \"watch\", \"like\", \"dislike\", \"getLikesAndDislikes\", \"getViews\"]\n[[], [0], [0, 0, 1], [0], [0], [0], [0]]\nOutput\n[null, null, \"-1\", null, null, [-1], -1]\n\nExplanation\nVideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();\nvideoSharingPlatform.remove(0);              // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.watch(0, 0, 1);         // There is no video associated with videoId 0, so return \"-1\".\nvideoSharingPlatform.like(0);                // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.dislike(0);             // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.getLikesAndDislikes(0); // There is no video associated with videoId 0, so return [-1].\nvideoSharingPlatform.getViews(0);            // There is no video associated with videoId 0, so return -1.\n\n \nConstraints:\n\n1 <= video.length <= 105\nThe sum of video.length over all calls to upload does not exceed 105\nvideo consists of digits.\n0 <= videoId <= 105\n0 <= startMinute < endMinute < 105\nstartMinute < video.length\nThe sum of endMinute - startMinute over all calls to watch does not exceed 105.\nAt most 105 calls in total will be made to all functions.\n\n", "hints": ["How can we keep track of the videoId’s of removed videos?", "When you remove a video, keep track of its videoId in an array called usedId. When a new video is uploaded, first check if usedId contains any elements, if it does, use the smallest value in usedId."], "exampleTestcases": "[\"VideoSharingPlatform\",\"upload\",\"upload\",\"remove\",\"remove\",\"upload\",\"watch\",\"watch\",\"like\",\"dislike\",\"dislike\",\"getLikesAndDislikes\",\"getViews\"]\n[[],[\"123\"],[\"456\"],[4],[0],[\"789\"],[1,0,5],[1,0,1],[1],[1],[1],[1],[1]]\n[\"VideoSharingPlatform\",\"remove\",\"watch\",\"like\",\"dislike\",\"getLikesAndDislikes\",\"getViews\"]\n[[],[0],[0,0,1],[0],[0],[0],[0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class VideoSharingPlatform {\npublic:\n    VideoSharingPlatform() {\n        \n    }\n    \n    int upload(string video) {\n        \n    }\n    \n    void remove(int videoId) {\n        \n    }\n    \n    string watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    void like(int videoId) {\n        \n    }\n    \n    void dislike(int videoId) {\n        \n    }\n    \n    vector<int> getLikesAndDislikes(int videoId) {\n        \n    }\n    \n    int getViews(int videoId) {\n        \n    }\n};\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform* obj = new VideoSharingPlatform();\n * int param_1 = obj->upload(video);\n * obj->remove(videoId);\n * string param_3 = obj->watch(videoId,startMinute,endMinute);\n * obj->like(videoId);\n * obj->dislike(videoId);\n * vector<int> param_6 = obj->getLikesAndDislikes(videoId);\n * int param_7 = obj->getViews(videoId);\n */"}, "Java": {"langSlug": "java", "code": "class VideoSharingPlatform {\n\n    public VideoSharingPlatform() {\n        \n    }\n    \n    public int upload(String video) {\n        \n    }\n    \n    public void remove(int videoId) {\n        \n    }\n    \n    public String watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    public void like(int videoId) {\n        \n    }\n    \n    public void dislike(int videoId) {\n        \n    }\n    \n    public int[] getLikesAndDislikes(int videoId) {\n        \n    }\n    \n    public int getViews(int videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform obj = new VideoSharingPlatform();\n * int param_1 = obj.upload(video);\n * obj.remove(videoId);\n * String param_3 = obj.watch(videoId,startMinute,endMinute);\n * obj.like(videoId);\n * obj.dislike(videoId);\n * int[] param_6 = obj.getLikesAndDislikes(videoId);\n * int param_7 = obj.getViews(videoId);\n */"}, "Python": {"langSlug": "python", "code": "class VideoSharingPlatform(object):\n\n    def __init__(self):\n        \n\n    def upload(self, video):\n        \"\"\"\n        :type video: str\n        :rtype: int\n        \"\"\"\n        \n\n    def remove(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def watch(self, videoId, startMinute, endMinute):\n        \"\"\"\n        :type videoId: int\n        :type startMinute: int\n        :type endMinute: int\n        :rtype: str\n        \"\"\"\n        \n\n    def like(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def dislike(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getLikesAndDislikes(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def getViews(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform()\n# param_1 = obj.upload(video)\n# obj.remove(videoId)\n# param_3 = obj.watch(videoId,startMinute,endMinute)\n# obj.like(videoId)\n# obj.dislike(videoId)\n# param_6 = obj.getLikesAndDislikes(videoId)\n# param_7 = obj.getViews(videoId)"}, "Python3": {"langSlug": "python3", "code": "class VideoSharingPlatform:\n\n    def __init__(self):\n        \n\n    def upload(self, video: str) -> int:\n        \n\n    def remove(self, videoId: int) -> None:\n        \n\n    def watch(self, videoId: int, startMinute: int, endMinute: int) -> str:\n        \n\n    def like(self, videoId: int) -> None:\n        \n\n    def dislike(self, videoId: int) -> None:\n        \n\n    def getLikesAndDislikes(self, videoId: int) -> List[int]:\n        \n\n    def getViews(self, videoId: int) -> int:\n        \n\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform()\n# param_1 = obj.upload(video)\n# obj.remove(videoId)\n# param_3 = obj.watch(videoId,startMinute,endMinute)\n# obj.like(videoId)\n# obj.dislike(videoId)\n# param_6 = obj.getLikesAndDislikes(videoId)\n# param_7 = obj.getViews(videoId)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} VideoSharingPlatform;\n\n\nVideoSharingPlatform* videoSharingPlatformCreate() {\n    \n}\n\nint videoSharingPlatformUpload(VideoSharingPlatform* obj, char* video) {\n    \n}\n\nvoid videoSharingPlatformRemove(VideoSharingPlatform* obj, int videoId) {\n    \n}\n\nchar* videoSharingPlatformWatch(VideoSharingPlatform* obj, int videoId, int startMinute, int endMinute) {\n    \n}\n\nvoid videoSharingPlatformLike(VideoSharingPlatform* obj, int videoId) {\n    \n}\n\nvoid videoSharingPlatformDislike(VideoSharingPlatform* obj, int videoId) {\n    \n}\n\nint* videoSharingPlatformGetLikesAndDislikes(VideoSharingPlatform* obj, int videoId, int* retSize) {\n    \n}\n\nint videoSharingPlatformGetViews(VideoSharingPlatform* obj, int videoId) {\n    \n}\n\nvoid videoSharingPlatformFree(VideoSharingPlatform* obj) {\n    \n}\n\n/**\n * Your VideoSharingPlatform struct will be instantiated and called as such:\n * VideoSharingPlatform* obj = videoSharingPlatformCreate();\n * int param_1 = videoSharingPlatformUpload(obj, video);\n \n * videoSharingPlatformRemove(obj, videoId);\n \n * char* param_3 = videoSharingPlatformWatch(obj, videoId, startMinute, endMinute);\n \n * videoSharingPlatformLike(obj, videoId);\n \n * videoSharingPlatformDislike(obj, videoId);\n \n * int* param_6 = videoSharingPlatformGetLikesAndDislikes(obj, videoId, retSize);\n \n * int param_7 = videoSharingPlatformGetViews(obj, videoId);\n \n * videoSharingPlatformFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class VideoSharingPlatform {\n\n    public VideoSharingPlatform() {\n        \n    }\n    \n    public int Upload(string video) {\n        \n    }\n    \n    public void Remove(int videoId) {\n        \n    }\n    \n    public string Watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    public void Like(int videoId) {\n        \n    }\n    \n    public void Dislike(int videoId) {\n        \n    }\n    \n    public int[] GetLikesAndDislikes(int videoId) {\n        \n    }\n    \n    public int GetViews(int videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform obj = new VideoSharingPlatform();\n * int param_1 = obj.Upload(video);\n * obj.Remove(videoId);\n * string param_3 = obj.Watch(videoId,startMinute,endMinute);\n * obj.Like(videoId);\n * obj.Dislike(videoId);\n * int[] param_6 = obj.GetLikesAndDislikes(videoId);\n * int param_7 = obj.GetViews(videoId);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar VideoSharingPlatform = function() {\n    \n};\n\n/** \n * @param {string} video\n * @return {number}\n */\nVideoSharingPlatform.prototype.upload = function(video) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.remove = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId \n * @param {number} startMinute \n * @param {number} endMinute\n * @return {string}\n */\nVideoSharingPlatform.prototype.watch = function(videoId, startMinute, endMinute) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.like = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.dislike = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {number[]}\n */\nVideoSharingPlatform.prototype.getLikesAndDislikes = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {number}\n */\nVideoSharingPlatform.prototype.getViews = function(videoId) {\n    \n};\n\n/** \n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = new VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class VideoSharingPlatform {\n    constructor() {\n        \n    }\n\n    upload(video: string): number {\n        \n    }\n\n    remove(videoId: number): void {\n        \n    }\n\n    watch(videoId: number, startMinute: number, endMinute: number): string {\n        \n    }\n\n    like(videoId: number): void {\n        \n    }\n\n    dislike(videoId: number): void {\n        \n    }\n\n    getLikesAndDislikes(videoId: number): number[] {\n        \n    }\n\n    getViews(videoId: number): number {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = new VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */"}, "PHP": {"langSlug": "php", "code": "class VideoSharingPlatform {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $video\n     * @return Integer\n     */\n    function upload($video) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function remove($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @param Integer $startMinute\n     * @param Integer $endMinute\n     * @return String\n     */\n    function watch($videoId, $startMinute, $endMinute) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function like($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function dislike($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return Integer[]\n     */\n    function getLikesAndDislikes($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return Integer\n     */\n    function getViews($videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * $obj = VideoSharingPlatform();\n * $ret_1 = $obj->upload($video);\n * $obj->remove($videoId);\n * $ret_3 = $obj->watch($videoId, $startMinute, $endMinute);\n * $obj->like($videoId);\n * $obj->dislike($videoId);\n * $ret_6 = $obj->getLikesAndDislikes($videoId);\n * $ret_7 = $obj->getViews($videoId);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass VideoSharingPlatform {\n\n    init() {\n        \n    }\n    \n    func upload(_ video: String) -> Int {\n        \n    }\n    \n    func remove(_ videoId: Int) {\n        \n    }\n    \n    func watch(_ videoId: Int, _ startMinute: Int, _ endMinute: Int) -> String {\n        \n    }\n    \n    func like(_ videoId: Int) {\n        \n    }\n    \n    func dislike(_ videoId: Int) {\n        \n    }\n    \n    func getLikesAndDislikes(_ videoId: Int) -> [Int] {\n        \n    }\n    \n    func getViews(_ videoId: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * let obj = VideoSharingPlatform()\n * let ret_1: Int = obj.upload(video)\n * obj.remove(videoId)\n * let ret_3: String = obj.watch(videoId, startMinute, endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * let ret_6: [Int] = obj.getLikesAndDislikes(videoId)\n * let ret_7: Int = obj.getViews(videoId)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class VideoSharingPlatform() {\n\n    fun upload(video: String): Int {\n        \n    }\n\n    fun remove(videoId: Int) {\n        \n    }\n\n    fun watch(videoId: Int, startMinute: Int, endMinute: Int): String {\n        \n    }\n\n    fun like(videoId: Int) {\n        \n    }\n\n    fun dislike(videoId: Int) {\n        \n    }\n\n    fun getLikesAndDislikes(videoId: Int): IntArray {\n        \n    }\n\n    fun getViews(videoId: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */"}, "Dart": {"langSlug": "dart", "code": "class VideoSharingPlatform {\n\n  VideoSharingPlatform() {\n    \n  }\n  \n  int upload(String video) {\n    \n  }\n  \n  void remove(int videoId) {\n    \n  }\n  \n  String watch(int videoId, int startMinute, int endMinute) {\n    \n  }\n  \n  void like(int videoId) {\n    \n  }\n  \n  void dislike(int videoId) {\n    \n  }\n  \n  List<int> getLikesAndDislikes(int videoId) {\n    \n  }\n  \n  int getViews(int videoId) {\n    \n  }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform obj = VideoSharingPlatform();\n * int param1 = obj.upload(video);\n * obj.remove(videoId);\n * String param3 = obj.watch(videoId,startMinute,endMinute);\n * obj.like(videoId);\n * obj.dislike(videoId);\n * List<int> param6 = obj.getLikesAndDislikes(videoId);\n * int param7 = obj.getViews(videoId);\n */"}, "Go": {"langSlug": "golang", "code": "type VideoSharingPlatform struct {\n    \n}\n\n\nfunc Constructor() VideoSharingPlatform {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Upload(video string) int {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Remove(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Watch(videoId int, startMinute int, endMinute int) string {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Like(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Dislike(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) GetLikesAndDislikes(videoId int) []int {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) GetViews(videoId int) int {\n    \n}\n\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Upload(video);\n * obj.Remove(videoId);\n * param_3 := obj.Watch(videoId,startMinute,endMinute);\n * obj.Like(videoId);\n * obj.Dislike(videoId);\n * param_6 := obj.GetLikesAndDislikes(videoId);\n * param_7 := obj.GetViews(videoId);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class VideoSharingPlatform\n    def initialize()\n        \n    end\n\n\n=begin\n    :type video: String\n    :rtype: Integer\n=end\n    def upload(video)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def remove(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :type start_minute: Integer\n    :type end_minute: Integer\n    :rtype: String\n=end\n    def watch(video_id, start_minute, end_minute)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def like(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def dislike(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Integer[]\n=end\n    def get_likes_and_dislikes(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Integer\n=end\n    def get_views(video_id)\n        \n    end\n\n\nend\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform.new()\n# param_1 = obj.upload(video)\n# obj.remove(video_id)\n# param_3 = obj.watch(video_id, start_minute, end_minute)\n# obj.like(video_id)\n# obj.dislike(video_id)\n# param_6 = obj.get_likes_and_dislikes(video_id)\n# param_7 = obj.get_views(video_id)"}, "Scala": {"langSlug": "scala", "code": "class VideoSharingPlatform() {\n\n    def upload(video: String): Int = {\n        \n    }\n\n    def remove(videoId: Int): Unit = {\n        \n    }\n\n    def watch(videoId: Int, startMinute: Int, endMinute: Int): String = {\n        \n    }\n\n    def like(videoId: Int): Unit = {\n        \n    }\n\n    def dislike(videoId: Int): Unit = {\n        \n    }\n\n    def getLikesAndDislikes(videoId: Int): Array[Int] = {\n        \n    }\n\n    def getViews(videoId: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * val obj = new VideoSharingPlatform()\n * val param_1 = obj.upload(video)\n * obj.remove(videoId)\n * val param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * val param_6 = obj.getLikesAndDislikes(videoId)\n * val param_7 = obj.getViews(videoId)\n */"}, "Rust": {"langSlug": "rust", "code": "struct VideoSharingPlatform {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl VideoSharingPlatform {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn upload(&self, video: String) -> i32 {\n        \n    }\n    \n    fn remove(&self, video_id: i32) {\n        \n    }\n    \n    fn watch(&self, video_id: i32, start_minute: i32, end_minute: i32) -> String {\n        \n    }\n    \n    fn like(&self, video_id: i32) {\n        \n    }\n    \n    fn dislike(&self, video_id: i32) {\n        \n    }\n    \n    fn get_likes_and_dislikes(&self, video_id: i32) -> Vec<i32> {\n        \n    }\n    \n    fn get_views(&self, video_id: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * let obj = VideoSharingPlatform::new();\n * let ret_1: i32 = obj.upload(video);\n * obj.remove(videoId);\n * let ret_3: String = obj.watch(videoId, startMinute, endMinute);\n * obj.like(videoId);\n * obj.dislike(videoId);\n * let ret_6: Vec<i32> = obj.get_likes_and_dislikes(videoId);\n * let ret_7: i32 = obj.get_views(videoId);\n */"}, "Racket": {"langSlug": "racket", "code": "(define video-sharing-platform%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; upload : string? -> exact-integer?\n    (define/public (upload video)\n      )\n    ; remove : exact-integer? -> void?\n    (define/public (remove video-id)\n      )\n    ; watch : exact-integer? exact-integer? exact-integer? -> string?\n    (define/public (watch video-id start-minute end-minute)\n      )\n    ; like : exact-integer? -> void?\n    (define/public (like video-id)\n      )\n    ; dislike : exact-integer? -> void?\n    (define/public (dislike video-id)\n      )\n    ; get-likes-and-dislikes : exact-integer? -> (listof exact-integer?)\n    (define/public (get-likes-and-dislikes video-id)\n      )\n    ; get-views : exact-integer? -> exact-integer?\n    (define/public (get-views video-id)\n      )))\n\n;; Your video-sharing-platform% object will be instantiated and called as such:\n;; (define obj (new video-sharing-platform%))\n;; (define param_1 (send obj upload video))\n;; (send obj remove video-id)\n;; (define param_3 (send obj watch video-id start-minute end-minute))\n;; (send obj like video-id)\n;; (send obj dislike video-id)\n;; (define param_6 (send obj get-likes-and-dislikes video-id))\n;; (define param_7 (send obj get-views video-id))"}, "Erlang": {"langSlug": "erlang", "code": "-spec video_sharing_platform_init_() -> any().\nvideo_sharing_platform_init_() ->\n  .\n\n-spec video_sharing_platform_upload(Video :: unicode:unicode_binary()) -> integer().\nvideo_sharing_platform_upload(Video) ->\n  .\n\n-spec video_sharing_platform_remove(VideoId :: integer()) -> any().\nvideo_sharing_platform_remove(VideoId) ->\n  .\n\n-spec video_sharing_platform_watch(VideoId :: integer(), StartMinute :: integer(), EndMinute :: integer()) -> unicode:unicode_binary().\nvideo_sharing_platform_watch(VideoId, StartMinute, EndMinute) ->\n  .\n\n-spec video_sharing_platform_like(VideoId :: integer()) -> any().\nvideo_sharing_platform_like(VideoId) ->\n  .\n\n-spec video_sharing_platform_dislike(VideoId :: integer()) -> any().\nvideo_sharing_platform_dislike(VideoId) ->\n  .\n\n-spec video_sharing_platform_get_likes_and_dislikes(VideoId :: integer()) -> [integer()].\nvideo_sharing_platform_get_likes_and_dislikes(VideoId) ->\n  .\n\n-spec video_sharing_platform_get_views(VideoId :: integer()) -> integer().\nvideo_sharing_platform_get_views(VideoId) ->\n  .\n\n\n%% Your functions will be called as such:\n%% video_sharing_platform_init_(),\n%% Param_1 = video_sharing_platform_upload(Video),\n%% video_sharing_platform_remove(VideoId),\n%% Param_3 = video_sharing_platform_watch(VideoId, StartMinute, EndMinute),\n%% video_sharing_platform_like(VideoId),\n%% video_sharing_platform_dislike(VideoId),\n%% Param_6 = video_sharing_platform_get_likes_and_dislikes(VideoId),\n%% Param_7 = video_sharing_platform_get_views(VideoId),\n\n%% video_sharing_platform_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule VideoSharingPlatform do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec upload(video :: String.t) :: integer\n  def upload(video) do\n    \n  end\n\n  @spec remove(video_id :: integer) :: any\n  def remove(video_id) do\n    \n  end\n\n  @spec watch(video_id :: integer, start_minute :: integer, end_minute :: integer) :: String.t\n  def watch(video_id, start_minute, end_minute) do\n    \n  end\n\n  @spec like(video_id :: integer) :: any\n  def like(video_id) do\n    \n  end\n\n  @spec dislike(video_id :: integer) :: any\n  def dislike(video_id) do\n    \n  end\n\n  @spec get_likes_and_dislikes(video_id :: integer) :: [integer]\n  def get_likes_and_dislikes(video_id) do\n    \n  end\n\n  @spec get_views(video_id :: integer) :: integer\n  def get_views(video_id) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# VideoSharingPlatform.init_()\n# param_1 = VideoSharingPlatform.upload(video)\n# VideoSharingPlatform.remove(video_id)\n# param_3 = VideoSharingPlatform.watch(video_id, start_minute, end_minute)\n# VideoSharingPlatform.like(video_id)\n# VideoSharingPlatform.dislike(video_id)\n# param_6 = VideoSharingPlatform.get_likes_and_dislikes(video_id)\n# param_7 = VideoSharingPlatform.get_views(video_id)\n\n# VideoSharingPlatform.init_ will be called before every test case, in which you can do some necessary initializations."}}}