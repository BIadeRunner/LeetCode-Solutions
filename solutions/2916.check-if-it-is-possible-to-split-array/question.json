{"question_id": "2916", "problem_slug": "check-if-it-is-possible-to-split-array", "problem_title": "Check if it is Possible to Split Array", "content": "You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n arrays of size 1 by performing a series of steps.\nAn array is called good if:\n\nThe length of the array is one, or\nThe sum of the elements of the array is greater than or equal to m.\n\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two arrays, if both resulting arrays are good.\nReturn true if you can split the given array into n arrays, otherwise return false.\n \nExample 1:\n\nInput: nums = [2, 2, 1], m = 4\nOutput: true\nExplanation:\n\nSplit [2, 2, 1] to [2, 2] and [1]. The array [1] has a length of one, and the array [2, 2] has the sum of its elements equal to 4 >= m, so both are good arrays.\nSplit [2, 2] to [2] and [2]. both arrays have the length of one, so both are good arrays.\n\n\nExample 2:\n\nInput: nums = [2, 1, 3], m = 5\nOutput: false\nExplanation:\nThe first move has to be either of the following:\n\nSplit [2, 1, 3] to [2, 1] and [3]. The array [2, 1] has neither length of one nor sum of elements greater than or equal to m.\nSplit [2, 1, 3] to [2] and [1, 3]. The array [1, 3] has neither length of one nor sum of elements greater than or equal to m.\n\nSo as both moves are invalid (they do not divide the array into two good arrays), we are unable to split nums into n arrays of size 1.\n\nExample 3:\n\nInput: nums = [2, 3, 3, 2, 3], m = 6\nOutput: true\nExplanation:\n\nSplit [2, 3, 3, 2, 3] to [2] and [3, 3, 2, 3].\nSplit [3, 3, 2, 3] to [3, 3, 2] and [3].\nSplit [3, 3, 2] to [3, 3] and [2].\nSplit [3, 3] to [3] and [3].\n\n\n \nConstraints:\n\n1 <= n == nums.length <= 100\n1 <= nums[i] <= 100\n1 <= m <= 200\n\n", "hints": ["It can be proven that if you can split more than one element as a subarray, then you can split exactly one element."], "exampleTestcases": "[2, 2, 1]\n4\n[2, 1, 3]\n5\n[2, 3, 3, 2, 3]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canSplitArray(vector<int>& nums, int m) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canSplitArray(List<Integer> nums, int m) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canSplitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canSplitArray(self, nums: List[int], m: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canSplitArray(int* nums, int numsSize, int m){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanSplitArray(IList<int> nums, int m) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {boolean}\n */\nvar canSplitArray = function(nums, m) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canSplitArray(nums: number[], m: number): boolean {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Boolean\n     */\n    function canSplitArray($nums, $m) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canSplitArray(_ nums: [Int], _ m: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canSplitArray(nums: List<Int>, m: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canSplitArray(List<int> nums, int m) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canSplitArray(nums []int, m int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Boolean}\ndef can_split_array(nums, m)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canSplitArray(nums: List[Int], m: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_split_array(nums: Vec<i32>, m: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-split-array nums m)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_split_array(Nums :: [integer()], M :: integer()) -> boolean().\ncan_split_array(Nums, M) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_split_array(nums :: [integer], m :: integer) :: boolean\n  def can_split_array(nums, m) do\n    \n  end\nend"}}}