{"question_id": "1929", "problem_slug": "maximum-value-at-a-given-index-in-a-bounded-array", "problem_title": "Maximum Value at a Given Index in a Bounded Array", "content": "You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\n\nnums.length == n\nnums[i] is a positive integer where 0 <= i < n.\nabs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.\nThe sum of all the elements of nums does not exceed maxSum.\nnums[index] is maximized.\n\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\n \nExample 1:\n\nInput: n = 4, index = 2,  maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n\nExample 2:\n\nInput: n = 6, index = 1,  maxSum = 10\nOutput: 3\n\n \nConstraints:\n\n1 <= n <= maxSum <= 109\n0 <= index < n\n\n", "hints": ["What if the problem was instead determining if you could generate a valid array with nums[index] == target?", "To generate the array, set nums[index] to target, nums[index-i] to target-i, and nums[index+i] to target-i. Then, this will give the minimum possible sum, so check if the sum is less than or equal to maxSum.", "n is too large to actually generate the array, so you can use the formula 1 + 2 + ... + n = n * (n+1) / 2 to quickly find the sum of nums[0...index] and nums[index...n-1].", "Binary search for the target. If it is possible, then move the lower bound up. Otherwise, move the upper bound down."], "exampleTestcases": "4\n2\n6\n6\n1\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxValue(int n, int index, int maxSum) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxValue(int n, int index, int maxSum) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxValue(self, n, index, maxSum):\n        \"\"\"\n        :type n: int\n        :type index: int\n        :type maxSum: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxValue(int n, int index, int maxSum) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxValue(int n, int index, int maxSum) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} index\n * @param {number} maxSum\n * @return {number}\n */\nvar maxValue = function(n, index, maxSum) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxValue(n: number, index: number, maxSum: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $index\n     * @param Integer $maxSum\n     * @return Integer\n     */\n    function maxValue($n, $index, $maxSum) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxValue(_ n: Int, _ index: Int, _ maxSum: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxValue(n: Int, index: Int, maxSum: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxValue(int n, int index, int maxSum) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxValue(n int, index int, maxSum int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} index\n# @param {Integer} max_sum\n# @return {Integer}\ndef max_value(n, index, max_sum)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxValue(n: Int, index: Int, maxSum: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_value(n: i32, index: i32, max_sum: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-value n index maxSum)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_value(N :: integer(), Index :: integer(), MaxSum :: integer()) -> integer().\nmax_value(N, Index, MaxSum) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_value(n :: integer, index :: integer, max_sum :: integer) :: integer\n  def max_value(n, index, max_sum) do\n    \n  end\nend"}}}