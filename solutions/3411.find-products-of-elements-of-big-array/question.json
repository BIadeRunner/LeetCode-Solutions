{"question_id": "3411", "problem_slug": "find-products-of-elements-of-big-array", "problem_title": "Find Products of Elements of Big Array", "content": "The powerful array of a non-negative integer x is defined as the shortest sorted array of powers of two that sum up to x. The table below illustrates examples of how the powerful array is determined. It can be proven that the powerful array of x is unique.\n\n\n\nnum\nBinary Representation\npowerful array\n\n\n1\n00001\n[1]\n\n\n8\n01000\n[8]\n\n\n10\n01010\n[2, 8]\n\n\n13\n01101\n[1, 4, 8]\n\n\n23\n10111\n[1, 2, 4, 16]\n\n\n\nThe array big_nums is created by concatenating the powerful arrays for every positive integer i in ascending order: 1, 2, 3, and so on. Thus, big_nums begins as [1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...].\nYou are given a 2D integer matrix queries, where for queries[i] = [fromi, toi, modi] you should calculate (big_nums[fromi] * big_nums[fromi + 1] * ... * big_nums[toi]) % modi.\nReturn an integer array answer such that answer[i] is the answer to the ith query.\n \nExample 1:\n\nInput: queries = [[1,3,7]]\nOutput: [4]\nExplanation:\nThere is one query.\nbig_nums[1..3] = [2,1,2]. The product of them is 4. The result is 4 % 7 = 4.\n\nExample 2:\n\nInput: queries = [[2,5,3],[7,7,4]]\nOutput: [2,2]\nExplanation:\nThere are two queries.\nFirst query: big_nums[2..5] = [1,2,4,1]. The product of them is 8. The result is 8 % 3 = 2.\nSecond query: big_nums[7] = 2. The result is 2 % 4 = 2.\n\n \nConstraints:\n\n1 <= queries.length <= 500\nqueries[i].length == 3\n0 <= queries[i][0] <= queries[i][1] <= 1015\n1 <= queries[i][2] <= 105\n\n", "hints": ["Find a way to calculate <code>f(n, i)</code> which is the total number of numbers in <code>[1, n]</code> when the <code>i<sup>th</sup></code> bit is set in <code>O(log(n))</code> time.", "Use binary search to find the last number for each query (and there might be one “incomplete” number for the query).", "Use a similar way to find the product (we only need to save the sum of exponents of power of <code>2</code>)."], "exampleTestcases": "[[1,3,7]]\n[[2,5,3],[7,7,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findProductsOfElements(vector<vector<long long>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findProductsOfElements(long[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findProductsOfElements(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findProductsOfElements(long long** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindProductsOfElements(long[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar findProductsOfElements = function(queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findProductsOfElements(queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function findProductsOfElements($queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findProductsOfElements(_ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findProductsOfElements(queries: Array<LongArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findProductsOfElements(List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findProductsOfElements(queries [][]int64) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} queries\n# @return {Integer[]}\ndef find_products_of_elements(queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findProductsOfElements(queries: Array[Array[Long]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_products_of_elements(queries: Vec<Vec<i64>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-products-of-elements queries)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_products_of_elements(Queries :: [[integer()]]) -> [integer()].\nfind_products_of_elements(Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_products_of_elements(queries :: [[integer]]) :: [integer]\n  def find_products_of_elements(queries) do\n    \n  end\nend"}}}