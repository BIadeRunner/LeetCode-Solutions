{"question_id": "266", "problem_slug": "palindrome-permutation", "problem_title": "Palindrome Permutation", "content": "Given a string s, return true if a permutation of the string could form a palindrome and false otherwise.\n \nExample 1:\n\nInput: s = \"code\"\nOutput: false\n\nExample 2:\n\nInput: s = \"aab\"\nOutput: true\n\nExample 3:\n\nInput: s = \"carerac\"\nOutput: true\n\n \nConstraints:\n\n1 <= s.length <= 5000\ns consists of only lowercase English letters.\n\n", "hints": ["Consider the palindromes of odd vs even length. What difference do you notice?", "Count the frequency of each character.", "If each character occurs even number of times, then it must be a palindrome. How about character which occurs odd number of times?"], "exampleTestcases": "\"code\"\n\"aab\"\n\"carerac\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canPermutePalindrome(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canPermutePalindrome(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canPermutePalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canPermutePalindrome(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanPermutePalindrome(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar canPermutePalindrome = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canPermutePalindrome(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function canPermutePalindrome($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canPermutePalindrome(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canPermutePalindrome(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canPermutePalindrome(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canPermutePalindrome(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef can_permute_palindrome(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canPermutePalindrome(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_permute_palindrome(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-permute-palindrome s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_permute_palindrome(S :: unicode:unicode_binary()) -> boolean().\ncan_permute_palindrome(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_permute_palindrome(s :: String.t) :: boolean\n  def can_permute_palindrome(s) do\n    \n  end\nend"}}}