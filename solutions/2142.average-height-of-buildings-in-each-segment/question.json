{"question_id": "2142", "problem_slug": "average-height-of-buildings-in-each-segment", "problem_title": "Average Height of Buildings in Each Segment", "content": "A perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array buildings, where buildings[i] = [starti, endi, heighti]. This means that there is a building with heighti in the half-closed segment [starti, endi).\nYou want to describe the heights of the buildings on the street with the minimum number of non-overlapping segments. The street can be represented by the 2D integer array street where street[j] = [leftj, rightj, averagej] describes a half-closed segment [leftj, rightj) of the road where the average heights of the buildings in the segment is averagej.\n\nFor example, if buildings = [[1,5,2],[3,10,4]], the street could be represented by street = [[1,3,2],[3,5,3],[5,10,4]] because:\n\n\t\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 5, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 5 to 10, there is only the second building with an average height of 4 / 1 = 4.\n\n\n\nGiven buildings, return the 2D integer array street as described above (excluding any areas of the street where there are no buldings). You may return the array in any order.\nThe average of n elements is the sum of the n elements divided (integer division) by n.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.\n \nExample 1:\n\n\nInput: buildings = [[1,4,2],[3,9,4]]\nOutput: [[1,3,2],[3,4,3],[4,9,4]]\nExplanation:\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 4, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 4 to 9, there is only the second building with an average height of 4 / 1 = 4.\n\nExample 2:\n\nInput: buildings = [[1,3,2],[2,5,3],[2,8,3]]\nOutput: [[1,3,2],[3,8,3]]\nExplanation:\nFrom 1 to 2, there is only the first building with an average height of 2 / 1 = 2.\nFrom 2 to 3, all three buildings are there with an average height of (2+3+3) / 3 = 2.\nFrom 3 to 5, both the second and the third building are there with an average height of (3+3) / 2 = 3.\nFrom 5 to 8, there is only the last building with an average height of 3 / 1 = 3.\nThe average height from 1 to 3 is the same so we can group them into one segment.\nThe average height from 3 to 8 is the same so we can group them into one segment.\n\nExample 3:\n\nInput: buildings = [[1,2,1],[5,6,1]]\nOutput: [[1,2,1],[5,6,1]]\nExplanation:\nFrom 1 to 2, there is only the first building with an average height of 1 / 1 = 1.\nFrom 2 to 5, there are no buildings, so it is not included in the output.\nFrom 5 to 6, there is only the second building with an average height of 1 / 1 = 1.\nWe cannot group the segments together because an empty space with no buildings seperates the segments.\n\n \nConstraints:\n\n1 <= buildings.length <= 105\nbuildings[i].length == 3\n0 <= starti < endi <= 108\n1 <= heighti <= 105\n\n", "hints": ["Try sorting the start and end points of each building.", "The naive solution is to go through each position on the street and keep track of the sum of all the buildings at that position and the number of buildings at that position.", "How could we optimize that solution to pass?", "We don't need to go through every position, just the ones where a building starts or a building ends."], "exampleTestcases": "[[1,4,2],[3,9,4]]\n[[1,3,2],[2,5,3],[2,8,3]]\n[[1,2,1],[5,6,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> averageHeightOfBuildings(vector<vector<int>>& buildings) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] averageHeightOfBuildings(int[][] buildings) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def averageHeightOfBuildings(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def averageHeightOfBuildings(self, buildings: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** averageHeightOfBuildings(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] AverageHeightOfBuildings(int[][] buildings) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar averageHeightOfBuildings = function(buildings) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function averageHeightOfBuildings(buildings: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function averageHeightOfBuildings($buildings) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func averageHeightOfBuildings(_ buildings: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun averageHeightOfBuildings(buildings: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> averageHeightOfBuildings(List<List<int>> buildings) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func averageHeightOfBuildings(buildings [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef average_height_of_buildings(buildings)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def averageHeightOfBuildings(buildings: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn average_height_of_buildings(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (average-height-of-buildings buildings)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec average_height_of_buildings(Buildings :: [[integer()]]) -> [[integer()]].\naverage_height_of_buildings(Buildings) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec average_height_of_buildings(buildings :: [[integer]]) :: [[integer]]\n  def average_height_of_buildings(buildings) do\n    \n  end\nend"}}}