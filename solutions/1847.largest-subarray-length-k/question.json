{"question_id": "1847", "problem_slug": "largest-subarray-length-k", "problem_title": "Largest Subarray Length K", "content": "An array A is larger than some array B if for the first index i where A[i] != B[i], A[i] > B[i].\nFor example, consider 0-indexing:\n\n[1,3,2,4] > [1,2,2,4], since at index 1, 3 > 2.\n[1,4,4,4] < [2,1,1,1], since at index 0, 1 < 2.\n\nA subarray is a contiguous subsequence of the array.\nGiven an integer array nums of distinct integers, return the largest subarray of nums of length k.\n \nExample 1:\n\nInput: nums = [1,4,5,2,3], k = 3\nOutput: [5,2,3]\nExplanation: The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3].\nOf these, [5,2,3] is the largest.\nExample 2:\n\nInput: nums = [1,4,5,2,3], k = 4\nOutput: [4,5,2,3]\nExplanation: The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3].\nOf these, [4,5,2,3] is the largest.\nExample 3:\n\nInput: nums = [1,4,5,2,3], k = 1\nOutput: [5]\n\n \nConstraints:\n\n1 <= k <= nums.length <= 105\n1 <= nums[i] <= 109\nAll the integers of nums are unique.\n\n \nFollow up: What if the integers in nums are not distinct?", "hints": ["Search for the largest integer in the range [0, n - k]", "This integer is the first element in the subarray. You should take it with the k - 1 elements after it."], "exampleTestcases": "[1,4,5,2,3]\n3\n[1,4,5,2,3]\n4\n[1,4,5,2,3]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> largestSubarray(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] largestSubarray(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestSubarray(self, nums: List[int], k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* largestSubarray(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] LargestSubarray(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar largestSubarray = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestSubarray(nums: number[], k: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function largestSubarray($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestSubarray(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestSubarray(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> largestSubarray(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestSubarray(nums []int, k int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef largest_subarray(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestSubarray(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_subarray(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-subarray nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_subarray(Nums :: [integer()], K :: integer()) -> [integer()].\nlargest_subarray(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_subarray(nums :: [integer], k :: integer) :: [integer]\n  def largest_subarray(nums, k) do\n    \n  end\nend"}}}