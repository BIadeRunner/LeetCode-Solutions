{"questionId": "1393", "acRate": 60.51715607558569, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2218", "paidOnly": false, "status": "ac", "title": "Maximum Value of K Coins From Piles", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "maximum-value-of-k-coins-from-piles", "content": "<p>There are <code>n</code> <strong>piles</strong> of coins on a table. Each pile consists of a <strong>positive number</strong> of coins of assorted denominations.</p>\n\n<p>In one move, you can choose any coin on <strong>top</strong> of any pile, remove it, and add it to your wallet.</p>\n\n<p>Given a list <code>piles</code>, where <code>piles[i]</code> is a list of integers denoting the composition of the <code>i<sup>th</sup></code> pile from <strong>top to bottom</strong>, and a positive integer <code>k</code>, return <em>the <strong>maximum total value</strong> of coins you can have in your wallet if you choose <strong>exactly</strong></em> <code>k</code> <em>coins optimally</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/09/e1.png\" style=\"width: 600px; height: 243px;\" />\n<pre>\n<strong>Input:</strong> piles = [[1,100,3],[7,8,9]], k = 2\n<strong>Output:</strong> 101\n<strong>Explanation:</strong>\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7\n<strong>Output:</strong> 706\n<strong>Explanation:\n</strong>The maximum total can be obtained if we choose all coins from the last pile.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == piles.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= piles[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= sum(piles[i].length) &lt;= 2000</code></li>\n</ul>\n", "hints": ["For each pile i, what will be the total value of coins we can collect if we choose the first j coins?", "How can we use dynamic programming to combine the results from different piles to find the most optimal answer?"], "exampleTestcases": "[[1,100,3],[7,8,9]]\n2\n[[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]]\n7", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxValueOfCoins(vector<vector<int>>& piles, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxValueOfCoins(List<List<Integer>> piles, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxValueOfCoins(self, piles, k):\n        \"\"\"\n        :type piles: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxValueOfCoins(int** piles, int pilesSize, int* pilesColSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxValueOfCoins(IList<IList<int>> piles, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} piles\n * @param {number} k\n * @return {number}\n */\nvar maxValueOfCoins = function(piles, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxValueOfCoins(piles: number[][], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $piles\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxValueOfCoins($piles, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxValueOfCoins(_ piles: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxValueOfCoins(piles: List<List<Int>>, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxValueOfCoins(List<List<int>> piles, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxValueOfCoins(piles [][]int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} piles\n# @param {Integer} k\n# @return {Integer}\ndef max_value_of_coins(piles, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxValueOfCoins(piles: List[List[Int]], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_value_of_coins(piles: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-value-of-coins piles k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_value_of_coins(Piles :: [[integer()]], K :: integer()) -> integer().\nmax_value_of_coins(Piles, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_value_of_coins(piles :: [[integer]], k :: integer) :: integer\n  def max_value_of_coins(piles, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "coin-change", "title": "Coin Change", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "coin-change-ii", "title": "Coin Change II", "isPaidOnly": false}]}