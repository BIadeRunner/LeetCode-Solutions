{"questionId": "1910", "acRate": 39.24227747282316, "difficulty": "Easy", "freqBar": 30.00837732520367, "frontendQuestionId": "1784", "paidOnly": false, "status": "ac", "title": "Check if Binary String Has at Most One Segment of Ones", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones", "content": "<p>Given a binary string <code>s</code> <strong>\u200b\u200b\u200b\u200b\u200bwithout leading zeros</strong>, return <code>true</code>\u200b\u200b\u200b <em>if </em><code>s</code><em> contains <strong>at most one contiguous segment of ones</strong></em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1001&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>The ones do not form a contiguous segment.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;110&quot;\n<strong>Output:</strong> true</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code>\u200b\u200b\u200b\u200b is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>s[0]</code> is&nbsp;<code>&#39;1&#39;</code>.</li>\n</ul>\n", "hints": ["It's guaranteed to have at least one segment", "The string size is small so you can count all segments of ones with no that have no adjacent ones."], "exampleTestcases": "\"1001\"\n\"110\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkOnesSegment(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkOnesSegment(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkOnesSegment(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkOnesSegment(self, s: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool checkOnesSegment(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckOnesSegment(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkOnesSegment = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkOnesSegment(s: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkOnesSegment($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkOnesSegment(_ s: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkOnesSegment(s: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool checkOnesSegment(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func checkOnesSegment(s string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef check_ones_segment(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkOnesSegment(s: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_ones_segment(s: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (check-ones-segment s)\n  (-> string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec check_ones_segment(S :: unicode:unicode_binary()) -> boolean().\ncheck_ones_segment(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_ones_segment(s :: String.t) :: boolean\n  def check_ones_segment(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "longer-contiguous-segments-of-ones-than-zeros", "title": "Longer Contiguous Segments of Ones than Zeros", "isPaidOnly": false}]}