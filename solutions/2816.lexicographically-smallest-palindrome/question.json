{"question_id": "2816", "problem_slug": "lexicographically-smallest-palindrome", "problem_title": "Lexicographically Smallest Palindrome", "content": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\n \nExample 1:\n\nInput: s = \"egcfe\"\nOutput: \"efcfe\"\nExplanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"abba\"\nExplanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".\n\nExample 3:\n\nInput: s = \"seven\"\nOutput: \"neven\"\nExplanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of only lowercase English letters.\n\n", "hints": ["We can make any string a palindrome, by simply making any character at index i equal to the character at index length - i - 1 (using 0-based indexing).", "To make it lexicographically smallest we can change the character with maximum ASCII value to the one with minimum ASCII value."], "exampleTestcases": "\"egcfe\"\n\"abcd\"\n\"seven\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string makeSmallestPalindrome(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String makeSmallestPalindrome(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeSmallestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char * makeSmallestPalindrome(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string MakeSmallestPalindrome(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar makeSmallestPalindrome = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeSmallestPalindrome(s: string): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function makeSmallestPalindrome($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeSmallestPalindrome(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeSmallestPalindrome(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String makeSmallestPalindrome(String s) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeSmallestPalindrome(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef make_smallest_palindrome(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeSmallestPalindrome(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_smallest_palindrome(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-smallest-palindrome s)\n  (-> string? string?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_smallest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_smallest_palindrome(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_smallest_palindrome(s :: String.t) :: String.t\n  def make_smallest_palindrome(s) do\n    \n  end\nend"}}}