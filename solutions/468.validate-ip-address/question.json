{"question_id": "468", "problem_slug": "validate-ip-address", "problem_title": "Validate IP Address", "content": "Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\n\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n \nExample 1:\n\nInput: queryIP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".\n\nExample 2:\n\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".\n\nExample 3:\n\nInput: queryIP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.\n\n \nConstraints:\n\nqueryIP consists only of English letters, digits and the characters '.' and ':'.\n\n", "hints": [], "exampleTestcases": "\"172.16.254.1\"\n\"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\"256.256.256.256\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string validIPAddress(string queryIP) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String validIPAddress(String queryIP) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validIPAddress(self, queryIP):\n        \"\"\"\n        :type queryIP: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* validIPAddress(char* queryIP) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ValidIPAddress(string queryIP) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} queryIP\n * @return {string}\n */\nvar validIPAddress = function(queryIP) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validIPAddress(queryIP: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $queryIP\n     * @return String\n     */\n    function validIPAddress($queryIP) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validIPAddress(_ queryIP: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validIPAddress(queryIP: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String validIPAddress(String queryIP) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validIPAddress(queryIP string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} query_ip\n# @return {String}\ndef valid_ip_address(query_ip)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validIPAddress(queryIP: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_ip_address(query_ip: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-ip-address queryIP)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_ip_address(QueryIP :: unicode:unicode_binary()) -> unicode:unicode_binary().\nvalid_ip_address(QueryIP) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_ip_address(query_ip :: String.t) :: String.t\n  def valid_ip_address(query_ip) do\n    \n  end\nend"}}}