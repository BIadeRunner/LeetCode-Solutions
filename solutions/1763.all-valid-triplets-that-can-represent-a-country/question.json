{"question_id": "1763", "problem_slug": "all-valid-triplets-that-can-represent-a-country", "problem_title": "All Valid Triplets That Can Represent a Country", "content": "Table: SchoolA\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| student_name  | varchar |\n+---------------+---------+\nstudent_id is the column with unique values for this table.\nEach row of this table contains the name and the id of a student in school A.\nAll student_name are distinct.\n\n \nTable: SchoolB\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| student_name  | varchar |\n+---------------+---------+\nstudent_id is the column with unique values for this table.\nEach row of this table contains the name and the id of a student in school B.\nAll student_name are distinct.\n\n \nTable: SchoolC\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| student_name  | varchar |\n+---------------+---------+\nstudent_id is the column with unique values for this table.\nEach row of this table contains the name and the id of a student in school C.\nAll student_name are distinct.\n\n \nThere is a country with three schools, where each student is enrolled in exactly one school. The country is joining a competition and wants to select one student from each school to represent the country such that:\n\nmember_A is selected from SchoolA,\nmember_B is selected from SchoolB,\nmember_C is selected from SchoolC, and\nThe selected students' names and IDs are pairwise distinct (i.e. no two students share the same name, and no two students share the same ID).\n\nWrite a solution to find all the possible triplets representing the country under the given constraints.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nSchoolA table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 1          | Alice        |\n| 2          | Bob          |\n+------------+--------------+\nSchoolB table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 3          | Tom          |\n+------------+--------------+\nSchoolC table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 3          | Tom          |\n| 2          | Jerry        |\n| 10         | Alice        |\n+------------+--------------+\nOutput: \n+----------+----------+----------+\n| member_A | member_B | member_C |\n+----------+----------+----------+\n| Alice    | Tom      | Jerry    |\n| Bob      | Tom      | Alice    |\n+----------+----------+----------+\nExplanation: \nLet us see all the possible triplets.\n- (Alice, Tom, Tom) --> Rejected because member_B and member_C have the same name and the same ID.\n- (Alice, Tom, Jerry) --> Valid triplet.\n- (Alice, Tom, Alice) --> Rejected because member_A and member_C have the same name.\n- (Bob, Tom, Tom) --> Rejected because member_B and member_C have the same name and the same ID.\n- (Bob, Tom, Jerry) --> Rejected because member_A and member_C have the same ID.\n- (Bob, Tom, Alice) --> Valid triplet.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"SchoolA\":[\"student_id\",\"student_name\"],\"SchoolB\":[\"student_id\",\"student_name\"],\"SchoolC\":[\"student_id\",\"student_name\"]},\"rows\":{\"SchoolA\":[[1,\"Alice\"],[2,\"Bob\"]],\"SchoolB\":[[3,\"Tom\"]],\"SchoolC\":[[3,\"Tom\"],[2,\"Jerry\"],[10,\"Alice\"]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef find_valid_triplets(school_a: pd.DataFrame, school_b: pd.DataFrame, school_c: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}