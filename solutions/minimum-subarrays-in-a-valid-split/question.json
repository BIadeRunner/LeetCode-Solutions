{"questionId": "2607", "acRate": 54.446381865736704, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2464", "paidOnly": true, "status": "ac", "title": "Minimum Subarrays in a Valid Split", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "minimum-subarrays-in-a-valid-split", "content": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>Splitting of an integer array <code>nums</code> into <strong>subarrays</strong> is <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>the <em>greatest common divisor</em> of the first and last elements of each subarray is <strong>greater</strong> than <code>1</code>, and</li>\n\t<li>each element of <code>nums</code> belongs to exactly one subarray.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of subarrays in a <strong>valid</strong> subarray splitting of</em> <code>nums</code>. If a valid subarray splitting is not possible, return <code>-1</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The <strong>greatest common divisor</strong> of two numbers is the largest positive integer that evenly divides both numbers.</li>\n\t<li>A <strong>subarray</strong> is a contiguous non-empty part of an array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,3,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can create a valid split in the following way: [2,6] | [3,4,3].\n- The starting element of the 1<sup>st</sup> subarray is 2 and the ending is 6. Their greatest common divisor is 2, which is greater than 1.\n- The starting element of the 2<sup>nd</sup> subarray is 3 and the ending is 3. Their greatest common divisor is 3, which is greater than 1.\nIt can be proved that 2 is the minimum number of subarrays that we can obtain in a valid split.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can create a valid split in the following way: [3] | [5].\n- The starting element of the 1<sup>st</sup> subarray is 3 and the ending is 3. Their greatest common divisor is 3, which is greater than 1.\n- The starting element of the 2<sup>nd</sup> subarray is 5 and the ending is 5. Their greatest common divisor is 5, which is greater than 1.\nIt can be proved that 2 is the minimum number of subarrays that we can obtain in a valid split.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to create valid split.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Find the minimum number of subarrays needed to validly split each prefix of the input array a.", "Denote dp[i] as the minimum number of subarrays needed to validly split [a[0], a[1], \u2026 , a[i - 1]], where dp[0] = 0.", "Think about the dynamic programming transitions.", "If we split the first i elements of the array, the last subarray in this splitting will end with a[i - 1] and start with some a[j], where gcd(a[j], a[i - 1]) \u2260 1. Then, we need to validly split the first j elements of the array, or [a[0]\u2026a[j - 1]].", "Iterate over all possible j < i such that gcd(a[j], a[i - 1]) \u2260 1 and let dp[i] = min(dp[i], dp[j] + 1)."], "exampleTestcases": "[2,6,3,4,3]\n[3,5]\n[1,2,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int validSubarraySplit(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int validSubarraySplit(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validSubarraySplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validSubarraySplit(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int validSubarraySplit(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ValidSubarraySplit(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar validSubarraySplit = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validSubarraySplit(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function validSubarraySplit($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validSubarraySplit(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validSubarraySplit(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int validSubarraySplit(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validSubarraySplit(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef valid_subarray_split(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validSubarraySplit(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_subarray_split(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (valid-subarray-split nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec valid_subarray_split(Nums :: [integer()]) -> integer().\nvalid_subarray_split(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_subarray_split(nums :: [integer]) :: integer\n  def valid_subarray_split(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-split-into-subarrays-with-gcd-greater-than-one", "title": "Minimum Split Into Subarrays With GCD Greater Than One", "isPaidOnly": true}]}