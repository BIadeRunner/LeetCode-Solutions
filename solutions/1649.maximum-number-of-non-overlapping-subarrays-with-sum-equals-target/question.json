{"questionId": "1649", "acRate": 48.01963412074338, "difficulty": "Medium", "freqBar": 30.662018577204552, "frontendQuestionId": "1546", "paidOnly": false, "status": "ac", "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target", "content": "<p>Given an array <code>nums</code> and an integer <code>target</code>, return <em>the maximum number of <strong>non-empty</strong> <strong>non-overlapping</strong> subarrays such that the sum of values in each subarray is equal to</em> <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 non-overlapping subarrays [<strong>1,1</strong>,1,<strong>1,1</strong>] with sum equals to target(2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,5,1,4,2,-9], target = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Keep track of prefix sums to quickly look up what subarray that sums \"target\" can be formed at each step of scanning the input array.", "It can be proved that greedily forming valid subarrays as soon as one is found is optimal."], "exampleTestcases": "[1,1,1,1,1]\n2\n[-1,3,5,1,4,2,-9]\n6", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxNonOverlapping(vector<int>& nums, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxNonOverlapping(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxNonOverlapping(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxNonOverlapping(int* nums, int numsSize, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxNonOverlapping(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar maxNonOverlapping = function(nums, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxNonOverlapping(nums: number[], target: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function maxNonOverlapping($nums, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxNonOverlapping(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxNonOverlapping(nums: IntArray, target: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxNonOverlapping(List<int> nums, int target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxNonOverlapping(nums []int, target int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef max_non_overlapping(nums, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxNonOverlapping(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_non_overlapping(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-non-overlapping nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_non_overlapping(Nums :: [integer()], Target :: integer()) -> integer().\nmax_non_overlapping(Nums, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_non_overlapping(nums :: [integer], target :: integer) :: integer\n  def max_non_overlapping(nums, target) do\n    \n  end\nend"}], "similarQuestionList": []}