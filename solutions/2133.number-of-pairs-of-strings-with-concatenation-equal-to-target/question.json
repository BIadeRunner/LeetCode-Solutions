{"question_id": "2133", "problem_slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target", "problem_title": "Number of Pairs of Strings With Concatenation Equal to Target", "content": "Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.\n \nExample 1:\n\nInput: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"\nOutput: 4\nExplanation: Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\"\n\nExample 2:\n\nInput: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"\nOutput: 2\nExplanation: Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\"\n\nExample 3:\n\nInput: nums = [\"1\",\"1\",\"1\"], target = \"11\"\nOutput: 6\nExplanation: Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\"\n\n \nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i].length <= 100\n2 <= target.length <= 100\nnums[i] and target consist of digits.\nnums[i] and target do not have leading zeros.\n\n", "hints": ["Try to concatenate every two different strings from the list.", "Count the number of pairs with concatenation equals to target."], "exampleTestcases": "[\"777\",\"7\",\"77\",\"77\"]\n\"7777\"\n[\"123\",\"4\",\"12\",\"34\"]\n\"1234\"\n[\"1\",\"1\",\"1\"]\n\"11\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numOfPairs(vector<string>& nums, string target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numOfPairs(String[] nums, String target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numOfPairs(self, nums, target):\n        \"\"\"\n        :type nums: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numOfPairs(self, nums: List[str], target: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numOfPairs(char** nums, int numsSize, char* target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumOfPairs(string[] nums, string target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} nums\n * @param {string} target\n * @return {number}\n */\nvar numOfPairs = function(nums, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numOfPairs(nums: string[], target: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $nums\n     * @param String $target\n     * @return Integer\n     */\n    function numOfPairs($nums, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numOfPairs(_ nums: [String], _ target: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numOfPairs(nums: Array<String>, target: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numOfPairs(List<String> nums, String target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numOfPairs(nums []string, target string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} nums\n# @param {String} target\n# @return {Integer}\ndef num_of_pairs(nums, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numOfPairs(nums: Array[String], target: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_of_pairs(nums: Vec<String>, target: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-of-pairs nums target)\n  (-> (listof string?) string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_of_pairs(Nums :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\nnum_of_pairs(Nums, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_of_pairs(nums :: [String.t], target :: String.t) :: integer\n  def num_of_pairs(nums, target) do\n    \n  end\nend"}}}