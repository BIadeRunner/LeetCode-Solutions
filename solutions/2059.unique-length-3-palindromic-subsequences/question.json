{"question_id": "2059", "problem_slug": "unique-length-3-palindromic-subsequences", "problem_title": "Unique Length-3 Palindromic Subsequences", "content": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s.\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted once.\nA palindrome is a string that reads the same forwards and backwards.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\n\n \nExample 1:\n\nInput: s = \"aabca\"\nOutput: 3\nExplanation: The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")\n\nExample 2:\n\nInput: s = \"adc\"\nOutput: 0\nExplanation: There are no palindromic subsequences of length 3 in \"adc\".\n\nExample 3:\n\nInput: s = \"bbcbaba\"\nOutput: 4\nExplanation: The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")\n\n \nConstraints:\n\n3 <= s.length <= 105\ns consists of only lowercase English letters.\n\n", "hints": ["What is the maximum number of length-3 palindromic strings?", "How can we keep track of the characters that appeared to the left of a given position?"], "exampleTestcases": "\"aabca\"\n\"adc\"\n\"bbcbaba\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPalindromicSubsequence(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countPalindromicSubsequence(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countPalindromicSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countPalindromicSubsequence(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countPalindromicSubsequence(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountPalindromicSubsequence(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countPalindromicSubsequence = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countPalindromicSubsequence(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countPalindromicSubsequence($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countPalindromicSubsequence(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countPalindromicSubsequence(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countPalindromicSubsequence(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countPalindromicSubsequence(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_palindromic_subsequence(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countPalindromicSubsequence(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_palindromic_subsequence(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-palindromic-subsequence s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_palindromic_subsequence(S :: unicode:unicode_binary()) -> integer().\ncount_palindromic_subsequence(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_palindromic_subsequence(s :: String.t) :: integer\n  def count_palindromic_subsequence(s) do\n    \n  end\nend"}}}