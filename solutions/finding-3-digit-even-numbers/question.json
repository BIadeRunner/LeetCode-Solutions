{"questionId": "2215", "acRate": 61.672974488365575, "difficulty": "Easy", "freqBar": 46.20881681320492, "frontendQuestionId": "2094", "paidOnly": false, "status": "ac", "title": "Finding 3-Digit Even Numbers", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "finding-3-digit-even-numbers", "content": "<p>You are given an integer array <code>digits</code>, where each element is a digit. The array may contain duplicates.</p>\n\n<p>You need to find <strong>all</strong> the <strong>unique</strong> integers that follow the given requirements:</p>\n\n<ul>\n\t<li>The integer consists of the <strong>concatenation</strong> of <strong>three</strong> elements from <code>digits</code> in <strong>any</strong> arbitrary order.</li>\n\t<li>The integer does not have <strong>leading zeros</strong>.</li>\n\t<li>The integer is <strong>even</strong>.</li>\n</ul>\n\n<p>For example, if the given <code>digits</code> were <code>[1, 2, 3]</code>, integers <code>132</code> and <code>312</code> follow the requirements.</p>\n\n<p>Return <em>a <strong>sorted</strong> array of the unique integers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [2,1,3,0]\n<strong>Output:</strong> [102,120,130,132,210,230,302,310,312,320]\n<strong>Explanation:</strong> All the possible integers that follow the requirements are in the output array. \nNotice that there are no <strong>odd</strong> integers or integers with <strong>leading zeros</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [2,2,8,8,2]\n<strong>Output:</strong> [222,228,282,288,822,828,882]\n<strong>Explanation:</strong> The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [3,7,5]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> No <strong>even</strong> integers can be formed using the given digits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n</ul>\n", "hints": ["The range of possible answers includes all even numbers between 100 and 999 inclusive. Could you check each possible answer to see if it could be formed from the digits in the array?"], "exampleTestcases": "[2,1,3,0]\n[2,2,8,8,2]\n[3,7,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findEvenNumbers(vector<int>& digits) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findEvenNumbers(int[] digits) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findEvenNumbers(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findEvenNumbers(int* digits, int digitsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindEvenNumbers(int[] digits) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar findEvenNumbers = function(digits) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findEvenNumbers(digits: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function findEvenNumbers($digits) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findEvenNumbers(_ digits: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findEvenNumbers(digits: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> findEvenNumbers(List<int> digits) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findEvenNumbers(digits []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef find_even_numbers(digits)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findEvenNumbers(digits: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_even_numbers(digits: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-even-numbers digits)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_even_numbers(Digits :: [integer()]) -> [integer()].\nfind_even_numbers(Digits) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_even_numbers(digits :: [integer]) :: [integer]\n  def find_even_numbers(digits) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "find-numbers-with-even-number-of-digits", "title": "Find Numbers with Even Number of Digits", "isPaidOnly": false}]}