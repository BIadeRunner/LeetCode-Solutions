{"question_id": "519", "problem_slug": "widest-pair-of-indices-with-equal-range-sum", "problem_title": "Widest Pair of Indices With Equal Range Sum", "content": "You are given two 0-indexed binary arrays nums1 and nums2. Find the widest pair of indices (i, j) such that i <= j and nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j].\nThe widest pair of indices is the pair with the largest distance between i and j. The distance between a pair of indices is defined as j - i + 1.\nReturn the distance of the widest pair of indices. If no pair of indices meets the conditions, return 0.\n \nExample 1:\n\nInput: nums1 = [1,1,0,1], nums2 = [0,1,1,0]\nOutput: 3\nExplanation:\nIf i = 1 and j = 3:\nnums1[1] + nums1[2] + nums1[3] = 1 + 0 + 1 = 2.\nnums2[1] + nums2[2] + nums2[3] = 1 + 1 + 0 = 2.\nThe distance between i and j is j - i + 1 = 3 - 1 + 1 = 3.\n\nExample 2:\n\nInput: nums1 = [0,1], nums2 = [1,1]\nOutput: 1\nExplanation:\nIf i = 1 and j = 1:\nnums1[1] = 1.\nnums2[1] = 1.\nThe distance between i and j is j - i + 1 = 1 - 1 + 1 = 1.\n\nExample 3:\n\nInput: nums1 = [0], nums2 = [1]\nOutput: 0\nExplanation:\nThere are no pairs of indices that meet the requirements.\n\n \nConstraints:\n\nn == nums1.length == nums2.length\n1 <= n <= 105\nnums1[i] is either 0 or 1.\nnums2[i] is either 0 or 1.\n\n", "hints": ["Keep prefix sums of both arrays.", "Can the difference between the prefix sums at an index help us?", "What happens if the difference between the two prefix sums at an index a is x, and x again at a different index b?", "This means that the sum of nums1 from index a + 1 to index b is equal to the sum of nums2 from index a + 1 to index b."], "exampleTestcases": "[1,1,0,1]\n[0,1,1,0]\n[0,1]\n[1,1]\n[0]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int widestPairOfIndices(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int widestPairOfIndices(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def widestPairOfIndices(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def widestPairOfIndices(self, nums1: List[int], nums2: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int widestPairOfIndices(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WidestPairOfIndices(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar widestPairOfIndices = function(nums1, nums2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function widestPairOfIndices(nums1: number[], nums2: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function widestPairOfIndices($nums1, $nums2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func widestPairOfIndices(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun widestPairOfIndices(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int widestPairOfIndices(List<int> nums1, List<int> nums2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func widestPairOfIndices(nums1 []int, nums2 []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef widest_pair_of_indices(nums1, nums2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def widestPairOfIndices(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn widest_pair_of_indices(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (widest-pair-of-indices nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec widest_pair_of_indices(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nwidest_pair_of_indices(Nums1, Nums2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec widest_pair_of_indices(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def widest_pair_of_indices(nums1, nums2) do\n    \n  end\nend"}}}