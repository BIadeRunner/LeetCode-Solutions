{"question_id": "1385", "problem_slug": "number-of-ways-to-build-house-of-cards", "problem_title": "Number of Ways to Build House of Cards", "content": "You are given an integer n representing the number of playing cards you have. A house of cards meets the following conditions:\n\nA house of cards consists of one or more rows of triangles and horizontal cards.\nTriangles are created by leaning two cards against each other.\nOne card must be placed horizontally between all adjacent triangles in a row.\nAny triangle on a row higher than the first must be placed on a horizontal card from the previous row.\nEach triangle is placed in the leftmost available spot in the row.\n\nReturn the number of distinct house of cards you can build using all n cards. Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.\n \nExample 1:\n\n\nInput: n = 16\nOutput: 2\nExplanation: The two valid houses of cards are shown.\nThe third house of cards in the diagram is not valid because the rightmost triangle on the top row is not placed on top of a horizontal card.\n\nExample 2:\n\n\nInput: n = 2\nOutput: 1\nExplanation: The one valid house of cards is shown.\n\nExample 3:\n\n\nInput: n = 4\nOutput: 0\nExplanation: The three houses of cards in the diagram are not valid.\nThe first house of cards needs a horizontal card placed between the two triangles.\nThe second house of cards uses 5 cards.\nThe third house of cards uses 2 cards.\n\n \nConstraints:\n\n1 <= n <= 500\n\n", "hints": ["If a row has k triangles, how many cards does it take to build that row? It takes 3 * k - 1 cards.", "If you still have i cards left, and on the previous row there were k triangles, what are the possible ways to build the current row? You can start at 1 triangle and continue adding more until you run out of cards or reach k - 1 triangles."], "exampleTestcases": "16\n2\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int houseOfCards(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int houseOfCards(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def houseOfCards(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def houseOfCards(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int houseOfCards(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int HouseOfCards(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar houseOfCards = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function houseOfCards(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function houseOfCards($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func houseOfCards(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun houseOfCards(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int houseOfCards(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func houseOfCards(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef house_of_cards(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def houseOfCards(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn house_of_cards(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (house-of-cards n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec house_of_cards(N :: integer()) -> integer().\nhouse_of_cards(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec house_of_cards(n :: integer) :: integer\n  def house_of_cards(n) do\n    \n  end\nend"}}}