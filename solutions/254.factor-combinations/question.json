{"question_id": "254", "problem_slug": "factor-combinations", "problem_title": "Factor Combinations", "content": "Numbers can be regarded as the product of their factors.\n\nFor example, 8 = 2 x 2 x 2 = 2 x 4.\n\nGiven an integer n, return all possible combinations of its factors. You may return the answer in any order.\nNote that the factors should be in the range [2, n - 1].\n \nExample 1:\n\nInput: n = 1\nOutput: []\n\nExample 2:\n\nInput: n = 12\nOutput: [[2,6],[3,4],[2,2,3]]\n\nExample 3:\n\nInput: n = 37\nOutput: []\n\n \nConstraints:\n\n1 <= n <= 107\n\n", "hints": [], "exampleTestcases": "1\n12\n37", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> getFactors(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> getFactors(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getFactors(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getFactors(self, n: int) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getFactors(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> GetFactors(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar getFactors = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getFactors(n: number): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function getFactors($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getFactors(_ n: Int) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getFactors(n: Int): List<List<Int>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> getFactors(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getFactors(n int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[][]}\ndef get_factors(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getFactors(n: Int): List[List[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_factors(n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-factors n)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_factors(N :: integer()) -> [[integer()]].\nget_factors(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_factors(n :: integer) :: [[integer]]\n  def get_factors(n) do\n    \n  end\nend"}}}