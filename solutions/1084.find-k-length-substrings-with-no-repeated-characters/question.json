{"question_id": "1084", "problem_slug": "find-k-length-substrings-with-no-repeated-characters", "problem_title": "Find K-Length Substrings With No Repeated Characters", "content": "Given a string s and an integer k, return the number of substrings in s of length k with no repeated characters.\n \nExample 1:\n\nInput: s = \"havefunonleetcode\", k = 5\nOutput: 6\nExplanation: There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.\n\nExample 2:\n\nInput: s = \"home\", k = 5\nOutput: 0\nExplanation: Notice k can be larger than the length of s. In this case, it is not possible to find any substring.\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n1 <= k <= 104\n\n", "hints": ["How to check efficiently each K-length substring?", "First store the first leftmost K-length substring in a hashTable or array of frequencies.", "Then iterate through the rest of characters and erase the first element and add the next element from the right. If in the hashTable we have K different character we add 1 to the counter. After that return as answer the counter."], "exampleTestcases": "\"havefunonleetcode\"\n5\n\"home\"\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numKLenSubstrNoRepeats(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numKLenSubstrNoRepeats(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numKLenSubstrNoRepeats(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numKLenSubstrNoRepeats(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumKLenSubstrNoRepeats(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar numKLenSubstrNoRepeats = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numKLenSubstrNoRepeats(s: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function numKLenSubstrNoRepeats($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numKLenSubstrNoRepeats(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numKLenSubstrNoRepeats(s: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numKLenSubstrNoRepeats(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numKLenSubstrNoRepeats(s string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef num_k_len_substr_no_repeats(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numKLenSubstrNoRepeats(s: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_k_len_substr_no_repeats(s: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-k-len-substr-no-repeats s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_k_len_substr_no_repeats(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nnum_k_len_substr_no_repeats(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_k_len_substr_no_repeats(s :: String.t, k :: integer) :: integer\n  def num_k_len_substr_no_repeats(s, k) do\n    \n  end\nend"}}}