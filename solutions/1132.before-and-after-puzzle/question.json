{"questionId": "1132", "acRate": 46.097687343978144, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1181", "paidOnly": true, "status": "ac", "title": "Before and After Puzzle", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "before-and-after-puzzle", "content": "<p>Given a list of <code>phrases</code>, generate a list of&nbsp;Before and After puzzles.</p>\n\n<p>A <em>phrase</em> is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are&nbsp;no consecutive spaces&nbsp;in a phrase.</p>\n\n<p><em>Before and After&nbsp;puzzles</em> are phrases that are formed by merging&nbsp;two phrases where the <strong>last&nbsp;word of the first&nbsp;phrase</strong> is the same as the <strong>first word of the second phrase</strong>.</p>\n\n<p>Return the&nbsp;Before and After&nbsp;puzzles that can be formed by every two phrases&nbsp;<code>phrases[i]</code>&nbsp;and&nbsp;<code>phrases[j]</code>&nbsp;where&nbsp;<code>i != j</code>. Note that the order of matching two phrases matters, we want to consider both orders.</p>\n\n<p>You should return a list of&nbsp;<strong>distinct</strong>&nbsp;strings <strong>sorted&nbsp;lexicographically</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> phrases = [&quot;writing code&quot;,&quot;code rocks&quot;]\n<strong>Output:</strong> [&quot;writing code rocks&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> phrases = [&quot;mission statement&quot;,\n                  &quot;a quick bite to eat&quot;,\n&nbsp;                 &quot;a chip off the old block&quot;,\n&nbsp;                 &quot;chocolate bar&quot;,\n&nbsp;                 &quot;mission impossible&quot;,\n&nbsp;                 &quot;a man on a mission&quot;,\n&nbsp;                 &quot;block party&quot;,\n&nbsp;                 &quot;eat my words&quot;,\n&nbsp;                 &quot;bar of soap&quot;]\n<strong>Output:</strong> [&quot;a chip off the old block party&quot;,\n&nbsp;        &quot;a man on a mission impossible&quot;,\n&nbsp;        &quot;a man on a mission statement&quot;,\n&nbsp;        &quot;a quick bite to eat my words&quot;,\n         &quot;chocolate bar of soap&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> phrases = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;]\n<strong>Output:</strong> [&quot;a&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= phrases.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= phrases[i].length &lt;= 100</code></li>\n</ul>\n", "hints": ["What if you check every pair of strings (bruteforce)?", "For every two strings, check if they can form a puzzle by comparing their last and first words."], "exampleTestcases": "[\"writing code\",\"code rocks\"]\n[\"mission statement\",\"a quick bite to eat\",\"a chip off the old block\",\"chocolate bar\",\"mission impossible\",\"a man on a mission\",\"block party\",\"eat my words\",\"bar of soap\"]\n[\"a\",\"b\",\"a\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> beforeAndAfterPuzzles(vector<string>& phrases) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> beforeAndAfterPuzzles(String[] phrases) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def beforeAndAfterPuzzles(self, phrases):\n        \"\"\"\n        :type phrases: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def beforeAndAfterPuzzles(self, phrases: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** beforeAndAfterPuzzles(char** phrases, int phrasesSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> BeforeAndAfterPuzzles(string[] phrases) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} phrases\n * @return {string[]}\n */\nvar beforeAndAfterPuzzles = function(phrases) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function beforeAndAfterPuzzles(phrases: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $phrases\n     * @return String[]\n     */\n    function beforeAndAfterPuzzles($phrases) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func beforeAndAfterPuzzles(_ phrases: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun beforeAndAfterPuzzles(phrases: Array<String>): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> beforeAndAfterPuzzles(List<String> phrases) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func beforeAndAfterPuzzles(phrases []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} phrases\n# @return {String[]}\ndef before_and_after_puzzles(phrases)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def beforeAndAfterPuzzles(phrases: Array[String]): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn before_and_after_puzzles(phrases: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (before-and-after-puzzles phrases)\n  (-> (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec before_and_after_puzzles(Phrases :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nbefore_and_after_puzzles(Phrases) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec before_and_after_puzzles(phrases :: [String.t]) :: [String.t]\n  def before_and_after_puzzles(phrases) do\n    \n  end\nend"}], "similarQuestionList": []}