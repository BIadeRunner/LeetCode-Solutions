{"question_id": "1915", "problem_slug": "check-if-one-string-swap-can-make-strings-equal", "problem_title": "Check if One String Swap Can Make Strings Equal", "content": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.\n \nExample 1:\n\nInput: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".\n\nExample 2:\n\nInput: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.\n\nExample 3:\n\nInput: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.\n\n \nConstraints:\n\n1 <= s1.length, s2.length <= 100\ns1.length == s2.length\ns1 and s2 consist of only lowercase English letters.\n\n", "hints": ["The answer is false if the number of nonequal positions in the strings is not equal to 0 or 2.", "Check that these positions have the same set of characters."], "exampleTestcases": "\"bank\"\n\"kanb\"\n\"attack\"\n\"defend\"\n\"kelb\"\n\"kelb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areAlmostEqual(string s1, string s2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def areAlmostEqual(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool areAlmostEqual(char* s1, char* s2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool AreAlmostEqual(string s1, string s2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar areAlmostEqual = function(s1, s2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function areAlmostEqual(s1: string, s2: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function areAlmostEqual($s1, $s2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func areAlmostEqual(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun areAlmostEqual(s1: String, s2: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool areAlmostEqual(String s1, String s2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func areAlmostEqual(s1 string, s2 string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef are_almost_equal(s1, s2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def areAlmostEqual(s1: String, s2: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn are_almost_equal(s1: String, s2: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (are-almost-equal s1 s2)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec are_almost_equal(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\nare_almost_equal(S1, S2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_almost_equal(s1 :: String.t, s2 :: String.t) :: boolean\n  def are_almost_equal(s1, s2) do\n    \n  end\nend"}}}