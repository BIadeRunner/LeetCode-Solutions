{"questionId": "1915", "acRate": 45.94602036922665, "difficulty": "Easy", "freqBar": 54.08617636579083, "frontendQuestionId": "1790", "paidOnly": false, "status": "ac", "title": "Check if One String Swap Can Make Strings Equal", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "check-if-one-string-swap-can-make-strings-equal", "content": "<p>You are given two strings <code>s1</code> and <code>s2</code> of equal length. A <strong>string swap</strong> is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.</p>\n\n<p>Return <code>true</code> <em>if it is possible to make both strings equal by performing <strong>at most one string swap </strong>on <strong>exactly one</strong> of the strings. </em>Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;bank&quot;, s2 = &quot;kanb&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> For example, swap the first character with the last character of s2 to make &quot;bank&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;attack&quot;, s2 = &quot;defend&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to make them equal with one string swap.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;kelb&quot;, s2 = &quot;kelb&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two strings are already equal, so no string swap operation is required.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of only lowercase English letters.</li>\n</ul>\n", "hints": ["The answer is false if the number of nonequal positions in the strings is not equal to 0 or 2.", "Check that these positions have the same set of characters."], "exampleTestcases": "\"bank\"\n\"kanb\"\n\"attack\"\n\"defend\"\n\"kelb\"\n\"kelb\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areAlmostEqual(string s1, string s2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def areAlmostEqual(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool areAlmostEqual(char* s1, char* s2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool AreAlmostEqual(string s1, string s2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar areAlmostEqual = function(s1, s2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function areAlmostEqual(s1: string, s2: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function areAlmostEqual($s1, $s2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func areAlmostEqual(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun areAlmostEqual(s1: String, s2: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool areAlmostEqual(String s1, String s2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func areAlmostEqual(s1 string, s2 string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef are_almost_equal(s1, s2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def areAlmostEqual(s1: String, s2: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn are_almost_equal(s1: String, s2: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (are-almost-equal s1 s2)\n  (-> string? string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec are_almost_equal(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\nare_almost_equal(S1, S2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_almost_equal(s1 :: String.t, s2 :: String.t) :: boolean\n  def are_almost_equal(s1, s2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "buddy-strings", "title": "Buddy Strings", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "make-number-of-distinct-characters-equal", "title": "Make Number of Distinct Characters Equal", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-almost-equal-pairs-i", "title": "Count Almost Equal Pairs I", "isPaidOnly": false}]}