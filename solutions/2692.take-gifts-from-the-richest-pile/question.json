{"question_id": "2692", "problem_slug": "take-gifts-from-the-richest-pile", "problem_title": "Take Gifts From the Richest Pile", "content": "You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:\n\nChoose the pile with the maximum number of gifts.\nIf there is more than one pile with the maximum number of gifts, choose any.\nLeave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.\n\nReturn the number of gifts remaining after k seconds.\n \nExample 1:\n\nInput: gifts = [25,64,9,4,100], k = 4\nOutput: 29\nExplanation: \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n\nExample 2:\n\nInput: gifts = [1,1,1,1], k = 4\nOutput: 4\nExplanation: \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4.\n\n \nConstraints:\n\n1 <= gifts.length <= 103\n1 <= gifts[i] <= 109\n1 <= k <= 103\n\n", "hints": ["How can you keep track of the largest gifts in the array", "What is an efficient way to find the square root of a number?", "Can you keep adding up the values of the gifts while ensuring they are in a certain order?", "Can we use a priority queue or heap here?"], "exampleTestcases": "[25,64,9,4,100]\n4\n[1,1,1,1]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long pickGifts(vector<int>& gifts, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long pickGifts(int[] gifts, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def pickGifts(self, gifts, k):\n        \"\"\"\n        :type gifts: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long pickGifts(int* gifts, int giftsSize, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long PickGifts(int[] gifts, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} gifts\n * @param {number} k\n * @return {number}\n */\nvar pickGifts = function(gifts, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function pickGifts(gifts: number[], k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $gifts\n     * @param Integer $k\n     * @return Integer\n     */\n    function pickGifts($gifts, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func pickGifts(_ gifts: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun pickGifts(gifts: IntArray, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int pickGifts(List<int> gifts, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func pickGifts(gifts []int, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} gifts\n# @param {Integer} k\n# @return {Integer}\ndef pick_gifts(gifts, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def pickGifts(gifts: Array[Int], k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn pick_gifts(gifts: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (pick-gifts gifts k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec pick_gifts(Gifts :: [integer()], K :: integer()) -> integer().\npick_gifts(Gifts, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec pick_gifts(gifts :: [integer], k :: integer) :: integer\n  def pick_gifts(gifts, k) do\n    \n  end\nend"}}}