{"questionId": "2692", "acRate": 67.41897696212416, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2558", "paidOnly": false, "status": "ac", "title": "Take Gifts From the Richest Pile", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "take-gifts-from-the-richest-pile", "content": "<p>You are given an integer array <code>gifts</code> denoting the number of gifts in various piles. Every second, you do the following:</p>\n\n<ul>\n\t<li>Choose the pile with the maximum number of gifts.</li>\n\t<li>If there is more than one pile with the maximum number of gifts, choose any.</li>\n\t<li>Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.</li>\n</ul>\n\n<p>Return <em>the number of gifts remaining after </em><code>k</code><em> seconds.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> gifts = [25,64,9,4,100], k = 4\n<strong>Output:</strong> 29\n<strong>Explanation:</strong> \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> gifts = [1,1,1,1], k = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can&#39;t take any pile with you. \nSo, the total gifts remaining are 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= gifts.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= gifts[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li>\n</ul>\n", "hints": ["How can you keep track of the largest gifts in the array", "What is an efficient way to find the square root of a number?", "Can you keep adding up the values of the gifts while ensuring they are in a certain order?", "Can we use a priority queue or heap here?"], "exampleTestcases": "[25,64,9,4,100]\n4\n[1,1,1,1]\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long pickGifts(vector<int>& gifts, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long pickGifts(int[] gifts, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pickGifts(self, gifts, k):\n        \"\"\"\n        :type gifts: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long pickGifts(int* gifts, int giftsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long PickGifts(int[] gifts, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} gifts\n * @param {number} k\n * @return {number}\n */\nvar pickGifts = function(gifts, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pickGifts(gifts: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $gifts\n     * @param Integer $k\n     * @return Integer\n     */\n    function pickGifts($gifts, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func pickGifts(_ gifts: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pickGifts(gifts: IntArray, k: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int pickGifts(List<int> gifts, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func pickGifts(gifts []int, k int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} gifts\n# @param {Integer} k\n# @return {Integer}\ndef pick_gifts(gifts, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pickGifts(gifts: Array[Int], k: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn pick_gifts(gifts: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (pick-gifts gifts k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec pick_gifts(Gifts :: [integer()], K :: integer()) -> integer().\npick_gifts(Gifts, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec pick_gifts(gifts :: [integer], k :: integer) :: integer\n  def pick_gifts(gifts, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "remove-stones-to-minimize-the-total", "title": "Remove Stones to Minimize the Total", "isPaidOnly": false}]}