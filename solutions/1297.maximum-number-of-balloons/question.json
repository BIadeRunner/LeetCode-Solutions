{"question_id": "1297", "problem_slug": "maximum-number-of-balloons", "problem_title": "Maximum Number of Balloons", "content": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.\n \nExample 1:\n\n\nInput: text = \"nlaebolko\"\nOutput: 1\n\nExample 2:\n\n\nInput: text = \"loonbalxballpoon\"\nOutput: 2\n\nExample 3:\n\nInput: text = \"leetcode\"\nOutput: 0\n\n \nConstraints:\n\n1 <= text.length <= 104\ntext consists of lower case English letters only.\n\n \nNote: This question is the same as  2287: Rearrange Characters to Make Target String.\n", "hints": ["Count the frequency of letters in the given string.", "Find the letter than can make the minimum number of instances of the word \"balloon\"."], "exampleTestcases": "\"nlaebolko\"\n\"loonbalxballpoon\"\n\"leetcode\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxNumberOfBalloons(string text) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxNumberOfBalloons(String text) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxNumberOfBalloons(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxNumberOfBalloons(char* text) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxNumberOfBalloons(string text) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {number}\n */\nvar maxNumberOfBalloons = function(text) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxNumberOfBalloons(text: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return Integer\n     */\n    function maxNumberOfBalloons($text) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxNumberOfBalloons(_ text: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxNumberOfBalloons(text: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxNumberOfBalloons(String text) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxNumberOfBalloons(text string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} text\n# @return {Integer}\ndef max_number_of_balloons(text)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxNumberOfBalloons(text: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_number_of_balloons(text: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-number-of-balloons text)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_number_of_balloons(Text :: unicode:unicode_binary()) -> integer().\nmax_number_of_balloons(Text) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_number_of_balloons(text :: String.t) :: integer\n  def max_number_of_balloons(text) do\n    \n  end\nend"}}}