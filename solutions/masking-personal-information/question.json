{"questionId": "858", "acRate": 49.79876893939394, "difficulty": "Medium", "freqBar": 48.369177010116445, "frontendQuestionId": "831", "paidOnly": false, "status": "ac", "title": "Masking Personal Information", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "masking-personal-information", "content": "<p>You are given a personal information string <code>s</code>, representing either an <strong>email address</strong> or a <strong>phone number</strong>. Return <em>the <strong>masked</strong> personal information using the below rules</em>.</p>\n\n<p><u><strong>Email address:</strong></u></p>\n\n<p>An email address is:</p>\n\n<ul>\n\t<li>A <strong>name</strong> consisting of uppercase and lowercase English letters, followed by</li>\n\t<li>The <code>&#39;@&#39;</code> symbol, followed by</li>\n\t<li>The <strong>domain</strong> consisting of uppercase and lowercase English letters with a dot <code>&#39;.&#39;</code> somewhere in the middle (not the first or last character).</li>\n</ul>\n\n<p>To mask an email:</p>\n\n<ul>\n\t<li>The uppercase letters in the <strong>name</strong> and <strong>domain</strong> must be converted to lowercase letters.</li>\n\t<li>The middle letters of the <strong>name</strong> (i.e., all but the first and last letters) must be replaced by 5 asterisks <code>&quot;*****&quot;</code>.</li>\n</ul>\n\n<p><u><strong>Phone number:</strong></u></p>\n\n<p>A phone number is formatted as follows:</p>\n\n<ul>\n\t<li>The phone number contains 10-13 digits.</li>\n\t<li>The last 10 digits make up the <strong>local number</strong>.</li>\n\t<li>The remaining 0-3 digits, in the beginning, make up the <strong>country code</strong>.</li>\n\t<li><strong>Separation characters</strong> from the set <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39; &#39;}</code> separate the above digits in some way.</li>\n</ul>\n\n<p>To mask a phone number:</p>\n\n<ul>\n\t<li>Remove all <strong>separation characters</strong>.</li>\n\t<li>The masked phone number should have the form:\n\t<ul>\n\t\t<li><code>&quot;***-***-XXXX&quot;</code> if the country code has 0 digits.</li>\n\t\t<li><code>&quot;+*-***-***-XXXX&quot;</code> if the country code has 1 digit.</li>\n\t\t<li><code>&quot;+**-***-***-XXXX&quot;</code> if the country code has 2 digits.</li>\n\t\t<li><code>&quot;+***-***-***-XXXX&quot;</code> if the country code has 3 digits.</li>\n\t</ul>\n\t</li>\n\t<li><code>&quot;XXXX&quot;</code> is the last 4 digits of the <strong>local number</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LeetCode@LeetCode.com&quot;\n<strong>Output:</strong> &quot;l*****e@leetcode.com&quot;\n<strong>Explanation:</strong> s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AB@qq.com&quot;\n<strong>Output:</strong> &quot;a*****b@qq.com&quot;\n<strong>Explanation:</strong> s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though &quot;ab&quot; is 2 characters, it still must have 5 asterisks in the middle.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1(234)567-890&quot;\n<strong>Output:</strong> &quot;***-***-7890&quot;\n<strong>Explanation:</strong> s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is &quot;***-***-7890&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s</code> is either a <strong>valid</strong> email or a phone number.</li>\n\t<li>If <code>s</code> is an email:\n\t<ul>\n\t\t<li><code>8 &lt;= s.length &lt;= 40</code></li>\n\t\t<li><code>s</code> consists of uppercase and lowercase English letters and exactly one <code>&#39;@&#39;</code> symbol and <code>&#39;.&#39;</code> symbol.</li>\n\t</ul>\n\t</li>\n\t<li>If <code>s</code> is a phone number:\n\t<ul>\n\t\t<li><code>10 &lt;= s.length &lt;= 20</code></li>\n\t\t<li><code>s</code> consists of digits, spaces, and the symbols <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;+&#39;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"LeetCode@LeetCode.com\"\n\"AB@qq.com\"\n\"1(234)567-890\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string maskPII(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String maskPII(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maskPII(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maskPII(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* maskPII(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MaskPII(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar maskPII = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maskPII(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function maskPII($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maskPII(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maskPII(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String maskPII(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maskPII(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef mask_pii(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maskPII(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mask_pii(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (mask-pii s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec mask_pii(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmask_pii(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec mask_pii(s :: String.t) :: String.t\n  def mask_pii(s) do\n    \n  end\nend"}], "similarQuestionList": []}