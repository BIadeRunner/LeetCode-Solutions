{"questionId": "359", "acRate": 76.14995933832988, "difficulty": "Easy", "freqBar": 88.91275924332331, "frontendQuestionId": "359", "paidOnly": true, "status": "ac", "title": "Logger Rate Limiter", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Data Stream", "id": "VG9waWNUYWdOb2RlOjYxMDYz", "slug": "data-stream"}], "titleSlug": "logger-rate-limiter", "content": "<p>Design a logger system that receives a stream of messages along with their timestamps. Each <strong>unique</strong> message should only be printed <strong>at most every 10 seconds</strong> (i.e. a message printed at timestamp <code>t</code> will prevent other identical messages from being printed until timestamp <code>t + 10</code>).</p>\n\n<p>All messages will come in chronological order. Several messages may arrive at the same timestamp.</p>\n\n<p>Implement the <code>Logger</code> class:</p>\n\n<ul>\n\t<li><code>Logger()</code> Initializes the <code>logger</code> object.</li>\n\t<li><code>bool shouldPrintMessage(int timestamp, string message)</code> Returns <code>true</code> if the <code>message</code> should be printed in the given <code>timestamp</code>, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Logger&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;]\n[[], [1, &quot;foo&quot;], [2, &quot;bar&quot;], [3, &quot;foo&quot;], [8, &quot;bar&quot;], [10, &quot;foo&quot;], [11, &quot;foo&quot;]]\n<strong>Output</strong>\n[null, true, true, false, false, false, true]\n\n<strong>Explanation</strong>\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, &quot;foo&quot;);  // return true, next allowed timestamp for &quot;foo&quot; is 1 + 10 = 11\nlogger.shouldPrintMessage(2, &quot;bar&quot;);  // return true, next allowed timestamp for &quot;bar&quot; is 2 + 10 = 12\nlogger.shouldPrintMessage(3, &quot;foo&quot;);  // 3 &lt; 11, return false\nlogger.shouldPrintMessage(8, &quot;bar&quot;);  // 8 &lt; 12, return false\nlogger.shouldPrintMessage(10, &quot;foo&quot;); // 10 &lt; 11, return false\nlogger.shouldPrintMessage(11, &quot;foo&quot;); // 11 &gt;= 11, return true, next allowed timestamp for &quot;foo&quot; is 11 + 10 = 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>Every <code>timestamp</code> will be passed in non-decreasing order (chronological order).</li>\n\t<li><code>1 &lt;= message.length &lt;= 30</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>shouldPrintMessage</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"Logger\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\"]\n[[],[1,\"foo\"],[2,\"bar\"],[3,\"foo\"],[8,\"bar\"],[10,\"foo\"],[11,\"foo\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Logger {\npublic:\n    Logger() {\n        \n    }\n    \n    bool shouldPrintMessage(int timestamp, string message) {\n        \n    }\n};\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger* obj = new Logger();\n * bool param_1 = obj->shouldPrintMessage(timestamp,message);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class Logger {\n\n    public Logger() {\n        \n    }\n    \n    public boolean shouldPrintMessage(int timestamp, String message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger obj = new Logger();\n * boolean param_1 = obj.shouldPrintMessage(timestamp,message);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class Logger(object):\n\n    def __init__(self):\n        \n\n    def shouldPrintMessage(self, timestamp, message):\n        \"\"\"\n        :type timestamp: int\n        :type message: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)"}, {"lang": "Python3", "langSlug": "python3", "code": "class Logger:\n\n    def __init__(self):\n        \n\n    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:\n        \n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Logger;\n\n\nLogger* loggerCreate() {\n    \n}\n\nbool loggerShouldPrintMessage(Logger* obj, int timestamp, char* message) {\n    \n}\n\nvoid loggerFree(Logger* obj) {\n    \n}\n\n/**\n * Your Logger struct will be instantiated and called as such:\n * Logger* obj = loggerCreate();\n * bool param_1 = loggerShouldPrintMessage(obj, timestamp, message);\n \n * loggerFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Logger {\n\n    public Logger() {\n        \n    }\n    \n    public bool ShouldPrintMessage(int timestamp, string message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger obj = new Logger();\n * bool param_1 = obj.ShouldPrintMessage(timestamp,message);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar Logger = function() {\n    \n};\n\n/** \n * @param {number} timestamp \n * @param {string} message\n * @return {boolean}\n */\nLogger.prototype.shouldPrintMessage = function(timestamp, message) {\n    \n};\n\n/** \n * Your Logger object will be instantiated and called as such:\n * var obj = new Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Logger {\n    constructor() {\n        \n    }\n\n    shouldPrintMessage(timestamp: number, message: string): boolean {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * var obj = new Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class Logger {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $timestamp\n     * @param String $message\n     * @return Boolean\n     */\n    function shouldPrintMessage($timestamp, $message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * $obj = Logger();\n * $ret_1 = $obj->shouldPrintMessage($timestamp, $message);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Logger {\n\n    init() {\n        \n    }\n    \n    func shouldPrintMessage(_ timestamp: Int, _ message: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * let obj = Logger()\n * let ret_1: Bool = obj.shouldPrintMessage(timestamp, message)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Logger() {\n\n    fun shouldPrintMessage(timestamp: Int, message: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * var obj = Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class Logger {\n\n  Logger() {\n    \n  }\n  \n  bool shouldPrintMessage(int timestamp, String message) {\n    \n  }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger obj = Logger();\n * bool param1 = obj.shouldPrintMessage(timestamp,message);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type Logger struct {\n    \n}\n\n\nfunc Constructor() Logger {\n    \n}\n\n\nfunc (this *Logger) ShouldPrintMessage(timestamp int, message string) bool {\n    \n}\n\n\n/**\n * Your Logger object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.ShouldPrintMessage(timestamp,message);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Logger\n    def initialize()\n        \n    end\n\n\n=begin\n    :type timestamp: Integer\n    :type message: String\n    :rtype: Boolean\n=end\n    def should_print_message(timestamp, message)\n        \n    end\n\n\nend\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger.new()\n# param_1 = obj.should_print_message(timestamp, message)"}, {"lang": "Scala", "langSlug": "scala", "code": "class Logger() {\n\n    def shouldPrintMessage(timestamp: Int, message: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * val obj = new Logger()\n * val param_1 = obj.shouldPrintMessage(timestamp,message)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Logger {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Logger {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn should_print_message(&self, timestamp: i32, message: String) -> bool {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * let obj = Logger::new();\n * let ret_1: bool = obj.should_print_message(timestamp, message);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define logger%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; should-print-message : exact-integer? string? -> boolean?\n    (define/public (should-print-message timestamp message)\n      )))\n\n;; Your logger% object will be instantiated and called as such:\n;; (define obj (new logger%))\n;; (define param_1 (send obj should-print-message timestamp message))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec logger_init_() -> any().\nlogger_init_() ->\n  .\n\n-spec logger_should_print_message(Timestamp :: integer(), Message :: unicode:unicode_binary()) -> boolean().\nlogger_should_print_message(Timestamp, Message) ->\n  .\n\n\n%% Your functions will be called as such:\n%% logger_init_(),\n%% Param_1 = logger_should_print_message(Timestamp, Message),\n\n%% logger_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Logger do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec should_print_message(timestamp :: integer, message :: String.t) :: boolean\n  def should_print_message(timestamp, message) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Logger.init_()\n# param_1 = Logger.should_print_message(timestamp, message)\n\n# Logger.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "design-hit-counter", "title": "Design Hit Counter", "isPaidOnly": true}]}