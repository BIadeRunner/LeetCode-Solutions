{"question_id": "2865", "problem_slug": "find-shortest-path-with-k-hops", "problem_title": "Find Shortest Path with K Hops", "content": "You are given a positive integer n which is the number of nodes of a 0-indexed undirected weighted connected graph and a 0-indexed 2D array edges where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi.\nYou are also given two nodes s and d, and a positive integer k, your task is to find the shortest path from s to d, but you can hop over at most k edges. In other words, make the weight of at most k edges 0 and then find the shortest path from s to d.\nReturn the length of the shortest path from s to d with the given condition.\n \nExample 1:\n\nInput: n = 4, edges = [[0,1,4],[0,2,2],[2,3,6]], s = 1, d = 3, k = 2\nOutput: 2\nExplanation: In this example there is only one path from node 1 (the green node) to node 3 (the red node), which is (1->0->2->3) and the length of it is 4 + 2 + 6 = 12. Now we can make weight of two edges 0, we make weight of the blue edges 0, then we have 0 + 2 + 0 = 2. It can be shown that 2 is the minimum length of a path we can achieve with the given condition.\n\n\nExample 2:\n\nInput: n = 7, edges = [[3,1,9],[3,2,4],[4,0,9],[0,5,6],[3,6,2],[6,0,4],[1,2,4]], s = 4, d = 1, k = 2\nOutput: 6\nExplanation: In this example there are 2 paths from node 4 (the green node) to node 1 (the red node), which are (4->0->6->3->2->1) and (4->0->6->3->1). The first one has the length 9 + 4 + 2 + 4 + 4 = 23, and the second one has the length 9 + 4 + 2 + 9 = 24. Now if we make weight of the blue edges 0, we get the shortest path with the length 0 + 4 + 2 + 0 = 6. It can be shown that 6 is the minimum length of a path we can achieve with the given condition.\n\n\nExample 3:\n\nInput: n = 5, edges = [[0,4,2],[0,1,3],[0,2,1],[2,1,4],[1,3,4],[3,4,7]], s = 2, d = 3, k = 1\nOutput: 3\nExplanation: In this example there are 4 paths from node 2 (the green node) to node 3 (the red node), which are (2->1->3), (2->0->1->3), (2->1->0->4->3) and (2->0->4->3). The first two have the length 4 + 4 = 1 + 3 + 4 = 8, the third one has the length 4 + 3 + 2 + 7 = 16 and the last one has the length 1 + 2 + 7 = 10. Now if we make weight of the blue edge 0, we get the shortest path with the length 1 + 2 + 0 = 3. It can be shown that 3 is the minimum length of a path we can achieve with the given condition.\n\n\n \nConstraints:\n\n2 <= n <= 500\nn - 1 <= edges.length <= min(104, n * (n - 1) / 2)\nedges[i].length = 3\n0 <= edges[i][0], edges[i][1] <= n - 1\n1 <= edges[i][2] <= 106\n0 <= s, d, k <= n - 1\ns != d\nThe input is generated such that the graph is connected and has no repeated edges or self-loops\n\n", "hints": ["Let's construct a new graph and run Dijkstra on it to get the answer to the problem.", "We define the new graph as follows: Each node of this graph is a pair (v, c) where v is a node from the given graph and c is any number between 0 and k (inclusive).", "Try to make edges of the defined graph in such a way that if we run Dijkstra on the node (s, 0), then the shortest path to node (d, k) would be the final answer.", "Edge type one: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of w between nodes (v, c) and (u, c) for any c between 0 and k (inclusive) in the new graph.", "Edge type two: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of 0 between nodes (v, c) and (u, c + 1), also between (u, c) and (v, c + 1) for any c between 0 and k - 1 (inclusive) in the new graph.", "For the matter of time complexity, note that you **don’t need** to literally construct the described graph."], "exampleTestcases": "4\n[[0,1,4],[0,2,2],[2,3,6]]\n1\n3\n2\n7\n[[3,1,9],[3,2,4],[4,0,9],[0,5,6],[3,6,2],[6,0,4],[1,2,4]]\n4\n1\n2\n5\n[[0,4,2],[0,1,3],[0,2,1],[2,1,4],[1,3,4],[3,4,7]]\n2\n3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestPathWithHops(int n, vector<vector<int>>& edges, int s, int d, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shortestPathWithHops(int n, int[][] edges, int s, int d, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestPathWithHops(self, n, edges, s, d, k):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type s: int\n        :type d: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestPathWithHops(self, n: int, edges: List[List[int]], s: int, d: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shortestPathWithHops(int n, int** edges, int edgesSize, int* edgesColSize, int s, int d, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShortestPathWithHops(int n, int[][] edges, int s, int d, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} s\n * @param {number} d\n * @param {number} k\n * @return {number}\n */\nvar shortestPathWithHops = function(n, edges, s, d, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestPathWithHops(n: number, edges: number[][], s: number, d: number, k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $s\n     * @param Integer $d\n     * @param Integer $k\n     * @return Integer\n     */\n    function shortestPathWithHops($n, $edges, $s, $d, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestPathWithHops(_ n: Int, _ edges: [[Int]], _ s: Int, _ d: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestPathWithHops(n: Int, edges: Array<IntArray>, s: Int, d: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shortestPathWithHops(int n, List<List<int>> edges, int s, int d, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestPathWithHops(n int, edges [][]int, s int, d int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} s\n# @param {Integer} d\n# @param {Integer} k\n# @return {Integer}\ndef shortest_path_with_hops(n, edges, s, d, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestPathWithHops(n: Int, edges: Array[Array[Int]], s: Int, d: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_path_with_hops(n: i32, edges: Vec<Vec<i32>>, s: i32, d: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-path-with-hops n edges s d k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_path_with_hops(N :: integer(), Edges :: [[integer()]], S :: integer(), D :: integer(), K :: integer()) -> integer().\nshortest_path_with_hops(N, Edges, S, D, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_path_with_hops(n :: integer, edges :: [[integer]], s :: integer, d :: integer, k :: integer) :: integer\n  def shortest_path_with_hops(n, edges, s, d, k) do\n    \n  end\nend"}}}