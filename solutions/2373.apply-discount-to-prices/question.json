{"questionId": "2373", "acRate": 31.627666514851242, "difficulty": "Medium", "freqBar": 47.99348960401396, "frontendQuestionId": "2288", "paidOnly": false, "status": "ac", "title": "Apply Discount to Prices", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "apply-discount-to-prices", "content": "<p>A <strong>sentence</strong> is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign <code>&#39;$&#39;</code>. A word represents a <strong>price</strong> if it is a sequence of digits preceded by a dollar sign.</p>\n\n<ul>\n\t<li>For example, <code>&quot;$100&quot;</code>, <code>&quot;$23&quot;</code>, and <code>&quot;$6&quot;</code> represent prices while <code>&quot;100&quot;</code>, <code>&quot;$&quot;</code>, and <code>&quot;$1e5&quot;</code> do not.</li>\n</ul>\n\n<p>You are given a string <code>sentence</code> representing a sentence and an integer <code>discount</code>. For each word representing a price, apply a discount of <code>discount%</code> on the price and <strong>update</strong> the word in the sentence. All updated prices should be represented with <strong>exactly two</strong> decimal places.</p>\n\n<p>Return <em>a string representing the modified sentence</em>.</p>\n\n<p>Note that all prices will contain <strong>at most</strong> <code>10</code> digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;there are $1 $2 and 5$ candies in the shop&quot;, discount = 50\n<strong>Output:</strong> &quot;there are $0.50 $1.00 and 5$ candies in the shop&quot;\n<strong>Explanation:</strong> \nThe words which represent prices are &quot;$1&quot; and &quot;$2&quot;. \n- A 50% discount on &quot;$1&quot; yields &quot;$0.50&quot;, so &quot;$1&quot; is replaced by &quot;$0.50&quot;.\n- A 50% discount on &quot;$2&quot; yields &quot;$1&quot;. Since we need to have exactly 2 decimal places after a price, we replace &quot;$2&quot; with &quot;$1.00&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;1 2 $3 4 $5 $6 7 8$ $9 $10$&quot;, discount = 100\n<strong>Output:</strong> &quot;1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$&quot;\n<strong>Explanation:</strong> \nApplying a 100% discount on any price will result in 0.\nThe words representing prices are &quot;$3&quot;, &quot;$5&quot;, &quot;$6&quot;, and &quot;$9&quot;.\nEach of them is replaced by &quot;$0.00&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>sentence</code> consists of lowercase English letters, digits, <code>&#39; &#39;</code>, and <code>&#39;$&#39;</code>.</li>\n\t<li><code>sentence</code> does not have leading or trailing spaces.</li>\n\t<li>All words in <code>sentence</code> are separated by a single space.</li>\n\t<li>All prices will be <strong>positive</strong> numbers without leading zeros.</li>\n\t<li>All prices will have <strong>at most</strong> <code>10</code> digits.</li>\n\t<li><code>0 &lt;= discount &lt;= 100</code></li>\n</ul>\n", "hints": ["Extract each word from the sentence and check if it represents a price.", "For each price, apply the given discount to it and update it."], "exampleTestcases": "\"there are $1 $2 and 5$ candies in the shop\"\n50\n\"1 2 $3 4 $5 $6 7 8$ $9 $10$\"\n100", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string discountPrices(string sentence, int discount) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String discountPrices(String sentence, int discount) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def discountPrices(self, sentence, discount):\n        \"\"\"\n        :type sentence: str\n        :type discount: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* discountPrices(char* sentence, int discount) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string DiscountPrices(string sentence, int discount) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @param {number} discount\n * @return {string}\n */\nvar discountPrices = function(sentence, discount) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function discountPrices(sentence: string, discount: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @param Integer $discount\n     * @return String\n     */\n    function discountPrices($sentence, $discount) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func discountPrices(_ sentence: String, _ discount: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun discountPrices(sentence: String, discount: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String discountPrices(String sentence, int discount) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func discountPrices(sentence string, discount int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} sentence\n# @param {Integer} discount\n# @return {String}\ndef discount_prices(sentence, discount)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def discountPrices(sentence: String, discount: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn discount_prices(sentence: String, discount: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (discount-prices sentence discount)\n  (-> string? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec discount_prices(Sentence :: unicode:unicode_binary(), Discount :: integer()) -> unicode:unicode_binary().\ndiscount_prices(Sentence, Discount) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec discount_prices(sentence :: String.t, discount :: integer) :: String.t\n  def discount_prices(sentence, discount) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "multiply-strings", "title": "Multiply Strings", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "apply-discount-every-n-orders", "title": "Apply Discount Every n Orders", "isPaidOnly": false}]}