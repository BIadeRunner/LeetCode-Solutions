{"questionId": "1004", "acRate": 48.75990913726763, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "964", "paidOnly": false, "status": "ac", "title": "Least Operators to Express Number", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}], "titleSlug": "least-operators-to-express-number", "content": "<p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code> where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>. For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code> which is a value of <font face=\"monospace\">3</font>.</p>\n\n<p>When writing such an expression, we adhere to the following conventions:</p>\n\n<ul>\n\t<li>The division operator (<code>/</code>) returns rational numbers.</li>\n\t<li>There are no parentheses placed anywhere.</li>\n\t<li>We use the usual order of operations: multiplication and division happen before addition and subtraction.</li>\n\t<li>It is not allowed to use the unary negation operator (<code>-</code>). For example, &quot;<code>x - x</code>&quot; is a valid expression as it only uses subtraction, but &quot;<code>-x + x</code>&quot; is not because it uses negation.</li>\n</ul>\n\n<p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>. Return the least number of operators used.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 3, target = 19\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 5, target = 501\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 100, target = 100000000\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10<sup>8</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "3\n19\n5\n501\n100\n100000000", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int leastOpsExpressTarget(int x, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def leastOpsExpressTarget(self, x, target):\n        \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int leastOpsExpressTarget(int x, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LeastOpsExpressTarget(int x, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */\nvar leastOpsExpressTarget = function(x, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function leastOpsExpressTarget(x: number, target: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $target\n     * @return Integer\n     */\n    function leastOpsExpressTarget($x, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func leastOpsExpressTarget(_ x: Int, _ target: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun leastOpsExpressTarget(x: Int, target: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int leastOpsExpressTarget(int x, int target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func leastOpsExpressTarget(x int, target int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} target\n# @return {Integer}\ndef least_ops_express_target(x, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn least_ops_express_target(x: i32, target: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (least-ops-express-target x target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec least_ops_express_target(X :: integer(), Target :: integer()) -> integer().\nleast_ops_express_target(X, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec least_ops_express_target(x :: integer, target :: integer) :: integer\n  def least_ops_express_target(x, target) do\n    \n  end\nend"}], "similarQuestionList": []}