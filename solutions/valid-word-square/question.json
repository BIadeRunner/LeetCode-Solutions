{"questionId": "422", "acRate": 41.49950651737399, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "422", "paidOnly": true, "status": "ac", "title": "Valid Word Square", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "valid-word-square", "content": "<p>Given an array of strings <code>words</code>, return <code>true</code> <em>if it forms a valid <strong>word square</strong></em>.</p>\n\n<p>A sequence of strings forms a valid <strong>word square</strong> if the <code>k<sup>th</sup></code> row and column read the same string, where <code>0 &lt;= k &lt; max(numRows, numColumns)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq1-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;bnrt&quot;,&quot;crmy&quot;,&quot;dtye&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe 1<sup>st</sup> row and 1<sup>st</sup> column both read &quot;abcd&quot;.\nThe 2<sup>nd</sup> row and 2<sup>nd</sup> column both read &quot;bnrt&quot;.\nThe 3<sup>rd</sup> row and 3<sup>rd</sup> column both read &quot;crmy&quot;.\nThe 4<sup>th</sup> row and 4<sup>th</sup> column both read &quot;dtye&quot;.\nTherefore, it is a valid word square.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;bnrt&quot;,&quot;crm&quot;,&quot;dt&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe 1<sup>st</sup> row and 1<sup>st</sup> column both read &quot;abcd&quot;.\nThe 2<sup>nd</sup> row and 2<sup>nd</sup> column both read &quot;bnrt&quot;.\nThe 3<sup>rd</sup> row and 3<sup>rd</sup> column both read &quot;crm&quot;.\nThe 4<sup>th</sup> row and 4<sup>th</sup> column both read &quot;dt&quot;.\nTherefore, it is a valid word square.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq3-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;ball&quot;,&quot;area&quot;,&quot;read&quot;,&quot;lady&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe 3<sup>rd</sup> row reads &quot;read&quot; while the 3<sup>rd</sup> column reads &quot;lead&quot;.\nTherefore, it is NOT a valid word square.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 500</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"abcd\",\"bnrt\",\"crmy\",\"dtye\"]\n[\"abcd\",\"bnrt\",\"crm\",\"dt\"]\n[\"ball\",\"area\",\"read\",\"lady\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validWordSquare(vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validWordSquare(List<String> words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validWordSquare(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validWordSquare(self, words: List[str]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool validWordSquare(char** words, int wordsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidWordSquare(IList<string> words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {boolean}\n */\nvar validWordSquare = function(words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validWordSquare(words: string[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Boolean\n     */\n    function validWordSquare($words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validWordSquare(_ words: [String]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validWordSquare(words: List<String>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool validWordSquare(List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validWordSquare(words []string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Boolean}\ndef valid_word_square(words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validWordSquare(words: List[String]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_word_square(words: Vec<String>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (valid-word-square words)\n  (-> (listof string?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec valid_word_square(Words :: [unicode:unicode_binary()]) -> boolean().\nvalid_word_square(Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_word_square(words :: [String.t]) :: boolean\n  def valid_word_square(words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "word-squares", "title": "Word Squares", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "toeplitz-matrix", "title": "Toeplitz Matrix", "isPaidOnly": false}]}