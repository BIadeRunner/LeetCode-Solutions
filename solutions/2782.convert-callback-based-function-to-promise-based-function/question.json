{"question_id": "2782", "problem_slug": "convert-callback-based-function-to-promise-based-function", "problem_title": "Convert Callback Based Function to Promise Based Function", "content": "Write a function that accepts another function fn and converts the callback-based function into a promise-based function. \nThe function fn takes a callback as its first argument, along with any additional arguments args passed as separate inputs.\nThe promisify function returns a new function that should return a promise. The promise should resolve with the argument passed as the first parameter of the callback when the callback is invoked without error, and reject with the error when the callback is called with an error as the second argument.\nThe following is an example of a function that could be passed into promisify.\n\nfunction sum(callback, a, b) {\n  if (a < 0 || b < 0) {\n    const err = Error('a and b must be positive');\n    callback(undefined, err);\n  } else {\n    callback(a + b);\n  }\n}\n\nThis is the equivalent code based on promises:\n\nasync function sum(a, b) {\n  if (a < 0 || b < 0) {\n    throw Error('a and b must be positive');\n  } else {\n    return a + b;\n  }\n}\n\n \nExample 1:\n\nInput: \nfn = (callback, a, b, c) => {\n    callback(a * b * c);\n}\nargs = [1, 2, 3]\nOutput: {\"resolved\": 6}\nExplanation: \nconst asyncFunc = promisify(fn);\nasyncFunc(1, 2, 3).then(console.log); // 6\n\nfn is called with a callback as the first argument and args as the rest. The promise based version of fn resolves a value of 6 when called with (1, 2, 3).\n\nExample 2:\n\nInput: \nfn = (callback, a, b, c) => {\n    callback(a * b * c, \"Promise Rejected\");\n}\nargs = [4, 5, 6]\nOutput: {\"rejected\": \"Promise Rejected\"}\nExplanation: \nconst asyncFunc = promisify(fn);\nasyncFunc(4, 5, 6).catch(console.log); // \"Promise Rejected\"\n\nfn is called with a callback as the first argument and args as the rest. As the second argument, the callback accepts an error message, so when fn is called, the promise is rejected with a error message provided in the callback. Note that it did not matter what was passed as the first argument into the callback.\n\n \nConstraints:\n\n1 <= args.length <= 100\n0 <= args[i] <= 104\n\n", "hints": [], "exampleTestcases": "(callback, a, b, c) => { callback(a * b * c) }\n[1, 2, 3]\n(callback, a, b, c) => { callback(a * b * c, \"Promise Rejected\") }\n[4, 5, 6]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Function} fn\n * @return {Function<Promise<number>>}\n */\nvar promisify = function(fn) {\n    \n    return async function(...args) {\n        \n    }\n};\n\n/**\n * const asyncFunc = promisify(callback => callback(42));\n * asyncFunc().then(console.log); // 42\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type CallbackFn = (\n    next: (data: number, error: string) => void, \n    ...args: number[]\n) => void\ntype Promisified = (...args: number[]) => Promise<number>\n\nfunction promisify(fn: CallbackFn): Promisified {\n    \n    return async function(...args) {\n        \n    };\n};\n\n/**\n * const asyncFunc = promisify(callback => callback(42));\n * asyncFunc().then(console.log); // 42\n */"}}}