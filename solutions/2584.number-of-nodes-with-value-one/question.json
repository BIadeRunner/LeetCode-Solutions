{"question_id": "2584", "problem_slug": "number-of-nodes-with-value-one", "problem_title": "Number of Nodes With Value One", "content": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\nFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\n\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\nFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\nfloor(x) is equivalent to rounding x down to the nearest integer.\n\n \nExample 1:\n\n\nInput: n = 5 , queries = [1,2,5]\nOutput: 3\nExplanation: The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1.\nAfter processing the queries, there are three red nodes (nodes with value 1): 1, 3, and 5.\n\nExample 2:\n\n\nInput: n = 3, queries = [2,3,3]\nOutput: 1\nExplanation: The diagram above shows the tree structure and its status after performing the queries. The blue node represents the value 0, and the red node represents the value 1.\nAfter processing the queries, there are one red node (node with value 1): 2.\n\n \nConstraints:\n\n1 <= n <= 105\n1 <= queries.length <= 105\n1 <= queries[i] <= n\n\n", "hints": ["The relative order of processing queries does not matter.", "If we know that for some node v, its parent was updated some number of times, then we know that node v was also updated that number of times.", "Iterate on nodes from highest to lowest and count the number of times the query was performed on that node and the number of times this node was updated from its parent (direct or indirect). The parity of that number is the answer."], "exampleTestcases": "5\n[1,2,5]\n3\n[2,3,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfNodes(int n, vector<int>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfNodes(int n, int[] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfNodes(self, n, queries):\n        \"\"\"\n        :type n: int\n        :type queries: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfNodes(self, n: int, queries: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfNodes(int n, int* queries, int queriesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfNodes(int n, int[] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} queries\n * @return {number}\n */\nvar numberOfNodes = function(n, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfNodes(n: number, queries: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $queries\n     * @return Integer\n     */\n    function numberOfNodes($n, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfNodes(_ n: Int, _ queries: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfNodes(n: Int, queries: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfNodes(int n, List<int> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfNodes(n int, queries []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} queries\n# @return {Integer}\ndef number_of_nodes(n, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfNodes(n: Int, queries: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_nodes(n: i32, queries: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-nodes n queries)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_nodes(N :: integer(), Queries :: [integer()]) -> integer().\nnumber_of_nodes(N, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_nodes(n :: integer, queries :: [integer]) :: integer\n  def number_of_nodes(n, queries) do\n    \n  end\nend"}}}