{"question_id": "3515", "problem_slug": "find-if-digit-game-can-be-won", "problem_title": "Find if Digit Game Can Be Won", "content": "You are given an array of positive integers nums.\nAlice and Bob are playing a game. In the game, Alice can choose either all single-digit numbers or all double-digit numbers from nums, and the rest of the numbers are given to Bob. Alice wins if the sum of her numbers is strictly greater than the sum of Bob's numbers.\nReturn true if Alice can win this game, otherwise, return false.\n \nExample 1:\n\nInput: nums = [1,2,3,4,10]\nOutput: false\nExplanation:\nAlice cannot win by choosing either single-digit or double-digit numbers.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5,14]\nOutput: true\nExplanation:\nAlice can win by choosing single-digit numbers which have a sum equal to 15.\n\nExample 3:\n\nInput: nums = [5,5,5,25]\nOutput: true\nExplanation:\nAlice can win by choosing double-digit numbers which have a sum equal to 25.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 99\n\n", "hints": ["Alice wins if the sum of all single-digit numbers and the sum of all double-digit numbers are different."], "exampleTestcases": "[1,2,3,4,10]\n[1,2,3,4,5,14]\n[5,5,5,25]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canAliceWin(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canAliceWin(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canAliceWin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool canAliceWin(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanAliceWin(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canAliceWin = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canAliceWin(nums: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canAliceWin($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canAliceWin(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canAliceWin(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool canAliceWin(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canAliceWin(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_alice_win(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canAliceWin(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_alice_win(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-alice-win nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_alice_win(Nums :: [integer()]) -> boolean().\ncan_alice_win(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_alice_win(nums :: [integer]) :: boolean\n  def can_alice_win(nums) do\n    \n  end\nend"}}}