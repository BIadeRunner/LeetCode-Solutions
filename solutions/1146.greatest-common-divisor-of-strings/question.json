{"question_id": "1146", "problem_slug": "greatest-common-divisor-of-strings", "problem_title": "Greatest Common Divisor of Strings", "content": "For two strings s and t, we say \"t divides s\" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.\n \nExample 1:\n\nInput: str1 = \"ABCABC\", str2 = \"ABC\"\nOutput: \"ABC\"\n\nExample 2:\n\nInput: str1 = \"ABABAB\", str2 = \"ABAB\"\nOutput: \"AB\"\n\nExample 3:\n\nInput: str1 = \"LEET\", str2 = \"CODE\"\nOutput: \"\"\n\n \nConstraints:\n\n1 <= str1.length, str2.length <= 1000\nstr1 and str2 consist of English uppercase letters.\n\n", "hints": ["The greatest common divisor must be a prefix of each string, so we can try all prefixes."], "exampleTestcases": "\"ABCABC\"\n\"ABC\"\n\"ABABAB\"\n\"ABAB\"\n\"LEET\"\n\"CODE\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String gcdOfStrings(String str1, String str2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* gcdOfStrings(char* str1, char* str2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string GcdOfStrings(string str1, string str2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function gcdOfStrings(str1: string, str2: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function gcdOfStrings($str1, $str2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func gcdOfStrings(_ str1: String, _ str2: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun gcdOfStrings(str1: String, str2: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String gcdOfStrings(String str1, String str2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func gcdOfStrings(str1 string, str2 string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef gcd_of_strings(str1, str2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def gcdOfStrings(str1: String, str2: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn gcd_of_strings(str1: String, str2: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (gcd-of-strings str1 str2)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec gcd_of_strings(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\ngcd_of_strings(Str1, Str2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec gcd_of_strings(str1 :: String.t, str2 :: String.t) :: String.t\n  def gcd_of_strings(str1, str2) do\n    \n  end\nend"}}}