{"question_id": "3463", "problem_slug": "alternating-groups-i", "problem_title": "Alternating Groups I", "content": "There is a circle of red and blue tiles. You are given an array of integers colors. The color of tile i is represented by colors[i]:\n\ncolors[i] == 0 means that tile i is red.\ncolors[i] == 1 means that tile i is blue.\n\nEvery 3 contiguous tiles in the circle with alternating colors (the middle tile has a different color from its left and right tiles) is called an alternating group.\nReturn the number of alternating groups.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\n \nExample 1:\n\nInput: colors = [1,1,1]\nOutput: 0\nExplanation:\n\n\nExample 2:\n\nInput: colors = [0,1,0,0,1]\nOutput: 3\nExplanation:\n\nAlternating groups:\n\n\n \nConstraints:\n\n3 <= colors.length <= 100\n0 <= colors[i] <= 1\n\n", "hints": ["For each tile, check that the previous and the next tile have different colors from that tile or not."], "exampleTestcases": "[1,1,1]\n[0,1,0,0,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors):\n        \"\"\"\n        :type colors: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfAlternatingGroups(int* colors, int colorsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} colors\n * @return {number}\n */\nvar numberOfAlternatingGroups = function(colors) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfAlternatingGroups(colors: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfAlternatingGroups(List<int> colors) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfAlternatingGroups(colors []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} colors\n# @return {Integer}\ndef number_of_alternating_groups(colors)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-alternating-groups colors)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_alternating_groups(Colors :: [integer()]) -> integer().\nnumber_of_alternating_groups(Colors) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer]) :: integer\n  def number_of_alternating_groups(colors) do\n    \n  end\nend"}}}