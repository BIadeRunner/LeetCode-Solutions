{"question_id": "1667", "problem_slug": "find-kth-bit-in-nth-binary-string", "problem_title": "Find Kth Bit in Nth Binary String", "content": "Given two positive integers n and k, the binary string Sn is formed as follows:\n\nS1 = \"0\"\nSi = Si - 1 + \"1\" + reverse(invert(Si - 1)) for i > 1\n\nWhere + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first four strings in the above sequence are:\n\nS1 = \"0\"\nS2 = \"011\"\nS3 = \"0111001\"\nS4 = \"011100110110001\"\n\nReturn the kth bit in Sn. It is guaranteed that k is valid for the given n.\n \nExample 1:\n\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3 is \"0111001\".\nThe 1st bit is \"0\".\n\nExample 2:\n\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4 is \"011100110110001\".\nThe 11th bit is \"1\".\n\n \nConstraints:\n\n1 <= n <= 20\n1 <= k <= 2n - 1\n\n", "hints": ["Since n is small, we can simply simulate the process of constructing S1 to Sn."], "exampleTestcases": "3\n1\n4\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    char findKthBit(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public char findKthBit(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findKthBit(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char findKthBit(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public char FindKthBit(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {character}\n */\nvar findKthBit = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findKthBit(n: number, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function findKthBit($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findKthBit(_ n: Int, _ k: Int) -> Character {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findKthBit(n: Int, k: Int): Char {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String findKthBit(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findKthBit(n int, k int) byte {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Character}\ndef find_kth_bit(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findKthBit(n: Int, k: Int): Char = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_kth_bit(n: i32, k: i32) -> char {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-kth-bit n k)\n  (-> exact-integer? exact-integer? char?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_kth_bit(N :: integer(), K :: integer()) -> char().\nfind_kth_bit(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_kth_bit(n :: integer, k :: integer) :: char\n  def find_kth_bit(n, k) do\n    \n  end\nend"}}}