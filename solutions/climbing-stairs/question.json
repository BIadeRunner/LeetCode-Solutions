{"questionId": "70", "acRate": 53.17003961569292, "difficulty": "Easy", "freqBar": 88.21982568793692, "frontendQuestionId": "70", "paidOnly": false, "status": "ac", "title": "Climbing Stairs", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}], "titleSlug": "climbing-stairs", "content": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n", "hints": ["To reach nth step, what could have been your previous steps? (Think about the step sizes)"], "exampleTestcases": "2\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int climbStairs(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function climbStairs(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int climbStairs(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func climbStairs(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "min-cost-climbing-stairs", "title": "Min Cost Climbing Stairs", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "fibonacci-number", "title": "Fibonacci Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "n-th-tribonacci-number", "title": "N-th Tribonacci Number", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-rounds-to-complete-all-tasks", "title": "Minimum Rounds to Complete All Tasks", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-number-of-ways-to-place-houses", "title": "Count Number of Ways to Place Houses", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-ways-to-build-good-strings", "title": "Count Ways To Build Good Strings", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "frog-jump-ii", "title": "Frog Jump II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-number-of-ways-to-reach-the-k-th-stair", "title": "Find Number of Ways to Reach the K-th Stair", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "the-number-of-ways-to-make-the-sum", "title": "The Number of Ways to Make the Sum", "isPaidOnly": true}]}