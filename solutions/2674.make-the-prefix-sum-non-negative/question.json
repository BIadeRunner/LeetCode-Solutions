{"question_id": "2674", "problem_slug": "make-the-prefix-sum-non-negative", "problem_title": "Make the Prefix Sum Non-negative", "content": "You are given a 0-indexed integer array nums. You can apply the following operation any number of times:\n\nPick any element from nums and put it at the end of nums.\n\nThe prefix sum array of nums is an array prefix of the same length as nums such that prefix[i] is the sum of all the integers nums[j] where j is in the inclusive range [0, i].\nReturn the minimum number of operations such that the prefix sum array does not contain negative integers. The test cases are generated such that it is always possible to make the prefix sum array non-negative.\n \nExample 1:\n\nInput: nums = [2,3,-5,4]\nOutput: 0\nExplanation: we do not need to do any operations.\nThe array is [2,3,-5,4]. The prefix sum array is [2, 5, 0, 4].\n\nExample 2:\n\nInput: nums = [3,-5,-2,6]\nOutput: 1\nExplanation: we can do one operation on index 1.\nThe array after the operation is [3,-2,6,-5]. The prefix sum array is [3, 1, 7, 2].\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-109 <= nums[i] <= 109\n\n", "hints": ["There will always be a way to make the prefix sum non-negative. How can we use that?", "Loop over the array keeping the prefix sum. Whenever it goes negative, move the smallest number you have seen to the end."], "exampleTestcases": "[2,3,-5,4]\n[3,-5,-2,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int makePrefSumNonNegative(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int makePrefSumNonNegative(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makePrefSumNonNegative(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makePrefSumNonNegative(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int makePrefSumNonNegative(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MakePrefSumNonNegative(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar makePrefSumNonNegative = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makePrefSumNonNegative(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function makePrefSumNonNegative($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makePrefSumNonNegative(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makePrefSumNonNegative(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int makePrefSumNonNegative(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makePrefSumNonNegative(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef make_pref_sum_non_negative(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makePrefSumNonNegative(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_pref_sum_non_negative(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-pref-sum-non-negative nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_pref_sum_non_negative(Nums :: [integer()]) -> integer().\nmake_pref_sum_non_negative(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_pref_sum_non_negative(nums :: [integer]) :: integer\n  def make_pref_sum_non_negative(nums) do\n    \n  end\nend"}}}