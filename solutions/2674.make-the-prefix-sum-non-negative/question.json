{"questionId": "2674", "acRate": 50.74404761904761, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2599", "paidOnly": true, "status": "ac", "title": "Make the Prefix Sum Non-negative", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}], "titleSlug": "make-the-prefix-sum-non-negative", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. You can apply the following operation any number of times:</p>\n\n<ul>\n\t<li>Pick any element from <code>nums</code> and put it at the end of <code>nums</code>.</li>\n</ul>\n\n<p>The prefix sum array of <code>nums</code> is an array <code>prefix</code> of the same length as <code>nums</code> such that <code>prefix[i]</code> is the sum of all the integers <code>nums[j]</code> where <code>j</code> is in the inclusive range <code>[0, i]</code>.</p>\n\n<p>Return <em>the minimum number of operations such that the prefix sum array does not contain negative integers</em>. The test cases are generated such that it is always possible to make the prefix sum array non-negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-5,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> we do not need to do any operations.\nThe array is [2,3,-5,4]. The prefix sum array is [2, 5, 0, 4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,-5,-2,6]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> we can do one operation on index 1.\nThe array after the operation is [3,-2,6,-5]. The prefix sum array is [3, 1, 7, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["There will always be a way to make the prefix sum non-negative. How can we use that?", "Loop over the array keeping the prefix sum. Whenever it goes negative, move the smallest number you have seen to the end."], "exampleTestcases": "[2,3,-5,4]\n[3,-5,-2,6]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int makePrefSumNonNegative(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int makePrefSumNonNegative(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makePrefSumNonNegative(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makePrefSumNonNegative(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int makePrefSumNonNegative(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MakePrefSumNonNegative(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar makePrefSumNonNegative = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makePrefSumNonNegative(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function makePrefSumNonNegative($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makePrefSumNonNegative(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makePrefSumNonNegative(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int makePrefSumNonNegative(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func makePrefSumNonNegative(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef make_pref_sum_non_negative(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makePrefSumNonNegative(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn make_pref_sum_non_negative(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (make-pref-sum-non-negative nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec make_pref_sum_non_negative(Nums :: [integer()]) -> integer().\nmake_pref_sum_non_negative(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_pref_sum_non_negative(nums :: [integer]) :: integer\n  def make_pref_sum_non_negative(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "furthest-building-you-can-reach", "title": "Furthest Building You Can Reach", "isPaidOnly": false}]}