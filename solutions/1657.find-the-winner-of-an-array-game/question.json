{"questionId": "1657", "acRate": 56.89702015350431, "difficulty": "Medium", "freqBar": 40.97205529817753, "frontendQuestionId": "1535", "paidOnly": false, "status": "ac", "title": "Find the Winner of an Array Game", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "find-the-winner-of-an-array-game", "content": "<p>Given an integer array <code>arr</code> of <strong>distinct</strong> integers and an integer <code>k</code>.</p>\n\n<p>A game will be played between the first two elements of the array (i.e. <code>arr[0]</code> and <code>arr[1]</code>). In each round of the game, we compare <code>arr[0]</code> with <code>arr[1]</code>, the larger integer wins and remains at position <code>0</code>, and the smaller integer moves to the end of the array. The game ends when an integer wins <code>k</code> consecutive rounds.</p>\n\n<p>Return <em>the integer which will win the game</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that there will be a winner of the game.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,3,5,4,6,7], k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Let&#39;s see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,2,1], k = 10\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 will win the first 10 rounds consecutively.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>arr</code> contains <strong>distinct</strong> integers.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["If k \u2265 arr.length return the max element of the array.", "If k < arr.length simulate the game until a number wins k consecutive games."], "exampleTestcases": "[2,1,3,5,4,6,7]\n2\n[3,2,1]\n10", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getWinner(vector<int>& arr, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getWinner(int[] arr, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getWinner(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int getWinner(int* arr, int arrSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetWinner(int[] arr, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar getWinner = function(arr, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getWinner(arr: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Integer\n     */\n    function getWinner($arr, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getWinner(_ arr: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getWinner(arr: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int getWinner(List<int> arr, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getWinner(arr []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Integer}\ndef get_winner(arr, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getWinner(arr: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_winner(arr: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-winner arr k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_winner(Arr :: [integer()], K :: integer()) -> integer().\nget_winner(Arr, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_winner(arr :: [integer], k :: integer) :: integer\n  def get_winner(arr, k) do\n    \n  end\nend"}], "similarQuestionList": []}