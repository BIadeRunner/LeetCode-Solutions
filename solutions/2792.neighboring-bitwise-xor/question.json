{"question_id": "2792", "problem_slug": "neighboring-bitwise-xor", "problem_title": "Neighboring Bitwise XOR", "content": "A 0-indexed array derived with length n is derived by computing the bitwise XOR (⊕) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\n\nIf i = n - 1, then derived[i] = original[i] ⊕ original[0].\nOtherwise, derived[i] = original[i] ⊕ original[i + 1].\n\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\n\nA binary array is an array containing only 0's and 1's\n\n \nExample 1:\n\nInput: derived = [1,1,0]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] ⊕ original[1] = 0 ⊕ 1 = 1 \nderived[1] = original[1] ⊕ original[2] = 1 ⊕ 0 = 1\nderived[2] = original[2] ⊕ original[0] = 0 ⊕ 0 = 0\n\nExample 2:\n\nInput: derived = [1,1]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1].\nderived[0] = original[0] ⊕ original[1] = 1\nderived[1] = original[1] ⊕ original[0] = 1\n\nExample 3:\n\nInput: derived = [1,0]\nOutput: false\nExplanation: There is no valid original array that gives derived.\n\n \nConstraints:\n\nn == derived.length\n1 <= n <= 105\nThe values in derived are either 0's or 1's\n\n", "hints": ["Understand that from the original element, we are using each element twice to construct the derived array", "The xor-sum of the derived array should be 0 since there is always a duplicate occurrence of each element."], "exampleTestcases": "[1,1,0]\n[1,1]\n[1,0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool doesValidArrayExist(vector<int>& derived) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean doesValidArrayExist(int[] derived) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def doesValidArrayExist(self, derived):\n        \"\"\"\n        :type derived: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def doesValidArrayExist(self, derived: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool doesValidArrayExist(int* derived, int derivedSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool DoesValidArrayExist(int[] derived) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} derived\n * @return {boolean}\n */\nvar doesValidArrayExist = function(derived) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function doesValidArrayExist(derived: number[]): boolean {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $derived\n     * @return Boolean\n     */\n    function doesValidArrayExist($derived) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func doesValidArrayExist(_ derived: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun doesValidArrayExist(derived: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool doesValidArrayExist(List<int> derived) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func doesValidArrayExist(derived []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} derived\n# @return {Boolean}\ndef does_valid_array_exist(derived)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def doesValidArrayExist(derived: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn does_valid_array_exist(derived: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (does-valid-array-exist derived)\n  (-> (listof exact-integer?) boolean?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec does_valid_array_exist(Derived :: [integer()]) -> boolean().\ndoes_valid_array_exist(Derived) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec does_valid_array_exist(derived :: [integer]) :: boolean\n  def does_valid_array_exist(derived) do\n    \n  end\nend"}}}