{"questionId": "2651", "acRate": 36.722735129210406, "difficulty": "Medium", "freqBar": 56.64409480231873, "frontendQuestionId": "2580", "paidOnly": false, "status": "ac", "title": "Count Ways to Group Overlapping Ranges", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "count-ways-to-group-overlapping-ranges", "content": "<p>You are given a 2D integer array <code>ranges</code> where <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> denotes that all integers between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code> (both <strong>inclusive</strong>) are contained in the <code>i<sup>th</sup></code> range.</p>\n\n<p>You are to split <code>ranges</code> into <strong>two</strong> (possibly empty) groups such that:</p>\n\n<ul>\n\t<li>Each range belongs to exactly one group.</li>\n\t<li>Any two <strong>overlapping</strong> ranges must belong to the <strong>same</strong> group.</li>\n</ul>\n\n<p>Two ranges are said to be <strong>overlapping</strong>&nbsp;if there exists at least <strong>one</strong> integer that is present in both ranges.</p>\n\n<ul>\n\t<li>For example, <code>[1, 3]</code> and <code>[2, 5]</code> are overlapping because <code>2</code> and <code>3</code> occur in both ranges.</li>\n</ul>\n\n<p>Return <em>the <strong>total number</strong> of ways to split</em> <code>ranges</code> <em>into two groups</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[6,10],[5,15]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranges = [[1,3],[10,20],[2,5],[4,8]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>ranges[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Can we use sorting here?", "Sort the ranges and merge the overlapping ranges. Then count number of non-overlapping ranges.", "How many ways can we group these non-overlapping ranges?"], "exampleTestcases": "[[6,10],[5,15]]\n[[1,3],[10,20],[2,5],[4,8]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countWays(vector<vector<int>>& ranges) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countWays(int[][] ranges) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countWays(self, ranges):\n        \"\"\"\n        :type ranges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countWays(self, ranges: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countWays(int** ranges, int rangesSize, int* rangesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountWays(int[][] ranges) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} ranges\n * @return {number}\n */\nvar countWays = function(ranges) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countWays(ranges: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $ranges\n     * @return Integer\n     */\n    function countWays($ranges) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countWays(_ ranges: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countWays(ranges: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countWays(List<List<int>> ranges) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countWays(ranges [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} ranges\n# @return {Integer}\ndef count_ways(ranges)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countWays(ranges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_ways(ranges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-ways ranges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_ways(Ranges :: [[integer()]]) -> integer().\ncount_ways(Ranges) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_ways(ranges :: [[integer]]) :: integer\n  def count_ways(ranges) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "merge-intervals", "title": "Merge Intervals", "isPaidOnly": false}]}