{"question_id": "2716", "problem_slug": "prime-subtraction-operation", "problem_title": "Prime Subtraction Operation", "content": "You are given a 0-indexed integer array nums of length n.\nYou can perform the following operation as many times as you want:\n\nPick an index i that you haven’t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].\n\nReturn true if you can make nums a strictly increasing array using the above operation and false otherwise.\nA strictly increasing array is an array whose each element is strictly greater than its preceding element.\n \nExample 1:\n\nInput: nums = [4,9,6,10]\nOutput: true\nExplanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true.\nExample 2:\n\nInput: nums = [6,8,11,12]\nOutput: true\nExplanation: Initially nums is sorted in strictly increasing order, so we don't need to make any operations.\nExample 3:\n\nInput: nums = [5,8,3]\nOutput: false\nExplanation: It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nnums.length == n\n\n", "hints": ["Think about if we have many primes to subtract from nums[i]. Which prime is more optimal?", "The most optimal prime to subtract from nums[i] is the one that makes nums[i] the smallest as possible and greater than nums[i-1]."], "exampleTestcases": "[4,9,6,10]\n[6,8,11,12]\n[5,8,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool primeSubOperation(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean primeSubOperation(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def primeSubOperation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def primeSubOperation(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool primeSubOperation(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool PrimeSubOperation(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar primeSubOperation = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function primeSubOperation(nums: number[]): boolean {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function primeSubOperation($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func primeSubOperation(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun primeSubOperation(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool primeSubOperation(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func primeSubOperation(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef prime_sub_operation(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def primeSubOperation(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn prime_sub_operation(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (prime-sub-operation nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec prime_sub_operation(Nums :: [integer()]) -> boolean().\nprime_sub_operation(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec prime_sub_operation(nums :: [integer]) :: boolean\n  def prime_sub_operation(nums) do\n    \n  end\nend"}}}