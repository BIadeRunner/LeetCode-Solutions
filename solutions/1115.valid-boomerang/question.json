{"questionId": "1115", "acRate": 37.37544675818539, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1037", "paidOnly": false, "status": "ac", "title": "Valid Boomerang", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}], "titleSlug": "valid-boomerang", "content": "<p>Given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <code>true</code> <em>if these points are a <strong>boomerang</strong></em>.</p>\n\n<p>A <strong>boomerang</strong> is a set of three points that are <strong>all distinct</strong> and <strong>not in a straight line</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> points = [[1,1],[2,3],[3,2]]\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>points.length == 3</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n</ul>\n", "hints": ["3 points form a boomerang if and only if the triangle formed from them has non-zero area."], "exampleTestcases": "[[1,1],[2,3],[3,2]]\n[[1,1],[2,2],[3,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isBoomerang(vector<vector<int>>& points) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isBoomerang(int[][] points) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isBoomerang(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isBoomerang(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsBoomerang(int[][] points) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {boolean}\n */\nvar isBoomerang = function(points) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isBoomerang(points: number[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Boolean\n     */\n    function isBoomerang($points) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isBoomerang(_ points: [[Int]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isBoomerang(points: Array<IntArray>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isBoomerang(List<List<int>> points) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isBoomerang(points [][]int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Boolean}\ndef is_boomerang(points)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isBoomerang(points: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_boomerang(points: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-boomerang points)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_boomerang(Points :: [[integer()]]) -> boolean().\nis_boomerang(Points) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_boomerang(points :: [[integer]]) :: boolean\n  def is_boomerang(points) do\n    \n  end\nend"}], "similarQuestionList": []}