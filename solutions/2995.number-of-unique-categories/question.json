{"question_id": "2995", "problem_slug": "number-of-unique-categories", "problem_title": "Number of Unique Categories", "content": "You are given an integer n and an object categoryHandler of class CategoryHandler.\nThere are n elements, numbered from 0 to n - 1. Each element has a category, and your task is to find the number of unique categories.\nThe class CategoryHandler contains the following function, which may help you:\n\nboolean haveSameCategory(integer a, integer b): Returns true if a and b are in the same category and false otherwise. Also, if either a or b is not a valid number (i.e. it's greater than or equal to nor less than 0), it returns false.\n\nReturn the number of unique categories.\n \nExample 1:\n\nInput: n = 6, categoryHandler = [1,1,2,2,3,3]\nOutput: 3\nExplanation: There are 6 elements in this example. The first two elements belong to category 1, the second two belong to category 2, and the last two elements belong to category 3. So there are 3 unique categories.\n\nExample 2:\n\nInput: n = 5, categoryHandler = [1,2,3,4,5]\nOutput: 5\nExplanation: There are 5 elements in this example. Each element belongs to a unique category. So there are 5 unique categories.\n\nExample 3:\n\nInput: n = 3, categoryHandler = [1,1,1]\nOutput: 1\nExplanation: There are 3 elements in this example. All of them belong to one category. So there is only 1 unique category.\n\n \nConstraints:\n\n1 <= n <= 100\n\n", "hints": ["It can be proven that all pairs should be asked from the helper function.", "Iterate from the first element. For each element `i`, ask the helper function `i` with all `j < i`.", "If there is some `j < i` that `i` and `j` belong to the same group, go to next `i`. Otherwise, add one to the current number of groups."], "exampleTestcases": "6\n[1,1,2,2,3,3]\n5\n[1,2,3,4,5]\n3\n[1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n * public:\n *     CategoryHandler(vector<int> categories);\n *     bool haveSameCategory(int a, int b);\n * };\n */\nclass Solution {\npublic:\n    int numberOfCategories(int n, CategoryHandler* categoryHandler) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     public CategoryHandler(int[] categories);\n *     public boolean haveSameCategory(int a, int b);\n * };\n */\nclass Solution {\n\tpublic int numberOfCategories(int n, CategoryHandler categoryHandler) {\n    \t\n\t}\n}"}, "Python": {"langSlug": "python", "code": "# Definition for a category handler.\n# class CategoryHandler:\n#     def haveSameCategory(self, a, b):\n#         pass\nclass Solution(object):\n    def numberOfCategories(self, n, categoryHandler):\n        \"\"\"\n        :type n: int\n        :type categoryHandler: CategoryHandler\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for a category handler.\n# class CategoryHandler:\n#     def haveSameCategory(self, a: int, b: int) -> bool:\n#         pass\nclass Solution:\n    def numberOfCategories(self, n: int, categoryHandler: Optional['CategoryHandler']) -> int:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for a category handler.\n * \n * YOU HAVE TO PASS THE OBJECT ITSELF AS THE FIRST PARAMETER\n * \n * struct CategoryHandler {\n *     bool (*haveSameCategory)(struct CategoryHandler*, int, int);\n * };\n */\nint numberOfCategories(int n, struct CategoryHandler* categoryHandler){\n\n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     public CategoryHandler(int[] categories);\n *     public bool HaveSameCategory(int a, int b);\n * }\n */\npublic class Solution {\n    public int NumberOfCategories(int n, CategoryHandler categoryHandler) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     @param {number[]} categories\n *     constructor(categories);\n * \n *     @param {number} a\n *     @param {number} b\n *     @return {boolean}\n *     haveSameCategory(a, b);\n * }\n */\n/**\n * @param {number} n\n * @param {CategoryHandler} categoryHandler\n * @return {number}\n */\nvar numberOfCategories = function(n, categoryHandler) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     constructor(categories: number[]);\n *     public haveSameCategory(a: number, b: number): boolean;\n * }\n */\nfunction numberOfCategories(n: number, categoryHandler: CategoryHandler): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     function __construct($categories);\n *      * @param Integer $a\n *      * @param Integer $b\n *      * @return Boolean\n *     function haveSameCategory($a, $b);\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @param CategoryHandler $categoryHandler\n     * @return Integer\n     */\n    function numberOfCategories($n, $categoryHandler) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *     init(categories: [Int]) {}\n *     func haveSameCategory(a: Int, b: Int) -> Bool {}\n * }\n */\nclass Solution {\n    func numberOfCategories(_ n: Int, _ categoryHandler: CategoryHandler) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler(categories: IntArray) {\n *     fun haveSameCategory(a: Int, b: Int): Boolean\n * }\n */\nclass Solution {\n    fun numberOfCategories(n: Int, categoryHandler: CategoryHandler): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler {\n *   CategoryHandler(List<int> categories);\n *   bool haveSameCategory(int a, int b);\n * }\n */\nclass Solution {\n  int numberOfCategories(int n, CategoryHandler categoryHandler) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for a category handler.\n * type CategoryHandler interface {\n *  HaveSameCategory(int, int) bool\n * }\n */\nfunc numberOfCategories(n int, categoryHandler CategoryHandler) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for a category handler.\n# class CategoryHandler\n#   def initialize(categories)\n#   end\n#   def have_same_category(a, b)\n#   end\n# end\n# @param {Integer} n\n# @param {CategoryHandler} category_handler\n# @return {Integer}\ndef number_of_categories(n, category_handler)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for a category handler.\n * class CategoryHandler(categories: Array[Int]) {\n *     def haveSameCategory(a: Int, b: Int): Boolean\n * }\n */\nobject Solution {\n    def numberOfCategories(n: Int, categoryHandler: CategoryHandler): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/**\n * Definition for a category handler.\n * impl CategoryHandler {\n *     pub fn new(categories: Vec<i32>) -> Self {}\n *     pub fn have_same_category(&self, a: i32, b: i32) -> bool {}\n * }\n */\nimpl Solution {\n    pub fn number_of_categories(n: i32, category_handler: CategoryHandler) -> i32 {\n        \n    }\n}"}}}