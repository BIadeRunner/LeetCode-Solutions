{"question_id": "1361", "problem_slug": "tiling-a-rectangle-with-the-fewest-squares", "problem_title": "Tiling a Rectangle with the Fewest Squares", "content": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.\n \nExample 1:\n\n\nInput: n = 2, m = 3\nOutput: 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)\nExample 2:\n\n\nInput: n = 5, m = 8\nOutput: 5\n\nExample 3:\n\n\nInput: n = 11, m = 13\nOutput: 6\n\n \nConstraints:\n\n1 <= n, m <= 13\n\n", "hints": ["Can you use backtracking to solve this problem ?.", "Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?.", "The maximum number of squares to be placed will be ≤ max(n,m)."], "exampleTestcases": "2\n3\n5\n8\n11\n13", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int tilingRectangle(int n, int m) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int tilingRectangle(int n, int m) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def tilingRectangle(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int tilingRectangle(int n, int m) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TilingRectangle(int n, int m) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar tilingRectangle = function(n, m) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function tilingRectangle(n: number, m: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function tilingRectangle($n, $m) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func tilingRectangle(_ n: Int, _ m: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun tilingRectangle(n: Int, m: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int tilingRectangle(int n, int m) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func tilingRectangle(n int, m int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef tiling_rectangle(n, m)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def tilingRectangle(n: Int, m: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn tiling_rectangle(n: i32, m: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (tiling-rectangle n m)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec tiling_rectangle(N :: integer(), M :: integer()) -> integer().\ntiling_rectangle(N, M) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec tiling_rectangle(n :: integer, m :: integer) :: integer\n  def tiling_rectangle(n, m) do\n    \n  end\nend"}}}