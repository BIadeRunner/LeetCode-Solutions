{"questionId": "1852", "acRate": 70.29790771788832, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1709", "paidOnly": true, "status": "ac", "title": "Biggest Window Between Visits", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "titleSlug": "biggest-window-between-visits", "content": "<p>Table: <code>UserVisits</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| visit_date  | date |\n+-------------+------+\nThis table does not have a primary key, it might contain duplicate rows.\nThis table contains logs of the dates that users visited a certain retailer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Assume today&#39;s date is <code>&#39;2021-1-1&#39;</code>.</p>\n\n<p>Write a solution that will, for each <code>user_id</code>, find out the largest <code>window</code> of days between each visit and the one right after it (or today if you are considering the last visit).</p>\n\n<p>Return the result table ordered by <code>user_id</code>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nUserVisits table:\n+---------+------------+\n| user_id | visit_date |\n+---------+------------+\n| 1       | 2020-11-28 |\n| 1       | 2020-10-20 |\n| 1       | 2020-12-3  |\n| 2       | 2020-10-5  |\n| 2       | 2020-12-9  |\n| 3       | 2020-11-11 |\n+---------+------------+\n<strong>Output:</strong> \n+---------+---------------+\n| user_id | biggest_window|\n+---------+---------------+\n| 1       | 39            |\n| 2       | 65            |\n| 3       | 51            |\n+---------+---------------+\n<strong>Explanation:</strong> \nFor the first user, the windows in question are between dates:\n    - 2020-10-20 and 2020-11-28 with a total of 39 days. \n    - 2020-11-28 and 2020-12-3 with a total of 5 days. \n    - 2020-12-3 and 2021-1-1 with a total of 29 days.\nMaking the biggest window the one with 39 days.\nFor the second user, the windows in question are between dates:\n    - 2020-10-5 and 2020-12-9 with a total of 65 days.\n    - 2020-12-9 and 2021-1-1 with a total of 23 days.\nMaking the biggest window the one with 65 days.\nFor the third user, the only window in question is between dates 2020-11-11 and 2021-1-1 with a total of 51 days.\n</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"UserVisits\":[\"user_id\",\"visit_date\"]},\"rows\":{\"UserVisits\":[[\"1\",\"2020-11-28\"],[\"1\",\"2020-10-20\"],[\"1\",\"2020-12-3\"],[\"2\",\"2020-10-5\"],[\"2\",\"2020-12-9\"],[\"3\",\"2020-11-11\"]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef biggest_window(user_visits: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "users-with-two-purchases-within-seven-days", "title": "Users With Two Purchases Within Seven Days", "isPaidOnly": true}]}