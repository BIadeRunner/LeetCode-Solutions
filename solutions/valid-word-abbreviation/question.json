{"questionId": "408", "acRate": 36.215287537464036, "difficulty": "Easy", "freqBar": 87.75347870544906, "frontendQuestionId": "408", "paidOnly": true, "status": "ac", "title": "Valid Word Abbreviation", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "valid-word-abbreviation", "content": "<p>A string can be <strong>abbreviated</strong> by replacing any number of <strong>non-adjacent</strong>, <strong>non-empty</strong> substrings with their lengths. The lengths <strong>should not</strong> have leading zeros.</p>\n\n<p>For example, a string such as <code>&quot;substitution&quot;</code> could be abbreviated as (but not limited to):</p>\n\n<ul>\n\t<li><code>&quot;s10n&quot;</code> (<code>&quot;s <u>ubstitutio</u> n&quot;</code>)</li>\n\t<li><code>&quot;sub4u4&quot;</code> (<code>&quot;sub <u>stit</u> u <u>tion</u>&quot;</code>)</li>\n\t<li><code>&quot;12&quot;</code> (<code>&quot;<u>substitution</u>&quot;</code>)</li>\n\t<li><code>&quot;su3i1u2on&quot;</code> (<code>&quot;su <u>bst</u> i <u>t</u> u <u>ti</u> on&quot;</code>)</li>\n\t<li><code>&quot;substitution&quot;</code> (no substrings replaced)</li>\n</ul>\n\n<p>The following are <strong>not valid</strong> abbreviations:</p>\n\n<ul>\n\t<li><code>&quot;s55n&quot;</code> (<code>&quot;s <u>ubsti</u> <u>tutio</u> n&quot;</code>, the replaced substrings are adjacent)</li>\n\t<li><code>&quot;s010n&quot;</code> (has leading zeros)</li>\n\t<li><code>&quot;s0ubstitution&quot;</code> (replaces an empty substring)</li>\n</ul>\n\n<p>Given a string <code>word</code> and an abbreviation <code>abbr</code>, return <em>whether the string <strong>matches</strong> the given abbreviation</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;internationalization&quot;, abbr = &quot;i12iz4n&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The word &quot;internationalization&quot; can be abbreviated as &quot;i12iz4n&quot; (&quot;i <u>nternational</u> iz <u>atio</u> n&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;apple&quot;, abbr = &quot;a2e&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The word &quot;apple&quot; cannot be abbreviated as &quot;a2e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 20</code></li>\n\t<li><code>word</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= abbr.length &lt;= 10</code></li>\n\t<li><code>abbr</code> consists of lowercase English letters and digits.</li>\n\t<li>All the integers in <code>abbr</code> will fit in a 32-bit integer.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"internationalization\"\n\"i12iz4n\"\n\"apple\"\n\"a2e\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validWordAbbreviation(string word, string abbr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validWordAbbreviation(String word, String abbr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validWordAbbreviation(self, word, abbr):\n        \"\"\"\n        :type word: str\n        :type abbr: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool validWordAbbreviation(char* word, char* abbr) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidWordAbbreviation(string word, string abbr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {string} abbr\n * @return {boolean}\n */\nvar validWordAbbreviation = function(word, abbr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validWordAbbreviation(word: string, abbr: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param String $abbr\n     * @return Boolean\n     */\n    function validWordAbbreviation($word, $abbr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validWordAbbreviation(_ word: String, _ abbr: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validWordAbbreviation(word: String, abbr: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool validWordAbbreviation(String word, String abbr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validWordAbbreviation(word string, abbr string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @param {String} abbr\n# @return {Boolean}\ndef valid_word_abbreviation(word, abbr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validWordAbbreviation(word: String, abbr: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_word_abbreviation(word: String, abbr: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (valid-word-abbreviation word abbr)\n  (-> string? string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec valid_word_abbreviation(Word :: unicode:unicode_binary(), Abbr :: unicode:unicode_binary()) -> boolean().\nvalid_word_abbreviation(Word, Abbr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_word_abbreviation(word :: String.t, abbr :: String.t) :: boolean\n  def valid_word_abbreviation(word, abbr) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-unique-word-abbreviation", "title": "Minimum Unique Word Abbreviation", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "word-abbreviation", "title": "Word Abbreviation", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "check-if-an-original-string-exists-given-two-encoded-strings", "title": "Check if an Original String Exists Given Two Encoded Strings", "isPaidOnly": false}]}