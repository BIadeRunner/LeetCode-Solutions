{"questionId": "1483", "acRate": 58.73404571089345, "difficulty": "Medium", "freqBar": 73.15313299262716, "frontendQuestionId": "1366", "paidOnly": false, "status": "ac", "title": "Rank Teams by Votes", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "rank-teams-by-votes", "content": "<p>In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.</p>\n\n<p>The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.</p>\n\n<p>You are given an array of strings <code>votes</code> which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.</p>\n\n<p>Return <em>a string of all teams <strong>sorted</strong> by the ranking system</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> votes = [&quot;ABC&quot;,&quot;ACB&quot;,&quot;ABC&quot;,&quot;ACB&quot;,&quot;ACB&quot;]\n<strong>Output:</strong> &quot;ACB&quot;\n<strong>Explanation:</strong> \nTeam A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> votes = [&quot;WXYZ&quot;,&quot;XYZW&quot;]\n<strong>Output:</strong> &quot;XWYZ&quot;\n<strong>Explanation:</strong>\nX is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> votes = [&quot;ZMNAGUEDSJYLBOPHRQICWFXTVK&quot;]\n<strong>Output:</strong> &quot;ZMNAGUEDSJYLBOPHRQICWFXTVK&quot;\n<strong>Explanation:</strong> Only one voter, so their votes are used for the ranking.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= votes.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= votes[i].length &lt;= 26</code></li>\n\t<li><code>votes[i].length == votes[j].length</code> for <code>0 &lt;= i, j &lt; votes.length</code>.</li>\n\t<li><code>votes[i][j]</code> is an English <strong>uppercase</strong> letter.</li>\n\t<li>All characters of <code>votes[i]</code> are unique.</li>\n\t<li>All the characters that occur in <code>votes[0]</code> <strong>also occur</strong> in <code>votes[j]</code> where <code>1 &lt;= j &lt; votes.length</code>.</li>\n</ul>\n", "hints": ["Build array rank where rank[i][j] is the number of votes for team i to be the j-th rank.", "Sort the teams by rank array. if rank array is the same for two or more teams, sort them by the ID in ascending order."], "exampleTestcases": "[\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\n[\"WXYZ\",\"XYZW\"]\n[\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string rankTeams(vector<string>& votes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String rankTeams(String[] votes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rankTeams(self, votes):\n        \"\"\"\n        :type votes: List[str]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rankTeams(self, votes: List[str]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* rankTeams(char** votes, int votesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string RankTeams(string[] votes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} votes\n * @return {string}\n */\nvar rankTeams = function(votes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rankTeams(votes: string[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $votes\n     * @return String\n     */\n    function rankTeams($votes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rankTeams(_ votes: [String]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rankTeams(votes: Array<String>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String rankTeams(List<String> votes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func rankTeams(votes []string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} votes\n# @return {String}\ndef rank_teams(votes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rankTeams(votes: Array[String]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rank_teams(votes: Vec<String>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (rank-teams votes)\n  (-> (listof string?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec rank_teams(Votes :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nrank_teams(Votes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec rank_teams(votes :: [String.t]) :: String.t\n  def rank_teams(votes) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "online-election", "title": "Online Election", "isPaidOnly": false}]}