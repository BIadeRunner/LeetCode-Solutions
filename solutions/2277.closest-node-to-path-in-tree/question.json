{"questionId": "2420", "acRate": 62.49701314217443, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2277", "paidOnly": true, "status": "ac", "title": "Closest Node to Path in Tree", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}], "titleSlug": "closest-node-to-path-in-tree", "content": "<p>You are given a positive integer <code>n</code> representing the number of nodes in a tree, numbered from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [node1<sub>i</sub>, node2<sub>i</sub>]</code> denotes that there is a <strong>bidirectional</strong> edge connecting <code>node1<sub>i</sub></code> and <code>node2<sub>i</sub></code> in the tree.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>query</code> of length <code>m</code> where <code>query[i] = [start<sub>i</sub>, end<sub>i</sub>, node<sub>i</sub>]</code> means that for the <code>i<sup>th</sup></code> query, you are tasked with finding the node on the path from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> that is <strong>closest</strong> to <code>node<sub>i</sub></code>.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of length </em><code>m</code><em>, where </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/05/14/image-20220514132158-1.png\" style=\"width: 300px; height: 211px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1],[0,2],[0,3],[1,4],[2,5],[2,6]], query = [[5,3,4],[5,3,6]]\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong>\nThe path from node 5 to node 3 consists of the nodes 5, 2, 0, and 3.\nThe distance between node 4 and node 0 is 2.\nNode 0 is the node on the path closest to node 4, so the answer to the first query is 0.\nThe distance between node 6 and node 2 is 1.\nNode 2 is the node on the path closest to node 6, so the answer to the second query is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/05/14/image-20220514132318-2.png\" style=\"width: 300px; height: 89px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2]], query = [[0,1,2]]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong>\nThe path from node 0 to node 1 consists of the nodes 0, 1.\nThe distance between node 2 and node 1 is 1.\nNode 1 is the node on the path closest to node 2, so the answer to the first query is 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/05/14/image-20220514132333-3.png\" style=\"width: 300px; height: 89px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2]], query = [[0,0,0]]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong>\nThe path from node 0 to node 0 consists of the node 0.\nSince 0 is the only node on the path, the answer to the first query is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= node1<sub>i</sub>, node2<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>node1<sub>i</sub> != node2<sub>i</sub></code></li>\n\t<li><code>1 &lt;= query.length &lt;= 1000</code></li>\n\t<li><code>query[i].length == 3</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub>, node<sub>i</sub> &lt;= n - 1</code></li>\n\t<li>The graph is a tree.</li>\n</ul>\n", "hints": ["For the ith query, find the distance from node_i to every other node in the tree.", "We can use a BFS to find the distances.", "Use DFS to find all the nodes on the path from start_i to end_i."], "exampleTestcases": "7\n[[0,1],[0,2],[0,3],[1,4],[2,5],[2,6]]\n[[5,3,4],[5,3,6]]\n3\n[[0,1],[1,2]]\n[[0,1,2]]\n3\n[[0,1],[1,2]]\n[[0,0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> closestNode(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] closestNode(int n, int[][] edges, int[][] query) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def closestNode(self, n, edges, query):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type query: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def closestNode(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* closestNode(int n, int** edges, int edgesSize, int* edgesColSize, int** query, int querySize, int* queryColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ClosestNode(int n, int[][] edges, int[][] query) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[][]} query\n * @return {number[]}\n */\nvar closestNode = function(n, edges, query) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function closestNode(n: number, edges: number[][], query: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer[][] $query\n     * @return Integer[]\n     */\n    function closestNode($n, $edges, $query) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func closestNode(_ n: Int, _ edges: [[Int]], _ query: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun closestNode(n: Int, edges: Array<IntArray>, query: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> closestNode(int n, List<List<int>> edges, List<List<int>> query) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func closestNode(n int, edges [][]int, query [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer[][]} query\n# @return {Integer[]}\ndef closest_node(n, edges, query)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def closestNode(n: Int, edges: Array[Array[Int]], query: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn closest_node(n: i32, edges: Vec<Vec<i32>>, query: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (closest-node n edges query)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec closest_node(N :: integer(), Edges :: [[integer()]], Query :: [[integer()]]) -> [integer()].\nclosest_node(N, Edges, Query) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec closest_node(n :: integer, edges :: [[integer]], query :: [[integer]]) :: [integer]\n  def closest_node(n, edges, query) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "count-number-of-possible-root-nodes", "title": "Count Number of Possible Root Nodes", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "isPaidOnly": false}]}