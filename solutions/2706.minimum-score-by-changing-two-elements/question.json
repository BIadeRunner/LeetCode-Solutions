{"question_id": "2706", "problem_slug": "minimum-score-by-changing-two-elements", "problem_title": "Minimum Score by Changing Two Elements", "content": "You are given an integer array nums.\n\nThe low score of nums is the minimum absolute difference between any two integers.\nThe high score of nums is the maximum absolute difference between any two integers.\nThe score of nums is the sum of the high and low scores.\n\nReturn the minimum score after changing two elements of nums.\n \nExample 1:\n\nInput: nums = [1,4,7,8,5]\nOutput: 3\nExplanation:\n\nChange nums[0] and nums[1] to be 6 so that nums becomes [6,6,7,8,5].\nThe low score is the minimum absolute difference: |6 - 6| = 0.\nThe high score is the maximum absolute difference: |8 - 5| = 3.\nThe sum of high and low score is 3.\n\n\nExample 2:\n\nInput: nums = [1,4,3]\nOutput: 0\nExplanation:\n\nChange nums[1] and nums[2] to 1 so that nums becomes [1,1,1].\nThe sum of maximum absolute difference and minimum absolute difference is 0.\n\n\n \nConstraints:\n\n3 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n", "hints": ["Changing the minimum or maximum values will only minimize the score.", "Think about what all possible pairs of minimum and maximum values can be changed to form the minimum score."], "exampleTestcases": "[1,4,7,8,5]\n[1,4,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizeSum(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimizeSum(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimizeSum(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimizeSum(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimizeSum = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizeSum(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimizeSum($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizeSum(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizeSum(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimizeSum(List<int> nums) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizeSum(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimize_sum(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizeSum(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimize-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimize_sum(Nums :: [integer()]) -> integer().\nminimize_sum(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_sum(nums :: [integer]) :: integer\n  def minimize_sum(nums) do\n    \n  end\nend"}}}