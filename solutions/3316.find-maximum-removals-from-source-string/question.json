{"questionId": "3487", "acRate": 35.62594710856919, "difficulty": "Medium", "freqBar": 6.709980218567911, "frontendQuestionId": "3316", "paidOnly": false, "status": "ac", "title": "Find Maximum Removals From Source String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "find-maximum-removals-from-source-string", "content": "<p>You are given a string <code>source</code> of size <code>n</code>, a string <code>pattern</code> that is a <span data-keyword=\"subsequence-string\">subsequence</span> of <code>source</code>, and a <strong>sorted</strong> integer array <code>targetIndices</code> that contains <strong>distinct</strong> numbers in the range <code>[0, n - 1]</code>.</p>\n\n<p>We define an <strong>operation</strong> as removing a character at an index <code>idx</code> from <code>source</code> such that:</p>\n\n<ul>\n\t<li><code>idx</code> is an element of <code>targetIndices</code>.</li>\n\t<li><code>pattern</code> remains a <span data-keyword=\"subsequence-string\">subsequence</span> of <code>source</code> after removing the character.</li>\n</ul>\n\n<p>Performing an operation <strong>does not</strong> change the indices of the other characters in <code>source</code>. For example, if you remove <code>&#39;c&#39;</code> from <code>&quot;acb&quot;</code>, the character at index 2 would still be <code>&#39;b&#39;</code>.</p>\n\n<p>Return the <strong>maximum</strong> number of <em>operations</em> that can be performed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;abbaa&quot;, pattern = &quot;aba&quot;, </span>targetIndices<span class=\"example-io\"> = [0,1,2]</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can&#39;t remove <code>source[0]</code> but we can do either of these two operations:</p>\n\n<ul>\n\t<li>Remove <code>source[1]</code>, so that <code>source</code> becomes <code>&quot;a_baa&quot;</code>.</li>\n\t<li>Remove <code>source[2]</code>, so that <code>source</code> becomes <code>&quot;ab_aa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;bcda&quot;, pattern = &quot;d&quot;, </span>targetIndices<span class=\"example-io\"> = [0,3]</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can remove <code>source[0]</code> and <code>source[3]</code> in two operations.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = &quot;dda&quot;, pattern = &quot;dda&quot;, </span>targetIndices<span class=\"example-io\"> = [0,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can&#39;t remove any character from <code>source</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">source = </span>&quot;yeyeykyded&quot;<span class=\"example-io\">, pattern = </span>&quot;yeyyd&quot;<span class=\"example-io\">, </span>targetIndices<span class=\"example-io\"> = </span>[0,2,3,4]</p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can remove <code>source[2]</code> and <code>source[3]</code> in two operations.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == source.length &lt;= 3 * 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= pattern.length &lt;= n</code></li>\n\t<li><code>1 &lt;= targetIndices.length &lt;= n</code></li>\n\t<li><code>targetIndices</code> is sorted in ascending order.</li>\n\t<li>The input is generated such that <code>targetIndices</code> contains distinct elements in the range <code>[0, n - 1]</code>.</li>\n\t<li><code>source</code> and <code>pattern</code> consist only of lowercase English letters.</li>\n\t<li>The input is generated such that <code>pattern</code> appears as a subsequence in <code>source</code>.</li>\n</ul>\n", "hints": ["Use dynamic programming.", "At each index in <code>targetIndices</code>, make the choice to remove or not remove the character."], "exampleTestcases": "\"abbaa\"\n\"aba\"\n[0,1,2]\n\"bcda\"\n\"d\"\n[0,3]\n\"dda\"\n\"dda\"\n[0,1,2]\n\"yeyeykyded\"\n\"yeyyd\"\n[0,2,3,4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxRemovals(string source, string pattern, vector<int>& targetIndices) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxRemovals(String source, String pattern, int[] targetIndices) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxRemovals(self, source, pattern, targetIndices):\n        \"\"\"\n        :type source: str\n        :type pattern: str\n        :type targetIndices: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxRemovals(self, source: str, pattern: str, targetIndices: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxRemovals(char* source, char* pattern, int* targetIndices, int targetIndicesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxRemovals(string source, string pattern, int[] targetIndices) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} source\n * @param {string} pattern\n * @param {number[]} targetIndices\n * @return {number}\n */\nvar maxRemovals = function(source, pattern, targetIndices) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxRemovals(source: string, pattern: string, targetIndices: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $source\n     * @param String $pattern\n     * @param Integer[] $targetIndices\n     * @return Integer\n     */\n    function maxRemovals($source, $pattern, $targetIndices) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxRemovals(_ source: String, _ pattern: String, _ targetIndices: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxRemovals(source: String, pattern: String, targetIndices: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxRemovals(String source, String pattern, List<int> targetIndices) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxRemovals(source string, pattern string, targetIndices []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} source\n# @param {String} pattern\n# @param {Integer[]} target_indices\n# @return {Integer}\ndef max_removals(source, pattern, target_indices)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxRemovals(source: String, pattern: String, targetIndices: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_removals(source: String, pattern: String, target_indices: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-removals source pattern targetIndices)\n  (-> string? string? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_removals(Source :: unicode:unicode_binary(), Pattern :: unicode:unicode_binary(), TargetIndices :: [integer()]) -> integer().\nmax_removals(Source, Pattern, TargetIndices) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_removals(source :: String.t, pattern :: String.t, target_indices :: [integer]) :: integer\n  def max_removals(source, pattern, target_indices) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "delete-characters-to-make-fancy-string", "title": "Delete Characters to Make Fancy String", "isPaidOnly": false}]}