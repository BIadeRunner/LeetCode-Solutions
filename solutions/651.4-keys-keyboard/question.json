{"question_id": "651", "problem_slug": "4-keys-keyboard", "problem_title": "4 Keys Keyboard", "content": "Imagine you have a special keyboard with the following keys:\n\nA: Print one 'A' on the screen.\nCtrl-A: Select the whole screen.\nCtrl-C: Copy selection to buffer.\nCtrl-V: Print buffer on screen appending it after what has already been printed.\n\nGiven an integer n, return the maximum number of 'A' you can print on the screen with at most n presses on the keys.\n \nExample 1:\n\nInput: n = 3\nOutput: 3\nExplanation: We can at most get 3 A's on screen by pressing the following key sequence:\nA, A, A\n\nExample 2:\n\nInput: n = 7\nOutput: 9\nExplanation: We can at most get 9 A's on screen by pressing following key sequence:\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\n\n \nConstraints:\n\n1 <= n <= 50\n\n", "hints": [], "exampleTestcases": "3\n7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxA(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxA(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxA(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxA(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxA(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxA(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar maxA = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxA(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function maxA($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxA(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxA(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxA(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxA(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef max_a(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxA(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_a(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-a n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_a(N :: integer()) -> integer().\nmax_a(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_a(n :: integer) :: integer\n  def max_a(n) do\n    \n  end\nend"}}}