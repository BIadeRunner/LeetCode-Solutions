{"question_id": "2733", "problem_slug": "sleep", "problem_title": "Sleep", "content": "Given a positive integer millis, write an asynchronous function that sleeps for millis milliseconds. It can resolve any value.\n \nExample 1:\n\nInput: millis = 100\nOutput: 100\nExplanation: It should return a promise that resolves after 100ms.\nlet t = Date.now();\nsleep(100).then(() => {\n  console.log(Date.now() - t); // 100\n});\n\nExample 2:\n\nInput: millis = 200\nOutput: 200\nExplanation: It should return a promise that resolves after 200ms.\n\n \nConstraints:\n\n1 <= millis <= 1000\n\n", "hints": ["In Javascript, you can execute code after some delay with the setTimeout(fn, sleepTime) function.", "An async function is defined as function which returns a Promise.", "To create a Promise, you can code new Promise((resolve, reject) => {}). When you want the function to return a value, code resolve(value) inside the callback."], "exampleTestcases": "100\n200", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} millis\n * @return {Promise}\n */\nasync function sleep(millis) {\n    \n}\n\n/** \n * let t = Date.now()\n * sleep(100).then(() => console.log(Date.now() - t)) // 100\n */"}, "TypeScript": {"langSlug": "typescript", "code": "async function sleep(millis: number): Promise<void> {\n    \n}\n\n\n/** \n * let t = Date.now()\n * sleep(100).then(() => console.log(Date.now() - t)) // 100\n */"}}}