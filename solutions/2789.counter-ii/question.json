{"question_id": "2789", "problem_slug": "counter-ii", "problem_title": "Counter II", "content": "Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.\nThe three functions are:\n\nincrement() increases the current value by 1 and then returns it.\ndecrement() reduces the current value by 1 and then returns it.\nreset() sets the current value to init and then returns it.\n\n \nExample 1:\n\nInput: init = 5, calls = [\"increment\",\"reset\",\"decrement\"]\nOutput: [6,5,4]\nExplanation:\nconst counter = createCounter(5);\ncounter.increment(); // 6\ncounter.reset(); // 5\ncounter.decrement(); // 4\n\nExample 2:\n\nInput: init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]\nOutput: [1,2,1,0,0]\nExplanation:\nconst counter = createCounter(0);\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.decrement(); // 1\ncounter.reset(); // 0\ncounter.reset(); // 0\n\n \nConstraints:\n\n-1000 <= init <= 1000\n0 <= calls.length <= 1000\ncalls[i] is one of \"increment\", \"decrement\" and \"reset\"\n\n", "hints": ["You can return an object with methods.", "Initialize a variable for currentCount. Inside these methods, add the appropriate logic which mutates currentCount."], "exampleTestcases": "5\n[\"increment\",\"reset\",\"decrement\"]\n0\n[\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {integer} init\n * @return { increment: Function, decrement: Function, reset: Function }\n */\nvar createCounter = function(init) {\n    \n};\n\n/**\n * const counter = createCounter(5)\n * counter.increment(); // 6\n * counter.reset(); // 5\n * counter.decrement(); // 4\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type Counter = {\n    increment: () => number,\n    decrement: () => number,\n    reset: () => number,\n}\n\nfunction createCounter(init: number): Counter {\n    \n};\n\n/**\n * const counter = createCounter(5)\n * counter.increment(); // 6\n * counter.reset(); // 5\n * counter.decrement(); // 4\n */"}}}