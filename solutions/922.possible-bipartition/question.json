{"question_id": "922", "problem_slug": "possible-bipartition", "problem_title": "Possible Bipartition", "content": "We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\n \nExample 1:\n\nInput: n = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: The first group has [1,4], and the second group has [2,3].\n\nExample 2:\n\nInput: n = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\nExplanation: We need at least 3 groups to divide them. We cannot put them in two groups.\n\n \nConstraints:\n\n1 <= n <= 2000\n0 <= dislikes.length <= 104\ndislikes[i].length == 2\n1 <= ai < bi <= n\nAll the pairs of dislikes are unique.\n\n", "hints": [], "exampleTestcases": "4\n[[1,2],[1,3],[2,4]]\n3\n[[1,2],[1,3],[2,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean possibleBipartition(int n, int[][] dislikes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def possibleBipartition(self, n, dislikes):\n        \"\"\"\n        :type n: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool possibleBipartition(int n, int** dislikes, int dislikesSize, int* dislikesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool PossibleBipartition(int n, int[][] dislikes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} dislikes\n * @return {boolean}\n */\nvar possibleBipartition = function(n, dislikes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function possibleBipartition(n: number, dislikes: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $dislikes\n     * @return Boolean\n     */\n    function possibleBipartition($n, $dislikes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func possibleBipartition(_ n: Int, _ dislikes: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun possibleBipartition(n: Int, dislikes: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool possibleBipartition(int n, List<List<int>> dislikes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func possibleBipartition(n int, dislikes [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def possibleBipartition(n: Int, dislikes: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn possible_bipartition(n: i32, dislikes: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (possible-bipartition n dislikes)\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec possible_bipartition(N :: integer(), Dislikes :: [[integer()]]) -> boolean().\npossible_bipartition(N, Dislikes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec possible_bipartition(n :: integer, dislikes :: [[integer]]) :: boolean\n  def possible_bipartition(n, dislikes) do\n    \n  end\nend"}}}