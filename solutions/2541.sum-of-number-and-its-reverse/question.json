{"question_id": "2541", "problem_slug": "sum-of-number-and-its-reverse", "problem_title": "Sum of Number and Its Reverse", "content": "Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.\n \nExample 1:\n\nInput: num = 443\nOutput: true\nExplanation: 172 + 271 = 443 so we return true.\n\nExample 2:\n\nInput: num = 63\nOutput: false\nExplanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.\n\nExample 3:\n\nInput: num = 181\nOutput: true\nExplanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.\n\n \nConstraints:\n\n0 <= num <= 105\n\n", "hints": ["The constraints are small enough that we can check every number.", "To reverse a number, first convert it to a string. Then, create a new string that is the reverse of the first one. Finally, convert the new string back into a number."], "exampleTestcases": "443\n63\n181", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool sumOfNumberAndReverse(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean sumOfNumberAndReverse(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOfNumberAndReverse(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOfNumberAndReverse(self, num: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool sumOfNumberAndReverse(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool SumOfNumberAndReverse(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar sumOfNumberAndReverse = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOfNumberAndReverse(num: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function sumOfNumberAndReverse($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOfNumberAndReverse(_ num: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOfNumberAndReverse(num: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool sumOfNumberAndReverse(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOfNumberAndReverse(num int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef sum_of_number_and_reverse(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOfNumberAndReverse(num: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_number_and_reverse(num: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-of-number-and-reverse num)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_of_number_and_reverse(Num :: integer()) -> boolean().\nsum_of_number_and_reverse(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_of_number_and_reverse(num :: integer) :: boolean\n  def sum_of_number_and_reverse(num) do\n    \n  end\nend"}}}