{"question_id": "1133", "problem_slug": "last-substring-in-lexicographical-order", "problem_title": "Last Substring in Lexicographical Order", "content": "Given a string s, return the last substring of s in lexicographical order.\n \nExample 1:\n\nInput: s = \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n\nExample 2:\n\nInput: s = \"leetcode\"\nOutput: \"tcode\"\n\n \nConstraints:\n\n1 <= s.length <= 4 * 105\ns contains only lowercase English letters.\n\n", "hints": ["Assume that the answer is a sub-string from index i to j. If you add the character at index j+1 you get a better answer.", "The answer is always a suffix of the given string.", "Since the limits are high, we need an efficient data structure.", "Use suffix array."], "exampleTestcases": "\"abab\"\n\"leetcode\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string lastSubstring(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String lastSubstring(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def lastSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def lastSubstring(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* lastSubstring(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LastSubstring(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar lastSubstring = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function lastSubstring(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function lastSubstring($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func lastSubstring(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun lastSubstring(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String lastSubstring(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func lastSubstring(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef last_substring(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def lastSubstring(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn last_substring(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (last-substring s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec last_substring(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlast_substring(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec last_substring(s :: String.t) :: String.t\n  def last_substring(s) do\n    \n  end\nend"}}}