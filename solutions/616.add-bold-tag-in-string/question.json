{"question_id": "616", "problem_slug": "add-bold-tag-in-string", "problem_title": "Add Bold Tag in String", "content": "You are given a string s and an array of strings words.\nYou should add a closed pair of bold tag <b> and </b> to wrap the substrings in s that exist in words.\n\nIf two such substrings overlap, you should wrap them together with only one pair of closed bold-tag.\nIf two substrings wrapped by bold tags are consecutive, you should combine them.\n\nReturn s after adding the bold tags.\n \nExample 1:\n\nInput: s = \"abcxyz123\", words = [\"abc\",\"123\"]\nOutput: \"<b>abc</b>xyz<b>123</b>\"\nExplanation: The two strings of words are substrings of s as following: \"abcxyz123\".\nWe add <b> before each substring and </b> after each substring.\n\nExample 2:\n\nInput: s = \"aaabbb\", words = [\"aa\",\"b\"]\nOutput: \"<b>aaabbb</b>\"\nExplanation: \n\"aa\" appears as a substring two times: \"aaabbb\" and \"aaabbb\".\n\"b\" appears as a substring three times: \"aaabbb\", \"aaabbb\", and \"aaabbb\".\nWe add <b> before each substring and </b> after each substring: \"<b>a<b>a</b>a</b><b>b</b><b>b</b><b>b</b>\".\nSince the first two <b>'s overlap, we merge them: \"<b>aaa</b><b>b</b><b>b</b><b>b</b>\".\nSince now the four <b>'s are consecutive, we merge them: \"<b>aaabbb</b>\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\n0 <= words.length <= 100\n1 <= words[i].length <= 1000\ns and words[i] consist of English letters and digits.\nAll the values of words are unique.\n\n \nNote: This question is the same as 758. Bold Words in String.\n", "hints": [], "exampleTestcases": "\"abcxyz123\"\n[\"abc\",\"123\"]\n\"aaabbb\"\n[\"aa\",\"b\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string addBoldTag(string s, vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String addBoldTag(String s, String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def addBoldTag(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def addBoldTag(self, s: str, words: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* addBoldTag(char* s, char** words, int wordsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AddBoldTag(string s, string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {string}\n */\nvar addBoldTag = function(s, words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function addBoldTag(s: string, words: string[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return String\n     */\n    function addBoldTag($s, $words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func addBoldTag(_ s: String, _ words: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun addBoldTag(s: String, words: Array<String>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String addBoldTag(String s, List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func addBoldTag(s string, words []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} words\n# @return {String}\ndef add_bold_tag(s, words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def addBoldTag(s: String, words: Array[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn add_bold_tag(s: String, words: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (add-bold-tag s words)\n  (-> string? (listof string?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec add_bold_tag(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nadd_bold_tag(S, Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec add_bold_tag(s :: String.t, words :: [String.t]) :: String.t\n  def add_bold_tag(s, words) do\n    \n  end\nend"}}}