{"questionId": "1149", "acRate": 79.83599032537118, "difficulty": "Easy", "freqBar": 34.690515807560665, "frontendQuestionId": "1213", "paidOnly": true, "status": "ac", "title": "Intersection of Three Sorted Arrays", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "intersection-of-three-sorted-arrays", "content": "<p>Given three integer arrays <code>arr1</code>, <code>arr2</code> and <code>arr3</code>&nbsp;<strong>sorted</strong> in <strong>strictly increasing</strong> order, return a sorted array of <strong>only</strong>&nbsp;the&nbsp;integers that appeared in <strong>all</strong> three arrays.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\n<strong>Output:</strong> [1,5]\n<strong>Explanation: </strong>Only 1 and 5 appeared in the three arrays.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length, arr3.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i], arr3[i] &lt;= 2000</code></li>\n</ul>\n", "hints": ["Count the frequency of all elements in the three arrays.", "The elements that appeared in all the arrays would have a frequency of 3."], "exampleTestcases": "[1,2,3,4,5]\n[1,2,5,7,9]\n[1,3,4,5,8]\n[197,418,523,876,1356]\n[501,880,1593,1710,1870]\n[521,682,1337,1395,1764]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> arraysIntersection(vector<int>& arr1, vector<int>& arr2, vector<int>& arr3) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> arraysIntersection(int[] arr1, int[] arr2, int[] arr3) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arraysIntersection(self, arr1, arr2, arr3):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type arr3: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* arraysIntersection(int* arr1, int arr1Size, int* arr2, int arr2Size, int* arr3, int arr3Size, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> ArraysIntersection(int[] arr1, int[] arr2, int[] arr3) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @param {number[]} arr3\n * @return {number[]}\n */\nvar arraysIntersection = function(arr1, arr2, arr3) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arraysIntersection(arr1: number[], arr2: number[], arr3: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @param Integer[] $arr3\n     * @return Integer[]\n     */\n    function arraysIntersection($arr1, $arr2, $arr3) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arraysIntersection(_ arr1: [Int], _ arr2: [Int], _ arr3: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arraysIntersection(arr1: IntArray, arr2: IntArray, arr3: IntArray): List<Int> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> arraysIntersection(List<int> arr1, List<int> arr2, List<int> arr3) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func arraysIntersection(arr1 []int, arr2 []int, arr3 []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @param {Integer[]} arr3\n# @return {Integer[]}\ndef arrays_intersection(arr1, arr2, arr3)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arraysIntersection(arr1: Array[Int], arr2: Array[Int], arr3: Array[Int]): List[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn arrays_intersection(arr1: Vec<i32>, arr2: Vec<i32>, arr3: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (arrays-intersection arr1 arr2 arr3)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec arrays_intersection(Arr1 :: [integer()], Arr2 :: [integer()], Arr3 :: [integer()]) -> [integer()].\narrays_intersection(Arr1, Arr2, Arr3) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec arrays_intersection(arr1 :: [integer], arr2 :: [integer], arr3 :: [integer]) :: [integer]\n  def arrays_intersection(arr1, arr2, arr3) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "intersection-of-two-arrays", "title": "Intersection of Two Arrays", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "intersection-of-multiple-arrays", "title": "Intersection of Multiple Arrays", "isPaidOnly": false}]}