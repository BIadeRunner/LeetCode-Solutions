{"questionId": "2015", "acRate": 57.53083772960805, "difficulty": "Easy", "freqBar": 46.10431562899888, "frontendQuestionId": "1886", "paidOnly": false, "status": "ac", "title": "Determine Whether Matrix Can Be Obtained By Rotation", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "determine-whether-matrix-can-be-obtained-by-rotation", "content": "<p>Given two <code>n x n</code> binary matrices <code>mat</code> and <code>target</code>, return <code>true</code><em> if it is possible to make </em><code>mat</code><em> equal to </em><code>target</code><em> by <strong>rotating</strong> </em><code>mat</code><em> in <strong>90-degree increments</strong>, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid3.png\" style=\"width: 301px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>We can rotate mat 90 degrees clockwise to make mat equal target.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/20/grid4.png\" style=\"width: 301px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to make mat equal to target by rotating mat.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/26/grid4.png\" style=\"width: 661px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>We can rotate mat 90 degrees clockwise two times to make mat equal target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == mat.length == target.length</code></li>\n\t<li><code>n == mat[i].length == target[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>mat[i][j]</code> and <code>target[i][j]</code> are either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["What is the maximum number of rotations you have to check?", "Is there a formula you can use to rotate a matrix 90 degrees?"], "exampleTestcases": "[[0,1],[1,0]]\n[[1,0],[0,1]]\n[[0,1],[1,1]]\n[[1,0],[0,1]]\n[[0,0,0],[0,1,0],[1,1,1]]\n[[1,1,1],[0,1,0],[0,0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean findRotation(int[][] mat, int[][] target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRotation(self, mat, target):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type target: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool findRotation(int** mat, int matSize, int* matColSize, int** target, int targetSize, int* targetColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool FindRotation(int[][] mat, int[][] target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @param {number[][]} target\n * @return {boolean}\n */\nvar findRotation = function(mat, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRotation(mat: number[][], target: number[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer[][] $target\n     * @return Boolean\n     */\n    function findRotation($mat, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRotation(_ mat: [[Int]], _ target: [[Int]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRotation(mat: Array<IntArray>, target: Array<IntArray>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool findRotation(List<List<int>> mat, List<List<int>> target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findRotation(mat [][]int, target [][]int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @param {Integer[][]} target\n# @return {Boolean}\ndef find_rotation(mat, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRotation(mat: Array[Array[Int]], target: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_rotation(mat: Vec<Vec<i32>>, target: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-rotation mat target)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_rotation(Mat :: [[integer()]], Target :: [[integer()]]) -> boolean().\nfind_rotation(Mat, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_rotation(mat :: [[integer]], target :: [[integer]]) :: boolean\n  def find_rotation(mat, target) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "rotate-image", "title": "Rotate Image", "isPaidOnly": false}]}