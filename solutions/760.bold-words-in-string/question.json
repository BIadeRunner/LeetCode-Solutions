{"question_id": "760", "problem_slug": "bold-words-in-string", "problem_title": "Bold Words in String", "content": "Given an array of keywords words and a string s, make all appearances of all keywords words[i] in s bold. Any letters between <b> and </b> tags become bold.\nReturn s after adding the bold tags. The returned string should use the least number of tags possible, and the tags should form a valid combination.\n \nExample 1:\n\nInput: words = [\"ab\",\"bc\"], s = \"aabcd\"\nOutput: \"a<b>abc</b>d\"\nExplanation: Note that returning \"a<b>a<b>b</b>c</b>d\" would use more tags, so it is incorrect.\n\nExample 2:\n\nInput: words = [\"ab\",\"cb\"], s = \"aabcd\"\nOutput: \"a<b>ab</b>cd\"\n\n \nConstraints:\n\n1 <= s.length <= 500\n0 <= words.length <= 50\n1 <= words[i].length <= 10\ns and words[i] consist of lowercase English letters.\n\n \nNote: This question is the same as 616. Add Bold Tag in String.\n", "hints": ["First, determine which letters are bold and store that information in mask[i] = if i-th character is bold.\r\nThen, insert the tags at the beginning and end of groups.  The start of a group is if and only if (mask[i] and (i == 0 or not mask[i-1])), and the end of a group is similar."], "exampleTestcases": "[\"ab\",\"bc\"]\n\"aabcd\"\n[\"ab\",\"cb\"]\n\"aabcd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string boldWords(vector<string>& words, string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String boldWords(String[] words, String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def boldWords(self, words, s):\n        \"\"\"\n        :type words: List[str]\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def boldWords(self, words: List[str], s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* boldWords(char** words, int wordsSize, char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string BoldWords(string[] words, string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} s\n * @return {string}\n */\nvar boldWords = function(words, s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function boldWords(words: string[], s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $s\n     * @return String\n     */\n    function boldWords($words, $s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func boldWords(_ words: [String], _ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun boldWords(words: Array<String>, s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String boldWords(List<String> words, String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func boldWords(words []string, s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} s\n# @return {String}\ndef bold_words(words, s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def boldWords(words: Array[String], s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn bold_words(words: Vec<String>, s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (bold-words words s)\n  (-> (listof string?) string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec bold_words(Words :: [unicode:unicode_binary()], S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nbold_words(Words, S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec bold_words(words :: [String.t], s :: String.t) :: String.t\n  def bold_words(words, s) do\n    \n  end\nend"}}}