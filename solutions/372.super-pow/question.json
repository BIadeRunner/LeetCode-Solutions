{"question_id": "372", "problem_slug": "super-pow", "problem_title": "Super Pow", "content": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n \nExample 1:\n\nInput: a = 2, b = [3]\nOutput: 8\n\nExample 2:\n\nInput: a = 2, b = [1,0]\nOutput: 1024\n\nExample 3:\n\nInput: a = 1, b = [4,3,3,8,5,2]\nOutput: 1\n\n \nConstraints:\n\n1 <= a <= 231 - 1\n1 <= b.length <= 2000\n0 <= b[i] <= 9\nb does not contain leading zeros.\n\n", "hints": [], "exampleTestcases": "2\n[3]\n2\n[1,0]\n1\n[4,3,3,8,5,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int superPow(int a, vector<int>& b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int superPow(int a, int[] b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def superPow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int superPow(int a, int* b, int bSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SuperPow(int a, int[] b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number[]} b\n * @return {number}\n */\nvar superPow = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function superPow(a: number, b: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer[] $b\n     * @return Integer\n     */\n    function superPow($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func superPow(_ a: Int, _ b: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun superPow(a: Int, b: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int superPow(int a, List<int> b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func superPow(a int, b []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer[]} b\n# @return {Integer}\ndef super_pow(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def superPow(a: Int, b: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn super_pow(a: i32, b: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (super-pow a b)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec super_pow(A :: integer(), B :: [integer()]) -> integer().\nsuper_pow(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec super_pow(a :: integer, b :: [integer]) :: integer\n  def super_pow(a, b) do\n    \n  end\nend"}}}