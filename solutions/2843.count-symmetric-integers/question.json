{"questionId": "2998", "acRate": 74.63395995720617, "difficulty": "Easy", "freqBar": 21.163882230770763, "frontendQuestionId": "2843", "paidOnly": false, "status": "ac", "title": "  Count Symmetric Integers", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "count-symmetric-integers", "content": "<p>You are given two positive integers <code>low</code> and <code>high</code>.</p>\n\n<p>An integer <code>x</code> consisting of <code>2 * n</code> digits is <strong>symmetric</strong> if the sum of the first <code>n</code> digits of <code>x</code> is equal to the sum of the last <code>n</code> digits of <code>x</code>. Numbers with an odd number of digits are never symmetric.</p>\n\n<p>Return <em>the <strong>number of symmetric</strong> integers in the range</em> <code>[low, high]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 1, high = 100\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 1200, high = 1230\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["<div class=\"_1l1MA\">Iterate over all numbers from <code>low</code> to <code>high</code></div>", "<div class=\"_1l1MA\">Convert each number to a string and compare the sum of the first half with that of the second.</div>"], "exampleTestcases": "1\n100\n1200\n1230", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSymmetricIntegers(int low, int high) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countSymmetricIntegers(int low, int high) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countSymmetricIntegers(self, low, high):\n        \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countSymmetricIntegers(int low, int high) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountSymmetricIntegers(int low, int high) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar countSymmetricIntegers = function(low, high) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countSymmetricIntegers(low: number, high: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer\n     */\n    function countSymmetricIntegers($low, $high) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countSymmetricIntegers(_ low: Int, _ high: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countSymmetricIntegers(low: Int, high: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countSymmetricIntegers(int low, int high) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countSymmetricIntegers(low int, high int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} low\n# @param {Integer} high\n# @return {Integer}\ndef count_symmetric_integers(low, high)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countSymmetricIntegers(low: Int, high: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_symmetric_integers(low: i32, high: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-symmetric-integers low high)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_symmetric_integers(Low :: integer(), High :: integer()) -> integer().\ncount_symmetric_integers(Low, High) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_symmetric_integers(low :: integer, high :: integer) :: integer\n  def count_symmetric_integers(low, high) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "palindrome-number", "title": "Palindrome Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "sum-of-digits-in-base-k", "title": "Sum of Digits in Base K", "isPaidOnly": false}]}