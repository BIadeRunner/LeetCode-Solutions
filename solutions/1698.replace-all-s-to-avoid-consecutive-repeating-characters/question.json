{"question_id": "1698", "problem_slug": "replace-all-s-to-avoid-consecutive-repeating-characters", "problem_title": "Replace All ?'s to Avoid Consecutive Repeating Characters", "content": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\nReturn the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.\n \nExample 1:\n\nInput: s = \"?zs\"\nOutput: \"azs\"\nExplanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".\n\nExample 2:\n\nInput: s = \"ubv?w\"\nOutput: \"ubvaw\"\nExplanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".\n\n \nConstraints:\n\n1 <= s.length <= 100\ns consist of lowercase English letters and '?'.\n\n", "hints": ["Processing string from left to right, whenever you get a ‘?’, check left character and right character, and select a character not equal to either of them", "Do take care to compare with replaced occurrence of ‘?’ when checking the left character."], "exampleTestcases": "\"?zs\"\n\"ubv?w\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string modifyString(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String modifyString(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def modifyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def modifyString(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* modifyString(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ModifyString(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar modifyString = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function modifyString(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function modifyString($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func modifyString(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun modifyString(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String modifyString(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func modifyString(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef modify_string(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def modifyString(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn modify_string(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (modify-string s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec modify_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmodify_string(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec modify_string(s :: String.t) :: String.t\n  def modify_string(s) do\n    \n  end\nend"}}}