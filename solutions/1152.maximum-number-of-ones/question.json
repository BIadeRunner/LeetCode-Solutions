{"question_id": "1152", "problem_slug": "maximum-number-of-ones", "problem_title": "Maximum Number of Ones", "content": "Consider a matrix M with dimensions width * height, such that every cell has value 0 or 1, and any square sub-matrix of M of size sideLength * sideLength has at most maxOnes ones.\nReturn the maximum possible number of ones that the matrix M can have.\n \nExample 1:\n\nInput: width = 3, height = 3, sideLength = 2, maxOnes = 1\nOutput: 4\nExplanation:\nIn a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.\nThe best solution that has 4 ones is:\n[1,0,1]\n[0,0,0]\n[1,0,1]\n\nExample 2:\n\nInput: width = 3, height = 3, sideLength = 2, maxOnes = 2\nOutput: 6\nExplanation:\n[1,0,1]\n[1,0,1]\n[1,0,1]\n\n \nConstraints:\n\n1 <= width, height <= 100\n1 <= sideLength <= width, height\n0 <= maxOnes <= sideLength * sideLength\n\n", "hints": ["Think of a greedy mathematical solution.", "Say you choose to set some cell (i, j) to 1, all cells (x, y) such that i % sideLength == x % sideLength and j % sideLength == y % sideLength can also be set to 1 without increasing the max number of ones in a sub-matrix.", "In one move, choose to set all the cells with some modulus (i % sideLength, j % sideLength) to 1.", "Choose the cells with max frequency."], "exampleTestcases": "3\n3\n2\n1\n3\n3\n2\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumNumberOfOnes(self, width, height, sideLength, maxOnes):\n        \"\"\"\n        :type width: int\n        :type height: int\n        :type sideLength: int\n        :type maxOnes: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumNumberOfOnes(self, width: int, height: int, sideLength: int, maxOnes: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} width\n * @param {number} height\n * @param {number} sideLength\n * @param {number} maxOnes\n * @return {number}\n */\nvar maximumNumberOfOnes = function(width, height, sideLength, maxOnes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumNumberOfOnes(width: number, height: number, sideLength: number, maxOnes: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $width\n     * @param Integer $height\n     * @param Integer $sideLength\n     * @param Integer $maxOnes\n     * @return Integer\n     */\n    function maximumNumberOfOnes($width, $height, $sideLength, $maxOnes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumNumberOfOnes(_ width: Int, _ height: Int, _ sideLength: Int, _ maxOnes: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumNumberOfOnes(width: Int, height: Int, sideLength: Int, maxOnes: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumNumberOfOnes(width int, height int, sideLength int, maxOnes int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} width\n# @param {Integer} height\n# @param {Integer} side_length\n# @param {Integer} max_ones\n# @return {Integer}\ndef maximum_number_of_ones(width, height, side_length, max_ones)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumNumberOfOnes(width: Int, height: Int, sideLength: Int, maxOnes: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_number_of_ones(width: i32, height: i32, side_length: i32, max_ones: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-number-of-ones width height sideLength maxOnes)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_number_of_ones(Width :: integer(), Height :: integer(), SideLength :: integer(), MaxOnes :: integer()) -> integer().\nmaximum_number_of_ones(Width, Height, SideLength, MaxOnes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_number_of_ones(width :: integer, height :: integer, side_length :: integer, max_ones :: integer) :: integer\n  def maximum_number_of_ones(width, height, side_length, max_ones) do\n    \n  end\nend"}}}