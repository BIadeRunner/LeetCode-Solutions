{"question_id": "1031", "problem_slug": "add-to-array-form-of-integer", "problem_title": "Add to Array-Form of Integer", "content": "The array-form of an integer num is an array representing its digits in left to right order.\n\nFor example, for num = 1321, the array form is [1,3,2,1].\n\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\n \nExample 1:\n\nInput: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234\n\nExample 2:\n\nInput: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455\n\nExample 3:\n\nInput: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021\n\n \nConstraints:\n\n1 <= num.length <= 104\n0 <= num[i] <= 9\nnum does not contain any leading zeros except for the zero itself.\n1 <= k <= 104\n\n", "hints": [], "exampleTestcases": "[1,2,0,0]\n34\n[2,7,4]\n181\n[2,1,5]\n806", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> AddToArrayForm(int[] num, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function addToArrayForm(num: number[], k: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $num\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function addToArrayForm($num, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func addToArrayForm(_ num: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun addToArrayForm(num: IntArray, k: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> addToArrayForm(List<int> num, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func addToArrayForm(num []int, k int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} num\n# @param {Integer} k\n# @return {Integer[]}\ndef add_to_array_form(num, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def addToArrayForm(num: Array[Int], k: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (add-to-array-form num k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec add_to_array_form(Num :: [integer()], K :: integer()) -> [integer()].\nadd_to_array_form(Num, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec add_to_array_form(num :: [integer], k :: integer) :: [integer]\n  def add_to_array_form(num, k) do\n    \n  end\nend"}}}