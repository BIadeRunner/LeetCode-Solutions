{"question_id": "1200", "problem_slug": "remove-interval", "problem_title": "Remove Interval", "content": "A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form [a, b). A real number x is in the set if one of its intervals [a, b) contains x (i.e. a <= x < b).\nYou are given a sorted list of disjoint intervals intervals representing a set of real numbers as described above, where intervals[i] = [ai, bi] represents the interval [ai, bi). You are also given another interval toBeRemoved.\nReturn the set of real numbers with the interval toBeRemoved removed from intervals. In other words, return the set of real numbers such that every x in the set is in intervals but not in toBeRemoved. Your answer should be a sorted list of disjoint intervals as described above.\n \nExample 1:\n\n\nInput: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]\nOutput: [[0,1],[6,7]]\n\nExample 2:\n\n\nInput: intervals = [[0,5]], toBeRemoved = [2,3]\nOutput: [[0,2],[3,5]]\n\nExample 3:\n\nInput: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]\nOutput: [[-5,-4],[-3,-2],[4,5],[8,9]]\n\n \nConstraints:\n\n1 <= intervals.length <= 104\n-109 <= ai < bi <= 109\n\n", "hints": ["Solve the problem for every interval alone.", "Divide the problem into cases according to the position of the two intervals."], "exampleTestcases": "[[0,2],[3,4],[5,7]]\n[1,6]\n[[0,5]]\n[2,3]\n[[-5,-4],[-3,-2],[1,2],[3,5],[8,9]]\n[-1,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> removeInterval(vector<vector<int>>& intervals, vector<int>& toBeRemoved) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> removeInterval(int[][] intervals, int[] toBeRemoved) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def removeInterval(self, intervals, toBeRemoved):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type toBeRemoved: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def removeInterval(self, intervals: List[List[int]], toBeRemoved: List[int]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** removeInterval(int** intervals, int intervalsSize, int* intervalsColSize, int* toBeRemoved, int toBeRemovedSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> RemoveInterval(int[][] intervals, int[] toBeRemoved) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} toBeRemoved\n * @return {number[][]}\n */\nvar removeInterval = function(intervals, toBeRemoved) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function removeInterval(intervals: number[][], toBeRemoved: number[]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $toBeRemoved\n     * @return Integer[][]\n     */\n    function removeInterval($intervals, $toBeRemoved) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func removeInterval(_ intervals: [[Int]], _ toBeRemoved: [Int]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun removeInterval(intervals: Array<IntArray>, toBeRemoved: IntArray): List<List<Int>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> removeInterval(List<List<int>> intervals, List<int> toBeRemoved) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func removeInterval(intervals [][]int, toBeRemoved []int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @param {Integer[]} to_be_removed\n# @return {Integer[][]}\ndef remove_interval(intervals, to_be_removed)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def removeInterval(intervals: Array[Array[Int]], toBeRemoved: Array[Int]): List[List[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn remove_interval(intervals: Vec<Vec<i32>>, to_be_removed: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (remove-interval intervals toBeRemoved)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec remove_interval(Intervals :: [[integer()]], ToBeRemoved :: [integer()]) -> [[integer()]].\nremove_interval(Intervals, ToBeRemoved) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_interval(intervals :: [[integer]], to_be_removed :: [integer]) :: [[integer]]\n  def remove_interval(intervals, to_be_removed) do\n    \n  end\nend"}}}