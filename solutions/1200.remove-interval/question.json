{"questionId": "1200", "acRate": 66.38542733081513, "difficulty": "Medium", "freqBar": 27.98735526016007, "frontendQuestionId": "1272", "paidOnly": true, "status": "ac", "title": "Remove Interval", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "remove-interval", "content": "<p>A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form <code>[a, b)</code>. A real number <code>x</code> is in the set if one of its intervals <code>[a, b)</code> contains <code>x</code> (i.e. <code>a &lt;= x &lt; b</code>).</p>\n\n<p>You are given a <strong>sorted</strong> list of disjoint intervals <code>intervals</code> representing a set of real numbers as described above, where <code>intervals[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents the interval <code>[a<sub>i</sub>, b<sub>i</sub>)</code>. You are also given another interval <code>toBeRemoved</code>.</p>\n\n<p>Return <em>the set of real numbers with the interval </em><code>toBeRemoved</code><em> <strong>removed</strong> from</em><em> </em><code>intervals</code><em>. In other words, return the set of real numbers such that every </em><code>x</code><em> in the set is in </em><code>intervals</code><em> but <strong>not</strong> in </em><code>toBeRemoved</code><em>. Your answer should be a <strong>sorted</strong> list of disjoint intervals as described above.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/removeintervalex1.png\" style=\"width: 510px; height: 319px;\" />\n<pre>\n<strong>Input:</strong> intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]\n<strong>Output:</strong> [[0,1],[6,7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/removeintervalex2.png\" style=\"width: 410px; height: 318px;\" />\n<pre>\n<strong>Input:</strong> intervals = [[0,5]], toBeRemoved = [2,3]\n<strong>Output:</strong> [[0,2],[3,5]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]\n<strong>Output:</strong> [[-5,-4],[-3,-2],[4,5],[8,9]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Solve the problem for every interval alone.", "Divide the problem into cases according to the position of the two intervals."], "exampleTestcases": "[[0,2],[3,4],[5,7]]\n[1,6]\n[[0,5]]\n[2,3]\n[[-5,-4],[-3,-2],[1,2],[3,5],[8,9]]\n[-1,4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> removeInterval(vector<vector<int>>& intervals, vector<int>& toBeRemoved) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> removeInterval(int[][] intervals, int[] toBeRemoved) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeInterval(self, intervals, toBeRemoved):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type toBeRemoved: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeInterval(self, intervals: List[List[int]], toBeRemoved: List[int]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** removeInterval(int** intervals, int intervalsSize, int* intervalsColSize, int* toBeRemoved, int toBeRemovedSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> RemoveInterval(int[][] intervals, int[] toBeRemoved) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} toBeRemoved\n * @return {number[][]}\n */\nvar removeInterval = function(intervals, toBeRemoved) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeInterval(intervals: number[][], toBeRemoved: number[]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $toBeRemoved\n     * @return Integer[][]\n     */\n    function removeInterval($intervals, $toBeRemoved) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeInterval(_ intervals: [[Int]], _ toBeRemoved: [Int]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeInterval(intervals: Array<IntArray>, toBeRemoved: IntArray): List<List<Int>> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> removeInterval(List<List<int>> intervals, List<int> toBeRemoved) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func removeInterval(intervals [][]int, toBeRemoved []int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @param {Integer[]} to_be_removed\n# @return {Integer[][]}\ndef remove_interval(intervals, to_be_removed)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeInterval(intervals: Array[Array[Int]], toBeRemoved: Array[Int]): List[List[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_interval(intervals: Vec<Vec<i32>>, to_be_removed: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (remove-interval intervals toBeRemoved)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec remove_interval(Intervals :: [[integer()]], ToBeRemoved :: [integer()]) -> [[integer()]].\nremove_interval(Intervals, ToBeRemoved) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_interval(intervals :: [[integer]], to_be_removed :: [integer]) :: [[integer]]\n  def remove_interval(intervals, to_be_removed) do\n    \n  end\nend"}], "similarQuestionList": []}