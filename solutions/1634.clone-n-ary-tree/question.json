{"question_id": "1634", "problem_slug": "clone-n-ary-tree", "problem_title": "Clone N-ary Tree", "content": "Given a root of an N-ary tree, return a deep copy (clone) of the tree.\nEach node in the n-ary tree contains a val (int) and a list (List[Node]) of its children.\n\nclass Node {\n    public int val;\n    public List<Node> children;\n}\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n \nExample 1:\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\n\nExample 2:\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n\n \nConstraints:\n\nThe depth of the n-ary tree is less than or equal to 1000.\nThe total number of nodes is between [0, 104].\n\n \nFollow up: Can your solution work for the graph problem?", "hints": ["Traverse the tree, keep a hashtable with you and create a clone node for each node in the tree.", "Start traversing the original tree again and connect each child pointer in the cloned tree the same way as the original tree with the help of the hashtable."], "exampleTestcases": "[1,null,3,2,4,null,5,6]\n[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneTree(Node* root) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    \n    public Node() {\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val,ArrayList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public Node cloneTree(Node root) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution(object):\n    def cloneTree(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneTree(self, root: 'Node') -> 'Node':"}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n    \n    public Node() {\n        val = 0;\n        children = new List<Node>();\n    }\n\n    public Node(int _val) {\n        val = _val;\n        children = new List<Node>();\n    }\n    \n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\n\npublic class Solution {\n    public Node CloneTree(Node root) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val, children) {\n *    this.val = val === undefined ? 0 : val;\n *    this.children = children === undefined ? [] : children;\n * };\n */\n\n/**\n * @param {_Node|null} node\n * @return {_Node|null}\n */\nvar cloneTree = function(root) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     children: _Node[]\n * \n *     constructor(val?: number, children?: _Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\n\nfunction cloneTree(root: _Node | null): _Node | null {\n    \n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return Node\n     */\n    function cloneTree($root) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func cloneTree(_ root: Node?) -> Node? {\n    \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun cloneTree(root: Node?): Node? {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc cloneTree(root *Node) *Node {\n\t\n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val=0, children=[])\n#         @val = val\n#         @children = children\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef clone_tree(root)\n\t\nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def cloneTree(root: Node): Node = {\n        \n    }\n}"}}}