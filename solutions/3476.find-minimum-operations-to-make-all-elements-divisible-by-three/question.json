{"question_id": "3476", "problem_slug": "find-minimum-operations-to-make-all-elements-divisible-by-three", "problem_title": "Find Minimum Operations to Make All Elements Divisible by Three", "content": "You are given an integer array nums. In one operation, you can add or subtract 1 from any element of nums.\nReturn the minimum number of operations to make all elements of nums divisible by 3.\n \nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation:\nAll array elements can be made divisible by 3 using 3 operations:\n\nSubtract 1 from 1.\nAdd 1 to 2.\nSubtract 1 from 4.\n\n\nExample 2:\n\nInput: nums = [3,6,9]\nOutput: 0\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\n\n", "hints": ["If <code>x % 3 != 0</code> we can always increment or decrement <code>x</code> such that we only need 1 operation.", "Add <code>min(nums[i] % 3, 3 - (num[i] % 3))</code> to the count of operations."], "exampleTestcases": "[1,2,3,4]\n[3,6,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumOperations(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumOperations(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumOperations(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumOperations(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumOperations = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumOperations(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumOperations($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumOperations(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumOperations(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumOperations(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumOperations(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_operations(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumOperations(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_operations(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_operations(Nums :: [integer()]) -> integer().\nminimum_operations(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer]) :: integer\n  def minimum_operations(nums) do\n    \n  end\nend"}}}