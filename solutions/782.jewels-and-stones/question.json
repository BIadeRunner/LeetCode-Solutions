{"question_id": "782", "problem_slug": "jewels-and-stones", "problem_title": "Jewels and Stones", "content": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n \nExample 1:\nInput: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3\nExample 2:\nInput: jewels = \"z\", stones = \"ZZ\"\nOutput: 0\n\n \nConstraints:\n\n1 <= jewels.length, stones.length <= 50\njewels and stones consist of only English letters.\nAll the characters of jewels are unique.\n\n", "hints": ["For each stone, check if it is a jewel."], "exampleTestcases": "\"aA\"\n\"aAAbbbb\"\n\"z\"\n\"ZZ\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numJewelsInStones(string jewels, string stones) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numJewelsInStones(self, jewels, stones):\n        \"\"\"\n        :type jewels: str\n        :type stones: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numJewelsInStones(char* jewels, char* stones) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumJewelsInStones(string jewels, string stones) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} jewels\n * @param {string} stones\n * @return {number}\n */\nvar numJewelsInStones = function(jewels, stones) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numJewelsInStones(jewels: string, stones: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $jewels\n     * @param String $stones\n     * @return Integer\n     */\n    function numJewelsInStones($jewels, $stones) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numJewelsInStones(_ jewels: String, _ stones: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numJewelsInStones(jewels: String, stones: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numJewelsInStones(String jewels, String stones) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numJewelsInStones(jewels string, stones string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} jewels\n# @param {String} stones\n# @return {Integer}\ndef num_jewels_in_stones(jewels, stones)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numJewelsInStones(jewels: String, stones: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_jewels_in_stones(jewels: String, stones: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-jewels-in-stones jewels stones)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_jewels_in_stones(Jewels :: unicode:unicode_binary(), Stones :: unicode:unicode_binary()) -> integer().\nnum_jewels_in_stones(Jewels, Stones) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_jewels_in_stones(jewels :: String.t, stones :: String.t) :: integer\n  def num_jewels_in_stones(jewels, stones) do\n    \n  end\nend"}}}