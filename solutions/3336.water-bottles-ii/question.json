{"question_id": "3336", "problem_slug": "water-bottles-ii", "problem_title": "Water Bottles II", "content": "You are given two integers numBottles and numExchange.\nnumBottles represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\n\nDrink any number of full water bottles turning them into empty bottles.\nExchange numExchange empty bottles with one full water bottle. Then, increase numExchange by one.\n\nNote that you cannot exchange multiple batches of empty bottles for the same value of numExchange. For example, if numBottles == 3 and numExchange == 1, you cannot exchange 3 empty water bottles for 3 full bottles.\nReturn the maximum number of water bottles you can drink.\n \nExample 1:\n\n\nInput: numBottles = 13, numExchange = 6\nOutput: 15\nExplanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n\nExample 2:\n\n\nInput: numBottles = 10, numExchange = 3\nOutput: 13\nExplanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.\n\n \nConstraints:\n\n1 <= numBottles <= 100 \n1 <= numExchange <= 100\n\n", "hints": ["Simulate the process step by step. At each step, drink <code>numExchange</code> bottles of water then exchange them for a full bottle. Keep repeating this step until you cannot exchange  bottles anymore."], "exampleTestcases": "13\n6\n10\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxBottlesDrunk(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar maxBottlesDrunk = function(numBottles, numExchange) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxBottlesDrunk(numBottles: number, numExchange: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function maxBottlesDrunk($numBottles, $numExchange) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxBottlesDrunk(_ numBottles: Int, _ numExchange: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxBottlesDrunk(numBottles: Int, numExchange: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxBottlesDrunk(numBottles int, numExchange int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef max_bottles_drunk(num_bottles, num_exchange)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxBottlesDrunk(numBottles: Int, numExchange: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_bottles_drunk(num_bottles: i32, num_exchange: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-bottles-drunk numBottles numExchange)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_bottles_drunk(NumBottles :: integer(), NumExchange :: integer()) -> integer().\nmax_bottles_drunk(NumBottles, NumExchange) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_bottles_drunk(num_bottles :: integer, num_exchange :: integer) :: integer\n  def max_bottles_drunk(num_bottles, num_exchange) do\n    \n  end\nend"}}}