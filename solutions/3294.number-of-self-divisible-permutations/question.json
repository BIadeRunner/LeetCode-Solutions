{"questionId": "3294", "acRate": 72.45108135942327, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2992", "paidOnly": true, "status": "ac", "title": "Number of Self-Divisible Permutations", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "number-of-self-divisible-permutations", "content": "<p>Given an integer <code>n</code>, return <em>the number of <strong>permutations</strong> of the <strong>1-indexed</strong> array</em> <code>nums = [1, 2, ..., n]</code><em>, such that it&#39;s <strong>self-divisible</strong></em>.</p>\n\n<p>A <strong>1-indexed</strong> array <code>a</code> of length <code>n</code> is <strong>self-divisible</strong> if for every <code>1 &lt;= i &lt;= n</code>, <code><span data-keyword=\"gcd-function\">gcd</span>(a[i], i) == 1</code>.</p>\n\n<p>A <strong>permutation</strong> of an array is a rearrangement of the elements of that array, for example here are all of the permutations of the array <code>[1, 2, 3]</code>:</p>\n\n<ul>\n\t<li><code>[1, 2, 3]</code></li>\n\t<li><code>[1, 3, 2]</code></li>\n\t<li><code>[2, 1, 3]</code></li>\n\t<li><code>[2, 3, 1]</code></li>\n\t<li><code>[3, 1, 2]</code></li>\n\t<li><code>[3, 2, 1]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The array [1] has only 1 permutation which is self-divisible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The array [1,2] has 2 permutations and only one of them is self-divisible:\nnums = [1,2]: This is not self-divisible since gcd(nums[2], 2) != 1.\nnums = [2,1]: This is self-divisible since gcd(nums[1], 1) == 1 and gcd(nums[2], 2) == 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The array [1,2,3] has 3 self-divisble permutations: [1,3,2], [3,1,2], [2,3,1].\nIt can be shown that the other 3 permutations are not self-divisible. Hence the answer is 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 12</code></li>\n</ul>\n", "hints": ["Think of Backtracking."], "exampleTestcases": "1\n2\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int selfDivisiblePermutationCount(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int selfDivisiblePermutationCount(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def selfDivisiblePermutationCount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def selfDivisiblePermutationCount(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int selfDivisiblePermutationCount(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SelfDivisiblePermutationCount(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar selfDivisiblePermutationCount = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function selfDivisiblePermutationCount(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function selfDivisiblePermutationCount($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func selfDivisiblePermutationCount(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun selfDivisiblePermutationCount(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int selfDivisiblePermutationCount(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func selfDivisiblePermutationCount(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef self_divisible_permutation_count(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def selfDivisiblePermutationCount(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn self_divisible_permutation_count(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (self-divisible-permutation-count n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec self_divisible_permutation_count(N :: integer()) -> integer().\nself_divisible_permutation_count(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec self_divisible_permutation_count(n :: integer) :: integer\n  def self_divisible_permutation_count(n) do\n    \n  end\nend"}], "similarQuestionList": []}