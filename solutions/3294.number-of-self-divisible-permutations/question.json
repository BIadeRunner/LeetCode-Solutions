{"question_id": "3294", "problem_slug": "number-of-self-divisible-permutations", "problem_title": "Number of Self-Divisible Permutations", "content": "Given an integer n, return the number of permutations of the 1-indexed array nums = [1, 2, ..., n], such that it's self-divisible.\nA 1-indexed array a of length n is self-divisible if for every 1 <= i <= n, gcd(a[i], i) == 1.\nA permutation of an array is a rearrangement of the elements of that array, for example here are all of the permutations of the array [1, 2, 3]:\n\n[1, 2, 3]\n[1, 3, 2]\n[2, 1, 3]\n[2, 3, 1]\n[3, 1, 2]\n[3, 2, 1]\n\n \nExample 1:\n\nInput: n = 1\nOutput: 1\nExplanation: The array [1] has only 1 permutation which is self-divisible.\n\nExample 2:\n\nInput: n = 2\nOutput: 1\nExplanation: The array [1,2] has 2 permutations and only one of them is self-divisible:\nnums = [1,2]: This is not self-divisible since gcd(nums[2], 2) != 1.\nnums = [2,1]: This is self-divisible since gcd(nums[1], 1) == 1 and gcd(nums[2], 2) == 1.\n\nExample 3:\n\nInput: n = 3\nOutput: 3\nExplanation: The array [1,2,3] has 3 self-divisble permutations: [1,3,2], [3,1,2], [2,3,1].\nIt can be shown that the other 3 permutations are not self-divisible. Hence the answer is 3.\n\n \nConstraints:\n\n1 <= n <= 12\n\n", "hints": ["Think of Backtracking."], "exampleTestcases": "1\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int selfDivisiblePermutationCount(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int selfDivisiblePermutationCount(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def selfDivisiblePermutationCount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def selfDivisiblePermutationCount(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int selfDivisiblePermutationCount(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SelfDivisiblePermutationCount(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar selfDivisiblePermutationCount = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function selfDivisiblePermutationCount(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function selfDivisiblePermutationCount($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func selfDivisiblePermutationCount(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun selfDivisiblePermutationCount(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int selfDivisiblePermutationCount(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func selfDivisiblePermutationCount(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef self_divisible_permutation_count(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def selfDivisiblePermutationCount(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn self_divisible_permutation_count(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (self-divisible-permutation-count n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec self_divisible_permutation_count(N :: integer()) -> integer().\nself_divisible_permutation_count(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec self_divisible_permutation_count(n :: integer) :: integer\n  def self_divisible_permutation_count(n) do\n    \n  end\nend"}}}