{"question_id": "1529", "problem_slug": "max-difference-you-can-get-from-changing-an-integer", "problem_title": "Max Difference You Can Get From Changing an Integer", "content": "You are given an integer num. You will apply the following steps exactly two times:\n\nPick a digit x (0 <= x <= 9).\nPick another digit y (0 <= y <= 9). The digit y can be equal to x.\nReplace all the occurrences of x in the decimal representation of num by y.\nThe new integer cannot have any leading zeros, also the new integer cannot be 0.\n\nLet a and b be the results of applying the operations to num the first and second times, respectively.\nReturn the max difference between a and b.\n \nExample 1:\n\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n\nExample 2:\n\nInput: num = 9\nOutput: 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n\n \nConstraints:\n\n1 <= num <= 108\n\n", "hints": ["We need to get the max and min value after changing num and the answer is max - min.", "Use brute force, try all possible changes and keep the minimum and maximum values."], "exampleTestcases": "555\n9", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxDiff(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxDiff(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxDiff(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxDiff(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxDiff(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar maxDiff = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxDiff(num: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function maxDiff($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxDiff(_ num: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxDiff(num: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxDiff(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxDiff(num int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef max_diff(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxDiff(num: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_diff(num: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-diff num)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_diff(Num :: integer()) -> integer().\nmax_diff(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_diff(num :: integer) :: integer\n  def max_diff(num) do\n    \n  end\nend"}}}