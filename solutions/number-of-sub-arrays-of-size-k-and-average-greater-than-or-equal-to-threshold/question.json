{"questionId": "1445", "acRate": 69.13493637815085, "difficulty": "Medium", "freqBar": 30.39584134172359, "frontendQuestionId": "1343", "paidOnly": false, "status": "ac", "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold", "content": "<p>Given an array of integers <code>arr</code> and two integers <code>k</code> and <code>threshold</code>, return <em>the number of sub-arrays of size </em><code>k</code><em> and average greater than or equal to </em><code>threshold</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= arr.length</code></li>\n\t<li><code>0 &lt;= threshold &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Start with a window of size K and test its average against the threshold.", "Keep moving the window by one element maintaining its size k until you cover the whole array. Count the number of windows that have an average greater than or equal to the threshold."], "exampleTestcases": "[2,2,2,2,5,5,5,8]\n3\n4\n[11,13,17,23,29,31,7,5,2,3]\n3\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numOfSubarrays(vector<int>& arr, int k, int threshold) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numOfSubarrays(self, arr, k, threshold):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numOfSubarrays(int* arr, int arrSize, int k, int threshold) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumOfSubarrays(int[] arr, int k, int threshold) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @param {number} threshold\n * @return {number}\n */\nvar numOfSubarrays = function(arr, k, threshold) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numOfSubarrays(arr: number[], k: number, threshold: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function numOfSubarrays($arr, $k, $threshold) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numOfSubarrays(_ arr: [Int], _ k: Int, _ threshold: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numOfSubarrays(arr: IntArray, k: Int, threshold: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numOfSubarrays(List<int> arr, int k, int threshold) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numOfSubarrays(arr []int, k int, threshold int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @param {Integer} threshold\n# @return {Integer}\ndef num_of_subarrays(arr, k, threshold)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numOfSubarrays(arr: Array[Int], k: Int, threshold: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_of_subarrays(arr: Vec<i32>, k: i32, threshold: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-of-subarrays arr k threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_of_subarrays(Arr :: [integer()], K :: integer(), Threshold :: integer()) -> integer().\nnum_of_subarrays(Arr, K, Threshold) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_of_subarrays(arr :: [integer], k :: integer, threshold :: integer) :: integer\n  def num_of_subarrays(arr, k, threshold) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "k-radius-subarray-averages", "title": "K Radius Subarray Averages", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "count-subarrays-with-median-k", "title": "Count Subarrays With Median K", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero", "title": "Apply Operations to Make All Array Elements Equal to Zero", "isPaidOnly": false}]}