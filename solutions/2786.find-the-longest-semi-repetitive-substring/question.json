{"question_id": "2786", "problem_slug": "find-the-longest-semi-repetitive-substring", "problem_title": "Find the Longest Semi-Repetitive Substring", "content": "You are given a digit string s that consists of digits from 0 to 9.\nA string is called semi-repetitive if there is at most one adjacent pair of the same digit. For example, \"0010\", \"002020\", \"0123\", \"2002\", and \"54944\" are semi-repetitive while the following are not: \"00101022\" (adjacent same digit pairs are 00 and 22), and \"1101234883\" (adjacent same digit pairs are 11 and 88).\nReturn the length of the longest semi-repetitive substring of s.\n \nExample 1:\n\nInput: s = \"52233\"\nOutput: 4\nExplanation:\nThe longest semi-repetitive substring is \"5223\". Picking the whole string \"52233\" has two adjacent same digit pairs 22 and 33, but at most one is allowed.\n\nExample 2:\n\nInput: s = \"5494\"\nOutput: 4\nExplanation:\ns is a semi-repetitive string.\n\nExample 3:\n\nInput: s = \"1111111\"\nOutput: 2\nExplanation:\nThe longest semi-repetitive substring is \"11\". Picking the substring \"111\" has two adjacent same digit pairs, but at most one is allowed.\n\n \nConstraints:\n\n1 <= s.length <= 50\n'0' <= s[i] <= '9'\n\n", "hints": ["Since n is small, we can just check every substring, and if the substring is semi-repetitive, maximize the answer with its length."], "exampleTestcases": "\"52233\"\n\"5494\"\n\"1111111\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestSemiRepetitiveSubstring(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestSemiRepetitiveSubstring(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestSemiRepetitiveSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestSemiRepetitiveSubstring(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestSemiRepetitiveSubstring(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestSemiRepetitiveSubstring = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestSemiRepetitiveSubstring(s: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestSemiRepetitiveSubstring($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestSemiRepetitiveSubstring(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestSemiRepetitiveSubstring(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestSemiRepetitiveSubstring(String s) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestSemiRepetitiveSubstring(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_semi_repetitive_substring(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestSemiRepetitiveSubstring(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_semi_repetitive_substring(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-semi-repetitive-substring s)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_semi_repetitive_substring(S :: unicode:unicode_binary()) -> integer().\nlongest_semi_repetitive_substring(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_semi_repetitive_substring(s :: String.t) :: integer\n  def longest_semi_repetitive_substring(s) do\n    \n  end\nend"}}}