{"question_id": "276", "problem_slug": "paint-fence", "problem_title": "Paint Fence", "content": "You are painting a fence of n posts with k different colors. You must paint the posts following these rules:\n\nEvery post must be painted exactly one color.\nThere cannot be three or more consecutive posts with the same color.\n\nGiven the two integers n and k, return the number of ways you can paint the fence.\n \nExample 1:\n\n\nInput: n = 3, k = 2\nOutput: 6\nExplanation: All the possibilities are shown.\nNote that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.\n\nExample 2:\n\nInput: n = 1, k = 1\nOutput: 1\n\nExample 3:\n\nInput: n = 7, k = 2\nOutput: 42\n\n \nConstraints:\n\n1 <= n <= 50\n1 <= k <= 105\nThe testcases are generated such that the answer is in the range [0, 231 - 1] for the given n and k.\n\n", "hints": [], "exampleTestcases": "3\n2\n1\n1\n7\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numWays(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numWays(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numWays(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numWays(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumWays(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar numWays = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numWays(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function numWays($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numWays(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numWays(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numWays(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numWays(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef num_ways(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numWays(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_ways(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-ways n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_ways(N :: integer(), K :: integer()) -> integer().\nnum_ways(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_ways(n :: integer, k :: integer) :: integer\n  def num_ways(n, k) do\n    \n  end\nend"}}}