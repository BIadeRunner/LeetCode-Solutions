{"questionId": "1175", "acRate": 52.66414188758483, "difficulty": "Easy", "freqBar": 37.077851064684566, "frontendQuestionId": "1243", "paidOnly": true, "status": "ac", "title": "Array Transformation", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "array-transformation", "content": "<p>Given an initial array <code>arr</code>, every day you produce a new array using the array of the previous day.</p>\n\n<p>On the <code>i</code>-th day, you do the following operations on the array of day&nbsp;<code>i-1</code>&nbsp;to produce the array of day <code>i</code>:</p>\n\n<ol>\n\t<li>If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.</li>\n\t<li>If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.</li>\n\t<li>The first&nbsp;and last elements never change.</li>\n</ol>\n\n<p>After some days, the array does not change. Return that final array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [6,2,3,4]\n<strong>Output:</strong> [6,3,3,4]\n<strong>Explanation: </strong>\nOn the first day, the array is changed from [6,2,3,4] to [6,3,3,4].\nNo more operations can be done to this array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,6,3,4,3,5]\n<strong>Output:</strong> [1,4,4,4,4,5]\n<strong>Explanation: </strong>\nOn the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].\nOn the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].\nNo more operations can be done to this array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 100</code></li>\n</ul>\n", "hints": ["Try to simulate the process.", "For every iteration, find the new array using the old one and the given rules."], "exampleTestcases": "[6,2,3,4]\r\n[1,6,3,4,3,5]\r", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> transformArray(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> transformArray(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def transformArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def transformArray(self, arr: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* transformArray(int* arr, int arrSize, int* returnSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> TransformArray(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar transformArray = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function transformArray(arr: number[]): number[] {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function transformArray($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func transformArray(_ arr: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun transformArray(arr: IntArray): List<Int> {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func transformArray(arr []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef transform_array(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def transformArray(arr: Array[Int]): List[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn transform_array(arr: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}], "similarQuestionList": []}