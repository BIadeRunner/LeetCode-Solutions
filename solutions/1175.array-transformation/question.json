{"question_id": "1175", "problem_slug": "array-transformation", "problem_title": "Array Transformation", "content": "Given an initial array arr, every day you produce a new array using the array of the previous day.\nOn the i-th day, you do the following operations on the array of day i-1 to produce the array of day i:\n\nIf an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.\nIf an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.\nThe first and last elements never change.\n\nAfter some days, the array does not change. Return that final array.\n \nExample 1:\n\nInput: arr = [6,2,3,4]\nOutput: [6,3,3,4]\nExplanation: \nOn the first day, the array is changed from [6,2,3,4] to [6,3,3,4].\nNo more operations can be done to this array.\n\nExample 2:\n\nInput: arr = [1,6,3,4,3,5]\nOutput: [1,4,4,4,4,5]\nExplanation: \nOn the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].\nOn the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].\nNo more operations can be done to this array.\n\n \nConstraints:\n\n3 <= arr.length <= 100\n1 <= arr[i] <= 100\n\n", "hints": ["Try to simulate the process.", "For every iteration, find the new array using the old one and the given rules."], "exampleTestcases": "[6,2,3,4]\r\n[1,6,3,4,3,5]\r", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> transformArray(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> transformArray(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def transformArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def transformArray(self, arr: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* transformArray(int* arr, int arrSize, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> TransformArray(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar transformArray = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function transformArray(arr: number[]): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function transformArray($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func transformArray(_ arr: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun transformArray(arr: IntArray): List<Int> {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func transformArray(arr []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef transform_array(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def transformArray(arr: Array[Int]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn transform_array(arr: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}}}