{"question_id": "1191", "problem_slug": "synonymous-sentences", "problem_title": "Synonymous Sentences", "content": "You are given a list of equivalent string pairs synonyms where synonyms[i] = [si, ti] indicates that si and ti are equivalent strings. You are also given a sentence text.\nReturn all possible synonymous sentences sorted lexicographically.\n \nExample 1:\n\nInput: synonyms = [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]], text = \"I am happy today but was sad yesterday\"\nOutput: [\"I am cheerful today but was sad yesterday\",\"I am cheerful today but was sorrow yesterday\",\"I am happy today but was sad yesterday\",\"I am happy today but was sorrow yesterday\",\"I am joy today but was sad yesterday\",\"I am joy today but was sorrow yesterday\"]\n\nExample 2:\n\nInput: synonyms = [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], text = \"I am happy today but was sad yesterday\"\nOutput: [\"I am happy today but was sad yesterday\",\"I am joy today but was sad yesterday\"]\n\n \nConstraints:\n\n0 <= synonyms.length <= 10\nsynonyms[i].length == 2\n1 <= si.length, ti.length <= 10\nsi != ti\ntext consists of at most 10 words.\nAll the pairs of synonyms are unique.\nThe words of text are separated by single spaces.\n\n", "hints": ["Find all synonymous groups of words.", "Use union-find data structure.", "By backtracking, generate all possible statements."], "exampleTestcases": "[[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]]\n\"I am happy today but was sad yesterday\"\n[[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]]\n\"I am happy today but was sad yesterday\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generateSentences(vector<vector<string>>& synonyms, string text) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> generateSentences(List<List<String>> synonyms, String text) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def generateSentences(self, synonyms, text):\n        \"\"\"\n        :type synonyms: List[List[str]]\n        :type text: str\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def generateSentences(self, synonyms: List[List[str]], text: str) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateSentences(char*** synonyms, int synonymsSize, int* synonymsColSize, char* text, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GenerateSentences(IList<IList<string>> synonyms, string text) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[][]} synonyms\n * @param {string} text\n * @return {string[]}\n */\nvar generateSentences = function(synonyms, text) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function generateSentences(synonyms: string[][], text: string): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $synonyms\n     * @param String $text\n     * @return String[]\n     */\n    function generateSentences($synonyms, $text) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func generateSentences(_ synonyms: [[String]], _ text: String) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun generateSentences(synonyms: List<List<String>>, text: String): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> generateSentences(List<List<String>> synonyms, String text) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func generateSentences(synonyms [][]string, text string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[][]} synonyms\n# @param {String} text\n# @return {String[]}\ndef generate_sentences(synonyms, text)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def generateSentences(synonyms: List[List[String]], text: String): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn generate_sentences(synonyms: Vec<Vec<String>>, text: String) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (generate-sentences synonyms text)\n  (-> (listof (listof string?)) string? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec generate_sentences(Synonyms :: [[unicode:unicode_binary()]], Text :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_sentences(Synonyms, Text) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_sentences(synonyms :: [[String.t]], text :: String.t) :: [String.t]\n  def generate_sentences(synonyms, text) do\n    \n  end\nend"}}}