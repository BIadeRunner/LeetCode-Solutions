{"question_id": "43", "problem_slug": "multiply-strings", "problem_title": "Multiply Strings", "content": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n \nExample 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\nExample 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n \nConstraints:\n\n1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\n\n", "hints": [], "exampleTestcases": "\"2\"\n\"3\"\n\"123\"\n\"456\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string multiply(string num1, string num2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String multiply(String num1, String num2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* multiply(char* num1, char* num2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string Multiply(string num1, string num2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function multiply(num1: string, num2: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun multiply(num1: String, num2: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String multiply(String num1, String num2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func multiply(num1 string, num2 string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def multiply(num1: String, num2: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n    \n  end\nend"}}}