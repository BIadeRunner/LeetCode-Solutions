{"question_id": "1303", "problem_slug": "minimum-moves-to-reach-target-score", "problem_title": "Minimum Moves to Reach Target Score", "content": "You are playing a game with integers. You start with the integer 1 and you want to reach the integer target.\nIn one move, you can either:\n\nIncrement the current integer by one (i.e., x = x + 1).\nDouble the current integer (i.e., x = 2 * x).\n\nYou can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.\nGiven the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.\n \nExample 1:\n\nInput: target = 5, maxDoubles = 0\nOutput: 4\nExplanation: Keep incrementing by 1 until you reach target.\n\nExample 2:\n\nInput: target = 19, maxDoubles = 2\nOutput: 7\nExplanation: Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n\nExample 3:\n\nInput: target = 10, maxDoubles = 4\nOutput: 4\nExplanation: Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n\n \nConstraints:\n\n1 <= target <= 109\n0 <= maxDoubles <= 100\n\n", "hints": ["Solve the opposite problem: start at the given score and move to 1.", "It is better to use the move of the second type once we can to lose more scores fast."], "exampleTestcases": "5\n0\n19\n2\n10\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMoves(int target, int maxDoubles) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minMoves(int target, int maxDoubles) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minMoves(self, target, maxDoubles):\n        \"\"\"\n        :type target: int\n        :type maxDoubles: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minMoves(int target, int maxDoubles) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinMoves(int target, int maxDoubles) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} target\n * @param {number} maxDoubles\n * @return {number}\n */\nvar minMoves = function(target, maxDoubles) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minMoves(target: number, maxDoubles: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer $maxDoubles\n     * @return Integer\n     */\n    function minMoves($target, $maxDoubles) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minMoves(_ target: Int, _ maxDoubles: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minMoves(target: Int, maxDoubles: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minMoves(int target, int maxDoubles) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minMoves(target int, maxDoubles int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} target\n# @param {Integer} max_doubles\n# @return {Integer}\ndef min_moves(target, max_doubles)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minMoves(target: Int, maxDoubles: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_moves(target: i32, max_doubles: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-moves target maxDoubles)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_moves(Target :: integer(), MaxDoubles :: integer()) -> integer().\nmin_moves(Target, MaxDoubles) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_moves(target :: integer, max_doubles :: integer) :: integer\n  def min_moves(target, max_doubles) do\n    \n  end\nend"}}}