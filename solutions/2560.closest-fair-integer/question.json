{"question_id": "2560", "problem_slug": "closest-fair-integer", "problem_title": "Closest Fair Integer", "content": "You are given a positive integer n.\nWe call an integer k fair if the number of even digits in k is equal to the number of odd digits in it.\nReturn the smallest fair integer that is greater than or equal to n.\n \nExample 1:\n\nInput: n = 2\nOutput: 10\nExplanation: The smallest fair integer that is greater than or equal to 2 is 10.\n10 is fair because it has an equal number of even and odd digits (one odd digit and one even digit).\nExample 2:\n\nInput: n = 403\nOutput: 1001\nExplanation: The smallest fair integer that is greater than or equal to 403 is 1001.\n1001 is fair because it has an equal number of even and odd digits (two odd digits and two even digits).\n\n \nConstraints:\n\n1 <= n <= 109\n\n", "hints": ["Suppose that the number that we are looking for has the same number of digits as n, the answer, in this case, will not be very far from n, so you can do a simple brute force. Can you prove why this is true?", "How do you handle the case when the resulting number has more digits than n?"], "exampleTestcases": "2\n403", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int closestFair(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int closestFair(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def closestFair(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def closestFair(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int closestFair(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ClosestFair(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar closestFair = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function closestFair(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function closestFair($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func closestFair(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun closestFair(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int closestFair(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func closestFair(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef closest_fair(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def closestFair(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn closest_fair(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (closest-fair n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec closest_fair(N :: integer()) -> integer().\nclosest_fair(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec closest_fair(n :: integer) :: integer\n  def closest_fair(n) do\n    \n  end\nend"}}}