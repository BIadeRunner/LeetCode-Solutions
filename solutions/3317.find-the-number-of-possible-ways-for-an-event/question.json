{"questionId": "3604", "acRate": 35.80763199163617, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3317", "paidOnly": false, "status": "ac", "title": "Find the Number of Possible Ways for an Event", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Combinatorics", "id": "VG9waWNUYWdOb2RlOjYxMDU2", "slug": "combinatorics"}], "titleSlug": "find-the-number-of-possible-ways-for-an-event", "content": "<p>You are given three integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>\n\n<p>An event is being held for <code>n</code> performers. When a performer arrives, they are <strong>assigned</strong> to one of the <code>x</code> stages. All performers assigned to the <strong>same</strong> stage will perform together as a band, though some stages <em>might</em> remain <strong>empty</strong>.</p>\n\n<p>After all performances are completed, the jury will <strong>award</strong> each band a score in the range <code>[1, y]</code>.</p>\n\n<p>Return the <strong>total</strong> number of possible ways the event can take place.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note</strong> that two events are considered to have been held <strong>differently</strong> if <strong>either</strong> of the following conditions is satisfied:</p>\n\n<ul>\n\t<li><strong>Any</strong> performer is <em>assigned</em> a different stage.</li>\n\t<li><strong>Any</strong> band is <em>awarded</em> a different score.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1, x = 2, y = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>There are 2 ways to assign a stage to the performer.</li>\n\t<li>The jury can award a score of either 1, 2, or 3 to the only band.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, x = 2, y = 1</span></p>\n\n<p><strong>Output:</strong> 32</p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Each performer will be assigned either stage 1 or stage 2.</li>\n\t<li>All bands will be awarded a score of 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, x = 3, y = 4</span></p>\n\n<p><strong>Output:</strong> 684</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, x, y &lt;= 1000</code></li>\n</ul>\n", "hints": ["Fix the number of stages.", "Assign the Performers to the stages.", "Use inclusion-exclusion to ensure that no stage has 0 performers."], "exampleTestcases": "1\n2\n3\n5\n2\n1\n3\n3\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int n, int x, int y) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int n, int x, int y) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, n, x, y):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, n: int, x: int, y: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfWays(int n, int x, int y) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int n, int x, int y) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar numberOfWays = function(n, x, y) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfWays(n: number, x: number, y: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function numberOfWays($n, $x, $y) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ n: Int, _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(n: Int, x: Int, y: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int n, int x, int y) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfWays(n int, x int, y int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef number_of_ways(n, x, y)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfWays(n: Int, x: Int, y: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(n: i32, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-ways n x y)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_ways(N :: integer(), X :: integer(), Y :: integer()) -> integer().\nnumber_of_ways(N, X, Y) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(n :: integer, x :: integer, y :: integer) :: integer\n  def number_of_ways(n, x, y) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "kth-smallest-amount-with-single-denomination-combination", "title": "Kth Smallest Amount With Single Denomination Combination", "isPaidOnly": false}]}