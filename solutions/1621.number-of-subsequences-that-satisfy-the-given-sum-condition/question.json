{"question_id": "1621", "problem_slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "problem_title": "Number of Subsequences That Satisfy the Given Sum Condition", "content": "You are given an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)\n\nExample 2:\n\nInput: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\n\nExample 3:\n\nInput: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 106\n1 <= target <= 106\n\n", "hints": ["Sort the array nums.", "Use two pointers approach: Given an index i (choose it as the minimum in a subsequence) find the maximum j where j ≥ i and nums[i] +nums[j] ≤ target.", "Count the number of subsequences."], "exampleTestcases": "[3,5,6,7]\n9\n[3,3,6,8]\n10\n[2,3,3,4,6,7]\n12", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSubseq(vector<int>& nums, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numSubseq(int[] nums, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numSubseq(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numSubseq(int* nums, int numsSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumSubseq(int[] nums, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar numSubseq = function(nums, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numSubseq(nums: number[], target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function numSubseq($nums, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numSubseq(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numSubseq(nums: IntArray, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numSubseq(List<int> nums, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numSubseq(nums []int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef num_subseq(nums, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numSubseq(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_subseq(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-subseq nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_subseq(Nums :: [integer()], Target :: integer()) -> integer().\nnum_subseq(Nums, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_subseq(nums :: [integer], target :: integer) :: integer\n  def num_subseq(nums, target) do\n    \n  end\nend"}}}