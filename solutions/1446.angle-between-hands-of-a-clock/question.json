{"question_id": "1446", "problem_slug": "angle-between-hands-of-a-clock", "problem_title": "Angle Between Hands of a Clock", "content": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.\nAnswers within 10-5 of the actual value will be accepted as correct.\n \nExample 1:\n\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExample 2:\n\n\nInput: hour = 3, minutes = 30\nOutput: 75\n\nExample 3:\n\n\nInput: hour = 3, minutes = 15\nOutput: 7.5\n\n \nConstraints:\n\n1 <= hour <= 12\n0 <= minutes <= 59\n\n", "hints": ["The tricky part is determining how the minute hand affects the position of the hour hand.", "Calculate the angles separately then find the difference."], "exampleTestcases": "12\n30\n3\n30\n3\n15", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double angleClock(int hour, int minutes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double angleClock(int hour, int minutes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def angleClock(self, hour, minutes):\n        \"\"\"\n        :type hour: int\n        :type minutes: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double angleClock(int hour, int minutes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double AngleClock(int hour, int minutes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} hour\n * @param {number} minutes\n * @return {number}\n */\nvar angleClock = function(hour, minutes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function angleClock(hour: number, minutes: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $hour\n     * @param Integer $minutes\n     * @return Float\n     */\n    function angleClock($hour, $minutes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func angleClock(_ hour: Int, _ minutes: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun angleClock(hour: Int, minutes: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double angleClock(int hour, int minutes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func angleClock(hour int, minutes int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} hour\n# @param {Integer} minutes\n# @return {Float}\ndef angle_clock(hour, minutes)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def angleClock(hour: Int, minutes: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn angle_clock(hour: i32, minutes: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (angle-clock hour minutes)\n  (-> exact-integer? exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec angle_clock(Hour :: integer(), Minutes :: integer()) -> float().\nangle_clock(Hour, Minutes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec angle_clock(hour :: integer, minutes :: integer) :: float\n  def angle_clock(hour, minutes) do\n    \n  end\nend"}}}