{"question_id": "2490", "problem_slug": "maximum-number-of-books-you-can-take", "problem_title": "Maximum Number of Books You Can Take", "content": "You are given a 0-indexed integer array books of length n where books[i] denotes the number of books on the ith shelf of a bookshelf.\nYou are going to take books from a contiguous section of the bookshelf spanning from l to r where 0 <= l <= r < n. For each index i in the range l <= i < r, you must take strictly fewer books from shelf i than shelf i + 1.\nReturn the maximum number of books you can take from the bookshelf.\n \nExample 1:\n\nInput: books = [8,5,2,7,9]\nOutput: 19\nExplanation:\n- Take 1 book from shelf 1.\n- Take 2 books from shelf 2.\n- Take 7 books from shelf 3.\n- Take 9 books from shelf 4.\nYou have taken 19 books, so return 19.\nIt can be proven that 19 is the maximum number of books you can take.\n\nExample 2:\n\nInput: books = [7,0,3,4,5]\nOutput: 12\nExplanation:\n- Take 3 books from shelf 2.\n- Take 4 books from shelf 3.\n- Take 5 books from shelf 4.\nYou have taken 12 books so return 12.\nIt can be proven that 12 is the maximum number of books you can take.\n\nExample 3:\n\nInput: books = [8,2,3,7,3,4,0,1,4,3]\nOutput: 13\nExplanation:\n- Take 1 book from shelf 0.\n- Take 2 books from shelf 1.\n- Take 3 books from shelf 2.\n- Take 7 books from shelf 3.\nYou have taken 13 books so return 13.\nIt can be proven that 13 is the maximum number of books you can take.\n\n \nConstraints:\n\n1 <= books.length <= 105\n0 <= books[i] <= 105\n\n", "hints": ["Create a dp array where dp[i] is the maximum number of books you can take if you can only take books from bookshelves 0 to i and you must take books from bookshelf i.", "Keep taking as many books as you can (i.e. starting from bookshelf i and going backwards, you take arr[i], arr[i] - 1, arr[i] - 2, … books).", "You may reach an index j where arr[j] < arr[i] - (i - j). Have we already found the maximum number of books you can take from bookshelves 0 to j? How do we quickly find such an index j?", "Keep a stack of possible indices for j. If x is the number at the top of the stack, keep popping from the stack while arr[x] ≥ arr[i] - (i - x). This is because if the inequality mentioned before is true, x will never be an index j as index i will run out of items first."], "exampleTestcases": "[8,5,2,7,9]\n[7,0,3,4,5]\n[8,2,3,7,3,4,0,1,4,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumBooks(vector<int>& books) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumBooks(int[] books) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumBooks(self, books):\n        \"\"\"\n        :type books: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumBooks(int* books, int booksSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumBooks(int[] books) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} books\n * @return {number}\n */\nvar maximumBooks = function(books) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumBooks(books: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $books\n     * @return Integer\n     */\n    function maximumBooks($books) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumBooks(_ books: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumBooks(books: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumBooks(List<int> books) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumBooks(books []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} books\n# @return {Integer}\ndef maximum_books(books)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumBooks(books: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_books(books: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-books books)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_books(Books :: [integer()]) -> integer().\nmaximum_books(Books) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_books(books :: [integer]) :: integer\n  def maximum_books(books) do\n    \n  end\nend"}}}