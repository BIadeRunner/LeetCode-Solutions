{"question_id": "1213", "problem_slug": "handshakes-that-dont-cross", "problem_title": "Handshakes That Don't Cross", "content": "You are given an even number of people numPeople that stand around a circle and each person shakes hands with someone else so that there are numPeople / 2 handshakes total.\nReturn the number of ways these handshakes could occur such that none of the handshakes cross.\nSince the answer could be very large, return it modulo 109 + 7.\n \nExample 1:\n\n\nInput: numPeople = 4\nOutput: 2\nExplanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].\n\nExample 2:\n\n\nInput: numPeople = 6\nOutput: 5\n\n \nConstraints:\n\n2 <= numPeople <= 1000\nnumPeople is even.\n\n", "hints": ["Use dynamic programming.", "Let dp[n] be the number of ways that n people can handshake.", "Then fix a person as a pivot and turn for every other person who will have a handshake, the answer is the sum of the products of the new two subproblems."], "exampleTestcases": "4\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int numPeople) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int numPeople) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, numPeople):\n        \"\"\"\n        :type numPeople: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, numPeople: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfWays(int numPeople) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int numPeople) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} numPeople\n * @return {number}\n */\nvar numberOfWays = function(numPeople) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfWays(numPeople: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numPeople\n     * @return Integer\n     */\n    function numberOfWays($numPeople) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ numPeople: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(numPeople: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int numPeople) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfWays(numPeople int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num_people\n# @return {Integer}\ndef number_of_ways(num_people)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfWays(numPeople: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(num_people: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-ways numPeople)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_ways(NumPeople :: integer()) -> integer().\nnumber_of_ways(NumPeople) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(num_people :: integer) :: integer\n  def number_of_ways(num_people) do\n    \n  end\nend"}}}