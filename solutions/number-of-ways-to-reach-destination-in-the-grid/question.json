{"questionId": "3198", "acRate": 60.48593350383632, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2912", "paidOnly": true, "status": "ac", "title": "Number of Ways to Reach Destination in the Grid", "titleSlug": "number-of-ways-to-reach-destination-in-the-grid", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Combinatorics", "id": "VG9waWNUYWdOb2RlOjYxMDU2", "slug": "combinatorics"}], "content": "<p>You are given two integers <code>n</code> and <code>m</code> which represent the size of a <strong>1-indexed </strong>grid. You are also given an integer <code>k</code>, a <strong>1-indexed</strong> integer array <code>source</code> and a <strong>1-indexed</strong> integer array <code>dest</code>, where <code>source</code> and <code>dest</code> are in the form <code>[x, y]</code> representing a cell on the given grid.</p>\n\n<p>You can move through the grid in the following way:</p>\n\n<ul>\n\t<li>You can go from cell <code>[x<sub>1</sub>, y<sub>1</sub>]</code> to cell <code>[x<sub>2</sub>, y<sub>2</sub>]</code> if either <code>x<sub>1</sub> == x<sub>2</sub></code> or <code>y<sub>1</sub> == y<sub>2</sub></code>.</li>\n\t<li>Note that you <strong>can&#39;t</strong> move to the cell you are already in e.g. <code>x<sub>1</sub> == x<sub>2</sub></code> and <code>y<sub>1</sub> == y<sub>2</sub></code>.</li>\n</ul>\n\n<p>Return <em>the number of ways you can reach</em> <code>dest</code> <em>from</em> <code>source</code> <em>by moving through the grid</em> <strong>exactly</strong> <code>k</code> <em>times.</em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, m = 2, k = 2, source = [1,1], dest = [2,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 possible sequences of reaching [2,2] from [1,1]:\n- [1,1] -&gt; [1,2] -&gt; [2,2]\n- [1,1] -&gt; [2,1] -&gt; [2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, m = 4, k = 3, source = [1,2], dest = [2,3]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are 9 possible sequences of reaching [2,3] from [1,2]:\n- [1,2] -&gt; [1,1] -&gt; [1,3] -&gt; [2,3]\n- [1,2] -&gt; [1,1] -&gt; [2,1] -&gt; [2,3]\n- [1,2] -&gt; [1,3] -&gt; [3,3] -&gt; [2,3]\n- [1,2] -&gt; [1,4] -&gt; [1,3] -&gt; [2,3]\n- [1,2] -&gt; [1,4] -&gt; [2,4] -&gt; [2,3]\n- [1,2] -&gt; [2,2] -&gt; [2,1] -&gt; [2,3]\n- [1,2] -&gt; [2,2] -&gt; [2,4] -&gt; [2,3]\n- [1,2] -&gt; [3,2] -&gt; [2,2] -&gt; [2,3]\n- [1,2] -&gt; [3,2] -&gt; [3,3] -&gt; [2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n, m &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>source.length == dest.length == 2</code></li>\n\t<li><code>1 &lt;= source[1], dest[1] &lt;= n</code></li>\n\t<li><code>1 &lt;= source[2], dest[2] &lt;= m</code></li>\n</ul>\n", "hints": ["We are asked to count the number of sequences of length <code>k + 1</code> that start from <code>(x<sub>s</sub>, y<sub>s</sub>)</code> and end with <code>(x<sub>d</sub>, y<sub>d</sub>)</code>. i.e., <code>(x<sub>s</sub>, y<sub>s</sub>), (x<sub>1</sub>, y<sub>1</sub>), ..., (x<sub>k - 1</sub>, y<sub>k - 1</sub>), (x<sub>d</sub>, y<sub>d</sub>)</code>.", "The key point is to see <code>x</code> and <code>y</code> separately.", "Suppose we do <code>i</code> vertical moves and <code>k - i</code> horizontal moves.", "In each vertical move, we change only <code>y</code>. Now let's count the number of sequences of length <code>i + 1</code> that start with <code>source[2]</code> and end with <code>dest[2]</code>. Let's call this number <code>vertical_count</code>.", "Do the same for horizontal moves and let it be <code>horizontal_count</code>.", "For each <code>i</code>, the number of ways would be <code>vertical_count * horizontal_count * C(n, i)</code> since the order of vertical and horizontal moves could be arbitrary."], "exampleTestcases": "3\n2\n2\n[1,1]\n[2,2]\n3\n4\n3\n[1,2]\n[2,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int n, int m, int k, vector<int>& source, vector<int>& dest) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int n, int m, int k, int[] source, int[] dest) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, n, m, k, source, dest):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type k: int\n        :type source: List[int]\n        :type dest: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, n: int, m: int, k: int, source: List[int], dest: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfWays(int n, int m, int k, int* source, int sourceSize, int* dest, int destSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int n, int m, int k, int[] source, int[] dest) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} m\n * @param {number} k\n * @param {number[]} source\n * @param {number[]} dest\n * @return {number}\n */\nvar numberOfWays = function(n, m, k, source, dest) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfWays(n: number, m: number, k: number, source: number[], dest: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @param Integer $k\n     * @param Integer[] $source\n     * @param Integer[] $dest\n     * @return Integer\n     */\n    function numberOfWays($n, $m, $k, $source, $dest) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ n: Int, _ m: Int, _ k: Int, _ source: [Int], _ dest: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(n: Int, m: Int, k: Int, source: IntArray, dest: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int n, int m, int k, List<int> source, List<int> dest) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfWays(n int, m int, k int, source []int, dest []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} m\n# @param {Integer} k\n# @param {Integer[]} source\n# @param {Integer[]} dest\n# @return {Integer}\ndef number_of_ways(n, m, k, source, dest)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfWays(n: Int, m: Int, k: Int, source: Array[Int], dest: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(n: i32, m: i32, k: i32, source: Vec<i32>, dest: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-ways n m k source dest)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_ways(N :: integer(), M :: integer(), K :: integer(), Source :: [integer()], Dest :: [integer()]) -> integer().\nnumber_of_ways(N, M, K, Source, Dest) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(n :: integer, m :: integer, k :: integer, source :: [integer], dest :: [integer]) :: integer\n  def number_of_ways(n, m, k, source, dest) do\n    \n  end\nend"}], "similarQuestionList": []}