{"questionId": "2713", "acRate": 33.61762381454162, "difficulty": "Medium", "freqBar": 19.09300263695945, "frontendQuestionId": "2575", "paidOnly": false, "status": "ac", "title": "Find the Divisibility Array of a String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "find-the-divisibility-array-of-a-string", "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> of length <code>n</code>&nbsp;consisting of digits, and a positive integer&nbsp;<code>m</code>.</p>\n\n<p>The <strong>divisibility array</strong> <code>div</code> of <code>word</code> is an integer array of length <code>n</code> such that:</p>\n\n<ul>\n\t<li><code>div[i] = 1</code> if the&nbsp;<strong>numeric value</strong>&nbsp;of&nbsp;<code>word[0,...,i]</code> is divisible by <code>m</code>, or</li>\n\t<li><code>div[i] = 0</code> otherwise.</li>\n</ul>\n\n<p>Return<em> the divisibility array of</em><em> </em><code>word</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;998244353&quot;, m = 3\n<strong>Output:</strong> [1,1,0,0,0,1,1,0,0]\n<strong>Explanation:</strong> There are only 4 prefixes that are divisible by 3: &quot;9&quot;, &quot;99&quot;, &quot;998244&quot;, and &quot;9982443&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;1010&quot;, m = 10\n<strong>Output:</strong> [0,1,0,1]\n<strong>Explanation:</strong> There are only 2 prefixes that are divisible by 10: &quot;10&quot;, and &quot;1010&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">word.length == n</font></code></li>\n\t<li><code><font face=\"monospace\">word</font></code><font face=\"monospace\"> consists of digits from <code>0</code>&nbsp;to <code>9</code></font></li>\n\t<li><code><font face=\"monospace\">1 &lt;= m &lt;= 10<sup>9</sup></font></code></li>\n</ul>\n", "hints": ["We can check if the numeric value of the prefix of the given string is divisible by m by computing the remainder of the numeric value of the prefix when divided by m.", "The remainder of the numeric value of a prefix ending at index i can be computed from the remainder of the prefix ending at index i-1."], "exampleTestcases": "\"998244353\"\n3\n\"1010\"\n10", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> divisibilityArray(string word, int m) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def divisibilityArray(self, word, m):\n        \"\"\"\n        :type word: str\n        :type m: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* divisibilityArray(char* word, int m, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] DivisibilityArray(string word, int m) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {number} m\n * @return {number[]}\n */\nvar divisibilityArray = function(word, m) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function divisibilityArray(word: string, m: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $m\n     * @return Integer[]\n     */\n    function divisibilityArray($word, $m) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func divisibilityArray(_ word: String, _ m: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun divisibilityArray(word: String, m: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> divisibilityArray(String word, int m) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func divisibilityArray(word string, m int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @param {Integer} m\n# @return {Integer[]}\ndef divisibility_array(word, m)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def divisibilityArray(word: String, m: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn divisibility_array(word: String, m: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (divisibility-array word m)\n  (-> string? exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec divisibility_array(Word :: unicode:unicode_binary(), M :: integer()) -> [integer()].\ndivisibility_array(Word, M) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec divisibility_array(word :: String.t, m :: integer) :: [integer]\n  def divisibility_array(word, m) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "subarray-sums-divisible-by-k", "title": "Subarray Sums Divisible by K", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "make-sum-divisible-by-p", "title": "Make Sum Divisible by P", "isPaidOnly": false}]}