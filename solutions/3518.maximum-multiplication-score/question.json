{"question_id": "3518", "problem_slug": "maximum-multiplication-score", "problem_title": "Maximum Multiplication Score", "content": "You are given an integer array a of size 4 and another integer array b of size at least 4.\nYou need to choose 4 indices i0, i1, i2, and i3 from the array b such that i0 < i1 < i2 < i3. Your score will be equal to the value a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3].\nReturn the maximum score you can achieve.\n \nExample 1:\n\nInput: a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]\nOutput: 26\nExplanation:\nWe can choose the indices 0, 1, 2, and 5. The score will be 3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26.\n\nExample 2:\n\nInput: a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]\nOutput: -1\nExplanation:\nWe can choose the indices 0, 1, 3, and 4. The score will be (-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1.\n\n \nConstraints:\n\na.length == 4\n4 <= b.length <= 105\n-105 <= a[i], b[i] <= 105\n\n", "hints": ["Try using dynamic programming.", "Consider a dp with the following states: The current position in the array b, and the number of indices considered."], "exampleTestcases": "[3,2,5,6]\n[2,-6,4,-5,-3,2,-7]\n[-1,4,5,-2]\n[-5,-1,-3,-2,-4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<int>& a, vector<int>& b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxScore(int[] a, int[] b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxScore(self, a: List[int], b: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxScore(int* a, int aSize, int* b, int bSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[] a, int[] b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} a\n * @param {number[]} b\n * @return {number}\n */\nvar maxScore = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxScore(a: number[], b: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $a\n     * @param Integer[] $b\n     * @return Integer\n     */\n    function maxScore($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxScore(_ a: [Int], _ b: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(a: IntArray, b: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxScore(List<int> a, List<int> b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxScore(a []int, b []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer}\ndef max_score(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxScore(a: Array[Int], b: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(a: Vec<i32>, b: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-score a b)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_score(A :: [integer()], B :: [integer()]) -> integer().\nmax_score(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(a :: [integer], b :: [integer]) :: integer\n  def max_score(a, b) do\n    \n  end\nend"}}}