{"question_id": "3313", "problem_slug": "maximum-strength-of-k-disjoint-subarrays", "problem_title": "Maximum Strength of K Disjoint Subarrays", "content": "You are given an array of integers nums with length n, and a positive odd integer k.\nSelect exactly k disjoint subarrays sub1, sub2, ..., subk from nums such that the last element of subi appears before the first element of sub{i+1} for all 1 <= i <= k-1. The goal is to maximize their combined strength.\nThe strength of the selected subarrays is defined as:\nstrength = k * sum(sub1)- (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk)\nwhere sum(subi) is the sum of the elements in the i-th subarray.\nReturn the maximum possible strength that can be obtained from selecting exactly k disjoint subarrays from nums.\nNote that the chosen subarrays don't need to cover the entire array.\n \nExample 1:\nInput: nums = [1,2,3,-1,2], k = 3\nOutput: 22\nExplanation:\nThe best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is calculated as follows:\nstrength = 3 * (1 + 2 + 3) - 2 * (-1) + 2 = 22\n \nExample 2:\nInput: nums = [12,-2,-2,-2,-2], k = 5\nOutput: 64\nExplanation:\nThe only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is calculated as follows:\nstrength = 5 * 12 - 4 * (-2) + 3 * (-2) - 2 * (-2) + (-2) = 64\nExample 3:\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation:\nThe best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n \nConstraints:\n\n1 <= n <= 104\n-109 <= nums[i] <= 109\n1 <= k <= n\n1 <= n * k <= 106\nk is odd.\n\n", "hints": ["Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array’s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.", "Initially <code>dp[n][0][0] == 0</code>.", "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.", "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.", "The answer is <code>dp[0][k][0]</code>."], "exampleTestcases": "[1,2,3,-1,2]\n3\n[12,-2,-2,-2,-2]\n5\n[-1,-2,-3]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumStrength(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumStrength(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumStrength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumStrength(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumStrength(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumStrength(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumStrength = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumStrength(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumStrength($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumStrength(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumStrength(nums: IntArray, k: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumStrength(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumStrength(nums []int, k int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_strength(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumStrength(nums: Array[Int], k: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_strength(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-strength nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_strength(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_strength(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_strength(nums :: [integer], k :: integer) :: integer\n  def maximum_strength(nums, k) do\n    \n  end\nend"}}}