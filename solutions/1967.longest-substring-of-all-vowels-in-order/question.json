{"question_id": "1967", "problem_slug": "longest-substring-of-all-vowels-in-order", "problem_title": "Longest Substring Of All Vowels in Order", "content": "A string is considered beautiful if it satisfies the following conditions:\n\nEach of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.\nThe letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).\n\nFor example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.\n \nExample 1:\n\nInput: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"\nOutput: 13\nExplanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13.\nExample 2:\n\nInput: word = \"aeeeiiiioooauuuaeiou\"\nOutput: 5\nExplanation: The longest beautiful substring in word is \"aeiou\" of length 5.\n\nExample 3:\n\nInput: word = \"a\"\nOutput: 0\nExplanation: There is no beautiful substring, so return 0.\n\n \nConstraints:\n\n1 <= word.length <= 5 * 105\nword consists of characters 'a', 'e', 'i', 'o', and 'u'.\n\n", "hints": ["Start from each 'a' and find the longest beautiful substring starting at that index.", "Based on the current character decide if you should include the next character in the beautiful substring."], "exampleTestcases": "\"aeiaaioaaaaeiiiiouuuooaauuaeiu\"\n\"aeeeiiiioooauuuaeiou\"\n\"a\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestBeautifulSubstring(string word) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestBeautifulSubstring(String word) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestBeautifulSubstring(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestBeautifulSubstring(self, word: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestBeautifulSubstring(char* word) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestBeautifulSubstring(string word) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar longestBeautifulSubstring = function(word) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestBeautifulSubstring(word: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function longestBeautifulSubstring($word) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestBeautifulSubstring(_ word: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestBeautifulSubstring(word: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestBeautifulSubstring(String word) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestBeautifulSubstring(word string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @return {Integer}\ndef longest_beautiful_substring(word)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestBeautifulSubstring(word: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_beautiful_substring(word: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-beautiful-substring word)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_beautiful_substring(Word :: unicode:unicode_binary()) -> integer().\nlongest_beautiful_substring(Word) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_beautiful_substring(word :: String.t) :: integer\n  def longest_beautiful_substring(word) do\n    \n  end\nend"}}}