{"question_id": "1169", "problem_slug": "largest-values-from-labels", "problem_title": "Largest Values From Labels", "content": "You are given n item's value and label as two integer arrays values and labels. You are also given two integers numWanted and useLimit.\nYour task is to find a subset of items with the maximum sum of their values such that:\n\nThe number of items is at most numWanted.\nThe number of items with the same label is at most useLimit.\n\nReturn the maximum sum.\n \nExample 1:\n\nInput: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1\nOutput: 9\nExplanation:\nThe subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1.\n\nExample 2:\n\nInput: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2\nOutput: 12\nExplanation:\nThe subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3.\n\nExample 3:\n\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1\nOutput: 16\nExplanation:\nThe subset chosen is the first and fourth items with the sum of values 9 + 7.\n\n \nConstraints:\n\nn == values.length == labels.length\n1 <= n <= 2 * 104\n0 <= values[i], labels[i] <= 2 * 104\n1 <= numWanted, useLimit <= n\n\n", "hints": ["Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table."], "exampleTestcases": "[5,4,3,2,1]\n[1,1,2,2,3]\n3\n1\n[5,4,3,2,1]\n[1,3,3,3,2]\n3\n2\n[9,8,8,7,6]\n[0,0,0,1,1]\n3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestValsFromLabels(vector<int>& values, vector<int>& labels, int numWanted, int useLimit) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestValsFromLabels(self, values, labels, numWanted, useLimit):\n        \"\"\"\n        :type values: List[int]\n        :type labels: List[int]\n        :type numWanted: int\n        :type useLimit: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestValsFromLabels(self, values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int largestValsFromLabels(int* values, int valuesSize, int* labels, int labelsSize, int numWanted, int useLimit) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} values\n * @param {number[]} labels\n * @param {number} numWanted\n * @param {number} useLimit\n * @return {number}\n */\nvar largestValsFromLabels = function(values, labels, numWanted, useLimit) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestValsFromLabels(values: number[], labels: number[], numWanted: number, useLimit: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $values\n     * @param Integer[] $labels\n     * @param Integer $numWanted\n     * @param Integer $useLimit\n     * @return Integer\n     */\n    function largestValsFromLabels($values, $labels, $numWanted, $useLimit) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestValsFromLabels(_ values: [Int], _ labels: [Int], _ numWanted: Int, _ useLimit: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestValsFromLabels(values: IntArray, labels: IntArray, numWanted: Int, useLimit: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int largestValsFromLabels(List<int> values, List<int> labels, int numWanted, int useLimit) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestValsFromLabels(values []int, labels []int, numWanted int, useLimit int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} values\n# @param {Integer[]} labels\n# @param {Integer} num_wanted\n# @param {Integer} use_limit\n# @return {Integer}\ndef largest_vals_from_labels(values, labels, num_wanted, use_limit)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestValsFromLabels(values: Array[Int], labels: Array[Int], numWanted: Int, useLimit: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_vals_from_labels(values: Vec<i32>, labels: Vec<i32>, num_wanted: i32, use_limit: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-vals-from-labels values labels numWanted useLimit)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_vals_from_labels(Values :: [integer()], Labels :: [integer()], NumWanted :: integer(), UseLimit :: integer()) -> integer().\nlargest_vals_from_labels(Values, Labels, NumWanted, UseLimit) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_vals_from_labels(values :: [integer], labels :: [integer], num_wanted :: integer, use_limit :: integer) :: integer\n  def largest_vals_from_labels(values, labels, num_wanted, use_limit) do\n    \n  end\nend"}}}