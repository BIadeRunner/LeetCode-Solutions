{"question_id": "1059", "problem_slug": "missing-element-in-sorted-array", "problem_title": "Missing Element in Sorted Array", "content": "Given an integer array nums which is sorted in ascending order and all of its elements are unique and given also an integer k, return the kth missing number starting from the leftmost number of the array.\n \nExample 1:\n\nInput: nums = [4,7,9,10], k = 1\nOutput: 5\nExplanation: The first missing number is 5.\n\nExample 2:\n\nInput: nums = [4,7,9,10], k = 3\nOutput: 8\nExplanation: The missing numbers are [5,6,8,...], hence the third missing number is 8.\n\nExample 3:\n\nInput: nums = [1,2,4], k = 3\nOutput: 6\nExplanation: The missing numbers are [3,5,6,7,...], hence the third missing number is 6.\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n1 <= nums[i] <= 107\nnums is sorted in ascending order, and all the elements are unique.\n1 <= k <= 108\n\n \nFollow up: Can you find a logarithmic time complexity (i.e., O(log(n))) solution?", "hints": ["First define a function f(x) that counts the number of missing elements until x.", "Then use binary search with the given function f(x) to find the kth missing element."], "exampleTestcases": "[4,7,9,10]\n1\n[4,7,9,10]\n3\n[1,2,4]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int missingElement(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int missingElement(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def missingElement(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int missingElement(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MissingElement(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar missingElement = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function missingElement(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function missingElement($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func missingElement(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun missingElement(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int missingElement(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func missingElement(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef missing_element(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def missingElement(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn missing_element(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (missing-element nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec missing_element(Nums :: [integer()], K :: integer()) -> integer().\nmissing_element(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec missing_element(nums :: [integer], k :: integer) :: integer\n  def missing_element(nums, k) do\n    \n  end\nend"}}}