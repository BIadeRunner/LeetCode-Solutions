{"questionId": "1101", "acRate": 61.57477124624371, "difficulty": "Medium", "freqBar": 22.321750426716903, "frontendQuestionId": "1136", "paidOnly": true, "status": "ac", "title": "Parallel Courses", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}], "titleSlug": "parallel-courses", "content": "<p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given an array <code>relations</code> where <code>relations[i] = [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code>, representing a prerequisite relationship between course <code>prevCourse<sub>i</sub></code> and course <code>nextCourse<sub>i</sub></code>: course <code>prevCourse<sub>i</sub></code> has to be taken before course <code>nextCourse<sub>i</sub></code>.</p>\n\n<p>In one semester, you can take <strong>any number</strong> of courses as long as you have taken all the prerequisites in the <strong>previous</strong> semester for the courses you are taking.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of semesters needed to take all courses</em>. If there is no way to take all the courses, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/24/course1graph.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> n = 3, relations = [[1,3],[2,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The figure above represents the given graph.\nIn the first semester, you can take courses 1 and 2.\nIn the second semester, you can take course 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/24/course2graph.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> n = 3, relations = [[1,2],[2,3],[3,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No course can be studied because they are prerequisites of each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>1 &lt;= relations.length &lt;= 5000</code></li>\n\t<li><code>relations[i].length == 2</code></li>\n\t<li><code>1 &lt;= prevCourse<sub>i</sub>, nextCourse<sub>i</sub> &lt;= n</code></li>\n\t<li><code>prevCourse<sub>i</sub> != nextCourse<sub>i</sub></code></li>\n\t<li>All the pairs <code>[prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Try to think of it as a graph problem. It will be impossible to study all the courses if the graph had a cycle.", "The graph is a directed acyclic graph (DAG). The answer is the longes path in this DAG.", "You can use DP to find the longest path in the DAG."], "exampleTestcases": "3\n[[1,3],[2,3]]\n3\n[[1,2],[2,3],[3,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSemesters(int n, vector<vector<int>>& relations) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumSemesters(int n, int[][] relations) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumSemesters(self, n, relations):\n        \"\"\"\n        :type n: int\n        :type relations: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumSemesters(int n, int** relations, int relationsSize, int* relationsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSemesters(int n, int[][] relations) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} relations\n * @return {number}\n */\nvar minimumSemesters = function(n, relations) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumSemesters(n: number, relations: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $relations\n     * @return Integer\n     */\n    function minimumSemesters($n, $relations) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumSemesters(_ n: Int, _ relations: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumSemesters(n: Int, relations: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumSemesters(int n, List<List<int>> relations) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumSemesters(n int, relations [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} relations\n# @return {Integer}\ndef minimum_semesters(n, relations)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumSemesters(n: Int, relations: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_semesters(n: i32, relations: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-semesters n relations)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_semesters(N :: integer(), Relations :: [[integer()]]) -> integer().\nminimum_semesters(N, Relations) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_semesters(n :: integer, relations :: [[integer]]) :: integer\n  def minimum_semesters(n, relations) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "course-schedule-ii", "title": "Course Schedule II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "parallel-courses-ii", "title": "Parallel Courses II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "parallel-courses-iii", "title": "Parallel Courses III", "isPaidOnly": false}]}