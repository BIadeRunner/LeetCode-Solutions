{"question_id": "823", "problem_slug": "split-array-with-same-average", "problem_title": "Split Array With Same Average", "content": "You are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n\nExample 2:\n\nInput: nums = [3,1]\nOutput: false\n\n \nConstraints:\n\n1 <= nums.length <= 30\n0 <= nums[i] <= 104\n\n", "hints": [], "exampleTestcases": "[1,2,3,4,5,6,7,8]\n[3,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool splitArraySameAverage(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean splitArraySameAverage(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def splitArraySameAverage(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def splitArraySameAverage(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool splitArraySameAverage(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool SplitArraySameAverage(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar splitArraySameAverage = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function splitArraySameAverage(nums: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function splitArraySameAverage($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func splitArraySameAverage(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun splitArraySameAverage(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool splitArraySameAverage(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func splitArraySameAverage(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef split_array_same_average(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def splitArraySameAverage(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn split_array_same_average(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (split-array-same-average nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec split_array_same_average(Nums :: [integer()]) -> boolean().\nsplit_array_same_average(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_array_same_average(nums :: [integer]) :: boolean\n  def split_array_same_average(nums) do\n    \n  end\nend"}}}