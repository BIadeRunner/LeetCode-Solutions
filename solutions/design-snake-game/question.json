{"questionId": "353", "acRate": 38.896991876386714, "difficulty": "Medium", "freqBar": 73.68981272439747, "frontendQuestionId": "353", "paidOnly": true, "status": "ac", "title": "Design Snake Game", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Queue", "id": "VG9waWNUYWdOb2RlOjM0", "slug": "queue"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "design-snake-game", "content": "<p>Design a <a href=\"https://en.wikipedia.org/wiki/Snake_(video_game)\" target=\"_blank\">Snake game</a> that is played on a device with screen size <code>height x width</code>. <a href=\"http://patorjk.com/games/snake/\" target=\"_blank\">Play the game online</a> if you are not familiar with the game.</p>\n\n<p>The snake is initially positioned at the top left corner <code>(0, 0)</code> with a length of <code>1</code> unit.</p>\n\n<p>You are given an array <code>food</code> where <code>food[i] = (r<sub>i</sub>, c<sub>i</sub>)</code> is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game&#39;s score both increase by <code>1</code>.</p>\n\n<p>Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.</p>\n\n<p>When a piece of food appears on the screen, it is <strong>guaranteed</strong> that it will not appear on a block occupied by the snake.</p>\n\n<p>The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies <strong>after</strong> moving (i.e. a snake of length 4 cannot run into itself).</p>\n\n<p>Implement the <code>SnakeGame</code> class:</p>\n\n<ul>\n\t<li><code>SnakeGame(int width, int height, int[][] food)</code> Initializes the object with a screen of size <code>height x width</code> and the positions of the <code>food</code>.</li>\n\t<li><code>int move(String direction)</code> Returns the score of the game after applying one <code>direction</code> move by the snake. If the game is over, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/13/snake.jpg\" style=\"width: 800px; height: 302px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;SnakeGame&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;]\n[[3, 2, [[1, 2], [0, 1]]], [&quot;R&quot;], [&quot;D&quot;], [&quot;R&quot;], [&quot;U&quot;], [&quot;L&quot;], [&quot;U&quot;]]\n<strong>Output</strong>\n[null, 0, 0, 1, 1, 2, -1]\n\n<strong>Explanation</strong>\nSnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(&quot;R&quot;); // return 0\nsnakeGame.move(&quot;D&quot;); // return 0\nsnakeGame.move(&quot;R&quot;); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move(&quot;U&quot;); // return 1\nsnakeGame.move(&quot;L&quot;); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move(&quot;U&quot;); // return -1, game over because snake collides with border\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= width, height &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= food.length &lt;= 50</code></li>\n\t<li><code>food[i].length == 2</code></li>\n\t<li><code>0 &lt;= r<sub>i</sub> &lt; height</code></li>\n\t<li><code>0 &lt;= c<sub>i</sub> &lt; width</code></li>\n\t<li><code>direction.length == 1</code></li>\n\t<li><code>direction</code> is <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;R&#39;</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>move</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"SnakeGame\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\n[[3,2,[[1,2],[0,1]]],[\"R\"],[\"D\"],[\"R\"],[\"U\"],[\"L\"],[\"U\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class SnakeGame {\npublic:\n    SnakeGame(int width, int height, vector<vector<int>>& food) {\n        \n    }\n    \n    int move(string direction) {\n        \n    }\n};\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame* obj = new SnakeGame(width, height, food);\n * int param_1 = obj->move(direction);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class SnakeGame {\n\n    public SnakeGame(int width, int height, int[][] food) {\n        \n    }\n    \n    public int move(String direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame obj = new SnakeGame(width, height, food);\n * int param_1 = obj.move(direction);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class SnakeGame(object):\n\n    def __init__(self, width, height, food):\n        \"\"\"\n        :type width: int\n        :type height: int\n        :type food: List[List[int]]\n        \"\"\"\n        \n\n    def move(self, direction):\n        \"\"\"\n        :type direction: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame(width, height, food)\n# param_1 = obj.move(direction)"}, {"lang": "Python3", "langSlug": "python3", "code": "class SnakeGame:\n\n    def __init__(self, width: int, height: int, food: List[List[int]]):\n        \n\n    def move(self, direction: str) -> int:\n        \n\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame(width, height, food)\n# param_1 = obj.move(direction)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} SnakeGame;\n\n\nSnakeGame* snakeGameCreate(int width, int height, int** food, int foodSize, int* foodColSize) {\n    \n}\n\nint snakeGameMove(SnakeGame* obj, char * direction) {\n  \n}\n\nvoid snakeGameFree(SnakeGame* obj) {\n    \n}\n\n/**\n * Your SnakeGame struct will be instantiated and called as such:\n * SnakeGame* obj = snakeGameCreate(width, height, food, foodSize, foodColSize);\n * int param_1 = snakeGameMove(obj, direction);\n \n * snakeGameFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class SnakeGame {\n\n    public SnakeGame(int width, int height, int[][] food) {\n        \n    }\n    \n    public int Move(string direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame obj = new SnakeGame(width, height, food);\n * int param_1 = obj.Move(direction);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} width\n * @param {number} height\n * @param {number[][]} food\n */\nvar SnakeGame = function(width, height, food) {\n    \n};\n\n/** \n * @param {string} direction\n * @return {number}\n */\nSnakeGame.prototype.move = function(direction) {\n    \n};\n\n/** \n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class SnakeGame {\n    constructor(width: number, height: number, food: number[][]) {\n\n    }\n\n    move(direction: string): number {\n\n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class SnakeGame {\n    /**\n     * @param Integer $width\n     * @param Integer $height\n     * @param Integer[][] $food\n     */\n    function __construct($width, $height, $food) {\n        \n    }\n  \n    /**\n     * @param String $direction\n     * @return Integer\n     */\n    function move($direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * $obj = SnakeGame($width, $height, $food);\n * $ret_1 = $obj->move($direction);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass SnakeGame {\n\n    init(_ width: Int, _ height: Int, _ food: [[Int]]) {\n        \n    }\n    \n    func move(_ direction: String) -> Int {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * let obj = SnakeGame(width, height, food)\n * let ret_1: Int = obj.move(direction)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class SnakeGame(width: Int, height: Int, food: Array<IntArray>) {\n\n    fun move(direction: String): Int {\n        \n    }\n\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type SnakeGame struct {\n    \n}\n\n\nfunc Constructor(width int, height int, food [][]int) SnakeGame {\n    \n}\n\n\nfunc (this *SnakeGame) Move(direction string) int {\n    \n}\n\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * obj := Constructor(width, height, food);\n * param_1 := obj.Move(direction);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class SnakeGame\n\n=begin\n    :type width: Integer\n    :type height: Integer\n    :type food: Integer[][]\n=end\n    def initialize(width, height, food)\n        \n    end\n\n\n=begin\n    :type direction: String\n    :rtype: Integer\n=end\n    def move(direction)\n        \n    end\n\n\nend\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame.new(width, height, food)\n# param_1 = obj.move(direction)"}, {"lang": "Scala", "langSlug": "scala", "code": "class SnakeGame(_width: Int, _height: Int, _food: Array[Array[Int]]) {\n\n    def move(direction: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct SnakeGame {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SnakeGame {\n\n    fn new(width: i32, height: i32, food: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn make_a_move(&self, direction: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * let obj = SnakeGame::new(width, height, food);\n * let ret_1: i32 = obj.move(direction);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define snake-game%\n  (class object%\n    (super-new)\n\n    ; width : exact-integer?\n\n    ; height : exact-integer?\n\n    ; food : (listof (listof exact-integer?))\n    (init-field\n      width\n      height\n      food)\n    \n    ; move : string? -> exact-integer?\n    (define/public (move direction)\n\n      )))\n\n;; Your snake-game% object will be instantiated and called as such:\n;; (define obj (new snake-game% [width width] [height height] [food food]))\n;; (define param_1 (send obj move direction))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec snake_game_init_(Width :: integer(), Height :: integer(), Food :: [[integer()]]) -> any().\nsnake_game_init_(Width, Height, Food) ->\n  .\n\n-spec snake_game_move(Direction :: unicode:unicode_binary()) -> integer().\nsnake_game_move(Direction) ->\n  .\n\n\n%% Your functions will be called as such:\n%% snake_game_init_(Width, Height, Food),\n%% Param_1 = snake_game_move(Direction),\n\n%% snake_game_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule SnakeGame do\n  @spec init_(width :: integer, height :: integer, food :: [[integer]]) :: any\n  def init_(width, height, food) do\n\n  end\n\n  @spec move(direction :: String.t) :: integer\n  def move(direction) do\n\n  end\nend\n\n# Your functions will be called as such:\n# SnakeGame.init_(width, height, food)\n# param_1 = SnakeGame.move(direction)\n\n# SnakeGame.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": []}