{"question_id": "325", "problem_slug": "maximum-size-subarray-sum-equals-k", "problem_title": "Maximum Size Subarray Sum Equals k", "content": "Given an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there is not one, return 0 instead.\n \nExample 1:\n\nInput: nums = [1,-1,5,-2,3], k = 3\nOutput: 4\nExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.\n\nExample 2:\n\nInput: nums = [-2,-1,2,1], k = 1\nOutput: 2\nExplanation: The subarray [-1, 2] sums to 1 and is the longest.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 105\n-104 <= nums[i] <= 104\n-109 <= k <= 109\n\n", "hints": ["Compute the prefix sum array where psum[i] is the sum of all the elements from <i>0</i> to <i>i</i>.", "At each index <i>i</i>, the sum of the prefix is psum[i], so we are searching for the index x where psum[x] = psum[i] - k.\r\nThe subarray [x + 1, i] will be of sum k.", "Use a hashmap to get the index x efficiently or to determine that it does not exist."], "exampleTestcases": "[1,-1,5,-2,3]\n3\n[-2,-1,2,1]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSubArrayLen(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxSubArrayLen(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxSubArrayLen(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxSubArrayLen(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxSubArrayLen = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxSubArrayLen(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSubArrayLen($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxSubArrayLen(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxSubArrayLen(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxSubArrayLen(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxSubArrayLen(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_sub_array_len(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxSubArrayLen(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_sub_array_len(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-sub-array-len nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_sub_array_len(Nums :: [integer()], K :: integer()) -> integer().\nmax_sub_array_len(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sub_array_len(nums :: [integer], k :: integer) :: integer\n  def max_sub_array_len(nums, k) do\n    \n  end\nend"}}}