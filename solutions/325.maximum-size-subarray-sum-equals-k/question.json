{"questionId": "325", "acRate": 49.68541888004975, "difficulty": "Medium", "freqBar": 43.73016711924368, "frontendQuestionId": "325", "paidOnly": true, "status": "ac", "title": "Maximum Size Subarray Sum Equals k", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "maximum-size-subarray-sum-equals-k", "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the maximum length of a </em><span data-keyword=\"subarray\"><em>subarray</em></span><em> that sums to</em> <code>k</code>. If there is not one, return <code>0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-1,5,-2,3], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The subarray [1, -1, 5, -2] sums to 3 and is the longest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,-1,2,1], k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The subarray [-1, 2] sums to 1 and is the longest.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Compute the prefix sum array where psum[i] is the sum of all the elements from <i>0</i> to <i>i</i>.", "At each index <i>i</i>, the sum of the prefix is psum[i], so we are searching for the index x where psum[x] = psum[i] - k.\r\nThe subarray [x + 1, i] will be of sum k.", "Use a hashmap to get the index x efficiently or to determine that it does not exist."], "exampleTestcases": "[1,-1,5,-2,3]\n3\n[-2,-1,2,1]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSubArrayLen(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxSubArrayLen(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxSubArrayLen(int* nums, int numsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxSubArrayLen(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxSubArrayLen = function(nums, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSubArrayLen(nums: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSubArrayLen($nums, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSubArrayLen(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSubArrayLen(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxSubArrayLen(List<int> nums, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSubArrayLen(nums []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_sub_array_len(nums, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSubArrayLen(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sub_array_len(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-sub-array-len nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_sub_array_len(Nums :: [integer()], K :: integer()) -> integer().\nmax_sub_array_len(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sub_array_len(nums :: [integer], k :: integer) :: integer\n  def max_sub_array_len(nums, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-size-subarray-sum", "title": "Minimum Size Subarray Sum", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "range-sum-query-immutable", "title": "Range Sum Query - Immutable", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "contiguous-array", "title": "Contiguous Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "subarray-product-less-than-k", "title": "Subarray Product Less Than K", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-beauty-of-an-array-after-applying-operation", "title": "Maximum Beauty of an Array After Applying Operation", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "shortest-subarray-with-or-at-least-k-ii", "title": "Shortest Subarray With OR at Least K II", "isPaidOnly": false}]}