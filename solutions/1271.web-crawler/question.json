{"question_id": "1271", "problem_slug": "web-crawler", "problem_title": "Web Crawler", "content": "Given a url startUrl and an interface HtmlParser, implement a web crawler to crawl all links that are under the same hostname as startUrl. \nReturn all urls obtained by your web crawler in any order.\nYour crawler should:\n\nStart from the page: startUrl\nCall HtmlParser.getUrls(url) to get all urls from a webpage of given url.\nDo not crawl the same link twice.\nExplore only the links that are under the same hostname as startUrl.\n\n\nAs shown in the example url above, the hostname is example.org. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls http://leetcode.com/problems and http://leetcode.com/contest are under the same hostname, while urls http://example.org/test and http://example.com/abc are not under the same hostname.\nThe HtmlParser interface is defined as such: \n\ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.\n  public List<String> getUrls(String url);\n}\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls, edges and startUrl. Notice that you will only have access to startUrl in your code, while urls and edges are not directly accessible to you in code.\nNote: Consider the same URL with the trailing slash \"/\" as a different URL. For example, \"http://news.yahoo.com\", and \"http://news.yahoo.com/\" are different urls.\n \nExample 1:\n\n\nInput:\nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\",\n  \"http://news.yahoo.com/us\"\n]\nedges = [[2,0],[2,1],[3,2],[3,1],[0,4]]\nstartUrl = \"http://news.yahoo.com/news/topics/\"\nOutput: [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.yahoo.com/us\"\n]\n\nExample 2:\n\n\nInput: \nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\"\n]\nedges = [[0,2],[2,1],[3,2],[3,1],[3,0]]\nstartUrl = \"http://news.google.com\"\nOutput: [\"http://news.google.com\"]\nExplanation: The startUrl links to all other pages that do not share the same hostname.\n \nConstraints:\n\n1 <= urls.length <= 1000\n1 <= urls[i].length <= 300\nstartUrl is one of the urls.\nHostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits  from '0' to '9' and the hyphen-minus character ('-').\nThe hostname may not start or end with the hyphen-minus character ('-'). \nSee:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames\nYou may assume there're no duplicates in url library.\n\n", "hints": ["Use DFS/BFS to search start from the startURL. Remember to get rid of duplicate URLs."], "exampleTestcases": "[\"http://news.yahoo.com\",\"http://news.yahoo.com/news\",\"http://news.yahoo.com/news/topics/\",\"http://news.google.com\",\"http://news.yahoo.com/us\"]\n[[2,0],[2,1],[3,2],[3,1],[0,4]]\n\"http://news.yahoo.com/news/topics/\"\n[\"http://news.yahoo.com\",\"http://news.yahoo.com/news\",\"http://news.yahoo.com/news/topics/\",\"http://news.google.com\"]\n[[0,2],[2,1],[3,2],[3,1],[3,0]]\n\"http://news.google.com\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *   public:\n *     vector<string> getUrls(string url);\n * };\n */\n\nclass Solution {\npublic:\n    vector<string> crawl(string startUrl, HtmlParser htmlParser) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface HtmlParser {\n *     public List<String> getUrls(String url) {}\n * }\n */\n\nclass Solution {\n    public List<String> crawl(String startUrl, HtmlParser htmlParser) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# \"\"\"\n# This is HtmlParser's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class HtmlParser(object):\n#    def getUrls(self, url):\n#        \"\"\"\n#        :type url: str\n#        :rtype List[str]\n#        \"\"\"\n\nclass Solution(object):\n    def crawl(self, startUrl, htmlParser):\n        \"\"\"\n        :type startUrl: str\n        :type htmlParser: HtmlParser\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is HtmlParser's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class HtmlParser(object):\n#    def getUrls(self, url):\n#        \"\"\"\n#        :type url: str\n#        :rtype List[str]\n#        \"\"\"\n\nclass Solution:\n    def crawl(self, startUrl: str, htmlParser: 'HtmlParser') -> List[str]:\n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *     public List<String> GetUrls(String url) {}\n * }\n */\n\nclass Solution {\n    public IList<string> Crawl(string startUrl, HtmlParser htmlParser) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * function HtmlParser() {\n *\n *\t\t@param {string} url\n *     \t@return {string[]}\n *     \tthis.getUrls = function(url) {\n *      \t...\n *     \t};\n * };\n */\n\n/**\n * @param {string} startUrl\n * @param {HtmlParser} htmlParser\n * @return {string[]}\n*/\nvar crawl = function(startUrl, htmlParser) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *      getUrls(url: string): string[] {}\n * }\n */\n\nfunction crawl(startUrl: string, htmlParser: HtmlParser): string[] {\n\t\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class  {\n *     public function getUrls($url) {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param String $startUrl\n     * @param HtmlParser $htmlParser\n     * @return String[]\n     */\n    function crawl($startUrl, $htmlParser) {\n\t\t\n\t}\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * public class HtmlParser {\n *     public func getUrls(_ url: String) -> [String] {}\n * }\n */\n\nclass Solution {   \n    func crawl(_ startUrl: String, _ htmlParser: HtmlParser) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *     fun getUrls(url:String):List<String> {}\n * }\n */\n\nclass Solution {\n    fun crawl(startUrl:String, htmlParser:HtmlParser):List<String> {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * // This is HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * type HtmlParser struct {\n *     func GetUrls(url string) []string {}\n * }\n */\n\nfunc crawl(startUrl string, htmlParser HtmlParser) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# This is HtmlParser's API interface.\n# You should not implement it, or speculate about its implementation\n# class HtmlParser\n#     def getUrls(url)\n#         @return {List[String]}\n#     end\n# end\n\n# @param {String} startUrl\n# @param {HtmlParser} htmlParser\n# @return {String}\ndef crawl(startUrl, htmlParser)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *     def getUrls(url: String): List[String] = {}\n * }\n */\n\nobject Solution {\n    def crawl(startUrl: String, htmlParser: HtmlParser): Array[String] = {\n    \t\n    }\n}"}}}