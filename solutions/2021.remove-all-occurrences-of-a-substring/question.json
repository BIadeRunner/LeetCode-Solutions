{"question_id": "2021", "problem_slug": "remove-all-occurrences-of-a-substring", "problem_title": "Remove All Occurrences of a Substring", "content": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:\n\nFind the leftmost occurrence of the substring part and remove it from s.\n\nReturn s after removing all occurrences of part.\nA substring is a contiguous sequence of characters in a string.\n \nExample 1:\n\nInput: s = \"daabcbaabcbc\", part = \"abc\"\nOutput: \"dab\"\nExplanation: The following operations are done:\n- s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\".\n\nExample 2:\n\nInput: s = \"axxxxyyyyb\", part = \"xy\"\nOutput: \"ab\"\nExplanation: The following operations are done:\n- s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\n1 <= part.length <= 1000\ns​​​​​​ and part consists of lowercase English letters.\n\n", "hints": ["Note that a new occurrence of pattern can appear if you remove an old one, For example, s = \"ababcc\" and pattern = \"abc\".", "You can maintain a stack of characters and if the last character of the pattern size in the stack match the pattern remove them"], "exampleTestcases": "\"daabcbaabcbc\"\n\"abc\"\n\"axxxxyyyyb\"\n\"xy\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string removeOccurrences(string s, string part) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String removeOccurrences(String s, String part) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def removeOccurrences(self, s, part):\n        \"\"\"\n        :type s: str\n        :type part: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def removeOccurrences(self, s: str, part: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* removeOccurrences(char* s, char* part) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string RemoveOccurrences(string s, string part) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} part\n * @return {string}\n */\nvar removeOccurrences = function(s, part) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function removeOccurrences(s: string, part: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $part\n     * @return String\n     */\n    function removeOccurrences($s, $part) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func removeOccurrences(_ s: String, _ part: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun removeOccurrences(s: String, part: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String removeOccurrences(String s, String part) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func removeOccurrences(s string, part string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} part\n# @return {String}\ndef remove_occurrences(s, part)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def removeOccurrences(s: String, part: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn remove_occurrences(s: String, part: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (remove-occurrences s part)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec remove_occurrences(S :: unicode:unicode_binary(), Part :: unicode:unicode_binary()) -> unicode:unicode_binary().\nremove_occurrences(S, Part) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_occurrences(s :: String.t, part :: String.t) :: String.t\n  def remove_occurrences(s, part) do\n    \n  end\nend"}}}