{"question_id": "318", "problem_slug": "maximum-product-of-word-lengths", "problem_title": "Maximum Product of Word Lengths", "content": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n \nExample 1:\n\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".\n\nExample 2:\n\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".\n\nExample 3:\n\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words.\n\n \nConstraints:\n\n2 <= words.length <= 1000\n1 <= words[i].length <= 1000\nwords[i] consists only of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n[\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n[\"a\",\"aa\",\"aaa\",\"aaaa\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProduct(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxProduct(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxProduct(char** words, int wordsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxProduct(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxProduct(words: string[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxProduct($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxProduct(_ words: [String]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxProduct(words: Array<String>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxProduct(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxProduct(words []string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer}\ndef max_product(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxProduct(words: Array[String]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_product(words: Vec<String>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-product words)\n  (-> (listof string?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_product(Words :: [unicode:unicode_binary()]) -> integer().\nmax_product(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_product(words :: [String.t]) :: integer\n  def max_product(words) do\n    \n  end\nend"}}}