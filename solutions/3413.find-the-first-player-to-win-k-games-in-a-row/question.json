{"question_id": "3413", "problem_slug": "find-the-first-player-to-win-k-games-in-a-row", "problem_title": "Find The First Player to win K Games in a Row", "content": "A competition consists of n players numbered from 0 to n - 1.\nYou are given an integer array skills of size n and a positive integer k, where skills[i] is the skill level of player i. All integers in skills are unique.\nAll players are standing in a queue in order from player 0 to player n - 1.\nThe competition process is as follows:\n\nThe first two players in the queue play a game, and the player with the higher skill level wins.\nAfter the game, the winner stays at the beginning of the queue, and the loser goes to the end of it.\n\nThe winner of the competition is the first player who wins k games in a row.\nReturn the initial index of the winning player.\n \nExample 1:\n\nInput: skills = [4,2,6,3,9], k = 2\nOutput: 2\nExplanation:\nInitially, the queue of players is [0,1,2,3,4]. The following process happens:\n\nPlayers 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is [0,2,3,4,1].\nPlayers 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is [2,3,4,1,0].\nPlayers 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is [2,4,1,0,3].\n\nPlayer 2 won k = 2 games in a row, so the winner is player 2.\n\nExample 2:\n\nInput: skills = [2,5,4], k = 3\nOutput: 1\nExplanation:\nInitially, the queue of players is [0,1,2]. The following process happens:\n\nPlayers 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is [1,2,0].\nPlayers 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is [1,0,2].\nPlayers 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is [1,2,0].\n\nPlayer 1 won k = 3 games in a row, so the winner is player 1.\n\n \nConstraints:\n\nn == skills.length\n2 <= n <= 105\n1 <= k <= 109\n1 <= skills[i] <= 106\nAll integers in skills are unique.\n\n", "hints": ["Suppose that <code>k ≥ n</code>, there is exactly one player who can win <code>k</code> games in a row. Who is it?", "In case <code>k < n</code>, you can simulate the competition process described."], "exampleTestcases": "[4,2,6,3,9]\n2\n[2,5,4]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findWinningPlayer(vector<int>& skills, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findWinningPlayer(int[] skills, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findWinningPlayer(self, skills, k):\n        \"\"\"\n        :type skills: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findWinningPlayer(self, skills: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findWinningPlayer(int* skills, int skillsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindWinningPlayer(int[] skills, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} skills\n * @param {number} k\n * @return {number}\n */\nvar findWinningPlayer = function(skills, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findWinningPlayer(skills: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $skills\n     * @param Integer $k\n     * @return Integer\n     */\n    function findWinningPlayer($skills, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findWinningPlayer(_ skills: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findWinningPlayer(skills: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findWinningPlayer(List<int> skills, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findWinningPlayer(skills []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} skills\n# @param {Integer} k\n# @return {Integer}\ndef find_winning_player(skills, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findWinningPlayer(skills: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_winning_player(skills: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-winning-player skills k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_winning_player(Skills :: [integer()], K :: integer()) -> integer().\nfind_winning_player(Skills, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_winning_player(skills :: [integer], k :: integer) :: integer\n  def find_winning_player(skills, k) do\n    \n  end\nend"}}}