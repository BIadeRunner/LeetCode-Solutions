{"questionId": "2341", "acRate": 72.8780487804878, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2255", "paidOnly": false, "status": "ac", "title": "Count Prefixes of a Given String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "count-prefixes-of-a-given-string", "content": "<p>You are given a string array <code>words</code> and a string <code>s</code>, where <code>words[i]</code> and <code>s</code> comprise only of <strong>lowercase English letters</strong>.</p>\n\n<p>Return <em>the <strong>number of strings</strong> in</em> <code>words</code> <em>that are a <strong>prefix</strong> of</em> <code>s</code>.</p>\n\n<p>A <strong>prefix</strong> of a string is a substring that occurs at the beginning of the string. A <b>substring</b> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;bc&quot;,&quot;abc&quot;], s = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe strings in words which are a prefix of s = &quot;abc&quot; are:\n&quot;a&quot;, &quot;ab&quot;, and &quot;abc&quot;.\nThus the number of strings in words which are a prefix of s is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;a&quot;], s = &quot;aa&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:\n</strong>Both of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length, s.length &lt;= 10</code></li>\n\t<li><code>words[i]</code> and <code>s</code> consist of lowercase English letters <strong>only</strong>.</li>\n</ul>\n", "hints": ["For each string in words, check if it is a prefix of s. If true, increment the answer by 1."], "exampleTestcases": "[\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"]\n\"abc\"\n[\"a\",\"a\"]\n\"aa\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPrefixes(vector<string>& words, string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPrefixes(String[] words, String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPrefixes(self, words, s):\n        \"\"\"\n        :type words: List[str]\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPrefixes(self, words: List[str], s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countPrefixes(char** words, int wordsSize, char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPrefixes(string[] words, string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} s\n * @return {number}\n */\nvar countPrefixes = function(words, s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPrefixes(words: string[], s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $s\n     * @return Integer\n     */\n    function countPrefixes($words, $s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPrefixes(_ words: [String], _ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPrefixes(words: Array<String>, s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countPrefixes(List<String> words, String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countPrefixes(words []string, s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} s\n# @return {Integer}\ndef count_prefixes(words, s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPrefixes(words: Array[String], s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-prefixes words s)\n  (-> (listof string?) string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_prefixes(Words :: [unicode:unicode_binary()], S :: unicode:unicode_binary()) -> integer().\ncount_prefixes(Words, S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_prefixes(words :: [String.t], s :: String.t) :: integer\n  def count_prefixes(words, s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence", "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-if-string-is-a-prefix-of-array", "title": "Check If String Is a Prefix of Array", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "counting-words-with-a-given-prefix", "title": "Counting Words With a Given Prefix", "isPaidOnly": false}]}