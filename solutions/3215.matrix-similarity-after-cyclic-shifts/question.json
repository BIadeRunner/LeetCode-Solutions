{"question_id": "3215", "problem_slug": "matrix-similarity-after-cyclic-shifts", "problem_title": "Matrix Similarity After Cyclic Shifts", "content": "You are given an m x n integer matrix mat and an integer k. The matrix rows are 0-indexed.\nThe following proccess happens k times:\n\nEven-indexed rows (0, 2, 4, ...) are cyclically shifted to the left.\n\n\n\nOdd-indexed rows (1, 3, 5, ...) are cyclically shifted to the right.\n\n\nReturn true if the final modified matrix after k steps is identical to the original matrix, and false otherwise.\n \nExample 1:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4\nOutput: false\nExplanation:\nIn each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index).\n\n\nExample 2:\n\nInput: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2\nOutput: true\nExplanation:\n\n\nExample 3:\n\nInput: mat = [[2,2],[2,2]], k = 3\nOutput: true\nExplanation:\nAs all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.\n\n \nConstraints:\n\n1 <= mat.length <= 25\n1 <= mat[i].length <= 25\n1 <= mat[i][j] <= 25\n1 <= k <= 50\n\n", "hints": ["You can reduce <code>k</code> shifts to <code>(k % n)</code> shifts as after <code>n</code> shifts the matrix will become similar to the initial matrix."], "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n4\n[[1,2,1,2],[5,5,5,5],[6,3,6,3]]\n2\n[[2,2],[2,2]]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areSimilar(vector<vector<int>>& mat, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean areSimilar(int[][] mat, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def areSimilar(self, mat, k):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def areSimilar(self, mat: List[List[int]], k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool areSimilar(int** mat, int matSize, int* matColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool AreSimilar(int[][] mat, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {boolean}\n */\nvar areSimilar = function(mat, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function areSimilar(mat: number[][], k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $k\n     * @return Boolean\n     */\n    function areSimilar($mat, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func areSimilar(_ mat: [[Int]], _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun areSimilar(mat: Array<IntArray>, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool areSimilar(List<List<int>> mat, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func areSimilar(mat [][]int, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @param {Integer} k\n# @return {Boolean}\ndef are_similar(mat, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def areSimilar(mat: Array[Array[Int]], k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn are_similar(mat: Vec<Vec<i32>>, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (are-similar mat k)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec are_similar(Mat :: [[integer()]], K :: integer()) -> boolean().\nare_similar(Mat, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_similar(mat :: [[integer]], k :: integer) :: boolean\n  def are_similar(mat, k) do\n    \n  end\nend"}}}