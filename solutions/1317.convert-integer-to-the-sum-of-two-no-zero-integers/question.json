{"questionId": "1440", "acRate": 53.992359222376265, "difficulty": "Easy", "freqBar": 14.678395413873327, "frontendQuestionId": "1317", "paidOnly": false, "status": "ac", "title": "Convert Integer to the Sum of Two No-Zero Integers", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "convert-integer-to-the-sum-of-two-no-zero-integers", "content": "<p><strong>No-Zero integer</strong> is a positive integer that <strong>does not contain any <code>0</code></strong> in its decimal representation.</p>\n\n<p>Given an integer <code>n</code>, return <em>a list of two integers</em> <code>[a, b]</code> <em>where</em>:</p>\n\n<ul>\n\t<li><code>a</code> and <code>b</code> are <strong>No-Zero integers</strong>.</li>\n\t<li><code>a + b = n</code></li>\n</ul>\n\n<p>The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [1,1]\n<strong>Explanation:</strong> Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> [2,9]\n<strong>Explanation:</strong> Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Loop through all elements from 1 to n.", "Choose A = i and B = n - i then check if A and B are both No-Zero integers."], "exampleTestcases": "2\n11", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getNoZeroIntegers(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] getNoZeroIntegers(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getNoZeroIntegers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getNoZeroIntegers(self, n: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getNoZeroIntegers(int n, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] GetNoZeroIntegers(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar getNoZeroIntegers = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getNoZeroIntegers(n: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function getNoZeroIntegers($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getNoZeroIntegers(_ n: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getNoZeroIntegers(n: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> getNoZeroIntegers(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getNoZeroIntegers(n int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef get_no_zero_integers(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getNoZeroIntegers(n: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_no_zero_integers(n: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-no-zero-integers n)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_no_zero_integers(N :: integer()) -> [integer()].\nget_no_zero_integers(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_no_zero_integers(n :: integer) :: [integer]\n  def get_no_zero_integers(n) do\n    \n  end\nend"}], "similarQuestionList": []}