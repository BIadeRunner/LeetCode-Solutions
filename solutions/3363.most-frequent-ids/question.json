{"question_id": "3363", "problem_slug": "most-frequent-ids", "problem_title": "Most Frequent IDs", "content": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.\n\nAddition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i.\nRemoval of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i.\n\nReturn an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the ith step. If the collection is empty at any step, ans[i] should be 0 for that step.\n \nExample 1:\n\nInput: nums = [2,3,2,1], freq = [3,2,-3,1]\nOutput: [3,3,2,2]\nExplanation:\nAfter step 0, we have 3 IDs with the value of 2. So ans[0] = 3.\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So ans[1] = 3.\nAfter step 2, we have 2 IDs with the value of 3. So ans[2] = 2.\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So ans[3] = 2.\n\nExample 2:\n\nInput: nums = [5,5,3], freq = [2,-2,1]\nOutput: [2,0,1]\nExplanation:\nAfter step 0, we have 2 IDs with the value of 5. So ans[0] = 2.\nAfter step 1, there are no IDs. So ans[1] = 0.\nAfter step 2, we have 1 ID with the value of 3. So ans[2] = 1.\n\n \nConstraints:\n\n1 <= nums.length == freq.length <= 105\n1 <= nums[i] <= 105\n-105 <= freq[i] <= 105\nfreq[i] != 0\nThe input is generated such that the occurrences of an ID will not be negative in any step.\n\n", "hints": ["Use an ordered set for maintaining the occurrences of each ID.", "After step <code>i</code> find the occurrences of <code>nums[i]</code>.", "Change the occurrences of <code>nums[i]</code> in the ordered set."], "exampleTestcases": "[2,3,2,1]\n[3,2,-3,1]\n[5,5,3]\n[2,-2,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> mostFrequentIDs(vector<int>& nums, vector<int>& freq) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long[] mostFrequentIDs(int[] nums, int[] freq) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mostFrequentIDs(self, nums, freq):\n        \"\"\"\n        :type nums: List[int]\n        :type freq: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* mostFrequentIDs(int* nums, int numsSize, int* freq, int freqSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long[] MostFrequentIDs(int[] nums, int[] freq) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} freq\n * @return {number[]}\n */\nvar mostFrequentIDs = function(nums, freq) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mostFrequentIDs(nums: number[], freq: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $freq\n     * @return Integer[]\n     */\n    function mostFrequentIDs($nums, $freq) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mostFrequentIDs(_ nums: [Int], _ freq: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mostFrequentIDs(nums: IntArray, freq: IntArray): LongArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> mostFrequentIDs(List<int> nums, List<int> freq) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mostFrequentIDs(nums []int, freq []int) []int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} freq\n# @return {Integer[]}\ndef most_frequent_i_ds(nums, freq)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mostFrequentIDs(nums: Array[Int], freq: Array[Int]): Array[Long] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn most_frequent_i_ds(nums: Vec<i32>, freq: Vec<i32>) -> Vec<i64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (most-frequent-i-ds nums freq)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec most_frequent_i_ds(Nums :: [integer()], Freq :: [integer()]) -> [integer()].\nmost_frequent_i_ds(Nums, Freq) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_frequent_i_ds(nums :: [integer], freq :: [integer]) :: [integer]\n  def most_frequent_i_ds(nums, freq) do\n    \n  end\nend"}}}