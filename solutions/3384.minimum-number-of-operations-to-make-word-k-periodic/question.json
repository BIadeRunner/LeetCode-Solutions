{"question_id": "3384", "problem_slug": "minimum-number-of-operations-to-make-word-k-periodic", "problem_title": "Minimum Number of Operations to Make Word K-Periodic", "content": "You are given a string word of size n, and an integer k such that k divides n.\nIn one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1].\nReturn the minimum number of operations required to make word k-periodic.\nWe say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == “ababab”, then word is 2-periodic for s = \"ab\".\n \nExample 1:\n\nInput: word = \"leetcodeleet\", k = 4\nOutput: 1\nExplanation:\nWe can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\".\n\nExample 2:\n\nInput: word = \"leetcoleet\", k = 2\nOutput: 3\nExplanation:\nWe can obtain a 2-periodic string by applying the operations in the table below.\n\n\n\ni\nj\nword\n\n\n0\n2\netetcoleet\n\n\n4\n0\netetetleet\n\n\n6\n0\netetetetet\n\n\n\n\n\n \n\n \nConstraints:\n\n1 <= n == word.length <= 105\n1 <= k <= word.length\nk divides word.length.\nword consists only of lowercase English letters.\n\n", "hints": ["Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.", "The period of the final string will be the substring with the highest frequency."], "exampleTestcases": "\"leetcodeleet\"\n4\n\"leetcoleet\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic = function(word, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_operations_to_make_k_periodic(Word, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend"}}}