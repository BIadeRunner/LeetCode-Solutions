{"question_id": "1518", "problem_slug": "total-sales-amount-by-year", "problem_title": "Total Sales Amount by Year", "content": "Table: Product\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| product_name  | varchar |\n+---------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nproduct_name is the name of the product.\n\n \nTable: Sales\n\n+---------------------+---------+\n| Column Name         | Type    |\n+---------------------+---------+\n| product_id          | int     |\n| period_start        | date    |\n| period_end          | date    |\n| average_daily_sales | int     |\n+---------------------+---------+\nproduct_id is the primary key (column with unique values) for this table. \nperiod_start and period_end indicate the start and end date for the sales period, and both dates are inclusive.\nThe average_daily_sales column holds the average daily sales amount of the items for the period.\nThe dates of the sales years are between 2018 to 2020.\n\n \nWrite a solution to report the total sales amount of each item for each year, with corresponding product_name, product_id, report_year, and total_amount.\nReturn the result table ordered by product_id and report_year.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 1          | LC Phone     |\n| 2          | LC T-Shirt   |\n| 3          | LC Keychain  |\n+------------+--------------+\nSales table:\n+------------+--------------+-------------+---------------------+\n| product_id | period_start | period_end  | average_daily_sales |\n+------------+--------------+-------------+---------------------+\n| 1          | 2019-01-25   | 2019-02-28  | 100                 |\n| 2          | 2018-12-01   | 2020-01-01  | 10                  |\n| 3          | 2019-12-01   | 2020-01-31  | 1                   |\n+------------+--------------+-------------+---------------------+\nOutput: \n+------------+--------------+-------------+--------------+\n| product_id | product_name | report_year | total_amount |\n+------------+--------------+-------------+--------------+\n| 1          | LC Phone     |    2019     | 3500         |\n| 2          | LC T-Shirt   |    2018     | 310          |\n| 2          | LC T-Shirt   |    2019     | 3650         |\n| 2          | LC T-Shirt   |    2020     | 10           |\n| 3          | LC Keychain  |    2019     | 31           |\n| 3          | LC Keychain  |    2020     | 31           |\n+------------+--------------+-------------+--------------+\nExplanation: \nLC Phone was sold for the period of 2019-01-25 to 2019-02-28, and there are 35 days for this period. Total amount 35*100 = 3500. \nLC T-shirt was sold for the period of 2018-12-01 to 2020-01-01, and there are 31, 365, 1 days for years 2018, 2019 and 2020 respectively.\nLC Keychain was sold for the period of 2019-12-01 to 2020-01-31, and there are 31, 31 days for years 2019 and 2020 respectively.\n\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Product\": [\"product_id\", \"product_name\"], \"Sales\": [\"product_id\", \"period_start\", \"period_end\", \"average_daily_sales\"]}, \"rows\": {\"Product\": [[1, \"LC Phone \"], [2, \"LC T-Shirt\"], [3, \"LC Keychain\"]], \"Sales\": [[1, \"2019-01-25\", \"2019-02-28\", 100], [2, \"2018-12-01\", \"2020-01-01\", 10], [3, \"2019-12-01\", \"2020-01-31\", 1]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef total_sales(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}