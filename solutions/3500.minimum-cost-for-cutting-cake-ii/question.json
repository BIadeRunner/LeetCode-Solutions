{"question_id": "3500", "problem_slug": "minimum-cost-for-cutting-cake-ii", "problem_title": "Minimum Cost for Cutting Cake II", "content": "There is an m x n cake that needs to be cut into 1 x 1 pieces.\nYou are given integers m, n, and two arrays:\n\nhorizontalCut of size m - 1, where horizontalCut[i] represents the cost to cut along the horizontal line i.\nverticalCut of size n - 1, where verticalCut[j] represents the cost to cut along the vertical line j.\n\nIn one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:\n\nCut along a horizontal line i at a cost of horizontalCut[i].\nCut along a vertical line j at a cost of verticalCut[j].\n\nAfter the cut, the piece of cake is divided into two distinct pieces.\nThe cost of a cut depends only on the initial cost of the line and does not change.\nReturn the minimum total cost to cut the entire cake into 1 x 1 pieces.\n \nExample 1:\n\nInput: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]\nOutput: 13\nExplanation:\n\n\nPerform a cut on the vertical line 0 with cost 5, current total cost is 5.\nPerform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.\nPerform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.\nPerform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.\nPerform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.\n\nThe total cost is 5 + 1 + 1 + 3 + 3 = 13.\n\nExample 2:\n\nInput: m = 2, n = 2, horizontalCut = [7], verticalCut = [4]\nOutput: 15\nExplanation:\n\nPerform a cut on the horizontal line 0 with cost 7.\nPerform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.\nPerform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.\n\nThe total cost is 7 + 4 + 4 = 15.\n\n \nConstraints:\n\n1 <= m, n <= 105\nhorizontalCut.length == m - 1\nverticalCut.length == n - 1\n1 <= horizontalCut[i], verticalCut[i] <= 103\n\n", "hints": ["The intended solution uses a Greedy approach.", "At each step, we will perform a cut on the line with the highest cost.", "If you perform a horizontal cut, can you count the contribution that it adds to each row cut that comes afterward?"], "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost = function(m, n, horizontalCut, verticalCut) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumCost(int m, int n, List<int> horizontalCut, List<int> verticalCut) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec<i32>, vertical_cut: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -> integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend"}}}