{"questionId": "3500", "acRate": 56.1152441498715, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3219", "paidOnly": false, "status": "ac", "title": "Minimum Cost for Cutting Cake II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "minimum-cost-for-cutting-cake-ii", "content": "<p>There is an <code>m x n</code> cake that needs to be cut into <code>1 x 1</code> pieces.</p>\n\n<p>You are given integers <code>m</code>, <code>n</code>, and two arrays:</p>\n\n<ul>\n\t<li><code>horizontalCut</code> of size <code>m - 1</code>, where <code>horizontalCut[i]</code> represents the cost to cut along the horizontal line <code>i</code>.</li>\n\t<li><code>verticalCut</code> of size <code>n - 1</code>, where <code>verticalCut[j]</code> represents the cost to cut along the vertical line <code>j</code>.</li>\n</ul>\n\n<p>In one operation, you can choose any piece of cake that is not yet a <code>1 x 1</code> square and perform one of the following cuts:</p>\n\n<ol>\n\t<li>Cut along a horizontal line <code>i</code> at a cost of <code>horizontalCut[i]</code>.</li>\n\t<li>Cut along a vertical line <code>j</code> at a cost of <code>verticalCut[j]</code>.</li>\n</ol>\n\n<p>After the cut, the piece of cake is divided into two distinct pieces.</p>\n\n<p>The cost of a cut depends only on the initial cost of the line and does not change.</p>\n\n<p>Return the <strong>minimum</strong> total cost to cut the entire cake into <code>1 x 1</code> pieces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif\" style=\"width: 280px; height: 320px;\" /></p>\n\n<ul>\n\t<li>Perform a cut on the vertical line 0 with cost 5, current total cost is 5.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n\t<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>\n</ul>\n\n<p>The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Perform a cut on the horizontal line 0 with cost 7.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n\t<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>\n</ul>\n\n<p>The total cost is <code>7 + 4 + 4 = 15</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>horizontalCut.length == m - 1</code></li>\n\t<li><code>verticalCut.length == n - 1</code></li>\n\t<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup></code></li>\n</ul>\n", "hints": ["The intended solution uses a Greedy approach.", "At each step, we will perform a cut on the line with the highest cost.", "If you perform a horizontal cut, can you count the contribution that it adds to each row cut that comes afterward?"], "exampleTestcases": "3\n2\n[1,3]\n[5]\n2\n2\n[7]\n[4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost = function(m, n, horizontalCut, verticalCut) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumCost(int m, int n, List<int> horizontalCut, List<int> verticalCut) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec<i32>, vertical_cut: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -> integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-cost-for-cutting-cake-i", "title": "Minimum Cost for Cutting Cake I", "isPaidOnly": false}]}