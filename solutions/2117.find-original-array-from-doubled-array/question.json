{"question_id": "2117", "problem_slug": "find-original-array-from-doubled-array", "problem_title": "Find Original Array From Doubled Array", "content": "An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.\nGiven an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.\n \nExample 1:\n\nInput: changed = [1,3,4,2,6,8]\nOutput: [1,3,4]\nExplanation: One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].\n\nExample 2:\n\nInput: changed = [6,3,0,1]\nOutput: []\nExplanation: changed is not a doubled array.\n\nExample 3:\n\nInput: changed = [1]\nOutput: []\nExplanation: changed is not a doubled array.\n\n \nConstraints:\n\n1 <= changed.length <= 105\n0 <= changed[i] <= 105\n\n", "hints": ["If changed is a doubled array, you should be able to delete elements and their doubled values until the array is empty.", "Which element is guaranteed to not be a doubled value? It is the smallest element.", "After removing the smallest element and its double from changed, is there another number that is guaranteed to not be a doubled value?"], "exampleTestcases": "[1,3,4,2,6,8]\n[6,3,0,1]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findOriginalArray(vector<int>& changed) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findOriginalArray(int[] changed) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findOriginalArray(self, changed):\n        \"\"\"\n        :type changed: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOriginalArray(int* changed, int changedSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindOriginalArray(int[] changed) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} changed\n * @return {number[]}\n */\nvar findOriginalArray = function(changed) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findOriginalArray(changed: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $changed\n     * @return Integer[]\n     */\n    function findOriginalArray($changed) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findOriginalArray(_ changed: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findOriginalArray(changed: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findOriginalArray(List<int> changed) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findOriginalArray(changed []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} changed\n# @return {Integer[]}\ndef find_original_array(changed)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findOriginalArray(changed: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_original_array(changed: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-original-array changed)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_original_array(Changed :: [integer()]) -> [integer()].\nfind_original_array(Changed) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_original_array(changed :: [integer]) :: [integer]\n  def find_original_array(changed) do\n    \n  end\nend"}}}