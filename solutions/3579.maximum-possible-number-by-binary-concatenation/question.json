{"question_id": "3579", "problem_slug": "maximum-possible-number-by-binary-concatenation", "problem_title": "Maximum Possible Number by Binary Concatenation", "content": "You are given an array of integers nums of size 3.\nReturn the maximum possible number whose binary representation can be formed by concatenating the binary representation of all elements in nums in some order.\nNote that the binary representation of any number does not contain leading zeros.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 30\nExplanation:\nConcatenate the numbers in the order [3, 1, 2] to get the result \"11110\", which is the binary representation of 30.\n\nExample 2:\n\nInput: nums = [2,8,16]\nOutput: 1296\nExplanation:\nConcatenate the numbers in the order [2, 8, 16] to get the result \"10100010000\", which is the binary representation of 1296.\n\n \nConstraints:\n\nnums.length == 3\n1 <= nums[i] <= 127\n\n", "hints": ["How many possible concatenation orders are there?"], "exampleTestcases": "[1,2,3]\n[2,8,16]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxGoodNumber(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxGoodNumber(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxGoodNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxGoodNumber(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxGoodNumber(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxGoodNumber(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxGoodNumber = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxGoodNumber(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxGoodNumber($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxGoodNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxGoodNumber(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxGoodNumber(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxGoodNumber(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_good_number(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxGoodNumber(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_good_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-good-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_good_number(Nums :: [integer()]) -> integer().\nmax_good_number(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_good_number(nums :: [integer]) :: integer\n  def max_good_number(nums) do\n    \n  end\nend"}}}