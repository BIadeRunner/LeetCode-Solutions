{"questionId": "1354", "acRate": 73.07509619249178, "difficulty": "Medium", "freqBar": 27.165320252402175, "frontendQuestionId": "2225", "paidOnly": false, "status": "ac", "title": "Find Players With Zero or One Losses", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "find-players-with-zero-or-one-losses", "content": "<p>You are given an integer array <code>matches</code> where <code>matches[i] = [winner<sub>i</sub>, loser<sub>i</sub>]</code> indicates that the player <code>winner<sub>i</sub></code> defeated player <code>loser<sub>i</sub></code> in a match.</p>\n\n<p>Return <em>a list </em><code>answer</code><em> of size </em><code>2</code><em> where:</em></p>\n\n<ul>\n\t<li><code>answer[0]</code> is a list of all players that have <strong>not</strong> lost any matches.</li>\n\t<li><code>answer[1]</code> is a list of all players that have lost exactly <strong>one</strong> match.</li>\n</ul>\n\n<p>The values in the two lists should be returned in <strong>increasing</strong> order.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>You should only consider the players that have played <strong>at least one</strong> match.</li>\n\t<li>The testcases will be generated such that <strong>no</strong> two matches will have the <strong>same</strong> outcome.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n<strong>Output:</strong> [[1,2,10],[4,5,7,8]]\n<strong>Explanation:</strong>\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[2,3],[1,3],[5,4],[6,4]]\n<strong>Output:</strong> [[1,2,5,6],[]]\n<strong>Explanation:</strong>\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = [].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matches.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>matches[i].length == 2</code></li>\n\t<li><code>1 &lt;= winner<sub>i</sub>, loser<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>winner<sub>i</sub> != loser<sub>i</sub></code></li>\n\t<li>All <code>matches[i]</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Count the number of times a player loses while iterating through the matches."], "exampleTestcases": "[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n[[2,3],[1,3],[5,4],[6,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> findWinners(vector<vector<int>>& matches) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> findWinners(int[][] matches) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findWinners(self, matches):\n        \"\"\"\n        :type matches: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findWinners(int** matches, int matchesSize, int* matchesColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> FindWinners(int[][] matches) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matches\n * @return {number[][]}\n */\nvar findWinners = function(matches) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findWinners(matches: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matches\n     * @return Integer[][]\n     */\n    function findWinners($matches) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findWinners(_ matches: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findWinners(matches: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> findWinners(List<List<int>> matches) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findWinners(matches [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matches\n# @return {Integer[][]}\ndef find_winners(matches)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findWinners(matches: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_winners(matches: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-winners matches)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_winners(Matches :: [[integer()]]) -> [[integer()]].\nfind_winners(Matches) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_winners(matches :: [[integer]]) :: [[integer]]\n  def find_winners(matches) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "lowest-common-ancestor-of-a-binary-tree", "title": "Lowest Common Ancestor of a Binary Tree", "isPaidOnly": false}]}