{"question_id": "635", "problem_slug": "design-log-storage-system", "problem_title": "Design Log Storage System", "content": "You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: Year:Month:Day:Hour:Minute:Second, for example, 2017:01:01:23:59:59. All domains are zero-padded decimal numbers.\nImplement the LogSystem class:\n\nLogSystem() Initializes the LogSystem object.\nvoid put(int id, string timestamp) Stores the given log (id, timestamp) in your storage system.\nint[] retrieve(string start, string end, string granularity) Returns the IDs of the logs whose timestamps are within the range from start to end inclusive. start and end all have the same format as timestamp, and granularity means how precise the range should be (i.e. to the exact Day, Minute, etc.). For example, start = \"2017:01:01:23:59:59\", end = \"2017:01:02:23:59:59\", and granularity = \"Day\" means that we need to find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd 2017, and the Hour, Minute, and Second for each log entry can be ignored.\n\n \nExample 1:\n\nInput\n[\"LogSystem\", \"put\", \"put\", \"put\", \"retrieve\", \"retrieve\"]\n[[], [1, \"2017:01:01:23:59:59\"], [2, \"2017:01:01:22:59:59\"], [3, \"2016:01:01:00:00:00\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\"]]\nOutput\n[null, null, null, null, [3, 2, 1], [2, 1]]\n\nExplanation\nLogSystem logSystem = new LogSystem();\nlogSystem.put(1, \"2017:01:01:23:59:59\");\nlogSystem.put(2, \"2017:01:01:22:59:59\");\nlogSystem.put(3, \"2016:01:01:00:00:00\");\n\n// return [3,2,1], because you need to return all logs between 2016 and 2017.\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\");\n\n// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.\n// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\");\n\n \nConstraints:\n\n1 <= id <= 500\n2000 <= Year <= 2017\n1 <= Month <= 12\n1 <= Day <= 31\n0 <= Hour <= 23\n0 <= Minute, Second <= 59\ngranularity is one of the values [\"Year\", \"Month\", \"Day\", \"Hour\", \"Minute\", \"Second\"].\nAt most 500 calls will be made to put and retrieve.\n\n", "hints": [], "exampleTestcases": "[\"LogSystem\",\"put\",\"put\",\"put\",\"retrieve\",\"retrieve\"]\n[[],[1,\"2017:01:01:23:59:59\"],[2,\"2017:01:01:22:59:59\"],[3,\"2016:01:01:00:00:00\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class LogSystem {\npublic:\n    LogSystem() {\n        \n    }\n    \n    void put(int id, string timestamp) {\n        \n    }\n    \n    vector<int> retrieve(string start, string end, string granularity) {\n        \n    }\n};\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem* obj = new LogSystem();\n * obj->put(id,timestamp);\n * vector<int> param_2 = obj->retrieve(start,end,granularity);\n */"}, "Java": {"langSlug": "java", "code": "class LogSystem {\n\n    public LogSystem() {\n        \n    }\n    \n    public void put(int id, String timestamp) {\n        \n    }\n    \n    public List<Integer> retrieve(String start, String end, String granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = new LogSystem();\n * obj.put(id,timestamp);\n * List<Integer> param_2 = obj.retrieve(start,end,granularity);\n */"}, "Python": {"langSlug": "python", "code": "class LogSystem(object):\n\n    def __init__(self):\n        \n\n    def put(self, id, timestamp):\n        \"\"\"\n        :type id: int\n        :type timestamp: str\n        :rtype: None\n        \"\"\"\n        \n\n    def retrieve(self, start, end, granularity):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :type granularity: str\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem()\n# obj.put(id,timestamp)\n# param_2 = obj.retrieve(start,end,granularity)"}, "Python3": {"langSlug": "python3", "code": "class LogSystem:\n\n    def __init__(self):\n        \n\n    def put(self, id: int, timestamp: str) -> None:\n        \n\n    def retrieve(self, start: str, end: str, granularity: str) -> List[int]:\n        \n\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem()\n# obj.put(id,timestamp)\n# param_2 = obj.retrieve(start,end,granularity)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} LogSystem;\n\n\nLogSystem* logSystemCreate() {\n    \n}\n\nvoid logSystemPut(LogSystem* obj, int id, char* timestamp) {\n    \n}\n\nint* logSystemRetrieve(LogSystem* obj, char* start, char* end, char* granularity, int* retSize) {\n    \n}\n\nvoid logSystemFree(LogSystem* obj) {\n    \n}\n\n/**\n * Your LogSystem struct will be instantiated and called as such:\n * LogSystem* obj = logSystemCreate();\n * logSystemPut(obj, id, timestamp);\n \n * int* param_2 = logSystemRetrieve(obj, start, end, granularity, retSize);\n \n * logSystemFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class LogSystem {\n\n    public LogSystem() {\n        \n    }\n    \n    public void Put(int id, string timestamp) {\n        \n    }\n    \n    public IList<int> Retrieve(string start, string end, string granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = new LogSystem();\n * obj.Put(id,timestamp);\n * IList<int> param_2 = obj.Retrieve(start,end,granularity);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar LogSystem = function() {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} timestamp\n * @return {void}\n */\nLogSystem.prototype.put = function(id, timestamp) {\n    \n};\n\n/** \n * @param {string} start \n * @param {string} end \n * @param {string} granularity\n * @return {number[]}\n */\nLogSystem.prototype.retrieve = function(start, end, granularity) {\n    \n};\n\n/** \n * Your LogSystem object will be instantiated and called as such:\n * var obj = new LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class LogSystem {\n    constructor() {\n        \n    }\n\n    put(id: number, timestamp: string): void {\n        \n    }\n\n    retrieve(start: string, end: string, granularity: string): number[] {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = new LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, "PHP": {"langSlug": "php", "code": "class LogSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $timestamp\n     * @return NULL\n     */\n    function put($id, $timestamp) {\n        \n    }\n  \n    /**\n     * @param String $start\n     * @param String $end\n     * @param String $granularity\n     * @return Integer[]\n     */\n    function retrieve($start, $end, $granularity) {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * $obj = LogSystem();\n * $obj->put($id, $timestamp);\n * $ret_2 = $obj->retrieve($start, $end, $granularity);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass LogSystem {\n\n    init() {\n        \n    }\n    \n    func put(_ id: Int, _ timestamp: String) {\n        \n    }\n    \n    func retrieve(_ start: String, _ end: String, _ granularity: String) -> [Int] {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * let obj = LogSystem()\n * obj.put(id, timestamp)\n * let ret_2: [Int] = obj.retrieve(start, end, granularity)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class LogSystem() {\n\n    fun put(id: Int, timestamp: String) {\n        \n    }\n\n    fun retrieve(start: String, end: String, granularity: String): List<Int> {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(start,end,granularity)\n */"}, "Dart": {"langSlug": "dart", "code": "class LogSystem {\n\n  LogSystem() {\n    \n  }\n  \n  void put(int id, String timestamp) {\n    \n  }\n  \n  List<int> retrieve(String start, String end, String granularity) {\n    \n  }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * LogSystem obj = LogSystem();\n * obj.put(id,timestamp);\n * List<int> param2 = obj.retrieve(start,end,granularity);\n */"}, "Go": {"langSlug": "golang", "code": "type LogSystem struct {\n    \n}\n\n\nfunc Constructor() LogSystem {\n    \n}\n\n\nfunc (this *LogSystem) Put(id int, timestamp string)  {\n    \n}\n\n\nfunc (this *LogSystem) Retrieve(start string, end string, granularity string) []int {\n    \n}\n\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Put(id,timestamp);\n * param_2 := obj.Retrieve(start,end,granularity);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class LogSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type timestamp: String\n    :rtype: Void\n=end\n    def put(id, timestamp)\n        \n    end\n\n\n=begin\n    :type start: String\n    :type end: String\n    :type granularity: String\n    :rtype: Integer[]\n=end\n    def retrieve(start, end, granularity)\n        \n    end\n\n\nend\n\n# Your LogSystem object will be instantiated and called as such:\n# obj = LogSystem.new()\n# obj.put(id, timestamp)\n# param_2 = obj.retrieve(start, end, granularity)"}, "Scala": {"langSlug": "scala", "code": "class LogSystem() {\n\n    def put(id: Int, timestamp: String): Unit = {\n        \n    }\n\n    def retrieve(start: String, end: String, granularity: String): List[Int] = {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * val obj = new LogSystem()\n * obj.put(id,timestamp)\n * val param_2 = obj.retrieve(start,end,granularity)\n */"}, "Rust": {"langSlug": "rust", "code": "struct LogSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LogSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn put(&self, id: i32, timestamp: String) {\n        \n    }\n    \n    fn retrieve(&self, start: String, end: String, granularity: String) -> Vec<i32> {\n        \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * let obj = LogSystem::new();\n * obj.put(id, timestamp);\n * let ret_2: Vec<i32> = obj.retrieve(start, end, granularity);\n */"}, "Racket": {"langSlug": "racket", "code": "(define log-system%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; put : exact-integer? string? -> void?\n    (define/public (put id timestamp)\n      )\n    ; retrieve : string? string? string? -> (listof exact-integer?)\n    (define/public (retrieve start end granularity)\n      )))\n\n;; Your log-system% object will be instantiated and called as such:\n;; (define obj (new log-system%))\n;; (send obj put id timestamp)\n;; (define param_2 (send obj retrieve start end granularity))"}, "Erlang": {"langSlug": "erlang", "code": "-spec log_system_init_() -> any().\nlog_system_init_() ->\n  .\n\n-spec log_system_put(Id :: integer(), Timestamp :: unicode:unicode_binary()) -> any().\nlog_system_put(Id, Timestamp) ->\n  .\n\n-spec log_system_retrieve(Start :: unicode:unicode_binary(), End :: unicode:unicode_binary(), Granularity :: unicode:unicode_binary()) -> [integer()].\nlog_system_retrieve(Start, End, Granularity) ->\n  .\n\n\n%% Your functions will be called as such:\n%% log_system_init_(),\n%% log_system_put(Id, Timestamp),\n%% Param_2 = log_system_retrieve(Start, End, Granularity),\n\n%% log_system_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule LogSystem do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec put(id :: integer, timestamp :: String.t) :: any\n  def put(id, timestamp) do\n    \n  end\n\n  @spec retrieve(start :: String.t, end :: String.t, granularity :: String.t) :: [integer]\n  def retrieve(start, end, granularity) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# LogSystem.init_()\n# LogSystem.put(id, timestamp)\n# param_2 = LogSystem.retrieve(start, end, granularity)\n\n# LogSystem.init_ will be called before every test case, in which you can do some necessary initializations."}}}