{"questionId": "3364", "acRate": 28.288426713493937, "difficulty": "Hard", "freqBar": 37.077851064684566, "frontendQuestionId": "3117", "paidOnly": false, "status": "ac", "title": "Minimum Sum of Values by Dividing Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}, {"name": "Queue", "id": "VG9waWNUYWdOb2RlOjM0", "slug": "queue"}], "titleSlug": "minimum-sum-of-values-by-dividing-array", "content": "<p>You are given two arrays <code>nums</code> and <code>andValues</code> of length <code>n</code> and <code>m</code> respectively.</p>\n\n<p>The <strong>value</strong> of an array is equal to the <strong>last</strong> element of that array.</p>\n\n<p>You have to divide <code>nums</code> into <code>m</code> <strong>disjoint contiguous</strong> <span data-keyword=\"subarray-nonempty\">subarrays</span> such that for the <code>i<sup>th</sup></code> subarray <code>[l<sub>i</sub>, r<sub>i</sub>]</code>, the bitwise <code>AND</code> of the subarray elements is equal to <code>andValues[i]</code>, in other words, <code>nums[l<sub>i</sub>] &amp; nums[l<sub>i</sub> + 1] &amp; ... &amp; nums[r<sub>i</sub>] == andValues[i]</code> for all <code>1 &lt;= i &lt;= m</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the <strong>values</strong> of the </em><code>m</code><em> subarrays </em><code>nums</code><em> is divided into</em>. <em>If it is not possible to divide </em><code>nums</code><em> into </em><code>m</code><em> subarrays satisfying these conditions, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2], andValues = [0,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way to divide <code>nums</code> is:</p>\n\n<ol>\n\t<li><code>[1,4]</code> as <code>1 &amp; 4 == 0</code>.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[2]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n</ol>\n\n<p>The sum of the values for these subarrays is <code>4 + 3 + 3 + 2 = 12</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,5,7,7,7,5], andValues = [0,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">17</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are three ways to divide <code>nums</code>:</p>\n\n<ol>\n\t<li><code>[[2,3,5],[7,7,7],[5]]</code> with the sum of the values <code>5 + 7 + 5 == 17</code>.</li>\n\t<li><code>[[2,3,5,7],[7,7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n\t<li><code>[[2,3,5,7,7],[7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n</ol>\n\n<p>The minimum possible sum of the values is <code>17</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], andValues = [2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bitwise <code>AND</code> of the entire array <code>nums</code> is <code>0</code>. As there is no possible way to divide <code>nums</code> into a single subarray to have the bitwise <code>AND</code> of elements <code>2</code>, return <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m == andValues.length &lt;= min(n, 10)</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= andValues[j] &lt; 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.", "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.", "The answer is <code>dp[n][m]</code>.", "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.", "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed \u201csliding to right\u201d which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."], "exampleTestcases": "[1,4,3,3,2]\n[0,3,3,2]\n[2,3,5,7,7,7,5]\n[0,7,5]\n[1,2,3,4]\n[2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumValueSum(vector<int>& nums, vector<int>& andValues) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumValueSum(int[] nums, int[] andValues) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumValueSum(self, nums, andValues):\n        \"\"\"\n        :type nums: List[int]\n        :type andValues: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumValueSum(int* nums, int numsSize, int* andValues, int andValuesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumValueSum(int[] nums, int[] andValues) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} andValues\n * @return {number}\n */\nvar minimumValueSum = function(nums, andValues) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumValueSum(nums: number[], andValues: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $andValues\n     * @return Integer\n     */\n    function minimumValueSum($nums, $andValues) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumValueSum(_ nums: [Int], _ andValues: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumValueSum(nums: IntArray, andValues: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumValueSum(List<int> nums, List<int> andValues) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumValueSum(nums []int, andValues []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} and_values\n# @return {Integer}\ndef minimum_value_sum(nums, and_values)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumValueSum(nums: Array[Int], andValues: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_value_sum(nums: Vec<i32>, and_values: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-value-sum nums andValues)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_value_sum(Nums :: [integer()], AndValues :: [integer()]) -> integer().\nminimum_value_sum(Nums, AndValues) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_value_sum(nums :: [integer], and_values :: [integer]) :: integer\n  def minimum_value_sum(nums, and_values) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-subarray-with-bitwise-or-closest-to-k", "title": "Find Subarray With Bitwise OR Closest to K", "isPaidOnly": false}]}