{"question_id": "163", "problem_slug": "missing-ranges", "problem_title": "Missing Ranges", "content": "You are given an inclusive range [lower, upper] and a sorted unique integer array nums, where all elements are within the inclusive range.\nA number x is considered missing if x is in the range [lower, upper] and x is not in nums.\nReturn the shortest sorted list of ranges that exactly covers all the missing numbers. That is, no element of nums is included in any of the ranges, and each missing number is covered by one of the ranges.\n \n \nExample 1:\n\nInput: nums = [0,1,3,50,75], lower = 0, upper = 99\nOutput: [[2,2],[4,49],[51,74],[76,99]]\nExplanation: The ranges are:\n[2,2]\n[4,49]\n[51,74]\n[76,99]\n\nExample 2:\n\nInput: nums = [-1], lower = -1, upper = -1\nOutput: []\nExplanation: There are no missing ranges since there are no missing numbers.\n\n \nConstraints:\n\n-109 <= lower <= upper <= 109\n0 <= nums.length <= 100\nlower <= nums[i] <= upper\nAll the values of nums are unique.\n\n", "hints": [], "exampleTestcases": "[0,1,3,50,75]\n0\n99\n[-1]\n-1\n-1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> findMissingRanges(vector<int>& nums, int lower, int upper) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> findMissingRanges(int[] nums, int lower, int upper) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMissingRanges(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findMissingRanges(int* nums, int numsSize, int lower, int upper, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> FindMissingRanges(int[] nums, int lower, int upper) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number[][]}\n */\nvar findMissingRanges = function(nums, lower, upper) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMissingRanges(nums: number[], lower: number, upper: number): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer[][]\n     */\n    function findMissingRanges($nums, $lower, $upper) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMissingRanges(_ nums: [Int], _ lower: Int, _ upper: Int) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMissingRanges(nums: IntArray, lower: Int, upper: Int): List<List<Int>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> findMissingRanges(List<int> nums, int lower, int upper) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMissingRanges(nums []int, lower int, upper int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer[][]}\ndef find_missing_ranges(nums, lower, upper)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMissingRanges(nums: Array[Int], lower: Int, upper: Int): List[List[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_missing_ranges(nums: Vec<i32>, lower: i32, upper: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-missing-ranges nums lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_missing_ranges(Nums :: [integer()], Lower :: integer(), Upper :: integer()) -> [[integer()]].\nfind_missing_ranges(Nums, Lower, Upper) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_missing_ranges(nums :: [integer], lower :: integer, upper :: integer) :: [[integer]]\n  def find_missing_ranges(nums, lower, upper) do\n    \n  end\nend"}}}