{"questionId": "163", "acRate": 34.24608120944438, "difficulty": "Easy", "freqBar": 56.68025960090378, "frontendQuestionId": "163", "paidOnly": true, "status": "ac", "title": "Missing Ranges", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "missing-ranges", "content": "<p>You are given an inclusive range <code>[lower, upper]</code> and a <strong>sorted unique</strong> integer array <code>nums</code>, where all elements are within the inclusive range.</p>\n\n<p>A number <code>x</code> is considered <strong>missing</strong> if <code>x</code> is in the range <code>[lower, upper]</code> and <code>x</code> is not in <code>nums</code>.</p>\n\n<p>Return <em>the <strong>shortest sorted</strong> list of ranges that <b>exactly covers all the missing numbers</b></em>. That is, no element of <code>nums</code> is included in any of the ranges, and each missing number is covered by one of the ranges.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,3,50,75], lower = 0, upper = 99\n<strong>Output:</strong> [[2,2],[4,49],[51,74],[76,99]]\n<strong>Explanation:</strong> The ranges are:\n[2,2]\n[4,49]\n[51,74]\n[76,99]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1], lower = -1, upper = -1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no missing ranges since there are no missing numbers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>9</sup> &lt;= lower &lt;= upper &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>lower &lt;= nums[i] &lt;= upper</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[0,1,3,50,75]\n0\n99\n[-1]\n-1\n-1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> findMissingRanges(vector<int>& nums, int lower, int upper) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> findMissingRanges(int[] nums, int lower, int upper) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMissingRanges(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findMissingRanges(int* nums, int numsSize, int lower, int upper, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> FindMissingRanges(int[] nums, int lower, int upper) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number[][]}\n */\nvar findMissingRanges = function(nums, lower, upper) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMissingRanges(nums: number[], lower: number, upper: number): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer[][]\n     */\n    function findMissingRanges($nums, $lower, $upper) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMissingRanges(_ nums: [Int], _ lower: Int, _ upper: Int) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMissingRanges(nums: IntArray, lower: Int, upper: Int): List<List<Int>> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> findMissingRanges(List<int> nums, int lower, int upper) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findMissingRanges(nums []int, lower int, upper int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer[][]}\ndef find_missing_ranges(nums, lower, upper)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMissingRanges(nums: Array[Int], lower: Int, upper: Int): List[List[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_missing_ranges(nums: Vec<i32>, lower: i32, upper: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-missing-ranges nums lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_missing_ranges(Nums :: [integer()], Lower :: integer(), Upper :: integer()) -> [[integer()]].\nfind_missing_ranges(Nums, Lower, Upper) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_missing_ranges(nums :: [integer], lower :: integer, upper :: integer) :: [[integer]]\n  def find_missing_ranges(nums, lower, upper) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "summary-ranges", "title": "Summary Ranges", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-maximal-uncovered-ranges", "title": "Find Maximal Uncovered Ranges", "isPaidOnly": true}]}