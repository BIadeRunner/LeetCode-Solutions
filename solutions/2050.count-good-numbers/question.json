{"question_id": "2050", "problem_slug": "count-good-numbers", "problem_title": "Count Good Numbers", "content": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\n\nFor example, \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, \"3245\" is not good because 3 is at an even index but is not even.\n\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.\n \nExample 1:\n\nInput: n = 1\nOutput: 5\nExplanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".\n\nExample 2:\n\nInput: n = 4\nOutput: 400\n\nExample 3:\n\nInput: n = 50\nOutput: 564908303\n\n \nConstraints:\n\n1 <= n <= 1015\n\n", "hints": ["Is there a formula we can use to find the count of all the good numbers?", "Exponentiation can be done very fast if we looked at the binary bits of n."], "exampleTestcases": "1\n4\n50", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countGoodNumbers(long long n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countGoodNumbers(long n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countGoodNumbers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countGoodNumbers(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countGoodNumbers(long long n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountGoodNumbers(long n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countGoodNumbers = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countGoodNumbers(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countGoodNumbers($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countGoodNumbers(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countGoodNumbers(n: Long): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countGoodNumbers(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countGoodNumbers(n int64) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_good_numbers(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countGoodNumbers(n: Long): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_good_numbers(n: i64) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-good-numbers n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_good_numbers(N :: integer()) -> integer().\ncount_good_numbers(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_good_numbers(n :: integer) :: integer\n  def count_good_numbers(n) do\n    \n  end\nend"}}}