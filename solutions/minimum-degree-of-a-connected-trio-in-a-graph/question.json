{"questionId": "1887", "acRate": 42.87490804637966, "difficulty": "Hard", "freqBar": 65.59063780585566, "frontendQuestionId": "1761", "paidOnly": false, "status": "ac", "title": "Minimum Degree of a Connected Trio in a Graph", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "minimum-degree-of-a-connected-trio-in-a-graph", "content": "<p>You are given an undirected graph. You are given an integer <code>n</code> which is the number of nodes in the graph and an array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an undirected edge between <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>.</p>\n\n<p>A <strong>connected trio</strong> is a set of <strong>three</strong> nodes where there is an edge between <b>every</b> pair of them.</p>\n\n<p>The <strong>degree of a connected trio</strong> is the number of edges where one endpoint is in the trio, and the other is not.</p>\n\n<p>Return <em>the <strong>minimum</strong> degree of a connected trio in the graph, or</em> <code>-1</code> <em>if the graph has no connected trios.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/26/trios1.png\" style=\"width: 388px; height: 164px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/26/trios2.png\" style=\"width: 388px; height: 164px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 400</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= n * (n-1) / 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i </sub>!= v<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n", "hints": ["Consider a trio with nodes u, v, and w. The degree of the trio is just degree(u) + degree(v) + degree(w) - 6. The -6 comes from subtracting the edges u-v, u-w, and v-w, which are counted twice each in the vertex degree calculation.", "To get the trios (u,v,w), you can iterate on u, then iterate on each w,v such that w and v are neighbors of u and are neighbors of each other."], "exampleTestcases": "6\n[[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\n7\n[[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minTrioDegree(int n, vector<vector<int>>& edges) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minTrioDegree(int n, int[][] edges) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minTrioDegree(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minTrioDegree(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinTrioDegree(int n, int[][] edges) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar minTrioDegree = function(n, edges) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minTrioDegree(n: number, edges: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function minTrioDegree($n, $edges) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minTrioDegree(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minTrioDegree(n: Int, edges: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minTrioDegree(int n, List<List<int>> edges) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minTrioDegree(n int, edges [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef min_trio_degree(n, edges)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minTrioDegree(n: Int, edges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_trio_degree(n: i32, edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-trio-degree n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_trio_degree(N :: integer(), Edges :: [[integer()]]) -> integer().\nmin_trio_degree(N, Edges) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_trio_degree(n :: integer, edges :: [[integer]]) :: integer\n  def min_trio_degree(n, edges) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "add-edges-to-make-degrees-of-all-nodes-even", "title": "Add Edges to Make Degrees of All Nodes Even", "isPaidOnly": false}]}