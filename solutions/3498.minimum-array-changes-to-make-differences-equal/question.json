{"question_id": "3498", "problem_slug": "minimum-array-changes-to-make-differences-equal", "problem_title": "Minimum Array Changes to Make Differences Equal", "content": "You are given an integer array nums of size n where n is even, and an integer k.\nYou can perform some changes on the array, where in one change you can replace any element in the array with any integer in the range from 0 to k.\nYou need to perform some changes (possibly none) such that the final array satisfies the following condition:\n\nThere exists an integer X such that abs(a[i] - a[n - i - 1]) = X for all (0 <= i < n).\n\nReturn the minimum number of changes required to satisfy the above condition.\n \nExample 1:\n\nInput: nums = [1,0,1,2,4,3], k = 4\nOutput: 2\nExplanation:\nWe can perform the following changes:\n\nReplace nums[1] by 2. The resulting array is nums = [1,2,1,2,4,3].\nReplace nums[3] by 3. The resulting array is nums = [1,2,1,3,4,3].\n\nThe integer X will be 2.\n\nExample 2:\n\nInput: nums = [0,1,2,3,3,6,5,4], k = 6\nOutput: 2\nExplanation:\nWe can perform the following operations:\n\nReplace nums[3] by 0. The resulting array is nums = [0,1,2,0,3,6,5,4].\nReplace nums[4] by 4. The resulting array is nums = [0,1,2,0,4,6,5,4].\n\nThe integer X will be 4.\n\n \nConstraints:\n\n2 <= n == nums.length <= 105\nn is even.\n0 <= nums[i] <= k <= 105\n\n", "hints": ["There are at most <code>k + 1</code> possible values of the integer <code>X</code>.", "How do we calculate the minimum number of changes efficiently if we fix the value of <code>X</code> before applying any changes?"], "exampleTestcases": "[1,0,1,2,4,3]\n4\n[0,1,2,3,3,6,5,4]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minChanges(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minChanges(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minChanges(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minChanges(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minChanges(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minChanges(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minChanges(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minChanges(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-changes nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_changes(Nums :: [integer()], K :: integer()) -> integer().\nmin_changes(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_changes(nums :: [integer], k :: integer) :: integer\n  def min_changes(nums, k) do\n    \n  end\nend"}}}