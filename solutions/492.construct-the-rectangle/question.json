{"question_id": "492", "problem_slug": "construct-the-rectangle", "problem_title": "Construct the Rectangle", "content": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\nThe area of the rectangular web page you designed must equal to the given target area.\nThe width W should not be larger than the length L, which means L >= W.\nThe difference between length L and width W should be as small as possible.\n\nReturn an array [L, W] where L and W are the length and width of the web page you designed in sequence.\n \nExample 1:\n\nInput: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n\nExample 2:\n\nInput: area = 37\nOutput: [37,1]\n\nExample 3:\n\nInput: area = 122122\nOutput: [427,286]\n\n \nConstraints:\n\n1 <= area <= 107\n\n", "hints": ["The W is always less than or equal to the square root of the area, so we start searching at sqrt(area) till we find the result."], "exampleTestcases": "4\n37\n122122", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> constructRectangle(int area) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] constructRectangle(int area) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* constructRectangle(int area, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ConstructRectangle(int area) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} area\n * @return {number[]}\n */\nvar constructRectangle = function(area) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function constructRectangle(area: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $area\n     * @return Integer[]\n     */\n    function constructRectangle($area) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func constructRectangle(_ area: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun constructRectangle(area: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> constructRectangle(int area) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func constructRectangle(area int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} area\n# @return {Integer[]}\ndef construct_rectangle(area)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def constructRectangle(area: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn construct_rectangle(area: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (construct-rectangle area)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec construct_rectangle(Area :: integer()) -> [integer()].\nconstruct_rectangle(Area) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec construct_rectangle(area :: integer) :: [integer]\n  def construct_rectangle(area) do\n    \n  end\nend"}}}