{"question_id": "2042", "problem_slug": "maximum-product-difference-between-two-pairs", "problem_title": "Maximum Product Difference Between Two Pairs", "content": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\n\nFor example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.\n\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.\n \nExample 1:\n\r\nInput: nums = [5,6,2,7,4]\r\nOutput: 34\r\nExplanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34.\r\n\nExample 2:\n\r\nInput: nums = [4,2,5,9,7,4,8]\r\nOutput: 64\r\nExplanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64.\r\n\n \nConstraints:\n\n4 <= nums.length <= 104\n1 <= nums[i] <= 104\n", "hints": ["If you only had to find the maximum product of 2 numbers in an array, which 2 numbers should you choose?", "We only need to worry about 4 numbers in the array."], "exampleTestcases": "[5,6,2,7,4]\n[4,2,5,9,7,4,8]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    int maxProductDifference(vector<int>& nums) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public int maxProductDifference(int[] nums) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def maxProductDifference(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def maxProductDifference(self, nums: List[int]) -> int:"}, "C": {"langSlug": "c", "code": "int maxProductDifference(int* nums, int numsSize){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public int MaxProductDifference(int[] nums) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxProductDifference = function(nums) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxProductDifference(nums: number[]): number {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $nums\r\n     * @return Integer\r\n     */\r\n    function maxProductDifference($nums) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func maxProductDifference(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun maxProductDifference(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func maxProductDifference(nums []int) int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_product_difference(nums)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def maxProductDifference(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn max_product_difference(nums: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-product-difference nums)\r\n  (-> (listof exact-integer?) exact-integer?)\r\n\r\n  )"}}}