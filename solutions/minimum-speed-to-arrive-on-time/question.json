{"questionId": "2000", "acRate": 46.88540712098523, "difficulty": "Medium", "freqBar": 15.251229164547702, "frontendQuestionId": "1870", "paidOnly": false, "status": "ac", "title": "Minimum Speed to Arrive on Time", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimum-speed-to-arrive-on-time", "content": "<p>You are given a floating-point number <code>hour</code>, representing the amount of time you have to reach the office. To commute to the office, you must take <code>n</code> trains in sequential order. You are also given an integer array <code>dist</code> of length <code>n</code>, where <code>dist[i]</code> describes the distance (in kilometers) of the <code>i<sup>th</sup></code> train ride.</p>\n\n<p>Each train can only depart at an integer hour, so you may need to wait in between each train ride.</p>\n\n<ul>\n\t<li>For example, if the <code>1<sup>st</sup></code> train ride takes <code>1.5</code> hours, you must wait for an additional <code>0.5</code> hours before you can depart on the <code>2<sup>nd</sup></code> train ride at the 2 hour mark.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum positive integer</strong> speed <strong>(in kilometers per hour)</strong> that all the trains must travel at for you to reach the office on time, or </em><code>-1</code><em> if it is impossible to be on time</em>.</p>\n\n<p>Tests are generated such that the answer will not exceed <code>10<sup>7</sup></code> and <code>hour</code> will have <strong>at most two digits after the decimal point</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 6\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 2.7\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 1.9\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible because the earliest the third train can depart is at the 2 hour mark.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == dist.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= hour &lt;= 10<sup>9</sup></code></li>\n\t<li>There will be at most two digits after the decimal point in <code>hour</code>.</li>\n</ul>\n", "hints": ["Given the speed the trains are traveling at, can you find the total time it takes for you to arrive?", "Is there a cutoff where any speeds larger will always allow you to arrive on time?"], "exampleTestcases": "[1,3,2]\n6\n[1,3,2]\n2.7\n[1,3,2]\n1.9", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSpeedOnTime(vector<int>& dist, double hour) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSpeedOnTime(int[] dist, double hour) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSpeedOnTime(self, dist, hour):\n        \"\"\"\n        :type dist: List[int]\n        :type hour: float\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minSpeedOnTime(int* dist, int distSize, double hour) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSpeedOnTime(int[] dist, double hour) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} dist\n * @param {number} hour\n * @return {number}\n */\nvar minSpeedOnTime = function(dist, hour) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSpeedOnTime(dist: number[], hour: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $dist\n     * @param Float $hour\n     * @return Integer\n     */\n    function minSpeedOnTime($dist, $hour) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSpeedOnTime(_ dist: [Int], _ hour: Double) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSpeedOnTime(dist: IntArray, hour: Double): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minSpeedOnTime(List<int> dist, double hour) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minSpeedOnTime(dist []int, hour float64) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} dist\n# @param {Float} hour\n# @return {Integer}\ndef min_speed_on_time(dist, hour)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSpeedOnTime(dist: Array[Int], hour: Double): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_speed_on_time(dist: Vec<i32>, hour: f64) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-speed-on-time dist hour)\n  (-> (listof exact-integer?) flonum? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_speed_on_time(Dist :: [integer()], Hour :: float()) -> integer().\nmin_speed_on_time(Dist, Hour) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_speed_on_time(dist :: [integer], hour :: float) :: integer\n  def min_speed_on_time(dist, hour) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-candies-allocated-to-k-children", "title": "Maximum Candies Allocated to K Children", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time", "title": "Minimum Skips to Arrive at Meeting On Time", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimize-maximum-of-array", "title": "Minimize Maximum of Array", "isPaidOnly": false}]}