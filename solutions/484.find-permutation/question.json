{"question_id": "484", "problem_slug": "find-permutation", "problem_title": "Find Permutation", "content": "A permutation perm of n integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the lexicographically smallest permutation perm and return it.\n \nExample 1:\n\nInput: s = \"I\"\nOutput: [1,2]\nExplanation: [1,2] is the only legal permutation that can represented by s, where the number 1 and 2 construct an increasing relationship.\n\nExample 2:\n\nInput: s = \"DI\"\nOutput: [2,1,3]\nExplanation: Both [2,1,3] and [3,1,2] can be represented as \"DI\", but since we want to find the smallest lexicographical permutation, you should return [2,1,3]\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'I' or 'D'.\n\n", "hints": [], "exampleTestcases": "\"I\"\n\"DI\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findPermutation(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findPermutation(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findPermutation(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findPermutation(self, s: str) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPermutation(char* s, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindPermutation(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number[]}\n */\nvar findPermutation = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findPermutation(s: string): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function findPermutation($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findPermutation(_ s: String) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findPermutation(s: String): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findPermutation(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findPermutation(s string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[]}\ndef find_permutation(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findPermutation(s: String): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_permutation(s: String) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-permutation s)\n  (-> string? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_permutation(S :: unicode:unicode_binary()) -> [integer()].\nfind_permutation(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_permutation(s :: String.t) :: [integer]\n  def find_permutation(s) do\n    \n  end\nend"}}}