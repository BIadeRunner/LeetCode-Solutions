{"question_id": "524", "problem_slug": "longest-word-in-dictionary-through-deleting", "problem_title": "Longest Word in Dictionary through Deleting", "content": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n \nExample 1:\n\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\nOutput: \"apple\"\n\nExample 2:\n\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\nOutput: \"a\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\n1 <= dictionary.length <= 1000\n1 <= dictionary[i].length <= 1000\ns and dictionary[i] consist of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"abpcplea\"\n[\"ale\",\"apple\",\"monkey\",\"plea\"]\n\"abpcplea\"\n[\"a\",\"b\",\"c\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string findLongestWord(string s, vector<string>& dictionary) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String findLongestWord(String s, List<String> dictionary) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findLongestWord(self, s, dictionary):\n        \"\"\"\n        :type s: str\n        :type dictionary: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findLongestWord(self, s: str, dictionary: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* findLongestWord(char* s, char** dictionary, int dictionarySize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string FindLongestWord(string s, IList<string> dictionary) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string[]} dictionary\n * @return {string}\n */\nvar findLongestWord = function(s, dictionary) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findLongestWord(s: string, dictionary: string[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $dictionary\n     * @return String\n     */\n    function findLongestWord($s, $dictionary) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findLongestWord(_ s: String, _ dictionary: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findLongestWord(s: String, dictionary: List<String>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String findLongestWord(String s, List<String> dictionary) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findLongestWord(s string, dictionary []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} dictionary\n# @return {String}\ndef find_longest_word(s, dictionary)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findLongestWord(s: String, dictionary: List[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_longest_word(s: String, dictionary: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-longest-word s dictionary)\n  (-> string? (listof string?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_longest_word(S :: unicode:unicode_binary(), Dictionary :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nfind_longest_word(S, Dictionary) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_longest_word(s :: String.t, dictionary :: [String.t]) :: String.t\n  def find_longest_word(s, dictionary) do\n    \n  end\nend"}}}