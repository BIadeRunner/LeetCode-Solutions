{"question_id": "1064", "problem_slug": "smallest-integer-divisible-by-k", "problem_title": "Smallest Integer Divisible by K", "content": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n. If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.\n \nExample 1:\n\nInput: k = 1\nOutput: 1\nExplanation: The smallest answer is n = 1, which has length 1.\n\nExample 2:\n\nInput: k = 2\nOutput: -1\nExplanation: There is no such positive integer n divisible by 2.\n\nExample 3:\n\nInput: k = 3\nOutput: 3\nExplanation: The smallest answer is n = 111, which has length 3.\n\n \nConstraints:\n\n1 <= k <= 105\n\n", "hints": ["11111 = 1111 * 10 + 1\r\nWe only need to store remainders modulo K.", "If we never get a remainder of 0, why would that happen, and how would we know that?"], "exampleTestcases": "1\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestRepunitDivByK(int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int smallestRepunitDivByK(int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestRepunitDivByK(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestRepunitDivByK(self, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int smallestRepunitDivByK(int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SmallestRepunitDivByK(int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar smallestRepunitDivByK = function(k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestRepunitDivByK(k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function smallestRepunitDivByK($k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestRepunitDivByK(_ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestRepunitDivByK(k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int smallestRepunitDivByK(int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestRepunitDivByK(k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @return {Integer}\ndef smallest_repunit_div_by_k(k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestRepunitDivByK(k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_repunit_div_by_k(k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-repunit-div-by-k k)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_repunit_div_by_k(K :: integer()) -> integer().\nsmallest_repunit_div_by_k(K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_repunit_div_by_k(k :: integer) :: integer\n  def smallest_repunit_div_by_k(k) do\n    \n  end\nend"}}}