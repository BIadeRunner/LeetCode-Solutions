{"question_id": "302", "problem_slug": "smallest-rectangle-enclosing-black-pixels", "problem_title": "Smallest Rectangle Enclosing Black Pixels", "content": "You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\nGiven two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.\nYou must write an algorithm with less than O(mn) runtime complexity\n \nExample 1:\n\n\nInput: image = [[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]], x = 0, y = 2\nOutput: 6\n\nExample 2:\n\nInput: image = [[\"1\"]], x = 0, y = 0\nOutput: 1\n\n \nConstraints:\n\nm == image.length\nn == image[i].length\n1 <= m, n <= 100\nimage[i][j] is either '0' or '1'.\n0 <= x < m\n0 <= y < n\nimage[x][y] == '1'.\nThe black pixels in the image only form one component.\n\n", "hints": [], "exampleTestcases": "[[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]]\n0\n2\n[[\"1\"]]\n0\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minArea(vector<vector<char>>& image, int x, int y) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minArea(char[][] image, int x, int y) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minArea(self, image, x, y):\n        \"\"\"\n        :type image: List[List[str]]\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minArea(self, image: List[List[str]], x: int, y: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minArea(char** image, int imageSize, int* imageColSize, int x, int y) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinArea(char[][] image, int x, int y) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} image\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minArea = function(image, x, y) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minArea(image: string[][], x: number, y: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $image\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function minArea($image, $x, $y) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minArea(_ image: [[Character]], _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minArea(image: Array<CharArray>, x: Int, y: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minArea(List<List<String>> image, int x, int y) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minArea(image [][]byte, x int, y int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} image\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef min_area(image, x, y)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minArea(image: Array[Array[Char]], x: Int, y: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_area(image: Vec<Vec<char>>, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-area image x y)\n  (-> (listof (listof char?)) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_area(Image :: [[char()]], X :: integer(), Y :: integer()) -> integer().\nmin_area(Image, X, Y) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_area(image :: [[char]], x :: integer, y :: integer) :: integer\n  def min_area(image, x, y) do\n    \n  end\nend"}}}