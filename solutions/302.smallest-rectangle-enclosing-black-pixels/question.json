{"questionId": "302", "acRate": 59.18168194333112, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "302", "paidOnly": true, "status": "ac", "title": "Smallest Rectangle Enclosing Black Pixels", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "smallest-rectangle-enclosing-black-pixels", "content": "<p>You are given an <code>m x n</code> binary matrix <code>image</code> where <code>0</code> represents a white pixel and <code>1</code> represents a black pixel.</p>\n\n<p>The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.</p>\n\n<p>Given two integers <code>x</code> and <code>y</code> that represents the location of one of the black pixels, return <em>the area of the smallest (axis-aligned) rectangle that encloses all black pixels</em>.</p>\n\n<p>You must write an algorithm with less than <code>O(mn)</code> runtime complexity</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/pixel-grid.jpg\" style=\"width: 333px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> image = [[&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],[&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],[&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;]], x = 0, y = 2\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[&quot;1&quot;]], x = 0, y = 0\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == image.length</code></li>\n\t<li><code>n == image[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>image[i][j]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>0 &lt;= x &lt; m</code></li>\n\t<li><code>0 &lt;= y &lt; n</code></li>\n\t<li><code>image[x][y] == &#39;1&#39;.</code></li>\n\t<li>The black pixels in the <code>image</code> only form <strong>one component</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]]\n0\n2\n[[\"1\"]]\n0\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minArea(vector<vector<char>>& image, int x, int y) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minArea(char[][] image, int x, int y) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minArea(self, image, x, y):\n        \"\"\"\n        :type image: List[List[str]]\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minArea(self, image: List[List[str]], x: int, y: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minArea(char** image, int imageSize, int* imageColSize, int x, int y) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinArea(char[][] image, int x, int y) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} image\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minArea = function(image, x, y) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minArea(image: string[][], x: number, y: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $image\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function minArea($image, $x, $y) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minArea(_ image: [[Character]], _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minArea(image: Array<CharArray>, x: Int, y: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minArea(List<List<String>> image, int x, int y) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minArea(image [][]byte, x int, y int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} image\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef min_area(image, x, y)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minArea(image: Array[Array[Char]], x: Int, y: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_area(image: Vec<Vec<char>>, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-area image x y)\n  (-> (listof (listof char?)) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_area(Image :: [[char()]], X :: integer(), Y :: integer()) -> integer().\nmin_area(Image, X, Y) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_area(image :: [[char]], x :: integer, y :: integer) :: integer\n  def min_area(image, x, y) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "find-the-minimum-area-to-cover-all-ones-ii", "title": "Find the Minimum Area to Cover All Ones II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-minimum-area-to-cover-all-ones-i", "title": "Find the Minimum Area to Cover All Ones I", "isPaidOnly": false}]}