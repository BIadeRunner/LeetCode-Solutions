{"question_id": "660", "problem_slug": "remove-9", "problem_title": "Remove 9", "content": "Start from integer 1, remove any integer that contains 9 such as 9, 19, 29...\nNow, you will have a new integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...].\nGiven an integer n, return the nth (1-indexed) integer in the new sequence.\n \nExample 1:\n\nInput: n = 9\nOutput: 10\n\nExample 2:\n\nInput: n = 10\nOutput: 11\n\n \nConstraints:\n\n1 <= n <= 8 * 108\n\n", "hints": [], "exampleTestcases": "9\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int newInteger(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int newInteger(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def newInteger(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def newInteger(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int newInteger(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NewInteger(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar newInteger = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function newInteger(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function newInteger($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func newInteger(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun newInteger(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int newInteger(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func newInteger(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef new_integer(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def newInteger(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn new_integer(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (new-integer n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec new_integer(N :: integer()) -> integer().\nnew_integer(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec new_integer(n :: integer) :: integer\n  def new_integer(n) do\n    \n  end\nend"}}}