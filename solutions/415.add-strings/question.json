{"question_id": "415", "problem_slug": "add-strings", "problem_title": "Add Strings", "content": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n \nExample 1:\n\nInput: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"\n\nExample 2:\n\nInput: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"\n\nExample 3:\n\nInput: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"\n\n \nConstraints:\n\n1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.\n\n", "hints": [], "exampleTestcases": "\"11\"\n\"123\"\n\"456\"\n\"77\"\n\"0\"\n\"0\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String addStrings(String num1, String num2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* addStrings(char* num1, char* num2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AddStrings(string num1, string num2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function addStrings(num1: string, num2: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun addStrings(num1: String, num2: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String addStrings(String num1, String num2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func addStrings(num1 string, num2 string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (add-strings num1 num2)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_strings(Num1, Num2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\n  def add_strings(num1, num2) do\n    \n  end\nend"}}}