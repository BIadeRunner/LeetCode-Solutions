{"question_id": "3278", "problem_slug": "find-the-number-of-ways-to-place-people-i", "problem_title": "Find the Number of Ways to Place People I", "content": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi].\nCount the number of pairs of points (A, B), where\n\nA is on the upper left side of B, and\nthere are no other points in the rectangle (or line) they make (including the border).\n\nReturn the count.\n \nExample 1:\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 0\nExplanation:\n\nThere is no way to choose A and B so A is on the upper left side of B.\n\nExample 2:\n\nInput: points = [[6,2],[4,4],[2,6]]\nOutput: 2\nExplanation:\n\n\nThe left one is the pair (points[1], points[0]), where points[1] is on the upper left side of points[0] and the rectangle is empty.\nThe middle one is the pair (points[2], points[1]), same as the left one it is a valid pair.\nThe right one is the pair (points[2], points[0]), where points[2] is on the upper left side of points[0], but points[1] is inside the rectangle so it's not a valid pair.\n\n\nExample 3:\n\nInput: points = [[3,1],[1,3],[1,1]]\nOutput: 2\nExplanation:\n\n\nThe left one is the pair (points[2], points[0]), where points[2] is on the upper left side of points[0] and there are no other points on the line they form. Note that it is a valid state when the two points form a line.\nThe middle one is the pair (points[1], points[2]), it is a valid pair same as the left one.\nThe right one is the pair (points[1], points[0]), it is not a valid pair as points[2] is on the border of the rectangle.\n\n\n \nConstraints:\n\n2 <= n <= 50\npoints[i].length == 2\n0 <= points[i][0], points[i][1] <= 50\nAll points[i] are distinct.\n\n", "hints": ["We can enumerate all the upper-left and lower-right corners.", "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."], "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[6,2],[4,4],[2,6]]\n[[3,1],[1,3],[1,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfPairs(int[][] points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfPairs(points: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfPairs(points [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend"}}}