{"question_id": "2082", "problem_slug": "minimum-cost-to-separate-sentence-into-rows", "problem_title": "Minimum Cost to Separate Sentence Into Rows", "content": "You are given a string sentence containing words separated by spaces, and an integer k. Your task is to separate sentence into rows where the number of characters in each row is at most k. You may assume that sentence does not begin or end with a space, and the words in sentence are separated by a single space.\nYou can split sentence into rows by inserting line breaks between words in sentence. A word cannot be split between two rows. Each word must be used exactly once, and the word order cannot be rearranged. Adjacent words in a row should be separated by a single space, and rows should not begin or end with spaces.\nThe cost of a row with length n is (k - n)2, and the total cost is the sum of the costs for all rows except the last one.\n\nFor example if sentence = \"i love leetcode\" and k = 12:\n\n\t\nSeparating sentence into \"i\", \"love\", and \"leetcode\" has a cost of (12 - 1)2 + (12 - 4)2 = 185.\nSeparating sentence into \"i love\", and \"leetcode\" has a cost of (12 - 6)2 = 36.\nSeparating sentence into \"i\", and \"love leetcode\" is not possible because the length of \"love leetcode\" is greater than k.\n\n\n\nReturn the minimum possible total cost of separating sentence into rows.\n \nExample 1:\n\nInput: sentence = \"i love leetcode\", k = 12\nOutput: 36\nExplanation:\nSeparating sentence into \"i\", \"love\", and \"leetcode\" has a cost of (12 - 1)2 + (12 - 4)2 = 185.\nSeparating sentence into \"i love\", and \"leetcode\" has a cost of (12 - 6)2 = 36.\nSeparating sentence into \"i\", \"love leetcode\" is not possible because \"love leetcode\" has length 13.\n36 is the minimum possible total cost so return it.\n\nExample 2:\n\nInput: sentence = \"apples and bananas taste great\", k = 7\nOutput: 21\nExplanation\nSeparating sentence into \"apples\", \"and\", \"bananas\", \"taste\", and \"great\" has a cost of (7 - 6)2 + (7 - 3)2 + (7 - 7)2 + (7 - 5)2 = 21.\n21 is the minimum possible total cost so return it.\n\nExample 3:\n\nInput: sentence = \"a\", k = 5\nOutput: 0\nExplanation:\nThe cost of the last row is not included in the total cost, and since there is only one row, return 0.\n\n \nConstraints:\n\n1 <= sentence.length <= 5000\n1 <= k <= 5000\nThe length of each word in sentence is at most k.\nsentence consists of only lowercase English letters and spaces.\nsentence does not begin or end with a space.\nWords in sentence are separated by a single space.\n\n", "hints": ["Create an array storing all of the words in sentence separated.", "Try dynamic programming.", "Build a dp array where dp[i] represents the minimum total cost for the first i + 1 words."], "exampleTestcases": "\"i love leetcode\"\n12\n\"apples and bananas taste great\"\n7\n\"a\"\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(string sentence, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumCost(String sentence, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, sentence, k):\n        \"\"\"\n        :type sentence: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, sentence: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumCost(char* sentence, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(string sentence, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @param {number} k\n * @return {number}\n */\nvar minimumCost = function(sentence, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCost(sentence: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumCost($sentence, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ sentence: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(sentence: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumCost(String sentence, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCost(sentence string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} sentence\n# @param {Integer} k\n# @return {Integer}\ndef minimum_cost(sentence, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCost(sentence: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(sentence: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-cost sentence k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_cost(Sentence :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_cost(Sentence, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(sentence :: String.t, k :: integer) :: integer\n  def minimum_cost(sentence, k) do\n    \n  end\nend"}}}