{"question_id": "1886", "problem_slug": "minimum-limit-of-balls-in-a-bag", "problem_title": "Minimum Limit of Balls in a Bag", "content": "You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.\nYou can perform the following operation at most maxOperations times:\n\nTake any bag of balls and divide it into two new bags with a positive number of balls.\n\n\t\nFor example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.\n\n\n\nYour penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.\nReturn the minimum possible penalty after performing the operations.\n \nExample 1:\n\nInput: nums = [9], maxOperations = 2\nOutput: 3\nExplanation: \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n\nExample 2:\n\nInput: nums = [2,4,8,2], maxOperations = 4\nOutput: 2\nExplanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= maxOperations, nums[i] <= 109\n\n", "hints": ["Let's change the question if we know the maximum size of a bag what is the minimum number of bags you can make", "note that as the maximum size increases the minimum number of bags decreases so we can binary search the maximum size"], "exampleTestcases": "[9]\n2\n[2,4,8,2]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSize(vector<int>& nums, int maxOperations) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSize(int[] nums, int maxOperations) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSize(self, nums, maxOperations):\n        \"\"\"\n        :type nums: List[int]\n        :type maxOperations: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSize(self, nums: List[int], maxOperations: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSize(int* nums, int numsSize, int maxOperations) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSize(int[] nums, int maxOperations) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} maxOperations\n * @return {number}\n */\nvar minimumSize = function(nums, maxOperations) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSize(nums: number[], maxOperations: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $maxOperations\n     * @return Integer\n     */\n    function minimumSize($nums, $maxOperations) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSize(_ nums: [Int], _ maxOperations: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSize(nums: IntArray, maxOperations: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSize(List<int> nums, int maxOperations) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSize(nums []int, maxOperations int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} max_operations\n# @return {Integer}\ndef minimum_size(nums, max_operations)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSize(nums: Array[Int], maxOperations: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_size(nums: Vec<i32>, max_operations: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-size nums maxOperations)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_size(Nums :: [integer()], MaxOperations :: integer()) -> integer().\nminimum_size(Nums, MaxOperations) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_size(nums :: [integer], max_operations :: integer) :: integer\n  def minimum_size(nums, max_operations) do\n    \n  end\nend"}}}