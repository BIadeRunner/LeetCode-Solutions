{"question_id": "910", "problem_slug": "nth-magical-number", "problem_title": "Nth Magical Number", "content": "A positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 1, a = 2, b = 3\nOutput: 2\n\nExample 2:\n\nInput: n = 4, a = 2, b = 3\nOutput: 6\n\n \nConstraints:\n\n1 <= n <= 109\n2 <= a, b <= 4 * 104\n\n", "hints": [], "exampleTestcases": "1\n2\n3\n4\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int nthMagicalNumber(int n, int a, int b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int nthMagicalNumber(int n, int a, int b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nthMagicalNumber(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int nthMagicalNumber(int n, int a, int b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NthMagicalNumber(int n, int a, int b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar nthMagicalNumber = function(n, a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nthMagicalNumber(n: number, a: number, b: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function nthMagicalNumber($n, $a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nthMagicalNumber(_ n: Int, _ a: Int, _ b: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nthMagicalNumber(n: Int, a: Int, b: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int nthMagicalNumber(int n, int a, int b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nthMagicalNumber(n int, a int, b int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef nth_magical_number(n, a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nthMagicalNumber(n: Int, a: Int, b: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn nth_magical_number(n: i32, a: i32, b: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (nth-magical-number n a b)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec nth_magical_number(N :: integer(), A :: integer(), B :: integer()) -> integer().\nnth_magical_number(N, A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec nth_magical_number(n :: integer, a :: integer, b :: integer) :: integer\n  def nth_magical_number(n, a, b) do\n    \n  end\nend"}}}