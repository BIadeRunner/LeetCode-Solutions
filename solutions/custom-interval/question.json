{"questionId": "2908", "acRate": 82.11678832116789, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2805", "paidOnly": true, "status": "ac", "title": "Custom Interval", "topicTags": [], "titleSlug": "custom-interval", "content": "<p><strong>Function&nbsp;</strong><code>customInterval</code></p>\n\n<p>Given a function <code>fn</code>, a number <code>delay</code> and a number <code>period</code>, return&nbsp;a number&nbsp;<code>id</code>.</p>\n\n<p><code>customInterval</code>&nbsp;is a function that should execute the provided function <code>fn</code> at intervals based on a linear pattern defined by the formula <code>delay&nbsp;+ period&nbsp;* count</code>.&nbsp;</p>\n\n<p>The <code>count</code> in the formula&nbsp;represents the number of times the interval has been&nbsp;executed starting from an initial value of <code>0</code>.</p>\n\n<p><strong>Function </strong><code>customClearInterval</code>&nbsp;</p>\n\n<p>Given the&nbsp;<code>id</code>. <code>id</code>&nbsp;is the&nbsp;returned value from&nbsp;the function&nbsp;<code>customInterval</code>.</p>\n\n<p><code>customClearInterval</code>&nbsp;should stop executing&nbsp;provided function <code>fn</code> at intervals.</p>\n\n<p><strong>Note:</strong> The <code>setTimeout</code> and <code>setInterval</code> functions in Node.js return an object, not a number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> delay = 50, period = 20, cancelTime = 225\n<strong>Output:</strong> [50,120,210]\n<strong>Explanation:</strong> \nconst t = performance.now()&nbsp;&nbsp;\nconst result = []\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\nconst fn = () =&gt; {\n    result.push(Math.floor(performance.now() - t))\n}\nconst id = customInterval(fn, delay, period)\n        \nsetTimeout(() =&gt; {\n    customClearInterval(id)\n}, 225)\n\n50 + 20 * 0 = 50 // 50ms - 1st function call\n50 + 20&nbsp;* 1 = 70 // 50ms + 70ms = 120ms - 2nd function call\n50 + 20 * 2 = 90 // 50ms + 70ms + 90ms = 210ms - 3rd function call\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> delay = 20, period = 20, cancelTime = 150\n<strong>Output:</strong> [20,60,120]\n<strong>Explanation:</strong> \n20 + 20 * 0 = 20 // 20ms - 1st function call\n20 + 20&nbsp;* 1 = 40 // 20ms + 40ms = 60ms - 2nd function call\n20 + 20 * 2 = 60 // 20ms + 40ms + 60ms = 120ms - 3rd function call\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> delay = 100, period = 200, cancelTime = 500\n<strong>Output:</strong> [100,400]\n<strong>Explanation:</strong> \n100 + 200 * 0 = 100 // 100ms - 1st function call\n100 + 200&nbsp;* 1 = 300 // 100ms + 300ms = 400ms - 2nd function call\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>20 &lt;= delay, period &lt;= 250</code></li>\n\t<li><code>20 &lt;= cancelTime &lt;= 1000</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "50\n20\n225\n20\n20\n150\n100\n200\n500", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Function} fn\n * @param {number} delay\n * @param {number} period\n * @return {number} id\n */\n\nfunction customInterval(fn, delay, period){\n    \n}\n\n/**\n * @param {number} id\n * @return {void}\n */\nfunction customClearInterval(id) {\n    \n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function customInterval(fn: Function, delay: number, period: number): number {\n    \n}\n\nfunction customClearInterval(id: number): void {\n    \n}"}], "similarQuestionList": []}