{"question_id": "2290", "problem_slug": "removing-minimum-number-of-magic-beans", "problem_title": "Removing Minimum Number of Magic Beans", "content": "You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.\nRemove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.\nReturn the minimum number of magic beans that you have to remove.\n \nExample 1:\n\nInput: beans = [4,1,6,5]\nOutput: 4\nExplanation: \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,0,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,4,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,4]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.\n\nExample 2:\n\nInput: beans = [2,10,3,2]\nOutput: 7\nExplanation:\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [0,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,0]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,0,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.\n\n \nConstraints:\n\n1 <= beans.length <= 105\n1 <= beans[i] <= 105\n\n", "hints": ["Notice that if we choose to make x bags of beans empty, we should choose the x bags with the least amount of beans.", "Notice that if the minimum number of beans in a non-empty bag is m, then the best way to make all bags have an equal amount of beans is to reduce all the bags to have m beans.", "Can we iterate over how many bags we should remove and choose the one that minimizes the total amount of beans to remove?", "Sort the bags of beans first."], "exampleTestcases": "[4,1,6,5]\n[2,10,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumRemoval(vector<int>& beans) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minimumRemoval(int[] beans) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumRemoval(self, beans):\n        \"\"\"\n        :type beans: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumRemoval(self, beans: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minimumRemoval(int* beans, int beansSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinimumRemoval(int[] beans) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} beans\n * @return {number}\n */\nvar minimumRemoval = function(beans) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumRemoval(beans: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $beans\n     * @return Integer\n     */\n    function minimumRemoval($beans) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumRemoval(_ beans: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumRemoval(beans: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumRemoval(List<int> beans) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumRemoval(beans []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} beans\n# @return {Integer}\ndef minimum_removal(beans)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumRemoval(beans: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_removal(beans: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-removal beans)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_removal(Beans :: [integer()]) -> integer().\nminimum_removal(Beans) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_removal(beans :: [integer]) :: integer\n  def minimum_removal(beans) do\n    \n  end\nend"}}}