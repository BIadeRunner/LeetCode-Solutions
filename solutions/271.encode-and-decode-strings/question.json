{"questionId": "271", "acRate": 47.91322278472294, "difficulty": "Medium", "freqBar": 52.6616196514498, "frontendQuestionId": "271", "paidOnly": true, "status": "ac", "title": "Encode and Decode Strings", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}], "titleSlug": "encode-and-decode-strings", "content": "<p>Design an algorithm to encode <b>a list of strings</b> to <b>a string</b>. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\n\n<p>Machine 1 (sender) has the function:</p>\n\n<pre>\nstring encode(vector&lt;string&gt; strs) {\n  // ... your code\n  return encoded_string;\n}</pre>\nMachine 2 (receiver) has the function:\n\n<pre>\nvector&lt;string&gt; decode(string s) {\n  //... your code\n  return strs;\n}\n</pre>\n\n<p>So Machine 1 does:</p>\n\n<pre>\nstring encoded_string = encode(strs);\n</pre>\n\n<p>and Machine 2 does:</p>\n\n<pre>\nvector&lt;string&gt; strs2 = decode(encoded_string);\n</pre>\n\n<p><code>strs2</code> in Machine 2 should be the same as <code>strs</code> in Machine 1.</p>\n\n<p>Implement the <code>encode</code> and <code>decode</code> methods.</p>\n\n<p>You are not allowed to&nbsp;solve the problem using any serialize methods (such as <code>eval</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dummy_input = [&quot;Hello&quot;,&quot;World&quot;]\n<strong>Output:</strong> [&quot;Hello&quot;,&quot;World&quot;]\n<strong>Explanation:</strong>\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---&gt; Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nString[] strs = decoder.decode(msg);\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dummy_input = [&quot;&quot;]\n<strong>Output:</strong> [&quot;&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> contains any possible characters out of <code>256</code> valid ASCII characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Could you write a generalized algorithm to work on any possible set of characters?</p>\n", "hints": [], "exampleTestcases": "[\"Hello\",\"World\"]\n[\"\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));"}, {"lang": "Java", "langSlug": "java", "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public String encode(List<String> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public List<String> decode(String s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"}, {"lang": "Python", "langSlug": "python", "code": "class Codec:\n\n    def encode(self, strs):\n        \"\"\"Encodes a list of strings to a single string.\n        \n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        \n\n    def decode(self, s):\n        \"\"\"Decodes a single string to a list of strings.\n        \n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"}, {"lang": "Python3", "langSlug": "python3", "code": "class Codec:\n    def encode(self, strs: List[str]) -> str:\n        \"\"\"Encodes a list of strings to a single string.\n        \"\"\"\n        \n\n    def decode(self, s: str) -> List[str]:\n        \"\"\"Decodes a single string to a list of strings.\n        \"\"\"\n        \n\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"}, {"lang": "C", "langSlug": "c", "code": "/** Encodes a list of strings to a single string */\nchar* encode(char** strs, int strsSize) {\n    \n}\n\n/**\n * Decodes a single string to a list of strings.\n *\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** decode(char* s, int* returnSize) {\n    \n}\n\n// Your functions will be called as such:\n// char* s = encode(strs, strsSize);\n// decode(s, &returnSize);"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public string encode(IList<string> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public IList<string> decode(string s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Encodes a list of strings to a single string.\n *\n * @param {string[]} strs\n * @return {string}\n */\nvar encode = function(strs) {\n    \n};\n\n/**\n * Decodes a single string to a list of strings.\n *\n * @param {string} s\n * @return {string[]}\n */\nvar decode = function(s) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Encodes a list of strings to a single string.\n */\nfunction encode(strs: string[]): string {\n\t\n};\n\n/**\n * Decodes a single string to a list of strings.\n */\nfunction decode(s: string): string[] {\n\t\n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class Codec {\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function encode($strs) {\n        \n    }\n    \n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function decode($s) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $obj = Codec();\n * $s = $obj->encode($strs);\n * $ans = $obj->decode($s);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "class Codec {\n    func encode(_ strs: [String]) -> String {\n        \n    }\n    \n    func decode(_ s: String) -> [String] {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec()\n * val s = obj.encode(strs)\n * let ans = obj.decode(s)\n*/"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Codec {\n    // Encodes a list of strings to a single string.\n    fun encode(strs: List<String>): String {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    fun decode(s: String): List<String> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = Codec()\n * val s = obj.encode(strs)\n * val ans = obj.decode(s)\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type Codec struct {\n    \n}\n\n// Encodes a list of strings to a single string.\nfunc (codec *Codec) Encode(strs []string) string {\n    \n}\n\n// Decodes a single string to a list of strings.\nfunc (codec *Codec) Decode(strs string) []string {\n    \n}\n\n// Your Codec object will be instantiated and called as such:\n// var codec Codec\n// codec.Decode(codec.Encode(strs));"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Encodes a list of strings to a single string.\n#\n# @param {string[]} strs\n# @return {string}\ndef encode(strs)\n    \nend\n\n# Decodes a single string to a list of strings.\n#\n# @param {string} s\n# @return {string[]}\ndef decode(s)\n    \nend\n\n\n# Your functions will be called as such:\n# decode(encode(strs))"}, {"lang": "Scala", "langSlug": "scala", "code": "class Codec {\n    // Encodes a list of strings to a single string.\n    def encode(strs: List[String]): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def decode(s: String): List[String] = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = new Codec()\n * val s = obj.encode(strs)\n * val ans = obj.decode(s)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\t\n    fn encode(&self, strs: Vec<String>) -> String {\n        \n    }\n\t\n    fn decode(&self, s: String) -> Vec<String> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let s: String = obj.encode(strs);\n * let ans: VecVec<String> = obj.decode(s);\n */"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "count-and-say", "title": "Count and Say", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "serialize-and-deserialize-binary-tree", "title": "Serialize and Deserialize Binary Tree", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "string-compression", "title": "String Compression", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-binary-substrings", "title": "Count Binary Substrings", "isPaidOnly": false}]}