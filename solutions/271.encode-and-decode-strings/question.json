{"question_id": "271", "problem_slug": "encode-and-decode-strings", "problem_title": "Encode and Decode Strings", "content": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\nMachine 1 (sender) has the function:\n\nstring encode(vector<string> strs) {\n  // ... your code\n  return encoded_string;\n}\nMachine 2 (receiver) has the function:\n\n\nvector<string> decode(string s) {\n  //... your code\n  return strs;\n}\n\nSo Machine 1 does:\n\nstring encoded_string = encode(strs);\n\nand Machine 2 does:\n\nvector<string> strs2 = decode(encoded_string);\n\nstrs2 in Machine 2 should be the same as strs in Machine 1.\nImplement the encode and decode methods.\nYou are not allowed to solve the problem using any serialize methods (such as eval).\n \nExample 1:\n\nInput: dummy_input = [\"Hello\",\"World\"]\nOutput: [\"Hello\",\"World\"]\nExplanation:\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---> Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nString[] strs = decoder.decode(msg);\n\nExample 2:\n\nInput: dummy_input = [\"\"]\nOutput: [\"\"]\n\n \nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] contains any possible characters out of 256 valid ASCII characters.\n\n \nFollow up: Could you write a generalized algorithm to work on any possible set of characters?\n", "hints": [], "exampleTestcases": "[\"Hello\",\"World\"]\n[\"\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));"}, "Java": {"langSlug": "java", "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public String encode(List<String> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public List<String> decode(String s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"}, "Python": {"langSlug": "python", "code": "class Codec:\n\n    def encode(self, strs):\n        \"\"\"Encodes a list of strings to a single string.\n        \n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        \n\n    def decode(self, s):\n        \"\"\"Decodes a single string to a list of strings.\n        \n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"}, "Python3": {"langSlug": "python3", "code": "class Codec:\n    def encode(self, strs: List[str]) -> str:\n        \"\"\"Encodes a list of strings to a single string.\n        \"\"\"\n        \n\n    def decode(self, s: str) -> List[str]:\n        \"\"\"Decodes a single string to a list of strings.\n        \"\"\"\n        \n\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))"}, "C": {"langSlug": "c", "code": "/** Encodes a list of strings to a single string */\nchar* encode(char** strs, int strsSize) {\n    \n}\n\n/**\n * Decodes a single string to a list of strings.\n *\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** decode(char* s, int* returnSize) {\n    \n}\n\n// Your functions will be called as such:\n// char* s = encode(strs, strsSize);\n// decode(s, &returnSize);"}, "C#": {"langSlug": "csharp", "code": "public class Codec {\n\n    // Encodes a list of strings to a single string.\n    public string encode(IList<string> strs) {\n        \n    }\n\n    // Decodes a single string to a list of strings.\n    public IList<string> decode(string s) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(strs));"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Encodes a list of strings to a single string.\n *\n * @param {string[]} strs\n * @return {string}\n */\nvar encode = function(strs) {\n    \n};\n\n/**\n * Decodes a single string to a list of strings.\n *\n * @param {string} s\n * @return {string[]}\n */\nvar decode = function(s) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Encodes a list of strings to a single string.\n */\nfunction encode(strs: string[]): string {\n\t\n};\n\n/**\n * Decodes a single string to a list of strings.\n */\nfunction decode(s: string): string[] {\n\t\n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"}, "PHP": {"langSlug": "php", "code": "class Codec {\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function encode($strs) {\n        \n    }\n    \n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function decode($s) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $obj = Codec();\n * $s = $obj->encode($strs);\n * $ans = $obj->decode($s);\n */"}, "Swift": {"langSlug": "swift", "code": "class Codec {\n    func encode(_ strs: [String]) -> String {\n        \n    }\n    \n    func decode(_ s: String) -> [String] {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec()\n * val s = obj.encode(strs)\n * let ans = obj.decode(s)\n*/"}, "Kotlin": {"langSlug": "kotlin", "code": "class Codec {\n    // Encodes a list of strings to a single string.\n    fun encode(strs: List<String>): String {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    fun decode(s: String): List<String> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = Codec()\n * val s = obj.encode(strs)\n * val ans = obj.decode(s)\n */"}, "Go": {"langSlug": "golang", "code": "type Codec struct {\n    \n}\n\n// Encodes a list of strings to a single string.\nfunc (codec *Codec) Encode(strs []string) string {\n    \n}\n\n// Decodes a single string to a list of strings.\nfunc (codec *Codec) Decode(strs string) []string {\n    \n}\n\n// Your Codec object will be instantiated and called as such:\n// var codec Codec\n// codec.Decode(codec.Encode(strs));"}, "Ruby": {"langSlug": "ruby", "code": "# Encodes a list of strings to a single string.\n#\n# @param {string[]} strs\n# @return {string}\ndef encode(strs)\n    \nend\n\n# Decodes a single string to a list of strings.\n#\n# @param {string} s\n# @return {string[]}\ndef decode(s)\n    \nend\n\n\n# Your functions will be called as such:\n# decode(encode(strs))"}, "Scala": {"langSlug": "scala", "code": "class Codec {\n    // Encodes a list of strings to a single string.\n    def encode(strs: List[String]): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def decode(s: String): List[String] = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = new Codec()\n * val s = obj.encode(strs)\n * val ans = obj.decode(s)\n */"}, "Rust": {"langSlug": "rust", "code": "struct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\t\n    fn encode(&self, strs: Vec<String>) -> String {\n        \n    }\n\t\n    fn decode(&self, s: String) -> Vec<String> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let s: String = obj.encode(strs);\n * let ans: VecVec<String> = obj.decode(s);\n */"}}}