{"questionId": "1675", "acRate": 71.08547631951038, "difficulty": "Medium", "freqBar": 78.53862401518252, "frontendQuestionId": "1552", "paidOnly": false, "status": "ac", "title": "Magnetic Force Between Two Balls", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "magnetic-force-between-two-balls", "content": "<p>In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has <code>n</code> empty baskets, the <code>i<sup>th</sup></code> basket is at <code>position[i]</code>, Morty has <code>m</code> balls and needs to distribute the balls into the baskets such that the <strong>minimum magnetic force</strong> between any two balls is <strong>maximum</strong>.</p>\n\n<p>Rick stated that magnetic force between two different balls at positions <code>x</code> and <code>y</code> is <code>|x - y|</code>.</p>\n\n<p>Given the integer array <code>position</code> and the integer <code>m</code>. Return <em>the required force</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/11/q3v1.jpg\" style=\"width: 562px; height: 195px;\" />\n<pre>\n<strong>Input:</strong> position = [1,2,3,4,7], m = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> position = [5,4,3,2,1,1000000000], m = 2\n<strong>Output:</strong> 999999999\n<strong>Explanation:</strong> We can use baskets 1 and 1000000000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == position.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= position[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All integers in <code>position</code> are <strong>distinct</strong>.</li>\n\t<li><code>2 &lt;= m &lt;= position.length</code></li>\n</ul>\n", "hints": ["If you can place balls such that the answer is x then you can do it for y where y < x.", "Similarly if you cannot place balls such that the answer is x then you can do it for y where y > x.", "Binary search on the answer and greedily see if it is possible."], "exampleTestcases": "[1,2,3,4,7]\n3\n[5,4,3,2,1,1000000000]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxDistance(vector<int>& position, int m) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxDistance(int[] position, int m) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxDistance(self, position, m):\n        \"\"\"\n        :type position: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxDistance(self, position: List[int], m: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxDistance(int* position, int positionSize, int m) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxDistance(int[] position, int m) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} position\n * @param {number} m\n * @return {number}\n */\nvar maxDistance = function(position, m) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxDistance(position: number[], m: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $position\n     * @param Integer $m\n     * @return Integer\n     */\n    function maxDistance($position, $m) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxDistance(_ position: [Int], _ m: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxDistance(position: IntArray, m: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxDistance(List<int> position, int m) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxDistance(position []int, m int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} position\n# @param {Integer} m\n# @return {Integer}\ndef max_distance(position, m)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxDistance(position: Array[Int], m: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_distance(position: Vec<i32>, m: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-distance position m)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_distance(Position :: [integer()], M :: integer()) -> integer().\nmax_distance(Position, M) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_distance(position :: [integer], m :: integer) :: integer\n  def max_distance(position, m) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimized-maximum-of-products-distributed-to-any-store", "title": "Minimized Maximum of Products Distributed to Any Store", "isPaidOnly": false}]}