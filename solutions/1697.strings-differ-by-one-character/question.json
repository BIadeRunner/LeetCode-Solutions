{"questionId": "1697", "acRate": 41.53347270003786, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1554", "paidOnly": true, "status": "ac", "title": "Strings Differ by One Character", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Rolling Hash", "id": "VG9waWNUYWdOb2RlOjU2NTk4", "slug": "rolling-hash"}, {"name": "Hash Function", "id": "VG9waWNUYWdOb2RlOjYxMDY1", "slug": "hash-function"}], "titleSlug": "strings-differ-by-one-character", "content": "<p>Given a list of strings <code>dict</code> where all the strings are of the same length.</p>\n\n<p>Return <code>true</code> if there are 2 strings that only differ by 1 character in the same index, otherwise return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dict = [&quot;abcd&quot;,&quot;acbd&quot;, &quot;aacd&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Strings &quot;a<strong>b</strong>cd&quot; and &quot;a<strong>a</strong>cd&quot; differ only by one character in the index 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dict = [&quot;ab&quot;,&quot;cd&quot;,&quot;yz&quot;]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dict = [&quot;abcd&quot;,&quot;cccc&quot;,&quot;abyd&quot;,&quot;abab&quot;]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of characters in <code>dict &lt;= 10<sup>5</sup></code></li>\n\t<li><code>dict[i].length == dict[j].length</code></li>\n\t<li><code>dict[i]</code> should be unique.</li>\n\t<li><code>dict[i]</code> contains only lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve this problem in <code>O(n * m)</code> where n is the length of <code>dict</code> and <code>m</code> is the length of each string.</p>\n", "hints": ["BruteForce, check all pairs and verify if they differ in one character. O(n^2 * m) where n is the number of words and m is the length of each string.", "O(m^2 * n), Use hashset, to insert all possible combinations adding a character \"*\". For example: If dict[i] = \"abc\", insert (\"*bc\", \"a*c\" and \"ab*\")."], "exampleTestcases": "[\"abcd\",\"acbd\", \"aacd\"]\n[\"ab\",\"cd\",\"yz\"]\n[\"abcd\",\"cccc\",\"abyd\",\"abab\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool differByOne(vector<string>& dict) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean differByOne(String[] dict) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def differByOne(self, dict):\n        \"\"\"\n        :type dict: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool differByOne(char** dict, int dictSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool DifferByOne(string[] dict) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} dict\n * @return {boolean}\n */\nvar differByOne = function(dict) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function differByOne(dict: string[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $dict\n     * @return Boolean\n     */\n    function differByOne($dict) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func differByOne(_ dict: [String]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun differByOne(dict: Array<String>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool differByOne(List<String> dict) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func differByOne(dict []string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} dict\n# @return {Boolean}\ndef differ_by_one(dict)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def differByOne(dict: Array[String]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn differ_by_one(dict: Vec<String>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (differ-by-one dict)\n  (-> (listof string?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec differ_by_one(Dict :: [unicode:unicode_binary()]) -> boolean().\ndiffer_by_one(Dict) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec differ_by_one(dict :: [String.t]) :: boolean\n  def differ_by_one(dict) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "count-words-obtained-after-adding-a-letter", "title": "Count Words Obtained After Adding a Letter", "isPaidOnly": false}]}