{"questionId": "1904", "acRate": 50.93153311496364, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1796", "paidOnly": false, "status": "ac", "title": "Second Largest Digit in a String", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "second-largest-digit-in-a-string", "content": "<p>Given an alphanumeric string <code>s</code>, return <em>the <strong>second largest</strong> numerical digit that appears in </em><code>s</code><em>, or </em><code>-1</code><em> if it does not exist</em>.</p>\n\n<p>An <strong>alphanumeric</strong><strong> </strong>string is a string consisting of lowercase English letters and digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dfa12321afd&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc1111&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The digits that appear in s are [1]. There is no second largest digit. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of only lowercase English letters and digits.</li>\n</ul>\n", "hints": ["First of all, get the distinct characters since we are only interested in those", "Let's note that there might not be any digits."], "exampleTestcases": "\"dfa12321afd\"\n\"abc1111\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int secondHighest(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int secondHighest(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def secondHighest(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def secondHighest(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int secondHighest(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SecondHighest(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar secondHighest = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function secondHighest(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function secondHighest($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func secondHighest(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun secondHighest(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int secondHighest(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func secondHighest(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef second_highest(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def secondHighest(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn second_highest(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (second-highest s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec second_highest(S :: unicode:unicode_binary()) -> integer().\nsecond_highest(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec second_highest(s :: String.t) :: integer\n  def second_highest(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "remove-digit-from-number-to-maximize-result", "title": "Remove Digit From Number to Maximize Result", "isPaidOnly": false}]}