{"question_id": "1570", "problem_slug": "final-prices-with-a-special-discount-in-a-shop", "problem_title": "Final Prices With a Special Discount in a Shop", "content": "You are given an integer array prices where prices[i] is the price of the ith item in a shop.\nThere is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.\nReturn an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.\n \nExample 1:\n\nInput: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation: \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.\n\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.\n\nExample 3:\n\nInput: prices = [10,1,1,6]\nOutput: [9,0,1,6]\n\n \nConstraints:\n\n1 <= prices.length <= 500\n1 <= prices[i] <= 1000\n\n", "hints": ["Use brute force: For the ith item in the shop with a loop find the first position j satisfying the conditions and apply the discount, otherwise, the discount is 0."], "exampleTestcases": "[8,4,6,2,3]\n[1,2,3,4,5]\n[10,1,1,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> finalPrices(vector<int>& prices) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] finalPrices(int[] prices) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def finalPrices(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def finalPrices(self, prices: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* finalPrices(int* prices, int pricesSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FinalPrices(int[] prices) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @return {number[]}\n */\nvar finalPrices = function(prices) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function finalPrices(prices: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer[]\n     */\n    function finalPrices($prices) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func finalPrices(_ prices: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun finalPrices(prices: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> finalPrices(List<int> prices) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func finalPrices(prices []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @return {Integer[]}\ndef final_prices(prices)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def finalPrices(prices: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn final_prices(prices: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (final-prices prices)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec final_prices(Prices :: [integer()]) -> [integer()].\nfinal_prices(Prices) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec final_prices(prices :: [integer]) :: [integer]\n  def final_prices(prices) do\n    \n  end\nend"}}}