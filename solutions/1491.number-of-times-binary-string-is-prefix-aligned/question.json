{"question_id": "1491", "problem_slug": "number-of-times-binary-string-is-prefix-aligned", "problem_title": "Number of Times Binary String Is Prefix-Aligned", "content": "You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.\nA binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.\nReturn the number of times the binary string is prefix-aligned during the flipping process.\n \nExample 1:\n\nInput: flips = [3,2,4,1,5]\nOutput: 2\nExplanation: The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.\n\nExample 2:\n\nInput: flips = [4,1,2,3]\nOutput: 1\nExplanation: The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.\n\n \nConstraints:\n\nn == flips.length\n1 <= n <= 5 * 104\nflips is a permutation of the integers in the range [1, n].\n\n", "hints": ["If in the step x all bulb shines then bulbs 1,2,3,..,x should shines too."], "exampleTestcases": "[3,2,4,1,5]\n[4,1,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTimesAllBlue(vector<int>& flips) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numTimesAllBlue(int[] flips) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numTimesAllBlue(self, flips):\n        \"\"\"\n        :type flips: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numTimesAllBlue(self, flips: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numTimesAllBlue(int* flips, int flipsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumTimesAllBlue(int[] flips) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} flips\n * @return {number}\n */\nvar numTimesAllBlue = function(flips) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numTimesAllBlue(flips: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $flips\n     * @return Integer\n     */\n    function numTimesAllBlue($flips) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numTimesAllBlue(_ flips: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numTimesAllBlue(flips: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numTimesAllBlue(List<int> flips) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numTimesAllBlue(flips []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} flips\n# @return {Integer}\ndef num_times_all_blue(flips)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numTimesAllBlue(flips: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_times_all_blue(flips: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-times-all-blue flips)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_times_all_blue(Flips :: [integer()]) -> integer().\nnum_times_all_blue(Flips) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_times_all_blue(flips :: [integer]) :: integer\n  def num_times_all_blue(flips) do\n    \n  end\nend"}}}