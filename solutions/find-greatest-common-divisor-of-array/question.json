{"questionId": "2106", "acRate": 78.25579329424605, "difficulty": "Easy", "freqBar": 35.61158666110779, "frontendQuestionId": "1979", "paidOnly": false, "status": "ac", "title": "Find Greatest Common Divisor of Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "find-greatest-common-divisor-of-array", "content": "<p>Given an integer array <code>nums</code>, return<strong> </strong><em>the <strong>greatest common divisor</strong> of the smallest number and largest number in </em><code>nums</code>.</p>\n\n<p>The <strong>greatest common divisor</strong> of two numbers is the largest positive integer that evenly divides both numbers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,5,6,9,10]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,5,6,8,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n", "hints": ["Find the minimum and maximum in one iteration. Let them be mn and mx.", "Try all the numbers in the range [1, mn] and check the largest number which divides both of them."], "exampleTestcases": "[2,5,6,9,10]\n[7,5,6,8,3]\n[3,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findGCD(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findGCD(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findGCD(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findGCD(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findGCD(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindGCD(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findGCD = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findGCD(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findGCD($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findGCD(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findGCD(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findGCD(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findGCD(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_gcd(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findGCD(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_gcd(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-gcd nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_gcd(Nums :: [integer()]) -> integer().\nfind_gcd(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_gcd(nums :: [integer]) :: integer\n  def find_gcd(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "greatest-common-divisor-of-strings", "title": "Greatest Common Divisor of Strings", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "number-of-different-subsequences-gcds", "title": "Number of Different Subsequences GCDs", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "three-divisors", "title": "Three Divisors", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "smallest-even-multiple", "title": "Smallest Even Multiple", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-subarrays-with-gcd-equal-to-k", "title": "Number of Subarrays With GCD Equal to K", "isPaidOnly": false}]}