{"questionId": "2442", "acRate": 84.56412503827151, "difficulty": "Easy", "freqBar": 29.59993734092822, "frontendQuestionId": "2367", "paidOnly": false, "status": "ac", "title": "Number of Arithmetic Triplets", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "number-of-arithmetic-triplets", "content": "<p>You are given a <strong>0-indexed</strong>, <strong>strictly increasing</strong> integer array <code>nums</code> and a positive integer <code>diff</code>. A triplet <code>(i, j, k)</code> is an <strong>arithmetic triplet</strong> if the following conditions are met:</p>\n\n<ul>\n\t<li><code>i &lt; j &lt; k</code>,</li>\n\t<li><code>nums[j] - nums[i] == diff</code>, and</li>\n\t<li><code>nums[k] - nums[j] == diff</code>.</li>\n</ul>\n\n<p>Return <em>the number of unique <strong>arithmetic triplets</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,4,6,7,10], diff = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,6,7,8,9], diff = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 200</code></li>\n\t<li><code>1 &lt;= diff &lt;= 50</code></li>\n\t<li><code>nums</code> is <strong>strictly</strong> increasing.</li>\n</ul>\n", "hints": ["Are the constraints small enough for brute force?", "We can use three loops, each iterating through the array to go through every possible triplet. Be sure to not count duplicates."], "exampleTestcases": "[0,1,4,6,7,10]\n3\n[4,5,6,7,8,9]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int arithmeticTriplets(vector<int>& nums, int diff) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int arithmeticTriplets(int[] nums, int diff) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arithmeticTriplets(self, nums, diff):\n        \"\"\"\n        :type nums: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int arithmeticTriplets(int* nums, int numsSize, int diff) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ArithmeticTriplets(int[] nums, int diff) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} diff\n * @return {number}\n */\nvar arithmeticTriplets = function(nums, diff) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arithmeticTriplets(nums: number[], diff: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $diff\n     * @return Integer\n     */\n    function arithmeticTriplets($nums, $diff) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arithmeticTriplets(_ nums: [Int], _ diff: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arithmeticTriplets(nums: IntArray, diff: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int arithmeticTriplets(List<int> nums, int diff) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func arithmeticTriplets(nums []int, diff int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} diff\n# @return {Integer}\ndef arithmetic_triplets(nums, diff)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arithmeticTriplets(nums: Array[Int], diff: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn arithmetic_triplets(nums: Vec<i32>, diff: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (arithmetic-triplets nums diff)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec arithmetic_triplets(Nums :: [integer()], Diff :: integer()) -> integer().\narithmetic_triplets(Nums, Diff) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec arithmetic_triplets(nums :: [integer], diff :: integer) :: integer\n  def arithmetic_triplets(nums, diff) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "two-sum", "title": "Two Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "3sum", "title": "3Sum", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "number-of-unequal-triplets-in-array", "title": "Number of Unequal Triplets in Array", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "maximum-value-of-an-ordered-triplet-i", "title": "Maximum Value of an Ordered Triplet I", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "minimum-sum-of-mountain-triplets-i", "title": "Minimum Sum of Mountain Triplets I", "isPaidOnly": false}]}