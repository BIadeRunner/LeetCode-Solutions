{"question_id": "2918", "problem_slug": "is-array-a-preorder-of-some-binary-tree", "problem_title": "Is Array a Preorder of Some ‌Binary Tree", "content": "Given a 0-indexed integer 2D array nodes, your task is to determine if the given array represents the preorder traversal of some binary tree.\nFor each index i, nodes[i] = [id, parentId], where id is the id of the node at the index i and parentId is the id of its parent in the tree (if the node has no parent, then parentId == -1).\nReturn true if the given array represents the preorder traversal of some tree, and false otherwise.\nNote: the preorder traversal of a tree is a recursive way to traverse a tree in which we first visit the current node, then we do the preorder traversal for the left child, and finally, we do it for the right child.\n \nExample 1:\n\nInput: nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]\nOutput: true\nExplanation: The given nodes make the tree in the picture below.\nWe can show that this is the preorder traversal of the tree, first we visit node 0, then we do the preorder traversal of the right child which is [1], then we do the preorder traversal of the left child which is [2,3,4].\n\n\nExample 2:\n\nInput: nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]\nOutput: false\nExplanation: The given nodes make the tree in the picture below.\nFor the preorder traversal, first we visit node 0, then we do the preorder traversal of the right child which is [1,3,4], but we can see that in the given order, 2 comes between 1 and 3, so, it's not the preorder traversal of the tree.\n\n\n \nConstraints:\n\n1 <= nodes.length <= 105\nnodes[i].length == 2\n0 <= nodes[i][0] <= 105\n-1 <= nodes[i][1] <= 105\nThe input is generated such that nodes make a binary tree.\n\n", "hints": ["Think of using the stack data structure.", "Put the first node in the stack.", "Iterate over the array and check if the node at the top of the stack is its parent; if it’s not, then pop the last element of the stack and check until you reach the parent of the current node in the array.", "If the stack gets empty at any point, then the array is not the preorder."], "exampleTestcases": "[[0,-1],[1,0],[2,0],[3,2],[4,2]]\n[[0,-1],[1,0],[2,0],[3,1],[4,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPreorder(vector<vector<int>>& nodes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isPreorder(List<List<Integer>> nodes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isPreorder(self, nodes):\n        \"\"\"\n        :type nodes: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isPreorder(int** nodes, int nodesSize, int* nodesColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsPreorder(IList<IList<int>> nodes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} nodes\n * @return {boolean}\n */\nvar isPreorder = function(nodes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isPreorder(nodes: number[][]): boolean {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $nodes\n     * @return Boolean\n     */\n    function isPreorder($nodes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isPreorder(_ nodes: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isPreorder(nodes: List<List<Int>>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isPreorder(List<List<int>> nodes) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isPreorder(nodes [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} nodes\n# @return {Boolean}\ndef is_preorder(nodes)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isPreorder(nodes: List[List[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_preorder(nodes: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-preorder nodes)\n  (-> (listof (listof exact-integer?)) boolean?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_preorder(Nodes :: [[integer()]]) -> boolean().\nis_preorder(Nodes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_preorder(nodes :: [[integer]]) :: boolean\n  def is_preorder(nodes) do\n    \n  end\nend"}}}