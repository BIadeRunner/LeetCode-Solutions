{"questionId": "2417", "acRate": 27.73398702478815, "difficulty": "Medium", "freqBar": 69.17978073949419, "frontendQuestionId": "2332", "paidOnly": false, "status": "ac", "title": "The Latest Time to Catch a Bus", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "the-latest-time-to-catch-a-bus", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>buses</code> of length <code>n</code>, where <code>buses[i]</code> represents the departure time of the <code>i<sup>th</sup></code> bus. You are also given a <strong>0-indexed</strong> integer array <code>passengers</code> of length <code>m</code>, where <code>passengers[j]</code> represents the arrival time of the <code>j<sup>th</sup></code> passenger. All bus departure times are unique. All passenger arrival times are unique.</p>\n\n<p>You are given an integer <code>capacity</code>, which represents the <strong>maximum</strong> number of passengers that can get on each bus.</p>\n\n<p>When a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at <code>x</code> minutes if you arrive at <code>y</code> minutes where <code>y &lt;= x</code>, and the bus is not full. Passengers with the <strong>earliest</strong> arrival times get on the bus first.</p>\n\n<p>More formally when a bus arrives, either:</p>\n\n<ul>\n\t<li>If <code>capacity</code> or fewer passengers are waiting for a bus, they will <strong>all</strong> get on the bus, or</li>\n\t<li>The <code>capacity</code> passengers with the <strong>earliest</strong> arrival times will get on the bus.</li>\n</ul>\n\n<p>Return <em>the latest time you may arrive at the bus station to catch a bus</em>. You <strong>cannot</strong> arrive at the same time as another passenger.</p>\n\n<p><strong>Note: </strong>The arrays <code>buses</code> and <code>passengers</code> are not necessarily sorted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> buses = [10,20], passengers = [2,17,18,19], capacity = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0<sup>th</sup> passenger. \nAt time 20, the second bus departs with you and the 1<sup>st</sup> passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1<sup>st</sup> passenger to catch the bus.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3<sup>rd</sup> passenger. \nAt time 20, the second bus departs with the 5<sup>th</sup> and 1<sup>st</sup> passengers.\nAt time 30, the third bus departs with the 0<sup>th</sup> passenger and you.\nNotice if you had arrived any later, then the 6<sup>th</sup> passenger would have taken your seat on the third bus.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == buses.length</code></li>\n\t<li><code>m == passengers.length</code></li>\n\t<li><code>1 &lt;= n, m, capacity &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= buses[i], passengers[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>Each element in <code>buses</code> is <strong>unique</strong>.</li>\n\t<li>Each element in <code>passengers</code> is <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Sort the buses and passengers arrays.", "Use 2 pointers to traverse buses and passengers with a simulation of passengers getting on a particular bus."], "exampleTestcases": "[10,20]\n[2,17,18,19]\n2\n[20,30,10]\n[19,13,26,4,25,11,21]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int latestTimeCatchTheBus(vector<int>& buses, vector<int>& passengers, int capacity) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int latestTimeCatchTheBus(int[] buses, int[] passengers, int capacity) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def latestTimeCatchTheBus(self, buses, passengers, capacity):\n        \"\"\"\n        :type buses: List[int]\n        :type passengers: List[int]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int latestTimeCatchTheBus(int* buses, int busesSize, int* passengers, int passengersSize, int capacity) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LatestTimeCatchTheBus(int[] buses, int[] passengers, int capacity) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} buses\n * @param {number[]} passengers\n * @param {number} capacity\n * @return {number}\n */\nvar latestTimeCatchTheBus = function(buses, passengers, capacity) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function latestTimeCatchTheBus(buses: number[], passengers: number[], capacity: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $buses\n     * @param Integer[] $passengers\n     * @param Integer $capacity\n     * @return Integer\n     */\n    function latestTimeCatchTheBus($buses, $passengers, $capacity) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func latestTimeCatchTheBus(_ buses: [Int], _ passengers: [Int], _ capacity: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun latestTimeCatchTheBus(buses: IntArray, passengers: IntArray, capacity: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int latestTimeCatchTheBus(List<int> buses, List<int> passengers, int capacity) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func latestTimeCatchTheBus(buses []int, passengers []int, capacity int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} buses\n# @param {Integer[]} passengers\n# @param {Integer} capacity\n# @return {Integer}\ndef latest_time_catch_the_bus(buses, passengers, capacity)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def latestTimeCatchTheBus(buses: Array[Int], passengers: Array[Int], capacity: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn latest_time_catch_the_bus(buses: Vec<i32>, passengers: Vec<i32>, capacity: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (latest-time-catch-the-bus buses passengers capacity)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec latest_time_catch_the_bus(Buses :: [integer()], Passengers :: [integer()], Capacity :: integer()) -> integer().\nlatest_time_catch_the_bus(Buses, Passengers, Capacity) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec latest_time_catch_the_bus(buses :: [integer], passengers :: [integer], capacity :: integer) :: integer\n  def latest_time_catch_the_bus(buses, passengers, capacity) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-speed-to-arrive-on-time", "title": "Minimum Speed to Arrive on Time", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-matching-of-players-with-trainers", "title": "Maximum Matching of Players With Trainers", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "time-taken-to-cross-the-door", "title": "Time Taken to Cross the Door", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "time-to-cross-a-bridge", "title": "Time to Cross a Bridge", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "rearranging-fruits", "title": "Rearranging Fruits", "isPaidOnly": false}]}