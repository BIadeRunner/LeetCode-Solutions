{"question_id": "1997", "problem_slug": "next-palindrome-using-same-digits", "problem_title": "Next Palindrome Using Same Digits", "content": "You are given a numeric string num, representing a very large palindrome.\nReturn the smallest palindrome larger than num that can be created by rearranging its digits. If no such palindrome exists, return an empty string \"\".\nA palindrome is a number that reads the same backward as forward.\n \nExample 1:\n\nInput: num = \"1221\"\nOutput: \"2112\"\nExplanation: The next palindrome larger than \"1221\" is \"2112\".\n\nExample 2:\n\nInput: num = \"32123\"\nOutput: \"\"\nExplanation: No palindromes larger than \"32123\" can be made by rearranging the digits.\n\nExample 3:\n\nInput: num = \"45544554\"\nOutput: \"54455445\"\nExplanation: The next palindrome larger than \"45544554\" is \"54455445\".\n\n \nConstraints:\n\n1 <= num.length <= 105\nnum is a palindrome.\n\n", "hints": ["Is it possible to swap one character in the first half of the palindrome to make the next one?", "Are there different cases for when the length is odd and even?"], "exampleTestcases": "\"1221\"\n\"32123\"\n\"45544554\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string nextPalindrome(string num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String nextPalindrome(String num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nextPalindrome(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nextPalindrome(self, num: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* nextPalindrome(char* num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string NextPalindrome(string num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {string}\n */\nvar nextPalindrome = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nextPalindrome(num: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function nextPalindrome($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nextPalindrome(_ num: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nextPalindrome(num: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String nextPalindrome(String num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nextPalindrome(num string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} num\n# @return {String}\ndef next_palindrome(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nextPalindrome(num: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn next_palindrome(num: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (next-palindrome num)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec next_palindrome(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nnext_palindrome(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec next_palindrome(num :: String.t) :: String.t\n  def next_palindrome(num) do\n    \n  end\nend"}}}