{"questionId": "249", "acRate": 66.2297881147647, "difficulty": "Medium", "freqBar": 61.05451402118345, "frontendQuestionId": "249", "paidOnly": true, "status": "ac", "title": "Group Shifted Strings", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "group-shifted-strings", "content": "<p>Perform the following shift operations on a string:</p>\n\n<ul>\n\t<li><strong>Right shift</strong>: Replace every letter with the <strong>successive</strong> letter of the English alphabet, where &#39;z&#39; is replaced by &#39;a&#39;. For example, <code>&quot;abc&quot;</code> can be right-shifted to <code>&quot;bcd&quot; </code>or <code>&quot;xyz&quot;</code> can be right-shifted to <code>&quot;yza&quot;</code>.</li>\n\t<li><strong>Left shift</strong>: Replace every letter with the <strong>preceding</strong> letter of the English alphabet, where &#39;a&#39; is replaced by &#39;z&#39;. For example, <code>&quot;bcd&quot;</code> can be left-shifted to <code>&quot;abc&quot;<font face=\"Times New Roman\"> or </font></code><code>&quot;yza&quot;</code> can be left-shifted to <code>&quot;xyz&quot;</code>.</li>\n</ul>\n\n<p>We can keep shifting the string in both directions to form an <strong>endless</strong> <strong>shifting sequence</strong>.</p>\n\n<ul>\n\t<li>For example, shift <code>&quot;abc&quot;</code> to form the sequence: <code>... &lt;-&gt; &quot;abc&quot; &lt;-&gt; &quot;bcd&quot; &lt;-&gt; ... &lt;-&gt; &quot;xyz&quot; &lt;-&gt; &quot;yza&quot; &lt;-&gt; ...</code>.<code> &lt;-&gt; &quot;zab&quot; &lt;-&gt; &quot;abc&quot; &lt;-&gt; ...</code></li>\n</ul>\n\n<p>You are given an array of strings <code>strings</code>, group together all <code>strings[i]</code> that belong to the same shifting sequence. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strings = [&quot;abc&quot;,&quot;bcd&quot;,&quot;acef&quot;,&quot;xyz&quot;,&quot;az&quot;,&quot;ba&quot;,&quot;a&quot;,&quot;z&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;acef&quot;],[&quot;a&quot;,&quot;z&quot;],[&quot;abc&quot;,&quot;bcd&quot;,&quot;xyz&quot;],[&quot;az&quot;,&quot;ba&quot;]]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strings = [&quot;a&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;a&quot;]]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strings.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= strings[i].length &lt;= 50</code></li>\n\t<li><code>strings[i]</code> consists of lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\n[\"a\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> groupStrings(vector<string>& strings) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<String>> groupStrings(String[] strings) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def groupStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupStrings(char** strings, int stringsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> GroupStrings(string[] strings) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} strings\n * @return {string[][]}\n */\nvar groupStrings = function(strings) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function groupStrings(strings: string[]): string[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strings\n     * @return String[][]\n     */\n    function groupStrings($strings) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func groupStrings(_ strings: [String]) -> [[String]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun groupStrings(strings: Array<String>): List<List<String>> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<String>> groupStrings(List<String> strings) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func groupStrings(strings []string) [][]string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} strings\n# @return {String[][]}\ndef group_strings(strings)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def groupStrings(strings: Array[String]): List[List[String]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn group_strings(strings: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (group-strings strings)\n  (-> (listof string?) (listof (listof string?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec group_strings(Strings :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_strings(Strings) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec group_strings(strings :: [String.t]) :: [[String.t]]\n  def group_strings(strings) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "group-anagrams", "title": "Group Anagrams", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-maximum-number-of-string-pairs", "title": "Find Maximum Number of String Pairs", "isPaidOnly": false}]}