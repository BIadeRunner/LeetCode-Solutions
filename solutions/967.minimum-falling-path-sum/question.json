{"questionId": "967", "acRate": 62.62588494976205, "difficulty": "Medium", "freqBar": 54.40884333521645, "frontendQuestionId": "931", "paidOnly": false, "status": "ac", "title": "Minimum Falling Path Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "minimum-falling-path-sum", "content": "<p>Given an <code>n x n</code> array of integers <code>matrix</code>, return <em>the <strong>minimum sum</strong> of any <strong>falling path</strong> through</em> <code>matrix</code>.</p>\n\n<p>A <strong>falling path</strong> starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>, <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg\" style=\"width: 499px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[2,1,3],[6,5,4],[7,8,9]]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> There are two falling paths with a minimum sum as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg\" style=\"width: 164px; height: 365px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[-19,57],[-40,-5]]\n<strong>Output:</strong> -59\n<strong>Explanation:</strong> The falling path with a minimum sum is shown.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[[2,1,3],[6,5,4],[7,8,9]]\n[[-19,57],[-40,-5]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minFallingPathSum(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minFallingPathSum(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinFallingPathSum(int[][] matrix) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar minFallingPathSum = function(matrix) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minFallingPathSum(matrix: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function minFallingPathSum($matrix) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minFallingPathSum(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minFallingPathSum(matrix: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minFallingPathSum(List<List<int>> matrix) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minFallingPathSum(matrix [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef min_falling_path_sum(matrix)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minFallingPathSum(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_falling_path_sum(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-falling-path-sum matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_falling_path_sum(Matrix :: [[integer()]]) -> integer().\nmin_falling_path_sum(Matrix) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_falling_path_sum(matrix :: [[integer]]) :: integer\n  def min_falling_path_sum(matrix) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-falling-path-sum-ii", "title": "Minimum Falling Path Sum II", "isPaidOnly": false}]}