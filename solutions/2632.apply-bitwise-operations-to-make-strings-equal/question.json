{"question_id": "2632", "problem_slug": "apply-bitwise-operations-to-make-strings-equal", "problem_title": "Apply Bitwise Operations to Make Strings Equal", "content": "You are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times:\n\nChoose two different indices i and j where 0 <= i, j < n.\nSimultaneously, replace s[i] with (s[i] OR s[j]) and s[j] with (s[i] XOR s[j]).\n\nFor example, if s = \"0110\", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = \"1110\".\nReturn true if you can make the string s equal to target, or false otherwise.\n \nExample 1:\n\nInput: s = \"1010\", target = \"0110\"\nOutput: true\nExplanation: We can do the following operations:\n- Choose i = 2 and j = 0. We have now s = \"0010\".\n- Choose i = 2 and j = 1. We have now s = \"0110\".\nSince we can make s equal to target, we return true.\n\nExample 2:\n\nInput: s = \"11\", target = \"00\"\nOutput: false\nExplanation: It is not possible to make s equal to target with any number of operations.\n\n \nConstraints:\n\nn == s.length == target.length\n2 <= n <= 105\ns and target consist of only the digits 0 and 1.\n\n", "hints": ["Think of when it is impossible to convert the string to the target.", "If exactly one of the strings is having all 0’s, then it is impossible. And it is possible in all other cases. Why is that true?"], "exampleTestcases": "\"1010\"\n\"0110\"\n\"11\"\n\"00\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool makeStringsEqual(string s, string target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean makeStringsEqual(String s, String target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeStringsEqual(self, s, target):\n        \"\"\"\n        :type s: str\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeStringsEqual(self, s: str, target: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool makeStringsEqual(char* s, char* target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool MakeStringsEqual(string s, string target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} target\n * @return {boolean}\n */\nvar makeStringsEqual = function(s, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeStringsEqual(s: string, target: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $target\n     * @return Boolean\n     */\n    function makeStringsEqual($s, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeStringsEqual(_ s: String, _ target: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeStringsEqual(s: String, target: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool makeStringsEqual(String s, String target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeStringsEqual(s string, target string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} target\n# @return {Boolean}\ndef make_strings_equal(s, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeStringsEqual(s: String, target: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_strings_equal(s: String, target: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-strings-equal s target)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_strings_equal(S :: unicode:unicode_binary(), Target :: unicode:unicode_binary()) -> boolean().\nmake_strings_equal(S, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_strings_equal(s :: String.t, target :: String.t) :: boolean\n  def make_strings_equal(s, target) do\n    \n  end\nend"}}}