{"question_id": "2164", "problem_slug": "two-best-non-overlapping-events", "problem_title": "Two Best Non-Overlapping Events", "content": "You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.\nReturn this maximum sum.\nNote that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.\n \nExample 1:\n\n\nInput: events = [[1,3,2],[4,5,2],[2,4,3]]\nOutput: 4\nExplanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.\n\nExample 2:\n\n\nInput: events = [[1,3,2],[4,5,2],[1,5,5]]\nOutput: 5\nExplanation: Choose event 2 for a sum of 5.\n\nExample 3:\n\n\nInput: events = [[1,5,3],[1,5,1],[6,6,5]]\nOutput: 8\nExplanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.\n \nConstraints:\n\n2 <= events.length <= 105\nevents[i].length == 3\n1 <= startTimei <= endTimei <= 109\n1 <= valuei <= 106\n\n", "hints": ["How can sorting the events on the basis of their start times help? How about end times?", "How can we quickly get the maximum score of an interval not intersecting with the interval we chose?"], "exampleTestcases": "[[1,3,2],[4,5,2],[2,4,3]]\n[[1,3,2],[4,5,2],[1,5,5]]\n[[1,5,3],[1,5,1],[6,6,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxTwoEvents(vector<vector<int>>& events) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxTwoEvents(int[][] events) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxTwoEvents(self, events):\n        \"\"\"\n        :type events: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxTwoEvents(int** events, int eventsSize, int* eventsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxTwoEvents(int[][] events) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} events\n * @return {number}\n */\nvar maxTwoEvents = function(events) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxTwoEvents(events: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $events\n     * @return Integer\n     */\n    function maxTwoEvents($events) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxTwoEvents(_ events: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxTwoEvents(events: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxTwoEvents(List<List<int>> events) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxTwoEvents(events [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} events\n# @return {Integer}\ndef max_two_events(events)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxTwoEvents(events: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_two_events(events: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-two-events events)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_two_events(Events :: [[integer()]]) -> integer().\nmax_two_events(Events) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_two_events(events :: [[integer]]) :: integer\n  def max_two_events(events) do\n    \n  end\nend"}}}