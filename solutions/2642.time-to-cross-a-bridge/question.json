{"question_id": "2642", "problem_slug": "time-to-cross-a-bridge", "problem_title": "Time to Cross a Bridge", "content": "There are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti].\nThe warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following:\n\nCross the bridge to the right side in righti minutes.\nPick a box from the right warehouse in picki minutes.\nCross the bridge to the left side in lefti minutes.\nPut the box into the left warehouse in puti minutes.\n\nThe ith worker is less efficient than the jth worker if either condition is met:\n\nlefti + righti > leftj + rightj\nlefti + righti == leftj + rightj and i > j\n\nThe following rules regulate the movement of the workers through the bridge:\n\nOnly one worker can use the bridge at a time.\nWhen the bridge is unused prioritize the least efficient worker on the right side to cross. If there are no workers on the right side, prioritize the least efficient worker on the left side to cross.\nIf enough workers have already been dispatched from the left side to pick up all the remaining boxes, no more workers will be sent from the left side.\n\nReturn the elapsed minutes at which the last box reaches the left side of the bridge.\n \nExample 1:\n\nInput: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]\nOutput: 6\nExplanation:\n\nFrom 0 to 1 minutes: worker 2 crosses the bridge to the right.\nFrom 1 to 2 minutes: worker 2 picks up a box from the right warehouse.\nFrom 2 to 6 minutes: worker 2 crosses the bridge to the left.\nFrom 6 to 7 minutes: worker 2 puts a box at the left warehouse.\nThe whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left side of the bridge.\n\n\nExample 2:\n\nInput: n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]\nOutput: 50\nExplanation:\n\nFrom 0  to 10: worker 1 crosses the bridge to the right.\nFrom 10 to 20: worker 1 picks up a box from the right warehouse.\nFrom 10 to 11: worker 0 crosses the bridge to the right.\nFrom 11 to 20: worker 0 picks up a box from the right warehouse.\nFrom 20 to 30: worker 1 crosses the bridge to the left.\nFrom 30 to 40: worker 1 puts a box at the left warehouse.\nFrom 30 to 31: worker 0 crosses the bridge to the left.\nFrom 31 to 39: worker 0 puts a box at the left warehouse.\nFrom 39 to 40: worker 0 crosses the bridge to the right.\nFrom 40 to 49: worker 0 picks up a box from the right warehouse.\nFrom 49 to 50: worker 0 crosses the bridge to the left.\n\n\n \nConstraints:\n\n1 <= n, k <= 104\ntime.length == k\ntime[i].length == 4\n1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000\n\n", "hints": ["Try simulating this process.", "We can use a priority queue to query over the least efficient worker."], "exampleTestcases": "1\n3\n[[1,1,2,1],[1,1,3,1],[1,1,4,1]]\n3\n2\n[[1,9,1,8],[10,10,10,10]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findCrossingTime(int n, int k, vector<vector<int>>& time) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findCrossingTime(int n, int k, int[][] time) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findCrossingTime(self, n, k, time):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type time: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findCrossingTime(int n, int k, int** time, int timeSize, int* timeColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindCrossingTime(int n, int k, int[][] time) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number[][]} time\n * @return {number}\n */\nvar findCrossingTime = function(n, k, time) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findCrossingTime(n: number, k: number, time: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer[][] $time\n     * @return Integer\n     */\n    function findCrossingTime($n, $k, $time) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findCrossingTime(_ n: Int, _ k: Int, _ time: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findCrossingTime(n: Int, k: Int, time: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findCrossingTime(int n, int k, List<List<int>> time) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findCrossingTime(n int, k int, time [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer[][]} time\n# @return {Integer}\ndef find_crossing_time(n, k, time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findCrossingTime(n: Int, k: Int, time: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_crossing_time(n: i32, k: i32, time: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-crossing-time n k time)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_crossing_time(N :: integer(), K :: integer(), Time :: [[integer()]]) -> integer().\nfind_crossing_time(N, K, Time) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_crossing_time(n :: integer, k :: integer, time :: [[integer]]) :: integer\n  def find_crossing_time(n, k, time) do\n    \n  end\nend"}}}