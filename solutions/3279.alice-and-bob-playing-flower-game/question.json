{"question_id": "3279", "problem_slug": "alice-and-bob-playing-flower-game", "problem_title": "Alice and Bob Playing Flower Game", "content": "Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are x flowers in the clockwise direction between Alice and Bob, and y flowers in the anti-clockwise direction between them.\nThe game proceeds as follows:\n\nAlice takes the first turn.\nIn each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side.\nAt the end of the turn, if there are no flowers left at all, the current player captures their opponent and wins the game.\n\nGiven two integers, n and m, the task is to compute the number of possible pairs (x, y) that satisfy the conditions:\n\nAlice must win the game according to the described rules.\nThe number of flowers x in the clockwise direction must be in the range [1,n].\nThe number of flowers y in the anti-clockwise direction must be in the range [1,m].\n\nReturn the number of possible pairs (x, y) that satisfy the conditions mentioned in the statement.\n \nExample 1:\n\nInput: n = 3, m = 2\nOutput: 3\nExplanation: The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1).\n\nExample 2:\n\nInput: n = 1, m = 1\nOutput: 0\nExplanation: No pairs satisfy the conditions described in the statement.\n\n \nConstraints:\n\n1 <= n, m <= 105\n\n", "hints": ["(x, y) is valid if and only if they have different parities."], "exampleTestcases": "3\n2\n1\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long flowerGame(int n, int m) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long flowerGame(int n, int m) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def flowerGame(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def flowerGame(self, n: int, m: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long flowerGame(int n, int m) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long FlowerGame(int n, int m) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flowerGame = function(n, m) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function flowerGame(n: number, m: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function flowerGame($n, $m) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func flowerGame(_ n: Int, _ m: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun flowerGame(n: Int, m: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int flowerGame(int n, int m) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func flowerGame(n int, m int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flower_game(n, m)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def flowerGame(n: Int, m: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn flower_game(n: i32, m: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (flower-game n m)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec flower_game(N :: integer(), M :: integer()) -> integer().\nflower_game(N, M) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec flower_game(n :: integer, m :: integer) :: integer\n  def flower_game(n, m) do\n    \n  end\nend"}}}