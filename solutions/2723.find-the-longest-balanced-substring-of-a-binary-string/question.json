{"question_id": "2723", "problem_slug": "find-the-longest-balanced-substring-of-a-binary-string", "problem_title": "Find the Longest Balanced Substring of a Binary String", "content": "You are given a binary string s consisting only of zeroes and ones.\nA substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\nReturn the length of the longest balanced substring of s.\nA substring is a contiguous sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"01000111\"\nOutput: 6\nExplanation: The longest balanced substring is \"000111\", which has length 6.\n\nExample 2:\n\nInput: s = \"00111\"\nOutput: 4\nExplanation: The longest balanced substring is \"0011\", which has length 4. \n\nExample 3:\n\nInput: s = \"111\"\nOutput: 0\nExplanation: There is no balanced substring except the empty substring, so the answer is 0.\n\n \nConstraints:\n\n1 <= s.length <= 50\n'0' <= s[i] <= '1'\n\n", "hints": ["Consider iterating over each subarray and checking if it’s balanced or not.", "Among all balanced subarrays, the answer is the longest one of them."], "exampleTestcases": "\"01000111\"\n\"00111\"\n\"111\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findTheLongestBalancedSubstring(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findTheLongestBalancedSubstring(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findTheLongestBalancedSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findTheLongestBalancedSubstring(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findTheLongestBalancedSubstring(char * s){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindTheLongestBalancedSubstring(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestBalancedSubstring = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findTheLongestBalancedSubstring(s: string): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function findTheLongestBalancedSubstring($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findTheLongestBalancedSubstring(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findTheLongestBalancedSubstring(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findTheLongestBalancedSubstring(String s) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findTheLongestBalancedSubstring(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef find_the_longest_balanced_substring(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findTheLongestBalancedSubstring(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_the_longest_balanced_substring(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-the-longest-balanced-substring s)\n  (-> string? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_the_longest_balanced_substring(S :: unicode:unicode_binary()) -> integer().\nfind_the_longest_balanced_substring(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_the_longest_balanced_substring(s :: String.t) :: integer\n  def find_the_longest_balanced_substring(s) do\n    \n  end\nend"}}}