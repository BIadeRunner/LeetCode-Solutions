{"questionId": "2723", "acRate": 46.74059235942195, "difficulty": "Easy", "freqBar": 37.83107336987063, "frontendQuestionId": "2609", "paidOnly": false, "status": "ac", "title": "Find the Longest Balanced Substring of a Binary String", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "find-the-longest-balanced-substring-of-a-binary-string", "content": "<p>You are given a binary string <code>s</code> consisting only of zeroes and ones.</p>\n\n<p>A substring of <code>s</code> is considered balanced if<strong> all zeroes are before ones</strong> and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.</p>\n\n<p>Return <em>the length of the longest balanced substring of </em><code>s</code>.</p>\n\n<p>A <b>substring</b> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;01000111&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The longest balanced substring is &quot;000111&quot;, which has length 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00111&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest balanced substring is &quot;0011&quot;, which has length 4.&nbsp;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;111&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no balanced substring except the empty substring, so the answer is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>&#39;0&#39; &lt;= s[i] &lt;= &#39;1&#39;</code></li>\n</ul>\n", "hints": ["Consider iterating over each subarray and checking if it\u2019s balanced or not.", "Among all balanced subarrays, the answer is the longest one of them."], "exampleTestcases": "\"01000111\"\n\"00111\"\n\"111\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findTheLongestBalancedSubstring(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findTheLongestBalancedSubstring(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findTheLongestBalancedSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findTheLongestBalancedSubstring(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findTheLongestBalancedSubstring(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindTheLongestBalancedSubstring(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestBalancedSubstring = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findTheLongestBalancedSubstring(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function findTheLongestBalancedSubstring($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findTheLongestBalancedSubstring(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findTheLongestBalancedSubstring(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findTheLongestBalancedSubstring(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findTheLongestBalancedSubstring(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef find_the_longest_balanced_substring(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findTheLongestBalancedSubstring(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_the_longest_balanced_substring(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-the-longest-balanced-substring s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_the_longest_balanced_substring(S :: unicode:unicode_binary()) -> integer().\nfind_the_longest_balanced_substring(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_the_longest_balanced_substring(s :: String.t) :: integer\n  def find_the_longest_balanced_substring(s) do\n    \n  end\nend"}], "similarQuestionList": []}