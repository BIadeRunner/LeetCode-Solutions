{"questionId": "1968", "acRate": 36.56564701432556, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1840", "paidOnly": false, "status": "ac", "title": "Maximum Building Height", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "maximum-building-height", "content": "<p>You want to build <code>n</code> new buildings in a city. The new buildings will be built in a line and are labeled from <code>1</code> to <code>n</code>.</p>\n\n<p>However, there are city restrictions on the heights of the new buildings:</p>\n\n<ul>\n\t<li>The height of each building must be a non-negative integer.</li>\n\t<li>The height of the first building <strong>must</strong> be <code>0</code>.</li>\n\t<li>The height difference between any two adjacent buildings <strong>cannot exceed</strong> <code>1</code>.</li>\n</ul>\n\n<p>Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array <code>restrictions</code> where <code>restrictions[i] = [id<sub>i</sub>, maxHeight<sub>i</sub>]</code> indicates that building <code>id<sub>i</sub></code> must have a height <strong>less than or equal to</strong> <code>maxHeight<sub>i</sub></code>.</p>\n\n<p>It is guaranteed that each building will appear <strong>at most once</strong> in <code>restrictions</code>, and building <code>1</code> will <strong>not</strong> be in <code>restrictions</code>.</p>\n\n<p>Return <em>the <strong>maximum possible height</strong> of the <strong>tallest</strong> building</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex1-1.png\" style=\"width: 400px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> n = 5, restrictions = [[2,1],[4,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex2.png\" style=\"width: 500px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> n = 6, restrictions = []\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex3.png\" style=\"width: 500px; height: 187px;\" />\n<pre>\n<strong>Input:</strong> n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= restrictions.length &lt;= min(n - 1, 10<sup>5</sup>)</code></li>\n\t<li><code>2 &lt;= id<sub>i</sub> &lt;= n</code></li>\n\t<li><code>id<sub>i</sub></code>&nbsp;is <strong>unique</strong>.</li>\n\t<li><code>0 &lt;= maxHeight<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Is it possible to find the max height if given the height range of a particular building?", "You can find the height range of a restricted building by doing 2 passes from the left and right."], "exampleTestcases": "5\n[[2,1],[4,1]]\n6\n[]\n10\n[[5,3],[2,5],[7,4],[10,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxBuilding(int n, vector<vector<int>>& restrictions) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxBuilding(int n, int[][] restrictions) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxBuilding(self, n, restrictions):\n        \"\"\"\n        :type n: int\n        :type restrictions: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxBuilding(int n, int** restrictions, int restrictionsSize, int* restrictionsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxBuilding(int n, int[][] restrictions) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} restrictions\n * @return {number}\n */\nvar maxBuilding = function(n, restrictions) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxBuilding(n: number, restrictions: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $restrictions\n     * @return Integer\n     */\n    function maxBuilding($n, $restrictions) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxBuilding(_ n: Int, _ restrictions: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxBuilding(n: Int, restrictions: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxBuilding(int n, List<List<int>> restrictions) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxBuilding(n int, restrictions [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} restrictions\n# @return {Integer}\ndef max_building(n, restrictions)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxBuilding(n: Int, restrictions: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_building(n: i32, restrictions: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-building n restrictions)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_building(N :: integer(), Restrictions :: [[integer()]]) -> integer().\nmax_building(N, Restrictions) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_building(n :: integer, restrictions :: [[integer]]) :: integer\n  def max_building(n, restrictions) do\n    \n  end\nend"}], "similarQuestionList": []}