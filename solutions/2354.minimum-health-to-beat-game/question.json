{"question_id": "2354", "problem_slug": "minimum-health-to-beat-game", "problem_title": "Minimum Health to Beat Game", "content": "You are playing a game that has n levels numbered from 0 to n - 1. You are given a 0-indexed integer array damage where damage[i] is the amount of health you will lose to complete the ith level.\nYou are also given an integer armor. You may use your armor ability at most once during the game on any level which will protect you from at most armor damage.\nYou must complete the levels in order and your health must be greater than 0 at all times to beat the game.\nReturn the minimum health you need to start with to beat the game.\n \nExample 1:\n\nInput: damage = [2,7,4,3], armor = 4\nOutput: 13\nExplanation: One optimal way to beat the game starting at 13 health is:\nOn round 1, take 2 damage. You have 13 - 2 = 11 health.\nOn round 2, take 7 damage. You have 11 - 7 = 4 health.\nOn round 3, use your armor to protect you from 4 damage. You have 4 - 0 = 4 health.\nOn round 4, take 3 damage. You have 4 - 3 = 1 health.\nNote that 13 is the minimum health you need to start with to beat the game.\n\nExample 2:\n\nInput: damage = [2,5,3,4], armor = 7\nOutput: 10\nExplanation: One optimal way to beat the game starting at 10 health is:\nOn round 1, take 2 damage. You have 10 - 2 = 8 health.\nOn round 2, use your armor to protect you from 5 damage. You have 8 - 0 = 8 health.\nOn round 3, take 3 damage. You have 8 - 3 = 5 health.\nOn round 4, take 4 damage. You have 5 - 4 = 1 health.\nNote that 10 is the minimum health you need to start with to beat the game.\n\nExample 3:\n\nInput: damage = [3,3,3], armor = 0\nOutput: 10\nExplanation: One optimal way to beat the game starting at 10 health is:\nOn round 1, take 3 damage. You have 10 - 3 = 7 health.\nOn round 2, take 3 damage. You have 7 - 3 = 4 health.\nOn round 3, take 3 damage. You have 4 - 3 = 1 health.\nNote that you did not use your armor ability.\n\n \nConstraints:\n\nn == damage.length\n1 <= n <= 105\n0 <= damage[i] <= 105\n0 <= armor <= 105\n\n", "hints": ["When should you use your armor ability?", "It is always optimal to use your armor ability on the level where you take the most amount of damage."], "exampleTestcases": "[2,7,4,3]\n4\n[2,5,3,4]\n7\n[3,3,3]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumHealth(vector<int>& damage, int armor) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minimumHealth(int[] damage, int armor) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumHealth(self, damage, armor):\n        \"\"\"\n        :type damage: List[int]\n        :type armor: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minimumHealth(int* damage, int damageSize, int armor) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinimumHealth(int[] damage, int armor) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} damage\n * @param {number} armor\n * @return {number}\n */\nvar minimumHealth = function(damage, armor) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumHealth(damage: number[], armor: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $damage\n     * @param Integer $armor\n     * @return Integer\n     */\n    function minimumHealth($damage, $armor) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumHealth(_ damage: [Int], _ armor: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumHealth(damage: IntArray, armor: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumHealth(List<int> damage, int armor) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumHealth(damage []int, armor int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} damage\n# @param {Integer} armor\n# @return {Integer}\ndef minimum_health(damage, armor)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumHealth(damage: Array[Int], armor: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_health(damage: Vec<i32>, armor: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-health damage armor)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_health(Damage :: [integer()], Armor :: integer()) -> integer().\nminimum_health(Damage, Armor) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_health(damage :: [integer], armor :: integer) :: integer\n  def minimum_health(damage, armor) do\n    \n  end\nend"}}}