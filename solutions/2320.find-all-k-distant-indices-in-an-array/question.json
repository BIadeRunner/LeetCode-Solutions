{"question_id": "2320", "problem_slug": "find-all-k-distant-indices-in-an-array", "problem_title": "Find All K-Distant Indices in an Array", "content": "You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.\nReturn a list of all k-distant indices sorted in increasing order.\n \nExample 1:\n\nInput: nums = [3,4,9,1,3,9,5], key = 9, k = 1\nOutput: [1,2,3,4,5,6]\nExplanation: Here, nums[2] == key and nums[5] == key.\n- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.\n- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.\n- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.\n- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.\n- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.\n- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.\n- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.\nThus, we return [1,2,3,4,5,6] which is sorted in increasing order. \n\nExample 2:\n\nInput: nums = [2,2,2,2,2], key = 2, k = 2\nOutput: [0,1,2,3,4]\nExplanation: For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4].\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nkey is an integer from the array nums.\n1 <= k <= nums.length\n\n", "hints": ["For every occurrence of key in nums, find all indices within distance k from it.", "Use a hash table to remove duplicate indices."], "exampleTestcases": "[3,4,9,1,3,9,5]\n9\n1\n[2,2,2,2,2]\n2\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findKDistantIndices(vector<int>& nums, int key, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findKDistantIndices(self, nums, key, k):\n        \"\"\"\n        :type nums: List[int]\n        :type key: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findKDistantIndices(int* nums, int numsSize, int key, int k, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} key\n * @param {number} k\n * @return {number[]}\n */\nvar findKDistantIndices = function(nums, key, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findKDistantIndices(nums: number[], key: number, k: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $key\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function findKDistantIndices($nums, $key, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findKDistantIndices(_ nums: [Int], _ key: Int, _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findKDistantIndices(nums: IntArray, key: Int, k: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findKDistantIndices(List<int> nums, int key, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findKDistantIndices(nums []int, key int, k int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} key\n# @param {Integer} k\n# @return {Integer[]}\ndef find_k_distant_indices(nums, key, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findKDistantIndices(nums: Array[Int], key: Int, k: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_k_distant_indices(nums: Vec<i32>, key: i32, k: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-k-distant-indices nums key k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_k_distant_indices(Nums :: [integer()], Key :: integer(), K :: integer()) -> [integer()].\nfind_k_distant_indices(Nums, Key, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_k_distant_indices(nums :: [integer], key :: integer, k :: integer) :: [integer]\n  def find_k_distant_indices(nums, key, k) do\n    \n  end\nend"}}}