{"question_id": "3563", "problem_slug": "select-cells-in-grid-with-maximum-score", "problem_title": "Select Cells in Grid With Maximum Score", "content": "You are given a 2D matrix grid consisting of positive integers.\nYou have to select one or more cells from the matrix such that the following conditions are satisfied:\n\nNo two selected cells are in the same row of the matrix.\nThe values in the set of selected cells are unique.\n\nYour score will be the sum of the values of the selected cells.\nReturn the maximum score you can achieve.\n \nExample 1:\n\nInput: grid = [[1,2,3],[4,3,2],[1,1,1]]\nOutput: 8\nExplanation:\n\nWe can select the cells with values 1, 3, and 4 that are colored above.\n\nExample 2:\n\nInput: grid = [[8,7,6],[8,3,2]]\nOutput: 15\nExplanation:\n\nWe can select the cells with values 7 and 8 that are colored above.\n\n \nConstraints:\n\n1 <= grid.length, grid[i].length <= 10\n1 <= grid[i][j] <= 100\n\n", "hints": ["Sort all the cells in the grid by their values and keep track of their original positions.", "Try dynamic programming with the following states: the current cell that we might select and a bitmask representing all the rows from which we have already selected a cell so far."], "exampleTestcases": "[[1,2,3],[4,3,2],[1,1,1]]\n[[8,7,6],[8,3,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxScore(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxScore(List<List<Integer>> grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxScore(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxScore(IList<IList<int>> grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxScore = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxScore(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxScore($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxScore(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(grid: List<List<Int>>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxScore(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxScore(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_score(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxScore(grid: List[List[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-score grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_score(Grid :: [[integer()]]) -> integer().\nmax_score(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(grid :: [[integer]]) :: integer\n  def max_score(grid) do\n    \n  end\nend"}}}