{"question_id": "1068", "problem_slug": "digit-count-in-range", "problem_title": "Digit Count in Range", "content": "Given a single-digit integer d and two integers low and high, return the number of times that d occurs as a digit in all integers in the inclusive range [low, high].\n \nExample 1:\n\nInput: d = 1, low = 1, high = 13\nOutput: 6\nExplanation: The digit d = 1 occurs 6 times in 1, 10, 11, 12, 13.\nNote that the digit d = 1 occurs twice in the number 11.\n\nExample 2:\n\nInput: d = 3, low = 100, high = 250\nOutput: 35\nExplanation: The digit d = 3 occurs 35 times in 103,113,123,130,131,...,238,239,243.\n\n \nConstraints:\n\n0 <= d <= 9\n1 <= low <= high <= 2 * 108\n\n", "hints": ["Define a function f(x) to get the requested sum from 1 to x. So the answer will be f(hi) - f(lo - 1)", "In order to solve f(x) we need to do a DP over digits approach."], "exampleTestcases": "1\n1\n13\n3\n100\n250", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int digitsCount(int d, int low, int high) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int digitsCount(int d, int low, int high) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def digitsCount(self, d, low, high):\n        \"\"\"\n        :type d: int\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def digitsCount(self, d: int, low: int, high: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int digitsCount(int d, int low, int high) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DigitsCount(int d, int low, int high) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} d\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar digitsCount = function(d, low, high) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function digitsCount(d: number, low: number, high: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $d\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer\n     */\n    function digitsCount($d, $low, $high) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func digitsCount(_ d: Int, _ low: Int, _ high: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun digitsCount(d: Int, low: Int, high: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int digitsCount(int d, int low, int high) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func digitsCount(d int, low int, high int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} d\n# @param {Integer} low\n# @param {Integer} high\n# @return {Integer}\ndef digits_count(d, low, high)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def digitsCount(d: Int, low: Int, high: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn digits_count(d: i32, low: i32, high: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (digits-count d low high)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec digits_count(D :: integer(), Low :: integer(), High :: integer()) -> integer().\ndigits_count(D, Low, High) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec digits_count(d :: integer, low :: integer, high :: integer) :: integer\n  def digits_count(d, low, high) do\n    \n  end\nend"}}}