{"question_id": "1610", "problem_slug": "xor-operation-in-an-array", "problem_title": "XOR Operation in an Array", "content": "You are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.\n \nExample 1:\n\nInput: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.\n\nExample 2:\n\nInput: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\n\n \nConstraints:\n\n1 <= n <= 1000\n0 <= start <= 1000\nn == nums.length\n\n", "hints": ["Simulate the process, create an array nums and return the Bitwise XOR of all elements of it."], "exampleTestcases": "5\n0\n4\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int xorOperation(int n, int start) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int xorOperation(int n, int start) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def xorOperation(self, n, start):\n        \"\"\"\n        :type n: int\n        :type start: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int xorOperation(int n, int start) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int XorOperation(int n, int start) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} start\n * @return {number}\n */\nvar xorOperation = function(n, start) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function xorOperation(n: number, start: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $start\n     * @return Integer\n     */\n    function xorOperation($n, $start) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun xorOperation(n: Int, start: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int xorOperation(int n, int start) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func xorOperation(n int, start int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} start\n# @return {Integer}\ndef xor_operation(n, start)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def xorOperation(n: Int, start: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (xor-operation n start)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec xor_operation(N :: integer(), Start :: integer()) -> integer().\nxor_operation(N, Start) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec xor_operation(n :: integer, start :: integer) :: integer\n  def xor_operation(n, start) do\n    \n  end\nend"}}}