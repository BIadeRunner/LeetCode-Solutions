{"questionId": "3567", "acRate": 88.37142473993754, "difficulty": "Easy", "freqBar": 18.188905805237887, "frontendQuestionId": "3280", "paidOnly": false, "status": "ac", "title": "Convert Date to Binary", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "convert-date-to-binary", "content": "<p>You are given a string <code>date</code> representing a Gregorian calendar date in the <code>yyyy-mm-dd</code> format.</p>\n\n<p><code>date</code> can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in <code>year-month-day</code> format.</p>\n\n<p>Return the <strong>binary</strong> representation of <code>date</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">date = &quot;2080-02-29&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;100000100000-10-11101&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><span class=\"example-io\">100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">date = &quot;1900-01-01&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;11101101100-1-1&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><span class=\"example-io\">11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>date.length == 10</code></li>\n\t<li><code>date[4] == date[7] == &#39;-&#39;</code>, and all other <code>date[i]</code>&#39;s are digits.</li>\n\t<li>The input is generated such that <code>date</code> represents a valid Gregorian calendar date between Jan 1<sup>st</sup>, 1900 and Dec 31<sup>st</sup>, 2100 (both inclusive).</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"2080-02-29\"\n\"1900-01-01\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string convertDateToBinary(string date) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String convertDateToBinary(String date) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def convertDateToBinary(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* convertDateToBinary(char* date) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ConvertDateToBinary(string date) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} date\n * @return {string}\n */\nvar convertDateToBinary = function(date) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function convertDateToBinary(date: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $date\n     * @return String\n     */\n    function convertDateToBinary($date) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func convertDateToBinary(_ date: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun convertDateToBinary(date: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String convertDateToBinary(String date) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func convertDateToBinary(date string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} date\n# @return {String}\ndef convert_date_to_binary(date)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def convertDateToBinary(date: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn convert_date_to_binary(date: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (convert-date-to-binary date)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec convert_date_to_binary(Date :: unicode:unicode_binary()) -> unicode:unicode_binary().\nconvert_date_to_binary(Date) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec convert_date_to_binary(date :: String.t) :: String.t\n  def convert_date_to_binary(date) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "number-of-1-bits", "title": "Number of 1 Bits", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "convert-to-base-2", "title": "Convert to Base -2", "isPaidOnly": false}]}