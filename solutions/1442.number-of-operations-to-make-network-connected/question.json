{"questionId": "1442", "acRate": 63.53782287822878, "difficulty": "Medium", "freqBar": 43.765865138303674, "frontendQuestionId": "1319", "paidOnly": false, "status": "ac", "title": "Number of Operations to Make Network Connected", "topicTags": [{"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "number-of-operations-to-make-network-connected", "content": "<p>There are <code>n</code> computers numbered from <code>0</code> to <code>n - 1</code> connected by ethernet cables <code>connections</code> forming a network where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a connection between computers <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Any computer can reach any other computer directly or indirectly through the network.</p>\n\n<p>You are given an initial computer network <code>connections</code>. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.</p>\n\n<p>Return <em>the minimum number of times you need to do this in order to make all the computers connected</em>. If it is not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/02/sample_1_1677.png\" style=\"width: 500px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 4, connections = [[0,1],[0,2],[1,2]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Remove cable between computer 1 and 2 and place between computers 1 and 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/02/sample_2_1677.png\" style=\"width: 500px; height: 129px;\" />\n<pre>\n<strong>Input:</strong> n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are not enough cables.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= connections.length &lt;= min(n * (n - 1) / 2, 10<sup>5</sup>)</code></li>\n\t<li><code>connections[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated connections.</li>\n\t<li>No two computers are connected by more than one cable.</li>\n</ul>\n", "hints": ["As long as there are at least (n - 1) connections, there is definitely a way to connect all computers.", "Use DFS to determine the number of isolated computer clusters."], "exampleTestcases": "4\n[[0,1],[0,2],[1,2]]\n6\n[[0,1],[0,2],[0,3],[1,2],[1,3]]\n6\n[[0,1],[0,2],[0,3],[1,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int makeConnected(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makeConnected(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MakeConnected(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar makeConnected = function(n, connections) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makeConnected(n: number, connections: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function makeConnected($n, $connections) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makeConnected(_ n: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makeConnected(n: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int makeConnected(int n, List<List<int>> connections) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func makeConnected(n int, connections [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef make_connected(n, connections)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makeConnected(n: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn make_connected(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (make-connected n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec make_connected(N :: integer(), Connections :: [[integer()]]) -> integer().\nmake_connected(N, Connections) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_connected(n :: integer, connections :: [[integer]]) :: integer\n  def make_connected(n, connections) do\n    \n  end\nend"}], "similarQuestionList": []}