{"question_id": "1442", "problem_slug": "number-of-operations-to-make-network-connected", "problem_title": "Number of Operations to Make Network Connected", "content": "There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.\n \nExample 1:\n\n\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.\n\nExample 2:\n\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2\n\nExample 3:\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.\n\n \nConstraints:\n\n1 <= n <= 105\n1 <= connections.length <= min(n * (n - 1) / 2, 105)\nconnections[i].length == 2\n0 <= ai, bi < n\nai != bi\nThere are no repeated connections.\nNo two computers are connected by more than one cable.\n\n", "hints": ["As long as there are at least (n - 1) connections, there is definitely a way to connect all computers.", "Use DFS to determine the number of isolated computer clusters."], "exampleTestcases": "4\n[[0,1],[0,2],[1,2]]\n6\n[[0,1],[0,2],[0,3],[1,2],[1,3]]\n6\n[[0,1],[0,2],[0,3],[1,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int makeConnected(int n, int[][] connections) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeConnected(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MakeConnected(int n, int[][] connections) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar makeConnected = function(n, connections) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeConnected(n: number, connections: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function makeConnected($n, $connections) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeConnected(_ n: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeConnected(n: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int makeConnected(int n, List<List<int>> connections) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeConnected(n int, connections [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef make_connected(n, connections)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeConnected(n: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_connected(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-connected n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_connected(N :: integer(), Connections :: [[integer()]]) -> integer().\nmake_connected(N, Connections) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_connected(n :: integer, connections :: [[integer]]) :: integer\n  def make_connected(n, connections) do\n    \n  end\nend"}}}