{"question_id": "2672", "problem_slug": "number-of-good-binary-strings", "problem_title": "Number of Good Binary Strings", "content": "You are given four integers minLength, maxLength, oneGroup and zeroGroup.\nA binary string is good if it satisfies the following conditions:\n\nThe length of the string is in the range [minLength, maxLength].\nThe size of each block of consecutive 1's is a multiple of oneGroup.\n\t\nFor example in a binary string 00110111100 sizes of each block of consecutive ones are [2,4].\n\n\nThe size of each block of consecutive 0's is a multiple of zeroGroup.\n\t\nFor example, in a binary string 00110111100 sizes of each block of consecutive zeros are [2,1,2].\n\n\n\nReturn the number of good binary strings. Since the answer may be too large, return it modulo 109 + 7.\nNote that 0 is considered a multiple of all the numbers.\n \nExample 1:\n\nInput: minLength = 2, maxLength = 3, oneGroup = 1, zeroGroup = 2\nOutput: 5\nExplanation: There are 5 good binary strings in this example: \"00\", \"11\", \"001\", \"100\", and \"111\".\nIt can be proven that there are only 5 good strings satisfying all conditions.\n\nExample 2:\n\nInput: minLength = 4, maxLength = 4, oneGroup = 4, zeroGroup = 3\nOutput: 1\nExplanation: There is only 1 good binary string in this example: \"1111\".\nIt can be proven that there is only 1 good string satisfying all conditions.\n\n \nConstraints:\n\n1 <= minLength <= maxLength <= 105\n1 <= oneGroup, zeroGroup <= maxLength\n\n", "hints": ["If we maintain DP(i, x) where i denotes the length and x denotes the last written integer (0 or 1), then it is not hard to solve in O(maxLength * max(zeroGroup, oneGroup)).", "Notice that from DP(i, 0) we only have a transition to DP(j, 1) where (j - i) mod oneGroup == 0 and j > i. Similarly with DP(i,1). So we can use prefix sum to optimize our DP and solve it in O(maxLength)."], "exampleTestcases": "2\n3\n1\n2\n4\n4\n4\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n        \"\"\"\n        :type minLength: int\n        :type maxLength: int\n        :type oneGroup: int\n        :type zeroGroup: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def goodBinaryStrings(self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int GoodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} minLength\n * @param {number} maxLength\n * @param {number} oneGroup\n * @param {number} zeroGroup\n * @return {number}\n */\nvar goodBinaryStrings = function(minLength, maxLength, oneGroup, zeroGroup) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function goodBinaryStrings(minLength: number, maxLength: number, oneGroup: number, zeroGroup: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $minLength\n     * @param Integer $maxLength\n     * @param Integer $oneGroup\n     * @param Integer $zeroGroup\n     * @return Integer\n     */\n    function goodBinaryStrings($minLength, $maxLength, $oneGroup, $zeroGroup) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func goodBinaryStrings(_ minLength: Int, _ maxLength: Int, _ oneGroup: Int, _ zeroGroup: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun goodBinaryStrings(minLength: Int, maxLength: Int, oneGroup: Int, zeroGroup: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func goodBinaryStrings(minLength int, maxLength int, oneGroup int, zeroGroup int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} min_length\n# @param {Integer} max_length\n# @param {Integer} one_group\n# @param {Integer} zero_group\n# @return {Integer}\ndef good_binary_strings(min_length, max_length, one_group, zero_group)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def goodBinaryStrings(minLength: Int, maxLength: Int, oneGroup: Int, zeroGroup: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn good_binary_strings(min_length: i32, max_length: i32, one_group: i32, zero_group: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (good-binary-strings minLength maxLength oneGroup zeroGroup)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec good_binary_strings(MinLength :: integer(), MaxLength :: integer(), OneGroup :: integer(), ZeroGroup :: integer()) -> integer().\ngood_binary_strings(MinLength, MaxLength, OneGroup, ZeroGroup) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec good_binary_strings(min_length :: integer, max_length :: integer, one_group :: integer, zero_group :: integer) :: integer\n  def good_binary_strings(min_length, max_length, one_group, zero_group) do\n    \n  end\nend"}}}