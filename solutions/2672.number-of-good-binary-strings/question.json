{"questionId": "2672", "acRate": 52.08386820710312, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2533", "paidOnly": true, "status": "ac", "title": "Number of Good Binary Strings", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "number-of-good-binary-strings", "content": "<p>You are given four integers <code>minLength</code>, <code>maxLength</code>, <code>oneGroup</code> and <code>zeroGroup</code>.</p>\n\n<p>A binary string is <strong>good</strong> if it satisfies the following conditions:</p>\n\n<ul>\n\t<li>The length of the string is in the range <code>[minLength, maxLength]</code>.</li>\n\t<li>The size of each block of consecutive <code>1</code>&#39;s is a multiple of <code>oneGroup</code>.\n\t<ul>\n\t\t<li>For example in a binary string <code>00<u>11</u>0<u>1111</u>00</code> sizes of each block of consecutive ones are <code>[2,4]</code>.</li>\n\t</ul>\n\t</li>\n\t<li>The size of each block of consecutive <code>0</code>&#39;s is a multiple of <code>zeroGroup</code>.\n\t<ul>\n\t\t<li>For example, in a binary string <code><u>00</u>11<u>0</u>1111<u>00</u></code> sizes of each block of consecutive zeros are <code>[2,1,2]</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the number of <strong>good</strong> binary strings</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note</strong> that <code>0</code> is considered a multiple of all the numbers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> minLength = 2, maxLength = 3, oneGroup = 1, zeroGroup = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 good binary strings in this example: &quot;00&quot;, &quot;11&quot;, &quot;001&quot;, &quot;100&quot;, and &quot;111&quot;.\nIt can be proven that there are only 5 good strings satisfying all conditions.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> minLength = 4, maxLength = 4, oneGroup = 4, zeroGroup = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only 1 good binary string in this example: &quot;1111&quot;.\nIt can be proven that there is only 1 good string satisfying all conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= minLength &lt;= maxLength &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= oneGroup, zeroGroup &lt;= maxLength</code></li>\n</ul>\n", "hints": ["If we maintain DP(i, x) where i denotes the length and x denotes the last written integer (0 or 1), then it is not hard to solve in O(maxLength * max(zeroGroup, oneGroup)).", "Notice that from DP(i, 0) we only have a transition to DP(j, 1) where (j - i) mod oneGroup == 0 and j > i. Similarly with DP(i,1). So we can use prefix sum to optimize our DP and solve it in O(maxLength)."], "exampleTestcases": "2\n3\n1\n2\n4\n4\n4\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n        \"\"\"\n        :type minLength: int\n        :type maxLength: int\n        :type oneGroup: int\n        :type zeroGroup: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def goodBinaryStrings(self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GoodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} minLength\n * @param {number} maxLength\n * @param {number} oneGroup\n * @param {number} zeroGroup\n * @return {number}\n */\nvar goodBinaryStrings = function(minLength, maxLength, oneGroup, zeroGroup) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function goodBinaryStrings(minLength: number, maxLength: number, oneGroup: number, zeroGroup: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $minLength\n     * @param Integer $maxLength\n     * @param Integer $oneGroup\n     * @param Integer $zeroGroup\n     * @return Integer\n     */\n    function goodBinaryStrings($minLength, $maxLength, $oneGroup, $zeroGroup) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func goodBinaryStrings(_ minLength: Int, _ maxLength: Int, _ oneGroup: Int, _ zeroGroup: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun goodBinaryStrings(minLength: Int, maxLength: Int, oneGroup: Int, zeroGroup: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int goodBinaryStrings(int minLength, int maxLength, int oneGroup, int zeroGroup) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func goodBinaryStrings(minLength int, maxLength int, oneGroup int, zeroGroup int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} min_length\n# @param {Integer} max_length\n# @param {Integer} one_group\n# @param {Integer} zero_group\n# @return {Integer}\ndef good_binary_strings(min_length, max_length, one_group, zero_group)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def goodBinaryStrings(minLength: Int, maxLength: Int, oneGroup: Int, zeroGroup: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn good_binary_strings(min_length: i32, max_length: i32, one_group: i32, zero_group: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (good-binary-strings minLength maxLength oneGroup zeroGroup)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec good_binary_strings(MinLength :: integer(), MaxLength :: integer(), OneGroup :: integer(), ZeroGroup :: integer()) -> integer().\ngood_binary_strings(MinLength, MaxLength, OneGroup, ZeroGroup) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec good_binary_strings(min_length :: integer, max_length :: integer, one_group :: integer, zero_group :: integer) :: integer\n  def good_binary_strings(min_length, max_length, one_group, zero_group) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "special-binary-string", "title": "Special Binary String", "isPaidOnly": false}]}