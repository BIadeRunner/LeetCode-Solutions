{"question_id": "2153", "problem_slug": "subtree-removal-game-with-fibonacci-tree", "problem_title": "Subtree Removal Game with Fibonacci Tree", "content": "A Fibonacci tree is a binary tree created using the order function order(n):\n\norder(0) is the empty tree.\norder(1) is a binary tree with only one node.\norder(n) is a binary tree that consists of a root node with the left subtree as order(n - 2) and the right subtree as order(n - 1).\n\nAlice and Bob are playing a game with a Fibonacci tree with Alice staring first. On each turn, a player selects a node and removes that node and its subtree. The player that is forced to delete root loses.\nGiven the integer n, return true if Alice wins the game or false if Bob wins, assuming both players play optimally.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n \nExample 1:\n\n\nInput: n = 3\nOutput: true\nExplanation:\nAlice takes the node 1 in the right subtree.\nBob takes either the 1 in the left subtree or the 2 in the right subtree.\nAlice takes whichever node Bob doesn't take.\nBob is forced to take the root node 3, so Bob will lose.\nReturn true because Alice wins.\n\nExample 2:\n\n\nInput: n = 1\nOutput: false\nExplanation:\nAlice is forced to take the root node 1, so Alice will lose.\nReturn false because Alice loses.\n\nExample 3:\n\n\nInput: n = 2\nOutput: true\nExplanation:\nAlice takes the node 1.\nBob is forced to take the root node 2, so Bob will lose.\nReturn true because Alice wins.\n\n \nConstraints:\n\n1 <= n <= 100\n\n", "hints": ["How can game theory help us solve this problem?", "Think about the Sprague–Grundy theorem and the Colon Principle", "The Grundy value of a node is the nim sum of the Grundy values of its children."], "exampleTestcases": "3\n1\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool findGameWinner(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean findGameWinner(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findGameWinner(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findGameWinner(self, n: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool findGameWinner(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool FindGameWinner(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar findGameWinner = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findGameWinner(n: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function findGameWinner($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findGameWinner(_ n: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findGameWinner(n: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool findGameWinner(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findGameWinner(n int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef find_game_winner(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findGameWinner(n: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_game_winner(n: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-game-winner n)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_game_winner(N :: integer()) -> boolean().\nfind_game_winner(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_game_winner(n :: integer) :: boolean\n  def find_game_winner(n) do\n    \n  end\nend"}}}