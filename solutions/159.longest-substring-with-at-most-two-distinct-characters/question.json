{"question_id": "159", "problem_slug": "longest-substring-with-at-most-two-distinct-characters", "problem_title": "Longest Substring with At Most Two Distinct Characters", "content": "Given a string s, return the length of the longest substring that contains at most two distinct characters.\n \nExample 1:\n\nInput: s = \"eceba\"\nOutput: 3\nExplanation: The substring is \"ece\" which its length is 3.\n\nExample 2:\n\nInput: s = \"ccaabbb\"\nOutput: 5\nExplanation: The substring is \"aabbb\" which its length is 5.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of English letters.\n\n", "hints": [], "exampleTestcases": "\"eceba\"\n\"ccaabbb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLongestSubstringTwoDistinct(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int lengthOfLongestSubstringTwoDistinct(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int lengthOfLongestSubstringTwoDistinct(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLongestSubstringTwoDistinct(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstringTwoDistinct = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function lengthOfLongestSubstringTwoDistinct(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstringTwoDistinct($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func lengthOfLongestSubstringTwoDistinct(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLongestSubstringTwoDistinct(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int lengthOfLongestSubstringTwoDistinct(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func lengthOfLongestSubstringTwoDistinct(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring_two_distinct(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def lengthOfLongestSubstringTwoDistinct(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_longest_substring_two_distinct(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (length-of-longest-substring-two-distinct s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec length_of_longest_substring_two_distinct(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring_two_distinct(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec length_of_longest_substring_two_distinct(s :: String.t) :: integer\n  def length_of_longest_substring_two_distinct(s) do\n    \n  end\nend"}}}