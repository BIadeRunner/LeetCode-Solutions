{"question_id": "3114", "problem_slug": "beautiful-towers-i", "problem_title": "Beautiful Towers I", "content": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\nReturn the maximum possible sum of heights of a mountain-shaped tower arrangement.\n \nExample 1:\n\nInput: heights = [5,3,4,1,1]\nOutput: 13\nExplanation:\nWe remove some bricks to make heights = [5,3,3,1,1], the peak is at index 0.\n\nExample 2:\n\nInput: heights = [6,5,3,9,2,7]\nOutput: 22\nExplanation:\nWe remove some bricks to make heights = [3,3,3,9,2,2], the peak is at index 3.\n\nExample 3:\n\nInput: heights = [3,2,5,5,2,3]\nOutput: 18\nExplanation:\nWe remove some bricks to make heights = [2,2,5,5,2,2], the peak is at index 2 or 3.\n\n \nConstraints:\n\n1 <= n == heights.length <= 103\n1 <= heights[i] <= 109\n\n", "hints": ["Try all the possible indices <code>i</code> as the peak.", "If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>", "If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>"], "exampleTestcases": "[5,3,4,1,1]\n[6,5,3,9,2,7]\n[3,2,5,5,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& heights) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumSumOfHeights(int[] heights) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumSumOfHeights(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumSumOfHeights(self, heights: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumSumOfHeights(int* heights, int heightsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumSumOfHeights(int[] heights) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar maximumSumOfHeights = function(heights) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumSumOfHeights(heights: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function maximumSumOfHeights($heights) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumSumOfHeights(_ heights: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumSumOfHeights(heights: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumSumOfHeights(List<int> heights) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumSumOfHeights(heights []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef maximum_sum_of_heights(heights)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumSumOfHeights(heights: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_sum_of_heights(heights: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-sum-of-heights heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_sum_of_heights(Heights :: [integer()]) -> integer().\nmaximum_sum_of_heights(Heights) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(heights :: [integer]) :: integer\n  def maximum_sum_of_heights(heights) do\n    \n  end\nend"}}}