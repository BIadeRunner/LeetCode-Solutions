{"questionId": "3003", "acRate": 75.59232794283565, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2793", "paidOnly": true, "status": "ac", "title": "Status of Flight Tickets", "topicTags": [], "titleSlug": "status-of-flight-tickets", "content": "<p>Table: <code><font face=\"monospace\">Flights</font></code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| flight_id   | int  |\n| capacity    | int  |\n+-------------+------+\n<code>flight_id</code> column contains distinct values.\nEach row of this table contains flight id and capacity.\n</pre>\n\n<p>Table: <code>Passengers</code></p>\n\n<pre>\n+--------------+----------+\n| Column Name  | Type     |\n+--------------+----------+\n| passenger_id | int      |\n| flight_id    | int      |\n| booking_time | datetime |\n+--------------+----------+\npassenger_id column contains distinct values.\nbooking_time column contains distinct values.\nEach row of this table contains passenger id, booking time, and their flight id.\n</pre>\n\n<p>Passengers book tickets for flights in advance. If a passenger books a ticket for a flight and there are still empty seats available on the flight, the passenger&#39;s ticket will be <strong>confirmed</strong>. However, the passenger will be on a <strong>waitlist</strong> if the flight is already at full capacity.</p>\n\n<p>Write a solution to determine the current status of flight tickets for each passenger.</p>\n\n<p>Return the result table ordered by <code>passenger_id</code> <em>in <strong>ascending order</strong>.</em></p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nFlights table:\n+-----------+----------+\n| flight_id | capacity |\n+-----------+----------+\n| 1         | 2        |\n| 2         | 2        |\n| 3         | 1        |\n+-----------+----------+\nPassengers table:\n+--------------+-----------+---------------------+\n| passenger_id | flight_id | booking_time        |\n+--------------+-----------+---------------------+\n| 101          | 1         | 2023-07-10 16:30:00 |\n| 102          | 1         | 2023-07-10 17:45:00 |\n| 103          | 1         | 2023-07-10 12:00:00 |\n| 104          | 2         | 2023-07-05 13:23:00 |\n| 105          | 2         | 2023-07-05 09:00:00 |\n| 106          | 3         | 2023-07-08 11:10:00 |\n| 107          | 3         | 2023-07-08 09:10:00 |\n+--------------+-----------+---------------------+\n<strong>Output:</strong> \n+--------------+-----------+\n| passenger_id | Status    |\n+--------------+-----------+\n| 101          | Confirmed | \n| 102          | Waitlist  | \n| 103          | Confirmed | \n| 104          | Confirmed | \n| 105          | Confirmed | \n| 106          | Waitlist  | \n| 107          | Confirmed | \n+--------------+-----------+\n<strong>Explanation:</strong> \n- Flight 1 has a capacity of 2 passengers. Passenger 101 and Passenger 103 were the first to book tickets, securing the available seats. Therefore, their bookings are confirmed. However, Passenger 102 was the third person to book a ticket for this flight, which means there are no more available seats. Passenger 102 is now placed on the waitlist, \n- Flight 2 has a capacity of 2 passengers, Flight 2 has exactly two passengers who booked tickets,  Passenger 104 and Passenger 105. Since the number of passengers who booked tickets matches the available seats, both bookings are confirmed.\n- Flight 3 has a capacity of 1 passenger. Passenger 107 booked earlier and secured the only available seat, confirming their booking. Passenger 106, who booked after Passenger 107, is on the waitlist.\n</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Flights\":[\"flight_id\",\"capacity\"],\"Passengers\":[\"passenger_id\",\"flight_id\",\"booking_time\"]},\"rows\":{\"Flights\":[[1,2],[2,2],[3,1]],\"Passengers\":[[101,1,\"2023-07-10 16:30:00\"],[102,1,\"2023-07-10 17:45:00\"],[103,1,\"2023-07-10 12:00:00\"],[104,2,\"2023-07-05 13:23:00\"],[105,2,\"2023-07-05 09:00:00\"],[106,3,\"2023-07-08 11:10:00\"],[107,3,\"2023-07-08 09:10:00\"]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef ticket_status(flights: pd.DataFrame, passengers: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": []}