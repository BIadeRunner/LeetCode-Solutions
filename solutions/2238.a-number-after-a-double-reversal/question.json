{"questionId": "2238", "acRate": 80.51062780084693, "difficulty": "Easy", "freqBar": 14.267802260662224, "frontendQuestionId": "2119", "paidOnly": false, "status": "ac", "title": "A Number After a Double Reversal", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "a-number-after-a-double-reversal", "content": "<p><strong>Reversing</strong> an integer means to reverse all its digits.</p>\n\n<ul>\n\t<li>For example, reversing <code>2021</code> gives <code>1202</code>. Reversing <code>12300</code> gives <code>321</code> as the <strong>leading zeros are not retained</strong>.</li>\n</ul>\n\n<p>Given an integer <code>num</code>, <strong>reverse</strong> <code>num</code> to get <code>reversed1</code>, <strong>then reverse</strong> <code>reversed1</code> to get <code>reversed2</code>. Return <code>true</code> <em>if</em> <code>reversed2</code> <em>equals</em> <code>num</code>. Otherwise return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 526\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Reverse num to get 625, then reverse 625 to get 526, which equals num.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1800\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reverse num to get 81, then reverse 81 to get 18, which does not equal num.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Reverse num to get 0, then reverse 0 to get 0, which equals num.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Other than the number 0 itself, any number that ends with 0 would lose some digits permanently when reversed."], "exampleTestcases": "526\n1800\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isSameAfterReversals(int num) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isSameAfterReversals(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isSameAfterReversals(self, num: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isSameAfterReversals(int num) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsSameAfterReversals(int num) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isSameAfterReversals = function(num) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isSameAfterReversals(num: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function isSameAfterReversals($num) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isSameAfterReversals(_ num: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isSameAfterReversals(num: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isSameAfterReversals(int num) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isSameAfterReversals(num int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef is_same_after_reversals(num)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isSameAfterReversals(num: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_same_after_reversals(num: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-same-after-reversals num)\n  (-> exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_same_after_reversals(Num :: integer()) -> boolean().\nis_same_after_reversals(Num) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_same_after_reversals(num :: integer) :: boolean\n  def is_same_after_reversals(num) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "reverse-integer", "title": "Reverse Integer", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "reverse-bits", "title": "Reverse Bits", "isPaidOnly": false}]}