{"question_id": "2166", "problem_slug": "number-of-valid-move-combinations-on-chessboard", "problem_title": "Number of Valid Move Combinations On Chessboard", "content": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.\nWhen making a move for a piece, you choose a destination square that the piece will travel toward and stop on.\n\nA rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).\nA queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).\nA bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).\n\nYou must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.\nReturn the number of valid move combinations​​​​​.\nNotes:\n\nNo two pieces will start in the same square.\nYou may choose the square a piece is already on as its destination.\nIf two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.\n\n \nExample 1:\n\n\nInput: pieces = [\"rook\"], positions = [[1,1]]\nOutput: 15\nExplanation: The image above shows the possible squares the piece can move to.\n\nExample 2:\n\n\nInput: pieces = [\"queen\"], positions = [[1,1]]\nOutput: 22\nExplanation: The image above shows the possible squares the piece can move to.\n\nExample 3:\n\n\nInput: pieces = [\"bishop\"], positions = [[4,3]]\nOutput: 12\nExplanation: The image above shows the possible squares the piece can move to.\n\n \nConstraints:\n\nn == pieces.length \nn == positions.length\n1 <= n <= 4\npieces only contains the strings \"rook\", \"queen\", and \"bishop\".\nThere will be at most one queen on the chessboard.\n1 <= xi, yi <= 8\nEach positions[i] is distinct.\n\n", "hints": ["N is small, we can generate all possible move combinations.", "For each possible move combination, determine which ones are valid."], "exampleTestcases": "[\"rook\"]\n[[1,1]]\n[\"queen\"]\n[[1,1]]\n[\"bishop\"]\n[[4,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countCombinations(vector<string>& pieces, vector<vector<int>>& positions) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countCombinations(String[] pieces, int[][] positions) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countCombinations(self, pieces, positions):\n        \"\"\"\n        :type pieces: List[str]\n        :type positions: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countCombinations(char** pieces, int piecesSize, int** positions, int positionsSize, int* positionsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountCombinations(string[] pieces, int[][] positions) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} pieces\n * @param {number[][]} positions\n * @return {number}\n */\nvar countCombinations = function(pieces, positions) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countCombinations(pieces: string[], positions: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $pieces\n     * @param Integer[][] $positions\n     * @return Integer\n     */\n    function countCombinations($pieces, $positions) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countCombinations(_ pieces: [String], _ positions: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countCombinations(pieces: Array<String>, positions: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countCombinations(List<String> pieces, List<List<int>> positions) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countCombinations(pieces []string, positions [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} pieces\n# @param {Integer[][]} positions\n# @return {Integer}\ndef count_combinations(pieces, positions)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countCombinations(pieces: Array[String], positions: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_combinations(pieces: Vec<String>, positions: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-combinations pieces positions)\n  (-> (listof string?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_combinations(Pieces :: [unicode:unicode_binary()], Positions :: [[integer()]]) -> integer().\ncount_combinations(Pieces, Positions) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_combinations(pieces :: [String.t], positions :: [[integer]]) :: integer\n  def count_combinations(pieces, positions) do\n    \n  end\nend"}}}