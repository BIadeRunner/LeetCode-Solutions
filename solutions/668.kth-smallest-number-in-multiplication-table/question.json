{"question_id": "668", "problem_slug": "kth-smallest-number-in-multiplication-table", "problem_title": "Kth Smallest Number in Multiplication Table", "content": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\n \nExample 1:\n\n\nInput: m = 3, n = 3, k = 5\nOutput: 3\nExplanation: The 5th smallest number is 3.\n\nExample 2:\n\n\nInput: m = 2, n = 3, k = 6\nOutput: 6\nExplanation: The 6th smallest number is 6.\n\n \nConstraints:\n\n1 <= m, n <= 3 * 104\n1 <= k <= m * n\n\n", "hints": [], "exampleTestcases": "3\n3\n5\n2\n3\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findKthNumber(int m, int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findKthNumber(int m, int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findKthNumber(int m, int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindKthNumber(int m, int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findKthNumber = function(m, n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findKthNumber(m: number, n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthNumber($m, $n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findKthNumber(_ m: Int, _ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findKthNumber(m: Int, n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findKthNumber(int m, int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findKthNumber(m int, n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_number(m, n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findKthNumber(m: Int, n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_kth_number(m: i32, n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-kth-number m n k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_kth_number(M :: integer(), N :: integer(), K :: integer()) -> integer().\nfind_kth_number(M, N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_kth_number(m :: integer, n :: integer, k :: integer) :: integer\n  def find_kth_number(m, n, k) do\n    \n  end\nend"}}}