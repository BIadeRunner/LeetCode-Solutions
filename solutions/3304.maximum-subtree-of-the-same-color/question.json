{"questionId": "3304", "acRate": 63.81578947368421, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3004", "paidOnly": true, "status": "ac", "title": "Maximum Subtree of the Same Color", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}], "titleSlug": "maximum-subtree-of-the-same-color", "content": "<p>You are given a 2D integer array <code>edges</code> representing a tree with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>, rooted at node <code>0</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> means there is an edge between the nodes <code>v<sub>i</sub></code> and <code>u<sub>i</sub></code>.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>colors</code> of size <code>n</code>, where <code>colors[i]</code> is the color assigned to node <code>i</code>.</p>\n\n<p>We want to find a node <code>v</code> such that every node in the <span data-keyword=\"subtree-of-node\">subtree</span> of <code>v</code> has the <strong>same</strong> color.</p>\n\n<p>Return <em>the size of such subtree with the <strong>maximum</strong> number of nodes possible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/static_assets/others/20231216-134026.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 221px; height: 132px;\" /></strong></p>\n\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[0,3]], colors = [1,1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Each color is represented as: 1 -&gt; Red, 2 -&gt; Green, 3 -&gt; Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color and has a size of 1. Hence, we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[0,3]], colors = [1,1,1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The whole tree has the same color, and the subtree rooted at node 0 has the most number of nodes which is 4. Hence, we return 4.\n</pre>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/static_assets/others/20231216-134017.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 221px; height: 221px;\" /></strong></p>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[2,3],[2,4]], colors = [1,2,3,3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Each color is represented as: 1 -&gt; Red, 2 -&gt; Green, 3 -&gt; Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color, but the subtree rooted at node 2 has a size of 3 which is the maximum. Hence, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length + 1</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>edges[i] == [u<sub>i</sub>, v<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li>\n\t<li><code>colors.length == n</code></li>\n\t<li><code>1 &lt;= colors[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The input is generated such that the graph represented by <code>edges</code> is a tree.</li>\n</ul>\n", "hints": ["For each node, define a <code>flag[v]</code> indicating that the subtree of this node contains only one color or not.", "In the DFS process, when you call <code>dfs(u)</code> from node <code>v</code>, after that DFS of <code>u</code> has finished, check if <code>flag[u] == false</code>, then <code>flag[v]</code> is also <code>false</code>.", "Also if <code>color[v] != color[u]</code>, <code>flag[v]</code> becomes <code>false</code>."], "exampleTestcases": "[[0,1],[0,2],[0,3]]\n[1,1,2,3]\n[[0,1],[0,2],[0,3]]\n[1,1,1,1]\n[[0,1],[0,2],[2,3],[2,4]]\n[1,2,3,3,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumSubtreeSize(vector<vector<int>>& edges, vector<int>& colors) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumSubtreeSize(int[][] edges, int[] colors) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumSubtreeSize(self, edges, colors):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type colors: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumSubtreeSize(self, edges: List[List[int]], colors: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumSubtreeSize(int** edges, int edgesSize, int* edgesColSize, int* colors, int colorsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumSubtreeSize(int[][] edges, int[] colors) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @param {number[]} colors\n * @return {number}\n */\nvar maximumSubtreeSize = function(edges, colors) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumSubtreeSize(edges: number[][], colors: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer[] $colors\n     * @return Integer\n     */\n    function maximumSubtreeSize($edges, $colors) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumSubtreeSize(_ edges: [[Int]], _ colors: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumSubtreeSize(edges: Array<IntArray>, colors: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumSubtreeSize(List<List<int>> edges, List<int> colors) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumSubtreeSize(edges [][]int, colors []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @param {Integer[]} colors\n# @return {Integer}\ndef maximum_subtree_size(edges, colors)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumSubtreeSize(edges: Array[Array[Int]], colors: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_subtree_size(edges: Vec<Vec<i32>>, colors: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-subtree-size edges colors)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_subtree_size(Edges :: [[integer()]], Colors :: [integer()]) -> integer().\nmaximum_subtree_size(Edges, Colors) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_subtree_size(edges :: [[integer]], colors :: [integer]) :: integer\n  def maximum_subtree_size(edges, colors) do\n    \n  end\nend"}], "similarQuestionList": []}