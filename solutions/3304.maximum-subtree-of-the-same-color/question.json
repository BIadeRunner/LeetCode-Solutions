{"question_id": "3304", "problem_slug": "maximum-subtree-of-the-same-color", "problem_title": "Maximum Subtree of the Same Color", "content": "You are given a 2D integer array edges representing a tree with n nodes, numbered from 0 to n - 1, rooted at node 0, where edges[i] = [ui, vi] means there is an edge between the nodes vi and ui.\nYou are also given a 0-indexed integer array colors of size n, where colors[i] is the color assigned to node i.\nWe want to find a node v such that every node in the subtree of v has the same color.\nReturn the size of such subtree with the maximum number of nodes possible.\n \n\nExample 1:\n\nInput: edges = [[0,1],[0,2],[0,3]], colors = [1,1,2,3]\nOutput: 1\nExplanation: Each color is represented as: 1 -> Red, 2 -> Green, 3 -> Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color and has a size of 1. Hence, we return 1.\n\nExample 2:\n\nInput: edges = [[0,1],[0,2],[0,3]], colors = [1,1,1,1]\nOutput: 4\nExplanation: The whole tree has the same color, and the subtree rooted at node 0 has the most number of nodes which is 4. Hence, we return 4.\n\n\nExample 3:\n\nInput: edges = [[0,1],[0,2],[2,3],[2,4]], colors = [1,2,3,3,3]\nOutput: 3\nExplanation: Each color is represented as: 1 -> Red, 2 -> Green, 3 -> Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color, but the subtree rooted at node 2 has a size of 3 which is the maximum. Hence, we return 3.\n\n \nConstraints:\n\nn == edges.length + 1\n1 <= n <= 5 * 104\nedges[i] == [ui, vi]\n0 <= ui, vi < n\ncolors.length == n\n1 <= colors[i] <= 105\nThe input is generated such that the graph represented by edges is a tree.\n\n", "hints": ["For each node, define a <code>flag[v]</code> indicating that the subtree of this node contains only one color or not.", "In the DFS process, when you call <code>dfs(u)</code> from node <code>v</code>, after that DFS of <code>u</code> has finished, check if <code>flag[u] == false</code>, then <code>flag[v]</code> is also <code>false</code>.", "Also if <code>color[v] != color[u]</code>, <code>flag[v]</code> becomes <code>false</code>."], "exampleTestcases": "[[0,1],[0,2],[0,3]]\n[1,1,2,3]\n[[0,1],[0,2],[0,3]]\n[1,1,1,1]\n[[0,1],[0,2],[2,3],[2,4]]\n[1,2,3,3,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumSubtreeSize(vector<vector<int>>& edges, vector<int>& colors) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumSubtreeSize(int[][] edges, int[] colors) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumSubtreeSize(self, edges, colors):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type colors: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumSubtreeSize(self, edges: List[List[int]], colors: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumSubtreeSize(int** edges, int edgesSize, int* edgesColSize, int* colors, int colorsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumSubtreeSize(int[][] edges, int[] colors) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @param {number[]} colors\n * @return {number}\n */\nvar maximumSubtreeSize = function(edges, colors) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumSubtreeSize(edges: number[][], colors: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer[] $colors\n     * @return Integer\n     */\n    function maximumSubtreeSize($edges, $colors) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumSubtreeSize(_ edges: [[Int]], _ colors: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumSubtreeSize(edges: Array<IntArray>, colors: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumSubtreeSize(List<List<int>> edges, List<int> colors) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumSubtreeSize(edges [][]int, colors []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @param {Integer[]} colors\n# @return {Integer}\ndef maximum_subtree_size(edges, colors)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumSubtreeSize(edges: Array[Array[Int]], colors: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_subtree_size(edges: Vec<Vec<i32>>, colors: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-subtree-size edges colors)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_subtree_size(Edges :: [[integer()]], Colors :: [integer()]) -> integer().\nmaximum_subtree_size(Edges, Colors) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_subtree_size(edges :: [[integer]], colors :: [integer]) :: integer\n  def maximum_subtree_size(edges, colors) do\n    \n  end\nend"}}}