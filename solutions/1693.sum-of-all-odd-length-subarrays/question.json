{"question_id": "1693", "problem_slug": "sum-of-all-odd-length-subarrays", "problem_title": "Sum of All Odd Length Subarrays", "content": "Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.\nA subarray is a contiguous subsequence of the array.\n \nExample 1:\n\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\n\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\n\nInput: arr = [10,11,12]\nOutput: 66\n\n \nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\n \nFollow up:\nCould you solve this problem in O(n) time complexity?\n", "hints": ["You can brute force – try every (i,j) pair, and if the length is odd, go through and add the sum to the answer."], "exampleTestcases": "[1,4,2,5,3]\n[1,2]\n[10,11,12]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumOddLengthSubarrays(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOddLengthSubarrays(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumOddLengthSubarrays(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar sumOddLengthSubarrays = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOddLengthSubarrays(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function sumOddLengthSubarrays($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOddLengthSubarrays(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOddLengthSubarrays(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumOddLengthSubarrays(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOddLengthSubarrays(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef sum_odd_length_subarrays(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOddLengthSubarrays(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_odd_length_subarrays(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-odd-length-subarrays arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_odd_length_subarrays(Arr :: [integer()]) -> integer().\nsum_odd_length_subarrays(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_odd_length_subarrays(arr :: [integer]) :: integer\n  def sum_odd_length_subarrays(arr) do\n    \n  end\nend"}}}