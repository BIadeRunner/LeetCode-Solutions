{"questionId": "1321", "acRate": 58.429563638666636, "difficulty": "Medium", "freqBar": 56.807109238194464, "frontendQuestionId": "1208", "paidOnly": false, "status": "ac", "title": "Get Equal Substrings Within Budget", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "get-equal-substrings-within-budget", "content": "<p>You are given two strings <code>s</code> and <code>t</code> of the same length and an integer <code>maxCost</code>.</p>\n\n<p>You want to change <code>s</code> to <code>t</code>. Changing the <code>i<sup>th</sup></code> character of <code>s</code> to <code>i<sup>th</sup></code> character of <code>t</code> costs <code>|s[i] - t[i]|</code> (i.e., the absolute difference between the ASCII values of the characters).</p>\n\n<p>Return <em>the maximum length of a substring of </em><code>s</code><em> that can be changed to be the same as the corresponding substring of </em><code>t</code><em> with a cost less than or equal to </em><code>maxCost</code>. If there is no substring from <code>s</code> that can be changed to its corresponding substring from <code>t</code>, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;bcdf&quot;, maxCost = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> &quot;abc&quot; of s can change to &quot;bcd&quot;.\nThat costs 3, so the maximum length is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;cdef&quot;, maxCost = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Each character in s costs 2 to change to character in t,  so the maximum length is 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;acde&quot;, maxCost = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You cannot make any change, so the maximum length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>0 &lt;= maxCost &lt;= 10<sup>6</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li>\n</ul>\n", "hints": ["Calculate the differences between s[i] and t[i].", "Use a sliding window to track the longest valid substring."], "exampleTestcases": "\"abcd\"\n\"bcdf\"\n3\n\"abcd\"\n\"cdef\"\n3\n\"abcd\"\n\"acde\"\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int equalSubstring(string s, string t, int maxCost) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int equalSubstring(String s, String t, int maxCost) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def equalSubstring(self, s, t, maxCost):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :type maxCost: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int equalSubstring(char* s, char* t, int maxCost) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int EqualSubstring(string s, string t, int maxCost) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @param {number} maxCost\n * @return {number}\n */\nvar equalSubstring = function(s, t, maxCost) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function equalSubstring(s: string, t: string, maxCost: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @param Integer $maxCost\n     * @return Integer\n     */\n    function equalSubstring($s, $t, $maxCost) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func equalSubstring(_ s: String, _ t: String, _ maxCost: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun equalSubstring(s: String, t: String, maxCost: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int equalSubstring(String s, String t, int maxCost) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func equalSubstring(s string, t string, maxCost int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @param {Integer} max_cost\n# @return {Integer}\ndef equal_substring(s, t, max_cost)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def equalSubstring(s: String, t: String, maxCost: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn equal_substring(s: String, t: String, max_cost: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (equal-substring s t maxCost)\n  (-> string? string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec equal_substring(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), MaxCost :: integer()) -> integer().\nequal_substring(S, T, MaxCost) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec equal_substring(s :: String.t, t :: String.t, max_cost :: integer) :: integer\n  def equal_substring(s, t, max_cost) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-nice-subarray", "title": "Longest Nice Subarray", "isPaidOnly": false}]}