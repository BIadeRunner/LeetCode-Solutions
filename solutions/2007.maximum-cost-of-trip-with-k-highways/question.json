{"question_id": "2007", "problem_slug": "maximum-cost-of-trip-with-k-highways", "problem_title": "Maximum Cost of Trip With K Highways", "content": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer k. You are going on a trip that crosses exactly k highways. You may start at any city, but you may only visit each city at most once during your trip.\nReturn the maximum cost of your trip. If there is no trip that meets the requirements, return -1.\n \nExample 1:\n\n\nInput: n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], k = 3\nOutput: 17\nExplanation:\nOne possible trip is to go from 0 -> 1 -> 4 -> 3. The cost of this trip is 4 + 11 + 2 = 17.\nAnother possible trip is to go from 4 -> 1 -> 2 -> 3. The cost of this trip is 11 + 3 + 3 = 17.\nIt can be proven that 17 is the maximum possible cost of any valid trip.\n\nNote that the trip 4 -> 1 -> 0 -> 1 is not allowed because you visit the city 1 twice.\n\nExample 2:\n\n\nInput: n = 4, highways = [[0,1,3],[2,3,2]], k = 2\nOutput: -1\nExplanation: There are no valid trips of length 2, so return -1.\n\n \nConstraints:\n\n2 <= n <= 15\n1 <= highways.length <= 50\nhighways[i].length == 3\n0 <= city1i, city2i <= n - 1\ncity1i != city2i\n0 <= tolli <= 100\n1 <= k <= 50\nThere are no duplicate highways.\n\n", "hints": ["Are there any computations being repeated?", "The same path can be visited multiple times. Could we reuse the previously calculated result?", "Store the nodes seen on the current path and the last node on the current path as a dynamic programming state."], "exampleTestcases": "5\n[[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]]\n3\n4\n[[0,1,3],[2,3,2]]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumCost(int n, vector<vector<int>>& highways, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumCost(int n, int[][] highways, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumCost(self, n, highways, k):\n        \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumCost(self, n: int, highways: List[List[int]], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumCost(int n, int** highways, int highwaysSize, int* highwaysColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumCost(int n, int[][] highways, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} highways\n * @param {number} k\n * @return {number}\n */\nvar maximumCost = function(n, highways, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumCost(n: number, highways: number[][], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $highways\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumCost($n, $highways, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumCost(_ n: Int, _ highways: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumCost(n: Int, highways: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumCost(int n, List<List<int>> highways, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumCost(n int, highways [][]int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} highways\n# @param {Integer} k\n# @return {Integer}\ndef maximum_cost(n, highways, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumCost(n: Int, highways: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_cost(n: i32, highways: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-cost n highways k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_cost(N :: integer(), Highways :: [[integer()]], K :: integer()) -> integer().\nmaximum_cost(N, Highways, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_cost(n :: integer, highways :: [[integer]], k :: integer) :: integer\n  def maximum_cost(n, highways, k) do\n    \n  end\nend"}}}