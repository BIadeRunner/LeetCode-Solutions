{"questionId": "3573", "acRate": 41.229866607627166, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3297", "paidOnly": false, "status": "ac", "title": "Count Substrings That Can Be Rearranged to Contain a String I", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i", "content": "<p>You are given two strings <code>word1</code> and <code>word2</code>.</p>\n\n<p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> can be rearranged to have <code>word2</code> as a <span data-keyword=\"string-prefix\">prefix</span>.</p>\n\n<p>Return the total number of <strong>valid</strong> <span data-keyword=\"substring-nonempty\">substrings</span> of <code>word1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;bcca&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only valid substring is <code>&quot;bcca&quot;</code> which can be rearranged to <code>&quot;abcc&quot;</code> having <code>&quot;abc&quot;</code> as a prefix.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;abcabc&quot;, word2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All the substrings except substrings of size 1 and size 2 are valid.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">word1 = &quot;abcabc&quot;, word2 = &quot;aaabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= word2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>\n</ul>\n", "hints": ["Store the frequency of each character for all prefixes.", "Use Binary Search."], "exampleTestcases": "\"bcca\"\n\"abc\"\n\"abcabc\"\n\"abc\"\n\"abcabc\"\n\"aaabc\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long validSubstringCount(string word1, string word2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long validSubstringCount(String word1, String word2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validSubstringCount(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validSubstringCount(self, word1: str, word2: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long validSubstringCount(char* word1, char* word2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long ValidSubstringCount(string word1, string word2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar validSubstringCount = function(word1, word2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validSubstringCount(word1: string, word2: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function validSubstringCount($word1, $word2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validSubstringCount(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validSubstringCount(word1: String, word2: String): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int validSubstringCount(String word1, String word2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validSubstringCount(word1 string, word2 string) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef valid_substring_count(word1, word2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validSubstringCount(word1: String, word2: String): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_substring_count(word1: String, word2: String) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (valid-substring-count word1 word2)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec valid_substring_count(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nvalid_substring_count(Word1, Word2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_substring_count(word1 :: String.t, word2 :: String.t) :: integer\n  def valid_substring_count(word1, word2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-window-substring", "title": "Minimum Window Substring", "isPaidOnly": false}]}