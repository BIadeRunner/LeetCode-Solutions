{"questionId": "2314", "acRate": 67.21181746241098, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2174", "paidOnly": true, "status": "ac", "title": "Remove All Ones With Row and Column Flips II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "remove-all-ones-with-row-and-column-flips-ii", "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> <strong>binary</strong> matrix <code>grid</code>.</p>\n\n<p>In one operation, you can choose any <code>i</code> and <code>j</code> that meet the following conditions:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; m</code></li>\n\t<li><code>0 &lt;= j &lt; n</code></li>\n\t<li><code>grid[i][j] == 1</code></li>\n</ul>\n\n<p>and change the values of <strong>all</strong> cells in row <code>i</code> and column <code>j</code> to zero.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to remove all </em><code>1</code><em>&#39;s from </em><code>grid</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/02/13/image-20220213162716-1.png\" style=\"width: 709px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,1],[1,1,1],[0,1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nIn the first operation, change all cell values of row 1 and column 1 to zero.\nIn the second operation, change all cell values of row 0 and column 0 to zero.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/02/13/image-20220213162737-2.png\" style=\"width: 734px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0],[1,0,1],[0,1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nIn the first operation, change all cell values of row 1 and column 0 to zero.\nIn the second operation, change all cell values of row 2 and column 1 to zero.\nNote that we cannot perform an operation using row 1 and column 1 because grid[1][1] != 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/02/13/image-20220213162752-3.png\" style=\"width: 156px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0],[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThere are no 1&#39;s to remove so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 15</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 15</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["With the given constraints, could a brute force solution pass?", "What would a brute force solution look like?", "We can try every single possibility of choosing to do an operation on a cell with a 1 or choosing to ignore it."], "exampleTestcases": "[[1,1,1],[1,1,1],[0,1,0]]\n[[0,1,0],[1,0,1],[0,1,0]]\n[[0,0],[0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int removeOnes(vector<vector<int>>& grid) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int removeOnes(int[][] grid) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeOnes(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeOnes(self, grid: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int removeOnes(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RemoveOnes(int[][] grid) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar removeOnes = function(grid) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeOnes(grid: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function removeOnes($grid) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeOnes(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeOnes(grid: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int removeOnes(List<List<int>> grid) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func removeOnes(grid [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef remove_ones(grid)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeOnes(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_ones(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (remove-ones grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec remove_ones(Grid :: [[integer()]]) -> integer().\nremove_ones(Grid) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_ones(grid :: [[integer]]) :: integer\n  def remove_ones(grid) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "set-matrix-zeroes", "title": "Set Matrix Zeroes", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix", "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "remove-all-ones-with-row-and-column-flips", "title": "Remove All Ones With Row and Column Flips", "isPaidOnly": true}]}