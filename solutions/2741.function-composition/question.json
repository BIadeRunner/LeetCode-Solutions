{"question_id": "2741", "problem_slug": "function-composition", "problem_title": "Function Composition", "content": "Given an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions.\nThe function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))).\nThe function composition of an empty list of functions is the identity function f(x) = x.\nYou may assume each function in the array accepts one integer as input and returns one integer as output.\n \nExample 1:\n\nInput: functions = [x => x + 1, x => x * x, x => 2 * x], x = 4\nOutput: 65\nExplanation:\nEvaluating from right to left ...\nStarting with x = 4.\n2 * (4) = 8\n(8) * (8) = 64\n(64) + 1 = 65\n\nExample 2:\n\nInput: functions = [x => 10 * x, x => 10 * x, x => 10 * x], x = 1\nOutput: 1000\nExplanation:\nEvaluating from right to left ...\n10 * (1) = 10\n10 * (10) = 100\n10 * (100) = 1000\n\nExample 3:\n\nInput: functions = [], x = 42\nOutput: 42\nExplanation:\nThe composition of zero functions is the identity function\n \nConstraints:\n\n-1000 <= x <= 1000\n0 <= functions.length <= 1000\nall functions accept and return a single integer\n\n", "hints": ["Start by returning a function that takes in a number and returns a number.", "Call each of the functions in the correct order. Each time passing the output of the previous function into the next function."], "exampleTestcases": "[x => x + 1, x => x * x, x => 2 * x]\n4\n[x => 10 * x, x => 10 * x, x => 10 * x]\n1\n[]\n42", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Function[]} functions\n * @return {Function}\n */\nvar compose = function(functions) {\n    \n    return function(x) {\n        \n    }\n};\n\n/**\n * const fn = compose([x => x + 1, x => 2 * x])\n * fn(4) // 9\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type F = (x: number) => number;\n\nfunction compose(functions: F[]): F {\n    \n    return function(x) {\n        \n    }\n};\n\n/**\n * const fn = compose([x => x + 1, x => 2 * x])\n * fn(4) // 9\n */"}}}