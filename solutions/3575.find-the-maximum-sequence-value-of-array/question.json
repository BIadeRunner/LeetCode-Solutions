{"question_id": "3575", "problem_slug": "find-the-maximum-sequence-value-of-array", "problem_title": "Find the Maximum Sequence Value of Array", "content": "You are given an integer array nums and a positive integer k.\nThe value of a sequence seq of size 2 * x is defined as:\n\n(seq[0] OR seq[1] OR ... OR seq[x - 1]) XOR (seq[x] OR seq[x + 1] OR ... OR seq[2 * x - 1]).\n\nReturn the maximum value of any subsequence of nums having size 2 * k.\n \nExample 1:\n\nInput: nums = [2,6,7], k = 1\nOutput: 5\nExplanation:\nThe subsequence [2, 7] has the maximum value of 2 XOR 7 = 5.\n\nExample 2:\n\nInput: nums = [4,2,5,6,7], k = 2\nOutput: 2\nExplanation:\nThe subsequence [4, 5, 6, 7] has the maximum value of (4 OR 5) XOR (6 OR 7) = 2.\n\n \nConstraints:\n\n2 <= nums.length <= 400\n1 <= nums[i] < 27\n1 <= k <= nums.length / 2\n\n", "hints": ["Find all the possible <code>OR</code> till each <code>i</code> with <code>k</code> elements backward and forward."], "exampleTestcases": "[2,6,7]\n1\n[4,2,5,6,7]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxValue(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxValue(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxValue(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxValue(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxValue(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxValue(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxValue = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxValue(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxValue($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxValue(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxValue(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxValue(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxValue(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_value(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxValue(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_value(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-value nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_value(Nums :: [integer()], K :: integer()) -> integer().\nmax_value(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_value(nums :: [integer], k :: integer) :: integer\n  def max_value(nums, k) do\n    \n  end\nend"}}}