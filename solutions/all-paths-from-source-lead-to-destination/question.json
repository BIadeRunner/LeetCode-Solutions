{"questionId": "511", "acRate": 37.318370788150126, "difficulty": "Medium", "freqBar": 23.79555447189352, "frontendQuestionId": "1059", "paidOnly": true, "status": "ac", "title": "All Paths from Source Lead to Destination", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}], "titleSlug": "all-paths-from-source-lead-to-destination", "content": "<p>Given the <code>edges</code> of a directed graph where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>, and two nodes <code>source</code> and <code>destination</code> of this graph, determine whether or not all paths starting from <code>source</code> eventually, end at <code>destination</code>, that is:</p>\n\n<ul>\n\t<li>At least one path exists from the <code>source</code> node to the <code>destination</code> node</li>\n\t<li>If a path exists from the <code>source</code> node to a node with no outgoing edges, then that node is equal to <code>destination</code>.</li>\n\t<li>The number of possible paths from <code>source</code> to <code>destination</code> is a finite number.</li>\n</ul>\n\n<p>Return <code>true</code> if and only if all roads from <code>source</code> lead to <code>destination</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_1.png\" style=\"width: 200px; height: 208px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is possible to reach and get stuck on both node 1 and node 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_2.png\" style=\"width: 200px; height: 230px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/16/485_example_3.png\" style=\"width: 200px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>edges.length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= source &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= destination &lt;= n - 1</code></li>\n\t<li>The given graph may have self-loops and parallel edges.</li>\n</ul>\n", "hints": ["What if we can reach to a cycle from the source node?", "Then the answer will be false, because we eventually get trapped in the cycle forever.", "What if the we can't reach to a cycle from the source node? Then we need to ensure that from all visited nodes from source the unique node with indegree = 0 is the destination node."], "exampleTestcases": "3\n[[0,1],[0,2]]\n0\n2\n4\n[[0,1],[0,3],[1,2],[2,1]]\n0\n3\n4\n[[0,1],[0,2],[1,3],[2,3]]\n0\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool leadsToDestination(int n, vector<vector<int>>& edges, int source, int destination) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def leadsToDestination(self, n, edges, source, destination):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type source: int\n        :type destination: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def leadsToDestination(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool leadsToDestination(int n, int** edges, int edgesSize, int* edgesColSize, int source, int destination) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool LeadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} source\n * @param {number} destination\n * @return {boolean}\n */\nvar leadsToDestination = function(n, edges, source, destination) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function leadsToDestination(n: number, edges: number[][], source: number, destination: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $source\n     * @param Integer $destination\n     * @return Boolean\n     */\n    function leadsToDestination($n, $edges, $source, $destination) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func leadsToDestination(_ n: Int, _ edges: [[Int]], _ source: Int, _ destination: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun leadsToDestination(n: Int, edges: Array<IntArray>, source: Int, destination: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool leadsToDestination(int n, List<List<int>> edges, int source, int destination) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func leadsToDestination(n int, edges [][]int, source int, destination int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} source\n# @param {Integer} destination\n# @return {Boolean}\ndef leads_to_destination(n, edges, source, destination)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def leadsToDestination(n: Int, edges: Array[Array[Int]], source: Int, destination: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn leads_to_destination(n: i32, edges: Vec<Vec<i32>>, source: i32, destination: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (leads-to-destination n edges source destination)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec leads_to_destination(N :: integer(), Edges :: [[integer()]], Source :: integer(), Destination :: integer()) -> boolean().\nleads_to_destination(N, Edges, Source, Destination) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec leads_to_destination(n :: integer, edges :: [[integer]], source :: integer, destination :: integer) :: boolean\n  def leads_to_destination(n, edges, source, destination) do\n    \n  end\nend"}], "similarQuestionList": []}