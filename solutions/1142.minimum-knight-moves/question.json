{"question_id": "1142", "problem_slug": "minimum-knight-moves", "problem_title": "Minimum Knight Moves", "content": "In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].\nA knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nReturn the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.\n \nExample 1:\n\nInput: x = 2, y = 1\nOutput: 1\nExplanation: [0, 0] → [2, 1]\n\nExample 2:\n\nInput: x = 5, y = 5\nOutput: 4\nExplanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]\n\n \nConstraints:\n\n-300 <= x, y <= 300\n0 <= |x| + |y| <= 300\n\n", "hints": ["You can simulate the movements since the limits are low.", "Is there a search algorithm applicable to this problem?", "Since we want the minimum number of moves, we can use Breadth First Search."], "exampleTestcases": "2\n1\n5\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minKnightMoves(int x, int y) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minKnightMoves(int x, int y) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minKnightMoves(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minKnightMoves(self, x: int, y: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minKnightMoves(int x, int y) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinKnightMoves(int x, int y) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minKnightMoves = function(x, y) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minKnightMoves(x: number, y: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function minKnightMoves($x, $y) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minKnightMoves(_ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minKnightMoves(x: Int, y: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minKnightMoves(int x, int y) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minKnightMoves(x int, y int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef min_knight_moves(x, y)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minKnightMoves(x: Int, y: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_knight_moves(x: i32, y: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-knight-moves x y)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_knight_moves(X :: integer(), Y :: integer()) -> integer().\nmin_knight_moves(X, Y) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_knight_moves(x :: integer, y :: integer) :: integer\n  def min_knight_moves(x, y) do\n    \n  end\nend"}}}