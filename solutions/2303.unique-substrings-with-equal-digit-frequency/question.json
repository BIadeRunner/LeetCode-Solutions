{"questionId": "2303", "acRate": 60.30550324335635, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2168", "paidOnly": true, "status": "ac", "title": "Unique Substrings With Equal Digit Frequency", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Rolling Hash", "id": "VG9waWNUYWdOb2RlOjU2NTk4", "slug": "rolling-hash"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Hash Function", "id": "VG9waWNUYWdOb2RlOjYxMDY1", "slug": "hash-function"}], "titleSlug": "unique-substrings-with-equal-digit-frequency", "content": "Given a digit string <code>s</code>, return <em>the number of <strong>unique substrings </strong>of </em><code>s</code><em> where every digit appears the same number of times.</em>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1212&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The substrings that meet the requirements are &quot;1&quot;, &quot;2&quot;, &quot;12&quot;, &quot;21&quot;, &quot;1212&quot;.\nNote that although the substring &quot;12&quot; appears twice, it is only counted once.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12321&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The substrings that meet the requirements are &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;12&quot;, &quot;23&quot;, &quot;32&quot;, &quot;21&quot;, &quot;123&quot;, &quot;321&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of digits.</li>\n</ul>\n", "hints": ["With the constraints, could we try every substring?", "Yes, checking every substring has runtime O(n^2), which will pass.", "How can we make sure we only count unique substrings?", "Use a set to store previously counted substrings. Hashing a string s of length m takes O(m) time. Is there a fast way to compute the hash of s if we know the hash of s[0..m - 2]?", "Use a rolling hash."], "exampleTestcases": "\"1212\"\n\"12321\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int equalDigitFrequency(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int equalDigitFrequency(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def equalDigitFrequency(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def equalDigitFrequency(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int equalDigitFrequency(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int EqualDigitFrequency(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar equalDigitFrequency = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function equalDigitFrequency(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function equalDigitFrequency($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func equalDigitFrequency(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun equalDigitFrequency(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int equalDigitFrequency(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func equalDigitFrequency(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef equal_digit_frequency(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def equalDigitFrequency(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn equal_digit_frequency(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (equal-digit-frequency s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec equal_digit_frequency(S :: unicode:unicode_binary()) -> integer().\nequal_digit_frequency(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec equal_digit_frequency(s :: String.t) :: integer\n  def equal_digit_frequency(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "number-of-equal-count-substrings", "title": "Number of Equal Count Substrings", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "substrings-that-begin-and-end-with-the-same-letter", "title": "Substrings That Begin and End With the Same Letter", "isPaidOnly": true}]}