{"question_id": "2303", "problem_slug": "unique-substrings-with-equal-digit-frequency", "problem_title": "Unique Substrings With Equal Digit Frequency", "content": "Given a digit string s, return the number of unique substrings of s where every digit appears the same number of times.\n \nExample 1:\n\nInput: s = \"1212\"\nOutput: 5\nExplanation: The substrings that meet the requirements are \"1\", \"2\", \"12\", \"21\", \"1212\".\nNote that although the substring \"12\" appears twice, it is only counted once.\n\nExample 2:\n\nInput: s = \"12321\"\nOutput: 9\nExplanation: The substrings that meet the requirements are \"1\", \"2\", \"3\", \"12\", \"23\", \"32\", \"21\", \"123\", \"321\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of digits.\n\n", "hints": ["With the constraints, could we try every substring?", "Yes, checking every substring has runtime O(n^2), which will pass.", "How can we make sure we only count unique substrings?", "Use a set to store previously counted substrings. Hashing a string s of length m takes O(m) time. Is there a fast way to compute the hash of s if we know the hash of s[0..m - 2]?", "Use a rolling hash."], "exampleTestcases": "\"1212\"\n\"12321\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int equalDigitFrequency(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int equalDigitFrequency(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def equalDigitFrequency(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def equalDigitFrequency(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int equalDigitFrequency(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int EqualDigitFrequency(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar equalDigitFrequency = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function equalDigitFrequency(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function equalDigitFrequency($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func equalDigitFrequency(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun equalDigitFrequency(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int equalDigitFrequency(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func equalDigitFrequency(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef equal_digit_frequency(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def equalDigitFrequency(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn equal_digit_frequency(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (equal-digit-frequency s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec equal_digit_frequency(S :: unicode:unicode_binary()) -> integer().\nequal_digit_frequency(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec equal_digit_frequency(s :: String.t) :: integer\n  def equal_digit_frequency(s) do\n    \n  end\nend"}}}