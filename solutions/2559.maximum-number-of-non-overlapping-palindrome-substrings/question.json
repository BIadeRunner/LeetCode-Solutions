{"question_id": "2559", "problem_slug": "maximum-number-of-non-overlapping-palindrome-substrings", "problem_title": "Maximum Number of Non-overlapping Palindrome Substrings", "content": "You are given a string s and a positive integer k.\nSelect a set of non-overlapping substrings from the string s that satisfy the following conditions:\n\nThe length of each substring is at least k.\nEach substring is a palindrome.\n\nReturn the maximum number of substrings in an optimal selection.\nA substring is a contiguous sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"abaccdbbd\", k = 3\nOutput: 2\nExplanation: We can select the substrings underlined in s = \"abaccdbbd\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n\nExample 2:\n\nInput: s = \"adbcda\", k = 2\nOutput: 0\nExplanation: There is no palindrome substring of length at least 2 in the string.\n\n \nConstraints:\n\n1 <= k <= s.length <= 2000\ns consists of lowercase English letters.\n\n", "hints": ["Try to use dynamic programming to solve the problem.", "let dp[i] be the answer for the prefix s[0…i].", "The final answer to the problem will be dp[n-1]. How do you compute this dp?"], "exampleTestcases": "\"abaccdbbd\"\n3\n\"adbcda\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxPalindromes(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxPalindromes(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxPalindromes(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxPalindromes(self, s: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxPalindromes(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxPalindromes(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxPalindromes = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxPalindromes(s: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPalindromes($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxPalindromes(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxPalindromes(s: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxPalindromes(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxPalindromes(s string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_palindromes(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxPalindromes(s: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_palindromes(s: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-palindromes s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_palindromes(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_palindromes(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_palindromes(s :: String.t, k :: integer) :: integer\n  def max_palindromes(s, k) do\n    \n  end\nend"}}}