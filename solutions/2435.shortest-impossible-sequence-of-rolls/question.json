{"question_id": "2435", "problem_slug": "shortest-impossible-sequence-of-rolls", "problem_title": "Shortest Impossible Sequence of Rolls", "content": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].\nReturn the length of the shortest sequence of rolls so that there's no such subsequence in rolls.\nA sequence of rolls of length len is the result of rolling a k sided dice len times.\n \nExample 1:\n\nInput: rolls = [4,2,1,2,3,3,2,4,1], k = 4\nOutput: 3\nExplanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls.\nExample 2:\n\nInput: rolls = [1,1,2,2], k = 2\nOutput: 2\nExplanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.\n\nExample 3:\n\nInput: rolls = [1,1,3,2,2,2,3,3], k = 4\nOutput: 1\nExplanation: The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest.\n\n \nConstraints:\n\nn == rolls.length\n1 <= n <= 105\n1 <= rolls[i] <= k <= 105\n\n", "hints": ["How can you find the minimum index such that all sequences of length 1 can be formed from the start until that index?", "Starting from the previous minimum index, what is the next index such that all sequences of length 2 can be formed?", "Can you extend the idea to sequences of length 3 and more?"], "exampleTestcases": "[4,2,1,2,3,3,2,4,1]\n4\n[1,1,2,2]\n2\n[1,1,3,2,2,2,3,3]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestSequence(vector<int>& rolls, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shortestSequence(int[] rolls, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestSequence(self, rolls, k):\n        \"\"\"\n        :type rolls: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestSequence(self, rolls: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shortestSequence(int* rolls, int rollsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShortestSequence(int[] rolls, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} rolls\n * @param {number} k\n * @return {number}\n */\nvar shortestSequence = function(rolls, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestSequence(rolls: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rolls\n     * @param Integer $k\n     * @return Integer\n     */\n    function shortestSequence($rolls, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestSequence(_ rolls: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestSequence(rolls: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shortestSequence(List<int> rolls, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestSequence(rolls []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} rolls\n# @param {Integer} k\n# @return {Integer}\ndef shortest_sequence(rolls, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestSequence(rolls: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_sequence(rolls: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-sequence rolls k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_sequence(Rolls :: [integer()], K :: integer()) -> integer().\nshortest_sequence(Rolls, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_sequence(rolls :: [integer], k :: integer) :: integer\n  def shortest_sequence(rolls, k) do\n    \n  end\nend"}}}