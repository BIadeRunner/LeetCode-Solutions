{"questionId": "1094", "acRate": 71.85194447917969, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1030", "paidOnly": false, "status": "ac", "title": "Matrix Cells in Distance Order", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "matrix-cells-in-distance-order", "content": "<p>You are given four integers <code>row</code>, <code>cols</code>, <code>rCenter</code>, and <code>cCenter</code>. There is a <code>rows x cols</code> matrix and you are on the cell with the coordinates <code>(rCenter, cCenter)</code>.</p>\n\n<p>Return <em>the coordinates of all cells in the matrix, sorted by their <strong>distance</strong> from </em><code>(rCenter, cCenter)</code><em> from the smallest distance to the largest distance</em>. You may return the answer in <strong>any order</strong> that satisfies this condition.</p>\n\n<p>The <strong>distance</strong> between two cells <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is <code>|r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 1, cols = 2, rCenter = 0, cCenter = 0\n<strong>Output:</strong> [[0,0],[0,1]]\n<strong>Explanation:</strong> The distances from (0, 0) to other cells are: [0,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 2, cols = 2, rCenter = 0, cCenter = 1\n<strong>Output:</strong> [[0,1],[0,0],[1,1],[1,0]]\n<strong>Explanation:</strong> The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 2, cols = 3, rCenter = 1, cCenter = 2\n<strong>Output:</strong> [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n<strong>Explanation:</strong> The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>0 &lt;= rCenter &lt; rows</code></li>\n\t<li><code>0 &lt;= cCenter &lt; cols</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "1\n2\n0\n0\n2\n2\n0\n1\n2\n3\n1\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def allCellsDistOrder(self, rows, cols, rCenter, cCenter):\n        \"\"\"\n        :type rows: int\n        :type cols: int\n        :type rCenter: int\n        :type cCenter: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** allCellsDistOrder(int rows, int cols, int rCenter, int cCenter, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] AllCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} rows\n * @param {number} cols\n * @param {number} rCenter\n * @param {number} cCenter\n * @return {number[][]}\n */\nvar allCellsDistOrder = function(rows, cols, rCenter, cCenter) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function allCellsDistOrder(rows: number, cols: number, rCenter: number, cCenter: number): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $rows\n     * @param Integer $cols\n     * @param Integer $rCenter\n     * @param Integer $cCenter\n     * @return Integer[][]\n     */\n    function allCellsDistOrder($rows, $cols, $rCenter, $cCenter) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func allCellsDistOrder(_ rows: Int, _ cols: Int, _ rCenter: Int, _ cCenter: Int) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun allCellsDistOrder(rows: Int, cols: Int, rCenter: Int, cCenter: Int): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func allCellsDistOrder(rows int, cols int, rCenter int, cCenter int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} rows\n# @param {Integer} cols\n# @param {Integer} r_center\n# @param {Integer} c_center\n# @return {Integer[][]}\ndef all_cells_dist_order(rows, cols, r_center, c_center)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def allCellsDistOrder(rows: Int, cols: Int, rCenter: Int, cCenter: Int): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn all_cells_dist_order(rows: i32, cols: i32, r_center: i32, c_center: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (all-cells-dist-order rows cols rCenter cCenter)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec all_cells_dist_order(Rows :: integer(), Cols :: integer(), RCenter :: integer(), CCenter :: integer()) -> [[integer()]].\nall_cells_dist_order(Rows, Cols, RCenter, CCenter) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec all_cells_dist_order(rows :: integer, cols :: integer, r_center :: integer, c_center :: integer) :: [[integer]]\n  def all_cells_dist_order(rows, cols, r_center, c_center) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "cells-in-a-range-on-an-excel-sheet", "title": "Cells in a Range on an Excel Sheet", "isPaidOnly": false}]}