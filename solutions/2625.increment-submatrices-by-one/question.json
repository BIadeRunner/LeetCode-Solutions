{"question_id": "2625", "problem_slug": "increment-submatrices-by-one", "problem_title": "Increment Submatrices by One", "content": "You are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes.\nYou are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:\n\nAdd 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). That is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i.\n\nReturn the matrix mat after performing every query.\n \nExample 1:\n\n\nInput: n = 3, queries = [[1,1,2,2],[0,0,1,1]]\nOutput: [[1,1,0],[1,2,1],[0,1,1]]\nExplanation: The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query.\n- In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2).\n- In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1).\n\nExample 2:\n\n\nInput: n = 2, queries = [[0,0,1,1]]\nOutput: [[1,1],[1,1]]\nExplanation: The diagram above shows the initial matrix and the matrix after the first query.\n- In the first query we add 1 to every element in the matrix.\n\n \nConstraints:\n\n1 <= n <= 500\n1 <= queries.length <= 104\n0 <= row1i <= row2i < n\n0 <= col1i <= col2i < n\n\n", "hints": ["Imagine each row as a separate array. Instead of updating the whole submatrix together, we can use prefix sum to update each row separately.", "For each query, iterate over the rows i in the range [row1, row2] and add 1 to prefix sum S[i][col1], and subtract 1 from S[i][col2 + 1].", "After doing this operation for all the queries, update each row separately with S[i][j] = S[i][j] + S[i][j - 1]."], "exampleTestcases": "3\n[[1,1,2,2],[0,0,1,1]]\n2\n[[0,0,1,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> rangeAddQueries(int n, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] rangeAddQueries(int n, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def rangeAddQueries(self, n, queries):\n        \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def rangeAddQueries(self, n: int, queries: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** rangeAddQueries(int n, int** queries, int queriesSize, int* queriesColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] RangeAddQueries(int n, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} queries\n * @return {number[][]}\n */\nvar rangeAddQueries = function(n, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rangeAddQueries(n: number, queries: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $queries\n     * @return Integer[][]\n     */\n    function rangeAddQueries($n, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func rangeAddQueries(_ n: Int, _ queries: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun rangeAddQueries(n: Int, queries: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> rangeAddQueries(int n, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func rangeAddQueries(n int, queries [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} queries\n# @return {Integer[][]}\ndef range_add_queries(n, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def rangeAddQueries(n: Int, queries: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn range_add_queries(n: i32, queries: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (range-add-queries n queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec range_add_queries(N :: integer(), Queries :: [[integer()]]) -> [[integer()]].\nrange_add_queries(N, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec range_add_queries(n :: integer, queries :: [[integer]]) :: [[integer]]\n  def range_add_queries(n, queries) do\n    \n  end\nend"}}}