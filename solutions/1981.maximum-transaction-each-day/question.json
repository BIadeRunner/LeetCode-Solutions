{"question_id": "1981", "problem_slug": "maximum-transaction-each-day", "problem_title": "Maximum Transaction Each Day", "content": "Table: Transactions\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| transaction_id | int      |\n| day            | datetime |\n| amount         | int      |\n+----------------+----------+\ntransaction_id is the column with unique values for this table.\nEach row contains information about one transaction.\n\n \nWrite a solution to report the IDs of the transactions with the maximum amount on their respective day. If in one day there are multiple such transactions, return all of them.\nReturn the result table ordered by transaction_id  in ascending order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nTransactions table:\n+----------------+--------------------+--------+\n| transaction_id | day                | amount |\n+----------------+--------------------+--------+\n| 8              | 2021-4-3 15:57:28  | 57     |\n| 9              | 2021-4-28 08:47:25 | 21     |\n| 1              | 2021-4-29 13:28:30 | 58     |\n| 5              | 2021-4-28 16:39:59 | 40     |\n| 6              | 2021-4-29 23:39:28 | 58     |\n+----------------+--------------------+--------+\nOutput: \n+----------------+\n| transaction_id |\n+----------------+\n| 1              |\n| 5              |\n| 6              |\n| 8              |\n+----------------+\nExplanation: \n\"2021-4-3\"  --> We have one transaction with ID 8, so we add 8 to the result table.\n\"2021-4-28\" --> We have two transactions with IDs 5 and 9. The transaction with ID 5 has an amount of 40, while the transaction with ID 9 has an amount of 21. We only include the transaction with ID 5 as it has the maximum amount this day.\n\"2021-4-29\" --> We have two transactions with IDs 1 and 6. Both transactions have the same amount of 58, so we include both in the result table.\nWe order the result table by transaction_id after collecting these IDs.\n\n \nFollow up: Could you solve it without using the MAX() function?\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Transactions\": [\"transaction_id\", \"day\", \"amount\"]}, \"rows\": {\"Transactions\": [[8, \"2021-4-3 15:57:28\", 57], [9, \"2021-4-28 08:47:25\", 21], [1, \"2021-4-29 13:28:30\", 58], [5, \"2021-4-28 16:39:59\", 40], [6, \"2021-4-29 23:39:28\", 58]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef find_maximum_transaction(transactions: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}