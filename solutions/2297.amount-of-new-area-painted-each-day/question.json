{"question_id": "2297", "problem_slug": "amount-of-new-area-painted-each-day", "problem_title": "Amount of New Area Painted Each Day", "content": "There is a long and thin painting that can be represented by a number line. You are given a 0-indexed 2D integer array paint of length n, where paint[i] = [starti, endi]. This means that on the ith day you need to paint the area between starti and endi.\nPainting the same area multiple times will create an uneven painting so you only want to paint each area of the painting at most once.\nReturn an integer array worklog of length n, where worklog[i] is the amount of new area that you painted on the ith day.\n \nExample 1:\n\n\nInput: paint = [[1,4],[4,7],[5,8]]\nOutput: [3,3,1]\nExplanation:\nOn day 0, paint everything between 1 and 4.\nThe amount of new area painted on day 0 is 4 - 1 = 3.\nOn day 1, paint everything between 4 and 7.\nThe amount of new area painted on day 1 is 7 - 4 = 3.\nOn day 2, paint everything between 7 and 8.\nEverything between 5 and 7 was already painted on day 1.\nThe amount of new area painted on day 2 is 8 - 7 = 1. \n\nExample 2:\n\n\nInput: paint = [[1,4],[5,8],[4,7]]\nOutput: [3,3,1]\nExplanation:\nOn day 0, paint everything between 1 and 4.\nThe amount of new area painted on day 0 is 4 - 1 = 3.\nOn day 1, paint everything between 5 and 8.\nThe amount of new area painted on day 1 is 8 - 5 = 3.\nOn day 2, paint everything between 4 and 5.\nEverything between 5 and 7 was already painted on day 1.\nThe amount of new area painted on day 2 is 5 - 4 = 1. \n\nExample 3:\n\n\nInput: paint = [[1,5],[2,4]]\nOutput: [4,0]\nExplanation:\nOn day 0, paint everything between 1 and 5.\nThe amount of new area painted on day 0 is 5 - 1 = 4.\nOn day 1, paint nothing because everything between 2 and 4 was already painted on day 0.\nThe amount of new area painted on day 1 is 0.\n\n \nConstraints:\n\n1 <= paint.length <= 105\npaint[i].length == 2\n0 <= starti < endi <= 5 * 104\n\n", "hints": ["What’s a good way to keep track of intervals that you have already painted?", "Create an array of all 1’s, and when you have painted an interval, set the values in that interval to 0.", "Using this array, how can you quickly calculate the amount of new area that you paint on a given day?", "Calculate the sum of the new array in the interval that you paint."], "exampleTestcases": "[[1,4],[4,7],[5,8]]\n[[1,4],[5,8],[4,7]]\n[[1,5],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> amountPainted(vector<vector<int>>& paint) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] amountPainted(int[][] paint) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def amountPainted(self, paint):\n        \"\"\"\n        :type paint: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def amountPainted(self, paint: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* amountPainted(int** paint, int paintSize, int* paintColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] AmountPainted(int[][] paint) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} paint\n * @return {number[]}\n */\nvar amountPainted = function(paint) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function amountPainted(paint: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $paint\n     * @return Integer[]\n     */\n    function amountPainted($paint) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func amountPainted(_ paint: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun amountPainted(paint: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> amountPainted(List<List<int>> paint) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func amountPainted(paint [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} paint\n# @return {Integer[]}\ndef amount_painted(paint)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def amountPainted(paint: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn amount_painted(paint: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (amount-painted paint)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec amount_painted(Paint :: [[integer()]]) -> [integer()].\namount_painted(Paint) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec amount_painted(paint :: [[integer]]) :: [integer]\n  def amount_painted(paint) do\n    \n  end\nend"}}}