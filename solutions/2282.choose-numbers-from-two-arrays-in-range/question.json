{"question_id": "2282", "problem_slug": "choose-numbers-from-two-arrays-in-range", "problem_title": "Choose Numbers From Two Arrays in Range", "content": "You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nA range [l, r] (inclusive) where 0 <= l <= r < n is balanced if:\n\nFor every i in the range [l, r], you pick either nums1[i] or nums2[i].\nThe sum of the numbers you pick from nums1 equals to the sum of the numbers you pick from nums2 (the sum is considered to be 0 if you pick no numbers from an array).\n\nTwo balanced ranges from [l1, r1] and [l2, r2] are considered to be different if at least one of the following is true:\n\nl1 != l2\nr1 != r2\nnums1[i] is picked in the first range, and nums2[i] is picked in the second range or vice versa for at least one i.\n\nReturn the number of different ranges that are balanced. Since the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: nums1 = [1,2,5], nums2 = [2,6,3]\nOutput: 3\nExplanation: The balanced ranges are:\n- [0, 1] where we choose nums2[0], and nums1[1].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 2 = 2.\n- [0, 2] where we choose nums1[0], nums2[1], and nums1[2].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 + 5 = 6.\n- [0, 2] where we choose nums1[0], nums1[1], and nums2[2].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 + 2 = 3.\nNote that the second and third balanced ranges are different.\nIn the second balanced range, we choose nums2[1] and in the third balanced range, we choose nums1[1].\n\nExample 2:\n\nInput: nums1 = [0,1], nums2 = [1,0]\nOutput: 4\nExplanation: The balanced ranges are:\n- [0, 0] where we choose nums1[0].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- [1, 1] where we choose nums2[1].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- [0, 1] where we choose nums1[0] and nums2[1].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- [0, 1] where we choose nums2[0] and nums1[1].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 = 1.\n\n \nConstraints:\n\nn == nums1.length == nums2.length\n1 <= n <= 100\n0 <= nums1[i], nums2[i] <= 100\n\n", "hints": ["If you know the possible sums you can get for a range [l, r], how can you use this information to calculate the possible sums you can get for a range [l, r + 1]?", "For the range [l, r], if it is possible to choose elements such that the sum of elements you picked from nums1 is x and the sum of elements you picked from nums2 is y, then (x + nums1[r + 1], y) and (x, y + nums2[r + 1]) are possible sums you can get in the range [l, r + 1].", "How can we save the possible sums obtainable at a given index so that we can reuse this information later?"], "exampleTestcases": "[1,2,5]\n[2,6,3]\n[0,1]\n[1,0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSubranges(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countSubranges(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSubranges(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSubranges(self, nums1: List[int], nums2: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countSubranges(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountSubranges(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar countSubranges = function(nums1, nums2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSubranges(nums1: number[], nums2: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function countSubranges($nums1, $nums2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSubranges(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSubranges(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countSubranges(List<int> nums1, List<int> nums2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSubranges(nums1 []int, nums2 []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef count_subranges(nums1, nums2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSubranges(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_subranges(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-subranges nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_subranges(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\ncount_subranges(Nums1, Nums2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_subranges(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def count_subranges(nums1, nums2) do\n    \n  end\nend"}}}