{"question_id": "656", "problem_slug": "coin-path", "problem_title": "Coin Path", "content": "You are given an integer array coins (1-indexed) of length n and an integer maxJump. You can jump to any index i of the array coins if coins[i] != -1 and you have to pay coins[i] when you visit index i. In addition to that, if you are currently at index i, you can only jump to any index i + k where i + k <= n and k is a value in the range [1, maxJump].\nYou are initially positioned at index 1 (coins[1] is not -1). You want to find the path that reaches index n with the minimum cost.\nReturn an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the lexicographically smallest such path. If it is not possible to reach index n, return an empty array.\nA path p1 = [Pa1, Pa2, ..., Pax] of length x is lexicographically smaller than p2 = [Pb1, Pb2, ..., Pbx] of length y, if and only if at the first j where Paj and Pbj differ, Paj < Pbj; when no such j exists, then x < y.\n \nExample 1:\nInput: coins = [1,2,4,-1,2], maxJump = 2\nOutput: [1,3,5]\nExample 2:\nInput: coins = [1,2,4,-1,2], maxJump = 1\nOutput: []\n\n \nConstraints:\n\n1 <= coins.length <= 1000\n-1 <= coins[i] <= 100\ncoins[1] != -1\n1 <= maxJump <= 100\n\n", "hints": [], "exampleTestcases": "[1,2,4,-1,2]\n2\n[1,2,4,-1,2]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> cheapestJump(vector<int>& coins, int maxJump) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> cheapestJump(int[] coins, int maxJump) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def cheapestJump(self, coins, maxJump):\n        \"\"\"\n        :type coins: List[int]\n        :type maxJump: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* cheapestJump(int* coins, int coinsSize, int maxJump, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> CheapestJump(int[] coins, int maxJump) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} coins\n * @param {number} maxJump\n * @return {number[]}\n */\nvar cheapestJump = function(coins, maxJump) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function cheapestJump(coins: number[], maxJump: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $maxJump\n     * @return Integer[]\n     */\n    function cheapestJump($coins, $maxJump) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func cheapestJump(_ coins: [Int], _ maxJump: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun cheapestJump(coins: IntArray, maxJump: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> cheapestJump(List<int> coins, int maxJump) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func cheapestJump(coins []int, maxJump int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} coins\n# @param {Integer} max_jump\n# @return {Integer[]}\ndef cheapest_jump(coins, max_jump)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def cheapestJump(coins: Array[Int], maxJump: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn cheapest_jump(coins: Vec<i32>, max_jump: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (cheapest-jump coins maxJump)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec cheapest_jump(Coins :: [integer()], MaxJump :: integer()) -> [integer()].\ncheapest_jump(Coins, MaxJump) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec cheapest_jump(coins :: [integer], max_jump :: integer) :: [integer]\n  def cheapest_jump(coins, max_jump) do\n    \n  end\nend"}}}