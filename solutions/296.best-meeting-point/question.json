{"question_id": "296", "problem_slug": "best-meeting-point", "problem_title": "Best Meeting Point", "content": "Given an m x n binary grid grid where each 1 marks the home of one friend, return the minimal total travel distance.\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\nThe distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.\n \nExample 1:\n\n\nInput: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]\nOutput: 6\nExplanation: Given three friends living at (0,0), (0,4), and (2,2).\nThe point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.\nSo return 6.\n\nExample 2:\n\nInput: grid = [[1,1]]\nOutput: 1\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\ngrid[i][j] is either 0 or 1.\nThere will be at least two friends in the grid.\n\n", "hints": ["Try to solve it in one dimension first. How can this solution apply to the two dimension case?"], "exampleTestcases": "[[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]\n[[1,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minTotalDistance(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minTotalDistance(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minTotalDistance(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minTotalDistance(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minTotalDistance(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinTotalDistance(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minTotalDistance = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minTotalDistance(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minTotalDistance($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minTotalDistance(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minTotalDistance(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minTotalDistance(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minTotalDistance(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_total_distance(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minTotalDistance(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_total_distance(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-total-distance grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_total_distance(Grid :: [[integer()]]) -> integer().\nmin_total_distance(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_total_distance(grid :: [[integer]]) :: integer\n  def min_total_distance(grid) do\n    \n  end\nend"}}}