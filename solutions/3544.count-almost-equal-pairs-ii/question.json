{"questionId": "3544", "acRate": 20.746049974260483, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3267", "paidOnly": false, "status": "ac", "title": "Count Almost Equal Pairs II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "count-almost-equal-pairs-ii", "content": "<p><strong>Attention</strong>: In this version, the number of operations that can be performed, has been increased to <strong>twice</strong>.<!-- notionvc: 278e7cb2-3b05-42fa-8ae9-65f5fd6f7585 --></p>\n\n<p>You are given an array <code>nums</code> consisting of positive integers.</p>\n\n<p>We call two integers <code>x</code> and <code>y</code> <strong>almost equal</strong> if both integers can become equal after performing the following operation <strong>at most <u>twice</u></strong>:</p>\n\n<ul>\n\t<li>Choose <strong>either</strong> <code>x</code> or <code>y</code> and swap any two digits within the chosen number.</li>\n</ul>\n\n<p>Return the number of indices <code>i</code> and <code>j</code> in <code>nums</code> where <code>i &lt; j</code> such that <code>nums[i]</code> and <code>nums[j]</code> are <strong>almost equal</strong>.</p>\n\n<p><strong>Note</strong> that it is allowed for an integer to have leading zeros after performing an operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1023,2310,2130,213]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The almost equal pairs of elements are:</p>\n\n<ul>\n\t<li>1023 and 2310. By swapping the digits 1 and 2, and then the digits 0 and 3 in 1023, you get 2310.</li>\n\t<li>1023 and 213. By swapping the digits 1 and 0, and then the digits 1 and 2 in 1023, you get 0213, which is 213.</li>\n\t<li>2310 and 213. By swapping the digits 2 and 0, and then the digits 3 and 2 in 2310, you get 0213, which is 213.</li>\n\t<li>2310 and 2130. By swapping the digits 3 and 1 in 2310, you get 2130.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,10,100]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The almost equal pairs of elements are:</p>\n\n<ul>\n\t<li>1 and 10. By swapping the digits 1 and 0 in 10, you get 01 which is 1.</li>\n\t<li>1 and 100. By swapping the second 0 with the digit 1 in 100, you get 001, which is 1.</li>\n\t<li>10 and 100. By swapping the first 0 with the digit 1 in 100, you get 010, which is 10.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>7</sup></code></li>\n</ul>\n", "hints": ["For each element, find all possible integers we can get by applying the operations.", "Store the frequencies of all the integers in a hashmap."], "exampleTestcases": "[1023,2310,2130,213]\n[1,10,100]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPairs(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPairs(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countPairs(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPairs(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countPairs = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPairs(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countPairs($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPairs(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPairs(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countPairs(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countPairs(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_pairs(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPairs(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_pairs(Nums :: [integer()]) -> integer().\ncount_pairs(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_pairs(nums :: [integer]) :: integer\n  def count_pairs(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "find-the-occurrence-of-first-almost-equal-substring", "title": "Find the Occurrence of First Almost Equal Substring", "isPaidOnly": false}]}