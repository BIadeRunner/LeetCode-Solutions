{"question_id": "3544", "problem_slug": "count-almost-equal-pairs-ii", "problem_title": "Count Almost Equal Pairs II", "content": "Attention: In this version, the number of operations that can be performed, has been increased to twice.\nYou are given an array nums consisting of positive integers.\nWe call two integers x and y almost equal if both integers can become equal after performing the following operation at most twice:\n\nChoose either x or y and swap any two digits within the chosen number.\n\nReturn the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.\nNote that it is allowed for an integer to have leading zeros after performing an operation.\n \nExample 1:\n\nInput: nums = [1023,2310,2130,213]\nOutput: 4\nExplanation:\nThe almost equal pairs of elements are:\n\n1023 and 2310. By swapping the digits 1 and 2, and then the digits 0 and 3 in 1023, you get 2310.\n1023 and 213. By swapping the digits 1 and 0, and then the digits 1 and 2 in 1023, you get 0213, which is 213.\n2310 and 213. By swapping the digits 2 and 0, and then the digits 3 and 2 in 2310, you get 0213, which is 213.\n2310 and 2130. By swapping the digits 3 and 1 in 2310, you get 2130.\n\n\nExample 2:\n\nInput: nums = [1,10,100]\nOutput: 3\nExplanation:\nThe almost equal pairs of elements are:\n\n1 and 10. By swapping the digits 1 and 0 in 10, you get 01 which is 1.\n1 and 100. By swapping the second 0 with the digit 1 in 100, you get 001, which is 1.\n10 and 100. By swapping the first 0 with the digit 1 in 100, you get 010, which is 10.\n\n\n \nConstraints:\n\n2 <= nums.length <= 5000\n1 <= nums[i] < 107\n\n", "hints": ["For each element, find all possible integers we can get by applying the operations.", "Store the frequencies of all the integers in a hashmap."], "exampleTestcases": "[1023,2310,2130,213]\n[1,10,100]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPairs(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countPairs(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countPairs(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountPairs(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countPairs = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countPairs(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countPairs($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countPairs(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countPairs(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countPairs(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countPairs(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_pairs(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countPairs(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_pairs(Nums :: [integer()]) -> integer().\ncount_pairs(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_pairs(nums :: [integer]) :: integer\n  def count_pairs(nums) do\n    \n  end\nend"}}}