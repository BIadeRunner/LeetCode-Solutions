{"questionId": "2465", "acRate": 38.06700741856404, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2381", "paidOnly": false, "status": "ac", "title": "Shifting Letters II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "shifting-letters-ii", "content": "<p>You are given a string <code>s</code> of lowercase English letters and a 2D integer array <code>shifts</code> where <code>shifts[i] = [start<sub>i</sub>, end<sub>i</sub>, direction<sub>i</sub>]</code>. For every <code>i</code>, <strong>shift</strong> the characters in <code>s</code> from the index <code>start<sub>i</sub></code> to the index <code>end<sub>i</sub></code> (<strong>inclusive</strong>) forward if <code>direction<sub>i</sub> = 1</code>, or shift the characters backward if <code>direction<sub>i</sub> = 0</code>.</p>\n\n<p>Shifting a character <strong>forward</strong> means replacing it with the <strong>next</strong> letter in the alphabet (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>). Similarly, shifting a character <strong>backward</strong> means replacing it with the <strong>previous</strong> letter in the alphabet (wrapping around so that <code>&#39;a&#39;</code> becomes <code>&#39;z&#39;</code>).</p>\n\n<p>Return <em>the final string after all such shifts to </em><code>s</code><em> are applied</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, shifts = [[0,1,0],[1,2,1],[0,2,1]]\n<strong>Output:</strong> &quot;ace&quot;\n<strong>Explanation:</strong> Firstly, shift the characters from index 0 to index 1 backward. Now s = &quot;zac&quot;.\nSecondly, shift the characters from index 1 to index 2 forward. Now s = &quot;zbd&quot;.\nFinally, shift the characters from index 0 to index 2 forward. Now s = &quot;ace&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dztz&quot;, shifts = [[0,0,0],[1,1,1]]\n<strong>Output:</strong> &quot;catz&quot;\n<strong>Explanation:</strong> Firstly, shift the characters from index 0 to index 0 backward. Now s = &quot;cztz&quot;.\nFinally, shift the characters from index 1 to index 1 forward. Now s = &quot;catz&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, shifts.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>shifts[i].length == 3</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; s.length</code></li>\n\t<li><code>0 &lt;= direction<sub>i</sub> &lt;= 1</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n", "hints": ["Instead of shifting every character in each shift, could you keep track of which characters are shifted and by how much across all shifts?", "Try marking the start and ends of each shift, then perform a prefix sum of the shifts."], "exampleTestcases": "\"abc\"\n[[0,1,0],[1,2,1],[0,2,1]]\n\"dztz\"\n[[0,0,0],[1,1,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shiftingLetters(string s, vector<vector<int>>& shifts) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shiftingLetters(String s, int[][] shifts) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shiftingLetters(self, s, shifts):\n        \"\"\"\n        :type s: str\n        :type shifts: List[List[int]]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* shiftingLetters(char* s, int** shifts, int shiftsSize, int* shiftsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShiftingLetters(string s, int[][] shifts) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number[][]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(s, shifts) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shiftingLetters(s: string, shifts: number[][]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $shifts\n     * @return String\n     */\n    function shiftingLetters($s, $shifts) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shiftingLetters(_ s: String, _ shifts: [[Int]]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shiftingLetters(s: String, shifts: Array<IntArray>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String shiftingLetters(String s, List<List<int>> shifts) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func shiftingLetters(s string, shifts [][]int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[][]} shifts\n# @return {String}\ndef shifting_letters(s, shifts)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shiftingLetters(s: String, shifts: Array[Array[Int]]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shifting_letters(s: String, shifts: Vec<Vec<i32>>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (shifting-letters s shifts)\n  (-> string? (listof (listof exact-integer?)) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec shifting_letters(S :: unicode:unicode_binary(), Shifts :: [[integer()]]) -> unicode:unicode_binary().\nshifting_letters(S, Shifts) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec shifting_letters(s :: String.t, shifts :: [[integer]]) :: String.t\n  def shifting_letters(s, shifts) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "the-skyline-problem", "title": "The Skyline Problem", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "range-sum-query-mutable", "title": "Range Sum Query - Mutable", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "range-addition", "title": "Range Addition", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "shifting-letters", "title": "Shifting Letters", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "maximum-population-year", "title": "Maximum Population Year", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "describe-the-painting", "title": "Describe the Painting", "isPaidOnly": false}]}