{"questionId": "1100", "acRate": 62.24958869640956, "difficulty": "Medium", "freqBar": 30.52811768469609, "frontendQuestionId": "1135", "paidOnly": true, "status": "ac", "title": "Connecting Cities With Minimum Cost", "topicTags": [{"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Minimum Spanning Tree", "id": "VG9waWNUYWdOb2RlOjYxMDgz", "slug": "minimum-spanning-tree"}], "titleSlug": "connecting-cities-with-minimum-cost", "content": "<p>There are <code>n</code> cities labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and an array <code>connections</code> where <code>connections[i] = [x<sub>i</sub>, y<sub>i</sub>, cost<sub>i</sub>]</code> indicates that the cost of connecting city <code>x<sub>i</sub></code> and city <code>y<sub>i</sub></code> (bidirectional connection) is <code>cost<sub>i</sub></code>.</p>\n\n<p>Return <em>the minimum <strong>cost</strong> to connect all the </em><code>n</code><em> cities such that there is at least one path between each pair of cities</em>. If it is impossible to connect all the <code>n</code> cities, return <code>-1</code>,</p>\n\n<p>The <strong>cost</strong> is the sum of the connections&#39; costs used.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/20/1314_ex2.png\" style=\"width: 161px; height: 141px;\" />\n<pre>\n<strong>Input:</strong> n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Choosing any 2 edges will connect all cities so we choose the minimum 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/20/1314_ex1.png\" style=\"width: 136px; height: 91px;\" />\n<pre>\n<strong>Input:</strong> n = 4, connections = [[1,2,3],[3,4,4]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to connect all cities even if all edges are used.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= connections.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>connections[i].length == 3</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>0 &lt;= cost<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["What if we model the cities as a graph?", "Build a graph of cities and find the minimum spanning tree.", "You can use a variation of the Kruskal's algorithm for that.", "Sort the edges by their cost and use a union-find data structure.", "How to check all cities are connected?", "At the beginning we have n connected components, each time we connect two components the number of connected components is reduced by one. At the end we should end with only a single component otherwise return -1."], "exampleTestcases": "3\n[[1,2,5],[1,3,6],[2,3,1]]\n4\n[[1,2,3],[3,4,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(int n, vector<vector<int>>& connections) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumCost(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, n: int, connections: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumCost(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(int n, int[][] connections) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar minimumCost = function(n, connections) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumCost(n: number, connections: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function minimumCost($n, $connections) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ n: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(n: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumCost(int n, List<List<int>> connections) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumCost(n int, connections [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef minimum_cost(n, connections)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumCost(n: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-cost n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_cost(N :: integer(), Connections :: [[integer()]]) -> integer().\nminimum_cost(N, Connections) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, connections :: [[integer]]) :: integer\n  def minimum_cost(n, connections) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "isPaidOnly": true}]}