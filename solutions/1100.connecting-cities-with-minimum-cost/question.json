{"question_id": "1100", "problem_slug": "connecting-cities-with-minimum-cost", "problem_title": "Connecting Cities With Minimum Cost", "content": "There are n cities labeled from 1 to n. You are given the integer n and an array connections where connections[i] = [xi, yi, costi] indicates that the cost of connecting city xi and city yi (bidirectional connection) is costi.\nReturn the minimum cost to connect all the n cities such that there is at least one path between each pair of cities. If it is impossible to connect all the n cities, return -1,\nThe cost is the sum of the connections' costs used.\n \nExample 1:\n\n\nInput: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]\nOutput: 6\nExplanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.\n\nExample 2:\n\n\nInput: n = 4, connections = [[1,2,3],[3,4,4]]\nOutput: -1\nExplanation: There is no way to connect all cities even if all edges are used.\n\n \nConstraints:\n\n1 <= n <= 104\n1 <= connections.length <= 104\nconnections[i].length == 3\n1 <= xi, yi <= n\nxi != yi\n0 <= costi <= 105\n\n", "hints": ["What if we model the cities as a graph?", "Build a graph of cities and find the minimum spanning tree.", "You can use a variation of the Kruskal's algorithm for that.", "Sort the edges by their cost and use a union-find data structure.", "How to check all cities are connected?", "At the beginning we have n connected components, each time we connect two components the number of connected components is reduced by one. At the end we should end with only a single component otherwise return -1."], "exampleTestcases": "3\n[[1,2,5],[1,3,6],[2,3,1]]\n4\n[[1,2,3],[3,4,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(int n, vector<vector<int>>& connections) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumCost(int n, int[][] connections) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, n: int, connections: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumCost(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(int n, int[][] connections) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar minimumCost = function(n, connections) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCost(n: number, connections: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer\n     */\n    function minimumCost($n, $connections) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ n: Int, _ connections: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(n: Int, connections: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumCost(int n, List<List<int>> connections) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCost(n int, connections [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer}\ndef minimum_cost(n, connections)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCost(n: Int, connections: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(n: i32, connections: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-cost n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_cost(N :: integer(), Connections :: [[integer()]]) -> integer().\nminimum_cost(N, Connections) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, connections :: [[integer]]) :: integer\n  def minimum_cost(n, connections) do\n    \n  end\nend"}}}