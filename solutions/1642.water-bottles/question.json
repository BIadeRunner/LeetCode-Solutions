{"question_id": "1642", "problem_slug": "water-bottles", "problem_title": "Water Bottles", "content": "There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.\nThe operation of drinking a full water bottle turns it into an empty bottle.\nGiven the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.\n \nExample 1:\n\n\nInput: numBottles = 9, numExchange = 3\nOutput: 13\nExplanation: You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.\n\nExample 2:\n\n\nInput: numBottles = 15, numExchange = 4\nOutput: 19\nExplanation: You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19.\n\n \nConstraints:\n\n1 <= numBottles <= 100\n2 <= numExchange <= 100\n\n", "hints": ["Simulate the process until there are not enough empty bottles for even one full bottle of water."], "exampleTestcases": "9\n3\n15\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numWaterBottles(int numBottles, int numExchange) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numWaterBottles(int numBottles, int numExchange) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numWaterBottles(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numWaterBottles(int numBottles, int numExchange) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumWaterBottles(int numBottles, int numExchange) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar numWaterBottles = function(numBottles, numExchange) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numWaterBottles(numBottles: number, numExchange: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function numWaterBottles($numBottles, $numExchange) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numWaterBottles(_ numBottles: Int, _ numExchange: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numWaterBottles(numBottles: Int, numExchange: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numWaterBottles(int numBottles, int numExchange) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numWaterBottles(numBottles int, numExchange int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef num_water_bottles(num_bottles, num_exchange)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numWaterBottles(numBottles: Int, numExchange: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_water_bottles(num_bottles: i32, num_exchange: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-water-bottles numBottles numExchange)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_water_bottles(NumBottles :: integer(), NumExchange :: integer()) -> integer().\nnum_water_bottles(NumBottles, NumExchange) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_water_bottles(num_bottles :: integer, num_exchange :: integer) :: integer\n  def num_water_bottles(num_bottles, num_exchange) do\n    \n  end\nend"}}}