{"question_id": "1263", "problem_slug": "number-of-dice-rolls-with-target-sum", "problem_title": "Number of Dice Rolls With Target Sum", "content": "You have n dice, and each dice has k faces numbered from 1 to k.\nGiven three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 1, k = 6, target = 3\nOutput: 1\nExplanation: You throw one die with 6 faces.\nThere is only one way to get a sum of 3.\n\nExample 2:\n\nInput: n = 2, k = 6, target = 7\nOutput: 6\nExplanation: You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n\nExample 3:\n\nInput: n = 30, k = 30, target = 500\nOutput: 222616187\nExplanation: The answer must be returned modulo 109 + 7.\n\n \nConstraints:\n\n1 <= n, k <= 30\n1 <= target <= 1000\n\n", "hints": ["Use dynamic programming.  The states are how many dice are remaining, and what sum total you have rolled so far."], "exampleTestcases": "1\n6\n3\n2\n6\n7\n30\n30\n500", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numRollsToTarget(int n, int k, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numRollsToTarget(int n, int k, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numRollsToTarget(self, n, k, target):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numRollsToTarget(self, n: int, k: int, target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numRollsToTarget(int n, int k, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumRollsToTarget(int n, int k, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} target\n * @return {number}\n */\nvar numRollsToTarget = function(n, k, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numRollsToTarget(n: number, k: number, target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $target\n     * @return Integer\n     */\n    function numRollsToTarget($n, $k, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numRollsToTarget(_ n: Int, _ k: Int, _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numRollsToTarget(n: Int, k: Int, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numRollsToTarget(int n, int k, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numRollsToTarget(n int, k int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} target\n# @return {Integer}\ndef num_rolls_to_target(n, k, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numRollsToTarget(n: Int, k: Int, target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_rolls_to_target(n: i32, k: i32, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-rolls-to-target n k target)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_rolls_to_target(N :: integer(), K :: integer(), Target :: integer()) -> integer().\nnum_rolls_to_target(N, K, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_rolls_to_target(n :: integer, k :: integer, target :: integer) :: integer\n  def num_rolls_to_target(n, k, target) do\n    \n  end\nend"}}}