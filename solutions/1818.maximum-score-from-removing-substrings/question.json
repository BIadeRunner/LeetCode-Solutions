{"question_id": "1818", "problem_slug": "maximum-score-from-removing-substrings", "problem_title": "Maximum Score From Removing Substrings", "content": "You are given a string s and two integers x and y. You can perform two types of operations any number of times.\n\nRemove substring \"ab\" and gain x points.\n\n\t\nFor example, when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\".\n\n\nRemove substring \"ba\" and gain y points.\n\t\nFor example, when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\".\n\n\n\nReturn the maximum points you can gain after applying the above operations on s.\n \nExample 1:\n\nInput: s = \"cdbcbbaaabab\", x = 4, y = 5\nOutput: 19\nExplanation:\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.\nExample 2:\n\nInput: s = \"aabbaaxybbaabb\", x = 5, y = 4\nOutput: 20\n\n \nConstraints:\n\n1 <= s.length <= 105\n1 <= x, y <= 104\ns consists of lowercase English letters.\n\n", "hints": ["Note that it is always more optimal to take one type of substring before another", "You can use a stack to handle erasures"], "exampleTestcases": "\"cdbcbbaaabab\"\n4\n5\n\"aabbaaxybbaabb\"\n5\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumGain(string s, int x, int y) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumGain(String s, int x, int y) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumGain(self, s, x, y):\n        \"\"\"\n        :type s: str\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumGain(char* s, int x, int y) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumGain(string s, int x, int y) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar maximumGain = function(s, x, y) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumGain(s: string, x: number, y: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function maximumGain($s, $x, $y) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumGain(_ s: String, _ x: Int, _ y: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumGain(s: String, x: Int, y: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumGain(String s, int x, int y) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumGain(s string, x int, y int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef maximum_gain(s, x, y)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumGain(s: String, x: Int, y: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_gain(s: String, x: i32, y: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-gain s x y)\n  (-> string? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_gain(S :: unicode:unicode_binary(), X :: integer(), Y :: integer()) -> integer().\nmaximum_gain(S, X, Y) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_gain(s :: String.t, x :: integer, y :: integer) :: integer\n  def maximum_gain(s, x, y) do\n    \n  end\nend"}}}