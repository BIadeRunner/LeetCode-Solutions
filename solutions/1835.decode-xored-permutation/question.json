{"question_id": "1835", "problem_slug": "decode-xored-permutation", "problem_title": "Decode XORed Permutation", "content": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.\n \nExample 1:\n\nInput: encoded = [3,1]\nOutput: [1,2,3]\nExplanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n\nExample 2:\n\nInput: encoded = [6,5,4,6]\nOutput: [2,4,1,5,3]\n\n \nConstraints:\n\n3 <= n < 105\nn is odd.\nencoded.length == n - 1\n\n", "hints": ["Compute the XOR of the numbers between 1 and n, and think about how it can be used. Let it be x.", "Think why n is odd.", "perm[0] = x XOR encoded[1] XOR encoded[3] XOR encoded[5] ...", "perm[i] = perm[i-1] XOR encoded[i-1]"], "exampleTestcases": "[3,1]\n[6,5,4,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> decode(vector<int>& encoded) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] decode(int[] encoded) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def decode(self, encoded):\n        \"\"\"\n        :type encoded: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* decode(int* encoded, int encodedSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] Decode(int[] encoded) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} encoded\n * @return {number[]}\n */\nvar decode = function(encoded) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function decode(encoded: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $encoded\n     * @return Integer[]\n     */\n    function decode($encoded) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func decode(_ encoded: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun decode(encoded: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> decode(List<int> encoded) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func decode(encoded []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} encoded\n# @return {Integer[]}\ndef decode(encoded)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def decode(encoded: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn decode(encoded: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (decode encoded)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec decode(Encoded :: [integer()]) -> [integer()].\ndecode(Encoded) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec decode(encoded :: [integer]) :: [integer]\n  def decode(encoded) do\n    \n  end\nend"}}}