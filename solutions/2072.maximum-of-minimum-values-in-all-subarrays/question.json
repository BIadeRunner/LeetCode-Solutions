{"questionId": "2072", "acRate": 49.943865276664, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1950", "paidOnly": true, "status": "ac", "title": "Maximum of Minimum Values in All Subarrays", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}], "titleSlug": "maximum-of-minimum-values-in-all-subarrays", "content": "<p>You are given an integer array <code>nums</code> of size <code>n</code>. You are asked to solve <code>n</code> queries for each integer <code>i</code> in the range <code>0 &lt;= i &lt; n</code>.</p>\n\n<p>To solve the <code>i<sup>th</sup></code> query:</p>\n\n<ol>\n\t<li>Find the <strong>minimum value</strong> in each possible subarray of size <code>i + 1</code> of the array <code>nums</code>.</li>\n\t<li>Find the <strong>maximum</strong> of those minimum values. This maximum is the <strong>answer</strong> to the query.</li>\n</ol>\n\n<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>ans</code> <em>of size </em><code>n</code> <em>such that </em><code>ans[i]</code> <em>is the answer to the </em><code>i<sup>th</sup></code> <em>query</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous sequence of elements in an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,4]\n<strong>Output:</strong> [4,2,1,0]\n<strong>Explanation:</strong>\ni=0:\n- The subarrays of size 1 are [0], [1], [2], [4]. The minimum values are 0, 1, 2, 4.\n- The maximum of the minimum values is 4.\ni=1:\n- The subarrays of size 2 are [0,1], [1,2], [2,4]. The minimum values are 0, 1, 2.\n- The maximum of the minimum values is 2.\ni=2:\n- The subarrays of size 3 are [0,1,2], [1,2,4]. The minimum values are 0, 1.\n- The maximum of the minimum values is 1.\ni=3:\n- There is one subarray of size 4, which is [0,1,2,4]. The minimum value is 0.\n- There is only one value, so the maximum is 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,20,50,10]\n<strong>Output:</strong> [50,20,10,10]\n<strong>Explanation:</strong>\ni=0:\n- The subarrays of size 1 are [10], [20], [50], [10]. The minimum values are 10, 20, 50, 10.\n- The maximum of the minimum values is 50.\ni=1:\n- The subarrays of size 2 are [10,20], [20,50], [50,10]. The minimum values are 10, 20, 10.\n- The maximum of the minimum values is 20.\ni=2:\n- The subarrays of size 3 are [10,20,50], [20,50,10]. The minimum values are 10, 10.\n- The maximum of the minimum values is 10.\ni=3:\n- There is one subarray of size 4, which is [10,20,50,10]. The minimum value is 10.\n- There is only one value, so the maximum is 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Imagine the array is empty, and each element is coming to its index one by one, starting with the smallest element.", "For each coming element nums[i], calculate L and R, the indices of the first smallest elements on the left and the right respectively.", "The answer of the queries from 1 to R-L+1 will be at least this element."], "exampleTestcases": "[0,1,2,4]\n[10,20,50,10]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findMaximums(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findMaximums(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaximums(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaximums(self, nums: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMaximums(int* nums, int numsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindMaximums(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaximums = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaximums(nums: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findMaximums($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaximums(_ nums: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaximums(nums: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> findMaximums(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaximums(nums []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_maximums(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaximums(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximums(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-maximums nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_maximums(Nums :: [integer()]) -> [integer()].\nfind_maximums(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_maximums(nums :: [integer]) :: [integer]\n  def find_maximums(nums) do\n    \n  end\nend"}], "similarQuestionList": []}