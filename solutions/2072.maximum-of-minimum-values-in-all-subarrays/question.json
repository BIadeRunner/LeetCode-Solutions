{"question_id": "2072", "problem_slug": "maximum-of-minimum-values-in-all-subarrays", "problem_title": "Maximum of Minimum Values in All Subarrays", "content": "You are given an integer array nums of size n. You are asked to solve n queries for each integer i in the range 0 <= i < n.\nTo solve the ith query:\n\nFind the minimum value in each possible subarray of size i + 1 of the array nums.\nFind the maximum of those minimum values. This maximum is the answer to the query.\n\nReturn a 0-indexed integer array ans of size n such that ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\n \nExample 1:\n\nInput: nums = [0,1,2,4]\nOutput: [4,2,1,0]\nExplanation:\ni=0:\n- The subarrays of size 1 are [0], [1], [2], [4]. The minimum values are 0, 1, 2, 4.\n- The maximum of the minimum values is 4.\ni=1:\n- The subarrays of size 2 are [0,1], [1,2], [2,4]. The minimum values are 0, 1, 2.\n- The maximum of the minimum values is 2.\ni=2:\n- The subarrays of size 3 are [0,1,2], [1,2,4]. The minimum values are 0, 1.\n- The maximum of the minimum values is 1.\ni=3:\n- There is one subarray of size 4, which is [0,1,2,4]. The minimum value is 0.\n- There is only one value, so the maximum is 0.\n\nExample 2:\n\nInput: nums = [10,20,50,10]\nOutput: [50,20,10,10]\nExplanation:\ni=0:\n- The subarrays of size 1 are [10], [20], [50], [10]. The minimum values are 10, 20, 50, 10.\n- The maximum of the minimum values is 50.\ni=1:\n- The subarrays of size 2 are [10,20], [20,50], [50,10]. The minimum values are 10, 20, 10.\n- The maximum of the minimum values is 20.\ni=2:\n- The subarrays of size 3 are [10,20,50], [20,50,10]. The minimum values are 10, 10.\n- The maximum of the minimum values is 10.\ni=3:\n- There is one subarray of size 4, which is [10,20,50,10]. The minimum value is 10.\n- There is only one value, so the maximum is 10.\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 105\n0 <= nums[i] <= 109\n\n", "hints": ["Imagine the array is empty, and each element is coming to its index one by one, starting with the smallest element.", "For each coming element nums[i], calculate L and R, the indices of the first smallest elements on the left and the right respectively.", "The answer of the queries from 1 to R-L+1 will be at least this element."], "exampleTestcases": "[0,1,2,4]\n[10,20,50,10]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findMaximums(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findMaximums(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMaximums(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMaximums(self, nums: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMaximums(int* nums, int numsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindMaximums(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaximums = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMaximums(nums: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findMaximums($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMaximums(_ nums: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaximums(nums: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findMaximums(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMaximums(nums []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_maximums(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMaximums(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximums(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-maximums nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_maximums(Nums :: [integer()]) -> [integer()].\nfind_maximums(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_maximums(nums :: [integer]) :: [integer]\n  def find_maximums(nums) do\n    \n  end\nend"}}}