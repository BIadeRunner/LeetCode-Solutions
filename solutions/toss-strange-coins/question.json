{"questionId": "1166", "acRate": 58.23296440972222, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1230", "paidOnly": true, "status": "ac", "title": "Toss Strange Coins", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Probability and Statistics", "id": "VG9waWNUYWdOb2RlOjYxMDc5", "slug": "probability-and-statistics"}], "titleSlug": "toss-strange-coins", "content": "<p>You have some coins.&nbsp; The <code>i</code>-th&nbsp;coin has a probability&nbsp;<code>prob[i]</code> of facing heads when tossed.</p>\n\n<p>Return the probability that the number of coins facing heads equals <code>target</code> if you toss every coin exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> prob = [0.4], target = 1\n<strong>Output:</strong> 0.40000\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> prob = [0.5,0.5,0.5,0.5,0.5], target = 0\n<strong>Output:</strong> 0.03125\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prob.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prob[i] &lt;= 1</code></li>\n\t<li><code>0 &lt;= target&nbsp;</code><code>&lt;= prob.length</code></li>\n\t<li>Answers will be accepted as correct if they are within <code>10^-5</code> of the correct answer.</li>\n</ul>\n", "hints": ["What about solving the problem with DP?", "Use DP with two states dp[pos][cnt], where pos represents the pos-th coin and cnt is the number of heads seen so far.", "You can do the transitions with a little bit math.", "For the base case, when pos == n return (cnt == target) to filter out the invalid scenarios."], "exampleTestcases": "[0.4]\n1\n[0.5,0.5,0.5,0.5,0.5]\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double probabilityOfHeads(vector<double>& prob, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double probabilityOfHeads(double[] prob, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def probabilityOfHeads(self, prob, target):\n        \"\"\"\n        :type prob: List[float]\n        :type target: int\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double probabilityOfHeads(double* prob, int probSize, int target){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double ProbabilityOfHeads(double[] prob, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} prob\n * @param {number} target\n * @return {number}\n */\nvar probabilityOfHeads = function(prob, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function probabilityOfHeads(prob: number[], target: number): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float[] $prob\n     * @param Integer $target\n     * @return Float\n     */\n    function probabilityOfHeads($prob, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func probabilityOfHeads(_ prob: [Double], _ target: Int) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun probabilityOfHeads(prob: DoubleArray, target: Int): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double probabilityOfHeads(List<double> prob, int target) {\n\n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func probabilityOfHeads(prob []float64, target int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Float[]} prob\n# @param {Integer} target\n# @return {Float}\ndef probability_of_heads(prob, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def probabilityOfHeads(prob: Array[Double], target: Int): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn probability_of_heads(prob: Vec<f64>, target: i32) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (probability-of-heads prob target)\n  (-> (listof flonum?) exact-integer? flonum?)\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec probability_of_heads(Prob :: [float()], Target :: integer()) -> float().\nprobability_of_heads(Prob, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec probability_of_heads(prob :: [float], target :: integer) :: float\n  def probability_of_heads(prob, target) do\n\n  end\nend"}], "similarQuestionList": []}