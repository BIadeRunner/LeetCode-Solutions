{"questionId": "269", "acRate": 36.05788067915386, "difficulty": "Hard", "freqBar": 68.84907625511397, "frontendQuestionId": "269", "paidOnly": true, "status": "ac", "title": "Alien Dictionary", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}], "titleSlug": "alien-dictionary", "content": "<p>There is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.</p>\n\n<p>You are given a list of strings <code>words</code> from the alien language&#39;s dictionary. Now it is claimed that the strings in <code>words</code> are <span data-keyword=\"lexicographically-smaller-string-alien\"><strong>sorted lexicographically</strong></span> by the rules of this new language.</p>\n\n<p>If this claim is incorrect, and the given arrangement of string in&nbsp;<code>words</code>&nbsp;cannot correspond to any order of letters,&nbsp;return&nbsp;<code>&quot;&quot;.</code></p>\n\n<p>Otherwise, return <em>a string of the unique letters in the new alien language sorted in <strong>lexicographically increasing order</strong> by the new language&#39;s rules</em><em>. </em>If there are multiple solutions, return<em> <strong>any of them</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;wrt&quot;,&quot;wrf&quot;,&quot;er&quot;,&quot;ett&quot;,&quot;rftt&quot;]\n<strong>Output:</strong> &quot;wertf&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;]\n<strong>Output:</strong> &quot;zx&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;,&quot;z&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> The order is invalid, so return <code>&quot;&quot;</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\n[\"z\",\"x\"]\n[\"z\",\"x\",\"z\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string alienOrder(vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String alienOrder(String[] words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def alienOrder(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* alienOrder(char** words, int wordsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string AlienOrder(string[] words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string}\n */\nvar alienOrder = function(words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function alienOrder(words: string[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function alienOrder($words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func alienOrder(_ words: [String]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun alienOrder(words: Array<String>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String alienOrder(List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func alienOrder(words []string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String}\ndef alien_order(words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def alienOrder(words: Array[String]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn alien_order(words: Vec<String>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (alien-order words)\n  (-> (listof string?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec alien_order(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nalien_order(Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec alien_order(words :: [String.t]) :: String.t\n  def alien_order(words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "course-schedule-ii", "title": "Course Schedule II", "isPaidOnly": false}]}