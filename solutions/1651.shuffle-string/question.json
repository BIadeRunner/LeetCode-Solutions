{"question_id": "1651", "problem_slug": "shuffle-string", "problem_title": "Shuffle String", "content": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.\n \nExample 1:\n\n\nInput: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.\n\nExample 2:\n\nInput: s = \"abc\", indices = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position.\n\n \nConstraints:\n\ns.length == indices.length == n\n1 <= n <= 100\ns consists of only lowercase English letters.\n0 <= indices[i] < n\nAll values of indices are unique.\n\n", "hints": ["You can create an auxiliary string t of length n.", "Assign t[indexes[i]] to s[i] for each i from 0 to n-1."], "exampleTestcases": "\"codeleet\"\n[4,5,6,7,0,2,1,3]\n\"abc\"\n[0,1,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    string restoreString(string s, vector<int>& indices) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public String restoreString(String s, int[] indices) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def restoreString(self, s, indices):\r\n        \"\"\"\r\n        :type s: str\r\n        :type indices: List[int]\r\n        :rtype: str\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def restoreString(self, s: str, indices: List[int]) -> str:"}, "C": {"langSlug": "c", "code": "char* restoreString(char* s, int* indices, int indicesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public string RestoreString(string s, int[] indices) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {string} s\r\n * @param {number[]} indices\r\n * @return {string}\r\n */\r\nvar restoreString = function(s, indices) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function restoreString(s: string, indices: number[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param String $s\r\n     * @param Integer[] $indices\r\n     * @return String\r\n     */\r\n    function restoreString($s, $indices) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func restoreString(_ s: String, _ indices: [Int]) -> String {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun restoreString(s: String, indices: IntArray): String {\r\n        \r\n    }\r\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String restoreString(String s, List<int> indices) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func restoreString(s string, indices []int) string {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\r\n# @param {Integer[]} indices\r\n# @return {String}\r\ndef restore_string(s, indices)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def restoreString(s: String, indices: Array[Int]): String = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn restore_string(s: String, indices: Vec<i32>) -> String {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (restore-string s indices)\n  (-> string? (listof exact-integer?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec restore_string(S :: unicode:unicode_binary(), Indices :: [integer()]) -> unicode:unicode_binary().\nrestore_string(S, Indices) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec restore_string(s :: String.t, indices :: [integer]) :: String.t\n  def restore_string(s, indices) do\n    \n  end\nend"}}}