{"question_id": "1176", "problem_slug": "design-a-leaderboard", "problem_title": "Design A Leaderboard", "content": "Design a Leaderboard class, which has 3 functions:\n\naddScore(playerId, score): Update the leaderboard by adding score to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given score.\ntop(K): Return the score sum of the top K players.\nreset(playerId): Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.\n\nInitially, the leaderboard is empty.\n \nExample 1:\n\nInput: \n[\"Leaderboard\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"top\",\"reset\",\"reset\",\"addScore\",\"top\"]\n[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]\nOutput: \n[null,null,null,null,null,null,73,null,null,null,141]\n\nExplanation: \nLeaderboard leaderboard = new Leaderboard ();\nleaderboard.addScore(1,73);   // leaderboard = [[1,73]];\nleaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];\nleaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];\nleaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];\nleaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];\nleaderboard.top(1);           // returns 73;\nleaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];\nleaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];\nleaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];\nleaderboard.top(3);           // returns 141 = 51 + 51 + 39;\n\n \nConstraints:\n\n1 <= playerId, K <= 10000\nIt's guaranteed that K is less than or equal to the current number of players.\n1 <= score <= 100\nThere will be at most 1000 function calls.\n\n", "hints": ["What data structure can we use to keep the players' data?", "Keep a map (dictionary) of player scores.", "For each top(K) function call, find the maximum K scores and add them."], "exampleTestcases": "[\"Leaderboard\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"top\",\"reset\",\"reset\",\"addScore\",\"top\"]\n[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Leaderboard {\npublic:\n    Leaderboard() {\n        \n    }\n    \n    void addScore(int playerId, int score) {\n        \n    }\n    \n    int top(int K) {\n        \n    }\n    \n    void reset(int playerId) {\n        \n    }\n};\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * Leaderboard* obj = new Leaderboard();\n * obj->addScore(playerId,score);\n * int param_2 = obj->top(K);\n * obj->reset(playerId);\n */"}, "Java": {"langSlug": "java", "code": "class Leaderboard {\n\n    public Leaderboard() {\n        \n    }\n    \n    public void addScore(int playerId, int score) {\n        \n    }\n    \n    public int top(int K) {\n        \n    }\n    \n    public void reset(int playerId) {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * Leaderboard obj = new Leaderboard();\n * obj.addScore(playerId,score);\n * int param_2 = obj.top(K);\n * obj.reset(playerId);\n */"}, "Python": {"langSlug": "python", "code": "class Leaderboard(object):\n\n    def __init__(self):\n        \n\n    def addScore(self, playerId, score):\n        \"\"\"\n        :type playerId: int\n        :type score: int\n        :rtype: None\n        \"\"\"\n        \n\n    def top(self, K):\n        \"\"\"\n        :type K: int\n        :rtype: int\n        \"\"\"\n        \n\n    def reset(self, playerId):\n        \"\"\"\n        :type playerId: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your Leaderboard object will be instantiated and called as such:\n# obj = Leaderboard()\n# obj.addScore(playerId,score)\n# param_2 = obj.top(K)\n# obj.reset(playerId)"}, "Python3": {"langSlug": "python3", "code": "class Leaderboard:\n\n    def __init__(self):\n        \n\n    def addScore(self, playerId: int, score: int) -> None:\n        \n\n    def top(self, K: int) -> int:\n        \n\n    def reset(self, playerId: int) -> None:\n        \n\n\n# Your Leaderboard object will be instantiated and called as such:\n# obj = Leaderboard()\n# obj.addScore(playerId,score)\n# param_2 = obj.top(K)\n# obj.reset(playerId)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Leaderboard;\n\n\nLeaderboard* leaderboardCreate() {\n    \n}\n\nvoid leaderboardAddScore(Leaderboard* obj, int playerId, int score) {\n    \n}\n\nint leaderboardTop(Leaderboard* obj, int K) {\n    \n}\n\nvoid leaderboardReset(Leaderboard* obj, int playerId) {\n    \n}\n\nvoid leaderboardFree(Leaderboard* obj) {\n    \n}\n\n/**\n * Your Leaderboard struct will be instantiated and called as such:\n * Leaderboard* obj = leaderboardCreate();\n * leaderboardAddScore(obj, playerId, score);\n \n * int param_2 = leaderboardTop(obj, K);\n \n * leaderboardReset(obj, playerId);\n \n * leaderboardFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class Leaderboard {\n\n    public Leaderboard() {\n        \n    }\n    \n    public void AddScore(int playerId, int score) {\n        \n    }\n    \n    public int Top(int K) {\n        \n    }\n    \n    public void Reset(int playerId) {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * Leaderboard obj = new Leaderboard();\n * obj.AddScore(playerId,score);\n * int param_2 = obj.Top(K);\n * obj.Reset(playerId);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar Leaderboard = function() {\n    \n};\n\n/** \n * @param {number} playerId \n * @param {number} score\n * @return {void}\n */\nLeaderboard.prototype.addScore = function(playerId, score) {\n    \n};\n\n/** \n * @param {number} K\n * @return {number}\n */\nLeaderboard.prototype.top = function(K) {\n    \n};\n\n/** \n * @param {number} playerId\n * @return {void}\n */\nLeaderboard.prototype.reset = function(playerId) {\n    \n};\n\n/** \n * Your Leaderboard object will be instantiated and called as such:\n * var obj = new Leaderboard()\n * obj.addScore(playerId,score)\n * var param_2 = obj.top(K)\n * obj.reset(playerId)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class Leaderboard {\n    constructor() {\n        \n    }\n\n    addScore(playerId: number, score: number): void {\n        \n    }\n\n    top(K: number): number {\n        \n    }\n\n    reset(playerId: number): void {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * var obj = new Leaderboard()\n * obj.addScore(playerId,score)\n * var param_2 = obj.top(K)\n * obj.reset(playerId)\n */"}, "PHP": {"langSlug": "php", "code": "class Leaderboard {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $playerId\n     * @param Integer $score\n     * @return NULL\n     */\n    function addScore($playerId, $score) {\n        \n    }\n  \n    /**\n     * @param Integer $K\n     * @return Integer\n     */\n    function top($K) {\n        \n    }\n  \n    /**\n     * @param Integer $playerId\n     * @return NULL\n     */\n    function reset($playerId) {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * $obj = Leaderboard();\n * $obj->addScore($playerId, $score);\n * $ret_2 = $obj->top($K);\n * $obj->reset($playerId);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass Leaderboard {\n\n    init() {\n        \n    }\n    \n    func addScore(_ playerId: Int, _ score: Int) {\n        \n    }\n    \n    func top(_ K: Int) -> Int {\n        \n    }\n    \n    func reset(_ playerId: Int) {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * let obj = Leaderboard()\n * obj.addScore(playerId, score)\n * let ret_2: Int = obj.top(K)\n * obj.reset(playerId)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class Leaderboard() {\n\n    fun addScore(playerId: Int, score: Int) {\n        \n    }\n\n    fun top(K: Int): Int {\n        \n    }\n\n    fun reset(playerId: Int) {\n        \n    }\n\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * var obj = Leaderboard()\n * obj.addScore(playerId,score)\n * var param_2 = obj.top(K)\n * obj.reset(playerId)\n */"}, "Dart": {"langSlug": "dart", "code": "class Leaderboard {\n\n  Leaderboard() {\n    \n  }\n  \n  void addScore(int playerId, int score) {\n    \n  }\n  \n  int top(int K) {\n    \n  }\n  \n  void reset(int playerId) {\n    \n  }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * Leaderboard obj = Leaderboard();\n * obj.addScore(playerId,score);\n * int param2 = obj.top(K);\n * obj.reset(playerId);\n */"}, "Go": {"langSlug": "golang", "code": "type Leaderboard struct {\n    \n}\n\n\nfunc Constructor() Leaderboard {\n    \n}\n\n\nfunc (this *Leaderboard) AddScore(playerId int, score int)  {\n    \n}\n\n\nfunc (this *Leaderboard) Top(K int) int {\n    \n}\n\n\nfunc (this *Leaderboard) Reset(playerId int)  {\n    \n}\n\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddScore(playerId,score);\n * param_2 := obj.Top(K);\n * obj.Reset(playerId);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class Leaderboard\n    def initialize()\n        \n    end\n\n\n=begin\n    :type player_id: Integer\n    :type score: Integer\n    :rtype: Void\n=end\n    def add_score(player_id, score)\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :rtype: Integer\n=end\n    def top(k)\n        \n    end\n\n\n=begin\n    :type player_id: Integer\n    :rtype: Void\n=end\n    def reset(player_id)\n        \n    end\n\n\nend\n\n# Your Leaderboard object will be instantiated and called as such:\n# obj = Leaderboard.new()\n# obj.add_score(player_id, score)\n# param_2 = obj.top(k)\n# obj.reset(player_id)"}, "Scala": {"langSlug": "scala", "code": "class Leaderboard() {\n\n    def addScore(playerId: Int, score: Int): Unit = {\n        \n    }\n\n    def top(K: Int): Int = {\n        \n    }\n\n    def reset(playerId: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * val obj = new Leaderboard()\n * obj.addScore(playerId,score)\n * val param_2 = obj.top(K)\n * obj.reset(playerId)\n */"}, "Rust": {"langSlug": "rust", "code": "struct Leaderboard {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Leaderboard {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_score(&self, player_id: i32, score: i32) {\n        \n    }\n    \n    fn top(&self, k: i32) -> i32 {\n        \n    }\n    \n    fn reset(&self, player_id: i32) {\n        \n    }\n}\n\n/**\n * Your Leaderboard object will be instantiated and called as such:\n * let obj = Leaderboard::new();\n * obj.add_score(playerId, score);\n * let ret_2: i32 = obj.top(K);\n * obj.reset(playerId);\n */"}, "Racket": {"langSlug": "racket", "code": "(define leaderboard%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add-score : exact-integer? exact-integer? -> void?\n    (define/public (add-score player-id score)\n      )\n    ; top : exact-integer? -> exact-integer?\n    (define/public (top k)\n      )\n    ; reset : exact-integer? -> void?\n    (define/public (reset player-id)\n      )))\n\n;; Your leaderboard% object will be instantiated and called as such:\n;; (define obj (new leaderboard%))\n;; (send obj add-score player-id score)\n;; (define param_2 (send obj top k))\n;; (send obj reset player-id)"}, "Erlang": {"langSlug": "erlang", "code": "-spec leaderboard_init_() -> any().\nleaderboard_init_() ->\n  .\n\n-spec leaderboard_add_score(PlayerId :: integer(), Score :: integer()) -> any().\nleaderboard_add_score(PlayerId, Score) ->\n  .\n\n-spec leaderboard_top(K :: integer()) -> integer().\nleaderboard_top(K) ->\n  .\n\n-spec leaderboard_reset(PlayerId :: integer()) -> any().\nleaderboard_reset(PlayerId) ->\n  .\n\n\n%% Your functions will be called as such:\n%% leaderboard_init_(),\n%% leaderboard_add_score(PlayerId, Score),\n%% Param_2 = leaderboard_top(K),\n%% leaderboard_reset(PlayerId),\n\n%% leaderboard_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Leaderboard do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec add_score(player_id :: integer, score :: integer) :: any\n  def add_score(player_id, score) do\n    \n  end\n\n  @spec top(k :: integer) :: integer\n  def top(k) do\n    \n  end\n\n  @spec reset(player_id :: integer) :: any\n  def reset(player_id) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Leaderboard.init_()\n# Leaderboard.add_score(player_id, score)\n# param_2 = Leaderboard.top(k)\n# Leaderboard.reset(player_id)\n\n# Leaderboard.init_ will be called before every test case, in which you can do some necessary initializations."}}}