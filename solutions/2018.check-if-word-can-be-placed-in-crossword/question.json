{"questionId": "2146", "acRate": 49.88758752114425, "difficulty": "Medium", "freqBar": 66.8770982001365, "frontendQuestionId": "2018", "paidOnly": false, "status": "ac", "title": "Check if Word Can Be Placed In Crossword", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "check-if-word-can-be-placed-in-crossword", "content": "<p>You are given an <code>m x n</code> matrix <code>board</code>, representing the<strong> current </strong>state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), <code>&#39; &#39;</code> to represent any <strong>empty </strong>cells, and <code>&#39;#&#39;</code> to represent any <strong>blocked</strong> cells.</p>\n\n<p>A word can be placed<strong> horizontally</strong> (left to right <strong>or</strong> right to left) or <strong>vertically</strong> (top to bottom <strong>or</strong> bottom to top) in the board if:</p>\n\n<ul>\n\t<li>It does not occupy a cell containing the character <code>&#39;#&#39;</code>.</li>\n\t<li>The cell each letter is placed in must either be <code>&#39; &#39;</code> (empty) or <strong>match</strong> the letter already on the <code>board</code>.</li>\n\t<li>There must not be any empty cells <code>&#39; &#39;</code> or other lowercase letters <strong>directly left or right</strong><strong> </strong>of the word if the word was placed <strong>horizontally</strong>.</li>\n\t<li>There must not be any empty cells <code>&#39; &#39;</code> or other lowercase letters <strong>directly above or below</strong> the word if the word was placed <strong>vertically</strong>.</li>\n</ul>\n\n<p>Given a string <code>word</code>, return <code>true</code><em> if </em><code>word</code><em> can be placed in </em><code>board</code><em>, or </em><code>false</code><em> <strong>otherwise</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex1-1.png\" style=\"width: 478px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;#&quot;, &quot; &quot;, &quot;#&quot;], [&quot; &quot;, &quot; &quot;, &quot;#&quot;], [&quot;#&quot;, &quot;c&quot;, &quot; &quot;]], word = &quot;abc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The word &quot;abc&quot; can be placed as shown above (top to bottom).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex2-1.png\" style=\"width: 180px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot; &quot;, &quot;#&quot;, &quot;a&quot;], [&quot; &quot;, &quot;#&quot;, &quot;c&quot;], [&quot; &quot;, &quot;#&quot;, &quot;a&quot;]], word = &quot;ac&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to place the word because there will always be a space/letter above or below it.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/04/crossword-ex3-1.png\" style=\"width: 478px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;#&quot;, &quot; &quot;, &quot;#&quot;], [&quot; &quot;, &quot; &quot;, &quot;#&quot;], [&quot;#&quot;, &quot; &quot;, &quot;c&quot;]], word = &quot;ca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The word &quot;ca&quot; can be placed as shown above (right to left). \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>board[i][j]</code> will be <code>&#39; &#39;</code>, <code>&#39;#&#39;</code>, or a lowercase English letter.</li>\n\t<li><code>1 &lt;= word.length &lt;= max(m, n)</code></li>\n\t<li><code>word</code> will contain only lowercase English letters.</li>\n</ul>\n", "hints": ["Check all possible placements for the word.", "There is a limited number of places where a word can start."], "exampleTestcases": "[[\"#\",\" \",\"#\"],[\" \",\" \",\"#\"],[\"#\",\"c\",\" \"]]\n\"abc\"\n[[\" \",\"#\",\"a\"],[\" \",\"#\", \"c\"],[\" \",\"#\",\"a\"]]\n\"ac\"\n[[\"#\",\" \",\"#\"],[\" \",\" \",\"#\"],[\"#\",\" \",\"c\"]]\n\"ca\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool placeWordInCrossword(vector<vector<char>>& board, string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean placeWordInCrossword(char[][] board, String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def placeWordInCrossword(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool placeWordInCrossword(char** board, int boardSize, int* boardColSize, char* word) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool PlaceWordInCrossword(char[][] board, string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar placeWordInCrossword = function(board, word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function placeWordInCrossword(board: string[][], word: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String $word\n     * @return Boolean\n     */\n    function placeWordInCrossword($board, $word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func placeWordInCrossword(_ board: [[Character]], _ word: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun placeWordInCrossword(board: Array<CharArray>, word: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool placeWordInCrossword(List<List<String>> board, String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func placeWordInCrossword(board [][]byte, word string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} board\n# @param {String} word\n# @return {Boolean}\ndef place_word_in_crossword(board, word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def placeWordInCrossword(board: Array[Array[Char]], word: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn place_word_in_crossword(board: Vec<Vec<char>>, word: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (place-word-in-crossword board word)\n  (-> (listof (listof char?)) string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec place_word_in_crossword(Board :: [[char()]], Word :: unicode:unicode_binary()) -> boolean().\nplace_word_in_crossword(Board, Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec place_word_in_crossword(board :: [[char]], word :: String.t) :: boolean\n  def place_word_in_crossword(board, word) do\n    \n  end\nend"}], "similarQuestionList": []}