{"questionId": "2750", "acRate": 79.74722948574275, "difficulty": "Medium", "freqBar": 48.369177010116445, "frontendQuestionId": "2636", "paidOnly": true, "status": "ac", "title": "Promise Pool", "topicTags": [], "titleSlug": "promise-pool", "content": "<p>Given an array&nbsp;of asynchronous functions&nbsp;<code>functions</code>&nbsp;and a <strong>pool limit</strong>&nbsp;<code>n</code>, return an asynchronous function&nbsp;<code>promisePool</code>. It should return&nbsp;a promise that resolves when all the input&nbsp;functions resolve.</p>\n\n<p><b>Pool limit</b> is defined as the maximum number promises that can be pending at once.&nbsp;<code>promisePool</code>&nbsp;should begin execution of as many functions as possible and continue executing new functions when old promises&nbsp;resolve.&nbsp;<code>promisePool</code>&nbsp;should execute <code>functions[i]</code>&nbsp;then <code>functions[i + 1]</code>&nbsp;then <code>functions[i + 2]</code>, etc. When the last promise resolves,&nbsp;<code>promisePool</code>&nbsp;should also resolve.</p>\n\n<p>For example, if&nbsp;<code>n = 1</code>, <code>promisePool</code>&nbsp;will execute one function at&nbsp;a time in&nbsp;series. However, if&nbsp;<code>n = 2</code>, it first executes two functions. When either of the two functions resolve, a 3rd function should be executed (if available), and so on until there are no functions left to execute.</p>\n\n<p>You can assume all&nbsp;<code>functions</code>&nbsp;never reject. It is acceptable for&nbsp;<code>promisePool</code>&nbsp;to return a promise that resolves any value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfunctions = [\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 300)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 400)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 200))\n]\nn = 2\n<strong>Output:</strong> [[300,400,500],500]\n<strong>Explanation:</strong>\nThree functions are passed in. They sleep for 300ms, 400ms, and 200ms respectively.\nThey resolve at 300ms, 400ms, and 500ms respectively. The returned promise resolves at 500ms.\nAt t=0, the first 2 functions are executed. The pool size limit of 2 is reached.\nAt t=300, the 1st function resolves, and the 3rd function is executed. Pool size is 2.\nAt t=400, the 2nd function resolves. There is nothing left to execute. Pool size is 1.\nAt t=500, the 3rd function resolves. Pool size is zero so the returned promise also resolves.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:\n</strong>functions = [\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 300)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 400)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 200))\n]\nn = 5\n<strong>Output:</strong> [[300,400,200],400]\n<strong>Explanation:</strong>\nThe three input promises resolve at 300ms, 400ms, and 200ms respectively.\nThe returned promise resolves at 400ms.\nAt t=0, all 3 functions are executed. The pool limit of 5 is never met.\nAt t=200, the 3rd function resolves. Pool size is 2.\nAt t=300, the 1st function resolved. Pool size is 1.\nAt t=400, the 2nd function resolves. Pool size is 0, so the returned promise also resolves.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong>\nfunctions = [\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 300)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 400)),\n&nbsp; () =&gt; new Promise(res =&gt; setTimeout(res, 200))\n]\nn = 1\n<strong>Output:</strong> [[300,700,900],900]\n<strong>Explanation:\n</strong>The three input promises resolve at 300ms, 700ms, and 900ms respectively.\nThe returned promise resolves at 900ms.\nAt t=0, the 1st function is executed. Pool size is 1.\nAt t=300, the 1st function resolves and the 2nd function is executed. Pool size is 1.\nAt t=700, the 2nd function resolves and the 3rd function is executed. Pool size is 1.\nAt t=900, the 3rd function resolves. Pool size is 0 so the returned promise resolves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= functions.length &lt;= 10</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= n &lt;= 10</font></code></li>\n</ul>\n", "hints": ["Initially execute all the functions until the queue fills up.", "Every time a function resolves, add a new promise to the queue if possible."], "exampleTestcases": "[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n2\n[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n5\n[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n1", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Function[]} functions\n * @param {number} n\n * @return {Promise<any>}\n */\nvar promisePool = async function(functions, n) {\n    \n};\n\n/**\n * const sleep = (t) => new Promise(res => setTimeout(res, t));\n * promisePool([() => sleep(500), () => sleep(400)], 1)\n *   .then(console.log) // After 900ms\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "type F = () => Promise<any>;\n\nfunction promisePool(functions: F[], n: number): Promise<any> {\n    \n};\n\n/**\n * const sleep = (t) => new Promise(res => setTimeout(res, t));\n * promisePool([() => sleep(500), () => sleep(400)], 1)\n *   .then(console.log) // After 900ms\n */"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "sleep", "title": "Sleep", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "promise-time-limit", "title": "Promise Time Limit", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "cache-with-time-limit", "title": "Cache With Time Limit", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "throttle", "title": "Throttle", "isPaidOnly": true}]}