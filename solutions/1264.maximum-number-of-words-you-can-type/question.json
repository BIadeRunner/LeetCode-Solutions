{"question_id": "1264", "problem_slug": "maximum-number-of-words-you-can-type", "problem_title": "Maximum Number of Words You Can Type", "content": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.\n \nExample 1:\n\nInput: text = \"hello world\", brokenLetters = \"ad\"\nOutput: 1\nExplanation: We cannot type \"world\" because the 'd' key is broken.\n\nExample 2:\n\nInput: text = \"leet code\", brokenLetters = \"lt\"\nOutput: 1\nExplanation: We cannot type \"leet\" because the 'l' and 't' keys are broken.\n\nExample 3:\n\nInput: text = \"leet code\", brokenLetters = \"e\"\nOutput: 0\nExplanation: We cannot type either word because the 'e' key is broken.\n\n \nConstraints:\n\n1 <= text.length <= 104\n0 <= brokenLetters.length <= 26\ntext consists of words separated by a single space without any leading or trailing spaces.\nEach word only consists of lowercase English letters.\nbrokenLetters consists of distinct lowercase English letters.\n\n", "hints": ["Check each word separately if it can be typed.", "A word can be typed if all its letters are not broken."], "exampleTestcases": "\"hello world\"\n\"ad\"\n\"leet code\"\n\"lt\"\n\"leet code\"\n\"e\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int canBeTypedWords(string text, string brokenLetters) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int canBeTypedWords(String text, String brokenLetters) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canBeTypedWords(self, text, brokenLetters):\n        \"\"\"\n        :type text: str\n        :type brokenLetters: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int canBeTypedWords(char* text, char* brokenLetters) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CanBeTypedWords(string text, string brokenLetters) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} text\n * @param {string} brokenLetters\n * @return {number}\n */\nvar canBeTypedWords = function(text, brokenLetters) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canBeTypedWords(text: string, brokenLetters: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @param String $brokenLetters\n     * @return Integer\n     */\n    function canBeTypedWords($text, $brokenLetters) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canBeTypedWords(_ text: String, _ brokenLetters: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canBeTypedWords(text: String, brokenLetters: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int canBeTypedWords(String text, String brokenLetters) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func canBeTypedWords(text string, brokenLetters string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} text\n# @param {String} broken_letters\n# @return {Integer}\ndef can_be_typed_words(text, broken_letters)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canBeTypedWords(text: String, brokenLetters: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_be_typed_words(text: String, broken_letters: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (can-be-typed-words text brokenLetters)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec can_be_typed_words(Text :: unicode:unicode_binary(), BrokenLetters :: unicode:unicode_binary()) -> integer().\ncan_be_typed_words(Text, BrokenLetters) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_be_typed_words(text :: String.t, broken_letters :: String.t) :: integer\n  def can_be_typed_words(text, broken_letters) do\n    \n  end\nend"}}}