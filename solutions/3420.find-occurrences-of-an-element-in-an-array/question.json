{"question_id": "3420", "problem_slug": "find-occurrences-of-an-element-in-an-array", "problem_title": "Find Occurrences of an Element in an Array", "content": "You are given an integer array nums, an integer array queries, and an integer x.\nFor each queries[i], you need to find the index of the queries[i]th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.\nReturn an integer array answer containing the answers to all queries.\n \nExample 1:\n\nInput: nums = [1,3,1,7], queries = [1,3,2,4], x = 1\nOutput: [0,-1,2,-1]\nExplanation:\n\nFor the 1st query, the first occurrence of 1 is at index 0.\nFor the 2nd query, there are only two occurrences of 1 in nums, so the answer is -1.\nFor the 3rd query, the second occurrence of 1 is at index 2.\nFor the 4th query, there are only two occurrences of 1 in nums, so the answer is -1.\n\n\nExample 2:\n\nInput: nums = [1,2,3], queries = [10], x = 5\nOutput: [-1]\nExplanation:\n\nFor the 1st query, 5 doesn't exist in nums, so the answer is -1.\n\n\n \nConstraints:\n\n1 <= nums.length, queries.length <= 105\n1 <= queries[i] <= 105\n1 <= nums[i], x <= 104\n\n", "hints": ["Compress the array <code>nums</code> and save all the occurrences of each element in the separate arrays."], "exampleTestcases": "[1,3,1,7]\n[1,3,2,4]\n1\n[1,2,3]\n[10]\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> occurrencesOfElement(vector<int>& nums, vector<int>& queries, int x) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def occurrencesOfElement(self, nums, queries, x):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :type x: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* occurrencesOfElement(int* nums, int numsSize, int* queries, int queriesSize, int x, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] OccurrencesOfElement(int[] nums, int[] queries, int x) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @param {number} x\n * @return {number[]}\n */\nvar occurrencesOfElement = function(nums, queries, x) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function occurrencesOfElement(nums: number[], queries: number[], x: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @param Integer $x\n     * @return Integer[]\n     */\n    function occurrencesOfElement($nums, $queries, $x) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func occurrencesOfElement(_ nums: [Int], _ queries: [Int], _ x: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun occurrencesOfElement(nums: IntArray, queries: IntArray, x: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> occurrencesOfElement(List<int> nums, List<int> queries, int x) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func occurrencesOfElement(nums []int, queries []int, x int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @param {Integer} x\n# @return {Integer[]}\ndef occurrences_of_element(nums, queries, x)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def occurrencesOfElement(nums: Array[Int], queries: Array[Int], x: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn occurrences_of_element(nums: Vec<i32>, queries: Vec<i32>, x: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (occurrences-of-element nums queries x)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec occurrences_of_element(Nums :: [integer()], Queries :: [integer()], X :: integer()) -> [integer()].\noccurrences_of_element(Nums, Queries, X) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec occurrences_of_element(nums :: [integer], queries :: [integer], x :: integer) :: [integer]\n  def occurrences_of_element(nums, queries, x) do\n    \n  end\nend"}}}