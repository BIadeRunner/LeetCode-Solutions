{"questionId": "2322", "acRate": 49.18727106227106, "difficulty": "Medium", "freqBar": 48.369177010116445, "frontendQuestionId": "2184", "paidOnly": true, "status": "ac", "title": "Number of Ways to Build Sturdy Brick Wall", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "number-of-ways-to-build-sturdy-brick-wall", "content": "<p>You are given integers <code>height</code> and <code>width</code> which specify the dimensions of a brick wall you are building. You are also given a <strong>0-indexed</strong> array of <strong>unique</strong> integers <code>bricks</code>, where the <code>i<sup>th</sup></code> brick has a height of <code>1</code> and a width of <code>bricks[i]</code>. You have an <strong>infinite </strong>supply of each type of brick and bricks may <strong>not</strong> be rotated.</p>\n\n<p>Each row in the wall must be exactly <code>width</code> units long. For the wall to be <strong>sturdy</strong>, adjacent rows in the wall should <strong>not </strong>join bricks at the same location, except at the ends of the wall.</p>\n\n<p>Return <em>the number of ways to build a <strong>sturdy </strong>wall.</em> Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/02/20/image-20220220190749-1.png\" style=\"width: 919px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> height = 2, width = 3, bricks = [1,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe first two walls in the diagram show the only two ways to build a sturdy brick wall.\nNote that the third wall in the diagram is not sturdy because adjacent rows join bricks 2 units from the left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = 1, width = 1, bricks = [5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThere are no ways to build a sturdy wall because the only type of brick we have is longer than the width of the wall.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= height &lt;= 100</code></li>\n\t<li><code>1 &lt;= width &lt;= 10</code></li>\n\t<li><code>1 &lt;= bricks.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= bricks[i] &lt;= 10</code></li>\n\t<li>All the values of <code>bricks</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["A row of bricks can be represented uniquely by the points where two bricks are joined together.", "For a given row of bricks, how many configurations of bricks could you have put below this row such that the wall is sturdy?", "Use dynamic programming to store the number of possible sturdy walls with a given height and configuration of bricks on the top row."], "exampleTestcases": "2\n3\n[1,2]\n1\n1\n[5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int buildWall(int height, int width, vector<int>& bricks) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int buildWall(int height, int width, int[] bricks) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def buildWall(self, height, width, bricks):\n        \"\"\"\n        :type height: int\n        :type width: int\n        :type bricks: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def buildWall(self, height: int, width: int, bricks: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int buildWall(int height, int width, int* bricks, int bricksSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BuildWall(int height, int width, int[] bricks) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} height\n * @param {number} width\n * @param {number[]} bricks\n * @return {number}\n */\nvar buildWall = function(height, width, bricks) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function buildWall(height: number, width: number, bricks: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $height\n     * @param Integer $width\n     * @param Integer[] $bricks\n     * @return Integer\n     */\n    function buildWall($height, $width, $bricks) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func buildWall(_ height: Int, _ width: Int, _ bricks: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun buildWall(height: Int, width: Int, bricks: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int buildWall(int height, int width, List<int> bricks) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func buildWall(height int, width int, bricks []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} height\n# @param {Integer} width\n# @param {Integer[]} bricks\n# @return {Integer}\ndef build_wall(height, width, bricks)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def buildWall(height: Int, width: Int, bricks: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn build_wall(height: i32, width: i32, bricks: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (build-wall height width bricks)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec build_wall(Height :: integer(), Width :: integer(), Bricks :: [integer()]) -> integer().\nbuild_wall(Height, Width, Bricks) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec build_wall(height :: integer, width :: integer, bricks :: [integer]) :: integer\n  def build_wall(height, width, bricks) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "brick-wall", "title": "Brick Wall", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "bricks-falling-when-hit", "title": "Bricks Falling When Hit", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-time-to-kill-all-monsters", "title": "Minimum Time to Kill All Monsters", "isPaidOnly": true}]}