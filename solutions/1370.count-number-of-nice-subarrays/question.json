{"question_id": "1370", "problem_slug": "count-number-of-nice-subarrays", "problem_title": "Count Number of Nice Subarrays", "content": "Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.\n \nExample 1:\n\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\nExample 2:\n\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There are no odd numbers in the array.\n\nExample 3:\n\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16\n\n \nConstraints:\n\n1 <= nums.length <= 50000\n1 <= nums[i] <= 10^5\n1 <= k <= nums.length\n\n", "hints": ["After replacing each even by zero and every odd by one can we use prefix sum to find answer ?", "Can we use two pointers to count number of sub-arrays ?", "Can we store the indices of odd numbers and for each k indices count the number of sub-arrays that contains them ?"], "exampleTestcases": "[1,1,2,1,1]\n3\n[2,4,6]\n1\n[2,2,2,1,2,2,1,2,2,2]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfSubarrays(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfSubarrays(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint numberOfSubarrays(int* nums, int numsSize, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfSubarrays(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar numberOfSubarrays = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfSubarrays(nums: number[], k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfSubarrays($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfSubarrays(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfSubarrays(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfSubarrays(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef number_of_subarrays(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfSubarrays(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_subarrays(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-subarrays nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_subarrays(Nums :: [integer()], K :: integer()) -> integer().\nnumber_of_subarrays(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_subarrays(nums :: [integer], k :: integer) :: integer\n  def number_of_subarrays(nums, k) do\n    \n  end\nend"}}}