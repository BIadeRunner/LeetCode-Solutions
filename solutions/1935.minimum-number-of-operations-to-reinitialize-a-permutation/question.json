{"question_id": "1935", "problem_slug": "minimum-number-of-operations-to-reinitialize-a-permutation", "problem_title": "Minimum Number of Operations to Reinitialize a Permutation", "content": "You are given an even integer n​​​​​​. You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.\nIn one operation, you will create a new array arr, and for each i:\n\nIf i % 2 == 0, then arr[i] = perm[i / 2].\nIf i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].\n\nYou will then assign arr​​​​ to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.\n \nExample 1:\n\nInput: n = 2\nOutput: 1\nExplanation: perm = [0,1] initially.\nAfter the 1st operation, perm = [0,1]\nSo it takes only 1 operation.\n\nExample 2:\n\nInput: n = 4\nOutput: 2\nExplanation: perm = [0,1,2,3] initially.\nAfter the 1st operation, perm = [0,2,1,3]\nAfter the 2nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations.\n\nExample 3:\n\nInput: n = 6\nOutput: 4\n\n \nConstraints:\n\n2 <= n <= 1000\nn​​​​​​ is even.\n\n", "hints": ["It is safe to assume the number of  operations isn't more than n", "The number is small enough to apply a brute force solution."], "exampleTestcases": "2\n4\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int reinitializePermutation(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int reinitializePermutation(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reinitializePermutation(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reinitializePermutation(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int reinitializePermutation(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ReinitializePermutation(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar reinitializePermutation = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reinitializePermutation(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reinitializePermutation($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reinitializePermutation(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reinitializePermutation(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int reinitializePermutation(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reinitializePermutation(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef reinitialize_permutation(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reinitializePermutation(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reinitialize_permutation(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reinitialize-permutation n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reinitialize_permutation(N :: integer()) -> integer().\nreinitialize_permutation(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reinitialize_permutation(n :: integer) :: integer\n  def reinitialize_permutation(n) do\n    \n  end\nend"}}}