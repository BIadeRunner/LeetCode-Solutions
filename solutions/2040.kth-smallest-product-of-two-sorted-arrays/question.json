{"questionId": "2150", "acRate": 29.217072655093844, "difficulty": "Hard", "freqBar": 48.47893407563074, "frontendQuestionId": "2040", "paidOnly": false, "status": "ac", "title": "Kth Smallest Product of Two Sorted Arrays", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "kth-smallest-product-of-two-sorted-arrays", "content": "Given two <strong>sorted 0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> as well as an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> (<strong>1-based</strong>) smallest product of </em><code>nums1[i] * nums2[j]</code><em> where </em><code>0 &lt;= i &lt; nums1.length</code><em> and </em><code>0 &lt;= j &lt; nums2.length</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,5], nums2 = [3,4], k = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2<sup>nd</sup> smallest product is 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6<sup>th</sup> smallest product is 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3\n<strong>Output:</strong> -6\n<strong>Explanation:</strong> The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3<sup>rd</sup> smallest product is -6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums1.length * nums2.length</code></li>\n\t<li><code>nums1</code> and <code>nums2</code> are sorted.</li>\n</ul>\n", "hints": ["Can we split this problem into four cases depending on the sign of the numbers?", "Can we binary search the value?"], "exampleTestcases": "[2,5]\n[3,4]\n2\n[-4,-2,0,3]\n[2,4]\n6\n[-2,-1,0,1,2]\n[-3,-1,2,4,5]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long kthSmallestProduct(int[] nums1, int[] nums2, long k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kthSmallestProduct(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long kthSmallestProduct(int* nums1, int nums1Size, int* nums2, int nums2Size, long long k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long KthSmallestProduct(int[] nums1, int[] nums2, long k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar kthSmallestProduct = function(nums1, nums2, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kthSmallestProduct(nums1: number[], nums2: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthSmallestProduct($nums1, $nums2, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kthSmallestProduct(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kthSmallestProduct(nums1: IntArray, nums2: IntArray, k: Long): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int kthSmallestProduct(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func kthSmallestProduct(nums1 []int, nums2 []int, k int64) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef kth_smallest_product(nums1, nums2, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kthSmallestProduct(nums1: Array[Int], nums2: Array[Int], k: Long): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kth_smallest_product(nums1: Vec<i32>, nums2: Vec<i32>, k: i64) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (kth-smallest-product nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec kth_smallest_product(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nkth_smallest_product(Nums1, Nums2, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_smallest_product(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def kth_smallest_product(nums1, nums2, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "find-k-pairs-with-smallest-sums", "title": "Find K Pairs with Smallest Sums", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "k-diff-pairs-in-an-array", "title": "K-diff Pairs in an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "isPaidOnly": false}]}