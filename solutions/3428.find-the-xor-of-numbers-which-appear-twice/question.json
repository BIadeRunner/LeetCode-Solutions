{"question_id": "3428", "problem_slug": "find-the-xor-of-numbers-which-appear-twice", "problem_title": "Find the XOR of Numbers Which Appear Twice", "content": "You are given an array nums, where each number in the array appears either once or twice.\nReturn the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.\n \nExample 1:\n\nInput: nums = [1,2,1,3]\nOutput: 1\nExplanation:\nThe only number that appears twice in nums is 1.\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: 0\nExplanation:\nNo number appears twice in nums.\n\nExample 3:\n\nInput: nums = [1,2,2,1]\nOutput: 3\nExplanation:\nNumbers 1 and 2 appeared twice. 1 XOR 2 == 3.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\nEach number in nums appears either once or twice.\n\n", "hints": ["The constraints are small. Brute force checking each value in the array."], "exampleTestcases": "[1,2,1,3]\n[1,2,3]\n[1,2,2,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int duplicateNumbersXOR(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int duplicateNumbersXOR(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def duplicateNumbersXOR(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def duplicateNumbersXOR(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int duplicateNumbersXOR(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DuplicateNumbersXOR(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar duplicateNumbersXOR = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function duplicateNumbersXOR(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function duplicateNumbersXOR($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func duplicateNumbersXOR(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun duplicateNumbersXOR(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int duplicateNumbersXOR(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func duplicateNumbersXOR(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef duplicate_numbers_xor(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def duplicateNumbersXOR(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn duplicate_numbers_xor(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (duplicate-numbers-xor nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec duplicate_numbers_xor(Nums :: [integer()]) -> integer().\nduplicate_numbers_xor(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec duplicate_numbers_xor(nums :: [integer]) :: integer\n  def duplicate_numbers_xor(nums) do\n    \n  end\nend"}}}