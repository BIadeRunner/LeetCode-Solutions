{"question_id": "834", "problem_slug": "ambiguous-coordinates", "problem_title": "Ambiguous Coordinates", "content": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\nFor example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\n\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n \nExample 1:\n\nInput: s = \"(123)\"\nOutput: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n\nExample 2:\n\nInput: s = \"(0123)\"\nOutput: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\nExplanation: 0.0, 00, 0001 or 00.01 are not allowed.\n\nExample 3:\n\nInput: s = \"(00011)\"\nOutput: [\"(0, 0.011)\",\"(0.001, 1)\"]\n\n \nConstraints:\n\n4 <= s.length <= 12\ns[0] == '(' and s[s.length - 1] == ')'.\nThe rest of s are digits.\n\n", "hints": [], "exampleTestcases": "\"(123)\"\n\"(0123)\"\n\"(00011)\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> ambiguousCoordinates(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> ambiguousCoordinates(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def ambiguousCoordinates(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** ambiguousCoordinates(char* s, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> AmbiguousCoordinates(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar ambiguousCoordinates = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function ambiguousCoordinates(s: string): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function ambiguousCoordinates($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func ambiguousCoordinates(_ s: String) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun ambiguousCoordinates(s: String): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> ambiguousCoordinates(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func ambiguousCoordinates(s string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def ambiguousCoordinates(s: String): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn ambiguous_coordinates(s: String) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (ambiguous-coordinates s)\n  (-> string? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec ambiguous_coordinates(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nambiguous_coordinates(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec ambiguous_coordinates(s :: String.t) :: [String.t]\n  def ambiguous_coordinates(s) do\n    \n  end\nend"}}}