{"question_id": "255", "problem_slug": "verify-preorder-sequence-in-binary-search-tree", "problem_title": "Verify Preorder Sequence in Binary Search Tree", "content": "Given an array of unique integers preorder, return true if it is the correct preorder traversal sequence of a binary search tree.\n \nExample 1:\n\n\nInput: preorder = [5,2,1,3,6]\nOutput: true\n\nExample 2:\n\nInput: preorder = [5,2,6,1,3]\nOutput: false\n\n \nConstraints:\n\n1 <= preorder.length <= 104\n1 <= preorder[i] <= 104\nAll the elements of preorder are unique.\n\n \nFollow up: Could you do it using only constant space complexity?\n", "hints": [], "exampleTestcases": "[5,2,1,3,6]\n[5,2,6,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool verifyPreorder(vector<int>& preorder) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean verifyPreorder(int[] preorder) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def verifyPreorder(self, preorder):\n        \"\"\"\n        :type preorder: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def verifyPreorder(self, preorder: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool verifyPreorder(int* preorder, int preorderSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool VerifyPreorder(int[] preorder) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} preorder\n * @return {boolean}\n */\nvar verifyPreorder = function(preorder) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function verifyPreorder(preorder: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $preorder\n     * @return Boolean\n     */\n    function verifyPreorder($preorder) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func verifyPreorder(_ preorder: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun verifyPreorder(preorder: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool verifyPreorder(List<int> preorder) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func verifyPreorder(preorder []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} preorder\n# @return {Boolean}\ndef verify_preorder(preorder)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def verifyPreorder(preorder: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn verify_preorder(preorder: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (verify-preorder preorder)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec verify_preorder(Preorder :: [integer()]) -> boolean().\nverify_preorder(Preorder) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec verify_preorder(preorder :: [integer]) :: boolean\n  def verify_preorder(preorder) do\n    \n  end\nend"}}}