{"question_id": "2683", "problem_slug": "count-the-number-of-good-subsequences", "problem_title": "Count the Number of Good Subsequences", "content": "A subsequence of a string is good if it is not empty and the frequency of each one of its characters is the same.\nGiven a string s, return the number of good subsequences of s. Since the answer may be too large, return it modulo 109 + 7.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n \nExample 1:\n\nInput: s = \"aabb\"\nOutput: 11\nExplanation: The total number of subsequences is 24. There are five subsequences which are not good: \"aabb\", \"aabb\", \"aabb\", \"aabb\", and the empty subsequence. Hence, the number of good subsequences is 24-5 = 11.\nExample 2:\n\nInput: s = \"leet\"\nOutput: 12\nExplanation: There are four subsequences which are not good: \"leet\", \"leet\", \"leet\", and the empty subsequence. Hence, the number of good subsequences is 24-4 = 12.\n\nExample 3:\n\nInput: s = \"abcd\"\nOutput: 15\nExplanation: All of the non-empty subsequences are good subsequences. Hence, the number of good subsequences is 24-1 = 15.\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of only lowercase English letters.\n\n", "hints": ["Use the frequency array of characters of the string.", "For 1 ≤ m ≤ s.length, count the number of subsequences of s where each character occurs exactly m times.", "For any n and k, you can calculate (n choose k) mod p in O(log p) using binary exponentiation."], "exampleTestcases": "\"aabb\"\n\"leet\"\n\"abcd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countGoodSubsequences(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countGoodSubsequences(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countGoodSubsequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countGoodSubsequences(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countGoodSubsequences(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountGoodSubsequences(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countGoodSubsequences = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countGoodSubsequences(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countGoodSubsequences($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countGoodSubsequences(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countGoodSubsequences(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countGoodSubsequences(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countGoodSubsequences(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_good_subsequences(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countGoodSubsequences(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_good_subsequences(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-good-subsequences s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_good_subsequences(S :: unicode:unicode_binary()) -> integer().\ncount_good_subsequences(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_good_subsequences(s :: String.t) :: integer\n  def count_good_subsequences(s) do\n    \n  end\nend"}}}