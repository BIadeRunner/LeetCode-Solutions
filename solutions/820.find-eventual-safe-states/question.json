{"question_id": "820", "problem_slug": "find-eventual-safe-states", "problem_title": "Find Eventual Safe States", "content": "There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n \nExample 1:\n\n\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nExplanation: The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\nExample 2:\n\nInput: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\nOutput: [4]\nExplanation:\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n\n \nConstraints:\n\nn == graph.length\n1 <= n <= 104\n0 <= graph[i].length <= n\n0 <= graph[i][j] <= n - 1\ngraph[i] is sorted in a strictly increasing order.\nThe graph may contain self-loops.\nThe number of edges in the graph will be in the range [1, 4 * 104].\n\n", "hints": [], "exampleTestcases": "[[1,2],[2,3],[5],[0],[5],[],[]]\n[[1,2,3,4],[1,2],[3,4],[0,4],[]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def eventualSafeNodes(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* eventualSafeNodes(int** graph, int graphSize, int* graphColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> EventualSafeNodes(int[][] graph) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number[]}\n */\nvar eventualSafeNodes = function(graph) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function eventualSafeNodes(graph: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer[]\n     */\n    function eventualSafeNodes($graph) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func eventualSafeNodes(_ graph: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun eventualSafeNodes(graph: Array<IntArray>): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> eventualSafeNodes(List<List<int>> graph) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func eventualSafeNodes(graph [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer[]}\ndef eventual_safe_nodes(graph)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def eventualSafeNodes(graph: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn eventual_safe_nodes(graph: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (eventual-safe-nodes graph)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec eventual_safe_nodes(Graph :: [[integer()]]) -> [integer()].\neventual_safe_nodes(Graph) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec eventual_safe_nodes(graph :: [[integer]]) :: [integer]\n  def eventual_safe_nodes(graph) do\n    \n  end\nend"}}}