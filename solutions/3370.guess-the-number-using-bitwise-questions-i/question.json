{"question_id": "3370", "problem_slug": "guess-the-number-using-bitwise-questions-i", "problem_title": "Guess the Number Using Bitwise Questions I", "content": "There is a number n that you have to find.\nThere is also a pre-defined API int commonSetBits(int num), which returns the number of bits where both n and num are 1 in that position of their binary representation. In other words, it returns the number of set bits in n & num, where & is the bitwise AND operator.\nReturn the number n.\n \nExample 1: \n\nInput:   n = 31 \nOutput:   31 \nExplanation:  It can be proven that it's possible to find 31 using the provided API.\n\nExample 2: \n\nInput:   n = 33 \nOutput:   33 \nExplanation:  It can be proven that it's possible to find 33 using the provided API.\n\n \nConstraints:\n\n1 <= n <= 230 - 1\n0 <= num <= 230 - 1\nIf you ask for some num out of the given range, the output wouldn't be reliable.\n\n", "hints": ["Ask <code>2<sup>i</sup></code> for <code>0 <= i < 30</code>.", "If the result is greater than zero for some <code>i</code>, this bit is a set bit in <code>n</code>."], "exampleTestcases": "31", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/** \n * Definition of commonSetBits API.\n * int commonSetBits(int num);\n */\n\nclass Solution {\npublic:\n    int findNumber() {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem).\n * int commonSetBits(int num);\n */\n\npublic class Solution extends Problem {\n    public int findNumber() {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition of commonSetBits API.\n# def commonSetBits(num):\n#     \"\"\"\n#     :type num: int\n#     :rtype: int\n#     \"\"\"\n\nclass Solution(object):\n    def findNumber(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition of commonSetBits API.\n# def commonSetBits(num: int) -> int:\n\nclass Solution:\n    def findNumber(self) -> int:\n        "}, "C": {"langSlug": "c", "code": "/** \n * Definition of commonSetBits API.\n * int commonSetBits(int num);\n */\n\nint findNumber(){\n\t\n}"}, "C#": {"langSlug": "csharp", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem).\n * int CommonSetBits(int num);\n */\n\npublic class Solution : Problem {\n    public int FindNumber() {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/** \n * Definition of commonSetBits API.\n * @param {number} num\n * @return {integer}\n * var commonSetBits = function(num) {}\n */\n\n/**\n * @return {number}\n */\nvar findNumber = function() {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/** \n * Definition of commonSetBits API.\n * var commonSetBits = function(num: number): number {}\n */\n\nfunction findNumber(): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem).\n * @param Integer $num\n * @return Integer\n * public function commonSetBits($num) : Integer\n */\n\nclass Solution extends Problem {\n    /**\n     * @return Integer\n     */\n    function findNumber() {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem)\n * func commonSetBits(_ num: Int) -> Int \n */\n\nclass Solution : Problem {\n    func findNumber() -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem).\n * fun commonSetBits(num: Int): Int {}\n */\n\nclass Solution : Problem() {\n    fun findNumber(): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "/**\n * Definition of commonSetBits API.\n * int commonSetBits(int num);\n */\n\nclass Solution {\n  int findNumber() {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "/** \n * Definition of commonSetBits API.\n * func commonSetBits(num int) int;\n */\n\nfunc findNumber() int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition of commonSetBits API.\n# @param {Integer} num\n# @return {Integer}\n# def common_set_bits(num)\n\ndef find_number()\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/** \n * Definition of commonSetBits API (defined in the parent class Problem)\n * def commonSetBits(num: Int): Int = {}\n */\n\nclass Solution extends Problem {\n    def findNumber(): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/** \n * Definition of commonSetBits API.\n * unsafe fn common_set_bits(num: i32) -> i32 {}\n */\n\nimpl Solution {\n    unsafe fn find_number() -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": ";; Definition of commonSetBits API.\n#|\n(define/contract (common-set-bits num)\n  (-> exact-integer? exact-integer?)      \n  )\n|#\n\n(define/contract (find-number)\n  (-> exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "%% Definition of commonSetBits API.\n%% -spec common_set_bits(Num :: integer()) -> integer().\n%% common_set_bits(Num) ->\n%%   .\n\n-spec find_number() -> integer().\nfind_number() ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "# Definition of commonSetBits API.\n# common_set_bits = fn\n#   num :: integer -> integer\n# end\n# Note that due to the limitations of the language, common_set_bits is passed to you as an anonymous function.\n# To call it, you should use the dot notation. e.g., common_set_bits.(x)\n\ndefmodule Solution do\n  @spec find_number(common_set_bits :: (integer -> integer)) :: integer\n  def find_number(common_set_bits) do\n    \n  end\nend"}}}