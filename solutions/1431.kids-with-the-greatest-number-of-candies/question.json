{"questionId": "1528", "acRate": 87.7841251894719, "difficulty": "Easy", "freqBar": 51.44742540254696, "frontendQuestionId": "1431", "paidOnly": false, "status": "ac", "title": "Kids With the Greatest Number of Candies", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "kids-with-the-greatest-number-of-candies", "content": "<p>There are <code>n</code> kids with candies. You are given an integer array <code>candies</code>, where each <code>candies[i]</code> represents the number of candies the <code>i<sup>th</sup></code> kid has, and an integer <code>extraCandies</code>, denoting the number of extra candies that you have.</p>\n\n<p>Return <em>a boolean array </em><code>result</code><em> of length </em><code>n</code><em>, where </em><code>result[i]</code><em> is </em><code>true</code><em> if, after giving the </em><code>i<sup>th</sup></code><em> kid all the </em><code>extraCandies</code><em>, they will have the <strong>greatest</strong> number of candies among all the kids</em><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>Note that <strong>multiple</strong> kids can have the <strong>greatest</strong> number of candies.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [2,3,5,1,3], extraCandies = 3\n<strong>Output:</strong> [true,true,true,false,true] \n<strong>Explanation:</strong> If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [4,2,1,1,2], extraCandies = 1\n<strong>Output:</strong> [true,false,false,false,false] \n<strong>Explanation:</strong> There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = [12,1,12], extraCandies = 10\n<strong>Output:</strong> [true,false,true]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == candies.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= candies[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= extraCandies &lt;= 50</code></li>\n</ul>\n", "hints": ["For each kid check if candies[i] + extraCandies \u2265 maximum in Candies[i]."], "exampleTestcases": "[2,3,5,1,3]\n3\n[4,2,1,1,2]\n1\n[12,1,12]\n10", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kidsWithCandies(self, candies, extraCandies):\n        \"\"\"\n        :type candies: List[int]\n        :type extraCandies: int\n        :rtype: List[bool]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* kidsWithCandies(int* candies, int candiesSize, int extraCandies, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<bool> KidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function(candies, extraCandies) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kidsWithCandies(candies: number[], extraCandies: number): boolean[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $extraCandies\n     * @return Boolean[]\n     */\n    function kidsWithCandies($candies, $extraCandies) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kidsWithCandies(_ candies: [Int], _ extraCandies: Int) -> [Bool] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kidsWithCandies(candies: IntArray, extraCandies: Int): List<Boolean> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<bool> kidsWithCandies(List<int> candies, int extraCandies) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func kidsWithCandies(candies []int, extraCandies int) []bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} candies\n# @param {Integer} extra_candies\n# @return {Boolean[]}\ndef kids_with_candies(candies, extra_candies)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kidsWithCandies(candies: Array[Int], extraCandies: Int): List[Boolean] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kids_with_candies(candies: Vec<i32>, extra_candies: i32) -> Vec<bool> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (kids-with-candies candies extraCandies)\n  (-> (listof exact-integer?) exact-integer? (listof boolean?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec kids_with_candies(Candies :: [integer()], ExtraCandies :: integer()) -> [boolean()].\nkids_with_candies(Candies, ExtraCandies) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec kids_with_candies(candies :: [integer], extra_candies :: integer) :: [boolean]\n  def kids_with_candies(candies, extra_candies) do\n    \n  end\nend"}], "similarQuestionList": []}