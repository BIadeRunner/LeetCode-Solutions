{"question_id": "2385", "problem_slug": "count-positions-on-street-with-required-brightness", "problem_title": "Count Positions on Street With Required Brightness", "content": "You are given an integer n. A perfectly straight street is represented by a number line ranging from 0 to n - 1. You are given a 2D integer array lights representing the street lamp(s) on the street. Each lights[i] = [positioni, rangei] indicates that there is a street lamp at position positioni that lights up the area from [max(0, positioni - rangei), min(n - 1, positioni + rangei)] (inclusive).\nThe brightness of a position p is defined as the number of street lamps that light up the position p. You are given a 0-indexed integer array requirement of size n where requirement[i] is the minimum brightness of the ith position on the street.\nReturn the number of positions i on the street between 0 and n - 1 that have a brightness of at least requirement[i].\n \nExample 1:\n\n\nInput: n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]\nOutput: 4\nExplanation:\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 1] (inclusive).\n- The second street lamp lights up the area from [max(0, 2 - 1), min(n - 1, 2 + 1)] = [1, 3] (inclusive).\n- The third street lamp lights up the area from [max(0, 3 - 2), min(n - 1, 3 + 2)] = [1, 4] (inclusive).\n\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is greater than requirement[0].\n- Position 1 is covered by the first, second, and third street lamps. It is covered by 3 street lamps which is greater than requirement[1].\n- Position 2 is covered by the second and third street lamps. It is covered by 2 street lamps which is greater than requirement[2].\n- Position 3 is covered by the second and third street lamps. It is covered by 2 street lamps which is less than requirement[3].\n- Position 4 is covered by the third street lamp. It is covered by 1 street lamp which is equal to requirement[4].\n\nPositions 0, 1, 2, and 4 meet the requirement so we return 4.\n\nExample 2:\n\nInput: n = 1, lights = [[0,1]], requirement = [2]\nOutput: 0\nExplanation:\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 0] (inclusive).\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is less than requirement[0].\n- We return 0 because no position meets their brightness requirement.\n\n \nConstraints:\n\n1 <= n <= 105\n1 <= lights.length <= 105\n0 <= positioni < n\n0 <= rangei <= 105\nrequirement.length == n\n0 <= requirement[i] <= 105\n\n", "hints": ["How can we find the brightness at every position on the street?", "We can use a hash table to store the change in brightness from the previous position to the current position."], "exampleTestcases": "5\n[[0,1],[2,1],[3,2]]\n[0,2,1,4,1]\n1\n[[0,1]]\n[2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int meetRequirement(int n, vector<vector<int>>& lights, vector<int>& requirement) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int meetRequirement(int n, int[][] lights, int[] requirement) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def meetRequirement(self, n, lights, requirement):\n        \"\"\"\n        :type n: int\n        :type lights: List[List[int]]\n        :type requirement: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def meetRequirement(self, n: int, lights: List[List[int]], requirement: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int meetRequirement(int n, int** lights, int lightsSize, int* lightsColSize, int* requirement, int requirementSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MeetRequirement(int n, int[][] lights, int[] requirement) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} lights\n * @param {number[]} requirement\n * @return {number}\n */\nvar meetRequirement = function(n, lights, requirement) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function meetRequirement(n: number, lights: number[][], requirement: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $lights\n     * @param Integer[] $requirement\n     * @return Integer\n     */\n    function meetRequirement($n, $lights, $requirement) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func meetRequirement(_ n: Int, _ lights: [[Int]], _ requirement: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun meetRequirement(n: Int, lights: Array<IntArray>, requirement: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int meetRequirement(int n, List<List<int>> lights, List<int> requirement) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func meetRequirement(n int, lights [][]int, requirement []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} lights\n# @param {Integer[]} requirement\n# @return {Integer}\ndef meet_requirement(n, lights, requirement)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def meetRequirement(n: Int, lights: Array[Array[Int]], requirement: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn meet_requirement(n: i32, lights: Vec<Vec<i32>>, requirement: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (meet-requirement n lights requirement)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec meet_requirement(N :: integer(), Lights :: [[integer()]], Requirement :: [integer()]) -> integer().\nmeet_requirement(N, Lights, Requirement) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec meet_requirement(n :: integer, lights :: [[integer]], requirement :: [integer]) :: integer\n  def meet_requirement(n, lights, requirement) do\n    \n  end\nend"}}}