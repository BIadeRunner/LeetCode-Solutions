{"questionId": "2385", "acRate": 61.757469244288224, "difficulty": "Medium", "freqBar": 38.22812310601904, "frontendQuestionId": "2237", "paidOnly": true, "status": "ac", "title": "Count Positions on Street With Required Brightness", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "count-positions-on-street-with-required-brightness", "content": "<p>You are given an integer <code>n</code>. A perfectly straight street is represented by a number line ranging from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>lights</code> representing the street lamp(s) on the street. Each <code>lights[i] = [position<sub>i</sub>, range<sub>i</sub>]</code> indicates that there is a street lamp at position <code>position<sub>i</sub></code> that lights up the area from <code>[max(0, position<sub>i</sub> - range<sub>i</sub>), min(n - 1, position<sub>i</sub> + range<sub>i</sub>)]</code> (<strong>inclusive</strong>).</p>\n\n<p>The <strong>brightness</strong> of a position <code>p</code> is defined as the number of street lamps that light up the position <code>p</code>. You are given a <strong>0-indexed</strong> integer array <code>requirement</code> of size <code>n</code> where <code>requirement[i]</code> is the minimum <strong>brightness</strong> of the <code>i<sup>th</sup></code> position on the street.</p>\n\n<p>Return <em>the number of positions </em><code>i</code><em> on the street between </em><code>0</code><em> and </em><code>n - 1</code><em> that have a <strong>brightness</strong> </em><em>of <strong>at least</strong> </em><code>requirement[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/04/11/screenshot-2022-04-11-at-22-24-43-diagramdrawio-diagramsnet.png\" style=\"height: 150px; width: 579px;\" />\n<pre>\n<strong>Input:</strong> n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 1] (inclusive).\n- The second street lamp lights up the area from [max(0, 2 - 1), min(n - 1, 2 + 1)] = [1, 3] (inclusive).\n- The third street lamp lights up the area from [max(0, 3 - 2), min(n - 1, 3 + 2)] = [1, 4] (inclusive).\n\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is greater than requirement[0].\n- Position 1 is covered by the first, second, and third street lamps. It is covered by 3 street lamps which is greater than requirement[1].\n- Position 2 is covered by the second and third street lamps. It is covered by 2 street lamps which is greater than requirement[2].\n- Position 3 is covered by the second and third street lamps. It is covered by 2 street lamps which is less than requirement[3].\n- Position 4 is covered by the third street lamp. It is covered by 1 street lamp which is equal to requirement[4].\n\nPositions 0, 1, 2, and 4 meet the requirement so we return 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, lights = [[0,1]], requirement = [2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 0] (inclusive).\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is less than requirement[0].\n- We return 0 because no position meets their brightness requirement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= lights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= position<sub>i</sub> &lt; n</code></li>\n\t<li><code>0 &lt;= range<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>requirement.length == n</code></li>\n\t<li><code>0 &lt;= requirement[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["How can we find the brightness at every position on the street?", "We can use a hash table to store the change in brightness from the previous position to the current position."], "exampleTestcases": "5\n[[0,1],[2,1],[3,2]]\n[0,2,1,4,1]\n1\n[[0,1]]\n[2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int meetRequirement(int n, vector<vector<int>>& lights, vector<int>& requirement) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int meetRequirement(int n, int[][] lights, int[] requirement) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def meetRequirement(self, n, lights, requirement):\n        \"\"\"\n        :type n: int\n        :type lights: List[List[int]]\n        :type requirement: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def meetRequirement(self, n: int, lights: List[List[int]], requirement: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int meetRequirement(int n, int** lights, int lightsSize, int* lightsColSize, int* requirement, int requirementSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MeetRequirement(int n, int[][] lights, int[] requirement) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} lights\n * @param {number[]} requirement\n * @return {number}\n */\nvar meetRequirement = function(n, lights, requirement) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function meetRequirement(n: number, lights: number[][], requirement: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $lights\n     * @param Integer[] $requirement\n     * @return Integer\n     */\n    function meetRequirement($n, $lights, $requirement) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func meetRequirement(_ n: Int, _ lights: [[Int]], _ requirement: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun meetRequirement(n: Int, lights: Array<IntArray>, requirement: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int meetRequirement(int n, List<List<int>> lights, List<int> requirement) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func meetRequirement(n int, lights [][]int, requirement []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} lights\n# @param {Integer[]} requirement\n# @return {Integer}\ndef meet_requirement(n, lights, requirement)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def meetRequirement(n: Int, lights: Array[Array[Int]], requirement: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn meet_requirement(n: i32, lights: Vec<Vec<i32>>, requirement: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (meet-requirement n lights requirement)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec meet_requirement(N :: integer(), Lights :: [[integer()]], Requirement :: [integer()]) -> integer().\nmeet_requirement(N, Lights, Requirement) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec meet_requirement(n :: integer, lights :: [[integer]], requirement :: [integer]) :: integer\n  def meet_requirement(n, lights, requirement) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "range-addition", "title": "Range Addition", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "brightest-position-on-street", "title": "Brightest Position on Street", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "increment-submatrices-by-one", "title": "Increment Submatrices by One", "isPaidOnly": false}]}