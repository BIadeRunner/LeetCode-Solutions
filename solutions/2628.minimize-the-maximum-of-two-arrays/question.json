{"question_id": "2628", "problem_slug": "minimize-the-maximum-of-two-arrays", "problem_title": "Minimize the Maximum of Two Arrays", "content": "We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\n\narr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.\narr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.\nNo integer is present in both arr1 and arr2.\n\nGiven divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.\n \nExample 1:\n\nInput: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3\nOutput: 4\nExplanation: \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it.\n\nExample 2:\n\nInput: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1\nOutput: 3\nExplanation: \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it.\nExample 3:\n\nInput: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2\nOutput: 15\nExplanation: \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions. \n\n \nConstraints:\n\n2 <= divisor1, divisor2 <= 105\n1 <= uniqueCnt1, uniqueCnt2 < 109\n2 <= uniqueCnt1 + uniqueCnt2 <= 109\n\n", "hints": ["Use binary search to find smallest maximum element.", "Add numbers divisible by x in nums2 and vice versa."], "exampleTestcases": "2\n7\n1\n3\n3\n5\n2\n1\n2\n4\n8\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizeSet(self, divisor1, divisor2, uniqueCnt1, uniqueCnt2):\n        \"\"\"\n        :type divisor1: int\n        :type divisor2: int\n        :type uniqueCnt1: int\n        :type uniqueCnt2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} divisor1\n * @param {number} divisor2\n * @param {number} uniqueCnt1\n * @param {number} uniqueCnt2\n * @return {number}\n */\nvar minimizeSet = function(divisor1, divisor2, uniqueCnt1, uniqueCnt2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizeSet(divisor1: number, divisor2: number, uniqueCnt1: number, uniqueCnt2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $divisor1\n     * @param Integer $divisor2\n     * @param Integer $uniqueCnt1\n     * @param Integer $uniqueCnt2\n     * @return Integer\n     */\n    function minimizeSet($divisor1, $divisor2, $uniqueCnt1, $uniqueCnt2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizeSet(_ divisor1: Int, _ divisor2: Int, _ uniqueCnt1: Int, _ uniqueCnt2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizeSet(divisor1: Int, divisor2: Int, uniqueCnt1: Int, uniqueCnt2: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizeSet(divisor1 int, divisor2 int, uniqueCnt1 int, uniqueCnt2 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} divisor1\n# @param {Integer} divisor2\n# @param {Integer} unique_cnt1\n# @param {Integer} unique_cnt2\n# @return {Integer}\ndef minimize_set(divisor1, divisor2, unique_cnt1, unique_cnt2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizeSet(divisor1: Int, divisor2: Int, uniqueCnt1: Int, uniqueCnt2: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_set(divisor1: i32, divisor2: i32, unique_cnt1: i32, unique_cnt2: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimize-set divisor1 divisor2 uniqueCnt1 uniqueCnt2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimize_set(Divisor1 :: integer(), Divisor2 :: integer(), UniqueCnt1 :: integer(), UniqueCnt2 :: integer()) -> integer().\nminimize_set(Divisor1, Divisor2, UniqueCnt1, UniqueCnt2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_set(divisor1 :: integer, divisor2 :: integer, unique_cnt1 :: integer, unique_cnt2 :: integer) :: integer\n  def minimize_set(divisor1, divisor2, unique_cnt1, unique_cnt2) do\n    \n  end\nend"}}}