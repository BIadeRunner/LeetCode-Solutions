{"question_id": "2613", "problem_slug": "customers-with-strictly-increasing-purchases", "problem_title": "Customers With Strictly Increasing Purchases", "content": "Table: Orders\n\n+--------------+------+\n| Column Name  | Type |\n+--------------+------+\n| order_id     | int  |\n| customer_id  | int  |\n| order_date   | date |\n| price        | int  |\n+--------------+------+\norder_id is the column with unique values for this table.\nEach row contains the id of an order, the id of customer that ordered it, the date of the order, and its price.\n\n \nWrite a solution to report the IDs of the customers with the total purchases strictly increasing yearly.\n\nThe total purchases of a customer in one year is the sum of the prices of their orders in that year. If for some year the customer did not make any order, we consider the total purchases 0.\nThe first year to consider for each customer is the year of their first order.\nThe last year to consider for each customer is the year of their last order.\n\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nOrders table:\n+----------+-------------+------------+-------+\n| order_id | customer_id | order_date | price |\n+----------+-------------+------------+-------+\n| 1        | 1           | 2019-07-01 | 1100  |\n| 2        | 1           | 2019-11-01 | 1200  |\n| 3        | 1           | 2020-05-26 | 3000  |\n| 4        | 1           | 2021-08-31 | 3100  |\n| 5        | 1           | 2022-12-07 | 4700  |\n| 6        | 2           | 2015-01-01 | 700   |\n| 7        | 2           | 2017-11-07 | 1000  |\n| 8        | 3           | 2017-01-01 | 900   |\n| 9        | 3           | 2018-11-07 | 900   |\n+----------+-------------+------------+-------+\nOutput: \n+-------------+\n| customer_id |\n+-------------+\n| 1           |\n+-------------+\nExplanation: \nCustomer 1: The first year is 2019 and the last year is 2022\n  - 2019: 1100 + 1200 = 2300\n  - 2020: 3000\n  - 2021: 3100\n  - 2022: 4700\n  We can see that the total purchases are strictly increasing yearly, so we include customer 1 in the answer.\n\nCustomer 2: The first year is 2015 and the last year is 2017\n  - 2015: 700\n  - 2016: 0\n  - 2017: 1000\n  We do not include customer 2 in the answer because the total purchases are not strictly increasing. Note that customer 2 did not make any purchases in 2016.\n\nCustomer 3: The first year is 2017, and the last year is 2018\n  - 2017: 900\n  - 2018: 900\n We do not include customer 3 in the answer because the total purchases are not strictly increasing.\n\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Orders\": [\"order_id\", \"customer_id\", \"order_date\", \"price\"]}, \"rows\": {\"Orders\": [[1, 1, \"2019-07-01\", 1100], [2, 1, \"2019-11-01\", 1200], [3, 1, \"2020-05-26\", 3000], [4, 1, \"2021-08-31\", 3100], [5, 1, \"2022-12-07\", 4700], [6, 2, \"2015-01-01\", 700], [7, 2, \"2017-11-07\", 1000], [8, 3, \"2017-01-01\", 900], [9, 3, \"2018-11-07\", 900]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef find_specific_customers(orders: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}