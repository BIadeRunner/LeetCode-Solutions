{"questionId": "7", "acRate": 29.272275208715108, "difficulty": "Medium", "freqBar": 89.92802085049753, "frontendQuestionId": "7", "paidOnly": false, "status": "ac", "title": "Reverse Integer", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "reverse-integer", "content": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "123\n-123\n120", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int reverse(int x){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverse(x: number): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int reverse(int x) {\n\n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func reverse(x int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "string-to-integer-atoi", "title": "String to Integer (atoi)", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "reverse-bits", "title": "Reverse Bits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "a-number-after-a-double-reversal", "title": "A Number After a Double Reversal", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-number-of-distinct-integers-after-reverse-operations", "title": "Count Number of Distinct Integers After Reverse Operations", "isPaidOnly": false}]}