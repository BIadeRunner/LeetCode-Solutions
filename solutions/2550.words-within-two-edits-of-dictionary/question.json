{"question_id": "2550", "problem_slug": "words-within-two-edits-of-dictionary", "problem_title": "Words Within Two Edits of Dictionary", "content": "You are given two string arrays, queries and dictionary. All words in each array comprise of lowercase English letters and have the same length.\nIn one edit you can take a word from queries, and change any letter in it to any other letter. Find all words from queries that, after a maximum of two edits, equal some word from dictionary.\nReturn a list of all words from queries, that match with some word from dictionary after a maximum of two edits. Return the words in the same order they appear in queries.\n \nExample 1:\n\nInput: queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]\nOutput: [\"word\",\"note\",\"wood\"]\nExplanation:\n- Changing the 'r' in \"word\" to 'o' allows it to equal the dictionary word \"wood\".\n- Changing the 'n' to 'j' and the 't' to 'k' in \"note\" changes it to \"joke\".\n- It would take more than 2 edits for \"ants\" to equal a dictionary word.\n- \"wood\" can remain unchanged (0 edits) and match the corresponding dictionary word.\nThus, we return [\"word\",\"note\",\"wood\"].\n\nExample 2:\n\nInput: queries = [\"yes\"], dictionary = [\"not\"]\nOutput: []\nExplanation:\nApplying any two edits to \"yes\" cannot make it equal to \"not\". Thus, we return an empty array.\n\n \nConstraints:\n\n1 <= queries.length, dictionary.length <= 100\nn == queries[i].length == dictionary[j].length\n1 <= n <= 100\nAll queries[i] and dictionary[j] are composed of lowercase English letters.\n\n", "hints": ["Try brute-forcing the problem.", "For each word in queries, try comparing to each word in dictionary.", "If there is a maximum of two edit differences, the word should be present in answer."], "exampleTestcases": "[\"word\",\"note\",\"ants\",\"wood\"]\n[\"wood\",\"joke\",\"moat\"]\n[\"yes\"]\n[\"not\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> twoEditWords(vector<string>& queries, vector<string>& dictionary) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> twoEditWords(String[] queries, String[] dictionary) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def twoEditWords(self, queries, dictionary):\n        \"\"\"\n        :type queries: List[str]\n        :type dictionary: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** twoEditWords(char** queries, int queriesSize, char** dictionary, int dictionarySize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> TwoEditWords(string[] queries, string[] dictionary) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} queries\n * @param {string[]} dictionary\n * @return {string[]}\n */\nvar twoEditWords = function(queries, dictionary) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function twoEditWords(queries: string[], dictionary: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $queries\n     * @param String[] $dictionary\n     * @return String[]\n     */\n    function twoEditWords($queries, $dictionary) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func twoEditWords(_ queries: [String], _ dictionary: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun twoEditWords(queries: Array<String>, dictionary: Array<String>): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> twoEditWords(List<String> queries, List<String> dictionary) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func twoEditWords(queries []string, dictionary []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} queries\n# @param {String[]} dictionary\n# @return {String[]}\ndef two_edit_words(queries, dictionary)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def twoEditWords(queries: Array[String], dictionary: Array[String]): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn two_edit_words(queries: Vec<String>, dictionary: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (two-edit-words queries dictionary)\n  (-> (listof string?) (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec two_edit_words(Queries :: [unicode:unicode_binary()], Dictionary :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\ntwo_edit_words(Queries, Dictionary) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec two_edit_words(queries :: [String.t], dictionary :: [String.t]) :: [String.t]\n  def two_edit_words(queries, dictionary) do\n    \n  end\nend"}}}