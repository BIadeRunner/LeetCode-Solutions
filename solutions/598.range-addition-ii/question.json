{"question_id": "598", "problem_slug": "range-addition-ii", "problem_title": "Range Addition II", "content": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\nCount and return the number of maximum integers in the matrix after performing all the operations.\n \nExample 1:\n\n\nInput: m = 3, n = 3, ops = [[2,2],[3,3]]\nOutput: 4\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\n\nExample 2:\n\nInput: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\nOutput: 4\n\nExample 3:\n\nInput: m = 3, n = 3, ops = []\nOutput: 9\n\n \nConstraints:\n\n1 <= m, n <= 4 * 104\n0 <= ops.length <= 104\nops[i].length == 2\n1 <= ai <= m\n1 <= bi <= n\n\n", "hints": [], "exampleTestcases": "3\n3\n[[2,2],[3,3]]\n3\n3\n[[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n3\n3\n[]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxCount(int m, int n, int** ops, int opsSize, int* opsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxCount(int m, int n, int[][] ops) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxCount(m: number, n: number, ops: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[][] $ops\n     * @return Integer\n     */\n    function maxCount($m, $n, $ops) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxCount(m: Int, n: Int, ops: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxCount(int m, int n, List<List<int>> ops) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxCount(m int, n int, ops [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[][]} ops\n# @return {Integer}\ndef max_count(m, n, ops)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_count(m: i32, n: i32, ops: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-count m n ops)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_count(M :: integer(), N :: integer(), Ops :: [[integer()]]) -> integer().\nmax_count(M, N, Ops) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_count(m :: integer, n :: integer, ops :: [[integer]]) :: integer\n  def max_count(m, n, ops) do\n    \n  end\nend"}}}