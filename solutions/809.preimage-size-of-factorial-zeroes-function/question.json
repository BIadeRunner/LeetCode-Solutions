{"question_id": "809", "problem_slug": "preimage-size-of-factorial-zeroes-function", "problem_title": "Preimage Size of Factorial Zeroes Function", "content": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\n\nFor example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\n\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\n \nExample 1:\n\nInput: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n\nExample 2:\n\nInput: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.\n\nExample 3:\n\nInput: k = 3\nOutput: 5\n\n \nConstraints:\n\n0 <= k <= 109\n\n", "hints": [], "exampleTestcases": "0\n5\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int preimageSizeFZF(int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int preimageSizeFZF(int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int preimageSizeFZF(int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PreimageSizeFZF(int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @return {number}\n */\nvar preimageSizeFZF = function(k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function preimageSizeFZF(k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function preimageSizeFZF($k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func preimageSizeFZF(_ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun preimageSizeFZF(k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int preimageSizeFZF(int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func preimageSizeFZF(k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @return {Integer}\ndef preimage_size_fzf(k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def preimageSizeFZF(k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn preimage_size_fzf(k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (preimage-size-fzf k)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec preimage_size_fzf(K :: integer()) -> integer().\npreimage_size_fzf(K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec preimage_size_fzf(k :: integer) :: integer\n  def preimage_size_fzf(k) do\n    \n  end\nend"}}}