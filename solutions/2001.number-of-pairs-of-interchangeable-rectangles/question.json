{"questionId": "2129", "acRate": 50.51570232644188, "difficulty": "Medium", "freqBar": 20.913320307649432, "frontendQuestionId": "2001", "paidOnly": false, "status": "ac", "title": "Number of Pairs of Interchangeable Rectangles", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "number-of-pairs-of-interchangeable-rectangles", "content": "<p>You are given <code>n</code> rectangles represented by a <strong>0-indexed</strong> 2D integer array <code>rectangles</code>, where <code>rectangles[i] = [width<sub>i</sub>, height<sub>i</sub>]</code> denotes the width and height of the <code>i<sup>th</sup></code> rectangle.</p>\n\n<p>Two rectangles <code>i</code> and <code>j</code> (<code>i &lt; j</code>) are considered <strong>interchangeable</strong> if they have the <strong>same</strong> width-to-height ratio. More formally, two rectangles are <strong>interchangeable</strong> if <code>width<sub>i</sub>/height<sub>i</sub> == width<sub>j</sub>/height<sub>j</sub></code> (using decimal division, not integer division).</p>\n\n<p>Return <em>the <strong>number</strong> of pairs of <strong>interchangeable</strong> rectangles in </em><code>rectangles</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rectangles = [[4,8],[3,6],[10,20],[15,30]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rectangles = [[4,5],[7,8]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no interchangeable pairs of rectangles.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == rectangles.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>rectangles[i].length == 2</code></li>\n\t<li><code>1 &lt;= width<sub>i</sub>, height<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Store the rectangle height and width ratio in a hashmap.", "Traverse the ratios, and for each ratio, use the frequency of the ratio to add to the total pair count."], "exampleTestcases": "[[4,8],[3,6],[10,20],[15,30]]\n[[4,5],[7,8]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long interchangeableRectangles(vector<vector<int>>& rectangles) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long interchangeableRectangles(int[][] rectangles) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def interchangeableRectangles(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long interchangeableRectangles(int** rectangles, int rectanglesSize, int* rectanglesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long InterchangeableRectangles(int[][] rectangles) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} rectangles\n * @return {number}\n */\nvar interchangeableRectangles = function(rectangles) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function interchangeableRectangles(rectangles: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Integer\n     */\n    function interchangeableRectangles($rectangles) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func interchangeableRectangles(_ rectangles: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun interchangeableRectangles(rectangles: Array<IntArray>): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int interchangeableRectangles(List<List<int>> rectangles) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func interchangeableRectangles(rectangles [][]int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} rectangles\n# @return {Integer}\ndef interchangeable_rectangles(rectangles)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def interchangeableRectangles(rectangles: Array[Array[Int]]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn interchangeable_rectangles(rectangles: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (interchangeable-rectangles rectangles)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec interchangeable_rectangles(Rectangles :: [[integer()]]) -> integer().\ninterchangeable_rectangles(Rectangles) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec interchangeable_rectangles(rectangles :: [[integer]]) :: integer\n  def interchangeable_rectangles(rectangles) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "number-of-good-pairs", "title": "Number of Good Pairs", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-nice-pairs-in-an-array", "title": "Count Nice Pairs in an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "replace-non-coprime-numbers-in-array", "title": "Replace Non-Coprime Numbers in Array", "isPaidOnly": false}]}