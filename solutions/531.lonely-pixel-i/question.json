{"question_id": "531", "problem_slug": "lonely-pixel-i", "problem_title": "Lonely Pixel I", "content": "Given an m x n picture consisting of black 'B' and white 'W' pixels, return the number of black lonely pixels.\nA black lonely pixel is a character 'B' that located at a specific position where the same row and same column don't have any other black pixels.\n \nExample 1:\n\n\nInput: picture = [[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]\nOutput: 3\nExplanation: All the three 'B's are black lonely pixels.\n\nExample 2:\n\n\nInput: picture = [[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"W\"],[\"B\",\"B\",\"B\"]]\nOutput: 0\n\n \nConstraints:\n\nm == picture.length\nn == picture[i].length\n1 <= m, n <= 500\npicture[i][j] is 'W' or 'B'.\n\n", "hints": [], "exampleTestcases": "[[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]\n[[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"W\"],[\"B\",\"B\",\"B\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLonelyPixel(vector<vector<char>>& picture) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findLonelyPixel(char[][] picture) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findLonelyPixel(self, picture):\n        \"\"\"\n        :type picture: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findLonelyPixel(self, picture: List[List[str]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findLonelyPixel(char** picture, int pictureSize, int* pictureColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindLonelyPixel(char[][] picture) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[][]} picture\n * @return {number}\n */\nvar findLonelyPixel = function(picture) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findLonelyPixel(picture: string[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $picture\n     * @return Integer\n     */\n    function findLonelyPixel($picture) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findLonelyPixel(_ picture: [[Character]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findLonelyPixel(picture: Array<CharArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findLonelyPixel(List<List<String>> picture) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findLonelyPixel(picture [][]byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[][]} picture\n# @return {Integer}\ndef find_lonely_pixel(picture)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findLonelyPixel(picture: Array[Array[Char]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_lonely_pixel(picture: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-lonely-pixel picture)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_lonely_pixel(Picture :: [[char()]]) -> integer().\nfind_lonely_pixel(Picture) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_lonely_pixel(picture :: [[char]]) :: integer\n  def find_lonely_pixel(picture) do\n    \n  end\nend"}}}