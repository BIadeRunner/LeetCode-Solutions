{"question_id": "807", "problem_slug": "custom-sort-string", "problem_title": "Custom Sort String", "content": "You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.\n \nExample 1:\n\nInput:   order = \"cba\", s = \"abcd\" \nOutput:   \"cbad\" \nExplanation:  \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\".\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n\nExample 2:\n\nInput:   order = \"bcafg\", s = \"abcd\" \nOutput:   \"bcad\" \nExplanation:  The characters \"b\", \"c\", and \"a\" from order dictate the order for the characters in s. The character \"d\" in s does not appear in order, so its position is flexible.\nFollowing the order of appearance in order, \"b\", \"c\", and \"a\" from s should be arranged as \"b\", \"c\", \"a\". \"d\" can be placed at any position since it's not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\", \"c\", \"a\" maintain their order.\n\n \nConstraints:\n\n1 <= order.length <= 26\n1 <= s.length <= 200\norder and s consist of lowercase English letters.\nAll the characters of order are unique.\n\n", "hints": [], "exampleTestcases": "\"cba\"\n\"abcd\"\n\"bcafg\"\n\"abcd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string customSortString(string order, string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String customSortString(String order, String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def customSortString(self, order, s):\n        \"\"\"\n        :type order: str\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def customSortString(self, order: str, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* customSortString(char* order, char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string CustomSortString(string order, string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} order\n * @param {string} s\n * @return {string}\n */\nvar customSortString = function(order, s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function customSortString(order: string, s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $order\n     * @param String $s\n     * @return String\n     */\n    function customSortString($order, $s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func customSortString(_ order: String, _ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun customSortString(order: String, s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String customSortString(String order, String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func customSortString(order string, s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} order\n# @param {String} s\n# @return {String}\ndef custom_sort_string(order, s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def customSortString(order: String, s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn custom_sort_string(order: String, s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (custom-sort-string order s)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec custom_sort_string(Order :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ncustom_sort_string(Order, S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec custom_sort_string(order :: String.t, s :: String.t) :: String.t\n  def custom_sort_string(order, s) do\n    \n  end\nend"}}}