{"question_id": "916", "problem_slug": "decoded-string-at-index", "problem_title": "Decoded String at Index", "content": "You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\nIf the character read is a letter, that letter is written onto the tape.\nIf the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\n\nGiven an integer k, return the kth letter (1-indexed) in the decoded string.\n \nExample 1:\n\nInput: s = \"leet2code3\", k = 10\nOutput: \"o\"\nExplanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\".\n\nExample 2:\n\nInput: s = \"ha22\", k = 5\nOutput: \"h\"\nExplanation: The decoded string is \"hahahaha\".\nThe 5th letter is \"h\".\n\nExample 3:\n\nInput: s = \"a2345678999999999999999\", k = 1\nOutput: \"a\"\nExplanation: The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1st letter is \"a\".\n\n \nConstraints:\n\n2 <= s.length <= 100\ns consists of lowercase English letters and digits 2 through 9.\ns starts with a letter.\n1 <= k <= 109\nIt is guaranteed that k is less than or equal to the length of the decoded string.\nThe decoded string is guaranteed to have less than 263 letters.\n\n", "hints": [], "exampleTestcases": "\"leet2code3\"\n10\n\"ha22\"\n5\n\"a2345678999999999999999\"\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string decodeAtIndex(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String decodeAtIndex(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def decodeAtIndex(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def decodeAtIndex(self, s: str, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* decodeAtIndex(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string DecodeAtIndex(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar decodeAtIndex = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function decodeAtIndex(s: string, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function decodeAtIndex($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func decodeAtIndex(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun decodeAtIndex(s: String, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String decodeAtIndex(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func decodeAtIndex(s string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def decodeAtIndex(s: String, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn decode_at_index(s: String, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (decode-at-index s k)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec decode_at_index(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\ndecode_at_index(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec decode_at_index(s :: String.t, k :: integer) :: String.t\n  def decode_at_index(s, k) do\n    \n  end\nend"}}}