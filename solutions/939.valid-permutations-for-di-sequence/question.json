{"question_id": "939", "problem_slug": "valid-permutations-for-di-sequence", "problem_title": "Valid Permutations for DI Sequence", "content": "You are given a string s of length n where s[i] is either:\n\n'D' means decreasing, or\n'I' means increasing.\n\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n\nIf s[i] == 'D', then perm[i] > perm[i + 1], and\nIf s[i] == 'I', then perm[i] < perm[i + 1].\n\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: s = \"DID\"\nOutput: 5\nExplanation: The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\nExample 2:\n\nInput: s = \"D\"\nOutput: 1\n\n \nConstraints:\n\nn == s.length\n1 <= n <= 200\ns[i] is either 'I' or 'D'.\n\n", "hints": [], "exampleTestcases": "\"DID\"\n\"D\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numPermsDISequence(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numPermsDISequence(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numPermsDISequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numPermsDISequence(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numPermsDISequence(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumPermsDISequence(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numPermsDISequence = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numPermsDISequence(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numPermsDISequence($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numPermsDISequence(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numPermsDISequence(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numPermsDISequence(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numPermsDISequence(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef num_perms_di_sequence(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numPermsDISequence(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_perms_di_sequence(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-perms-di-sequence s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_perms_di_sequence(S :: unicode:unicode_binary()) -> integer().\nnum_perms_di_sequence(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_perms_di_sequence(s :: String.t) :: integer\n  def num_perms_di_sequence(s) do\n    \n  end\nend"}}}