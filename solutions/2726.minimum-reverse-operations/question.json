{"question_id": "2726", "problem_slug": "minimum-reverse-operations", "problem_title": "Minimum Reverse Operations", "content": "You are given an integer n and an integer p representing an array arr of length n where all elements are set to 0's, except position p which is set to 1. You are also given an integer array banned containing restricted positions. Perform the following operation on arr:\n\nReverse a subarray with size k if the single 1 is not set to a position in banned.\n\nReturn an integer array answer with n results where the ith result is the minimum number of operations needed to bring the single 1 to position i in arr, or -1 if it is impossible.\n \nExample 1:\n\nInput: n = 4, p = 0, banned = [1,2], k = 4\nOutput: [0,-1,-1,1]\nExplanation:\n\nInitially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\nWe can never place 1 on the banned positions, so the answer for positions 1 and 2 is -1.\nPerform the operation of size 4 to reverse the whole array.\nAfter a single operation 1 is at position 3 so the answer for position 3 is 1.\n\n\nExample 2:\n\nInput: n = 5, p = 0, banned = [2,4], k = 3\nOutput: [0,-1,-1,-1,-1]\nExplanation:\n\nInitially 1 is placed at position 0 so the number of operations we need for position 0 is 0.\nWe cannot perform the operation on the subarray positions [0, 2] because position 2 is in banned.\nBecause 1 cannot be set at position 2, it is impossible to set 1 at other positions in more operations.\n\n\nExample 3:\n\nInput: n = 4, p = 2, banned = [0,1,3], k = 1\nOutput: [-1,-1,0,-1]\nExplanation:\nPerform operations of size 1 and 1 never changes its position.\n\n \nConstraints:\n\n1 <= n <= 105\n0 <= p <= n - 1\n0 <= banned.length <= n - 1\n0 <= banned[i] <= n - 1\n1 <= k <= n \nbanned[i] != p\nall values in banned are unique \n\n", "hints": ["Can we use a breadth-first search to find the minimum number of operations?", "Find the beginning and end indices of the subarray of size k that can be reversed to bring 1 to a particular position.", "Can we visit every index or do we need to consider the parity of k?"], "exampleTestcases": "4\n0\n[1,2]\n4\n5\n0\n[2,4]\n3\n4\n2\n[0,1,3]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] minReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minReverseOperations(self, n, p, banned, k):\n        \"\"\"\n        :type n: int\n        :type p: int\n        :type banned: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minReverseOperations(int n, int p, int* banned, int bannedSize, int k, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] MinReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} p\n * @param {number[]} banned\n * @param {number} k\n * @return {number[]}\n */\nvar minReverseOperations = function(n, p, banned, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minReverseOperations(n: number, p: number, banned: number[], k: number): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $p\n     * @param Integer[] $banned\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function minReverseOperations($n, $p, $banned, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minReverseOperations(_ n: Int, _ p: Int, _ banned: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minReverseOperations(n: Int, p: Int, banned: IntArray, k: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> minReverseOperations(int n, int p, List<int> banned, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minReverseOperations(n int, p int, banned []int, k int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} p\n# @param {Integer[]} banned\n# @param {Integer} k\n# @return {Integer[]}\ndef min_reverse_operations(n, p, banned, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minReverseOperations(n: Int, p: Int, banned: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_reverse_operations(n: i32, p: i32, banned: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-reverse-operations n p banned k)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_reverse_operations(N :: integer(), P :: integer(), Banned :: [integer()], K :: integer()) -> [integer()].\nmin_reverse_operations(N, P, Banned, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_reverse_operations(n :: integer, p :: integer, banned :: [integer], k :: integer) :: [integer]\n  def min_reverse_operations(n, p, banned, k) do\n    \n  end\nend"}}}