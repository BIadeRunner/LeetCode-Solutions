{"questionId": "2726", "acRate": 16.662988302802916, "difficulty": "Hard", "freqBar": 43.0673497537688, "frontendQuestionId": "2612", "paidOnly": false, "status": "ac", "title": "Minimum Reverse Operations", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "titleSlug": "minimum-reverse-operations", "content": "<p>You are given an integer <code>n</code> and an integer <code>p</code> representing an array <code>arr</code> of length <code>n</code> where all elements are set to 0&#39;s, except position <code>p</code> which is set to 1. You are also given an integer array <code>banned</code> containing restricted positions. Perform the following operation on <code>arr</code>:</p>\n\n<ul>\n\t<li>Reverse a <span data-keyword=\"subarray-nonempty\"><strong>subarray</strong></span> with size <code>k</code> if the single 1 is not set to a position in <code>banned</code>.</li>\n</ul>\n\n<p>Return an integer array <code>answer</code> with <code>n</code> results where the <code>i<sup>th</sup></code> result is<em> </em>the <strong>minimum</strong> number of operations needed to bring the single 1 to position <code>i</code> in <code>arr</code>, or -1 if it is impossible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, p = 0, banned = [1,2], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1,-1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.</li>\n\t<li>We can never place 1 on the banned positions, so the answer for positions 1 and 2 is -1.</li>\n\t<li>Perform the operation of size 4 to reverse the whole array.</li>\n\t<li>After a single operation 1 is at position 3 so the answer for position 3 is 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, p = 0, banned = [2,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1,-1,-1,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0.</li>\n\t<li>We cannot perform the operation on the subarray positions <code>[0, 2]</code> because position 2 is in banned.</li>\n\t<li>Because 1 cannot be set at position 2, it is impossible to set 1 at other positions in more operations.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, p = 2, banned = [0,1,3], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1,-1,0,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Perform operations of size 1 and 1 never changes its position.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= p &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= banned.length &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= banned[i] &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= k &lt;= n&nbsp;</code></li>\n\t<li><code>banned[i] != p</code></li>\n\t<li>all values in <code>banned</code>&nbsp;are <strong>unique</strong>&nbsp;</li>\n</ul>\n", "hints": ["Can we use a breadth-first search to find the minimum number of operations?", "Find the beginning and end indices of the subarray of size k that can be reversed to bring 1 to a particular position.", "Can we visit every index or do we need to consider the parity of k?"], "exampleTestcases": "4\n0\n[1,2]\n4\n5\n0\n[2,4]\n3\n4\n2\n[0,1,3]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] minReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minReverseOperations(self, n, p, banned, k):\n        \"\"\"\n        :type n: int\n        :type p: int\n        :type banned: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minReverseOperations(int n, int p, int* banned, int bannedSize, int k, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MinReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} p\n * @param {number[]} banned\n * @param {number} k\n * @return {number[]}\n */\nvar minReverseOperations = function(n, p, banned, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minReverseOperations(n: number, p: number, banned: number[], k: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $p\n     * @param Integer[] $banned\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function minReverseOperations($n, $p, $banned, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minReverseOperations(_ n: Int, _ p: Int, _ banned: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minReverseOperations(n: Int, p: Int, banned: IntArray, k: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> minReverseOperations(int n, int p, List<int> banned, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minReverseOperations(n int, p int, banned []int, k int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} p\n# @param {Integer[]} banned\n# @param {Integer} k\n# @return {Integer[]}\ndef min_reverse_operations(n, p, banned, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minReverseOperations(n: Int, p: Int, banned: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_reverse_operations(n: i32, p: i32, banned: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-reverse-operations n p banned k)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_reverse_operations(N :: integer(), P :: integer(), Banned :: [integer()], K :: integer()) -> [integer()].\nmin_reverse_operations(N, P, Banned, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_reverse_operations(n :: integer, p :: integer, banned :: [integer], k :: integer) :: [integer]\n  def min_reverse_operations(n, p, banned, k) do\n    \n  end\nend"}], "similarQuestionList": []}