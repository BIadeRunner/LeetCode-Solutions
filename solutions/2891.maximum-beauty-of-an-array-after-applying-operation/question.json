{"question_id": "2891", "problem_slug": "maximum-beauty-of-an-array-after-applying-operation", "problem_title": "Maximum Beauty of an Array After Applying Operation", "content": "You are given a 0-indexed array nums and a non-negative integer k.\nIn one operation, you can do the following:\n\nChoose an index i that hasn't been chosen before from the range [0, nums.length - 1].\nReplace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].\n\nThe beauty of the array is the length of the longest subsequence consisting of equal elements.\nReturn the maximum possible beauty of the array nums after applying the operation any number of times.\nNote that you can apply the operation to each index only once.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n \nExample 1:\n\nInput: nums = [4,6,1,2], k = 2\nOutput: 3\nExplanation: In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n\nExample 2:\n\nInput: nums = [1,1,1,1], k = 10\nOutput: 4\nExplanation: In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i], k <= 105\n\n", "hints": ["Sort the array.", "The problem becomes the following: find maximum subarray A[i … j] such that A[j] - A[i] ≤ 2 * k."], "exampleTestcases": "[4,6,1,2]\n2\n[1,1,1,1]\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumBeauty(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumBeauty(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumBeauty(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumBeauty(int* nums, int numsSize, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumBeauty(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumBeauty = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumBeauty(nums: number[], k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumBeauty($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumBeauty(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumBeauty(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumBeauty(List<int> nums, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumBeauty(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_beauty(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumBeauty(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_beauty(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-beauty nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_beauty(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_beauty(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_beauty(nums :: [integer], k :: integer) :: integer\n  def maximum_beauty(nums, k) do\n    \n  end\nend"}}}