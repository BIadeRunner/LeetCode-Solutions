{"question_id": "249", "problem_slug": "group-shifted-strings", "problem_title": "Group Shifted Strings", "content": "Perform the following shift operations on a string:\n\nRight shift: Replace every letter with the successive letter of the English alphabet, where 'z' is replaced by 'a'. For example, \"abc\" can be right-shifted to \"bcd\" or \"xyz\" can be right-shifted to \"yza\".\nLeft shift: Replace every letter with the preceding letter of the English alphabet, where 'a' is replaced by 'z'. For example, \"bcd\" can be left-shifted to \"abc\" or \"yza\" can be left-shifted to \"xyz\".\n\nWe can keep shifting the string in both directions to form an endless shifting sequence.\n\nFor example, shift \"abc\" to form the sequence: ... <-> \"abc\" <-> \"bcd\" <-> ... <-> \"xyz\" <-> \"yza\" <-> .... <-> \"zab\" <-> \"abc\" <-> ...\n\nYou are given an array of strings strings, group together all strings[i] that belong to the same shifting sequence. You may return the answer in any order.\n \nExample 1:\n\nInput: strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\nOutput: [[\"acef\"],[\"a\",\"z\"],[\"abc\",\"bcd\",\"xyz\"],[\"az\",\"ba\"]]\n\nExample 2:\n\nInput: strings = [\"a\"]\nOutput: [[\"a\"]]\n\n \nConstraints:\n\n1 <= strings.length <= 200\n1 <= strings[i].length <= 50\nstrings[i] consists of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\n[\"a\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> groupStrings(vector<string>& strings) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<String>> groupStrings(String[] strings) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def groupStrings(self, strings):\n        \"\"\"\n        :type strings: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupStrings(char** strings, int stringsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> GroupStrings(string[] strings) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} strings\n * @return {string[][]}\n */\nvar groupStrings = function(strings) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function groupStrings(strings: string[]): string[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strings\n     * @return String[][]\n     */\n    function groupStrings($strings) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func groupStrings(_ strings: [String]) -> [[String]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun groupStrings(strings: Array<String>): List<List<String>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<String>> groupStrings(List<String> strings) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func groupStrings(strings []string) [][]string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} strings\n# @return {String[][]}\ndef group_strings(strings)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def groupStrings(strings: Array[String]): List[List[String]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn group_strings(strings: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (group-strings strings)\n  (-> (listof string?) (listof (listof string?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec group_strings(Strings :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_strings(Strings) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec group_strings(strings :: [String.t]) :: [[String.t]]\n  def group_strings(strings) do\n    \n  end\nend"}}}