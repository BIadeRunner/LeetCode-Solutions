{"question_id": "3525", "problem_slug": "maximum-energy-boost-from-two-drinks", "problem_title": "Maximum Energy Boost From Two Drinks", "content": "You are given two integer arrays energyDrinkA and energyDrinkB of the same length n by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively.\nYou want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, you need to wait for one hour to cleanse your system (meaning you won't get any energy boost in that hour).\nReturn the maximum total energy boost you can gain in the next n hours.\nNote that you can start consuming either of the two energy drinks.\n \nExample 1:\n\nInput: energyDrinkA = [1,3,1], energyDrinkB = [3,1,1]\nOutput: 5\nExplanation:\nTo gain an energy boost of 5, drink only the energy drink A (or only B).\n\nExample 2:\n\nInput: energyDrinkA = [4,1,1], energyDrinkB = [1,1,3]\nOutput: 7\nExplanation:\nTo gain an energy boost of 7:\n\nDrink the energy drink A for the first hour.\nSwitch to the energy drink B and we lose the energy boost of the second hour.\nGain the energy boost of the drink B in the third hour.\n\n\n \nConstraints:\n\nn == energyDrinkA.length == energyDrinkB.length\n3 <= n <= 105\n1 <= energyDrinkA[i], energyDrinkB[i] <= 105\n\n", "hints": ["Can we solve it using dynamic programming?", "Define <code>dpA[i]</code> as the maximum energy boost if we consider only the first <code>i + 1</code> hours such that in the last hour, we drink the energy drink A.", "Similarly define <code>dpB[i]</code>.", "<code>dpA[i] = max(dpA[i - 1], dpB[i - 2]) + energyDrinkA[i]</code>", "Similarly, fill <code>dpB</code>.", "The answer is <code>max(dpA[n - 1], dpB[n - 1])</code>."], "exampleTestcases": "[1,3,1]\n[3,1,1]\n[4,1,1]\n[1,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxEnergyBoost(vector<int>& energyDrinkA, vector<int>& energyDrinkB) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxEnergyBoost(self, energyDrinkA, energyDrinkB):\n        \"\"\"\n        :type energyDrinkA: List[int]\n        :type energyDrinkB: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxEnergyBoost(int* energyDrinkA, int energyDrinkASize, int* energyDrinkB, int energyDrinkBSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} energyDrinkA\n * @param {number[]} energyDrinkB\n * @return {number}\n */\nvar maxEnergyBoost = function(energyDrinkA, energyDrinkB) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxEnergyBoost(energyDrinkA: number[], energyDrinkB: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $energyDrinkA\n     * @param Integer[] $energyDrinkB\n     * @return Integer\n     */\n    function maxEnergyBoost($energyDrinkA, $energyDrinkB) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxEnergyBoost(_ energyDrinkA: [Int], _ energyDrinkB: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxEnergyBoost(energyDrinkA: IntArray, energyDrinkB: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxEnergyBoost(List<int> energyDrinkA, List<int> energyDrinkB) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxEnergyBoost(energyDrinkA []int, energyDrinkB []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} energy_drink_a\n# @param {Integer[]} energy_drink_b\n# @return {Integer}\ndef max_energy_boost(energy_drink_a, energy_drink_b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxEnergyBoost(energyDrinkA: Array[Int], energyDrinkB: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_energy_boost(energy_drink_a: Vec<i32>, energy_drink_b: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-energy-boost energyDrinkA energyDrinkB)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_energy_boost(EnergyDrinkA :: [integer()], EnergyDrinkB :: [integer()]) -> integer().\nmax_energy_boost(EnergyDrinkA, EnergyDrinkB) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_energy_boost(energy_drink_a :: [integer], energy_drink_b :: [integer]) :: integer\n  def max_energy_boost(energy_drink_a, energy_drink_b) do\n    \n  end\nend"}}}