{"question_id": "2147", "problem_slug": "the-score-of-students-solving-math-expression", "problem_title": "The Score of Students Solving Math Expression", "content": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:\n\nCompute multiplication, reading from left to right; Then,\nCompute addition, reading from left to right.\n\nYou are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:\n\nIf an answer equals the correct answer of the expression, this student will be rewarded 5 points;\nOtherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;\nOtherwise, this student will be rewarded 0 points.\n\nReturn the sum of the points of the students.\n \nExample 1:\n\n\nInput: s = \"7+3*1*2\", answers = [20,13,42]\nOutput: 7\nExplanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.\n\nExample 2:\n\nInput: s = \"3+5*2\", answers = [13,0,10,13,13,16,16]\nOutput: 19\nExplanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]\nA student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]\nThe points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.\n\nExample 3:\n\nInput: s = \"6+0*1\", answers = [12,9,6,4,8,6]\nOutput: 10\nExplanation: The correct answer of the expression is 6.\nIf a student had incorrectly done (6+0)*1, the answer would also be 6.\nBy the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.\nThe points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.\n\n \nConstraints:\n\n3 <= s.length <= 31\ns represents a valid expression that contains only digits 0-9, '+', and '*' only.\nAll the integer operands in the expression are in the inclusive range [0, 9].\n1 <= The count of all operators ('+' and '*') in the math expression <= 15\nTest data are generated such that the correct answer of the expression is in the range of [0, 1000].\nn == answers.length\n1 <= n <= 104\n0 <= answers[i] <= 1000\n\n", "hints": ["The number of operators in the equation is less. Could you find the right answer then generate all possible answers using different orders of operations?", "Divide the equation into blocks separated by the operators, and use memoization on the results of blocks for optimization.", "Use set and the max limit of the answer for further optimization."], "exampleTestcases": "\"7+3*1*2\"\n[20,13,42]\n\"3+5*2\"\n[13,0,10,13,13,16,16]\n\"6+0*1\"\n[12,9,6,4,8,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int scoreOfStudents(string s, vector<int>& answers) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int scoreOfStudents(String s, int[] answers) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def scoreOfStudents(self, s, answers):\n        \"\"\"\n        :type s: str\n        :type answers: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def scoreOfStudents(self, s: str, answers: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int scoreOfStudents(char* s, int* answers, int answersSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ScoreOfStudents(string s, int[] answers) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number[]} answers\n * @return {number}\n */\nvar scoreOfStudents = function(s, answers) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function scoreOfStudents(s: string, answers: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[] $answers\n     * @return Integer\n     */\n    function scoreOfStudents($s, $answers) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func scoreOfStudents(_ s: String, _ answers: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun scoreOfStudents(s: String, answers: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int scoreOfStudents(String s, List<int> answers) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func scoreOfStudents(s string, answers []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[]} answers\n# @return {Integer}\ndef score_of_students(s, answers)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def scoreOfStudents(s: String, answers: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn score_of_students(s: String, answers: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (score-of-students s answers)\n  (-> string? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec score_of_students(S :: unicode:unicode_binary(), Answers :: [integer()]) -> integer().\nscore_of_students(S, Answers) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec score_of_students(s :: String.t, answers :: [integer]) :: integer\n  def score_of_students(s, answers) do\n    \n  end\nend"}}}