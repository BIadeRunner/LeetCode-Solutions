{"question_id": "1685", "problem_slug": "stone-game-v", "problem_title": "Stone Game V", "content": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's is initially zero.\nReturn the maximum score that Alice can obtain.\n \nExample 1:\n\nInput: stoneValue = [6,2,3,4,5,5]\nOutput: 18\nExplanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.\n\nExample 2:\n\nInput: stoneValue = [7,7,7,7,7,7,7]\nOutput: 28\n\nExample 3:\n\nInput: stoneValue = [4]\nOutput: 0\n\n \nConstraints:\n\n1 <= stoneValue.length <= 500\n1 <= stoneValue[i] <= 106\n\n", "hints": ["We need to try all possible divisions for the current row to get the max score.", "As calculating all possible divisions will lead us to calculate some sub-problems more than once, we need to think of dynamic programming."], "exampleTestcases": "[6,2,3,4,5,5]\n[7,7,7,7,7,7,7]\n[4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int stoneGameV(vector<int>& stoneValue) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int stoneGameV(int[] stoneValue) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def stoneGameV(self, stoneValue):\n        \"\"\"\n        :type stoneValue: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def stoneGameV(self, stoneValue: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int stoneGameV(int* stoneValue, int stoneValueSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int StoneGameV(int[] stoneValue) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} stoneValue\n * @return {number}\n */\nvar stoneGameV = function(stoneValue) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function stoneGameV(stoneValue: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stoneValue\n     * @return Integer\n     */\n    function stoneGameV($stoneValue) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func stoneGameV(_ stoneValue: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun stoneGameV(stoneValue: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int stoneGameV(List<int> stoneValue) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func stoneGameV(stoneValue []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} stone_value\n# @return {Integer}\ndef stone_game_v(stone_value)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def stoneGameV(stoneValue: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn stone_game_v(stone_value: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (stone-game-v stoneValue)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec stone_game_v(StoneValue :: [integer()]) -> integer().\nstone_game_v(StoneValue) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec stone_game_v(stone_value :: [integer]) :: integer\n  def stone_game_v(stone_value) do\n    \n  end\nend"}}}