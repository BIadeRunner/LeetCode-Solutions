{"question_id": "3209", "problem_slug": "minimum-number-of-coins-for-fruits", "problem_title": "Minimum Number of Coins for Fruits", "content": "You are given an integer array prices where prices[i] denotes the number of coins needed to purchase the ith fruit.\nThe fruit market has the following reward for each fruit:\n\nIf you purchase the ith fruit at prices[i] coins, you can get any number of the next (i + 1) fruits for free.\n\nNote that even if you can take fruit j for free, you can still purchase it for prices[j] coins to receive its reward.\nReturn the minimum number of coins needed to acquire all the fruits.\n \nExample 1:\n\nInput: prices = [3,1,2]\nOutput: 4\nExplanation:\n\nPurchase the 1st fruit with prices[0] = 3 coins, you are allowed to take the 2nd fruit for free.\nPurchase the 2nd fruit with prices[1] = 1 coin, you are allowed to take the 3rd fruit for free.\nTake the 3rd fruit for free.\n\nNote that even though you could take the 2nd fruit for free as a reward of buying 1st fruit, you purchase it to receive its reward, which is more optimal.\n\nExample 2:\n\nInput: prices = [1,10,1,1]\nOutput: 2\nExplanation:\n\nPurchase the 1st fruit with prices[0] = 1 coin, you are allowed to take the 2nd fruit for free.\nTake the 2nd fruit for free.\nPurchase the 3rd fruit for prices[2] = 1 coin, you are allowed to take the 4th fruit for free.\nTake the 4th fruit for free.\n\n\nExample 3:\n\nInput: prices = [26,18,6,12,49,7,45,45]\nOutput: 39\nExplanation:\n\nPurchase the 1st fruit with prices[0] = 26 coin, you are allowed to take the 2nd fruit for free.\nTake the 2nd fruit for free.\nPurchase the 3rd fruit for prices[2] = 6 coin, you are allowed to take the 4th, 5th and 6th (the next three) fruits for free.\nTake the 4th fruit for free.\nTake the 5th fruit for free.\nPurchase the 6th fruit with prices[5] = 7 coin, you are allowed to take the 8th and 9th fruit for free.\nTake the 7th fruit for free.\nTake the 8th fruit for free.\n\nNote that even though you could take the 6th fruit for free as a reward of buying 3rd fruit, you purchase it to receive its reward, which is more optimal.\n\n \nConstraints:\n\n1 <= prices.length <= 1000\n1 <= prices[i] <= 105\n\n", "hints": ["The intended solution uses Dynamic Programming.", "Let <code>dp[i]</code> denote the minimum number of coins, such that we bought <code>i<sup>th</sup></code> fruit and acquired all the fruits in the range <code>[i...n]</code>.", "<code>dp[i] = min(dp[i], dp[j] + prices[i]) </code>, where <code>j</code> is in the range <code>[i + 1, i + 1 + i]</code>."], "exampleTestcases": "[3,1,2]\n[1,10,1,1]\n[26,18,6,12,49,7,45,45]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCoins(vector<int>& prices) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumCoins(int[] prices) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCoins(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCoins(self, prices: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumCoins(int* prices, int pricesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCoins(int[] prices) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar minimumCoins = function(prices) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCoins(prices: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function minimumCoins($prices) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCoins(_ prices: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCoins(prices: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumCoins(List<int> prices) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCoins(prices []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef minimum_coins(prices)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCoins(prices: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_coins(prices: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-coins prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_coins(Prices :: [integer()]) -> integer().\nminimum_coins(Prices) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_coins(prices :: [integer]) :: integer\n  def minimum_coins(prices) do\n    \n  end\nend"}}}