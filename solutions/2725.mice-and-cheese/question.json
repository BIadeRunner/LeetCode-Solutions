{"question_id": "2725", "problem_slug": "mice-and-cheese", "problem_title": "Mice and Cheese", "content": "There are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse.\nA point of the cheese with index i (0-indexed) is:\n\nreward1[i] if the first mouse eats it.\nreward2[i] if the second mouse eats it.\n\nYou are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k.\nReturn the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.\n \nExample 1:\n\nInput: reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2\nOutput: 15\nExplanation: In this example, the first mouse eats the 2nd (0-indexed) and the 3rd types of cheese, and the second mouse eats the 0th and the 1st types of cheese.\nThe total points are 4 + 4 + 3 + 4 = 15.\nIt can be proven that 15 is the maximum total points that the mice can achieve.\n\nExample 2:\n\nInput: reward1 = [1,1], reward2 = [1,1], k = 2\nOutput: 2\nExplanation: In this example, the first mouse eats the 0th (0-indexed) and 1st types of cheese, and the second mouse does not eat any cheese.\nThe total points are 1 + 1 = 2.\nIt can be proven that 2 is the maximum total points that the mice can achieve.\n\n \nConstraints:\n\n1 <= n == reward1.length == reward2.length <= 105\n1 <= reward1[i], reward2[i] <= 1000\n0 <= k <= n\n\n", "hints": ["The intended solution uses greedy approach.", "Imagine at first that the second mouse eats all the cheese, then we should choose k types of cheese with the maximum sum of - reward2[i] + reward1[i]."], "exampleTestcases": "[1,1,3,4]\n[4,4,1,1]\n2\n[1,1]\n[1,1]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int miceAndCheese(int[] reward1, int[] reward2, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def miceAndCheese(self, reward1, reward2, k):\n        \"\"\"\n        :type reward1: List[int]\n        :type reward2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def miceAndCheese(self, reward1: List[int], reward2: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int miceAndCheese(int* reward1, int reward1Size, int* reward2, int reward2Size, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MiceAndCheese(int[] reward1, int[] reward2, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} reward1\n * @param {number[]} reward2\n * @param {number} k\n * @return {number}\n */\nvar miceAndCheese = function(reward1, reward2, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function miceAndCheese(reward1: number[], reward2: number[], k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $reward1\n     * @param Integer[] $reward2\n     * @param Integer $k\n     * @return Integer\n     */\n    function miceAndCheese($reward1, $reward2, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func miceAndCheese(_ reward1: [Int], _ reward2: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun miceAndCheese(reward1: IntArray, reward2: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int miceAndCheese(List<int> reward1, List<int> reward2, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func miceAndCheese(reward1 []int, reward2 []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} reward1\n# @param {Integer[]} reward2\n# @param {Integer} k\n# @return {Integer}\ndef mice_and_cheese(reward1, reward2, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def miceAndCheese(reward1: Array[Int], reward2: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn mice_and_cheese(reward1: Vec<i32>, reward2: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (mice-and-cheese reward1 reward2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec mice_and_cheese(Reward1 :: [integer()], Reward2 :: [integer()], K :: integer()) -> integer().\nmice_and_cheese(Reward1, Reward2, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec mice_and_cheese(reward1 :: [integer], reward2 :: [integer], k :: integer) :: integer\n  def mice_and_cheese(reward1, reward2, k) do\n    \n  end\nend"}}}