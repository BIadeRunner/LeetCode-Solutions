{"questionId": "527", "acRate": 61.28006575532099, "difficulty": "Hard", "freqBar": 30.662018577204552, "frontendQuestionId": "527", "paidOnly": true, "status": "ac", "title": "Word Abbreviation", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Trie", "id": "VG9waWNUYWdOb2RlOjI3", "slug": "trie"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "word-abbreviation", "content": "<p>Given an array of <strong>distinct</strong> strings <code>words</code>, return <em>the minimal possible <strong>abbreviations</strong> for every word</em>.</p>\n\n<p>The following are the rules for a string abbreviation:</p>\n\n<ol>\n\t<li>The <strong>initial</strong> abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.</li>\n\t<li>If more than one word shares the <strong>same</strong> abbreviation, then perform the following operation:\n\t<ul>\n\t\t<li><strong>Increase</strong> the prefix (characters in the first part) of each of their abbreviations by <code>1</code>.\n\t\t<ul>\n\t\t\t<li>For example, say you start with the words <code>[&quot;abcdef&quot;,&quot;abndef&quot;]</code> both initially abbreviated as <code>&quot;a4f&quot;</code>. Then, a sequence of operations would be <code>[&quot;a4f&quot;,&quot;a4f&quot;]</code> -&gt; <code>[&quot;ab3f&quot;,&quot;ab3f&quot;]</code> -&gt; <code>[&quot;abc2f&quot;,&quot;abn2f&quot;]</code>.</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>This operation is repeated until every abbreviation is <strong>unique</strong>.</li>\n\t</ul>\n\t</li>\n\t<li>At the end, if an abbreviation did not make a word shorter, then keep it as the original word.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n<strong>Output:</strong> [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> words = [\"aa\",\"aaa\"]\n<strong>Output:</strong> [\"aa\",\"aaa\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 400</code></li>\n\t<li><code>2 &lt;= words[i].length &lt;= 400</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n[\"aa\",\"aaa\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> wordsAbbreviation(vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> wordsAbbreviation(List<String> words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wordsAbbreviation(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordsAbbreviation(char** words, int wordsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> WordsAbbreviation(IList<string> words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar wordsAbbreviation = function(words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function wordsAbbreviation(words: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function wordsAbbreviation($words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wordsAbbreviation(_ words: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wordsAbbreviation(words: List<String>): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> wordsAbbreviation(List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func wordsAbbreviation(words []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef words_abbreviation(words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wordsAbbreviation(words: List[String]): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn words_abbreviation(words: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (words-abbreviation words)\n  (-> (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec words_abbreviation(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nwords_abbreviation(Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec words_abbreviation(words :: [String.t]) :: [String.t]\n  def words_abbreviation(words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "valid-word-abbreviation", "title": "Valid Word Abbreviation", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "minimum-unique-word-abbreviation", "title": "Minimum Unique Word Abbreviation", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "check-if-a-string-is-an-acronym-of-words", "title": "Check if a String Is an Acronym of Words", "isPaidOnly": false}]}