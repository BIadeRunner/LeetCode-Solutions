{"question_id": "527", "problem_slug": "word-abbreviation", "problem_title": "Word Abbreviation", "content": "Given an array of distinct strings words, return the minimal possible abbreviations for every word.\nThe following are the rules for a string abbreviation:\n\nThe initial abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\nIf more than one word shares the same abbreviation, then perform the following operation:\n\t\nIncrease the prefix (characters in the first part) of each of their abbreviations by 1.\n\t\t\nFor example, say you start with the words [\"abcdef\",\"abndef\"] both initially abbreviated as \"a4f\". Then, a sequence of operations would be [\"a4f\",\"a4f\"] -> [\"ab3f\",\"ab3f\"] -> [\"abc2f\",\"abn2f\"].\n\n\nThis operation is repeated until every abbreviation is unique.\n\n\nAt the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n \nExample 1:\nInput: words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\nOutput: [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\nExample 2:\nInput: words = [\"aa\",\"aaa\"]\nOutput: [\"aa\",\"aaa\"]\n\n \nConstraints:\n\n1 <= words.length <= 400\n2 <= words[i].length <= 400\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.\n\n", "hints": [], "exampleTestcases": "[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n[\"aa\",\"aaa\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> wordsAbbreviation(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> wordsAbbreviation(List<String> words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wordsAbbreviation(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordsAbbreviation(char** words, int wordsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> WordsAbbreviation(IList<string> words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar wordsAbbreviation = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wordsAbbreviation(words: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function wordsAbbreviation($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wordsAbbreviation(_ words: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wordsAbbreviation(words: List<String>): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> wordsAbbreviation(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wordsAbbreviation(words []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef words_abbreviation(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wordsAbbreviation(words: List[String]): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn words_abbreviation(words: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (words-abbreviation words)\n  (-> (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec words_abbreviation(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nwords_abbreviation(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec words_abbreviation(words :: [String.t]) :: [String.t]\n  def words_abbreviation(words) do\n    \n  end\nend"}}}