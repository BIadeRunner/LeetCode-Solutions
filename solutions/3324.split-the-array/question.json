{"question_id": "3324", "problem_slug": "split-the-array", "problem_title": "Split the Array", "content": "You are given an integer array nums of even length. You have to split the array into two parts nums1 and nums2 such that:\n\nnums1.length == nums2.length == nums.length / 2.\nnums1 should contain distinct elements.\nnums2 should also contain distinct elements.\n\nReturn true if it is possible to split the array, and false otherwise.\n \nExample 1:\n\nInput: nums = [1,1,2,2,3,4]\nOutput: true\nExplanation: One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4].\n\nExample 2:\n\nInput: nums = [1,1,1,1]\nOutput: false\nExplanation: The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false.\n\n \nConstraints:\n\n1 <= nums.length <= 100\nnums.length % 2 == 0 \n1 <= nums[i] <= 100\n\n", "hints": ["It’s impossible if the same number occurs more than twice. So just check the frequency of each value."], "exampleTestcases": "[1,1,2,2,3,4]\n[1,1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPossibleToSplit(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isPossibleToSplit(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isPossibleToSplit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isPossibleToSplit(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isPossibleToSplit(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsPossibleToSplit(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossibleToSplit = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isPossibleToSplit(nums: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossibleToSplit($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isPossibleToSplit(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isPossibleToSplit(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isPossibleToSplit(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isPossibleToSplit(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible_to_split(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isPossibleToSplit(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_possible_to_split(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-possible-to-split nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_possible_to_split(Nums :: [integer()]) -> boolean().\nis_possible_to_split(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_possible_to_split(nums :: [integer]) :: boolean\n  def is_possible_to_split(nums) do\n    \n  end\nend"}}}