{"questionId": "1561", "acRate": 65.1015651015651, "difficulty": "Medium", "freqBar": 39.86072618595618, "frontendQuestionId": "1451", "paidOnly": false, "status": "ac", "title": "Rearrange Words in a Sentence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "rearrange-words-in-a-sentence", "content": "<p>Given a sentence&nbsp;<code>text</code> (A&nbsp;<em>sentence</em>&nbsp;is a string of space-separated words) in the following format:</p>\n\n<ul>\n\t<li>First letter is in upper case.</li>\n\t<li>Each word in <code>text</code> are separated by a single space.</li>\n</ul>\n\n<p>Your task is to rearrange the words in text such that&nbsp;all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.</p>\n\n<p>Return the new text&nbsp;following the format shown above.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;Leetcode is cool&quot;\n<strong>Output:</strong> &quot;Is cool leetcode&quot;\n<strong>Explanation: </strong>There are 3 words, &quot;Leetcode&quot; of length 8, &quot;is&quot; of length 2 and &quot;cool&quot; of length 4.\nOutput is ordered by length and the new first word starts with capital letter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;Keep calm and code on&quot;\n<strong>Output:</strong> &quot;On and keep calm code&quot;\n<strong>Explanation: </strong>Output is ordered as follows:\n&quot;On&quot; 2 letters.\n&quot;and&quot; 3 letters.\n&quot;keep&quot; 4 letters in case of tie order by position in original text.\n&quot;calm&quot; 4 letters.\n&quot;code&quot; 4 letters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;To be or not to be&quot;\n<strong>Output:</strong> &quot;To be or to be not&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>text</code> begins with a capital letter and then contains lowercase letters and single space between words.</li>\n\t<li><code>1 &lt;= text.length &lt;= 10^5</code></li>\n</ul>\n", "hints": ["Store each word and their relative position. Then, sort them by length of words in case of tie by their original order."], "exampleTestcases": "\"Leetcode is cool\"\n\"Keep calm and code on\"\n\"To be or not to be\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string arrangeWords(string text) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String arrangeWords(String text) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arrangeWords(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* arrangeWords(char* text) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ArrangeWords(string text) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {string}\n */\nvar arrangeWords = function(text) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arrangeWords(text: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return String\n     */\n    function arrangeWords($text) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arrangeWords(_ text: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arrangeWords(text: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String arrangeWords(String text) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func arrangeWords(text string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} text\n# @return {String}\ndef arrange_words(text)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arrangeWords(text: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn arrange_words(text: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (arrange-words text)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec arrange_words(Text :: unicode:unicode_binary()) -> unicode:unicode_binary().\narrange_words(Text) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec arrange_words(text :: String.t) :: String.t\n  def arrange_words(text) do\n    \n  end\nend"}], "similarQuestionList": []}