{"question_id": "2781", "problem_slug": "undefined-to-null", "problem_title": "Undefined to Null", "content": "Given a deeply nested object or array obj, return the object obj with any undefined values replaced by null.\nundefined values are handled differently than null values when objects are converted to a JSON string using JSON.stringify(). This function helps ensure serialized data is free of unexpected errors.\n \nExample 1:\n\nInput: obj = {\"a\": undefined, \"b\": 3}\nOutput: {\"a\": null, \"b\": 3}\nExplanation: The value for obj.a has been changed from undefined to null\n\nExample 2:\n\nInput: obj = {\"a\": undefined, \"b\": [\"a\", undefined]}\nOutput: {\"a\": null,\"b\": [\"a\", null]}\nExplanation: The values for obj.a and obj.b[1] have been changed from undefined to null\n\n \nConstraints:\n\nobj is a valid JSON object or array\n2 <= JSON.stringify(obj).length <= 105\n\n", "hints": [], "exampleTestcases": "{\"a\": undefined, \"b\":3}\n{\"a\": undefined, \"b\":[\"a\", undefined]}", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Object|Array} obj\n * @return {Object|Array}\n */\nvar undefinedToNull = function(obj) {\n    \n};\n\n/**\n * undefinedToNull({\"a\": undefined, \"b\": 3}) // {\"a\": null, \"b\": 3}\n * undefinedToNull([undefined, undefined]) // [null, null] \n */"}, "TypeScript": {"langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Value = undefined | null | boolean | number | string | Value[] | { [key: string]: Value };\n\ntype Obj1 = Record<string, Value> | Array<Value>\ntype Obj2 = Record<string, JSONValue> | Array<JSONValue>\n\nfunction undefinedToNull(obj: Obj1): Obj2 {\n    \n};\n\n/**\n * undefinedToNull({\"a\": undefined, \"b\": 3}) // {\"a\": null, \"b\": 3}\n * undefinedToNull([undefined, undefined]) // [null, null] \n */"}}}