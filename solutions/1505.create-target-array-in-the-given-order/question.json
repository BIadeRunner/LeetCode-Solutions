{"question_id": "1505", "problem_slug": "create-target-array-in-the-given-order", "problem_title": "Create Target Array in the Given Order", "content": "Given two arrays of integers nums and index. Your task is to create target array under the following rules:\n\nInitially target array is empty.\nFrom left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.\nRepeat the previous step until there are no elements to read in nums and index.\n\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.\n \nExample 1:\n\nInput: nums = [0,1,2,3,4], index = [0,1,2,2,1]\nOutput: [0,4,1,3,2]\nExplanation:\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]\n\nExample 2:\n\nInput: nums = [1,2,3,4,0], index = [0,1,2,3,0]\nOutput: [0,1,2,3,4]\nExplanation:\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]\n\nExample 3:\n\nInput: nums = [1], index = [0]\nOutput: [1]\n\n \nConstraints:\n\n1 <= nums.length, index.length <= 100\nnums.length == index.length\n0 <= nums[i] <= 100\n0 <= index[i] <= i\n\n", "hints": ["Simulate the process and fill corresponding numbers in the designated spots."], "exampleTestcases": "[0,1,2,3,4]\n[0,1,2,2,1]\n[1,2,3,4,0]\n[0,1,2,3,0]\n[1]\n[0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] createTargetArray(int[] nums, int[] index) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def createTargetArray(self, nums, index):\n        \"\"\"\n        :type nums: List[int]\n        :type index: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* createTargetArray(int* nums, int numsSize, int* index, int indexSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] CreateTargetArray(int[] nums, int[] index) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} index\n * @return {number[]}\n */\nvar createTargetArray = function(nums, index) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function createTargetArray(nums: number[], index: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $index\n     * @return Integer[]\n     */\n    function createTargetArray($nums, $index) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func createTargetArray(_ nums: [Int], _ index: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun createTargetArray(nums: IntArray, index: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> createTargetArray(List<int> nums, List<int> index) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func createTargetArray(nums []int, index []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} index\n# @return {Integer[]}\ndef create_target_array(nums, index)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def createTargetArray(nums: Array[Int], index: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn create_target_array(nums: Vec<i32>, index: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (create-target-array nums index)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec create_target_array(Nums :: [integer()], Index :: [integer()]) -> [integer()].\ncreate_target_array(Nums, Index) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec create_target_array(nums :: [integer], index :: [integer]) :: [integer]\n  def create_target_array(nums, index) do\n    \n  end\nend"}}}