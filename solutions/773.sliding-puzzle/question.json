{"questionId": "787", "acRate": 65.26055904526771, "difficulty": "Hard", "freqBar": 69.14500713954526, "frontendQuestionId": "773", "paidOnly": false, "status": "ac", "title": "Sliding Puzzle", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "sliding-puzzle", "content": "<p>On an <code>2 x 3</code> board, there are five tiles labeled from <code>1</code> to <code>5</code>, and an empty square represented by <code>0</code>. A <strong>move</strong> consists of choosing <code>0</code> and a 4-directionally adjacent number and swapping it.</p>\n\n<p>The state of the board is solved if and only if the board is <code>[[1,2,3],[4,5,0]]</code>.</p>\n\n<p>Given the puzzle board <code>board</code>, return <em>the least number of moves required so that the state of the board is solved</em>. If it is impossible for the state of the board to be solved, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[4,0,5]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Swap the 0 and the 5 in one move.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[5,4,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No number of moves will make the board solved.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[4,1,2],[5,0,3]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 2</code></li>\n\t<li><code>board[i].length == 3</code></li>\n\t<li><code>0 &lt;= board[i][j] &lt;= 5</code></li>\n\t<li>Each value <code>board[i][j]</code> is <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."], "exampleTestcases": "[[1,2,3],[4,0,5]]\n[[1,2,3],[5,4,0]]\n[[4,1,2],[5,0,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int slidingPuzzle(vector<vector<int>>& board) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int slidingPuzzle(int[][] board) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int slidingPuzzle(int** board, int boardSize, int* boardColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SlidingPuzzle(int[][] board) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar slidingPuzzle = function(board) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function slidingPuzzle(board: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function slidingPuzzle($board) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func slidingPuzzle(_ board: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun slidingPuzzle(board: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int slidingPuzzle(List<List<int>> board) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func slidingPuzzle(board [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @return {Integer}\ndef sliding_puzzle(board)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def slidingPuzzle(board: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sliding_puzzle(board: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (sliding-puzzle board)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec sliding_puzzle(Board :: [[integer()]]) -> integer().\nsliding_puzzle(Board) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec sliding_puzzle(board :: [[integer]]) :: integer\n  def sliding_puzzle(board) do\n    \n  end\nend"}], "similarQuestionList": []}