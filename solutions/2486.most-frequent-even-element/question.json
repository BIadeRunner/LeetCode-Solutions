{"question_id": "2486", "problem_slug": "most-frequent-even-element", "problem_title": "Most Frequent Even Element", "content": "Given an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.\n \nExample 1:\n\nInput: nums = [0,1,2,2,4,4,1]\nOutput: 2\nExplanation:\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.\nExample 2:\n\nInput: nums = [4,4,4,9,2,4]\nOutput: 4\nExplanation: 4 is the even element appears the most.\n\nExample 3:\n\nInput: nums = [29,47,21,41,13,37,25,7]\nOutput: -1\nExplanation: There is no even element.\n\n \nConstraints:\n\n1 <= nums.length <= 2000\n0 <= nums[i] <= 105\n\n", "hints": ["Could you count the frequency of each even element in the array?", "Would a hashmap help?"], "exampleTestcases": "[0,1,2,2,4,4,1]\n[4,4,4,9,2,4]\n[29,47,21,41,13,37,25,7]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int mostFrequentEven(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mostFrequentEven(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mostFrequentEven(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int mostFrequentEven(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MostFrequentEven(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar mostFrequentEven = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mostFrequentEven(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function mostFrequentEven($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mostFrequentEven(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mostFrequentEven(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int mostFrequentEven(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mostFrequentEven(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef most_frequent_even(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mostFrequentEven(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn most_frequent_even(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (most-frequent-even nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec most_frequent_even(Nums :: [integer()]) -> integer().\nmost_frequent_even(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_frequent_even(nums :: [integer]) :: integer\n  def most_frequent_even(nums) do\n    \n  end\nend"}}}