{"questionId": "2486", "acRate": 50.954648577012065, "difficulty": "Easy", "freqBar": 33.31857480101251, "frontendQuestionId": "2404", "paidOnly": false, "status": "ac", "title": "Most Frequent Even Element", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "most-frequent-even-element", "content": "<p>Given an integer array <code>nums</code>, return <em>the most frequent even element</em>.</p>\n\n<p>If there is a tie, return the <strong>smallest</strong> one. If there is no such element, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2,4,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,4,4,9,2,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 is the even element appears the most.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [29,47,21,41,13,37,25,7]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no even element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Could you count the frequency of each even element in the array?", "Would a hashmap help?"], "exampleTestcases": "[0,1,2,2,4,4,1]\n[4,4,4,9,2,4]\n[29,47,21,41,13,37,25,7]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mostFrequentEven(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mostFrequentEven(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mostFrequentEven(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int mostFrequentEven(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MostFrequentEven(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar mostFrequentEven = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mostFrequentEven(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function mostFrequentEven($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mostFrequentEven(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mostFrequentEven(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int mostFrequentEven(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mostFrequentEven(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef most_frequent_even(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mostFrequentEven(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn most_frequent_even(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (most-frequent-even nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec most_frequent_even(Nums :: [integer()]) -> integer().\nmost_frequent_even(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_frequent_even(nums :: [integer]) :: integer\n  def most_frequent_even(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "majority-element", "title": "Majority Element", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "majority-element-ii", "title": "Majority Element II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "top-k-frequent-elements", "title": "Top K Frequent Elements", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "sort-characters-by-frequency", "title": "Sort Characters By Frequency", "isPaidOnly": false}]}