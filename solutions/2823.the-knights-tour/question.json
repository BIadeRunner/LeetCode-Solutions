{"question_id": "2823", "problem_slug": "the-knights-tour", "problem_title": "The Knight’s Tour", "content": "Given two positive integers m and n which are the height and width of a 0-indexed 2D-array board, a pair of positive integers (r, c) which is the starting position of the knight on the board.\nYour task is to find an order of movements for the knight, in a manner that every cell of the board gets visited exactly once (the starting cell is considered visited and you shouldn't visit it again).\nReturn the array board in which the cells' values show the order of visiting the cell starting from 0 (the initial place of the knight).\nNote that a knight can move from cell (r1, c1) to cell (r2, c2) if 0 <= r2 <= m - 1 and 0 <= c2 <= n - 1 and min(abs(r1 - r2), abs(c1 - c2)) = 1 and max(abs(r1 - r2), abs(c1 - c2)) = 2.\n \nExample 1:\n\nInput: m = 1, n = 1, r = 0, c = 0\nOutput: [[0]]\nExplanation: There is only 1 cell and the knight is initially on it so there is only a 0 inside the 1x1 grid.\n\nExample 2:\n\nInput: m = 3, n = 4, r = 0, c = 0\nOutput: [[0,3,6,9],[11,8,1,4],[2,5,10,7]]\nExplanation: By the following order of movements we can visit the entire board.\n(0,0)->(1,2)->(2,0)->(0,1)->(1,3)->(2,1)->(0,2)->(2,3)->(1,1)->(0,3)->(2,2)->(1,0)\n \nConstraints:\n\n1 <= m, n <= 5\n0 <= r <= m - 1\n0 <= c <= n - 1\nThe inputs will be generated such that there exists at least one possible order of movements with the given condition\n\n", "hints": [], "exampleTestcases": "1\n1\n0\n0\n3\n4\n0\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> tourOfKnight(int m, int n, int r, int c) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] tourOfKnight(int m, int n, int r, int c) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def tourOfKnight(self, m, n, r, c):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def tourOfKnight(self, m: int, n: int, r: int, c: int) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** tourOfKnight(int m, int n, int r, int c, int* returnSize, int** returnColumnSizes){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] TourOfKnight(int m, int n, int r, int c) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */\nvar tourOfKnight = function(m, n, r, c) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function tourOfKnight(m: number, n: number, r: number, c: number): number[][] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $r\n     * @param Integer $c\n     * @return Integer[][]\n     */\n    function tourOfKnight($m, $n, $r, $c) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func tourOfKnight(_ m: Int, _ n: Int, _ r: Int, _ c: Int) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun tourOfKnight(m: Int, n: Int, r: Int, c: Int): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> tourOfKnight(int m, int n, int r, int c) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func tourOfKnight(m int, n int, r int, c int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} r\n# @param {Integer} c\n# @return {Integer[][]}\ndef tour_of_knight(m, n, r, c)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def tourOfKnight(m: Int, n: Int, r: Int, c: Int): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn tour_of_knight(m: i32, n: i32, r: i32, c: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (tour-of-knight m n r c)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? (listof (listof exact-integer?)))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec tour_of_knight(M :: integer(), N :: integer(), R :: integer(), C :: integer()) -> [[integer()]].\ntour_of_knight(M, N, R, C) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec tour_of_knight(m :: integer, n :: integer, r :: integer, c :: integer) :: [[integer]]\n  def tour_of_knight(m, n, r, c) do\n    \n  end\nend"}}}