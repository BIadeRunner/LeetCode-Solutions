{"questionId": "2823", "acRate": 67.68507638072856, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2664", "paidOnly": true, "status": "ac", "title": "The Knight\u2019s Tour", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "the-knights-tour", "content": "<p>Given two positive integers <code>m</code> and <code>n</code> which are the height and width of a <strong>0-indexed</strong> 2D-array <code>board</code>, a pair of positive integers <code>(r, c)</code> which is the starting position of the knight on the board.</p>\n\n<p>Your task is to find an order of movements for the knight, in a manner that every cell of the&nbsp;<code>board</code> gets visited <strong>exactly</strong> once (the starting cell is considered visited and you <strong>shouldn&#39;t</strong> visit it again).</p>\n\n<p>Return <em>the array</em> <code>board</code> <em>in which the cells&#39; values show the order of visiting the cell starting from 0 (the initial place of the knight).</em></p>\n\n<p>Note that a <strong>knight</strong> can <strong>move</strong> from cell <code>(r1, c1)</code> to cell <code>(r2, c2)</code> if <code>0 &lt;= r2 &lt;= m - 1</code> and <code>0 &lt;= c2 &lt;= n - 1</code> and <code>min(abs(r1 - r2), abs(c1 - c2)) = 1</code> and <code>max(abs(r1 - r2), abs(c1 - c2)) = 2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 1, n = 1, r = 0, c = 0\n<strong>Output:</strong> [[0]]\n<strong>Explanation:</strong> There is only 1 cell and the knight is initially on it so there is only a 0 inside the 1x1 grid.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 4, r = 0, c = 0\n<strong>Output:</strong> [[0,3,6,9],[11,8,1,4],[2,5,10,7]]\n<strong>Explanation:</strong> By the following order of movements we can visit the entire board.\n(0,0)-&gt;(1,2)-&gt;(2,0)-&gt;(0,1)-&gt;(1,3)-&gt;(2,1)-&gt;(0,2)-&gt;(2,3)-&gt;(1,1)-&gt;(0,3)-&gt;(2,2)-&gt;(1,0)</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m,&nbsp;n &lt;= 5</code></li>\n\t<li><code>0 &lt;= r &lt;= m - 1</code></li>\n\t<li><code>0 &lt;= c &lt;= n - 1</code></li>\n\t<li>The inputs will be generated such that there exists at least one&nbsp;possible order of movements with the given condition</li>\n</ul>\n", "hints": [], "exampleTestcases": "1\n1\n0\n0\n3\n4\n0\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> tourOfKnight(int m, int n, int r, int c) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] tourOfKnight(int m, int n, int r, int c) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def tourOfKnight(self, m, n, r, c):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def tourOfKnight(self, m: int, n: int, r: int, c: int) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** tourOfKnight(int m, int n, int r, int c, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] TourOfKnight(int m, int n, int r, int c) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */\nvar tourOfKnight = function(m, n, r, c) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function tourOfKnight(m: number, n: number, r: number, c: number): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $r\n     * @param Integer $c\n     * @return Integer[][]\n     */\n    function tourOfKnight($m, $n, $r, $c) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func tourOfKnight(_ m: Int, _ n: Int, _ r: Int, _ c: Int) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun tourOfKnight(m: Int, n: Int, r: Int, c: Int): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> tourOfKnight(int m, int n, int r, int c) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func tourOfKnight(m int, n int, r int, c int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} r\n# @param {Integer} c\n# @return {Integer[][]}\ndef tour_of_knight(m, n, r, c)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def tourOfKnight(m: Int, n: Int, r: Int, c: Int): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn tour_of_knight(m: i32, n: i32, r: i32, c: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (tour-of-knight m n r c)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec tour_of_knight(M :: integer(), N :: integer(), R :: integer(), C :: integer()) -> [[integer()]].\ntour_of_knight(M, N, R, C) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec tour_of_knight(m :: integer, n :: integer, r :: integer, c :: integer) :: [[integer]]\n  def tour_of_knight(m, n, r, c) do\n    \n  end\nend"}], "similarQuestionList": []}