{"questionId": "729", "acRate": 58.36772537294286, "difficulty": "Medium", "freqBar": 72.00652929179968, "frontendQuestionId": "729", "paidOnly": false, "status": "ac", "title": "My Calendar I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "titleSlug": "my-calendar-i", "content": "<p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>double booking</strong>.</p>\n\n<p>A <strong>double booking</strong> happens when two events have some non-empty intersection (i.e., some moment is common to both events.).</p>\n\n<p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\n\n<p>Implement the <code>MyCalendar</code> class:</p>\n\n<ul>\n\t<li><code>MyCalendar()</code> Initializes the calendar object.</li>\n\t<li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a <strong>double booking</strong>. Otherwise, return <code>false</code> and do not add the event to the calendar.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCalendar&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]\n[[], [10, 20], [15, 25], [20, 30]]\n<strong>Output</strong>\n[null, true, false, true]\n\n<strong>Explanation</strong>\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>book</code>.</li>\n</ul>\n", "hints": ["Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."], "exampleTestcases": "[\"MyCalendar\",\"book\",\"book\",\"book\"]\n[[],[10,20],[15,25],[20,30]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCalendar {\npublic:\n    MyCalendar() {\n        \n    }\n    \n    bool book(int start, int end) {\n        \n    }\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar* obj = new MyCalendar();\n * bool param_1 = obj->book(start,end);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public boolean book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class MyCalendar(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCalendar:\n\n    def __init__(self):\n        \n\n    def book(self, start: int, end: int) -> bool:\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyCalendar;\n\n\nMyCalendar* myCalendarCreate() {\n    \n}\n\nbool myCalendarBook(MyCalendar* obj, int start, int end) {\n    \n}\n\nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n\n/**\n * Your MyCalendar struct will be instantiated and called as such:\n * MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, start, end);\n \n * myCalendarFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public bool Book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(start,end);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar MyCalendar = function() {\n    \n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n    \n};\n\n/** \n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCalendar {\n    constructor() {\n        \n    }\n\n    book(start: number, end: number): boolean {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCalendar {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * $obj = MyCalendar();\n * $ret_1 = $obj->book($start, $end);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyCalendar {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar()\n * let ret_1: Bool = obj.book(start, end)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCalendar() {\n\n    fun book(start: Int, end: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(start,end)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class MyCalendar {\n\n  MyCalendar() {\n    \n  }\n  \n  bool book(int start, int end) {\n    \n  }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = MyCalendar();\n * bool param1 = obj.book(start,end);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCalendar struct {\n    \n}\n\n\nfunc Constructor() MyCalendar {\n    \n}\n\n\nfunc (this *MyCalendar) Book(start int, end int) bool {\n    \n}\n\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCalendar\n    def initialize()\n        \n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n        \n    end\n\n\nend\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCalendar() {\n\n    def book(start: Int, end: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * val obj = new MyCalendar()\n * val param_1 = obj.book(start,end)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCalendar {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendar {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar::new();\n * let ret_1: bool = obj.book(start, end);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define my-calendar%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; book : exact-integer? exact-integer? -> boolean?\n    (define/public (book start end)\n      )))\n\n;; Your my-calendar% object will be instantiated and called as such:\n;; (define obj (new my-calendar%))\n;; (define param_1 (send obj book start end))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec my_calendar_init_() -> any().\nmy_calendar_init_() ->\n  .\n\n-spec my_calendar_book(Start :: integer(), End :: integer()) -> boolean().\nmy_calendar_book(Start, End) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_calendar_init_(),\n%% Param_1 = my_calendar_book(Start, End),\n\n%% my_calendar_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule MyCalendar do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec book(start :: integer, end :: integer) :: boolean\n  def book(start, end) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyCalendar.init_()\n# param_1 = MyCalendar.book(start, end)\n\n# MyCalendar.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "my-calendar-ii", "title": "My Calendar II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "my-calendar-iii", "title": "My Calendar III", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "determine-if-two-events-have-conflict", "title": "Determine if Two Events Have Conflict", "isPaidOnly": false}]}