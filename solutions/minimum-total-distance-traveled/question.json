{"questionId": "2554", "acRate": 41.1473380107305, "difficulty": "Hard", "freqBar": 27.98735526016007, "frontendQuestionId": "2463", "paidOnly": false, "status": "ac", "title": "Minimum Total Distance Traveled", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "minimum-total-distance-traveled", "content": "<p>There are some robots and factories on the X-axis. You are given an integer array <code>robot</code> where <code>robot[i]</code> is the position of the <code>i<sup>th</sup></code> robot. You are also given a 2D integer array <code>factory</code> where <code>factory[j] = [position<sub>j</sub>, limit<sub>j</sub>]</code> indicates that <code>position<sub>j</sub></code> is the position of the <code>j<sup>th</sup></code> factory and that the <code>j<sup>th</sup></code> factory can repair at most <code>limit<sub>j</sub></code> robots.</p>\n\n<p>The positions of each robot are <strong>unique</strong>. The positions of each factory are also <strong>unique</strong>. Note that a robot can be <strong>in the same position</strong> as a factory initially.</p>\n\n<p>All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.</p>\n\n<p><strong>At any moment</strong>, you can set the initial direction of moving for <strong>some</strong> robot. Your target is to minimize the total distance traveled by all the robots.</p>\n\n<p>Return <em>the minimum total distance traveled by all the robots</em>. The test cases are generated such that all the robots can be repaired.</p>\n\n<p><strong>Note that</strong></p>\n\n<ul>\n\t<li>All robots move at the same speed.</li>\n\t<li>If two robots move in the same direction, they will never collide.</li>\n\t<li>If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.</li>\n\t<li>If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.</li>\n\t<li>If the robot moved from a position <code>x</code> to a position <code>y</code>, the distance it moved is <code>|y - x|</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/15/example1.jpg\" style=\"width: 500px; height: 320px;\" />\n<pre>\n<strong>Input:</strong> robot = [0,4,6], factory = [[2,2],[6,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/15/example-2.jpg\" style=\"width: 500px; height: 329px;\" />\n<pre>\n<strong>Input:</strong> robot = [1,-1], factory = [[-2,1],[2,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= robot.length, factory.length &lt;= 100</code></li>\n\t<li><code>factory[j].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= robot[i], position<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= limit<sub>j</sub> &lt;= robot.length</code></li>\n\t<li>The input will be generated such that it is always possible to repair every robot.</li>\n</ul>\n", "hints": ["Sort robots and factories by their positions.", "After sorting, notice that each factory should repair some subsegment of robots.", "Find the minimum total distance to repair first i robots with first j factories."], "exampleTestcases": "[0,4,6]\n[[2,2],[6,2]]\n[1,-1]\n[[-2,1],[2,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumTotalDistance(vector<int>& robot, vector<vector<int>>& factory) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minimumTotalDistance(List<Integer> robot, int[][] factory) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumTotalDistance(self, robot, factory):\n        \"\"\"\n        :type robot: List[int]\n        :type factory: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minimumTotalDistance(int* robot, int robotSize, int** factory, int factorySize, int* factoryColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinimumTotalDistance(IList<int> robot, int[][] factory) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} robot\n * @param {number[][]} factory\n * @return {number}\n */\nvar minimumTotalDistance = function(robot, factory) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumTotalDistance(robot: number[], factory: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $robot\n     * @param Integer[][] $factory\n     * @return Integer\n     */\n    function minimumTotalDistance($robot, $factory) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumTotalDistance(_ robot: [Int], _ factory: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumTotalDistance(robot: List<Int>, factory: Array<IntArray>): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumTotalDistance(List<int> robot, List<List<int>> factory) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumTotalDistance(robot []int, factory [][]int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} robot\n# @param {Integer[][]} factory\n# @return {Integer}\ndef minimum_total_distance(robot, factory)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumTotalDistance(robot: List[Int], factory: Array[Array[Int]]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_total_distance(robot: Vec<i32>, factory: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-total-distance robot factory)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_total_distance(Robot :: [integer()], Factory :: [[integer()]]) -> integer().\nminimum_total_distance(Robot, Factory) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_total_distance(robot :: [integer], factory :: [[integer]]) :: integer\n  def minimum_total_distance(robot, factory) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "isPaidOnly": false}]}