{"question_id": "2507", "problem_slug": "number-of-common-factors", "problem_title": "Number of Common Factors", "content": "Given two positive integers a and b, return the number of common factors of a and b.\nAn integer x is a common factor of a and b if x divides both a and b.\n \nExample 1:\n\nInput: a = 12, b = 6\nOutput: 4\nExplanation: The common factors of 12 and 6 are 1, 2, 3, 6.\n\nExample 2:\n\nInput: a = 25, b = 30\nOutput: 2\nExplanation: The common factors of 25 and 30 are 1, 5.\n\n \nConstraints:\n\n1 <= a, b <= 1000\n\n", "hints": ["For each integer in range [1,1000], check if it’s divisible by both A and B."], "exampleTestcases": "12\n6\n25\n30", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int commonFactors(int a, int b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int commonFactors(int a, int b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def commonFactors(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def commonFactors(self, a: int, b: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int commonFactors(int a, int b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CommonFactors(int a, int b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar commonFactors = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function commonFactors(a: number, b: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function commonFactors($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func commonFactors(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun commonFactors(a: Int, b: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int commonFactors(int a, int b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func commonFactors(a int, b int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef common_factors(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def commonFactors(a: Int, b: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn common_factors(a: i32, b: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (common-factors a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec common_factors(A :: integer(), B :: integer()) -> integer().\ncommon_factors(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec common_factors(a :: integer, b :: integer) :: integer\n  def common_factors(a, b) do\n    \n  end\nend"}}}