{"question_id": "3539", "problem_slug": "customer-purchasing-behavior-analysis", "problem_title": "Customer Purchasing Behavior Analysis", "content": "Table: Transactions\n\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| transaction_id   | int     |\n| customer_id      | int     |\n| product_id       | int     |\n| transaction_date | date    |\n| amount           | decimal |\n+------------------+---------+\ntransaction_id is the unique identifier for this table.\nEach row of this table contains information about a transaction, including the customer ID, product ID, date, and amount spent.\n\nTable: Products\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| category    | varchar |\n| price       | decimal |\n+-------------+---------+\nproduct_id is the unique identifier for this table.\nEach row of this table contains information about a product, including its category and price.\n\nWrite a solution to analyze customer purchasing behavior. For each customer, calculate:\n\nThe total amount spent.\nThe number of transactions.\nThe number of unique product categories purchased.\nThe average amount spent. \nThe most frequently purchased product category (if there is a tie, choose the one with the most recent transaction).\nA loyalty score defined as: (Number of transactions * 10) + (Total amount spent / 100).\n\nRound total_amount, avg_transaction_amount, and loyalty_score to 2 decimal places.\nReturn the result table ordered by loyalty_score in descending order, then by customer_id in ascending order.\nThe query result format is in the following example.\n \nExample:\n\nInput:\nTransactions table:\n\n+----------------+-------------+------------+------------------+--------+\n| transaction_id | customer_id | product_id | transaction_date | amount |\n+----------------+-------------+------------+------------------+--------+\n| 1              | 101         | 1          | 2023-01-01       | 100.00 |\n| 2              | 101         | 2          | 2023-01-15       | 150.00 |\n| 3              | 102         | 1          | 2023-01-01       | 100.00 |\n| 4              | 102         | 3          | 2023-01-22       | 200.00 |\n| 5              | 101         | 3          | 2023-02-10       | 200.00 |\n+----------------+-------------+------------+------------------+--------+\n\nProducts table:\n\n+------------+----------+--------+\n| product_id | category | price  |\n+------------+----------+--------+\n| 1          | A        | 100.00 |\n| 2          | B        | 150.00 |\n| 3          | C        | 200.00 |\n+------------+----------+--------+\n\nOutput:\n\n+-------------+--------------+-------------------+-------------------+------------------------+--------------+---------------+\n| customer_id | total_amount | transaction_count | unique_categories | avg_transaction_amount | top_category | loyalty_score |\n+-------------+--------------+-------------------+-------------------+------------------------+--------------+---------------+\n| 101         | 450.00       | 3                 | 3                 | 150.00                 | C            | 34.50         |\n| 102         | 300.00       | 2                 | 2                 | 150.00                 | C            | 23.00         |\n+-------------+--------------+-------------------+-------------------+------------------------+--------------+---------------+\n\nExplanation:\n\nFor customer 101:\n\t\nTotal amount spent: 100.00 + 150.00 + 200.00 = 450.00\nNumber of transactions: 3\nUnique categories: A, B, C (3 categories)\nAverage transaction amount: 450.00 / 3 = 150.00\nTop category: C (Customer 101 made 1 purchase each in categories A, B, and C. Since the count is the same for all categories, we choose the most recent transaction, which is category C on 2023-02-10)\nLoyalty score: (3 * 10) + (450.00 / 100) = 34.50\n\n\nFor customer 102:\n\t\nTotal amount spent: 100.00 + 200.00 = 300.00\nNumber of transactions: 2\nUnique categories: A, C (2 categories)\nAverage transaction amount: 300.00 / 2 = 150.00\nTop category: C (Customer 102 made 1 purchase each in categories A and C. Since the count is the same for both categories, we choose the most recent transaction, which is category C on 2023-01-22)\nLoyalty score: (2 * 10) + (300.00 / 100) = 23.00\n\n\n\nNote: The output is ordered by loyalty_score in descending order, then by customer_id in ascending order.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Transactions\":[\"transaction_id\",\"customer_id\",\"product_id\",\"transaction_date\",\"amount\"],\"Products\":[\"product_id\",\"category\",\"price\"]},\"rows\":{\"Transactions\":[[1,101,1,\"2023-01-01\",100.00],[2,101,2,\"2023-01-15\",150.00],[3,102,1,\"2023-01-01\",100.00],[4,102,3,\"2023-01-22\",200.00],[5,101,3,\"2023-02-10\",200.00]],\"Products\":[[1,\"A\",100.00],[2,\"B\",150.00],[3,\"C\",200.00]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef analyze_customer_behavior(transactions: pd.DataFrame, products: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}