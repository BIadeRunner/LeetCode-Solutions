{"questionId": "1062", "acRate": 42.050684021116254, "difficulty": "Easy", "freqBar": 41.72993541847071, "frontendQuestionId": "1013", "paidOnly": false, "status": "ac", "title": "Partition Array Into Three Parts With Equal Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "partition-array-into-three-parts-with-equal-sum", "content": "<p>Given an array of integers <code>arr</code>, return <code>true</code> if we can partition the array into three <strong>non-empty</strong> parts with equal sums.</p>\n\n<p>Formally, we can partition the array if we can find indexes <code>i + 1 &lt; j</code> with <code>(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,-6,6,-7,9,1,2,0,1]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,-6,6,7,9,-1,2,0,1]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,3,6,5,-2,2,5,1,-9,4]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["If we have three parts with the same sum, what is the sum of each?\r\nIf you can find the first part, can you find the second part?"], "exampleTestcases": "[0,2,1,-6,6,-7,9,1,2,0,1]\n[0,2,1,-6,6,7,9,-1,2,0,1]\n[3,3,6,5,-2,2,5,1,-9,4]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canThreePartsEqualSum(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canThreePartsEqualSum(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canThreePartsEqualSum(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canThreePartsEqualSum(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanThreePartsEqualSum(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar canThreePartsEqualSum = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canThreePartsEqualSum(arr: number[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function canThreePartsEqualSum($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canThreePartsEqualSum(_ arr: [Int]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canThreePartsEqualSum(arr: IntArray): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canThreePartsEqualSum(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canThreePartsEqualSum(arr []int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Boolean}\ndef can_three_parts_equal_sum(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canThreePartsEqualSum(arr: Array[Int]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_three_parts_equal_sum(arr: Vec<i32>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-three-parts-equal-sum arr)\n  (-> (listof exact-integer?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_three_parts_equal_sum(Arr :: [integer()]) -> boolean().\ncan_three_parts_equal_sum(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_three_parts_equal_sum(arr :: [integer]) :: boolean\n  def can_three_parts_equal_sum(arr) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "find-the-middle-index-in-array", "title": "Find the Middle Index in Array", "isPaidOnly": false}]}