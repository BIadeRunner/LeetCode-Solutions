{"question_id": "1454", "problem_slug": "remove-palindromic-subsequences", "problem_title": "Remove Palindromic Subsequences", "content": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.\n \nExample 1:\n\nInput: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.\n\nExample 2:\n\nInput: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\".\n\nExample 3:\n\nInput: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns[i] is either 'a' or 'b'.\n\n", "hints": ["Use the fact that string contains only 2 characters.", "Are subsequences composed of only one type of letter always palindrome strings ?"], "exampleTestcases": "\"ababa\"\n\"abb\"\n\"baabb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int removePalindromeSub(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int removePalindromeSub(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def removePalindromeSub(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int removePalindromeSub(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int RemovePalindromeSub(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar removePalindromeSub = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function removePalindromeSub(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function removePalindromeSub($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func removePalindromeSub(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun removePalindromeSub(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int removePalindromeSub(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func removePalindromeSub(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef remove_palindrome_sub(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def removePalindromeSub(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn remove_palindrome_sub(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (remove-palindrome-sub s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec remove_palindrome_sub(S :: unicode:unicode_binary()) -> integer().\nremove_palindrome_sub(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_palindrome_sub(s :: String.t) :: integer\n  def remove_palindrome_sub(s) do\n    \n  end\nend"}}}