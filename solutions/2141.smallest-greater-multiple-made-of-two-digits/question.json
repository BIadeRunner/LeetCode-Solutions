{"question_id": "2141", "problem_slug": "smallest-greater-multiple-made-of-two-digits", "problem_title": "Smallest Greater Multiple Made of Two Digits", "content": "Given three integers, k, digit1, and digit2, you want to find the smallest integer that is:\n\nLarger than k,\nA multiple of k, and\nComprised of only the digits digit1 and/or digit2.\n\nReturn the smallest such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (231 - 1), return -1.\n \nExample 1:\n\nInput: k = 2, digit1 = 0, digit2 = 2\nOutput: 20\nExplanation:\n20 is the first integer larger than 2, a multiple of 2, and comprised of only the digits 0 and/or 2.\n\nExample 2:\n\nInput: k = 3, digit1 = 4, digit2 = 2\nOutput: 24\nExplanation:\n24 is the first integer larger than 3, a multiple of 3, and comprised of only the digits 4 and/or 2.\n\nExample 3:\n\nInput: k = 2, digit1 = 0, digit2 = 0\nOutput: -1\nExplanation:\nNo integer meets the requirements so return -1.\n\n \nConstraints:\n\n1 <= k <= 1000\n0 <= digit1 <= 9\n0 <= digit2 <= 9\n\n", "hints": ["Could you generate all the different numbers comprised of only digit1 and digit2 with the constraints?", "Going from least to greatest, check if the number you generated is greater than k and a multiple of k."], "exampleTestcases": "2\n0\n2\n3\n4\n2\n2\n0\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findInteger(int k, int digit1, int digit2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findInteger(int k, int digit1, int digit2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findInteger(self, k, digit1, digit2):\n        \"\"\"\n        :type k: int\n        :type digit1: int\n        :type digit2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findInteger(self, k: int, digit1: int, digit2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findInteger(int k, int digit1, int digit2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindInteger(int k, int digit1, int digit2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number} digit1\n * @param {number} digit2\n * @return {number}\n */\nvar findInteger = function(k, digit1, digit2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findInteger(k: number, digit1: number, digit2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $digit1\n     * @param Integer $digit2\n     * @return Integer\n     */\n    function findInteger($k, $digit1, $digit2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findInteger(_ k: Int, _ digit1: Int, _ digit2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findInteger(k: Int, digit1: Int, digit2: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findInteger(int k, int digit1, int digit2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findInteger(k int, digit1 int, digit2 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} digit1\n# @param {Integer} digit2\n# @return {Integer}\ndef find_integer(k, digit1, digit2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findInteger(k: Int, digit1: Int, digit2: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_integer(k: i32, digit1: i32, digit2: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-integer k digit1 digit2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_integer(K :: integer(), Digit1 :: integer(), Digit2 :: integer()) -> integer().\nfind_integer(K, Digit1, Digit2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_integer(k :: integer, digit1 :: integer, digit2 :: integer) :: integer\n  def find_integer(k, digit1, digit2) do\n    \n  end\nend"}}}