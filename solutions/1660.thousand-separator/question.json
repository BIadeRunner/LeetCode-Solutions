{"question_id": "1660", "problem_slug": "thousand-separator", "problem_title": "Thousand Separator", "content": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.\n \nExample 1:\n\nInput: n = 987\nOutput: \"987\"\n\nExample 2:\n\nInput: n = 1234\nOutput: \"1.234\"\n\n \nConstraints:\n\n0 <= n <= 231 - 1\n\n", "hints": ["Scan from the back of the integer and use dots to connect blocks with length 3 except the last block."], "exampleTestcases": "987\n1234", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string thousandSeparator(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String thousandSeparator(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def thousandSeparator(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* thousandSeparator(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ThousandSeparator(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar thousandSeparator = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function thousandSeparator(n: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function thousandSeparator($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func thousandSeparator(_ n: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun thousandSeparator(n: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String thousandSeparator(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func thousandSeparator(n int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String}\ndef thousand_separator(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def thousandSeparator(n: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn thousand_separator(n: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (thousand-separator n)\n  (-> exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec thousand_separator(N :: integer()) -> unicode:unicode_binary().\nthousand_separator(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec thousand_separator(n :: integer) :: String.t\n  def thousand_separator(n) do\n    \n  end\nend"}}}