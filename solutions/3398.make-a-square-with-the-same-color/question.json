{"questionId": "3398", "acRate": 51.77693146804968, "difficulty": "Easy", "freqBar": 43.27938639144272, "frontendQuestionId": "3127", "paidOnly": false, "status": "ac", "title": "Make a Square with the Same Color", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "make-a-square-with-the-same-color", "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>3 x 3</code> consisting only of characters <code>&#39;B&#39;</code> and <code>&#39;W&#39;</code>. Character <code>&#39;W&#39;</code> represents the white color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->, and character <code>&#39;B&#39;</code> represents the black color<!-- notionvc: 06a49cc0-a296-4bd2-9bfe-c8818edeb53a -->.</p>\n\n<p>Your task is to change the color of <strong>at most one</strong> cell<!-- notionvc: c04cb478-8dd5-49b1-80bb-727c6b1e0232 --> so that the matrix has a <code>2 x 2</code> square where all cells are of the same color.<!-- notionvc: adf957e1-fa0f-40e5-9a2e-933b95e276a7 --></p>\n\n<p>Return <code>true</code> if it is possible to create a <code>2 x 2</code> square of the same color, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.grid-container {\n  display: grid;\n  grid-template-columns: 30px 30px 30px;\n  padding: 10px;\n}\n.grid-item {\n  background-color: black;\n  border: 1px solid gray;\n  height: 30px;\n  font-size: 30px;\n  text-align: center;\n}\n.grid-item-white {\n  background-color: white;\n}\n</style>\n<style class=\"darkreader darkreader--sync\" media=\"screen\" type=\"text/css\">\n</style>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It can be done by changing the color of the <code>grid[0][2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;W&quot;,&quot;B&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>It cannot be done by changing at most one cell.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"grid-container\">\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n\n<div class=\"grid-item grid-item-white\">&nbsp;</div>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[&quot;B&quot;,&quot;W&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;],[&quot;B&quot;,&quot;W&quot;,&quot;W&quot;]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <code>grid</code> already contains a <code>2 x 2</code> square of the same color.<!-- notionvc: 9a8b2d3d-1e73-457a-abe0-c16af51ad5c2 --></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>grid.length == 3</code></li>\n\t<li><code>grid[i].length == 3</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n</ul>\n", "hints": ["It is impossible to create <code>2 x 2</code> square with the same color by changing the color of at most one cell when the number of <code>\u2018W'</code> or <code>'B\u2019</code> in all squares is 2."], "exampleTestcases": "[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\n[[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canMakeSquare(vector<vector<char>>& grid) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canMakeSquare(char[][] grid) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canMakeSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canMakeSquare(char** grid, int gridSize, int* gridColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanMakeSquare(char[][] grid) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} grid\n * @return {boolean}\n */\nvar canMakeSquare = function(grid) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canMakeSquare(grid: string[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Boolean\n     */\n    function canMakeSquare($grid) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canMakeSquare(_ grid: [[Character]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canMakeSquare(grid: Array<CharArray>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canMakeSquare(List<List<String>> grid) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canMakeSquare(grid [][]byte) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} grid\n# @return {Boolean}\ndef can_make_square(grid)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canMakeSquare(grid: Array[Array[Char]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_make_square(grid: Vec<Vec<char>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-make-square grid)\n  (-> (listof (listof char?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_make_square(Grid :: [[char()]]) -> boolean().\ncan_make_square(Grid) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_make_square(grid :: [[char]]) :: boolean\n  def can_make_square(grid) do\n    \n  end\nend"}], "similarQuestionList": []}