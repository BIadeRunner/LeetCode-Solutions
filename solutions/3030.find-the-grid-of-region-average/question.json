{"questionId": "3272", "acRate": 44.06433384046946, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3030", "paidOnly": false, "status": "ac", "title": "Find the Grid of Region Average", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "find-the-grid-of-region-average", "content": "<p>You are given <code>m x n</code> grid <code>image</code> which represents a grayscale image, where <code>image[i][j]</code> represents a pixel with intensity in the range <code>[0..255]</code>. You are also given a <strong>non-negative</strong> integer <code>threshold</code>.</p>\n\n<p>Two pixels are <strong>adjacent</strong> if they share an edge.</p>\n\n<p>A <strong>region</strong> is a <code>3 x 3</code> subgrid where the <strong>absolute difference</strong> in intensity between any two <strong>adjacent</strong> pixels is <strong>less than or equal to</strong> <code>threshold</code>.</p>\n\n<p>All pixels in a region belong to that region, note that a pixel can belong to <strong>multiple</strong> regions.</p>\n\n<p>You need to calculate a <code>m x n</code> grid <code>result</code>, where <code>result[i][j]</code> is the <strong>average</strong> intensity of the regions to which <code>image[i][j]</code> belongs, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> belongs to multiple regions, <code>result[i][j]</code> is the <strong>average </strong>of the<strong> rounded-down average </strong>intensities of these regions, <strong>rounded down</strong> to the nearest integer. If <code>image[i][j]</code> does<strong> not</strong> belong to any region, <code>result[i][j]</code> is <strong>equal to</strong> <code>image[i][j]</code>.</p>\n\n<p>Return the grid <code>result</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[9,9,9,9],[9,9,9,9],[9,9,9,9]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png\" style=\"width: 832px; height: 275px;\" /></p>\n\n<p>There are two regions as illustrated above. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9.</p>\n\n<p>Please note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[25,25,25],[27,27,27],[27,27,27],[30,30,30]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png\" /></p>\n\n<p>There are two regions as illustrated above. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27.</p>\n\n<p>All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[5,6,7],[8,9,10],[11,12,13]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is only one <code>3 x 3</code> subgrid, while it does not have the condition on difference of adjacent pixels, for example, the difference between <code>image[0][0]</code> and <code>image[1][0]</code> is <code>|5 - 8| = 3 &gt; threshold = 1</code>. None of them belong to any valid regions, so the <code>result</code> should be the same as <code>image</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>0 &lt;= image[i][j] &lt;= 255</code></li>\n\t<li><code>0 &lt;= threshold &lt;= 255</code></li>\n</ul>\n", "hints": ["Try all the <code>3 * 3</code> sub-grids to find all the regions.", "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.", "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."], "exampleTestcases": "[[5,6,7,10],[8,9,10,10],[11,12,13,10]]\n3\n[[10,20,30],[15,25,35],[20,30,40],[25,35,45]]\n12\n[[5,6,7],[8,9,10],[11,12,13]]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> resultGrid(vector<vector<int>>& image, int threshold) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] resultGrid(int[][] image, int threshold) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def resultGrid(self, image, threshold):\n        \"\"\"\n        :type image: List[List[int]]\n        :type threshold: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** resultGrid(int** image, int imageSize, int* imageColSize, int threshold, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] ResultGrid(int[][] image, int threshold) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} image\n * @param {number} threshold\n * @return {number[][]}\n */\nvar resultGrid = function(image, threshold) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function resultGrid(image: number[][], threshold: number): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $threshold\n     * @return Integer[][]\n     */\n    function resultGrid($image, $threshold) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func resultGrid(_ image: [[Int]], _ threshold: Int) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun resultGrid(image: Array<IntArray>, threshold: Int): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> resultGrid(List<List<int>> image, int threshold) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func resultGrid(image [][]int, threshold int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} image\n# @param {Integer} threshold\n# @return {Integer[][]}\ndef result_grid(image, threshold)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def resultGrid(image: Array[Array[Int]], threshold: Int): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn result_grid(image: Vec<Vec<i32>>, threshold: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (result-grid image threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec result_grid(Image :: [[integer()]], Threshold :: integer()) -> [[integer()]].\nresult_grid(Image, Threshold) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec result_grid(image :: [[integer]], threshold :: integer) :: [[integer]]\n  def result_grid(image, threshold) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "range-sum-query-2d-immutable", "title": "Range Sum Query 2D - Immutable", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "k-radius-subarray-averages", "title": "K Radius Subarray Averages", "isPaidOnly": false}]}