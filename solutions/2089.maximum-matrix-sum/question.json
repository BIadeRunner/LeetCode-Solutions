{"question_id": "2089", "problem_slug": "maximum-matrix-sum", "problem_title": "Maximum Matrix Sum", "content": "You are given an n x n integer matrix. You can do the following operation any number of times:\n\nChoose any two adjacent elements of matrix and multiply each of them by -1.\n\nTwo elements are considered adjacent if and only if they share a border.\nYour goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.\n \nExample 1:\n\n\nInput: matrix = [[1,-1],[-1,1]]\nOutput: 4\nExplanation: We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1.\n\nExample 2:\n\n\nInput: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\nOutput: 16\nExplanation: We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1.\n\n \nConstraints:\n\nn == matrix.length == matrix[i].length\n2 <= n <= 250\n-105 <= matrix[i][j] <= 105\n\n", "hints": ["Try to use the operation so that each row has only one negative number.", "If you have only one negative element you cannot convert it to positive."], "exampleTestcases": "[[1,-1],[-1,1]]\n[[1,2,3],[-1,-2,-3],[1,2,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxMatrixSum(vector<vector<int>>& matrix) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxMatrixSum(int[][] matrix) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxMatrixSum(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxMatrixSum(self, matrix: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxMatrixSum(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxMatrixSum(int[][] matrix) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar maxMatrixSum = function(matrix) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxMatrixSum(matrix: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function maxMatrixSum($matrix) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxMatrixSum(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxMatrixSum(matrix: Array<IntArray>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxMatrixSum(List<List<int>> matrix) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxMatrixSum(matrix [][]int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef max_matrix_sum(matrix)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxMatrixSum(matrix: Array[Array[Int]]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_matrix_sum(matrix: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-matrix-sum matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_matrix_sum(Matrix :: [[integer()]]) -> integer().\nmax_matrix_sum(Matrix) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_matrix_sum(matrix :: [[integer]]) :: integer\n  def max_matrix_sum(matrix) do\n    \n  end\nend"}}}