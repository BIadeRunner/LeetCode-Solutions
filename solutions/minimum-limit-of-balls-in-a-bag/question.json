{"questionId": "1886", "acRate": 60.39982678983834, "difficulty": "Medium", "freqBar": 23.724051321548924, "frontendQuestionId": "1760", "paidOnly": false, "status": "ac", "title": "Minimum Limit of Balls in a Bag", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimum-limit-of-balls-in-a-bag", "content": "<p>You are given an integer array <code>nums</code> where the <code>i<sup>th</sup></code> bag contains <code>nums[i]</code> balls. You are also given an integer <code>maxOperations</code>.</p>\n\n<p>You can perform the following operation at most <code>maxOperations</code> times:</p>\n\n<ul>\n\t<li>Take any bag of balls and divide it into two new bags with a <strong>positive </strong>number of balls.\n\n\t<ul>\n\t\t<li>For example, a bag of <code>5</code> balls can become two new bags of <code>1</code> and <code>4</code> balls, or two new bags of <code>2</code> and <code>3</code> balls.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Your penalty is the <strong>maximum</strong> number of balls in a bag. You want to <strong>minimize</strong> your penalty after the operations.</p>\n\n<p>Return <em>the minimum possible penalty after performing the operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9], maxOperations = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [<strong><u>9</u></strong>] -&gt; [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [<strong><u>6</u></strong>,3] -&gt; [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,8,2], maxOperations = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,<strong><u>8</u></strong>,2] -&gt; [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,<strong><u>4</u></strong>,4,4,2] -&gt; [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,<strong><u>4</u></strong>,4,2] -&gt; [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,<strong><u>4</u></strong>,2] -&gt; [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= maxOperations, nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Let's change the question if we know the maximum size of a bag what is the minimum number of bags you can make", "note that as the maximum size increases the minimum number of bags decreases so we can binary search the maximum size"], "exampleTestcases": "[9]\n2\n[2,4,8,2]\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSize(vector<int>& nums, int maxOperations) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumSize(int[] nums, int maxOperations) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumSize(self, nums, maxOperations):\n        \"\"\"\n        :type nums: List[int]\n        :type maxOperations: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumSize(self, nums: List[int], maxOperations: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumSize(int* nums, int numsSize, int maxOperations) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSize(int[] nums, int maxOperations) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} maxOperations\n * @return {number}\n */\nvar minimumSize = function(nums, maxOperations) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumSize(nums: number[], maxOperations: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $maxOperations\n     * @return Integer\n     */\n    function minimumSize($nums, $maxOperations) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumSize(_ nums: [Int], _ maxOperations: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumSize(nums: IntArray, maxOperations: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumSize(List<int> nums, int maxOperations) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumSize(nums []int, maxOperations int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} max_operations\n# @return {Integer}\ndef minimum_size(nums, max_operations)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumSize(nums: Array[Int], maxOperations: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_size(nums: Vec<i32>, max_operations: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-size nums maxOperations)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_size(Nums :: [integer()], MaxOperations :: integer()) -> integer().\nminimum_size(Nums, MaxOperations) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_size(nums :: [integer], max_operations :: integer) :: integer\n  def minimum_size(nums, max_operations) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-candies-allocated-to-k-children", "title": "Maximum Candies Allocated to K Children", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimized-maximum-of-products-distributed-to-any-store", "title": "Minimized Maximum of Products Distributed to Any Store", "isPaidOnly": false}]}