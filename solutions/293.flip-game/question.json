{"questionId": "293", "acRate": 64.73467485043896, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "293", "paidOnly": true, "status": "ac", "title": "Flip Game", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "flip-game", "content": "<p>You are playing a Flip Game with your friend.</p>\n\n<p>You are given a string <code>currentState</code> that contains only <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. You and your friend take turns to flip <strong>two consecutive</strong> <code>&quot;++&quot;</code> into <code>&quot;--&quot;</code>. The game ends when a person can no longer make a move, and therefore the other person will be the winner.</p>\n\n<p>Return all possible states of the string <code>currentState</code> after <strong>one valid move</strong>. You may return the answer in <strong>any order</strong>. If there is no valid move, return an empty list <code>[]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> currentState = &quot;++++&quot;\n<strong>Output:</strong> [&quot;--++&quot;,&quot;+--+&quot;,&quot;++--&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> currentState = &quot;+&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= currentState.length &lt;= 500</code></li>\n\t<li><code>currentState[i]</code> is either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"++++\"\n\"+\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generatePossibleNextMoves(string currentState) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> generatePossibleNextMoves(String currentState) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def generatePossibleNextMoves(self, currentState):\n        \"\"\"\n        :type currentState: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def generatePossibleNextMoves(self, currentState: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generatePossibleNextMoves(char* currentState, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GeneratePossibleNextMoves(string currentState) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} currentState\n * @return {string[]}\n */\nvar generatePossibleNextMoves = function(currentState) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function generatePossibleNextMoves(currentState: string): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $currentState\n     * @return String[]\n     */\n    function generatePossibleNextMoves($currentState) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func generatePossibleNextMoves(_ currentState: String) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun generatePossibleNextMoves(currentState: String): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> generatePossibleNextMoves(String currentState) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func generatePossibleNextMoves(currentState string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} current_state\n# @return {String[]}\ndef generate_possible_next_moves(current_state)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def generatePossibleNextMoves(currentState: String): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn generate_possible_next_moves(current_state: String) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (generate-possible-next-moves currentState)\n  (-> string? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec generate_possible_next_moves(CurrentState :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_possible_next_moves(CurrentState) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_possible_next_moves(current_state :: String.t) :: [String.t]\n  def generate_possible_next_moves(current_state) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "flip-game-ii", "title": "Flip Game II", "isPaidOnly": true}]}