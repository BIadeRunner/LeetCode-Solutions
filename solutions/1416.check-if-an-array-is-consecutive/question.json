{"question_id": "1416", "problem_slug": "check-if-an-array-is-consecutive", "problem_title": "Check if an Array Is Consecutive", "content": "Given an integer array nums, return true if nums is consecutive, otherwise return false.\nAn array is consecutive if it contains every number in the range [x, x + n - 1] (inclusive), where x is the minimum number in the array and n is the length of the array.\n \nExample 1:\n\nInput: nums = [1,3,4,2]\nOutput: true\nExplanation:\nThe minimum value is 1 and the length of nums is 4.\nAll of the values in the range [x, x + n - 1] = [1, 1 + 4 - 1] = [1, 4] = (1, 2, 3, 4) occur in nums.\nTherefore, nums is consecutive.\n\nExample 2:\n\nInput: nums = [1,3]\nOutput: false\nExplanation:\nThe minimum value is 1 and the length of nums is 2.\nThe value 2 in the range [x, x + n - 1] = [1, 1 + 2 - 1], = [1, 2] = (1, 2) does not occur in nums.\nTherefore, nums is not consecutive.\n\nExample 3:\n\nInput: nums = [3,5,4]\nOutput: true\nExplanation:\nThe minimum value is 3 and the length of nums is 3.\nAll of the values in the range [x, x + n - 1] = [3, 3 + 3 - 1] = [3, 5] = (3, 4, 5) occur in nums.\nTherefore, nums is consecutive.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 105\n\n", "hints": ["Try sorting nums.", "If nums is consecutive and sorted in ascending order, then nums[i] + 1 = nums[i + 1] for every i in the range 0 ≤ i < nums.length - 1."], "exampleTestcases": "[1,3,4,2]\n[1,3]\n[3,5,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isConsecutive(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isConsecutive(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isConsecutive(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isConsecutive(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsConsecutive(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isConsecutive = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isConsecutive(nums: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isConsecutive($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isConsecutive(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isConsecutive(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isConsecutive(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isConsecutive(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_consecutive(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isConsecutive(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_consecutive(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-consecutive nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_consecutive(Nums :: [integer()]) -> boolean().\nis_consecutive(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_consecutive(nums :: [integer]) :: boolean\n  def is_consecutive(nums) do\n    \n  end\nend"}}}