{"question_id": "3485", "problem_slug": "maximize-score-of-numbers-in-ranges", "problem_title": "Maximize Score of Numbers in Ranges", "content": "You are given an array of integers start and an integer d, representing n intervals [start[i], start[i] + d].\nYou are asked to choose n integers where the ith integer must belong to the ith interval. The score of the chosen integers is defined as the minimum absolute difference between any two integers that have been chosen.\nReturn the maximum possible score of the chosen integers.\n \nExample 1:\n\nInput: start = [6,0,3], d = 2\nOutput: 4\nExplanation:\nThe maximum possible score can be obtained by choosing integers: 8, 0, and 4. The score of these chosen integers is min(|8 - 0|, |8 - 4|, |0 - 4|) which equals 4.\n\nExample 2:\n\nInput: start = [2,6,13,13], d = 5\nOutput: 5\nExplanation:\nThe maximum possible score can be obtained by choosing integers: 2, 7, 13, and 18. The score of these chosen integers is min(|2 - 7|, |2 - 13|, |2 - 18|, |7 - 13|, |7 - 18|, |13 - 18|) which equals 5.\n\n \nConstraints:\n\n2 <= start.length <= 105\n0 <= start[i] <= 109\n0 <= d <= 109\n\n", "hints": ["Can we use binary search here?", "Suppose that the answer is <code>x</code>. We can find a valid configuration of integers by sorting <code>start</code>, the first integer should be <code>start[0]</code>, then each subsequent integer should be the smallest one in <code>[start[i], start[i] + d]</code> that is greater than <code>last_chosen_value + x</code>.", "Binary search over <code>x</code>"], "exampleTestcases": "[6,0,3]\n2\n[2,6,13,13]\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxPossibleScore(vector<int>& start, int d) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxPossibleScore(int[] start, int d) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxPossibleScore(self, start, d):\n        \"\"\"\n        :type start: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxPossibleScore(int* start, int startSize, int d) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxPossibleScore(int[] start, int d) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} start\n * @param {number} d\n * @return {number}\n */\nvar maxPossibleScore = function(start, d) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxPossibleScore(start: number[], d: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $start\n     * @param Integer $d\n     * @return Integer\n     */\n    function maxPossibleScore($start, $d) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxPossibleScore(_ start: [Int], _ d: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxPossibleScore(start: IntArray, d: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxPossibleScore(List<int> start, int d) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxPossibleScore(start []int, d int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} start\n# @param {Integer} d\n# @return {Integer}\ndef max_possible_score(start, d)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxPossibleScore(start: Array[Int], d: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_possible_score(start: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-possible-score start d)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_possible_score(Start :: [integer()], D :: integer()) -> integer().\nmax_possible_score(Start, D) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_possible_score(start :: [integer], d :: integer) :: integer\n  def max_possible_score(start, d) do\n    \n  end\nend"}}}