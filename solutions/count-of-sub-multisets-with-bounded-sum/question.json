{"questionId": "3091", "acRate": 21.42409185199479, "difficulty": "Hard", "freqBar": 29.512291891884196, "frontendQuestionId": "2902", "paidOnly": false, "status": "ac", "title": "Count of Sub-Multisets With Bounded Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "count-of-sub-multisets-with-bounded-sum", "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of non-negative integers, and two integers <code>l</code> and <code>r</code>.</p>\n\n<p>Return <em>the <strong>count of sub-multisets</strong> within</em> <code>nums</code> <em>where the sum of elements in each subset falls within the inclusive range of</em> <code>[l, r]</code>.</p>\n\n<p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>A <strong>sub-multiset</strong> is an <strong>unordered</strong> collection of elements of the array in which a given value <code>x</code> can occur <code>0, 1, ..., occ[x]</code> times, where <code>occ[x]</code> is the number of occurrences of <code>x</code> in the array.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Two <strong>sub-multisets</strong> are the same if sorting both sub-multisets results in identical multisets.</li>\n\t<li>The sum of an <strong>empty</strong> multiset is <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3], l = 6, r = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only subset of nums that has a sum of 6 is {1, 2, 3}.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,4,2,7], l = 1, r = 5\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,2], l = 3, r = 5\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li>Sum of <code>nums</code> does not exceed <code>2 * 10<sup>4</sup></code>.</li>\n\t<li><code>0 &lt;= l &lt;= r &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Since the sum of\u00a0<code>nums</code>is at most\u00a0<code>20000</code>, the number of distinct elements of nums is <code>200</code>.", "Let <code>dp[x]</code> be the number of submultisets of <code>nums</code> with sum <code>x</code>.", "The answer to the problem is <code>dp[l] + dp[l+1] + \u2026 + dp[r]</code>.", "Use coin change dp to transition between states."], "exampleTestcases": "[1,2,2,3]\n6\n6\n[2,1,4,2,7]\n1\n5\n[1,2,1,3,5,2]\n3\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSubMultisets(vector<int>& nums, int l, int r) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countSubMultisets(List<Integer> nums, int l, int r) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countSubMultisets(self, nums, l, r):\n        \"\"\"\n        :type nums: List[int]\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countSubMultisets(int* nums, int numsSize, int l, int r) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountSubMultisets(IList<int> nums, int l, int r) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar countSubMultisets = function(nums, l, r) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countSubMultisets(nums: number[], l: number, r: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function countSubMultisets($nums, $l, $r) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countSubMultisets(_ nums: [Int], _ l: Int, _ r: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countSubMultisets(nums: List<Int>, l: Int, r: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countSubMultisets(List<int> nums, int l, int r) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countSubMultisets(nums []int, l int, r int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef count_sub_multisets(nums, l, r)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countSubMultisets(nums: List[Int], l: Int, r: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_sub_multisets(nums: Vec<i32>, l: i32, r: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-sub-multisets nums l r)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_sub_multisets(Nums :: [integer()], L :: integer(), R :: integer()) -> integer().\ncount_sub_multisets(Nums, L, R) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_sub_multisets(nums :: [integer], l :: integer, r :: integer) :: integer\n  def count_sub_multisets(nums, l, r) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "coin-change", "title": "Coin Change", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "coin-change-ii", "title": "Coin Change II", "isPaidOnly": false}]}