{"questionId": "2638", "acRate": 64.15156507413509, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2495", "paidOnly": true, "status": "ac", "title": "Number of Subarrays Having Even Product", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "number-of-subarrays-having-even-product", "content": "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <em>the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of </em><code>nums</code><em> having an even product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,6,7,13]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 subarrays with an even product:\n- nums[0..1] = 9 * 6 = 54.\n- nums[0..2] = 9 * 6 * 7 = 378.\n- nums[0..3] = 9 * 6 * 7 * 13 = 4914.\n- nums[1..1] = 6.\n- nums[1..2] = 6 * 7 = 42.\n- nums[1..3] = 6 * 7 * 13 = 546.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,3,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no subarrays with an even product.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["The product of elements in a subarray is even if it contains at least one even element.", "Iterate from left to right and save the last index of an even number. Let that saved index be \u201cj\u201d.", "It can be seen that every subarray starting from earlier than index \u201cj\u201d and ending at the current index has an even product."], "exampleTestcases": "[9,6,7,13]\n[7,3,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long evenProduct(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long evenProduct(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def evenProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long evenProduct(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long EvenProduct(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar evenProduct = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function evenProduct(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function evenProduct($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func evenProduct(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun evenProduct(nums: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int evenProduct(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func evenProduct(nums []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef even_product(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def evenProduct(nums: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn even_product(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (even-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec even_product(Nums :: [integer()]) -> integer().\neven_product(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec even_product(nums :: [integer]) :: integer\n  def even_product(nums) do\n    \n  end\nend"}], "similarQuestionList": []}