{"questionId": "2109", "acRate": 48.92363100597528, "difficulty": "Hard", "freqBar": 34.213770810818, "frontendQuestionId": "1982", "paidOnly": false, "status": "ac", "title": "Find Array Given Subset Sums", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Divide and Conquer", "id": "VG9waWNUYWdOb2RlOjEy", "slug": "divide-and-conquer"}], "titleSlug": "find-array-given-subset-sums", "content": "<p>You are given an integer <code>n</code> representing the length of an unknown array that you are trying to recover. You are also given an array <code>sums</code> containing the values of all <code>2<sup>n</sup></code> <strong>subset sums</strong> of the unknown array (in no particular order).</p>\n\n<p>Return <em>the array </em><code>ans</code><em> of length </em><code>n</code><em> representing the unknown array. If <strong>multiple</strong> answers exist, return <strong>any</strong> of them</em>.</p>\n\n<p>An array <code>sub</code> is a <strong>subset</strong> of an array <code>arr</code> if <code>sub</code> can be obtained from <code>arr</code> by deleting some (possibly zero or all) elements of <code>arr</code>. The sum of the elements in <code>sub</code> is one possible <strong>subset sum</strong> of <code>arr</code>. The sum of an empty array is considered to be <code>0</code>.</p>\n\n<p><strong>Note:</strong> Test cases are generated such that there will <strong>always</strong> be at least one correct answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, sums = [-3,-2,-1,0,0,1,2,3]\n<strong>Output:</strong> [1,2,-3]\n<strong>Explanation: </strong>[1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, sums = [0,0,0,0]\n<strong>Output:</strong> [0,0]\n<strong>Explanation:</strong> The only correct answer is [0,0].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\n<strong>Output:</strong> [0,-1,4,5]\n<strong>Explanation:</strong> [0,-1,4,5] is able to achieve the given subset sums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>sums.length == 2<sup>n</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["What information do the two largest elements tell us?", "Can we use recursion to check all possible states?"], "exampleTestcases": "3\n[-3,-2,-1,0,0,1,2,3]\n2\n[0,0,0,0]\n4\n[0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> recoverArray(int n, vector<int>& sums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] recoverArray(int n, int[] sums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def recoverArray(self, n, sums):\n        \"\"\"\n        :type n: int\n        :type sums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def recoverArray(self, n: int, sums: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* recoverArray(int n, int* sums, int sumsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] RecoverArray(int n, int[] sums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} sums\n * @return {number[]}\n */\nvar recoverArray = function(n, sums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function recoverArray(n: number, sums: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $sums\n     * @return Integer[]\n     */\n    function recoverArray($n, $sums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func recoverArray(_ n: Int, _ sums: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun recoverArray(n: Int, sums: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> recoverArray(int n, List<int> sums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func recoverArray(n int, sums []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} sums\n# @return {Integer[]}\ndef recover_array(n, sums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def recoverArray(n: Int, sums: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn recover_array(n: i32, sums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (recover-array n sums)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec recover_array(N :: integer(), Sums :: [integer()]) -> [integer()].\nrecover_array(N, Sums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec recover_array(n :: integer, sums :: [integer]) :: [integer]\n  def recover_array(n, sums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "subsets", "title": "Subsets", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "subsets-ii", "title": "Subsets II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "recover-the-original-array", "title": "Recover the Original Array", "isPaidOnly": false}]}