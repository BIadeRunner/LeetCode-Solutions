{"questionId": "3546", "acRate": 21.42148932839326, "difficulty": "Hard", "freqBar": 52.21578917159994, "frontendQuestionId": "3261", "paidOnly": false, "status": "ac", "title": "Count Substrings That Satisfy K-Constraint II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "count-substrings-that-satisfy-k-constraint-ii", "content": "<p>You are given a <strong>binary</strong> string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>You are also given a 2D integer array <code>queries</code>, where <code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code>.</p>\n\n<p>A <strong>binary string</strong> satisfies the <strong>k-constraint</strong> if <strong>either</strong> of the following conditions holds:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s in the string is at most <code>k</code>.</li>\n\t<li>The number of <code>1</code>&#39;s in the string is at most <code>k</code>.</li>\n</ul>\n\n<p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the number of <span data-keyword=\"substring-nonempty\">substrings</span> of <code>s[l<sub>i</sub>..r<sub>i</sub>]</code> that satisfy the <strong>k-constraint</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0001111&quot;, k = 2, queries = [[0,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[26]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For the query <code>[0, 6]</code>, all substrings of <code>s[0..6] = &quot;0001111&quot;</code> satisfy the k-constraint except for the substrings <code>s[0..5] = &quot;000111&quot;</code> and <code>s[0..6] = &quot;0001111&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;010101&quot;, k = 1, queries = [[0,5],[1,4],[2,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[15,9,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substrings of <code>s</code> with a length greater than 3 do not satisfy the k-constraint.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i] == [l<sub>i</sub>, r<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt; s.length</code></li>\n\t<li>All queries are distinct.</li>\n</ul>\n", "hints": ["Answering online queries is tough. Try to answer them offline since the queries are known beforehand.", "For each index, how do you calculate the left boundary so that the given condition is satisfied?", "Using the precomputed left boundaries and a range data structure, you can now answer the queries optimally."], "exampleTestcases": "\"0001111\"\n2\n[[0,6]]\n\"010101\"\n1\n[[0,5],[1,4],[2,3]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countKConstraintSubstrings(self, s, k, queries):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* countKConstraintSubstrings(char* s, int k, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long[] CountKConstraintSubstrings(string s, int k, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countKConstraintSubstrings = function(s, k, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countKConstraintSubstrings(s: string, k: number, queries: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function countKConstraintSubstrings($s, $k, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countKConstraintSubstrings(_ s: String, _ k: Int, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countKConstraintSubstrings(s: String, k: Int, queries: Array<IntArray>): LongArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> countKConstraintSubstrings(String s, int k, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countKConstraintSubstrings(s string, k int, queries [][]int) []int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef count_k_constraint_substrings(s, k, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countKConstraintSubstrings(s: String, k: Int, queries: Array[Array[Int]]): Array[Long] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_k_constraint_substrings(s: String, k: i32, queries: Vec<Vec<i32>>) -> Vec<i64> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-k-constraint-substrings s k queries)\n  (-> string? exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_k_constraint_substrings(S :: unicode:unicode_binary(), K :: integer(), Queries :: [[integer()]]) -> [integer()].\ncount_k_constraint_substrings(S, K, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_k_constraint_substrings(s :: String.t, k :: integer, queries :: [[integer]]) :: [integer]\n  def count_k_constraint_substrings(s, k, queries) do\n    \n  end\nend"}], "similarQuestionList": []}