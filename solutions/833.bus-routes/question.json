{"question_id": "833", "problem_slug": "bus-routes", "problem_title": "Bus Routes", "content": "You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\n\nFor example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.\n\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\n \nExample 1:\n\nInput: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\nOutput: 2\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\nExample 2:\n\nInput: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\nOutput: -1\n\n \n \nConstraints:\n\n1 <= routes.length <= 500.\n1 <= routes[i].length <= 105\nAll the values of routes[i] are unique.\nsum(routes[i].length) <= 105\n0 <= routes[i][j] < 106\n0 <= source, target < 106\n\n", "hints": [], "exampleTestcases": "[[1,2,7],[3,6,7]]\n1\n6\n[[7,12],[4,5,15],[6],[15,19],[9,12,13]]\n15\n12", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numBusesToDestination(int[][] routes, int source, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numBusesToDestination(self, routes, source, target):\n        \"\"\"\n        :type routes: List[List[int]]\n        :type source: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numBusesToDestination(int** routes, int routesSize, int* routesColSize, int source, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumBusesToDestination(int[][] routes, int source, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} routes\n * @param {number} source\n * @param {number} target\n * @return {number}\n */\nvar numBusesToDestination = function(routes, source, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numBusesToDestination(routes: number[][], source: number, target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $routes\n     * @param Integer $source\n     * @param Integer $target\n     * @return Integer\n     */\n    function numBusesToDestination($routes, $source, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numBusesToDestination(_ routes: [[Int]], _ source: Int, _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numBusesToDestination(routes: Array<IntArray>, source: Int, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numBusesToDestination(List<List<int>> routes, int source, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numBusesToDestination(routes [][]int, source int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} routes\n# @param {Integer} source\n# @param {Integer} target\n# @return {Integer}\ndef num_buses_to_destination(routes, source, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numBusesToDestination(routes: Array[Array[Int]], source: Int, target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_buses_to_destination(routes: Vec<Vec<i32>>, source: i32, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-buses-to-destination routes source target)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_buses_to_destination(Routes :: [[integer()]], Source :: integer(), Target :: integer()) -> integer().\nnum_buses_to_destination(Routes, Source, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_buses_to_destination(routes :: [[integer]], source :: integer, target :: integer) :: integer\n  def num_buses_to_destination(routes, source, target) do\n    \n  end\nend"}}}