{"questionId": "3182", "acRate": 67.72402854877082, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2898", "paidOnly": true, "status": "ac", "title": "Maximum Linear Stock Score", "titleSlug": "maximum-linear-stock-score", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}], "content": "<p>Given a <strong>1-indexed</strong> integer array <code>prices</code>, where <code>prices[i]</code> is the price of a particular stock on the <code>i<sup>th</sup></code> day, your task is to select some of the elements of <code>prices</code> such that your selection is <strong>linear</strong>.</p>\n\n<p>A selection <code>indexes</code>, where <code>indexes</code> is a <strong>1-indexed</strong> integer array of length <code>k</code> which is a subsequence of the array <code>[1, 2, ..., n]</code>, is <strong>linear</strong> if:</p>\n\n<ul>\n\t<li>For every <code>1 &lt; j &lt;= k</code>, <code>prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1]</code>.</li>\n</ul>\n\n<p>A <b>subsequence</b> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>The <strong>score</strong> of a selection <code>indexes</code>, is equal to the sum of the following array: <code>[prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]]</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> <strong>score</strong> that a linear selection can have</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,5,3,7,8]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> We can select the indexes [2,4,5]. We show that our selection is linear:\nFor j = 2, we have:\nindexes[2] - indexes[1] = 4 - 2 = 2.\nprices[4] - prices[2] = 7 - 5 = 2.\nFor j = 3, we have:\nindexes[3] - indexes[2] = 5 - 4 = 1.\nprices[5] - prices[4] = 8 - 7 = 1.\nThe sum of the elements is: prices[2] + prices[4] + prices[5] = 20.\nIt can be shown that the maximum sum a linear selection can have is 20.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [5,6,7,8,9]\n<strong>Output:</strong> 35\n<strong>Explanation:</strong> We can select all of the indexes [1,2,3,4,5]. Since each element has a difference of exactly 1 from its previous element, our selection is linear.\nThe sum of all the elements is 35 which is the maximum possible some out of every selection.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= prices[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Let's look at the condition as: <code>prices[indexes[i]] - indexes[i] == prices[indexes[j]] - indexes[j]</code>.", "So now we define a new array named <code>group</code> and is constructed as <code>group[i] = prices[i] - i</code>.", "A subarray of <code>prices</code>Â is linear if they belong to the same group.", "Since all elements are positive, if we choose some index <code>i</code>, the optimum way is to choose all elements from <code>group[i]</code>.", "So for each group, we calculate the sum of its prices and the answer would be the maximum sum over all groups."], "exampleTestcases": "[1,5,3,7,8]\n[5,6,7,8,9]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<int>& prices) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maxScore(int[] prices) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxScore(self, prices: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maxScore(int* prices, int pricesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[] prices) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxScore = function(prices) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxScore(prices: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxScore($prices) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxScore(_ prices: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(prices: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxScore(List<int> prices) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxScore(prices []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_score(prices)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxScore(prices: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(prices: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-score prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_score(Prices :: [integer()]) -> integer().\nmax_score(Prices) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(prices :: [integer]) :: integer\n  def max_score(prices) do\n    \n  end\nend"}], "similarQuestionList": []}