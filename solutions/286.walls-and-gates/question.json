{"question_id": "286", "problem_slug": "walls-and-gates", "problem_title": "Walls and Gates", "content": "You are given an m x n grid rooms initialized with these three possible values.\n\n-1 A wall or an obstacle.\n0 A gate.\nINF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.\n\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.\n \nExample 1:\n\n\nInput: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]\nOutput: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]\n\nExample 2:\n\nInput: rooms = [[-1]]\nOutput: [[-1]]\n\n \nConstraints:\n\nm == rooms.length\nn == rooms[i].length\n1 <= m, n <= 250\nrooms[i][j] is -1, 0, or 231 - 1.\n\n", "hints": [], "exampleTestcases": "[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]\n[[-1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    void wallsAndGates(vector<vector<int>>& rooms) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public void wallsAndGates(int[][] rooms) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wallsAndGates(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: None Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        "}, "C": {"langSlug": "c", "code": "void wallsAndGates(int** rooms, int roomsSize, int* roomsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public void WallsAndGates(int[][] rooms) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} rooms\n * @return {void} Do not return anything, modify rooms in-place instead.\n */\nvar wallsAndGates = function(rooms) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n Do not return anything, modify rooms in-place instead.\n */\nfunction wallsAndGates(rooms: number[][]): void {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rooms\n     * @return NULL\n     */\n    function wallsAndGates(&$rooms) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wallsAndGates(_ rooms: inout [[Int]]) {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wallsAndGates(rooms: Array<IntArray>): Unit {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  void wallsAndGates(List<List<int>> rooms) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wallsAndGates(rooms [][]int)  {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} rooms\n# @return {Void} Do not return anything, modify rooms in-place instead.\ndef walls_and_gates(rooms)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wallsAndGates(rooms: Array[Array[Int]]): Unit = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn walls_and_gates(rooms: &mut Vec<Vec<i32>>) {\n        \n    }\n}"}}}