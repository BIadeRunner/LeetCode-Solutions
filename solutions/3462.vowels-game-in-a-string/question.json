{"question_id": "3462", "problem_slug": "vowels-game-in-a-string", "problem_title": "Vowels Game in a String", "content": "Alice and Bob are playing a game on a string.\nYou are given a string s, Alice and Bob will take turns playing the following game where Alice starts first:\n\nOn Alice's turn, she has to remove any non-empty substring from s that contains an odd number of vowels.\nOn Bob's turn, he has to remove any non-empty substring from s that contains an even number of vowels.\n\nThe first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play optimally.\nReturn true if Alice wins the game, and false otherwise.\nThe English vowels are: a, e, i, o, and u.\n \nExample 1:\n\nInput: s = \"leetcoder\"\nOutput: true\nExplanation:\nAlice can win the game as follows:\n\nAlice plays first, she can delete the underlined substring in s = \"leetcoder\" which contains 3 vowels. The resulting string is s = \"der\".\nBob plays second, he can delete the underlined substring in s = \"der\" which contains 0 vowels. The resulting string is s = \"er\".\nAlice plays third, she can delete the whole string s = \"er\" which contains 1 vowel.\nBob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.\n\n\nExample 2:\n\nInput: s = \"bbcd\"\nOutput: false\nExplanation:\nThere is no valid play for Alice in her first turn, so Alice loses the game.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists only of lowercase English letters.\n\n", "hints": ["If there are no vowels in the initial string, then Bob wins.", "If the number of vowels in the initial string is odd, then Alice can remove the whole string on her first turn and win.", "What if the number of vowels in the initial string is even? What’s the optimal play for Alice’s first turn?"], "exampleTestcases": "\"leetcoder\"\n\"bbcd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool doesAliceWin(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean doesAliceWin(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def doesAliceWin(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def doesAliceWin(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool doesAliceWin(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool DoesAliceWin(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar doesAliceWin = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function doesAliceWin(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function doesAliceWin($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func doesAliceWin(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun doesAliceWin(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool doesAliceWin(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func doesAliceWin(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef does_alice_win(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def doesAliceWin(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn does_alice_win(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (does-alice-win s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec does_alice_win(S :: unicode:unicode_binary()) -> boolean().\ndoes_alice_win(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec does_alice_win(s :: String.t) :: boolean\n  def does_alice_win(s) do\n    \n  end\nend"}}}