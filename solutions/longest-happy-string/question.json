{"questionId": "1304", "acRate": 65.51658903107209, "difficulty": "Medium", "freqBar": 13.41174597627535, "frontendQuestionId": "1405", "paidOnly": false, "status": "ac", "title": "Longest Happy String", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}], "titleSlug": "longest-happy-string", "content": "<p>A string <code>s</code> is called <strong>happy</strong> if it satisfies the following conditions:</p>\n\n<ul>\n\t<li><code>s</code> only contains the letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li>\n\t<li><code>s</code> does not contain any of <code>&quot;aaa&quot;</code>, <code>&quot;bbb&quot;</code>, or <code>&quot;ccc&quot;</code> as a substring.</li>\n\t<li><code>s</code> contains <strong>at most</strong> <code>a</code> occurrences of the letter <code>&#39;a&#39;</code>.</li>\n\t<li><code>s</code> contains <strong>at most</strong> <code>b</code> occurrences of the letter <code>&#39;b&#39;</code>.</li>\n\t<li><code>s</code> contains <strong>at most</strong> <code>c</code> occurrences of the letter <code>&#39;c&#39;</code>.</li>\n</ul>\n\n<p>Given three integers <code>a</code>, <code>b</code>, and <code>c</code>, return <em>the <strong>longest possible happy </strong>string</em>. If there are multiple longest happy strings, return <em>any of them</em>. If there is no such string, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = 1, c = 7\n<strong>Output:</strong> &quot;ccaccbcc&quot;\n<strong>Explanation:</strong> &quot;ccbccacc&quot; would also be a correct answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 7, b = 1, c = 0\n<strong>Output:</strong> &quot;aabaa&quot;\n<strong>Explanation:</strong> It is the only correct answer in this case.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= a, b, c &lt;= 100</code></li>\n\t<li><code>a + b + c &gt; 0</code></li>\n</ul>\n", "hints": ["Use a greedy approach.", "Use the letter with the maximum current limit that can be added without breaking the condition."], "exampleTestcases": "1\n1\n7\n7\n1\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string longestDiverseString(int a, int b, int c) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String longestDiverseString(int a, int b, int c) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestDiverseString(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestDiverseString(self, a: int, b: int, c: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* longestDiverseString(int a, int b, int c) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LongestDiverseString(int a, int b, int c) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {string}\n */\nvar longestDiverseString = function(a, b, c) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestDiverseString(a: number, b: number, c: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return String\n     */\n    function longestDiverseString($a, $b, $c) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestDiverseString(_ a: Int, _ b: Int, _ c: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestDiverseString(a: Int, b: Int, c: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String longestDiverseString(int a, int b, int c) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func longestDiverseString(a int, b int, c int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {String}\ndef longest_diverse_string(a, b, c)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestDiverseString(a: Int, b: Int, c: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_diverse_string(a: i32, b: i32, c: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (longest-diverse-string a b c)\n  (-> exact-integer? exact-integer? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec longest_diverse_string(A :: integer(), B :: integer(), C :: integer()) -> unicode:unicode_binary().\nlongest_diverse_string(A, B, C) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_diverse_string(a :: integer, b :: integer, c :: integer) :: String.t\n  def longest_diverse_string(a, b, c) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "reorganize-string", "title": "Reorganize String", "isPaidOnly": false}]}