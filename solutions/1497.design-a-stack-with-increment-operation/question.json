{"question_id": "1497", "problem_slug": "design-a-stack-with-increment-operation", "problem_title": "Design a Stack With Increment Operation", "content": "Design a stack that supports increment operations on its elements.\nImplement the CustomStack class:\n\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack.\nvoid push(int x) Adds x to the top of the stack if the stack has not reached the maxSize.\nint pop() Pops and returns the top of the stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.\n\n \nExample 1:\n\nInput\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --> Stack is empty return -1.\n\n \nConstraints:\n\n1 <= maxSize, x, k <= 1000\n0 <= val <= 100\nAt most 1000 calls will be made to each method of increment, push and pop each separately.\n\n", "hints": ["Use an array to represent the stack. Push will add new integer to the array. Pop removes the last element in the array and increment will add val to the first k elements of the array.", "This solution run in O(1) per push and pop and O(k) per increment."], "exampleTestcases": "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class CustomStack {\npublic:\n    CustomStack(int maxSize) {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n    \n    void increment(int k, int val) {\n        \n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */"}, "Java": {"langSlug": "java", "code": "class CustomStack {\n\n    public CustomStack(int maxSize) {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n    \n    public void increment(int k, int val) {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */"}, "Python": {"langSlug": "python", "code": "class CustomStack(object):\n\n    def __init__(self, maxSize):\n        \"\"\"\n        :type maxSize: int\n        \"\"\"\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def increment(self, k, val):\n        \"\"\"\n        :type k: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)"}, "Python3": {"langSlug": "python3", "code": "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n    def increment(self, k: int, val: int) -> None:\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} CustomStack;\n\n\nCustomStack* customStackCreate(int maxSize) {\n    \n}\n\nvoid customStackPush(CustomStack* obj, int x) {\n    \n}\n\nint customStackPop(CustomStack* obj) {\n    \n}\n\nvoid customStackIncrement(CustomStack* obj, int k, int val) {\n    \n}\n\nvoid customStackFree(CustomStack* obj) {\n    \n}\n\n/**\n * Your CustomStack struct will be instantiated and called as such:\n * CustomStack* obj = customStackCreate(maxSize);\n * customStackPush(obj, x);\n \n * int param_2 = customStackPop(obj);\n \n * customStackIncrement(obj, k, val);\n \n * customStackFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class CustomStack {\n\n    public CustomStack(int maxSize) {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n    \n    public void Increment(int k, int val) {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * obj.Increment(k,val);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    \n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    \n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class CustomStack {\n    constructor(maxSize: number) {\n        \n    }\n\n    push(x: number): void {\n        \n    }\n\n    pop(): number {\n        \n    }\n\n    increment(k: number, val: number): void {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */"}, "PHP": {"langSlug": "php", "code": "class CustomStack {\n    /**\n     * @param Integer $maxSize\n     */\n    function __construct($maxSize) {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n  \n    /**\n     * @param Integer $k\n     * @param Integer $val\n     * @return NULL\n     */\n    function increment($k, $val) {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * $obj = CustomStack($maxSize);\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $obj->increment($k, $val);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass CustomStack {\n\n    init(_ maxSize: Int) {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n    \n    func increment(_ k: Int, _ val: Int) {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * let obj = CustomStack(maxSize)\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * obj.increment(k, val)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class CustomStack(maxSize: Int) {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n    fun increment(k: Int, `val`: Int) {\n        \n    }\n\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,`val`)\n */"}, "Dart": {"langSlug": "dart", "code": "class CustomStack {\n\n  CustomStack(int maxSize) {\n    \n  }\n  \n  void push(int x) {\n    \n  }\n  \n  int pop() {\n    \n  }\n  \n  void increment(int k, int val) {\n    \n  }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = CustomStack(maxSize);\n * obj.push(x);\n * int param2 = obj.pop();\n * obj.increment(k,val);\n */"}, "Go": {"langSlug": "golang", "code": "type CustomStack struct {\n    \n}\n\n\nfunc Constructor(maxSize int) CustomStack {\n    \n}\n\n\nfunc (this *CustomStack) Push(x int)  {\n    \n}\n\n\nfunc (this *CustomStack) Pop() int {\n    \n}\n\n\nfunc (this *CustomStack) Increment(k int, val int)  {\n    \n}\n\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * obj := Constructor(maxSize);\n * obj.Push(x);\n * param_2 := obj.Pop();\n * obj.Increment(k,val);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class CustomStack\n\n=begin\n    :type max_size: Integer\n=end\n    def initialize(max_size)\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :type k: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def increment(k, val)\n        \n    end\n\n\nend\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack.new(max_size)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k, val)"}, "Scala": {"langSlug": "scala", "code": "class CustomStack(_maxSize: Int) {\n\n    def push(x: Int): Unit = {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def increment(k: Int, `val`: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * val obj = new CustomStack(maxSize)\n * obj.push(x)\n * val param_2 = obj.pop()\n * obj.increment(k,`val`)\n */"}, "Rust": {"langSlug": "rust", "code": "struct CustomStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CustomStack {\n\n    fn new(maxSize: i32) -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n    \n    fn increment(&self, k: i32, val: i32) {\n        \n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * let obj = CustomStack::new(maxSize);\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * obj.increment(k, val);\n */"}, "Racket": {"langSlug": "racket", "code": "(define custom-stack%\n  (class object%\n    (super-new)\n    \n    ; max-size : exact-integer?\n    (init-field\n      max-size)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n      )\n    ; increment : exact-integer? exact-integer? -> void?\n    (define/public (increment k val)\n      )))\n\n;; Your custom-stack% object will be instantiated and called as such:\n;; (define obj (new custom-stack% [max-size max-size]))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (send obj increment k val)"}, "Erlang": {"langSlug": "erlang", "code": "-spec custom_stack_init_(MaxSize :: integer()) -> any().\ncustom_stack_init_(MaxSize) ->\n  .\n\n-spec custom_stack_push(X :: integer()) -> any().\ncustom_stack_push(X) ->\n  .\n\n-spec custom_stack_pop() -> integer().\ncustom_stack_pop() ->\n  .\n\n-spec custom_stack_increment(K :: integer(), Val :: integer()) -> any().\ncustom_stack_increment(K, Val) ->\n  .\n\n\n%% Your functions will be called as such:\n%% custom_stack_init_(MaxSize),\n%% custom_stack_push(X),\n%% Param_2 = custom_stack_pop(),\n%% custom_stack_increment(K, Val),\n\n%% custom_stack_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule CustomStack do\n  @spec init_(max_size :: integer) :: any\n  def init_(max_size) do\n    \n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n    \n  end\n\n  @spec pop() :: integer\n  def pop() do\n    \n  end\n\n  @spec increment(k :: integer, val :: integer) :: any\n  def increment(k, val) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# CustomStack.init_(max_size)\n# CustomStack.push(x)\n# param_2 = CustomStack.pop()\n# CustomStack.increment(k, val)\n\n# CustomStack.init_ will be called before every test case, in which you can do some necessary initializations."}}}