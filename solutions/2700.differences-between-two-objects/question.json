{"questionId": "2774", "acRate": 75.38789169455431, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2700", "paidOnly": true, "status": "ac", "title": "Differences Between Two Objects", "titleSlug": "differences-between-two-objects", "topicTags": [], "content": "<p>Write a function that accepts two deeply nested objects or arrays&nbsp;<code>obj1</code> and&nbsp;<code>obj2</code>&nbsp;and returns a new&nbsp;object representing their differences.</p>\n\n<p>The function should compare the properties of the two objects and identify any changes.&nbsp;The returned object should only contains keys where the value is different from&nbsp;<code>obj1</code> to&nbsp;<code>obj2</code>.</p>\n\n<p>For each changed key, the value should be represented as an&nbsp;array <code>[obj1 value, obj2&nbsp;value]</code>. Keys that exist in one object but not in the other should not be included in the returned object.&nbsp;The end result should be a deeply nested object where each leaf value is a difference array.</p>\n\n<p>When comparing two arrays, the indices of the arrays are considered to be their keys.&nbsp;</p>\n\n<p>You may assume that both objects are the output of <code>JSON.parse</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {}\nobj2 = {\n&nbsp; &quot;a&quot;: 1, \n  &quot;b&quot;: 2\n}\n<strong>Output:</strong> {}\n<strong>Explanation:</strong> There were no modifications made to obj1. New keys &quot;a&quot; and &quot;b&quot; appear in obj2, but keys that are added or removed should be ignored.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: 1,\n&nbsp; &quot;v&quot;: 3,\n&nbsp; &quot;x&quot;: [],\n&nbsp; &quot;z&quot;: {\n&nbsp; &nbsp; &quot;a&quot;: null\n&nbsp; }\n}\nobj2 = {\n&nbsp; &quot;a&quot;: 2,\n&nbsp; &quot;v&quot;: 4,\n&nbsp; &quot;x&quot;: [],\n&nbsp; &quot;z&quot;: {\n&nbsp; &nbsp; &quot;a&quot;: 2\n&nbsp; }\n}\n<strong>Output:</strong> \n{\n&nbsp; &quot;a&quot;: [1, 2],\n  &quot;v&quot;: [3, 4],\n&nbsp; &quot;z&quot;: {\n&nbsp;   &quot;a&quot;: [null, 2]\n&nbsp; }\n}\n<strong>Explanation:</strong> The keys &quot;a&quot;, &quot;v&quot;, and &quot;z&quot; all had changes applied. &quot;a&quot; was changed from 1 to 2. &quot;v&quot; was changed from 3 to 4. &quot;z&quot; had a change applied to a child object. &quot;z.a&quot; was changed from null to 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: 5, \n&nbsp; &quot;v&quot;: 6, \n&nbsp; &quot;z&quot;: [1, 2, 4, [2, 5, 7]]\n}\nobj2 = {\n&nbsp; &quot;a&quot;: 5, \n&nbsp; &quot;v&quot;: 7, \n&nbsp; &quot;z&quot;: [1, 2, 3, [1]]\n}\n<strong>Output:</strong> \n{\n&nbsp; &quot;v&quot;: [6, 7],\n&nbsp; &quot;z&quot;: {\n&nbsp;   &quot;2&quot;: [4, 3],\n&nbsp;   &quot;3&quot;: {\n&nbsp;     &quot;0&quot;: [2, 1]\n&nbsp;   }\n&nbsp; }\n}\n<strong>Explanation:</strong> In obj1 and obj2, the keys &quot;v&quot; and &quot;z&quot; have different assigned values. &quot;a&quot; is ignored because the value is unchanged. In the key &quot;z&quot;, there is a nested array. Arrays are treated like objects where the indices are keys. There were two alterations to the the array: z[2] and z[3][0]. z[0] and z[1] were unchanged and thus not included. z[3][1] and z[3][2] were removed and thus not included.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: {&quot;b&quot;: 1}, \n}\nobj2 = {\n&nbsp; &quot;a&quot;: [5],\n}\n<strong>Output:</strong> \n{\n  &quot;a&quot;: [{&quot;b&quot;: 1}, [5]]\n}\n<strong>Explanation:</strong> The key &quot;a&quot; exists in both objects. Since the two associated values have different types, they are placed in the difference array.</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: [1, 2, {}], \n&nbsp; &quot;b&quot;: false\n}\nobj2 = { &nbsp; \n&nbsp; &quot;b&quot;: false,\n&nbsp; &quot;a&quot;: [1, 2, {}]\n}\n<strong>Output:</strong> \n{}\n<strong>Explanation:</strong> Apart from a different ordering of keys, the two objects are identical so an empty object is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>obj1</code> and <code>obj2</code> are valid JSON objects or arrays</li>\n\t<li><code>2 &lt;= JSON.stringify(obj1).length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= JSON.stringify(obj2).length &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Find the intersection of the keys/indices on the two arrays/objects.", "Analyze the data structure recursively.", "For each key in the intersection, omit if there are no differences in the leaves. Otherwise return the difference."], "exampleTestcases": "{}\n{\"a\": 1, \"b\": 2}\n{\"a\": 1, \"v\": 3, \"x\": [], \"z\": {\"a\": null}}\n{\"a\": 2, \"v\": 4, \"x\": [], \"z\": {\"a\": 2}}\n{\"a\": 5, \"v\": 6, \"z\": [1,2,4, [2,5,7]]}\n{\"a\": 5, \"v\": 7, \"z\": [1,2,3, [1]]}\n{\"a\":{\"b\":1}}\n{\"a\":[5]}\n{\"a\": [1, 2, {}],\"b\": false}\n{\"b\": false, \"a\": [1, 2, {}]}", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Object|Array} obj1\n * @param {Object|Array} obj2\n * @return {Object|Array}\n */\nfunction objDiff(obj1, obj2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Obj = Record<string, JSONValue> | Array<JSONValue>\n\nfunction objDiff(obj1: Obj, obj2: Obj): Obj {\n    \n};"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "json-deep-equal", "title": "JSON Deep Equal", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "convert-object-to-json-string", "title": "Convert Object to JSON String", "isPaidOnly": true}]}