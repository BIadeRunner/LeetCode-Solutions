{"question_id": "2799", "problem_slug": "date-range-generator", "problem_title": "Date Range Generator", "content": "Given a start date start, an end date end, and a positive integer step, return a generator object that yields dates in the range from start to end inclusive.\nThe value of step indicates the number of days between consecutive yielded values.\nAll yielded dates must be in the string format YYYY-MM-DD.\n \nExample 1:\n\nInput: start = \"2023-04-01\", end = \"2023-04-04\", step = 1\nOutput: [\"2023-04-01\",\"2023-04-02\",\"2023-04-03\",\"2023-04-04\"]\nExplanation: \nconst g = dateRangeGenerator(start, end, step);\ng.next().value // '2023-04-01'\ng.next().value // '2023-04-02'\ng.next().value // '2023-04-03'\ng.next().value // '2023-04-04'\nExample 2:\n\nInput: start = \"2023-04-10\", end = \"2023-04-20\", step = 3\nOutput: [\"2023-04-10\",\"2023-04-13\",\"2023-04-16\",\"2023-04-19\"]\nExplanation: \nconst g = dateRangeGenerator(start, end, step);\ng.next().value // '2023-04-10'\ng.next().value // '2023-04-13'\ng.next().value // '2023-04-16'\ng.next().value // '2023-04-19'\nExample 3:\n\nInput: start = \"2023-04-10\", end = \"2023-04-10\", step = 1\nOutput: [\"2023-04-10\"]\nExplanation: \nconst g = dateRangeGenerator(start, end, step);\ng.next().value // '2023-04-10'\n\n \nConstraints:\n\nnew Date(start) <= new Date(end)\nstart and end dates are in the string format YYYY-MM-DD\n0 <= The difference in days between the start date and the end date <= 1500\n1 <= step <= 1000\n\n", "hints": [], "exampleTestcases": "\"2023-04-01\"\n\"2023-04-04\"\n1\n\"2023-04-10\"\n\"2023-04-20\"\n3\n\"2023-04-10\"\n\"2023-04-10\"\n1", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} start\n * @param {string} end\n * @param {number} step\n * @yields {string}\n */\nvar dateRangeGenerator = function* (start, end, step) {\n    \n};\n\n/**\n * const g = dateRangeGenerator('2023-04-01', '2023-04-04', 1);\n * g.next().value; // '2023-04-01'\n * g.next().value; // '2023-04-02'\n * g.next().value; // '2023-04-03'\n * g.next().value; // '2023-04-04'\n * g.next().done; // true\n */"}, "TypeScript": {"langSlug": "typescript", "code": "function* dateRangeGenerator(start: string, end: string, step: number) : Generator<string> {\n    \n};\n\n/**\n * const g = dateRangeGenerator('2023-04-01', '2023-04-04', 1);\n * g.next().value; // '2023-04-01'\n * g.next().value; // '2023-04-02'\n * g.next().value; // '2023-04-03'\n * g.next().value; // '2023-04-04'\n * g.next().done; // true\n */"}}}