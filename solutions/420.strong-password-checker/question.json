{"question_id": "420", "problem_slug": "strong-password-checker", "problem_title": "Strong Password Checker", "content": "A password is considered strong if the below conditions are all met:\n\nIt has at least 6 characters and at most 20 characters.\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\nIt does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\n\nInsert one character to password,\nDelete one character from password, or\nReplace one character of password with another character.\n\n \nExample 1:\nInput: password = \"a\"\nOutput: 5\nExample 2:\nInput: password = \"aA1\"\nOutput: 3\nExample 3:\nInput: password = \"1337C0d3\"\nOutput: 0\n\n \nConstraints:\n\n1 <= password.length <= 50\npassword consists of letters, digits, dot '.' or exclamation mark '!'.\n\n", "hints": [], "exampleTestcases": "\"a\"\n\"aA1\"\n\"1337C0d3\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int strongPasswordChecker(string password) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int strongPasswordChecker(String password) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int strongPasswordChecker(char* password) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int StrongPasswordChecker(string password) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} password\n * @return {number}\n */\nvar strongPasswordChecker = function(password) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function strongPasswordChecker(password: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $password\n     * @return Integer\n     */\n    function strongPasswordChecker($password) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func strongPasswordChecker(_ password: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun strongPasswordChecker(password: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int strongPasswordChecker(String password) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func strongPasswordChecker(password string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} password\n# @return {Integer}\ndef strong_password_checker(password)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def strongPasswordChecker(password: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn strong_password_checker(password: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (strong-password-checker password)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec strong_password_checker(Password :: unicode:unicode_binary()) -> integer().\nstrong_password_checker(Password) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec strong_password_checker(password :: String.t) :: integer\n  def strong_password_checker(password) do\n    \n  end\nend"}}}