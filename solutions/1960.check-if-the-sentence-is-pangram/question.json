{"question_id": "1960", "problem_slug": "check-if-the-sentence-is-pangram", "problem_title": "Check if the Sentence Is Pangram", "content": "A pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.\n \nExample 1:\n\nInput: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\nOutput: true\nExplanation: sentence contains at least one of every letter of the English alphabet.\n\nExample 2:\n\nInput: sentence = \"leetcode\"\nOutput: false\n\n \nConstraints:\n\n1 <= sentence.length <= 1000\nsentence consists of lowercase English letters.\n\n", "hints": ["Iterate over the string and mark each character as found (using a boolean array, bitmask, or any other similar way).", "Check if the number of found characters equals the alphabet length."], "exampleTestcases": "\"thequickbrownfoxjumpsoverthelazydog\"\n\"leetcode\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkIfPangram(string sentence) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkIfPangram(String sentence) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkIfPangram(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkIfPangram(self, sentence: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkIfPangram(char* sentence) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckIfPangram(string sentence) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @return {boolean}\n */\nvar checkIfPangram = function(sentence) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkIfPangram(sentence: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return Boolean\n     */\n    function checkIfPangram($sentence) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkIfPangram(_ sentence: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkIfPangram(sentence: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkIfPangram(String sentence) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkIfPangram(sentence string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} sentence\n# @return {Boolean}\ndef check_if_pangram(sentence)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkIfPangram(sentence: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_if_pangram(sentence: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-if-pangram sentence)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_if_pangram(Sentence :: unicode:unicode_binary()) -> boolean().\ncheck_if_pangram(Sentence) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_if_pangram(sentence :: String.t) :: boolean\n  def check_if_pangram(sentence) do\n    \n  end\nend"}}}