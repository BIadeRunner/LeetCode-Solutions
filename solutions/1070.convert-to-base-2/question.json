{"question_id": "1070", "problem_slug": "convert-to-base-2", "problem_title": "Convert to Base -2", "content": "Given an integer n, return a binary string representing its representation in base -2.\nNote that the returned string should not have leading zeros unless the string is \"0\".\n \nExample 1:\n\nInput: n = 2\nOutput: \"110\"\nExplantion: (-2)2 + (-2)1 = 2\n\nExample 2:\n\nInput: n = 3\nOutput: \"111\"\nExplantion: (-2)2 + (-2)1 + (-2)0 = 3\n\nExample 3:\n\nInput: n = 4\nOutput: \"100\"\nExplantion: (-2)2 = 4\n\n \nConstraints:\n\n0 <= n <= 109\n\n", "hints": ["Figure out whether you need the ones digit placed or not, then shift by two."], "exampleTestcases": "2\n3\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string baseNeg2(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String baseNeg2(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def baseNeg2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def baseNeg2(self, n: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* baseNeg2(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string BaseNeg2(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar baseNeg2 = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function baseNeg2(n: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function baseNeg2($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func baseNeg2(_ n: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun baseNeg2(n: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String baseNeg2(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func baseNeg2(n int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String}\ndef base_neg2(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def baseNeg2(n: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn base_neg2(n: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (base-neg2 n)\n  (-> exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec base_neg2(N :: integer()) -> unicode:unicode_binary().\nbase_neg2(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec base_neg2(n :: integer) :: String.t\n  def base_neg2(n) do\n    \n  end\nend"}}}