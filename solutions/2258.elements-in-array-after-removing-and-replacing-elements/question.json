{"questionId": "2258", "acRate": 73.48837209302326, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2113", "paidOnly": true, "status": "ac", "title": "Elements in Array After Removing and Replacing Elements", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}], "titleSlug": "elements-in-array-after-removing-and-replacing-elements", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. Initially on minute <code>0</code>, the array is unchanged. Every minute, the <strong>leftmost</strong> element in <code>nums</code> is removed until no elements remain. Then, every minute, one element is appended to the <strong>end</strong> of <code>nums</code>, in the order they were removed in, until the original array is restored. This process repeats indefinitely.</p>\n\n<ul>\n\t<li>For example, the array <code>[0,1,2]</code> would change as follows: <code>[0,1,2] &rarr; [1,2] &rarr; [2] &rarr; [] &rarr; [0] &rarr; [0,1] &rarr; [0,1,2] &rarr; [1,2] &rarr; [2] &rarr; [] &rarr; [0] &rarr; [0,1] &rarr; [0,1,2] &rarr; ...</code></li>\n</ul>\n\n<p>You are also given a 2D integer array <code>queries</code> of size <code>n</code> where <code>queries[j] = [time<sub>j</sub>, index<sub>j</sub>]</code>. The answer to the <code>j<sup>th</sup></code> query is:</p>\n\n<ul>\n\t<li><code>nums[index<sub>j</sub>]</code> if <code>index<sub>j</sub> &lt; nums.length</code> at minute <code>time<sub>j</sub></code></li>\n\t<li><code>-1</code> if <code>index<sub>j</sub> &gt;= nums.length</code> at minute <code>time<sub>j</sub></code></li>\n</ul>\n\n<p>Return <em>an integer array <code>ans</code> of size </em><code>n</code> <em>where </em><code>ans[j]</code><em> is the answer to the </em><code>j<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2], queries = [[0,2],[2,0],[3,2],[5,0]]\n<strong>Output:</strong> [2,2,-1,0]\n<strong>Explanation:</strong>\nMinute 0: [0,1,2] - All elements are in the nums.\nMinute 1: [1,2]   - The leftmost element, 0, is removed.\nMinute 2: [2]     - The leftmost element, 1, is removed.\nMinute 3: []      - The leftmost element, 2, is removed.\nMinute 4: [0]     - 0 is added to the end of nums.\nMinute 5: [0,1]   - 1 is added to the end of nums.\n\nAt minute 0, nums[2] is 2.\nAt minute 2, nums[0] is 2.\nAt minute 3, nums[2] does not exist.\nAt minute 5, nums[0] is 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2], queries = [[0,0],[1,0],[2,0],[3,0]]\n<strong>Output:</strong> [2,-1,2,-1]\nMinute 0: [2] - All elements are in the nums.\nMinute 1: []  - The leftmost element, 2, is removed.\nMinute 2: [2] - 2 is added to the end of nums.\nMinute 3: []  - The leftmost element, 2, is removed.\n\nAt minute 0, nums[0] is 2.\nAt minute 1, nums[0] does not exist.\nAt minute 2, nums[0] is 2.\nAt minute 3, nums[0] does not exist.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>n == queries.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[j].length == 2</code></li>\n\t<li><code>0 &lt;= time<sub>j</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= index<sub>j</sub> &lt; nums.length</code></li>\n</ul>\n", "hints": ["Try to find a pattern in how nums changes.", "Let m be the original length of nums. If time_i / m (integer division) is even, then nums is at its original size or decreasing in size. If it is odd, then it is empty, or increasing in size.", "time_i % m can be used to find how many elements are in nums at minute time_i."], "exampleTestcases": "[0,1,2]\n[[0,2],[2,0],[3,2],[5,0]]\n[2]\n[[0,0],[1,0],[2,0],[3,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> elementInNums(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] elementInNums(int[] nums, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def elementInNums(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def elementInNums(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* elementInNums(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ElementInNums(int[] nums, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar elementInNums = function(nums, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function elementInNums(nums: number[], queries: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function elementInNums($nums, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func elementInNums(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun elementInNums(nums: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> elementInNums(List<int> nums, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func elementInNums(nums []int, queries [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef element_in_nums(nums, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def elementInNums(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn element_in_nums(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (element-in-nums nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec element_in_nums(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nelement_in_nums(Nums, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec element_in_nums(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def element_in_nums(nums, queries) do\n    \n  end\nend"}], "similarQuestionList": []}