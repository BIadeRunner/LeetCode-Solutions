{"question_id": "2258", "problem_slug": "elements-in-array-after-removing-and-replacing-elements", "problem_title": "Elements in Array After Removing and Replacing Elements", "content": "You are given a 0-indexed integer array nums. Initially on minute 0, the array is unchanged. Every minute, the leftmost element in nums is removed until no elements remain. Then, every minute, one element is appended to the end of nums, in the order they were removed in, until the original array is restored. This process repeats indefinitely.\n\nFor example, the array [0,1,2] would change as follows: [0,1,2] → [1,2] → [2] → [] → [0] → [0,1] → [0,1,2] → [1,2] → [2] → [] → [0] → [0,1] → [0,1,2] → ...\n\nYou are also given a 2D integer array queries of size n where queries[j] = [timej, indexj]. The answer to the jth query is:\n\nnums[indexj] if indexj < nums.length at minute timej\n-1 if indexj >= nums.length at minute timej\n\nReturn an integer array ans of size n where ans[j] is the answer to the jth query.\n \nExample 1:\n\nInput: nums = [0,1,2], queries = [[0,2],[2,0],[3,2],[5,0]]\nOutput: [2,2,-1,0]\nExplanation:\nMinute 0: [0,1,2] - All elements are in the nums.\nMinute 1: [1,2]   - The leftmost element, 0, is removed.\nMinute 2: [2]     - The leftmost element, 1, is removed.\nMinute 3: []      - The leftmost element, 2, is removed.\nMinute 4: [0]     - 0 is added to the end of nums.\nMinute 5: [0,1]   - 1 is added to the end of nums.\n\nAt minute 0, nums[2] is 2.\nAt minute 2, nums[0] is 2.\nAt minute 3, nums[2] does not exist.\nAt minute 5, nums[0] is 0.\n\nExample 2:\n\nInput: nums = [2], queries = [[0,0],[1,0],[2,0],[3,0]]\nOutput: [2,-1,2,-1]\nMinute 0: [2] - All elements are in the nums.\nMinute 1: []  - The leftmost element, 2, is removed.\nMinute 2: [2] - 2 is added to the end of nums.\nMinute 3: []  - The leftmost element, 2, is removed.\n\nAt minute 0, nums[0] is 2.\nAt minute 1, nums[0] does not exist.\nAt minute 2, nums[0] is 2.\nAt minute 3, nums[0] does not exist.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 100\nn == queries.length\n1 <= n <= 105\nqueries[j].length == 2\n0 <= timej <= 105\n0 <= indexj < nums.length\n\n", "hints": ["Try to find a pattern in how nums changes.", "Let m be the original length of nums. If time_i / m (integer division) is even, then nums is at its original size or decreasing in size. If it is odd, then it is empty, or increasing in size.", "time_i % m can be used to find how many elements are in nums at minute time_i."], "exampleTestcases": "[0,1,2]\n[[0,2],[2,0],[3,2],[5,0]]\n[2]\n[[0,0],[1,0],[2,0],[3,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> elementInNums(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] elementInNums(int[] nums, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def elementInNums(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def elementInNums(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* elementInNums(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ElementInNums(int[] nums, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar elementInNums = function(nums, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function elementInNums(nums: number[], queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function elementInNums($nums, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func elementInNums(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun elementInNums(nums: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> elementInNums(List<int> nums, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func elementInNums(nums []int, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef element_in_nums(nums, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def elementInNums(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn element_in_nums(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (element-in-nums nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec element_in_nums(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nelement_in_nums(Nums, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec element_in_nums(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def element_in_nums(nums, queries) do\n    \n  end\nend"}}}