{"question_id": "1490", "problem_slug": "generate-a-string-with-characters-that-have-odd-counts", "problem_title": "Generate a String With Characters That Have Odd Counts", "content": "Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  \n \nExample 1:\n\nInput: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".\n\nExample 2:\n\nInput: n = 2\nOutput: \"xy\"\nExplanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".\n\nExample 3:\n\nInput: n = 7\nOutput: \"holasss\"\n\n \nConstraints:\n\n1 <= n <= 500\n\n", "hints": ["If n is odd, return a string of size n formed only by 'a', else return string formed with n-1 'a' and 1 'b''."], "exampleTestcases": "4\n2\n7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string generateTheString(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String generateTheString(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def generateTheString(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* generateTheString(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string GenerateTheString(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar generateTheString = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function generateTheString(n: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function generateTheString($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func generateTheString(_ n: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun generateTheString(n: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String generateTheString(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func generateTheString(n int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String}\ndef generate_the_string(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def generateTheString(n: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn generate_the_string(n: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (generate-the-string n)\n  (-> exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec generate_the_string(N :: integer()) -> unicode:unicode_binary().\ngenerate_the_string(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_the_string(n :: integer) :: String.t\n  def generate_the_string(n) do\n    \n  end\nend"}}}