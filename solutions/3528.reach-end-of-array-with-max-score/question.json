{"question_id": "3528", "problem_slug": "reach-end-of-array-with-max-score", "problem_title": "Reach End of Array With Max Score", "content": "You are given an integer array nums of length n.\nYour goal is to start at index 0 and reach index n - 1. You can only jump to indices greater than your current index.\nThe score for a jump from index i to index j is calculated as (j - i) * nums[i].\nReturn the maximum possible total score by the time you reach the last index.\n \nExample 1:\n\nInput: nums = [1,3,1,5]\nOutput: 7\nExplanation:\nFirst, jump to index 1 and then jump to the last index. The final score is 1 * 1 + 2 * 3 = 7.\n\nExample 2:\n\nInput: nums = [4,3,1,3,2]\nOutput: 16\nExplanation:\nJump directly to the last index. The final score is 4 * 4 = 16.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\n\n", "hints": ["It can be proven that from each index <code>i</code>, the optimal solution is to jump to the nearest index <code>j > i</code> such that <code>nums[j] > nums[i]</code>."], "exampleTestcases": "[1,3,1,5]\n[4,3,1,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long findMaximumScore(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long findMaximumScore(List<Integer> nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMaximumScore(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long findMaximumScore(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long FindMaximumScore(IList<int> nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumScore = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMaximumScore(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaximumScore($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMaximumScore(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaximumScore(nums: List<Int>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findMaximumScore(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMaximumScore(nums []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_maximum_score(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMaximumScore(nums: List[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximum_score(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-maximum-score nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_maximum_score(Nums :: [integer()]) -> integer().\nfind_maximum_score(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_maximum_score(nums :: [integer]) :: integer\n  def find_maximum_score(nums) do\n    \n  end\nend"}}}