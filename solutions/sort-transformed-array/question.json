{"questionId": "360", "acRate": 56.13555799512273, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "360", "paidOnly": true, "status": "ac", "title": "Sort Transformed Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "sort-transformed-array", "content": "<p>Given a <strong>sorted</strong> integer array <code>nums</code> and three integers <code>a</code>, <code>b</code> and <code>c</code>, apply a quadratic function of the form <code>f(x) = ax<sup>2</sup> + bx + c</code> to each element <code>nums[i]</code> in the array, and return <em>the array in a sorted order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [-4,-2,2,4], a = 1, b = 3, c = 5\n<strong>Output:</strong> [3,9,15,33]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-4,-2,2,4], a = -1, b = 3, c = 5\n<strong>Output:</strong> [-23,-5,1,7]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>-100 &lt;= nums[i], a, b, c &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>ascending</strong> order.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it in <code>O(n)</code> time?</p>\n", "hints": ["x^2 + x  will form a parabola.", "Parameter A in:  A * x^2 + B * x + C dictates the shape of the parabola.</br>\r\nPositive A means the parabola remains concave (high-low-high), but negative A inverts the parabola to be convex (low-high-low)."], "exampleTestcases": "[-4,-2,2,4]\n1\n3\n5\n[-4,-2,2,4]\n-1\n3\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortTransformedArray(self, nums, a, b, c):\n        \"\"\"\n        :type nums: List[int]\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortTransformedArray(int* nums, int numsSize, int a, int b, int c, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SortTransformedArray(int[] nums, int a, int b, int c) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number[]}\n */\nvar sortTransformedArray = function(nums, a, b, c) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortTransformedArray(nums: number[], a: number, b: number, c: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer[]\n     */\n    function sortTransformedArray($nums, $a, $b, $c) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortTransformedArray(_ nums: [Int], _ a: Int, _ b: Int, _ c: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortTransformedArray(nums: IntArray, a: Int, b: Int, c: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> sortTransformedArray(List<int> nums, int a, int b, int c) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func sortTransformedArray(nums []int, a int, b int, c int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer[]}\ndef sort_transformed_array(nums, a, b, c)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortTransformedArray(nums: Array[Int], a: Int, b: Int, c: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_transformed_array(nums: Vec<i32>, a: i32, b: i32, c: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (sort-transformed-array nums a b c)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec sort_transformed_array(Nums :: [integer()], A :: integer(), B :: integer(), C :: integer()) -> [integer()].\nsort_transformed_array(Nums, A, B, C) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec sort_transformed_array(nums :: [integer], a :: integer, b :: integer, c :: integer) :: [integer]\n  def sort_transformed_array(nums, a, b, c) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "squares-of-a-sorted-array", "title": "Squares of a Sorted Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-time-to-repair-cars", "title": "Minimum Time to Repair Cars", "isPaidOnly": false}]}