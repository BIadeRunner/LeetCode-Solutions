{"question_id": "1077", "problem_slug": "confusing-number-ii", "problem_title": "Confusing Number II", "content": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\nWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\nWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\n\nNote that after rotating a number, we can ignore leading zeros.\n\nFor example, after rotating 8000, we have 0008 which is considered as just 8.\n\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].\n \nExample 1:\n\nInput: n = 20\nOutput: 6\nExplanation: The confusing numbers are [6,9,10,16,18,19].\n6 converts to 9.\n9 converts to 6.\n10 converts to 01 which is just 1.\n16 converts to 91.\n18 converts to 81.\n19 converts to 61.\n\nExample 2:\n\nInput: n = 100\nOutput: 19\nExplanation: The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].\n\n \nConstraints:\n\n1 <= n <= 109\n\n", "hints": ["Which set of digits have the valid numbers?", "Only 0, 1, 6, 8, 9 are the valid set of digits, do a backtracking to generate all the numbers containing this digits and check they are valid."], "exampleTestcases": "20\n100", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int confusingNumberII(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int confusingNumberII(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def confusingNumberII(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def confusingNumberII(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int confusingNumberII(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ConfusingNumberII(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar confusingNumberII = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function confusingNumberII(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function confusingNumberII($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func confusingNumberII(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun confusingNumberII(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int confusingNumberII(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func confusingNumberII(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef confusing_number_ii(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def confusingNumberII(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn confusing_number_ii(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (confusing-number-ii n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec confusing_number_ii(N :: integer()) -> integer().\nconfusing_number_ii(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec confusing_number_ii(n :: integer) :: integer\n  def confusing_number_ii(n) do\n    \n  end\nend"}}}