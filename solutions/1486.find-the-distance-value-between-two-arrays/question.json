{"question_id": "1486", "problem_slug": "find-the-distance-value-between-two-arrays", "problem_title": "Find the Distance Value Between Two Arrays", "content": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.\n \nExample 1:\n\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2\n\nExample 2:\n\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2\n\nExample 3:\n\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1\n\n \nConstraints:\n\n1 <= arr1.length, arr2.length <= 500\n-1000 <= arr1[i], arr2[j] <= 1000\n0 <= d <= 100\n\n", "hints": ["Sort 'arr2' and use binary search to get the closest element for each 'arr1[i]', it gives a time complexity of O(nlogn)."], "exampleTestcases": "[4,5,8]\n[10,9,1,8]\n2\n[1,4,2,3]\n[-4,-3,6,10,20,30]\n3\n[2,1,100,3]\n[-5,-2,10,-3,7]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findTheDistanceValue(self, arr1, arr2, d):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findTheDistanceValue(int* arr1, int arr1Size, int* arr2, int arr2Size, int d) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @param {number} d\n * @return {number}\n */\nvar findTheDistanceValue = function(arr1, arr2, d) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findTheDistanceValue(arr1: number[], arr2: number[], d: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @param Integer $d\n     * @return Integer\n     */\n    function findTheDistanceValue($arr1, $arr2, $d) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findTheDistanceValue(_ arr1: [Int], _ arr2: [Int], _ d: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findTheDistanceValue(arr1: IntArray, arr2: IntArray, d: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findTheDistanceValue(List<int> arr1, List<int> arr2, int d) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findTheDistanceValue(arr1 []int, arr2 []int, d int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @param {Integer} d\n# @return {Integer}\ndef find_the_distance_value(arr1, arr2, d)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findTheDistanceValue(arr1: Array[Int], arr2: Array[Int], d: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_the_distance_value(arr1: Vec<i32>, arr2: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-the-distance-value arr1 arr2 d)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_the_distance_value(Arr1 :: [integer()], Arr2 :: [integer()], D :: integer()) -> integer().\nfind_the_distance_value(Arr1, Arr2, D) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_the_distance_value(arr1 :: [integer], arr2 :: [integer], d :: integer) :: integer\n  def find_the_distance_value(arr1, arr2, d) do\n    \n  end\nend"}}}