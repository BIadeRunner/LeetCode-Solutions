{"questionId": "1656", "acRate": 81.51846497736058, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1534", "paidOnly": false, "status": "ac", "title": "Count Good Triplets", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "count-good-triplets", "content": "<p>Given an array of integers <code>arr</code>, and three integers&nbsp;<code>a</code>,&nbsp;<code>b</code>&nbsp;and&nbsp;<code>c</code>. You need to find the number of good triplets.</p>\r\n\r\n<p>A triplet <code>(arr[i], arr[j], arr[k])</code>&nbsp;is <strong>good</strong> if the following conditions are true:</p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= i &lt; j &lt; k &lt;&nbsp;arr.length</code></li>\r\n\t<li><code>|arr[i] - arr[j]| &lt;= a</code></li>\r\n\t<li><code>|arr[j] - arr[k]| &lt;= b</code></li>\r\n\t<li><code>|arr[i] - arr[k]| &lt;= c</code></li>\r\n</ul>\r\n\r\n<p>Where <code>|x|</code> denotes the absolute value of <code>x</code>.</p>\r\n\r\n<p>Return<em> the number of good triplets</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>&nbsp;There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [1,1,2,2,3], a = 0, b = 0, c = 1\r\n<strong>Output:</strong> 0\r\n<strong>Explanation: </strong>No triplet satisfies all conditions.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= arr.length &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= arr[i] &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= a, b, c &lt;= 1000</code></li>\r\n</ul>", "hints": ["Notice that the constraints are small enough for a brute force solution to pass.", "Loop through all triplets, and count the ones that are good."], "exampleTestcases": "[3,0,1,1,9,7]\n7\n2\n3\n[1,1,2,2,3]\n0\n0\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countGoodTriplets(self, arr, a, b, c):\n        \"\"\"\n        :type arr: List[int]\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nint countGoodTriplets(int* arr, int arrSize, int a, int b, int c){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountGoodTriplets(int[] arr, int a, int b, int c) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar countGoodTriplets = function(arr, a, b, c) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countGoodTriplets(arr: number[], a: number, b: number, c: number): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer\n     */\n    function countGoodTriplets($arr, $a, $b, $c) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countGoodTriplets(_ arr: [Int], _ a: Int, _ b: Int, _ c: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countGoodTriplets(arr: IntArray, a: Int, b: Int, c: Int): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countGoodTriplets(arr []int, a int, b int, c int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer}\ndef count_good_triplets(arr, a, b, c)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countGoodTriplets(arr: Array[Int], a: Int, b: Int, c: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_good_triplets(arr: Vec<i32>, a: i32, b: i32, c: i32) -> i32 {\n        \n    }\n}"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "count-special-quadruplets", "title": "Count Special Quadruplets", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "number-of-unequal-triplets-in-array", "title": "Number of Unequal Triplets in Array", "isPaidOnly": false}]}