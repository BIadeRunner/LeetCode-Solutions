{"question_id": "2334", "problem_slug": "number-of-flowers-in-full-bloom", "problem_title": "Number of Flowers in Full Bloom", "content": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers.\nReturn an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.\n \nExample 1:\n\n\nInput: flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]\nOutput: [1,2,2,2]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n\nExample 2:\n\n\nInput: flowers = [[1,10],[3,3]], people = [3,3,2]\nOutput: [2,2,1]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n\n \nConstraints:\n\n1 <= flowers.length <= 5 * 104\nflowers[i].length == 2\n1 <= starti <= endi <= 109\n1 <= people.length <= 5 * 104\n1 <= people[i] <= 109\n\n", "hints": ["Notice that for any given time t, the number of flowers blooming at time t is equal to the number of flowers that have started blooming minus the number of flowers that have already stopped blooming.", "We can obtain these values efficiently using binary search.", "We can store the starting times in sorted order, which then allows us to binary search to find how many flowers have started blooming for a given time t.", "We do the same for the ending times to find how many flowers have stopped blooming at time t."], "exampleTestcases": "[[1,6],[3,7],[9,12],[4,13]]\n[2,3,7,11]\n[[1,10],[3,3]]\n[3,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> fullBloomFlowers(vector<vector<int>>& flowers, vector<int>& people) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] fullBloomFlowers(int[][] flowers, int[] people) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def fullBloomFlowers(self, flowers, people):\n        \"\"\"\n        :type flowers: List[List[int]]\n        :type people: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fullBloomFlowers(int** flowers, int flowersSize, int* flowersColSize, int* people, int peopleSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FullBloomFlowers(int[][] flowers, int[] people) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} flowers\n * @param {number[]} people\n * @return {number[]}\n */\nvar fullBloomFlowers = function(flowers, people) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function fullBloomFlowers(flowers: number[][], people: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $flowers\n     * @param Integer[] $people\n     * @return Integer[]\n     */\n    function fullBloomFlowers($flowers, $people) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func fullBloomFlowers(_ flowers: [[Int]], _ people: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun fullBloomFlowers(flowers: Array<IntArray>, people: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> fullBloomFlowers(List<List<int>> flowers, List<int> people) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func fullBloomFlowers(flowers [][]int, people []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} flowers\n# @param {Integer[]} people\n# @return {Integer[]}\ndef full_bloom_flowers(flowers, people)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def fullBloomFlowers(flowers: Array[Array[Int]], people: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn full_bloom_flowers(flowers: Vec<Vec<i32>>, people: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (full-bloom-flowers flowers people)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec full_bloom_flowers(Flowers :: [[integer()]], People :: [integer()]) -> [integer()].\nfull_bloom_flowers(Flowers, People) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec full_bloom_flowers(flowers :: [[integer]], people :: [integer]) :: [integer]\n  def full_bloom_flowers(flowers, people) do\n    \n  end\nend"}}}