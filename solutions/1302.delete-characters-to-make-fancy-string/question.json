{"questionId": "1302", "acRate": 58.90965687192864, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1957", "paidOnly": false, "status": "ac", "title": "Delete Characters to Make Fancy String", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "delete-characters-to-make-fancy-string", "content": "<p>A <strong>fancy string</strong> is a string where no <strong>three</strong> <strong>consecutive</strong> characters are equal.</p>\n\n<p>Given a string <code>s</code>, delete the <strong>minimum</strong> possible number of characters from <code>s</code> to make it <strong>fancy</strong>.</p>\n\n<p>Return <em>the final string after the deletion</em>. It can be shown that the answer will always be <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;le<u>e</u>etcode&quot;\n<strong>Output:</strong> &quot;leetcode&quot;\n<strong>Explanation:</strong>\nRemove an &#39;e&#39; from the first group of &#39;e&#39;s to create &quot;leetcode&quot;.\nNo three consecutive characters are equal, so return &quot;leetcode&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;<u>a</u>aab<u>aa</u>aa&quot;\n<strong>Output:</strong> &quot;aabaa&quot;\n<strong>Explanation:</strong>\nRemove an &#39;a&#39; from the first group of &#39;a&#39;s to create &quot;aabaaaa&quot;.\nRemove two &#39;a&#39;s from the second group of &#39;a&#39;s to create &quot;aabaa&quot;.\nNo three consecutive characters are equal, so return &quot;aabaa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;\n<strong>Output:</strong> &quot;aab&quot;\n<strong>Explanation:</strong> No three consecutive characters are equal, so return &quot;aab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["What's the optimal way to delete characters if three or more consecutive characters are equal?", "If three or more consecutive characters are equal, keep two of them and delete the rest."], "exampleTestcases": "\"leeetcode\"\n\"aaabaaaa\"\n\"aab\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string makeFancyString(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String makeFancyString(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makeFancyString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makeFancyString(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* makeFancyString(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MakeFancyString(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar makeFancyString = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makeFancyString(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function makeFancyString($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makeFancyString(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makeFancyString(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String makeFancyString(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func makeFancyString(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef make_fancy_string(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makeFancyString(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn make_fancy_string(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (make-fancy-string s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec make_fancy_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_fancy_string(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_fancy_string(s :: String.t) :: String.t\n  def make_fancy_string(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "find-maximum-removals-from-source-string", "title": "Find Maximum Removals From Source String", "isPaidOnly": false}]}