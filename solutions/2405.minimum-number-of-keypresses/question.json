{"question_id": "2405", "problem_slug": "minimum-number-of-keypresses", "problem_title": "Minimum Number of Keypresses", "content": "You have a keypad with 9 buttons, numbered from 1 to 9, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as:\n\nAll 26 lowercase English letters are mapped to.\nEach character is mapped to by exactly 1 button.\nEach button maps to at most 3 characters.\n\nTo type the first character matched to a button, you press the button once. To type the second character, you press the button twice, and so on.\nGiven a string s, return the minimum number of keypresses needed to type s using your keypad.\nNote that the characters mapped to by each button, and the order they are mapped in cannot be changed.\n \nExample 1:\n\n\nInput: s = \"apple\"\nOutput: 5\nExplanation: One optimal way to setup your keypad is shown above.\nType 'a' by pressing button 1 once.\nType 'p' by pressing button 6 once.\nType 'p' by pressing button 6 once.\nType 'l' by pressing button 5 once.\nType 'e' by pressing button 3 once.\nA total of 5 button presses are needed, so return 5.\n\nExample 2:\n\n\nInput: s = \"abcdefghijkl\"\nOutput: 15\nExplanation: One optimal way to setup your keypad is shown above.\nThe letters 'a' to 'i' can each be typed by pressing a button once.\nType 'j' by pressing button 1 twice.\nType 'k' by pressing button 2 twice.\nType 'l' by pressing button 3 twice.\nA total of 15 button presses are needed, so return 15.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\n\n", "hints": ["Map the most frequent letters so that you can type them with only 1 keypress.", "Use an array to keep track of the frequency of every character, then sort it in non-increasing order."], "exampleTestcases": "\"apple\"\n\"abcdefghijkl\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumKeypresses(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumKeypresses(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumKeypresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumKeypresses(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumKeypresses(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumKeypresses(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumKeypresses = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumKeypresses(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumKeypresses($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumKeypresses(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumKeypresses(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumKeypresses(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumKeypresses(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef minimum_keypresses(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumKeypresses(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_keypresses(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-keypresses s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_keypresses(S :: unicode:unicode_binary()) -> integer().\nminimum_keypresses(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_keypresses(s :: String.t) :: integer\n  def minimum_keypresses(s) do\n    \n  end\nend"}}}