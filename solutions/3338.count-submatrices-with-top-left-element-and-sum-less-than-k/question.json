{"question_id": "3338", "problem_slug": "count-submatrices-with-top-left-element-and-sum-less-than-k", "problem_title": "Count Submatrices with Top-Left Element and Sum Less Than k", "content": "You are given a 0-indexed integer matrix grid and an integer k.\nReturn the number of submatrices that contain the top-left element of the grid, and have a sum less than or equal to k.\n \nExample 1:\n\n\nInput: grid = [[7,6,3],[6,6,1]], k = 18\nOutput: 4\nExplanation: There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18.\nExample 2:\n\n\nInput: grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20\nOutput: 6\nExplanation: There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20.\n\n \nConstraints:\n\nm == grid.length \nn == grid[i].length\n1 <= n, m <= 1000 \n0 <= grid[i][j] <= 1000\n1 <= k <= 109\n\n", "hints": [], "exampleTestcases": "[[7,6,3],[6,6,1]]\n18\n[[7,2,9],[1,5,0],[2,6,6]]\n20", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSubmatrices(vector<vector<int>>& grid, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countSubmatrices(int[][] grid, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSubmatrices(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countSubmatrices(int** grid, int gridSize, int* gridColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountSubmatrices(int[][] grid, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number}\n */\nvar countSubmatrices = function(grid, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSubmatrices(grid: number[][], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubmatrices($grid, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSubmatrices(_ grid: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSubmatrices(grid: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countSubmatrices(List<List<int>> grid, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSubmatrices(grid [][]int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer}\ndef count_submatrices(grid, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSubmatrices(grid: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_submatrices(grid: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-submatrices grid k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_submatrices(Grid :: [[integer()]], K :: integer()) -> integer().\ncount_submatrices(Grid, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_submatrices(grid :: [[integer]], k :: integer) :: integer\n  def count_submatrices(grid, k) do\n    \n  end\nend"}}}