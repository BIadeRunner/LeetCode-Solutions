{"questionId": "1986", "acRate": 49.75374817759145, "difficulty": "Hard", "freqBar": 23.407975277866747, "frontendQuestionId": "1857", "paidOnly": false, "status": "ac", "title": "Largest Color Value in a Directed Graph", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}, {"name": "Memoization", "id": "VG9waWNUYWdOb2RlOjMz", "slug": "memoization"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "largest-color-value-in-a-directed-graph", "content": "<p>There is a <strong>directed graph</strong> of <code>n</code> colored nodes and <code>m</code> edges. The nodes are numbered from <code>0</code> to <code>n - 1</code>.</p>\r\n\r\n<p>You are given a string <code>colors</code> where <code>colors[i]</code> is a lowercase English letter representing the <strong>color</strong> of the <code>i<sup>th</sup></code> node in this graph (<strong>0-indexed</strong>). You are also given a 2D array <code>edges</code> where <code>edges[j] = [a<sub>j</sub>, b<sub>j</sub>]</code> indicates that there is a <strong>directed edge</strong> from node <code>a<sub>j</sub></code> to node <code>b<sub>j</sub></code>.</p>\r\n\r\n<p>A valid <strong>path</strong> in the graph is a sequence of nodes <code>x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt; x<sub>k</sub></code> such that there is a directed edge from <code>x<sub>i</sub></code> to <code>x<sub>i+1</sub></code> for every <code>1 &lt;= i &lt; k</code>. The <strong>color value</strong> of the path is the number of nodes that are colored the <strong>most frequently</strong> occurring color along that path.</p>\r\n\r\n<p>Return <em>the <strong>largest color value</strong> of any valid path in the given graph, or </em><code>-1</code><em> if the graph contains a cycle</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet1.png\" style=\"width: 400px; height: 182px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> colors = &quot;abaca&quot;, edges = [[0,1],[0,2],[2,3],[3,4]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> The path 0 -&gt; 2 -&gt; 3 -&gt; 4 contains 3 nodes that are colored <code>&quot;a&quot; (red in the above image)</code>.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/21/leet2.png\" style=\"width: 85px; height: 85px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> colors = &quot;a&quot;, edges = [[0,0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> There is a cycle from 0 to 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>n == colors.length</code></li>\r\n\t<li><code>m == edges.length</code></li>\r\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>0 &lt;= m &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>colors</code> consists of lowercase English letters.</li>\r\n\t<li><code>0 &lt;= a<sub>j</sub>, b<sub>j</sub>&nbsp;&lt; n</code></li>\r\n</ul>", "hints": ["Use topological sort.", "let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)"], "exampleTestcases": "\"abaca\"\n[[0,1],[0,2],[2,3],[3,4]]\n\"a\"\n[[0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    int largestPathValue(string colors, vector<vector<int>>& edges) {\r\n        \r\n    }\r\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        \r\n    }\r\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\r\n    def largestPathValue(self, colors, edges):\r\n        \"\"\"\r\n        :type colors: str\r\n        :type edges: List[List[int]]\r\n        :rtype: int\r\n        \"\"\""}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\r\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:"}, {"lang": "C", "langSlug": "c", "code": "int largestPathValue(char * colors, int** edges, int edgesSize, int* edgesColSize){\r\n\r\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\r\n    public int LargestPathValue(string colors, int[][] edges) {\r\n        \r\n    }\r\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\r\n * @param {string} colors\r\n * @param {number[][]} edges\r\n * @return {number}\r\n */\r\nvar largestPathValue = function(colors, edges) {\r\n    \r\n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestPathValue(colors: string, edges: number[][]): number {\r\n\r\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param String $colors\r\n     * @param Integer[][] $edges\r\n     * @return Integer\r\n     */\r\n    function largestPathValue($colors, $edges) {\r\n        \r\n    }\r\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func largestPathValue(_ colors: String, _ edges: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\r\n    fun largestPathValue(colors: String, edges: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func largestPathValue(colors string, edges [][]int) int {\r\n    \r\n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} colors\r\n# @param {Integer[][]} edges\r\n# @return {Integer}\r\ndef largest_path_value(colors, edges)\r\n    \r\nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\r\n    def largestPathValue(colors: String, edges: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\r\n    pub fn largest_path_value(colors: String, edges: Vec<Vec<i32>>) -> i32 {\r\n        \r\n    }\r\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (largest-path-value colors edges)\r\n  (-> string? (listof (listof exact-integer?)) exact-integer?)\r\n\r\n  )"}], "similarQuestionList": []}