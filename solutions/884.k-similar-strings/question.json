{"question_id": "884", "problem_slug": "k-similar-strings", "problem_title": "K-Similar Strings", "content": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\n \nExample 1:\n\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: 1\nExplanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\".\n\nExample 2:\n\nInput: s1 = \"abc\", s2 = \"bca\"\nOutput: 2\nExplanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\".\n\n \nConstraints:\n\n1 <= s1.length <= 20\ns2.length == s1.length\ns1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.\ns2 is an anagram of s1.\n\n", "hints": [], "exampleTestcases": "\"ab\"\n\"ba\"\n\"abc\"\n\"bca\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kSimilarity(string s1, string s2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kSimilarity(String s1, String s2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kSimilarity(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kSimilarity(char* s1, char* s2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KSimilarity(string s1, string s2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar kSimilarity = function(s1, s2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kSimilarity(s1: string, s2: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function kSimilarity($s1, $s2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kSimilarity(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kSimilarity(s1: String, s2: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kSimilarity(String s1, String s2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kSimilarity(s1 string, s2 string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef k_similarity(s1, s2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kSimilarity(s1: String, s2: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn k_similarity(s1: String, s2: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (k-similarity s1 s2)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec k_similarity(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> integer().\nk_similarity(S1, S2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec k_similarity(s1 :: String.t, s2 :: String.t) :: integer\n  def k_similarity(s1, s2) do\n    \n  end\nend"}}}