{"question_id": "2572", "problem_slug": "append-characters-to-string-to-make-subsequence", "problem_title": "Append Characters to String to Make Subsequence", "content": "You are given two strings s and t consisting of only lowercase English letters.\nReturn the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n \nExample 1:\n\nInput: s = \"coaching\", t = \"coding\"\nOutput: 4\nExplanation: Append the characters \"ding\" to the end of s so that s = \"coachingding\".\nNow, t is a subsequence of s (\"coachingding\").\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence.\n\nExample 2:\n\nInput: s = \"abcde\", t = \"a\"\nOutput: 0\nExplanation: t is already a subsequence of s (\"abcde\").\n\nExample 3:\n\nInput: s = \"z\", t = \"abcde\"\nOutput: 5\nExplanation: Append the characters \"abcde\" to the end of s so that s = \"zabcde\".\nNow, t is a subsequence of s (\"zabcde\").\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence.\n\n \nConstraints:\n\n1 <= s.length, t.length <= 105\ns and t consist only of lowercase English letters.\n\n", "hints": ["Find the longest prefix of t that is a subsequence of s.", "Use two variables to keep track of your location in s and t. If the characters match, increment both variables. Otherwise, only increment the variable for s.", "The remaining characters in t must be appended to the end of s."], "exampleTestcases": "\"coaching\"\n\"coding\"\n\"abcde\"\n\"a\"\n\"z\"\n\"abcde\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int appendCharacters(string s, string t) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int appendCharacters(String s, String t) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def appendCharacters(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int appendCharacters(char* s, char* t) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int AppendCharacters(string s, string t) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar appendCharacters = function(s, t) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function appendCharacters(s: string, t: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function appendCharacters($s, $t) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func appendCharacters(_ s: String, _ t: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun appendCharacters(s: String, t: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int appendCharacters(String s, String t) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func appendCharacters(s string, t string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef append_characters(s, t)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def appendCharacters(s: String, t: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn append_characters(s: String, t: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (append-characters s t)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec append_characters(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nappend_characters(S, T) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec append_characters(s :: String.t, t :: String.t) :: integer\n  def append_characters(s, t) do\n    \n  end\nend"}}}