{"question_id": "1382", "problem_slug": "calculate-amount-paid-in-taxes", "problem_title": "Calculate Amount Paid in Taxes", "content": "You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).\nTax is calculated as follows:\n\nThe first upper0 dollars earned are taxed at a rate of percent0.\nThe next upper1 - upper0 dollars earned are taxed at a rate of percent1.\nThe next upper2 - upper1 dollars earned are taxed at a rate of percent2.\nAnd so on.\n\nYou are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\nInput: brackets = [[3,50],[7,10],[12,25]], income = 10\nOutput: 2.65000\nExplanation:\nBased on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes.\n\nExample 2:\n\nInput: brackets = [[1,0],[4,25],[5,50]], income = 2\nOutput: 0.25000\nExplanation:\nBased on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes.\n\nExample 3:\n\nInput: brackets = [[2,50]], income = 0\nOutput: 0.00000\nExplanation:\nYou have no income to tax, so you have to pay a total of $0 in taxes.\n\n \nConstraints:\n\n1 <= brackets.length <= 100\n1 <= upperi <= 1000\n0 <= percenti <= 100\n0 <= income <= 1000\nupperi is sorted in ascending order.\nAll the values of upperi are unique.\nThe upper bound of the last tax bracket is greater than or equal to income.\n\n", "hints": ["As you iterate through the tax brackets, keep track of the previous tax bracket’s upper bound in a variable called prev. If there is no previous tax bracket, use 0 instead.", "The amount of money in the ith tax bracket is min(income, upperi) - prev."], "exampleTestcases": "[[3,50],[7,10],[12,25]]\n10\n[[1,0],[4,25],[5,50]]\n2\n[[2,50]]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double calculateTax(vector<vector<int>>& brackets, int income) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double calculateTax(int[][] brackets, int income) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def calculateTax(self, brackets, income):\n        \"\"\"\n        :type brackets: List[List[int]]\n        :type income: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def calculateTax(self, brackets: List[List[int]], income: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double calculateTax(int** brackets, int bracketsSize, int* bracketsColSize, int income) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double CalculateTax(int[][] brackets, int income) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} brackets\n * @param {number} income\n * @return {number}\n */\nvar calculateTax = function(brackets, income) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function calculateTax(brackets: number[][], income: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $brackets\n     * @param Integer $income\n     * @return Float\n     */\n    function calculateTax($brackets, $income) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func calculateTax(_ brackets: [[Int]], _ income: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun calculateTax(brackets: Array<IntArray>, income: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double calculateTax(List<List<int>> brackets, int income) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func calculateTax(brackets [][]int, income int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} brackets\n# @param {Integer} income\n# @return {Float}\ndef calculate_tax(brackets, income)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def calculateTax(brackets: Array[Array[Int]], income: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn calculate_tax(brackets: Vec<Vec<i32>>, income: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (calculate-tax brackets income)\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec calculate_tax(Brackets :: [[integer()]], Income :: integer()) -> float().\ncalculate_tax(Brackets, Income) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec calculate_tax(brackets :: [[integer]], income :: integer) :: float\n  def calculate_tax(brackets, income) do\n    \n  end\nend"}}}