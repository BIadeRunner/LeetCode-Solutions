{"question_id": "1321", "problem_slug": "get-equal-substrings-within-budget", "problem_title": "Get Equal Substrings Within Budget", "content": "You are given two strings s and t of the same length and an integer maxCost.\nYou want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.\n \nExample 1:\n\nInput: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3.\n\nExample 2:\n\nInput: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1.\n\nExample 3:\n\nInput: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You cannot make any change, so the maximum length is 1.\n\n \nConstraints:\n\n1 <= s.length <= 105\nt.length == s.length\n0 <= maxCost <= 106\ns and t consist of only lowercase English letters.\n\n", "hints": ["Calculate the differences between s[i] and t[i].", "Use a sliding window to track the longest valid substring."], "exampleTestcases": "\"abcd\"\n\"bcdf\"\n3\n\"abcd\"\n\"cdef\"\n3\n\"abcd\"\n\"acde\"\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int equalSubstring(string s, string t, int maxCost) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int equalSubstring(String s, String t, int maxCost) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def equalSubstring(self, s, t, maxCost):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :type maxCost: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int equalSubstring(char* s, char* t, int maxCost) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int EqualSubstring(string s, string t, int maxCost) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @param {number} maxCost\n * @return {number}\n */\nvar equalSubstring = function(s, t, maxCost) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function equalSubstring(s: string, t: string, maxCost: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @param Integer $maxCost\n     * @return Integer\n     */\n    function equalSubstring($s, $t, $maxCost) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func equalSubstring(_ s: String, _ t: String, _ maxCost: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun equalSubstring(s: String, t: String, maxCost: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int equalSubstring(String s, String t, int maxCost) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func equalSubstring(s string, t string, maxCost int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @param {Integer} max_cost\n# @return {Integer}\ndef equal_substring(s, t, max_cost)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def equalSubstring(s: String, t: String, maxCost: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn equal_substring(s: String, t: String, max_cost: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (equal-substring s t maxCost)\n  (-> string? string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec equal_substring(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), MaxCost :: integer()) -> integer().\nequal_substring(S, T, MaxCost) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec equal_substring(s :: String.t, t :: String.t, max_cost :: integer) :: integer\n  def equal_substring(s, t, max_cost) do\n    \n  end\nend"}}}