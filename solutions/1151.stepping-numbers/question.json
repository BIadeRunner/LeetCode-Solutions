{"question_id": "1151", "problem_slug": "stepping-numbers", "problem_title": "Stepping Numbers", "content": "A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\n\nFor example, 321 is a stepping number while 421 is not.\n\nGiven two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].\n \nExample 1:\n\nInput: low = 0, high = 21\nOutput: [0,1,2,3,4,5,6,7,8,9,10,12,21]\n\nExample 2:\n\nInput: low = 10, high = 15\nOutput: [10,12]\n\n \nConstraints:\n\n0 <= low <= high <= 2 * 109\n\n", "hints": ["Try to generate the numbers using recursion.", "In one step in the recursion, add a valid digit to the right of the current number.", "Save the number if it's in the range between low and high."], "exampleTestcases": "0\n21\n10\n15", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> countSteppingNumbers(int low, int high) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> countSteppingNumbers(int low, int high) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSteppingNumbers(self, low, high):\n        \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countSteppingNumbers(int low, int high, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> CountSteppingNumbers(int low, int high) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} low\n * @param {number} high\n * @return {number[]}\n */\nvar countSteppingNumbers = function(low, high) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSteppingNumbers(low: number, high: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer[]\n     */\n    function countSteppingNumbers($low, $high) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSteppingNumbers(_ low: Int, _ high: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSteppingNumbers(low: Int, high: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> countSteppingNumbers(int low, int high) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSteppingNumbers(low int, high int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} low\n# @param {Integer} high\n# @return {Integer[]}\ndef count_stepping_numbers(low, high)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSteppingNumbers(low: Int, high: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_stepping_numbers(low: i32, high: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-stepping-numbers low high)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_stepping_numbers(Low :: integer(), High :: integer()) -> [integer()].\ncount_stepping_numbers(Low, High) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_stepping_numbers(low :: integer, high :: integer) :: [integer]\n  def count_stepping_numbers(low, high) do\n    \n  end\nend"}}}