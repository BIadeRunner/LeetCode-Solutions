{"question_id": "810", "problem_slug": "valid-tic-tac-toe-state", "problem_title": "Valid Tic-Tac-Toe State", "content": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.\nHere are the rules of Tic-Tac-Toe:\n\nPlayers take turns placing characters into empty squares ' '.\nThe first player always places 'X' characters, while the second player always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\n \nExample 1:\n\n\nInput: board = [\"O  \",\"   \",\"   \"]\nOutput: false\nExplanation: The first player always plays \"X\".\n\nExample 2:\n\n\nInput: board = [\"XOX\",\" X \",\"   \"]\nOutput: false\nExplanation: Players take turns making moves.\n\nExample 3:\n\n\nInput: board = [\"XOX\",\"O O\",\"XOX\"]\nOutput: true\n\n \nConstraints:\n\nboard.length == 3\nboard[i].length == 3\nboard[i][j] is either 'X', 'O', or ' '.\n\n", "hints": [], "exampleTestcases": "[\"O  \",\"   \",\"   \"]\n[\"XOX\",\" X \",\"   \"]\n[\"XOX\",\"O O\",\"XOX\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validTicTacToe(vector<string>& board) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean validTicTacToe(String[] board) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validTicTacToe(self, board):\n        \"\"\"\n        :type board: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validTicTacToe(self, board: List[str]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool validTicTacToe(char** board, int boardSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ValidTicTacToe(string[] board) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validTicTacToe(board: string[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $board\n     * @return Boolean\n     */\n    function validTicTacToe($board) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validTicTacToe(_ board: [String]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validTicTacToe(board: Array<String>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool validTicTacToe(List<String> board) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validTicTacToe(board []string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} board\n# @return {Boolean}\ndef valid_tic_tac_toe(board)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validTicTacToe(board: Array[String]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_tic_tac_toe(board: Vec<String>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-tic-tac-toe board)\n  (-> (listof string?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_tic_tac_toe(Board :: [unicode:unicode_binary()]) -> boolean().\nvalid_tic_tac_toe(Board) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_tic_tac_toe(board :: [String.t]) :: boolean\n  def valid_tic_tac_toe(board) do\n    \n  end\nend"}}}