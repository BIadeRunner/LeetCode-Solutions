{"question_id": "2071", "problem_slug": "longest-common-subsequence-between-sorted-arrays", "problem_title": "Longest Common Subsequence Between Sorted Arrays", "content": "Given an array of integer arrays arrays where each arrays[i] is sorted in strictly increasing order, return an integer array representing the longest common subsequence among all the arrays.\nA subsequence is a sequence that can be derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements.\n \nExample 1:\n\nInput: arrays = [[1,3,4],\n                 [1,4,7,9]]\nOutput: [1,4]\nExplanation: The longest common subsequence in the two arrays is [1,4].\n\nExample 2:\n\nInput: arrays = [[2,3,6,8],\n                 [1,2,3,5,6,7,10],\n                 [2,3,4,6,9]]\nOutput: [2,3,6]\nExplanation: The longest common subsequence in all three arrays is [2,3,6].\n\nExample 3:\n\nInput: arrays = [[1,2,3,4,5],\n                 [6,7,8]]\nOutput: []\nExplanation: There is no common subsequence between the two arrays.\n\n \nConstraints:\n\n2 <= arrays.length <= 100\n1 <= arrays[i].length <= 100\n1 <= arrays[i][j] <= 100\narrays[i] is sorted in strictly increasing order.\n\n", "hints": ["Fix one array.", "Choose the next array and get the common elements.", "Use the common elements as the new fixed array and keep merging with the rest of the arrays."], "exampleTestcases": "[[1,3,4],[1,4,7,9]]\n[[2,3,6,8],[1,2,3,5,6,7,10],[2,3,4,6,9]]\n[[1,2,3,4,5],[6,7,8]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> longestCommonSubsequence(vector<vector<int>>& arrays) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> longestCommonSubsequence(int[][] arrays) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestCommonSubsequence(self, arrays):\n        \"\"\"\n        :type arrays: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestCommonSubsequence(self, arrays: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* longestCommonSubsequence(int** arrays, int arraysSize, int* arraysColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> LongestCommonSubsequence(int[][] arrays) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} arrays\n * @return {number[]}\n */\nvar longestCommonSubsequence = function(arrays) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestCommonSubsequence(arrays: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $arrays\n     * @return Integer[]\n     */\n    function longestCommonSubsequence($arrays) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestCommonSubsequence(_ arrays: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestCommonSubsequence(arrays: Array<IntArray>): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> longestCommonSubsequence(List<List<int>> arrays) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestCommonSubsequence(arrays [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} arrays\n# @return {Integer[]}\ndef longest_common_subsequence(arrays)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestCommonSubsequence(arrays: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_common_subsequence(arrays: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-common-subsequence arrays)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_common_subsequence(Arrays :: [[integer()]]) -> [integer()].\nlongest_common_subsequence(Arrays) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_common_subsequence(arrays :: [[integer]]) :: [integer]\n  def longest_common_subsequence(arrays) do\n    \n  end\nend"}}}