{"questionId": "2071", "acRate": 81.34464675033881, "difficulty": "Medium", "freqBar": 40.97205529817753, "frontendQuestionId": "1940", "paidOnly": true, "status": "ac", "title": "Longest Common Subsequence Between Sorted Arrays", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "longest-common-subsequence-between-sorted-arrays", "content": "<p>Given an array of integer arrays <code>arrays</code> where each <code>arrays[i]</code> is sorted in <strong>strictly increasing</strong> order, return <em>an integer array representing the <strong>longest common subsequence</strong> among&nbsp;<strong>all</strong> the arrays</em>.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arrays = [[<u>1</u>,3,<u>4</u>],\n                 [<u>1</u>,<u>4</u>,7,9]]\n<strong>Output:</strong> [1,4]\n<strong>Explanation:</strong> The longest common subsequence in the two arrays is [1,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arrays = [[<u>2</u>,<u>3</u>,<u>6</u>,8],\n                 [1,<u>2</u>,<u>3</u>,5,<u>6</u>,7,10],\n                 [<u>2</u>,<u>3</u>,4,<u>6</u>,9]]\n<strong>Output:</strong> [2,3,6]\n<strong>Explanation:</strong> The longest common subsequence in all three arrays is [2,3,6].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arrays = [[1,2,3,4,5],\n                 [6,7,8]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There is no common subsequence between the two arrays.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arrays.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arrays[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arrays[i][j] &lt;= 100</code></li>\n\t<li><code>arrays[i]</code> is sorted in <strong>strictly increasing</strong> order.</li>\n</ul>\n", "hints": ["Fix one array.", "Choose the next array and get the common elements.", "Use the common elements as the new fixed array and keep merging with the rest of the arrays."], "exampleTestcases": "[[1,3,4],[1,4,7,9]]\n[[2,3,6,8],[1,2,3,5,6,7,10],[2,3,4,6,9]]\n[[1,2,3,4,5],[6,7,8]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> longestCommonSubsequence(vector<vector<int>>& arrays) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> longestCommonSubsequence(int[][] arrays) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestCommonSubsequence(self, arrays):\n        \"\"\"\n        :type arrays: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestCommonSubsequence(self, arrays: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* longestCommonSubsequence(int** arrays, int arraysSize, int* arraysColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> LongestCommonSubsequence(int[][] arrays) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} arrays\n * @return {number[]}\n */\nvar longestCommonSubsequence = function(arrays) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestCommonSubsequence(arrays: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $arrays\n     * @return Integer[]\n     */\n    function longestCommonSubsequence($arrays) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestCommonSubsequence(_ arrays: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestCommonSubsequence(arrays: Array<IntArray>): List<Int> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> longestCommonSubsequence(List<List<int>> arrays) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func longestCommonSubsequence(arrays [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} arrays\n# @return {Integer[]}\ndef longest_common_subsequence(arrays)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestCommonSubsequence(arrays: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_common_subsequence(arrays: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (longest-common-subsequence arrays)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec longest_common_subsequence(Arrays :: [[integer()]]) -> [integer()].\nlongest_common_subsequence(Arrays) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_common_subsequence(arrays :: [[integer]]) :: [integer]\n  def longest_common_subsequence(arrays) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "merge-two-sorted-lists", "title": "Merge Two Sorted Lists", "isPaidOnly": false}]}