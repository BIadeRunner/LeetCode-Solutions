{"question_id": "3321", "problem_slug": "type-of-triangle", "problem_title": "Type of Triangle", "content": "You are given a 0-indexed integer array nums of size 3 which can form the sides of a triangle.\n\nA triangle is called equilateral if it has all sides of equal length.\nA triangle is called isosceles if it has exactly two sides of equal length.\nA triangle is called scalene if all its sides are of different lengths.\n\nReturn a string representing the type of triangle that can be formed or \"none\" if it cannot form a triangle.\n \nExample 1:\n\nInput: nums = [3,3,3]\nOutput: \"equilateral\"\nExplanation: Since all the sides are of equal length, therefore, it will form an equilateral triangle.\n\nExample 2:\n\nInput: nums = [3,4,5]\nOutput: \"scalene\"\nExplanation: \nnums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5.\nnums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.\nnums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. \nSince the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle.\nAs all the sides are of different lengths, it will form a scalene triangle.\n\n \nConstraints:\n\nnums.length == 3\n1 <= nums[i] <= 100\n\n", "hints": ["The condition for a valid triangle is that for any two sides, the sum of their lengths must be greater than the third side.", "Simply count the number of unique edge lengths after checking it’s a valid triangle."], "exampleTestcases": "[3,3,3]\n[3,4,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string triangleType(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String triangleType(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def triangleType(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def triangleType(self, nums: List[int]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* triangleType(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string TriangleType(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar triangleType = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function triangleType(nums: number[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function triangleType($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func triangleType(_ nums: [Int]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun triangleType(nums: IntArray): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String triangleType(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func triangleType(nums []int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {String}\ndef triangle_type(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def triangleType(nums: Array[Int]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn triangle_type(nums: Vec<i32>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (triangle-type nums)\n  (-> (listof exact-integer?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec triangle_type(Nums :: [integer()]) -> unicode:unicode_binary().\ntriangle_type(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec triangle_type(nums :: [integer]) :: String.t\n  def triangle_type(nums) do\n    \n  end\nend"}}}