{"question_id": "3407", "problem_slug": "find-all-possible-stable-binary-arrays-ii", "problem_title": "Find All Possible Stable Binary Arrays II", "content": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\n\nThe number of occurrences of 0 in arr is exactly zero.\nThe number of occurrences of 1 in arr is exactly one.\nEach subarray of arr with a size greater than limit must contain both 0 and 1.\n\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: zero = 1, one = 1, limit = 2\nOutput: 2\nExplanation:\nThe two possible stable binary arrays are [1,0] and [0,1].\n\nExample 2:\n\nInput: zero = 1, one = 2, limit = 1\nOutput: 1\nExplanation:\nThe only possible stable binary array is [1,0,1].\n\nExample 3:\n\nInput: zero = 3, one = 3, limit = 2\nOutput: 14\nExplanation:\nAll the possible stable binary arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0].\n\n \nConstraints:\n\n1 <= zero, one, limit <= 1000\n\n", "hints": ["Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.", "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.", "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."], "exampleTestcases": "1\n1\n2\n1\n2\n1\n3\n3\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfStableArrays(zero int, one int, limit int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend"}}}