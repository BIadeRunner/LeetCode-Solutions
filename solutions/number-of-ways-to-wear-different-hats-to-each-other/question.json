{"questionId": "1531", "acRate": 44.41887226697353, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1434", "paidOnly": false, "status": "ac", "title": "Number of Ways to Wear Different Hats to Each Other", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "number-of-ways-to-wear-different-hats-to-each-other", "content": "<p>There are <code>n</code> people and <code>40</code> types of hats labeled from <code>1</code> to <code>40</code>.</p>\n\n<p>Given a 2D integer array <code>hats</code>, where <code>hats[i]</code> is a list of all hats preferred by the <code>i<sup>th</sup></code> person.</p>\n\n<p>Return <em>the number of ways that the <code>n</code> people wear different hats to each other</em>.</p>\n\n<p>Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> hats = [[3,4],[4,5],[5]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> hats = [[3,5,1],[3,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == hats.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= hats[i].length &lt;= 40</code></li>\n\t<li><code>1 &lt;= hats[i][j] &lt;= 40</code></li>\n\t<li><code>hats[i]</code> contains a list of <strong>unique</strong> integers.</li>\n</ul>\n", "hints": ["Dynamic programming + bitmask.", "dp(peopleMask, idHat) number of ways to wear different hats given a bitmask (people visited) and used hats from 1 to idHat-1."], "exampleTestcases": "[[3,4],[4,5],[5]]\n[[3,5,1],[3,5]]\n[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberWays(vector<vector<int>>& hats) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberWays(List<List<Integer>> hats) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberWays(self, hats):\n        \"\"\"\n        :type hats: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberWays(self, hats: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberWays(int** hats, int hatsSize, int* hatsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberWays(IList<IList<int>> hats) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} hats\n * @return {number}\n */\nvar numberWays = function(hats) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberWays(hats: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $hats\n     * @return Integer\n     */\n    function numberWays($hats) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberWays(_ hats: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberWays(hats: List<List<Int>>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberWays(List<List<int>> hats) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberWays(hats [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} hats\n# @return {Integer}\ndef number_ways(hats)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberWays(hats: List[List[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_ways(hats: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-ways hats)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_ways(Hats :: [[integer()]]) -> integer().\nnumber_ways(Hats) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_ways(hats :: [[integer]]) :: integer\n  def number_ways(hats) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "isPaidOnly": false}]}