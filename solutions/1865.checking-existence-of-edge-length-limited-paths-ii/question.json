{"question_id": "1865", "problem_slug": "checking-existence-of-edge-length-limited-paths-ii", "problem_title": "Checking Existence of Edge Length Limited Paths II", "content": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes, and the graph may not be connected.\nImplement the DistanceLimitedPathsExist class:\n\nDistanceLimitedPathsExist(int n, int[][] edgeList) Initializes the class with an undirected graph.\nboolean query(int p, int q, int limit) Returns true if there exists a path from p to q such that each edge on the path has a distance strictly less than limit, and otherwise false.\n\n \nExample 1:\n\n\nInput\n[\"DistanceLimitedPathsExist\", \"query\", \"query\", \"query\", \"query\"]\n[[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]\nOutput\n[null, true, false, true, false]\n\nExplanation\nDistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]);\ndistanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.\ndistanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances strictly less than 3.\ndistanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0.\ndistanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.\n\n \nConstraints:\n\n2 <= n <= 104\n0 <= edgeList.length <= 104\nedgeList[i].length == 3\n0 <= ui, vi, p, q <= n-1\nui != vi\np != q\n1 <= disi, limit <= 109\nAt most 104 calls will be made to query.\n\n", "hints": ["Find the minimum spanning tree of the given graph.", "Root the tree in an arbitrary node and calculate the maximum weight of the edge from each node to the chosen root.", "To answer a query, find the lca between the two nodes, and find the maximum weight from each of the query nodes to their lca and compare it to the given limit."], "exampleTestcases": "[\"DistanceLimitedPathsExist\",\"query\",\"query\",\"query\",\"query\"]\n[[6,[[0,2,4],[0,3,2],[1,2,3],[2,3,1],[4,5,5]]],[2,3,2],[1,3,3],[2,0,3],[0,5,6]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class DistanceLimitedPathsExist {\npublic:\n    DistanceLimitedPathsExist(int n, vector<vector<int>>& edgeList) {\n        \n    }\n    \n    bool query(int p, int q, int limit) {\n        \n    }\n};\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * DistanceLimitedPathsExist* obj = new DistanceLimitedPathsExist(n, edgeList);\n * bool param_1 = obj->query(p,q,limit);\n */"}, "Java": {"langSlug": "java", "code": "class DistanceLimitedPathsExist {\n\n    public DistanceLimitedPathsExist(int n, int[][] edgeList) {\n        \n    }\n    \n    public boolean query(int p, int q, int limit) {\n        \n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * DistanceLimitedPathsExist obj = new DistanceLimitedPathsExist(n, edgeList);\n * boolean param_1 = obj.query(p,q,limit);\n */"}, "Python": {"langSlug": "python", "code": "class DistanceLimitedPathsExist(object):\n\n    def __init__(self, n, edgeList):\n        \"\"\"\n        :type n: int\n        :type edgeList: List[List[int]]\n        \"\"\"\n        \n\n    def query(self, p, q, limit):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :type limit: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your DistanceLimitedPathsExist object will be instantiated and called as such:\n# obj = DistanceLimitedPathsExist(n, edgeList)\n# param_1 = obj.query(p,q,limit)"}, "Python3": {"langSlug": "python3", "code": "class DistanceLimitedPathsExist:\n\n    def __init__(self, n: int, edgeList: List[List[int]]):\n        \n\n    def query(self, p: int, q: int, limit: int) -> bool:\n        \n\n\n# Your DistanceLimitedPathsExist object will be instantiated and called as such:\n# obj = DistanceLimitedPathsExist(n, edgeList)\n# param_1 = obj.query(p,q,limit)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} DistanceLimitedPathsExist;\n\n\nDistanceLimitedPathsExist* distanceLimitedPathsExistCreate(int n, int** edgeList, int edgeListSize, int* edgeListColSize) {\n    \n}\n\nbool distanceLimitedPathsExistQuery(DistanceLimitedPathsExist* obj, int p, int q, int limit) {\n  \n}\n\nvoid distanceLimitedPathsExistFree(DistanceLimitedPathsExist* obj) {\n    \n}\n\n/**\n * Your DistanceLimitedPathsExist struct will be instantiated and called as such:\n * DistanceLimitedPathsExist* obj = distanceLimitedPathsExistCreate(n, edgeList, edgeListSize, edgeListColSize);\n * bool param_1 = distanceLimitedPathsExistQuery(obj, p, q, limit);\n \n * distanceLimitedPathsExistFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class DistanceLimitedPathsExist {\n\n    public DistanceLimitedPathsExist(int n, int[][] edgeList) {\n        \n    }\n    \n    public bool Query(int p, int q, int limit) {\n        \n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * DistanceLimitedPathsExist obj = new DistanceLimitedPathsExist(n, edgeList);\n * bool param_1 = obj.Query(p,q,limit);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edgeList\n */\nvar DistanceLimitedPathsExist = function(n, edgeList) {\n    \n};\n\n/** \n * @param {number} p \n * @param {number} q \n * @param {number} limit\n * @return {boolean}\n */\nDistanceLimitedPathsExist.prototype.query = function(p, q, limit) {\n    \n};\n\n/** \n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * var obj = new DistanceLimitedPathsExist(n, edgeList)\n * var param_1 = obj.query(p,q,limit)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class DistanceLimitedPathsExist {\n    constructor(n: number, edgeList: number[][]) {\n\n    }\n\n    query(p: number, q: number, limit: number): boolean {\n\n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * var obj = new DistanceLimitedPathsExist(n, edgeList)\n * var param_1 = obj.query(p,q,limit)\n */"}, "PHP": {"langSlug": "php", "code": "class DistanceLimitedPathsExist {\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edgeList\n     */\n    function __construct($n, $edgeList) {\n        \n    }\n  \n    /**\n     * @param Integer $p\n     * @param Integer $q\n     * @param Integer $limit\n     * @return Boolean\n     */\n    function query($p, $q, $limit) {\n        \n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * $obj = DistanceLimitedPathsExist($n, $edgeList);\n * $ret_1 = $obj->query($p, $q, $limit);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass DistanceLimitedPathsExist {\n\n    init(_ n: Int, _ edgeList: [[Int]]) {\n        \n    }\n    \n    func query(_ p: Int, _ q: Int, _ limit: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * let obj = DistanceLimitedPathsExist(n, edgeList)\n * let ret_1: Bool = obj.query(p, q, limit)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class DistanceLimitedPathsExist(n: Int, edgeList: Array<IntArray>) {\n\n    fun query(p: Int, q: Int, limit: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * var obj = DistanceLimitedPathsExist(n, edgeList)\n * var param_1 = obj.query(p,q,limit)\n */"}, "Go": {"langSlug": "golang", "code": "type DistanceLimitedPathsExist struct {\n    \n}\n\n\nfunc Constructor(n int, edgeList [][]int) DistanceLimitedPathsExist {\n    \n}\n\n\nfunc (this *DistanceLimitedPathsExist) Query(p int, q int, limit int) bool {\n    \n}\n\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * obj := Constructor(n, edgeList);\n * param_1 := obj.Query(p,q,limit);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class DistanceLimitedPathsExist\n\n=begin\n    :type n: Integer\n    :type edge_list: Integer[][]\n=end\n    def initialize(n, edge_list)\n        \n    end\n\n\n=begin\n    :type p: Integer\n    :type q: Integer\n    :type limit: Integer\n    :rtype: Boolean\n=end\n    def query(p, q, limit)\n        \n    end\n\n\nend\n\n# Your DistanceLimitedPathsExist object will be instantiated and called as such:\n# obj = DistanceLimitedPathsExist.new(n, edge_list)\n# param_1 = obj.query(p, q, limit)"}, "Scala": {"langSlug": "scala", "code": "class DistanceLimitedPathsExist(_n: Int, _edgeList: Array[Array[Int]]) {\n\n    def query(p: Int, q: Int, limit: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * var obj = new DistanceLimitedPathsExist(n, edgeList)\n * var param_1 = obj.query(p,q,limit)\n */"}, "Rust": {"langSlug": "rust", "code": "struct DistanceLimitedPathsExist {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl DistanceLimitedPathsExist {\n\n    fn new(n: i32, edgeList: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn query(&self, p: i32, q: i32, limit: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * let obj = DistanceLimitedPathsExist::new(n, edgeList);\n * let ret_1: bool = obj.query(p, q, limit);\n */"}, "Racket": {"langSlug": "racket", "code": "(define distance-limited-paths-exist%\n  (class object%\n    (super-new)\n\n    ; n : exact-integer?\n\n    ; edge-list : (listof (listof exact-integer?))\n    (init-field\n      n\n      edge-list)\n    \n    ; query : exact-integer? exact-integer? exact-integer? -> boolean?\n    (define/public (query p q limit)\n\n      )))\n\n;; Your distance-limited-paths-exist% object will be instantiated and called as such:\n;; (define obj (new distance-limited-paths-exist% [n n] [edgeList edgeList]))\n;; (define param_1 (send obj query p q limit))"}, "Erlang": {"langSlug": "erlang", "code": "-spec distance_limited_paths_exist_init_(N :: integer(), EdgeList :: [[integer()]]) -> any().\ndistance_limited_paths_exist_init_(N, EdgeList) ->\n  .\n\n-spec distance_limited_paths_exist_query(P :: integer(), Q :: integer(), Limit :: integer()) -> boolean().\ndistance_limited_paths_exist_query(P, Q, Limit) ->\n  .\n\n\n%% Your functions will be called as such:\n%% distance_limited_paths_exist_init_(N, EdgeList),\n%% Param_1 = distance_limited_paths_exist_query(P, Q, Limit),\n\n%% distance_limited_paths_exist_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule DistanceLimitedPathsExist do\n  @spec init_(n :: integer, edge_list :: [[integer]]) :: any\n  def init_(n, edge_list) do\n    \n  end\n\n  @spec query(p :: integer, q :: integer, limit :: integer) :: boolean\n  def query(p, q, limit) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# DistanceLimitedPathsExist.init_(n, edge_list)\n# param_1 = DistanceLimitedPathsExist.query(p, q, limit)\n\n# DistanceLimitedPathsExist.init_ will be called before every test case, in which you can do some necessary initializations."}}}