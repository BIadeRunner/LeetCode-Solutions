{"question_id": "371", "problem_slug": "sum-of-two-integers", "problem_title": "Sum of Two Integers", "content": "Given two integers a and b, return the sum of the two integers without using the operators + and -.\n \nExample 1:\nInput: a = 1, b = 2\nOutput: 3\nExample 2:\nInput: a = 2, b = 3\nOutput: 5\n\n \nConstraints:\n\n-1000 <= a, b <= 1000\n\n", "hints": [], "exampleTestcases": "1\n2\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int getSum(int a, int b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int getSum(int a, int b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int getSum(int a, int b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int GetSum(int a, int b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getSum(a: number, b: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function getSum($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getSum(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getSum(a: Int, b: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int getSum(int a, int b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getSum(a int, b int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef get_sum(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getSum(a: Int, b: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_sum(a: i32, b: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-sum a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_sum(A :: integer(), B :: integer()) -> integer().\nget_sum(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_sum(a :: integer, b :: integer) :: integer\n  def get_sum(a, b) do\n    \n  end\nend"}}}