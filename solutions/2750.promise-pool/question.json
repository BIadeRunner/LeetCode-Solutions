{"question_id": "2750", "problem_slug": "promise-pool", "problem_title": "Promise Pool", "content": "Given an array of asynchronous functions functions and a pool limit n, return an asynchronous function promisePool. It should return a promise that resolves when all the input functions resolve.\nPool limit is defined as the maximum number promises that can be pending at once. promisePool should begin execution of as many functions as possible and continue executing new functions when old promises resolve. promisePool should execute functions[i] then functions[i + 1] then functions[i + 2], etc. When the last promise resolves, promisePool should also resolve.\nFor example, if n = 1, promisePool will execute one function at a time in series. However, if n = 2, it first executes two functions. When either of the two functions resolve, a 3rd function should be executed (if available), and so on until there are no functions left to execute.\nYou can assume all functions never reject. It is acceptable for promisePool to return a promise that resolves any value.\n \nExample 1:\n\nInput: \nfunctions = [\n  () => new Promise(res => setTimeout(res, 300)),\n  () => new Promise(res => setTimeout(res, 400)),\n  () => new Promise(res => setTimeout(res, 200))\n]\nn = 2\nOutput: [[300,400,500],500]\nExplanation:\nThree functions are passed in. They sleep for 300ms, 400ms, and 200ms respectively.\nThey resolve at 300ms, 400ms, and 500ms respectively. The returned promise resolves at 500ms.\nAt t=0, the first 2 functions are executed. The pool size limit of 2 is reached.\nAt t=300, the 1st function resolves, and the 3rd function is executed. Pool size is 2.\nAt t=400, the 2nd function resolves. There is nothing left to execute. Pool size is 1.\nAt t=500, the 3rd function resolves. Pool size is zero so the returned promise also resolves.\n\nExample 2:\n\nInput:\nfunctions = [\n  () => new Promise(res => setTimeout(res, 300)),\n  () => new Promise(res => setTimeout(res, 400)),\n  () => new Promise(res => setTimeout(res, 200))\n]\nn = 5\nOutput: [[300,400,200],400]\nExplanation:\nThe three input promises resolve at 300ms, 400ms, and 200ms respectively.\nThe returned promise resolves at 400ms.\nAt t=0, all 3 functions are executed. The pool limit of 5 is never met.\nAt t=200, the 3rd function resolves. Pool size is 2.\nAt t=300, the 1st function resolved. Pool size is 1.\nAt t=400, the 2nd function resolves. Pool size is 0, so the returned promise also resolves.\n\nExample 3:\n\nInput:\nfunctions = [\n  () => new Promise(res => setTimeout(res, 300)),\n  () => new Promise(res => setTimeout(res, 400)),\n  () => new Promise(res => setTimeout(res, 200))\n]\nn = 1\nOutput: [[300,700,900],900]\nExplanation:\nThe three input promises resolve at 300ms, 700ms, and 900ms respectively.\nThe returned promise resolves at 900ms.\nAt t=0, the 1st function is executed. Pool size is 1.\nAt t=300, the 1st function resolves and the 2nd function is executed. Pool size is 1.\nAt t=700, the 2nd function resolves and the 3rd function is executed. Pool size is 1.\nAt t=900, the 3rd function resolves. Pool size is 0 so the returned promise resolves.\n\n \nConstraints:\n\n0 <= functions.length <= 10\n1 <= n <= 10\n\n", "hints": ["Initially execute all the functions until the queue fills up.", "Every time a function resolves, add a new promise to the queue if possible."], "exampleTestcases": "[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n2\n[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n5\n[() => new Promise(res => setTimeout(res, 300)), () => new Promise(res => setTimeout(res, 400)), () => new Promise(res => setTimeout(res, 200))]\n1", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Function[]} functions\n * @param {number} n\n * @return {Promise<any>}\n */\nvar promisePool = async function(functions, n) {\n    \n};\n\n/**\n * const sleep = (t) => new Promise(res => setTimeout(res, t));\n * promisePool([() => sleep(500), () => sleep(400)], 1)\n *   .then(console.log) // After 900ms\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type F = () => Promise<any>;\n\nfunction promisePool(functions: F[], n: number): Promise<any> {\n    \n};\n\n/**\n * const sleep = (t) => new Promise(res => setTimeout(res, t));\n * promisePool([() => sleep(500), () => sleep(400)], 1)\n *   .then(console.log) // After 900ms\n */"}}}