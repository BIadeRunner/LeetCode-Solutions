{"question_id": "3469", "problem_slug": "maximum-height-of-a-triangle", "problem_title": "Maximum Height of a Triangle", "content": "You are given two integers red and blue representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1st row will have 1 ball, the 2nd row will have 2 balls, the 3rd row will have 3 balls, and so on.\nAll the balls in a particular row should be the same color, and adjacent rows should have different colors.\nReturn the maximum height of the triangle that can be achieved.\n \nExample 1:\n\nInput: red = 2, blue = 4\nOutput: 3\nExplanation:\n\nThe only possible arrangement is shown above.\n\nExample 2:\n\nInput: red = 2, blue = 1\nOutput: 2\nExplanation:\n\nThe only possible arrangement is shown above.\n\nExample 3:\n\nInput: red = 1, blue = 1\nOutput: 1\n\nExample 4:\n\nInput: red = 10, blue = 1\nOutput: 2\nExplanation:\n\nThe only possible arrangement is shown above.\n\n \nConstraints:\n\n1 <= red, blue <= 100\n\n", "hints": ["Count the max height using both possibilities. That is, red ball as top and blue ball as top.", "For counting the max height, use a simple for loop and remove the number of balls required at this level."], "exampleTestcases": "2\n4\n2\n1\n1\n1\n10\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxHeightOfTriangle(self, red, blue):\n        \"\"\"\n        :type red: int\n        :type blue: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxHeightOfTriangle(self, red: int, blue: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxHeightOfTriangle(int red, int blue) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxHeightOfTriangle(int red, int blue) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} red\n * @param {number} blue\n * @return {number}\n */\nvar maxHeightOfTriangle = function(red, blue) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxHeightOfTriangle(red: number, blue: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $red\n     * @param Integer $blue\n     * @return Integer\n     */\n    function maxHeightOfTriangle($red, $blue) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxHeightOfTriangle(_ red: Int, _ blue: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxHeightOfTriangle(red: Int, blue: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxHeightOfTriangle(int red, int blue) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxHeightOfTriangle(red int, blue int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} red\n# @param {Integer} blue\n# @return {Integer}\ndef max_height_of_triangle(red, blue)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxHeightOfTriangle(red: Int, blue: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_height_of_triangle(red: i32, blue: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-height-of-triangle red blue)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_height_of_triangle(Red :: integer(), Blue :: integer()) -> integer().\nmax_height_of_triangle(Red, Blue) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_height_of_triangle(red :: integer, blue :: integer) :: integer\n  def max_height_of_triangle(red, blue) do\n    \n  end\nend"}}}