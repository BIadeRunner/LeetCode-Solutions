{"questionId": "2168", "acRate": 70.37875441696113, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2042", "paidOnly": false, "status": "ac", "title": "Check if Numbers Are Ascending in a Sentence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "check-if-numbers-are-ascending-in-a-sentence", "content": "<p>A sentence is a list of <strong>tokens</strong> separated by a <strong>single</strong> space with no leading or trailing spaces. Every token is either a <strong>positive number</strong> consisting of digits <code>0-9</code> with no leading zeros, or a <strong>word</strong> consisting of lowercase English letters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;a puppy has 2 eyes 4 legs&quot;</code> is a sentence with seven tokens: <code>&quot;2&quot;</code> and <code>&quot;4&quot;</code> are numbers and the other tokens such as <code>&quot;puppy&quot;</code> are words.</li>\n</ul>\n\n<p>Given a string <code>s</code> representing a sentence, you need to check if <strong>all</strong> the numbers in <code>s</code> are <strong>strictly increasing</strong> from left to right (i.e., other than the last number, <strong>each</strong> number is <strong>strictly smaller</strong> than the number on its <strong>right</strong> in <code>s</code>).</p>\n\n<p>Return <code>true</code><em> if so, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/09/30/example1.png\" style=\"width: 637px; height: 48px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;1 box has 3 blue 4 red 6 green and 12 yellow marbles&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 &lt; 3 &lt; 4 &lt; 6 &lt; 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;hello world 5 x 5&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The numbers in s are: <u><strong>5</strong></u>, <strong><u>5</u></strong>. They are not strictly increasing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"example-3\" src=\"https://assets.leetcode.com/uploads/2021/09/30/example3.png\" style=\"width: 794px; height: 48px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The numbers in s are: 7, <u><strong>51</strong></u>, <u><strong>50</strong></u>, 60. They are not strictly increasing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of lowercase English letters, spaces, and digits from <code>0</code> to <code>9</code>, inclusive.</li>\n\t<li>The number of tokens in <code>s</code> is between <code>2</code> and <code>100</code>, inclusive.</li>\n\t<li>The tokens in <code>s</code> are separated by a single space.</li>\n\t<li>There are at least <strong>two</strong> numbers in <code>s</code>.</li>\n\t<li>Each number in <code>s</code> is a <strong>positive</strong> number <strong>less</strong> than <code>100</code>, with no leading zeros.</li>\n\t<li><code>s</code> contains no leading or trailing spaces.</li>\n</ul>\n", "hints": ["Use string tokenization of your language to extract all the tokens of the string easily.", "For each token extracted, how can you tell if it is a number? Does the first letter being a digit mean something?", "Compare the number with the previously occurring number to check if ascending order is maintained."], "exampleTestcases": "\"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\n\"hello world 5 x 5\"\n\"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areNumbersAscending(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean areNumbersAscending(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def areNumbersAscending(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def areNumbersAscending(self, s: str) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool areNumbersAscending(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool AreNumbersAscending(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar areNumbersAscending = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function areNumbersAscending(s: string): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function areNumbersAscending($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func areNumbersAscending(_ s: String) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun areNumbersAscending(s: String): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool areNumbersAscending(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func areNumbersAscending(s string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef are_numbers_ascending(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def areNumbersAscending(s: String): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn are_numbers_ascending(s: String) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (are-numbers-ascending s)\n  (-> string? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec are_numbers_ascending(S :: unicode:unicode_binary()) -> boolean().\nare_numbers_ascending(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_numbers_ascending(s :: String.t) :: boolean\n  def are_numbers_ascending(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "string-to-integer-atoi", "title": "String to Integer (atoi)", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "sorting-the-sentence", "title": "Sorting the Sentence", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-if-all-as-appears-before-all-bs", "title": "Check if All A's Appears Before All B's", "isPaidOnly": false}]}