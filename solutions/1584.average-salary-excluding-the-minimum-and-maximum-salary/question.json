{"question_id": "1584", "problem_slug": "average-salary-excluding-the-minimum-and-maximum-salary", "problem_title": "Average Salary Excluding the Minimum and Maximum Salary", "content": "You are given an array of unique integers salary where salary[i] is the salary of the ith employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\nInput: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n\nExample 2:\n\nInput: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n\n \nConstraints:\n\n3 <= salary.length <= 100\n1000 <= salary[i] <= 106\nAll the integers of salary are unique.\n\n", "hints": ["Get the total sum and subtract the minimum and maximum value in the array.  Finally divide the result by n - 2."], "exampleTestcases": "[4000,3000,1000,2000]\n[1000,2000,3000]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double average(vector<int>& salary) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double average(int[] salary) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def average(self, salary):\n        \"\"\"\n        :type salary: List[int]\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        "}, "C": {"langSlug": "c", "code": "double average(int* salary, int salarySize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double Average(int[] salary) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function average(salary: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $salary\n     * @return Float\n     */\n    function average($salary) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func average(_ salary: [Int]) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun average(salary: IntArray): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double average(List<int> salary) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func average(salary []int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} salary\n# @return {Float}\ndef average(salary)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def average(salary: Array[Int]): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn average(salary: Vec<i32>) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (average salary)\n  (-> (listof exact-integer?) flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec average(Salary :: [integer()]) -> float().\naverage(Salary) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec average(salary :: [integer]) :: float\n  def average(salary) do\n    \n  end\nend"}}}