{"questionId": "1647", "acRate": 35.58582922047191, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1540", "paidOnly": false, "status": "ac", "title": "Can Convert String in K Moves", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "can-convert-string-in-k-moves", "content": "<p>Given two strings&nbsp;<code>s</code>&nbsp;and&nbsp;<code>t</code>, your goal is to convert&nbsp;<code>s</code>&nbsp;into&nbsp;<code>t</code>&nbsp;in&nbsp;<code>k</code><strong>&nbsp;</strong>moves or less.</p>\n\n<p>During the&nbsp;<code>i<sup>th</sup></code>&nbsp;(<font face=\"monospace\"><code>1 &lt;= i &lt;= k</code>)&nbsp;</font>move you can:</p>\n\n<ul>\n\t<li>Choose any index&nbsp;<code>j</code>&nbsp;(1-indexed) from&nbsp;<code>s</code>, such that&nbsp;<code>1 &lt;= j &lt;= s.length</code>&nbsp;and <code>j</code>&nbsp;has not been chosen in any previous move,&nbsp;and shift the character at that index&nbsp;<code>i</code>&nbsp;times.</li>\n\t<li>Do nothing.</li>\n</ul>\n\n<p>Shifting a character means replacing it by the next letter in the alphabet&nbsp;(wrapping around so that&nbsp;<code>&#39;z&#39;</code>&nbsp;becomes&nbsp;<code>&#39;a&#39;</code>). Shifting a character by&nbsp;<code>i</code>&nbsp;means applying the shift operations&nbsp;<code>i</code>&nbsp;times.</p>\n\n<p>Remember that any index&nbsp;<code>j</code>&nbsp;can be picked at most once.</p>\n\n<p>Return&nbsp;<code>true</code>&nbsp;if it&#39;s possible to convert&nbsp;<code>s</code>&nbsp;into&nbsp;<code>t</code>&nbsp;in no more than&nbsp;<code>k</code>&nbsp;moves, otherwise return&nbsp;<code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;input&quot;, t = &quot;ouput&quot;, k = 9\n<strong>Output:</strong> true\n<b>Explanation: </b>In the 6th move, we shift &#39;i&#39; 6 times to get &#39;o&#39;. And in the 7th move we shift &#39;n&#39; to get &#39;u&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, t = &quot;bcd&quot;, k = 10\n<strong>Output:</strong> false\n<strong>Explanation: </strong>We need to shift each character in s one time to convert it into t. We can shift &#39;a&#39; to &#39;b&#39; during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, t = &quot;bbb&quot;, k = 27\n<strong>Output:</strong> true\n<b>Explanation: </b>In the 1st move, we shift the first &#39;a&#39; 1 time to get &#39;b&#39;. In the 27th move, we shift the second &#39;a&#39; 27 times to get &#39;b&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^9</code></li>\n\t<li><code>s</code>, <code>t</code> contain&nbsp;only lowercase English letters.</li>\n</ul>\n", "hints": ["Observe that shifting a letter x times has the same effect of shifting the letter x + 26 times.", "You need to check whether k is large enough to cover all shifts with the same remainder after modulo 26."], "exampleTestcases": "\"input\"\n\"ouput\"\n9\n\"abc\"\n\"bcd\"\n10\n\"aab\"\n\"bbb\"\n27", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canConvertString(string s, string t, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canConvertString(String s, String t, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canConvertString(self, s, t, k):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canConvertString(self, s: str, t: str, k: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool canConvertString(char* s, char* t, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanConvertString(string s, string t, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @param {number} k\n * @return {boolean}\n */\nvar canConvertString = function(s, t, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canConvertString(s: string, t: string, k: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canConvertString($s, $t, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canConvertString(_ s: String, _ t: String, _ k: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canConvertString(s: String, t: String, k: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool canConvertString(String s, String t, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canConvertString(s string, t string, k int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @param {Integer} k\n# @return {Boolean}\ndef can_convert_string(s, t, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canConvertString(s: String, t: String, k: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_convert_string(s: String, t: String, k: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-convert-string s t k)\n  (-> string? string? exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_convert_string(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), K :: integer()) -> boolean().\ncan_convert_string(S, T, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_convert_string(s :: String.t, t :: String.t, k :: integer) :: boolean\n  def can_convert_string(s, t, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-cost-to-convert-string-i", "title": "Minimum Cost to Convert String I", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "isPaidOnly": false}]}