{"question_id": "2033", "problem_slug": "the-number-of-full-rounds-you-have-played", "problem_title": "The Number of Full Rounds You Have Played", "content": "You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.\n\nFor example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.\n\nYou are given two strings loginTime and logoutTime where:\n\nloginTime is the time you will login to the game, and\nlogoutTime is the time you will logout from the game.\n\nIf logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.\nReturn the number of full chess rounds you have played in the tournament.\nNote: All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.\n \nExample 1:\n\nInput: loginTime = \"09:31\", logoutTime = \"10:14\"\nOutput: 1\nExplanation: You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.\n\nExample 2:\n\nInput: loginTime = \"21:30\", logoutTime = \"03:00\"\nOutput: 22\nExplanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.\n\n \nConstraints:\n\nloginTime and logoutTime are in the format hh:mm.\n00 <= hh <= 23\n00 <= mm <= 59\nloginTime and logoutTime are not equal.\n\n", "hints": ["Consider the day as 48 hours instead of 24.", "For each round check if you were playing."], "exampleTestcases": "\"09:31\"\n\"10:14\"\n\"21:30\"\n\"03:00\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfRounds(string loginTime, string logoutTime) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfRounds(String loginTime, String logoutTime) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfRounds(self, loginTime, logoutTime):\n        \"\"\"\n        :type loginTime: str\n        :type logoutTime: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfRounds(char* loginTime, char* logoutTime) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfRounds(string loginTime, string logoutTime) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} loginTime\n * @param {string} logoutTime\n * @return {number}\n */\nvar numberOfRounds = function(loginTime, logoutTime) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfRounds(loginTime: string, logoutTime: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $loginTime\n     * @param String $logoutTime\n     * @return Integer\n     */\n    function numberOfRounds($loginTime, $logoutTime) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfRounds(_ loginTime: String, _ logoutTime: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfRounds(loginTime: String, logoutTime: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfRounds(String loginTime, String logoutTime) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfRounds(loginTime string, logoutTime string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} login_time\n# @param {String} logout_time\n# @return {Integer}\ndef number_of_rounds(login_time, logout_time)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfRounds(loginTime: String, logoutTime: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_rounds(login_time: String, logout_time: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-rounds loginTime logoutTime)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_rounds(LoginTime :: unicode:unicode_binary(), LogoutTime :: unicode:unicode_binary()) -> integer().\nnumber_of_rounds(LoginTime, LogoutTime) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_rounds(login_time :: String.t, logout_time :: String.t) :: integer\n  def number_of_rounds(login_time, logout_time) do\n    \n  end\nend"}}}