{"questionId": "2033", "acRate": 43.98154352779001, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1904", "paidOnly": false, "status": "ac", "title": "The Number of Full Rounds You Have Played", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "the-number-of-full-rounds-you-have-played", "content": "<p>You are participating in an online chess tournament. There is a chess round that starts every <code>15</code> minutes. The first round of the day starts at <code>00:00</code>, and after every <code>15</code> minutes, a new round starts.</p>\n\n<ul>\n\t<li>For example, the second round starts at <code>00:15</code>, the fourth round starts at <code>00:45</code>, and the seventh round starts at <code>01:30</code>.</li>\n</ul>\n\n<p>You are given two strings <code>loginTime</code> and <code>logoutTime</code> where:</p>\n\n<ul>\n\t<li><code>loginTime</code> is the time you will login to the game, and</li>\n\t<li><code>logoutTime</code> is the time you will logout from the game.</li>\n</ul>\n\n<p>If <code>logoutTime</code> is <strong>earlier</strong> than <code>loginTime</code>, this means you have played from <code>loginTime</code> to midnight and from midnight to <code>logoutTime</code>.</p>\n\n<p>Return <em>the number of full chess rounds you have played in the tournament</em>.</p>\n\n<p><strong>Note:</strong>&nbsp;All the given times follow the 24-hour clock. That means the first round of the day starts at <code>00:00</code> and the last round of the day starts at <code>23:45</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> loginTime = &quot;09:31&quot;, logoutTime = &quot;10:14&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> loginTime = &quot;21:30&quot;, logoutTime = &quot;03:00&quot;\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>loginTime</code> and <code>logoutTime</code> are in the format <code>hh:mm</code>.</li>\n\t<li><code>00 &lt;= hh &lt;= 23</code></li>\n\t<li><code>00 &lt;= mm &lt;= 59</code></li>\n\t<li><code>loginTime</code> and <code>logoutTime</code> are not equal.</li>\n</ul>\n", "hints": ["Consider the day as 48 hours instead of 24.", "For each round check if you were playing."], "exampleTestcases": "\"09:31\"\n\"10:14\"\n\"21:30\"\n\"03:00\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfRounds(string loginTime, string logoutTime) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfRounds(String loginTime, String logoutTime) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfRounds(self, loginTime, logoutTime):\n        \"\"\"\n        :type loginTime: str\n        :type logoutTime: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfRounds(char* loginTime, char* logoutTime) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfRounds(string loginTime, string logoutTime) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} loginTime\n * @param {string} logoutTime\n * @return {number}\n */\nvar numberOfRounds = function(loginTime, logoutTime) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfRounds(loginTime: string, logoutTime: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $loginTime\n     * @param String $logoutTime\n     * @return Integer\n     */\n    function numberOfRounds($loginTime, $logoutTime) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfRounds(_ loginTime: String, _ logoutTime: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfRounds(loginTime: String, logoutTime: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfRounds(String loginTime, String logoutTime) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfRounds(loginTime string, logoutTime string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} login_time\n# @param {String} logout_time\n# @return {Integer}\ndef number_of_rounds(login_time, logout_time)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfRounds(loginTime: String, logoutTime: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_rounds(login_time: String, logout_time: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-rounds loginTime logoutTime)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_rounds(LoginTime :: unicode:unicode_binary(), LogoutTime :: unicode:unicode_binary()) -> integer().\nnumber_of_rounds(LoginTime, LogoutTime) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_rounds(login_time :: String.t, logout_time :: String.t) :: integer\n  def number_of_rounds(login_time, logout_time) do\n    \n  end\nend"}], "similarQuestionList": []}