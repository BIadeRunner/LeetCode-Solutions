{"question_id": "715", "problem_slug": "range-module", "problem_title": "Range Module", "content": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\nImplement the RangeModule class:\n\nRangeModule() Initializes the object of the data structure.\nvoid addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\nboolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\nvoid removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).\n\n \nExample 1:\n\nInput\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\nOutput\n[null, null, null, true, false, true]\n\nExplanation\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n\n \nConstraints:\n\n1 <= left < right <= 109\nAt most 104 calls will be made to addRange, queryRange, and removeRange.\n\n", "hints": ["Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."], "exampleTestcases": "[\"RangeModule\",\"addRange\",\"removeRange\",\"queryRange\",\"queryRange\",\"queryRange\"]\n[[],[10,20],[14,16],[10,14],[13,15],[16,17]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class RangeModule {\npublic:\n    RangeModule() {\n        \n    }\n    \n    void addRange(int left, int right) {\n        \n    }\n    \n    bool queryRange(int left, int right) {\n        \n    }\n    \n    void removeRange(int left, int right) {\n        \n    }\n};\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule* obj = new RangeModule();\n * obj->addRange(left,right);\n * bool param_2 = obj->queryRange(left,right);\n * obj->removeRange(left,right);\n */"}, "Java": {"langSlug": "java", "code": "class RangeModule {\n\n    public RangeModule() {\n        \n    }\n    \n    public void addRange(int left, int right) {\n        \n    }\n    \n    public boolean queryRange(int left, int right) {\n        \n    }\n    \n    public void removeRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.addRange(left,right);\n * boolean param_2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);\n */"}, "Python": {"langSlug": "python", "code": "class RangeModule(object):\n\n    def __init__(self):\n        \n\n    def addRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None\n        \"\"\"\n        \n\n    def queryRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def removeRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)"}, "Python3": {"langSlug": "python3", "code": "class RangeModule:\n\n    def __init__(self):\n        \n\n    def addRange(self, left: int, right: int) -> None:\n        \n\n    def queryRange(self, left: int, right: int) -> bool:\n        \n\n    def removeRange(self, left: int, right: int) -> None:\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} RangeModule;\n\n\nRangeModule* rangeModuleCreate() {\n    \n}\n\nvoid rangeModuleAddRange(RangeModule* obj, int left, int right) {\n    \n}\n\nbool rangeModuleQueryRange(RangeModule* obj, int left, int right) {\n    \n}\n\nvoid rangeModuleRemoveRange(RangeModule* obj, int left, int right) {\n    \n}\n\nvoid rangeModuleFree(RangeModule* obj) {\n    \n}\n\n/**\n * Your RangeModule struct will be instantiated and called as such:\n * RangeModule* obj = rangeModuleCreate();\n * rangeModuleAddRange(obj, left, right);\n \n * bool param_2 = rangeModuleQueryRange(obj, left, right);\n \n * rangeModuleRemoveRange(obj, left, right);\n \n * rangeModuleFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class RangeModule {\n\n    public RangeModule() {\n        \n    }\n    \n    public void AddRange(int left, int right) {\n        \n    }\n    \n    public bool QueryRange(int left, int right) {\n        \n    }\n    \n    public void RemoveRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.AddRange(left,right);\n * bool param_2 = obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar RangeModule = function() {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.addRange = function(left, right) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {boolean}\n */\nRangeModule.prototype.queryRange = function(left, right) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.removeRange = function(left, right) {\n    \n};\n\n/** \n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class RangeModule {\n    constructor() {\n        \n    }\n\n    addRange(left: number, right: number): void {\n        \n    }\n\n    queryRange(left: number, right: number): boolean {\n        \n    }\n\n    removeRange(left: number, right: number): void {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"}, "PHP": {"langSlug": "php", "code": "class RangeModule {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function addRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Boolean\n     */\n    function queryRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function removeRange($left, $right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * $obj = RangeModule();\n * $obj->addRange($left, $right);\n * $ret_2 = $obj->queryRange($left, $right);\n * $obj->removeRange($left, $right);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass RangeModule {\n\n    init() {\n        \n    }\n    \n    func addRange(_ left: Int, _ right: Int) {\n        \n    }\n    \n    func queryRange(_ left: Int, _ right: Int) -> Bool {\n        \n    }\n    \n    func removeRange(_ left: Int, _ right: Int) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * let obj = RangeModule()\n * obj.addRange(left, right)\n * let ret_2: Bool = obj.queryRange(left, right)\n * obj.removeRange(left, right)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class RangeModule() {\n\n    fun addRange(left: Int, right: Int) {\n        \n    }\n\n    fun queryRange(left: Int, right: Int): Boolean {\n        \n    }\n\n    fun removeRange(left: Int, right: Int) {\n        \n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"}, "Dart": {"langSlug": "dart", "code": "class RangeModule {\n\n  RangeModule() {\n    \n  }\n  \n  void addRange(int left, int right) {\n    \n  }\n  \n  bool queryRange(int left, int right) {\n    \n  }\n  \n  void removeRange(int left, int right) {\n    \n  }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = RangeModule();\n * obj.addRange(left,right);\n * bool param2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);\n */"}, "Go": {"langSlug": "golang", "code": "type RangeModule struct {\n    \n}\n\n\nfunc Constructor() RangeModule {\n    \n}\n\n\nfunc (this *RangeModule) AddRange(left int, right int)  {\n    \n}\n\n\nfunc (this *RangeModule) QueryRange(left int, right int) bool {\n    \n}\n\n\nfunc (this *RangeModule) RemoveRange(left int, right int)  {\n    \n}\n\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddRange(left,right);\n * param_2 := obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class RangeModule\n    def initialize()\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def add_range(left, right)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Boolean\n=end\n    def query_range(left, right)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def remove_range(left, right)\n        \n    end\n\n\nend\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule.new()\n# obj.add_range(left, right)\n# param_2 = obj.query_range(left, right)\n# obj.remove_range(left, right)"}, "Scala": {"langSlug": "scala", "code": "class RangeModule() {\n\n    def addRange(left: Int, right: Int): Unit = {\n        \n    }\n\n    def queryRange(left: Int, right: Int): Boolean = {\n        \n    }\n\n    def removeRange(left: Int, right: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * val obj = new RangeModule()\n * obj.addRange(left,right)\n * val param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"}, "Rust": {"langSlug": "rust", "code": "struct RangeModule {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RangeModule {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_range(&self, left: i32, right: i32) {\n        \n    }\n    \n    fn query_range(&self, left: i32, right: i32) -> bool {\n        \n    }\n    \n    fn remove_range(&self, left: i32, right: i32) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * let obj = RangeModule::new();\n * obj.add_range(left, right);\n * let ret_2: bool = obj.query_range(left, right);\n * obj.remove_range(left, right);\n */"}, "Racket": {"langSlug": "racket", "code": "(define range-module%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add-range : exact-integer? exact-integer? -> void?\n    (define/public (add-range left right)\n      )\n    ; query-range : exact-integer? exact-integer? -> boolean?\n    (define/public (query-range left right)\n      )\n    ; remove-range : exact-integer? exact-integer? -> void?\n    (define/public (remove-range left right)\n      )))\n\n;; Your range-module% object will be instantiated and called as such:\n;; (define obj (new range-module%))\n;; (send obj add-range left right)\n;; (define param_2 (send obj query-range left right))\n;; (send obj remove-range left right)"}, "Erlang": {"langSlug": "erlang", "code": "-spec range_module_init_() -> any().\nrange_module_init_() ->\n  .\n\n-spec range_module_add_range(Left :: integer(), Right :: integer()) -> any().\nrange_module_add_range(Left, Right) ->\n  .\n\n-spec range_module_query_range(Left :: integer(), Right :: integer()) -> boolean().\nrange_module_query_range(Left, Right) ->\n  .\n\n-spec range_module_remove_range(Left :: integer(), Right :: integer()) -> any().\nrange_module_remove_range(Left, Right) ->\n  .\n\n\n%% Your functions will be called as such:\n%% range_module_init_(),\n%% range_module_add_range(Left, Right),\n%% Param_2 = range_module_query_range(Left, Right),\n%% range_module_remove_range(Left, Right),\n\n%% range_module_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule RangeModule do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec add_range(left :: integer, right :: integer) :: any\n  def add_range(left, right) do\n    \n  end\n\n  @spec query_range(left :: integer, right :: integer) :: boolean\n  def query_range(left, right) do\n    \n  end\n\n  @spec remove_range(left :: integer, right :: integer) :: any\n  def remove_range(left, right) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# RangeModule.init_()\n# RangeModule.add_range(left, right)\n# param_2 = RangeModule.query_range(left, right)\n# RangeModule.remove_range(left, right)\n\n# RangeModule.init_ will be called before every test case, in which you can do some necessary initializations."}}}