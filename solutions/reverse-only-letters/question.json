{"questionId": "953", "acRate": 65.6998348754994, "difficulty": "Easy", "freqBar": 29.718831659295304, "frontendQuestionId": "917", "paidOnly": false, "status": "ac", "title": "Reverse Only Letters", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "reverse-only-letters", "content": "<p>Given a string <code>s</code>, reverse the string according to the following rules:</p>\n\n<ul>\n\t<li>All the characters that are not English letters remain in the same position.</li>\n\t<li>All the English letters (lowercase or uppercase) should be reversed.</li>\n</ul>\n\n<p>Return <code>s</code><em> after reversing it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"ab-cd\"\n<strong>Output:</strong> \"dc-ba\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"a-bC-dEf-ghIj\"\n<strong>Output:</strong> \"j-Ih-gfE-dCba\"\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"Test1ng-Leet=code-Q!\"\n<strong>Output:</strong> \"Qedo1ct-eeLg=ntse-T!\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of characters with ASCII values in the range <code>[33, 122]</code>.</li>\n\t<li><code>s</code> does not contain <code>&#39;\\&quot;&#39;</code> or <code>&#39;\\\\&#39;</code>.</li>\n</ul>\n", "hints": ["This problem is exactly like reversing a normal string except that there are certain characters that we have to simply skip. That should be easy enough to do if you know how to reverse a string using the two-pointer approach."], "exampleTestcases": "\"ab-cd\"\n\"a-bC-dEf-ghIj\"\n\"Test1ng-Leet=code-Q!\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseOnlyLetters(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reverseOnlyLetters(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseOnlyLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* reverseOnlyLetters(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReverseOnlyLetters(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseOnlyLetters = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverseOnlyLetters(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseOnlyLetters($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseOnlyLetters(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseOnlyLetters(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String reverseOnlyLetters(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseOnlyLetters(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reverse_only_letters(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseOnlyLetters(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_only_letters(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (reverse-only-letters s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec reverse_only_letters(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreverse_only_letters(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec reverse_only_letters(s :: String.t) :: String.t\n  def reverse_only_letters(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "faulty-keyboard", "title": "Faulty Keyboard", "isPaidOnly": false}]}