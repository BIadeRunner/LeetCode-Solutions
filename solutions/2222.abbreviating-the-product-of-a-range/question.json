{"question_id": "2222", "problem_slug": "abbreviating-the-product-of-a-range", "problem_title": "Abbreviating the Product of a Range", "content": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].\nSince the product may be very large, you will abbreviate it following these steps:\n\nCount all trailing zeros in the product and remove them. Let us denote this count as C.\n\n\t\nFor example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.\n\n\nDenote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged.\n\t\nFor example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.\n\n\nFinally, represent the product as a string \"<pre>...<suf>eC\".\n\t\nFor example, 12345678987600000 will be represented as \"12345...89876e5\".\n\n\n\nReturn a string denoting the abbreviated product of all integers in the inclusive range [left, right].\n \nExample 1:\n\nInput: left = 1, right = 4\nOutput: \"24e0\"\nExplanation: The product is 1 × 2 × 3 × 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\".\n\nExample 2:\n\nInput: left = 2, right = 11\nOutput: \"399168e2\"\nExplanation: The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\".\n\nExample 3:\n\nInput: left = 371, right = 375\nOutput: \"7219856259e3\"\nExplanation: The product is 7219856259000.\n\n \nConstraints:\n\n1 <= left <= right <= 104\n\n", "hints": ["Calculating the number of trailing zeros, the last five digits, and the first five digits can all be done separately.", "Use a prime factorization property to find the number of trailing zeros. Use modulo to find the last 5 digits. Use a logarithm property to find the first 5 digits.", "The number of trailing zeros C is nothing but the number of times the product is completely divisible by 10. Since 2 and 5 are the only prime factors of 10,  C will be equal to the minimum number of times 2 or 5 appear in the prime factorization of the product.", "Iterate through the integers from left to right. For every integer, keep dividing it by 2 as long as it is divisible by 2 and C occurrences of 2 haven't been removed in total. Repeat this process for 5. Finally, multiply the integer under modulo of 10^5 with the product obtained till now to obtain the last five digits.", "The product P can be represented as P=10^(x+y) where x is the integral part and y is the fractional part of x+y. Using the property \"if S = A * B, then log(S) = log(A) + log(B)\", we can write x+y = log_10(P) = sum(log_10(i)) for each integer i in [left, right]. Once we obtain the sum, the first five digits can be represented as floor(10^(y+4))."], "exampleTestcases": "1\n4\n2\n11\n371\n375", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string abbreviateProduct(int left, int right) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String abbreviateProduct(int left, int right) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def abbreviateProduct(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* abbreviateProduct(int left, int right) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AbbreviateProduct(int left, int right) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} left\n * @param {number} right\n * @return {string}\n */\nvar abbreviateProduct = function(left, right) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function abbreviateProduct(left: number, right: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return String\n     */\n    function abbreviateProduct($left, $right) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func abbreviateProduct(_ left: Int, _ right: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun abbreviateProduct(left: Int, right: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String abbreviateProduct(int left, int right) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func abbreviateProduct(left int, right int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} left\n# @param {Integer} right\n# @return {String}\ndef abbreviate_product(left, right)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def abbreviateProduct(left: Int, right: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn abbreviate_product(left: i32, right: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (abbreviate-product left right)\n  (-> exact-integer? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec abbreviate_product(Left :: integer(), Right :: integer()) -> unicode:unicode_binary().\nabbreviate_product(Left, Right) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec abbreviate_product(left :: integer, right :: integer) :: String.t\n  def abbreviate_product(left, right) do\n    \n  end\nend"}}}