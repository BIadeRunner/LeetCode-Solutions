{"questionId": "2222", "acRate": 26.03975750740166, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2117", "paidOnly": false, "status": "ac", "title": "Abbreviating the Product of a Range", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "abbreviating-the-product-of-a-range", "content": "<p>You are given two positive integers <code>left</code> and <code>right</code> with <code>left &lt;= right</code>. Calculate the <strong>product</strong> of all integers in the <strong>inclusive</strong> range <code>[left, right]</code>.</p>\n\n<p>Since the product may be very large, you will <strong>abbreviate</strong> it following these steps:</p>\n\n<ol>\n\t<li>Count all <strong>trailing</strong> zeros in the product and <strong>remove</strong> them. Let us denote this count as <code>C</code>.\n\n\t<ul>\n\t\t<li>For example, there are <code>3</code> trailing zeros in <code>1000</code>, and there are <code>0</code> trailing zeros in <code>546</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Denote the remaining number of digits in the product as <code>d</code>. If <code>d &gt; 10</code>, then express the product as <code>&lt;pre&gt;...&lt;suf&gt;</code> where <code>&lt;pre&gt;</code> denotes the <strong>first</strong> <code>5</code> digits of the product, and <code>&lt;suf&gt;</code> denotes the <strong>last</strong> <code>5</code> digits of the product <strong>after</strong> removing all trailing zeros. If <code>d &lt;= 10</code>, we keep it unchanged.\n\t<ul>\n\t\t<li>For example, we express <code>1234567654321</code> as <code>12345...54321</code>, but <code>1234567</code> is represented as <code>1234567</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Finally, represent the product as a <strong>string</strong> <code>&quot;&lt;pre&gt;...&lt;suf&gt;eC&quot;</code>.\n\t<ul>\n\t\t<li>For example, <code>12345678987600000</code> will be represented as <code>&quot;12345...89876e5&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Return <em>a string denoting the <strong>abbreviated product</strong> of all integers in the <strong>inclusive</strong> range</em> <code>[left, right]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 1, right = 4\n<strong>Output:</strong> &quot;24e0&quot;\n<strong>Explanation:</strong> The product is 1 &times; 2 &times; 3 &times; 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with &quot;e0&quot;.\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is &quot;24e0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 2, right = 11\n<strong>Output:</strong> &quot;399168e2&quot;\n<strong>Explanation:</strong> The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with &quot;e2&quot;.\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is &quot;399168e2&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 371, right = 375\n<strong>Output:</strong> &quot;7219856259e3&quot;\n<strong>Explanation:</strong> The product is 7219856259000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Calculating the number of trailing zeros, the last five digits, and the first five digits can all be done separately.", "Use a prime factorization property to find the number of trailing zeros. Use modulo to find the last 5 digits. Use a logarithm property to find the first 5 digits.", "The number of trailing zeros C is nothing but the number of times the product is completely divisible by 10. Since 2 and 5 are the only prime factors of 10,  C will be equal to the minimum number of times 2 or 5 appear in the prime factorization of the product.", "Iterate through the integers from left to right. For every integer, keep dividing it by 2 as long as it is divisible by 2 and C occurrences of 2 haven't been removed in total. Repeat this process for 5. Finally, multiply the integer under modulo of 10^5 with the product obtained till now to obtain the last five digits.", "The product P can be represented as P=10^(x+y) where x is the integral part and y is the fractional part of x+y. Using the property \"if S = A * B, then log(S) = log(A) + log(B)\", we can write x+y = log_10(P) = sum(log_10(i)) for each integer i in [left, right]. Once we obtain the sum, the first five digits can be represented as floor(10^(y+4))."], "exampleTestcases": "1\n4\n2\n11\n371\n375", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string abbreviateProduct(int left, int right) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String abbreviateProduct(int left, int right) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def abbreviateProduct(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* abbreviateProduct(int left, int right) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string AbbreviateProduct(int left, int right) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} left\n * @param {number} right\n * @return {string}\n */\nvar abbreviateProduct = function(left, right) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function abbreviateProduct(left: number, right: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return String\n     */\n    function abbreviateProduct($left, $right) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func abbreviateProduct(_ left: Int, _ right: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun abbreviateProduct(left: Int, right: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String abbreviateProduct(int left, int right) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func abbreviateProduct(left int, right int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} left\n# @param {Integer} right\n# @return {String}\ndef abbreviate_product(left, right)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def abbreviateProduct(left: Int, right: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn abbreviate_product(left: i32, right: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (abbreviate-product left right)\n  (-> exact-integer? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec abbreviate_product(Left :: integer(), Right :: integer()) -> unicode:unicode_binary().\nabbreviate_product(Left, Right) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec abbreviate_product(left :: integer, right :: integer) :: String.t\n  def abbreviate_product(left, right) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "factorial-trailing-zeroes", "title": "Factorial Trailing Zeroes", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-trailing-zeros-in-a-cornered-path", "title": "Maximum Trailing Zeros in a Cornered Path", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-all-good-indices", "title": "Find All Good Indices", "isPaidOnly": false}]}