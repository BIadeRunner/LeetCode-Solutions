{"question_id": "1060", "problem_slug": "longest-repeating-substring", "problem_title": "Longest Repeating Substring", "content": "Given a string s, return the length of the longest repeating substrings. If no repeating substring exists, return 0.\n \nExample 1:\n\nInput: s = \"abcd\"\nOutput: 0\nExplanation: There is no repeating substring.\n\nExample 2:\n\nInput: s = \"abbaba\"\nOutput: 2\nExplanation: The longest repeating substrings are \"ab\" and \"ba\", each of which occurs twice.\n\nExample 3:\n\nInput: s = \"aabcaabdaab\"\nOutput: 3\nExplanation: The longest repeating substring is \"aab\", which occurs 3 times.\n\n \nConstraints:\n\n1 <= s.length <= 2000\ns consists of lowercase English letters.\n\n", "hints": ["Generate all substrings in O(N^2) time with hashing.", "Choose those hashing of strings with the largest length."], "exampleTestcases": "\"abcd\"\n\"abbaba\"\n\"aabcaabdaab\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestRepeatingSubstring(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestRepeatingSubstring(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestRepeatingSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestRepeatingSubstring(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestRepeatingSubstring(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestRepeatingSubstring = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestRepeatingSubstring(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestRepeatingSubstring($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestRepeatingSubstring(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestRepeatingSubstring(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestRepeatingSubstring(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestRepeatingSubstring(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_repeating_substring(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestRepeatingSubstring(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_repeating_substring(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-repeating-substring s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_repeating_substring(S :: unicode:unicode_binary()) -> integer().\nlongest_repeating_substring(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_repeating_substring(s :: String.t) :: integer\n  def longest_repeating_substring(s) do\n    \n  end\nend"}}}