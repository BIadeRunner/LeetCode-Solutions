{"questionId": "1137", "acRate": 80.90312967102126, "difficulty": "Easy", "freqBar": 58.36641140988243, "frontendQuestionId": "1051", "paidOnly": false, "status": "ac", "title": "Height Checker", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting Sort", "id": "VG9waWNUYWdOb2RlOjYxMDcy", "slug": "counting-sort"}], "titleSlug": "height-checker", "content": "<p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in <strong>non-decreasing order</strong> by height. Let this ordering be represented by the integer array <code>expected</code> where <code>expected[i]</code> is the expected height of the <code>i<sup>th</sup></code> student in line.</p>\n\n<p>You are given an integer array <code>heights</code> representing the <strong>current order</strong> that the students are standing in. Each <code>heights[i]</code> is the height of the <code>i<sup>th</sup></code> student in line (<strong>0-indexed</strong>).</p>\n\n<p>Return <em>the <strong>number of indices</strong> where </em><code>heights[i] != expected[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [1,1,4,2,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nheights:  [1,1,<u>4</u>,2,<u>1</u>,<u>3</u>]\nexpected: [1,1,<u>1</u>,2,<u>3</u>,<u>4</u>]\nIndices 2, 4, and 5 do not match.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [5,1,2,3,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nheights:  [<u>5</u>,<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>]\nexpected: [<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>,<u>5</u>]\nAll indices do not match.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [1,2,3,4,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 100</code></li>\n</ul>\n", "hints": ["Build the correct order of heights by sorting another array, then compare the two arrays."], "exampleTestcases": "[1,1,4,2,1,3]\n[5,1,2,3,4]\n[1,2,3,4,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int heightChecker(vector<int>& heights) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int heightChecker(int[] heights) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def heightChecker(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int heightChecker(int* heights, int heightsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HeightChecker(int[] heights) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function heightChecker(heights: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function heightChecker($heights) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func heightChecker(_ heights: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun heightChecker(heights: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int heightChecker(List<int> heights) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func heightChecker(heights []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef height_checker(heights)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def heightChecker(heights: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn height_checker(heights: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (height-checker heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec height_checker(Heights :: [integer()]) -> integer().\nheight_checker(Heights) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec height_checker(heights :: [integer]) :: integer\n  def height_checker(heights) do\n    \n  end\nend"}], "similarQuestionList": []}