{"question_id": "924", "problem_slug": "fair-candy-swap", "problem_title": "Fair Candy Swap", "content": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n \nExample 1:\n\nInput: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]\n\nExample 3:\n\nInput: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]\n\n \nConstraints:\n\n1 <= aliceSizes.length, bobSizes.length <= 104\n1 <= aliceSizes[i], bobSizes[j] <= 105\nAlice and Bob have a different total number of candies.\nThere will be at least one valid answer for the given input.\n\n", "hints": [], "exampleTestcases": "[1,1]\n[2,2]\n[1,2]\n[2,3]\n[2]\n[1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> fairCandySwap(vector<int>& aliceSizes, vector<int>& bobSizes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def fairCandySwap(self, aliceSizes, bobSizes):\n        \"\"\"\n        :type aliceSizes: List[int]\n        :type bobSizes: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fairCandySwap(int* aliceSizes, int aliceSizesSize, int* bobSizes, int bobSizesSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FairCandySwap(int[] aliceSizes, int[] bobSizes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} aliceSizes\n * @param {number[]} bobSizes\n * @return {number[]}\n */\nvar fairCandySwap = function(aliceSizes, bobSizes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function fairCandySwap(aliceSizes: number[], bobSizes: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $aliceSizes\n     * @param Integer[] $bobSizes\n     * @return Integer[]\n     */\n    function fairCandySwap($aliceSizes, $bobSizes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func fairCandySwap(_ aliceSizes: [Int], _ bobSizes: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun fairCandySwap(aliceSizes: IntArray, bobSizes: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> fairCandySwap(List<int> aliceSizes, List<int> bobSizes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func fairCandySwap(aliceSizes []int, bobSizes []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} alice_sizes\n# @param {Integer[]} bob_sizes\n# @return {Integer[]}\ndef fair_candy_swap(alice_sizes, bob_sizes)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def fairCandySwap(aliceSizes: Array[Int], bobSizes: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn fair_candy_swap(alice_sizes: Vec<i32>, bob_sizes: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (fair-candy-swap aliceSizes bobSizes)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec fair_candy_swap(AliceSizes :: [integer()], BobSizes :: [integer()]) -> [integer()].\nfair_candy_swap(AliceSizes, BobSizes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec fair_candy_swap(alice_sizes :: [integer], bob_sizes :: [integer]) :: [integer]\n  def fair_candy_swap(alice_sizes, bob_sizes) do\n    \n  end\nend"}}}