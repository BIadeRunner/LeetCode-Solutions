{"questionId": "1652", "acRate": 73.5134788189987, "difficulty": "Medium", "freqBar": 24.731378672042414, "frontendQuestionId": "1529", "paidOnly": false, "status": "ac", "title": "Minimum Suffix Flips", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "minimum-suffix-flips", "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>target</code> of length <code>n</code>. You have another binary string <code>s</code> of length <code>n</code> that is initially set to all zeros. You want to make <code>s</code> equal to <code>target</code>.</p>\n\n<p>In one operation, you can pick an index <code>i</code> where <code>0 &lt;= i &lt; n</code> and flip all bits in the <strong>inclusive</strong> range <code>[i, n - 1]</code>. Flip means changing <code>&#39;0&#39;</code> to <code>&#39;1&#39;</code> and <code>&#39;1&#39;</code> to <code>&#39;0&#39;</code>.</p>\n\n<p>Return <em>the minimum number of operations needed to make </em><code>s</code><em> equal to </em><code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;10111&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, s = &quot;00000&quot;.\nChoose index i = 2: &quot;00<u>000</u>&quot; -&gt; &quot;00<u>111</u>&quot;\nChoose index i = 0: &quot;<u>00111</u>&quot; -&gt; &quot;<u>11000</u>&quot;\nChoose index i = 1: &quot;1<u>1000</u>&quot; -&gt; &quot;1<u>0111</u>&quot;\nWe need at least 3 flip operations to form target.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;101&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, s = &quot;000&quot;.\nChoose index i = 0: &quot;<u>000</u>&quot; -&gt; &quot;<u>111</u>&quot;\nChoose index i = 1: &quot;1<u>11</u>&quot; -&gt; &quot;1<u>00</u>&quot;\nChoose index i = 2: &quot;10<u>0</u>&quot; -&gt; &quot;10<u>1</u>&quot;\nWe need at least 3 flip operations to form target.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;00000&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We do not need any operations since the initial s already equals target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>target[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n", "hints": ["Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."], "exampleTestcases": "\"10111\"\n\"101\"\n\"00000\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFlips(string target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minFlips(String target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minFlips(self, target):\n        \"\"\"\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minFlips(self, target: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minFlips(char* target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinFlips(string target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} target\n * @return {number}\n */\nvar minFlips = function(target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minFlips(target: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @return Integer\n     */\n    function minFlips($target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minFlips(_ target: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minFlips(target: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minFlips(String target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minFlips(target string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} target\n# @return {Integer}\ndef min_flips(target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minFlips(target: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_flips(target: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-flips target)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_flips(Target :: unicode:unicode_binary()) -> integer().\nmin_flips(Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_flips(target :: String.t) :: integer\n  def min_flips(target) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii", "title": "Minimum Operations to Make Binary Array Elements Equal to One II", "isPaidOnly": false}]}