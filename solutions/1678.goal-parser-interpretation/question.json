{"questionId": "1797", "acRate": 87.4474879799542, "difficulty": "Easy", "freqBar": 37.579361613752326, "frontendQuestionId": "1678", "paidOnly": false, "status": "ac", "title": "Goal Parser Interpretation", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "goal-parser-interpretation", "content": "<p>You own a <strong>Goal Parser</strong> that can interpret a string <code>command</code>. The <code>command</code> consists of an alphabet of <code>&quot;G&quot;</code>, <code>&quot;()&quot;</code> and/or <code>&quot;(al)&quot;</code> in some order. The Goal Parser will interpret <code>&quot;G&quot;</code> as the string <code>&quot;G&quot;</code>, <code>&quot;()&quot;</code> as the string <code>&quot;o&quot;</code>, and <code>&quot;(al)&quot;</code> as the string <code>&quot;al&quot;</code>. The interpreted strings are then concatenated in the original order.</p>\n\n<p>Given the string <code>command</code>, return <em>the <strong>Goal Parser</strong>&#39;s interpretation of </em><code>command</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> command = &quot;G()(al)&quot;\n<strong>Output:</strong> &quot;Goal&quot;\n<strong>Explanation:</strong>&nbsp;The Goal Parser interprets the command as follows:\nG -&gt; G\n() -&gt; o\n(al) -&gt; al\nThe final concatenated result is &quot;Goal&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> command = &quot;G()()()()(al)&quot;\n<strong>Output:</strong> &quot;Gooooal&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> command = &quot;(al)G(al)()()G&quot;\n<strong>Output:</strong> &quot;alGalooG&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= command.length &lt;= 100</code></li>\n\t<li><code>command</code> consists of <code>&quot;G&quot;</code>, <code>&quot;()&quot;</code>, and/or <code>&quot;(al)&quot;</code> in some order.</li>\n</ul>\n", "hints": ["You need to check at most 2 characters to determine which character comes next."], "exampleTestcases": "\"G()(al)\"\n\"G()()()()(al)\"\n\"(al)G(al)()()G\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string interpret(string command) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String interpret(String command) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def interpret(self, command):\n        \"\"\"\n        :type command: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def interpret(self, command: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * interpret(char * command){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string Interpret(string command) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} command\n * @return {string}\n */\nvar interpret = function(command) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function interpret(command: string): string {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $command\n     * @return String\n     */\n    function interpret($command) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func interpret(_ command: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun interpret(command: String): String {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func interpret(command string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} command\n# @return {String}\ndef interpret(command)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def interpret(command: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn interpret(command: String) -> String {\n        \n    }\n}"}], "similarQuestionList": []}