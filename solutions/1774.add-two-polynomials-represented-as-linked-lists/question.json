{"question_id": "1774", "problem_slug": "add-two-polynomials-represented-as-linked-lists", "problem_title": "Add Two Polynomials Represented as Linked Lists", "content": "A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.\nEach node has three attributes:\n\ncoefficient: an integer representing the number multiplier of the term. The coefficient of the term 9x4 is 9.\npower: an integer representing the exponent. The power of the term 9x4 is 4.\nnext: a pointer to the next node in the list, or null if it is the last node of the list.\n\nFor example, the polynomial 5x3 + 4x - 7 is represented by the polynomial linked list illustrated below:\n\nThe polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its power value. Also, terms with a coefficient of 0 are omitted.\nGiven two polynomial linked list heads, poly1 and poly2, add the polynomials together and return the head of the sum of the polynomials.\nPolyNode format:\nThe input/output format is as a list of n nodes, where each node is represented as its [coefficient, power]. For example, the polynomial 5x3 + 4x - 7 would be represented as: [[5,3],[4,1],[-7,0]].\n \nExample 1:\n\n\r\nInput: poly1 = [[1,1]], poly2 = [[1,0]]\r\nOutput: [[1,1],[1,0]]\r\nExplanation: poly1 = x. poly2 = 1. The sum is x + 1.\r\n\nExample 2:\n\r\nInput: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]\r\nOutput: [[5,2],[2,0]]\r\nExplanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the \"0x\" term.\r\n\nExample 3:\n\r\nInput: poly1 = [[1,2]], poly2 = [[-1,2]]\r\nOutput: []\r\nExplanation: The sum is 0. We return an empty list.\r\n\n \nConstraints:\n\n0 <= n <= 104\n-109 <= PolyNode.coefficient <= 109\nPolyNode.coefficient != 0\n0 <= PolyNode.power <= 109\nPolyNode.power > PolyNode.next.power\n", "hints": ["Process both linked lists at the same time", "If the current power of the two heads is equal, add this power with the sum of the coefficients to the answer list.", "If one head has a larger power, add this power to the answer list and move only this head."], "exampleTestcases": "[[1,1]]\n[[1,0]]\n[[2,2],[4,1],[3,0]]\n[[3,2],[-4,1],[-1,0]]\n[[1,2]]\n[[-1,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for polynomial singly-linked list.\n * struct PolyNode {\n *     int coefficient, power;\n *     PolyNode *next;\n *     PolyNode(): coefficient(0), power(0), next(nullptr) {};\n *     PolyNode(int x, int y): coefficient(x), power(y), next(nullptr) {};\n *     PolyNode(int x, int y, PolyNode* next): coefficient(x), power(y), next(next) {};\n * };\n */\n\nclass Solution {\npublic:\n    PolyNode* addPoly(PolyNode* poly1, PolyNode* poly2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for polynomial singly-linked list.\n * class PolyNode {\n *     int coefficient, power;\n *     PolyNode next = null;\n \n *     PolyNode() {}\n *     PolyNode(int x, int y) { this.coefficient = x; this.power = y; }\n *     PolyNode(int x, int y, PolyNode next) { this.coefficient = x; this.power = y; this.next = next; }\n * }\n */\n\nclass Solution {\n    public PolyNode addPoly(PolyNode poly1, PolyNode poly2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition for polynomial singly-linked list.\n# class PolyNode:\n#     def __init__(self, x=0, y=0, next=None):\n#         self.coefficient = x\n#         self.power = y\n#         self.next = next\n\nclass Solution:\n    def addPoly(self, poly1, poly2):\n        \"\"\"\n        :type poly1: PolyNode\n        :type poly2: PolyNode\n        :rtype: PolyNode\n        \"\"\"\n        \n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for polynomial singly-linked list.\n# class PolyNode:\n#     def __init__(self, x=0, y=0, next=None):\n#         self.coefficient = x\n#         self.power = y\n#         self.next = next\n\nclass Solution:\n    def addPoly(self, poly1: 'PolyNode', poly2: 'PolyNode') -> 'PolyNode':\n        \n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for polynomial singly-linked list.\n * public class PolyNode {\n *     public int coefficient, power;\n *     public PolyNode next;\n *\n *     public PolyNode(int x=0, int y=0, PolyNode next=null) {\n *         this.coefficient = x;\n *         this.power = y;\n *         this.next = next;\n *     }\n * }\n */\n\npublic class Solution {\n    public PolyNode AddPoly(PolyNode poly1, PolyNode poly2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for polynomial singly-linked list.\n * function PolyNode(x=0, y=0, next=null) {\n *     this.coefficient = x;\n *     this.power = y;\n *     this.next = next;\n * }\n */\n\n/**\n * @param {PolyNode} poly1\n * @param {PolyNode} poly2\n * @return {PolyNode}\n */\nvar addPoly = function(poly1, poly2) {\n    \n};"}}}