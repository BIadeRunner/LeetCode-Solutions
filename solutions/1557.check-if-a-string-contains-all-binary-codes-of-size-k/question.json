{"question_id": "1557", "problem_slug": "check-if-a-string-contains-all-binary-codes-of-size-k", "problem_title": "Check If a String Contains All Binary Codes of Size K", "content": "Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.\n \nExample 1:\n\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.\n\nExample 2:\n\nInput: s = \"0110\", k = 1\nOutput: true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n\nExample 3:\n\nInput: s = \"0110\", k = 2\nOutput: false\nExplanation: The binary code \"00\" is of length 2 and does not exist in the array.\n\n \nConstraints:\n\n1 <= s.length <= 5 * 105\ns[i] is either '0' or '1'.\n1 <= k <= 20\n\n", "hints": ["We need only to check all sub-strings of length k.", "The number of distinct sub-strings should be exactly 2^k."], "exampleTestcases": "\"00110110\"\n2\n\"0110\"\n1\n\"0110\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool hasAllCodes(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean hasAllCodes(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def hasAllCodes(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool hasAllCodes(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool HasAllCodes(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar hasAllCodes = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function hasAllCodes(s: string, k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Boolean\n     */\n    function hasAllCodes($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func hasAllCodes(_ s: String, _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun hasAllCodes(s: String, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool hasAllCodes(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func hasAllCodes(s string, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Boolean}\ndef has_all_codes(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def hasAllCodes(s: String, k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn has_all_codes(s: String, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (has-all-codes s k)\n  (-> string? exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec has_all_codes(S :: unicode:unicode_binary(), K :: integer()) -> boolean().\nhas_all_codes(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec has_all_codes(s :: String.t, k :: integer) :: boolean\n  def has_all_codes(s, k) do\n    \n  end\nend"}}}