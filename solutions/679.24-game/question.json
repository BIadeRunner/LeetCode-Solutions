{"question_id": "679", "problem_slug": "24-game", "problem_title": "24 Game", "content": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\nYou are restricted with the following rules:\n\nThe division operator '/' represents real division, not integer division.\n\n\t\nFor example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\n\n\nEvery operation done is between two numbers. In particular, we cannot use '-' as a unary operator.\n\t\nFor example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed.\n\n\nYou cannot concatenate numbers together\n\t\nFor example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid.\n\n\n\nReturn true if you can get such expression that evaluates to 24, and false otherwise.\n \nExample 1:\n\nInput: cards = [4,1,8,7]\nOutput: true\nExplanation: (8-4) * (7-1) = 24\n\nExample 2:\n\nInput: cards = [1,2,1,2]\nOutput: false\n\n \nConstraints:\n\ncards.length == 4\n1 <= cards[i] <= 9\n\n", "hints": [], "exampleTestcases": "[4,1,8,7]\n[1,2,1,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool judgePoint24(vector<int>& cards) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean judgePoint24(int[] cards) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def judgePoint24(self, cards: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool judgePoint24(int* cards, int cardsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool JudgePoint24(int[] cards) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} cards\n * @return {boolean}\n */\nvar judgePoint24 = function(cards) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function judgePoint24(cards: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $cards\n     * @return Boolean\n     */\n    function judgePoint24($cards) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func judgePoint24(_ cards: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun judgePoint24(cards: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool judgePoint24(List<int> cards) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func judgePoint24(cards []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} cards\n# @return {Boolean}\ndef judge_point24(cards)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def judgePoint24(cards: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn judge_point24(cards: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (judge-point24 cards)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec judge_point24(Cards :: [integer()]) -> boolean().\njudge_point24(Cards) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec judge_point24(cards :: [integer]) :: boolean\n  def judge_point24(cards) do\n    \n  end\nend"}}}