{"question_id": "1995", "problem_slug": "finding-pairs-with-a-certain-sum", "problem_title": "Finding Pairs With a Certain Sum", "content": "You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:\n\nAdd a positive integer to an element of a given index in the array nums2.\nCount the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).\n\nImplement the FindSumPairs class:\n\nFindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2.\nvoid add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.\nint count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.\n\n \nExample 1:\n\nInput\n[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\nOutput\n[null, 8, null, 2, 1, null, null, 11]\n\nExplanation\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]\nfindSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4\n\n \nConstraints:\n\n1 <= nums1.length <= 1000\n1 <= nums2.length <= 105\n1 <= nums1[i] <= 109\n1 <= nums2[i] <= 105\n0 <= index < nums2.length\n1 <= val <= 105\n1 <= tot <= 109\nAt most 1000 calls are made to add and count each.\n\n", "hints": ["The length of nums1 is small in comparison to that of nums2", "If we iterate over elements of nums1 we just need to find the count of tot - element for all elements in nums1"], "exampleTestcases": "[\"FindSumPairs\",\"count\",\"add\",\"count\",\"count\",\"add\",\"add\",\"count\"]\n[[[1,1,2,2,2,3],[1,4,5,2,5,4]],[7],[3,2],[8],[4],[0,1],[1,1],[7]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class FindSumPairs {\npublic:\n    FindSumPairs(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n    \n    void add(int index, int val) {\n        \n    }\n    \n    int count(int tot) {\n        \n    }\n};\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * FindSumPairs* obj = new FindSumPairs(nums1, nums2);\n * obj->add(index,val);\n * int param_2 = obj->count(tot);\n */"}, "Java": {"langSlug": "java", "code": "class FindSumPairs {\n\n    public FindSumPairs(int[] nums1, int[] nums2) {\n        \n    }\n    \n    public void add(int index, int val) {\n        \n    }\n    \n    public int count(int tot) {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * FindSumPairs obj = new FindSumPairs(nums1, nums2);\n * obj.add(index,val);\n * int param_2 = obj.count(tot);\n */"}, "Python": {"langSlug": "python", "code": "class FindSumPairs(object):\n\n    def __init__(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        \"\"\"\n        \n\n    def add(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def count(self, tot):\n        \"\"\"\n        :type tot: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)"}, "Python3": {"langSlug": "python3", "code": "class FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        \n\n    def add(self, index: int, val: int) -> None:\n        \n\n    def count(self, tot: int) -> int:\n        \n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FindSumPairs;\n\n\nFindSumPairs* findSumPairsCreate(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}\n\nvoid findSumPairsAdd(FindSumPairs* obj, int index, int val) {\n    \n}\n\nint findSumPairsCount(FindSumPairs* obj, int tot) {\n    \n}\n\nvoid findSumPairsFree(FindSumPairs* obj) {\n    \n}\n\n/**\n * Your FindSumPairs struct will be instantiated and called as such:\n * FindSumPairs* obj = findSumPairsCreate(nums1, nums1Size, nums2, nums2Size);\n * findSumPairsAdd(obj, index, val);\n \n * int param_2 = findSumPairsCount(obj, tot);\n \n * findSumPairsFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class FindSumPairs {\n\n    public FindSumPairs(int[] nums1, int[] nums2) {\n        \n    }\n    \n    public void Add(int index, int val) {\n        \n    }\n    \n    public int Count(int tot) {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * FindSumPairs obj = new FindSumPairs(nums1, nums2);\n * obj.Add(index,val);\n * int param_2 = obj.Count(tot);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n */\nvar FindSumPairs = function(nums1, nums2) {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nFindSumPairs.prototype.add = function(index, val) {\n    \n};\n\n/** \n * @param {number} tot\n * @return {number}\n */\nFindSumPairs.prototype.count = function(tot) {\n    \n};\n\n/** \n * Your FindSumPairs object will be instantiated and called as such:\n * var obj = new FindSumPairs(nums1, nums2)\n * obj.add(index,val)\n * var param_2 = obj.count(tot)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class FindSumPairs {\n    constructor(nums1: number[], nums2: number[]) {\n        \n    }\n\n    add(index: number, val: number): void {\n        \n    }\n\n    count(tot: number): number {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * var obj = new FindSumPairs(nums1, nums2)\n * obj.add(index,val)\n * var param_2 = obj.count(tot)\n */"}, "PHP": {"langSlug": "php", "code": "class FindSumPairs {\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     */\n    function __construct($nums1, $nums2) {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function add($index, $val) {\n        \n    }\n  \n    /**\n     * @param Integer $tot\n     * @return Integer\n     */\n    function count($tot) {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * $obj = FindSumPairs($nums1, $nums2);\n * $obj->add($index, $val);\n * $ret_2 = $obj->count($tot);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass FindSumPairs {\n\n    init(_ nums1: [Int], _ nums2: [Int]) {\n        \n    }\n    \n    func add(_ index: Int, _ val: Int) {\n        \n    }\n    \n    func count(_ tot: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * let obj = FindSumPairs(nums1, nums2)\n * obj.add(index, val)\n * let ret_2: Int = obj.count(tot)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class FindSumPairs(nums1: IntArray, nums2: IntArray) {\n\n    fun add(index: Int, `val`: Int) {\n        \n    }\n\n    fun count(tot: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * var obj = FindSumPairs(nums1, nums2)\n * obj.add(index,`val`)\n * var param_2 = obj.count(tot)\n */"}, "Dart": {"langSlug": "dart", "code": "class FindSumPairs {\n\n  FindSumPairs(List<int> nums1, List<int> nums2) {\n    \n  }\n  \n  void add(int index, int val) {\n    \n  }\n  \n  int count(int tot) {\n    \n  }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * FindSumPairs obj = FindSumPairs(nums1, nums2);\n * obj.add(index,val);\n * int param2 = obj.count(tot);\n */"}, "Go": {"langSlug": "golang", "code": "type FindSumPairs struct {\n    \n}\n\n\nfunc Constructor(nums1 []int, nums2 []int) FindSumPairs {\n    \n}\n\n\nfunc (this *FindSumPairs) Add(index int, val int)  {\n    \n}\n\n\nfunc (this *FindSumPairs) Count(tot int) int {\n    \n}\n\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * obj := Constructor(nums1, nums2);\n * obj.Add(index,val);\n * param_2 := obj.Count(tot);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class FindSumPairs\n\n=begin\n    :type nums1: Integer[]\n    :type nums2: Integer[]\n=end\n    def initialize(nums1, nums2)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def add(index, val)\n        \n    end\n\n\n=begin\n    :type tot: Integer\n    :rtype: Integer\n=end\n    def count(tot)\n        \n    end\n\n\nend\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs.new(nums1, nums2)\n# obj.add(index, val)\n# param_2 = obj.count(tot)"}, "Scala": {"langSlug": "scala", "code": "class FindSumPairs(_nums1: Array[Int], _nums2: Array[Int]) {\n\n    def add(index: Int, `val`: Int): Unit = {\n        \n    }\n\n    def count(tot: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * val obj = new FindSumPairs(nums1, nums2)\n * obj.add(index,`val`)\n * val param_2 = obj.count(tot)\n */"}, "Rust": {"langSlug": "rust", "code": "struct FindSumPairs {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FindSumPairs {\n\n    fn new(nums1: Vec<i32>, nums2: Vec<i32>) -> Self {\n        \n    }\n    \n    fn add(&self, index: i32, val: i32) {\n        \n    }\n    \n    fn count(&self, tot: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your FindSumPairs object will be instantiated and called as such:\n * let obj = FindSumPairs::new(nums1, nums2);\n * obj.add(index, val);\n * let ret_2: i32 = obj.count(tot);\n */"}, "Racket": {"langSlug": "racket", "code": "(define find-sum-pairs%\n  (class object%\n    (super-new)\n    \n    ; nums1 : (listof exact-integer?)\n    ; nums2 : (listof exact-integer?)\n    (init-field\n      nums1\n      nums2)\n    \n    ; add : exact-integer? exact-integer? -> void?\n    (define/public (add index val)\n      )\n    ; count : exact-integer? -> exact-integer?\n    (define/public (count tot)\n      )))\n\n;; Your find-sum-pairs% object will be instantiated and called as such:\n;; (define obj (new find-sum-pairs% [nums1 nums1] [nums2 nums2]))\n;; (send obj add index val)\n;; (define param_2 (send obj count tot))"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_sum_pairs_init_(Nums1 :: [integer()], Nums2 :: [integer()]) -> any().\nfind_sum_pairs_init_(Nums1, Nums2) ->\n  .\n\n-spec find_sum_pairs_add(Index :: integer(), Val :: integer()) -> any().\nfind_sum_pairs_add(Index, Val) ->\n  .\n\n-spec find_sum_pairs_count(Tot :: integer()) -> integer().\nfind_sum_pairs_count(Tot) ->\n  .\n\n\n%% Your functions will be called as such:\n%% find_sum_pairs_init_(Nums1, Nums2),\n%% find_sum_pairs_add(Index, Val),\n%% Param_2 = find_sum_pairs_count(Tot),\n\n%% find_sum_pairs_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule FindSumPairs do\n  @spec init_(nums1 :: [integer], nums2 :: [integer]) :: any\n  def init_(nums1, nums2) do\n    \n  end\n\n  @spec add(index :: integer, val :: integer) :: any\n  def add(index, val) do\n    \n  end\n\n  @spec count(tot :: integer) :: integer\n  def count(tot) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FindSumPairs.init_(nums1, nums2)\n# FindSumPairs.add(index, val)\n# param_2 = FindSumPairs.count(tot)\n\n# FindSumPairs.init_ will be called before every test case, in which you can do some necessary initializations."}}}