{"question_id": "1090", "problem_slug": "armstrong-number", "problem_title": "Armstrong Number", "content": "Given an integer n, return true if and only if it is an Armstrong number.\nThe k-digit number n is an Armstrong number if and only if the kth power of each digit sums to n.\n \nExample 1:\n\nInput: n = 153\nOutput: true\nExplanation: 153 is a 3-digit number, and 153 = 13 + 53 + 33.\n\nExample 2:\n\nInput: n = 123\nOutput: false\nExplanation: 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.\n\n \nConstraints:\n\n1 <= n <= 108\n\n", "hints": ["Check if the given k-digit number equals the sum of the k-th power of it's digits.", "How to compute the sum of the k-th power of the digits of a number ? Can you divide the number into digits using division and modulus operations ?", "You can find the least significant digit of a number by taking it modulus 10. And you can remove it by dividing the number by 10 (integer division). Once you have a digit, you can raise it to the power of k and add it to the sum."], "exampleTestcases": "153\n123", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isArmstrong(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isArmstrong(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isArmstrong(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isArmstrong(self, n: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isArmstrong(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsArmstrong(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isArmstrong = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isArmstrong(n: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isArmstrong($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isArmstrong(_ n: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isArmstrong(n: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isArmstrong(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isArmstrong(n int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_armstrong(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isArmstrong(n: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_armstrong(n: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-armstrong n)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_armstrong(N :: integer()) -> boolean().\nis_armstrong(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_armstrong(n :: integer) :: boolean\n  def is_armstrong(n) do\n    \n  end\nend"}}}