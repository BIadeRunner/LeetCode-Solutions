{"question_id": "2524", "problem_slug": "largest-positive-integer-that-exists-with-its-negative", "problem_title": "Largest Positive Integer That Exists With Its Negative", "content": "Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.\nReturn the positive integer k. If there is no such integer, return -1.\n \nExample 1:\n\nInput: nums = [-1,2,-3,3]\nOutput: 3\nExplanation: 3 is the only valid k we can find in the array.\n\nExample 2:\n\nInput: nums = [-1,10,6,7,-7,1]\nOutput: 7\nExplanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n\nExample 3:\n\nInput: nums = [-10,8,6,7,-2,-3]\nOutput: -1\nExplanation: There is no a single valid k, we return -1.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n-1000 <= nums[i] <= 1000\nnums[i] != 0\n\n", "hints": ["What data structure can help you to determine if an element exists?", "Would a hash table help?"], "exampleTestcases": "[-1,2,-3,3]\n[-1,10,6,7,-7,1]\n[-10,8,6,7,-2,-3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxK(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findMaxK(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMaxK(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findMaxK(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxK(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxK = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMaxK(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxK($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMaxK(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaxK(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findMaxK(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMaxK(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_k(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMaxK(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_k(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-max-k nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_max_k(Nums :: [integer()]) -> integer().\nfind_max_k(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_max_k(nums :: [integer]) :: integer\n  def find_max_k(nums) do\n    \n  end\nend"}}}