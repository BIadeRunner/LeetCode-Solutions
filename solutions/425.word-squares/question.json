{"question_id": "425", "problem_slug": "word-squares", "problem_title": "Word Squares", "content": "Given an array of unique strings words, return all the word squares you can build from words. The same word from words can be used multiple times. You can return the answer in any order.\nA sequence of strings forms a valid word square if the kth row and column read the same string, where 0 <= k < max(numRows, numColumns).\n\nFor example, the word sequence [\"ball\",\"area\",\"lead\",\"lady\"] forms a word square because each word reads the same both horizontally and vertically.\n\n \nExample 1:\n\nInput: words = [\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\nOutput: [[\"ball\",\"area\",\"lead\",\"lady\"],[\"wall\",\"area\",\"lead\",\"lady\"]]\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\nExample 2:\n\nInput: words = [\"abat\",\"baba\",\"atan\",\"atal\"]\nOutput: [[\"baba\",\"abat\",\"baba\",\"atal\"],[\"baba\",\"abat\",\"baba\",\"atan\"]]\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\n \nConstraints:\n\n1 <= words.length <= 1000\n1 <= words[i].length <= 4\nAll words[i] have the same length.\nwords[i] consists of only lowercase English letters.\nAll words[i] are unique.\n\n", "hints": [], "exampleTestcases": "[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n[\"abat\",\"baba\",\"atan\",\"atal\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> wordSquares(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<String>> wordSquares(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wordSquares(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** wordSquares(char** words, int wordsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> WordSquares(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[][]}\n */\nvar wordSquares = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wordSquares(words: string[]): string[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[][]\n     */\n    function wordSquares($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wordSquares(_ words: [String]) -> [[String]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wordSquares(words: Array<String>): List<List<String>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<String>> wordSquares(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wordSquares(words []string) [][]string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[][]}\ndef word_squares(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wordSquares(words: Array[String]): List[List[String]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn word_squares(words: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (word-squares words)\n  (-> (listof string?) (listof (listof string?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec word_squares(Words :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\nword_squares(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec word_squares(words :: [String.t]) :: [[String.t]]\n  def word_squares(words) do\n    \n  end\nend"}}}