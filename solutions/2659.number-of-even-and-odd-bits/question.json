{"question_id": "2659", "problem_slug": "number-of-even-and-odd-bits", "problem_title": "Number of Even and Odd Bits", "content": "You are given a positive integer n.\nLet even denote the number of even indices in the binary representation of n with value 1.\nLet odd denote the number of odd indices in the binary representation of n with value 1.\nNote that bits are indexed from right to left in the binary representation of a number.\nReturn the array [even, odd].\n \nExample 1:\n\nInput: n = 50\nOutput: [1,2]\nExplanation:\nThe binary representation of 50 is 110010.\nIt contains 1 on indices 1, 4, and 5.\n\nExample 2:\n\nInput: n = 2\nOutput: [0,1]\nExplanation:\nThe binary representation of 2 is 10.\nIt contains 1 only on index 1.\n\n \nConstraints:\n\n1 <= n <= 1000\n\n", "hints": ["Maintain two integer variables, even and odd, to count the number of even and odd indices in the binary representation of integer n.", "Divide n by 2 while n is positive, and if n modulo 2 is 1, add 1 to its corresponding variable."], "exampleTestcases": "50\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> evenOddBit(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] evenOddBit(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def evenOddBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* evenOddBit(int n, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] EvenOddBit(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar evenOddBit = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function evenOddBit(n: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function evenOddBit($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func evenOddBit(_ n: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun evenOddBit(n: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> evenOddBit(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func evenOddBit(n int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef even_odd_bit(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def evenOddBit(n: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn even_odd_bit(n: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (even-odd-bit n)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec even_odd_bit(N :: integer()) -> [integer()].\neven_odd_bit(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec even_odd_bit(n :: integer) :: [integer]\n  def even_odd_bit(n) do\n    \n  end\nend"}}}