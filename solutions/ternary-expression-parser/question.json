{"questionId": "439", "acRate": 61.30780411649649, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "439", "paidOnly": true, "status": "ac", "title": "Ternary Expression Parser", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}], "titleSlug": "ternary-expression-parser", "content": "<p>Given a string <code>expression</code> representing arbitrarily nested ternary expressions, evaluate the expression, and return <em>the result of it</em>.</p>\n\n<p>You can always assume that the given expression is valid and only contains digits, <code>&#39;?&#39;</code>, <code>&#39;:&#39;</code>, <code>&#39;T&#39;</code>, and <code>&#39;F&#39;</code> where <code>&#39;T&#39;</code> is true and <code>&#39;F&#39;</code> is false. All the numbers in the expression are <strong>one-digit</strong> numbers (i.e., in the range <code>[0, 9]</code>).</p>\n\n<p>The conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, <code>&#39;T&#39;</code> or <code>&#39;F&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;T?2:3&quot;\n<strong>Output:</strong> &quot;2&quot;\n<strong>Explanation:</strong> If true, then result is 2; otherwise result is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;F?1:T?4:5&quot;\n<strong>Output:</strong> &quot;4&quot;\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n&quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(F ? 1 : 4)&quot; --&gt; &quot;4&quot;\nor &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(T ? 4 : 5)&quot; --&gt; &quot;4&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;T?T?F:5:3&quot;\n<strong>Output:</strong> &quot;F&quot;\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 3)&quot; --&gt; &quot;F&quot;\n&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 5)&quot; --&gt; &quot;F&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>5 &lt;= expression.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>expression</code> consists of digits, <code>&#39;T&#39;</code>, <code>&#39;F&#39;</code>, <code>&#39;?&#39;</code>, and <code>&#39;:&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that <code>expression</code> is a valid ternary expression and that each number is a <strong>one-digit number</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"T?2:3\"\n\"F?1:T?4:5\"\n\"T?T?F:5:3\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string parseTernary(string expression) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String parseTernary(String expression) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def parseTernary(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def parseTernary(self, expression: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* parseTernary(char* expression) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ParseTernary(string expression) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} expression\n * @return {string}\n */\nvar parseTernary = function(expression) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function parseTernary(expression: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return String\n     */\n    function parseTernary($expression) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func parseTernary(_ expression: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun parseTernary(expression: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String parseTernary(String expression) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func parseTernary(expression string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} expression\n# @return {String}\ndef parse_ternary(expression)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def parseTernary(expression: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn parse_ternary(expression: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (parse-ternary expression)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec parse_ternary(Expression :: unicode:unicode_binary()) -> unicode:unicode_binary().\nparse_ternary(Expression) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec parse_ternary(expression :: String.t) :: String.t\n  def parse_ternary(expression) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "mini-parser", "title": "Mini Parser", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "remove-comments", "title": "Remove Comments", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "parse-lisp-expression", "title": "Parse Lisp Expression", "isPaidOnly": false}]}