{"question_id": "2715", "problem_slug": "k-items-with-the-maximum-sum", "problem_title": "K Items With the Maximum Sum", "content": "There is a bag that consists of items, each item has a number 1, 0, or -1 written on it.\nYou are given four non-negative integers numOnes, numZeros, numNegOnes, and k.\nThe bag initially contains:\n\nnumOnes items with 1s written on them.\nnumZeroes items with 0s written on them.\nnumNegOnes items with -1s written on them.\n\nWe want to pick exactly k items among the available items. Return the maximum possible sum of numbers written on the items.\n \nExample 1:\n\nInput: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\nOutput: 2\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n\nExample 2:\n\nInput: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\nOutput: 3\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n\n \nConstraints:\n\n0 <= numOnes, numZeros, numNegOnes <= 50\n0 <= k <= numOnes + numZeros + numNegOnes\n\n", "hints": ["It is always optimal to take items with the number 1 written on them as much as possible.", "If k > numOnes, after taking all items with the number 1, it is always optimal to take items with the number 0 written on them as much as possible.", "If k > numOnes + numZeroes we are forced to take k - numOnes - numZeroes -1s."], "exampleTestcases": "3\n2\n0\n2\n3\n2\n0\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kItemsWithMaximumSum(self, numOnes, numZeros, numNegOnes, k):\n        \"\"\"\n        :type numOnes: int\n        :type numZeros: int\n        :type numNegOnes: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kItemsWithMaximumSum(self, numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} numOnes\n * @param {number} numZeros\n * @param {number} numNegOnes\n * @param {number} k\n * @return {number}\n */\nvar kItemsWithMaximumSum = function(numOnes, numZeros, numNegOnes, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kItemsWithMaximumSum(numOnes: number, numZeros: number, numNegOnes: number, k: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numOnes\n     * @param Integer $numZeros\n     * @param Integer $numNegOnes\n     * @param Integer $k\n     * @return Integer\n     */\n    function kItemsWithMaximumSum($numOnes, $numZeros, $numNegOnes, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kItemsWithMaximumSum(_ numOnes: Int, _ numZeros: Int, _ numNegOnes: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kItemsWithMaximumSum(numOnes int, numZeros int, numNegOnes int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num_ones\n# @param {Integer} num_zeros\n# @param {Integer} num_neg_ones\n# @param {Integer} k\n# @return {Integer}\ndef k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn k_items_with_maximum_sum(num_ones: i32, num_zeros: i32, num_neg_ones: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (k-items-with-maximum-sum numOnes numZeros numNegOnes k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec k_items_with_maximum_sum(NumOnes :: integer(), NumZeros :: integer(), NumNegOnes :: integer(), K :: integer()) -> integer().\nk_items_with_maximum_sum(NumOnes, NumZeros, NumNegOnes, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec k_items_with_maximum_sum(num_ones :: integer, num_zeros :: integer, num_neg_ones :: integer, k :: integer) :: integer\n  def k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k) do\n    \n  end\nend"}}}