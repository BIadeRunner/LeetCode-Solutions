{"questionId": "2715", "acRate": 62.14355524893641, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2600", "paidOnly": false, "status": "ac", "title": "K Items With the Maximum Sum", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "k-items-with-the-maximum-sum", "content": "<p>There is a bag that consists of items, each item&nbsp;has a number <code>1</code>, <code>0</code>, or <code>-1</code> written on it.</p>\n\n<p>You are given four <strong>non-negative </strong>integers <code>numOnes</code>, <code>numZeros</code>, <code>numNegOnes</code>, and <code>k</code>.</p>\n\n<p>The bag initially contains:</p>\n\n<ul>\n\t<li><code>numOnes</code> items with <code>1</code>s written on them.</li>\n\t<li><code>numZeroes</code> items with <code>0</code>s written on them.</li>\n\t<li><code>numNegOnes</code> items with <code>-1</code>s written on them.</li>\n</ul>\n\n<p>We want to pick exactly <code>k</code> items among the available items. Return <em>the <strong>maximum</strong> possible sum of numbers written on the items</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= numOnes, numZeros, numNegOnes &lt;= 50</code></li>\n\t<li><code>0 &lt;= k &lt;= numOnes + numZeros + numNegOnes</code></li>\n</ul>\n", "hints": ["It is always optimal to take items with the number 1 written on them as much as possible.", "If k > numOnes, after taking all items with the number 1, it is always optimal to take items with the number 0 written on them as much as possible.", "If k > numOnes + numZeroes we are forced to take k - numOnes - numZeroes -1s."], "exampleTestcases": "3\n2\n0\n2\n3\n2\n0\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kItemsWithMaximumSum(self, numOnes, numZeros, numNegOnes, k):\n        \"\"\"\n        :type numOnes: int\n        :type numZeros: int\n        :type numNegOnes: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kItemsWithMaximumSum(self, numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} numOnes\n * @param {number} numZeros\n * @param {number} numNegOnes\n * @param {number} k\n * @return {number}\n */\nvar kItemsWithMaximumSum = function(numOnes, numZeros, numNegOnes, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kItemsWithMaximumSum(numOnes: number, numZeros: number, numNegOnes: number, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numOnes\n     * @param Integer $numZeros\n     * @param Integer $numNegOnes\n     * @param Integer $k\n     * @return Integer\n     */\n    function kItemsWithMaximumSum($numOnes, $numZeros, $numNegOnes, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kItemsWithMaximumSum(_ numOnes: Int, _ numZeros: Int, _ numNegOnes: Int, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func kItemsWithMaximumSum(numOnes int, numZeros int, numNegOnes int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num_ones\n# @param {Integer} num_zeros\n# @param {Integer} num_neg_ones\n# @param {Integer} k\n# @return {Integer}\ndef k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn k_items_with_maximum_sum(num_ones: i32, num_zeros: i32, num_neg_ones: i32, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (k-items-with-maximum-sum numOnes numZeros numNegOnes k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec k_items_with_maximum_sum(NumOnes :: integer(), NumZeros :: integer(), NumNegOnes :: integer(), K :: integer()) -> integer().\nk_items_with_maximum_sum(NumOnes, NumZeros, NumNegOnes, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec k_items_with_maximum_sum(num_ones :: integer, num_zeros :: integer, num_neg_ones :: integer, k :: integer) :: integer\n  def k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-subarray", "title": "Maximum Subarray", "isPaidOnly": false}]}