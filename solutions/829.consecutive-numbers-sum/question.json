{"questionId": "856", "acRate": 41.94609730486524, "difficulty": "Hard", "freqBar": 67.09775852858967, "frontendQuestionId": "829", "paidOnly": false, "status": "ac", "title": "Consecutive Numbers Sum", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "consecutive-numbers-sum", "content": "<p>Given an integer <code>n</code>, return <em>the number of ways you can write </em><code>n</code><em> as the sum of consecutive positive integers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 5 = 2 + 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 9 = 4 + 5 = 2 + 3 + 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 15\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "5\n9\n15", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int consecutiveNumbersSum(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int consecutiveNumbersSum(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def consecutiveNumbersSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int consecutiveNumbersSum(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ConsecutiveNumbersSum(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar consecutiveNumbersSum = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function consecutiveNumbersSum(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function consecutiveNumbersSum($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func consecutiveNumbersSum(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun consecutiveNumbersSum(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int consecutiveNumbersSum(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func consecutiveNumbersSum(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef consecutive_numbers_sum(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def consecutiveNumbersSum(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn consecutive_numbers_sum(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (consecutive-numbers-sum n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec consecutive_numbers_sum(N :: integer()) -> integer().\nconsecutive_numbers_sum(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec consecutive_numbers_sum(n :: integer) :: integer\n  def consecutive_numbers_sum(n) do\n    \n  end\nend"}], "similarQuestionList": []}