{"question_id": "28", "problem_slug": "find-the-index-of-the-first-occurrence-in-a-string", "problem_title": "Find the Index of the First Occurrence in a String", "content": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n \nExample 1:\n\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\nExample 2:\n\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n \nConstraints:\n\n1 <= haystack.length, needle.length <= 104\nhaystack and needle consist of only lowercase English characters.\n\n", "hints": [], "exampleTestcases": "\"sadbutsad\"\n\"sad\"\n\"leetcode\"\n\"leeto\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int strStr(char* haystack, char* needle) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function strStr(haystack: string, needle: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func strStr(haystack string, needle string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"}}}