{"questionId": "973", "acRate": 62.50761570621231, "difficulty": "Hard", "freqBar": 35.08750492706422, "frontendQuestionId": "936", "paidOnly": false, "status": "ac", "title": "Stamping The Sequence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Queue", "id": "VG9waWNUYWdOb2RlOjM0", "slug": "queue"}], "titleSlug": "stamping-the-sequence", "content": "<p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == &#39;?&#39;</code>.</p>\n\n<p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p>\n\n<ul>\n\t<li>For example, if <code>stamp = &quot;abc&quot;</code> and <code>target = &quot;abcba&quot;</code>, then <code>s</code> is <code>&quot;?????&quot;</code> initially. In one turn you can:\n\n\t<ul>\n\t\t<li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>&quot;abc??&quot;</code>,</li>\n\t\t<li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>&quot;?abc?&quot;</code>, or</li>\n\t\t<li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>&quot;??abc&quot;</code>.</li>\n\t</ul>\n\tNote that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li>\n</ul>\n\n<p>We want to convert <code>s</code> to <code>target</code> using <strong>at most</strong> <code>10 * target.length</code> turns.</p>\n\n<p>Return <em>an array of the index of the left-most letter being stamped at each turn</em>. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> Initially s = &quot;?????&quot;.\n- Place stamp at index 0 to get &quot;abc??&quot;.\n- Place stamp at index 2 to get &quot;ababc&quot;.\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>Output:</strong> [3,0,1]\n<strong>Explanation:</strong> Initially s = &quot;???????&quot;.\n- Place stamp at index 3 to get &quot;???abca&quot;.\n- Place stamp at index 0 to get &quot;abcabca&quot;.\n- Place stamp at index 1 to get &quot;aabcaca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"abc\"\n\"ababc\"\n\"abca\"\n\"aabcaca\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> movesToStamp(string stamp, string target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] movesToStamp(String stamp, String target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def movesToStamp(self, stamp, target):\n        \"\"\"\n        :type stamp: str\n        :type target: str\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* movesToStamp(char* stamp, char* target, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MovesToStamp(string stamp, string target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} stamp\n * @param {string} target\n * @return {number[]}\n */\nvar movesToStamp = function(stamp, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function movesToStamp(stamp: string, target: string): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $stamp\n     * @param String $target\n     * @return Integer[]\n     */\n    function movesToStamp($stamp, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func movesToStamp(_ stamp: String, _ target: String) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun movesToStamp(stamp: String, target: String): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> movesToStamp(String stamp, String target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func movesToStamp(stamp string, target string) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} stamp\n# @param {String} target\n# @return {Integer[]}\ndef moves_to_stamp(stamp, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def movesToStamp(stamp: String, target: String): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn moves_to_stamp(stamp: String, target: String) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (moves-to-stamp stamp target)\n  (-> string? string? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec moves_to_stamp(Stamp :: unicode:unicode_binary(), Target :: unicode:unicode_binary()) -> [integer()].\nmoves_to_stamp(Stamp, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec moves_to_stamp(stamp :: String.t, target :: String.t) :: [integer]\n  def moves_to_stamp(stamp, target) do\n    \n  end\nend"}], "similarQuestionList": []}