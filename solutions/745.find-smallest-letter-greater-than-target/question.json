{"question_id": "745", "problem_slug": "find-smallest-letter-greater-than-target", "problem_title": "Find Smallest Letter Greater Than Target", "content": "You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.\nReturn the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.\n \nExample 1:\n\nInput: letters = [\"c\",\"f\",\"j\"], target = \"a\"\nOutput: \"c\"\nExplanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n\nExample 2:\n\nInput: letters = [\"c\",\"f\",\"j\"], target = \"c\"\nOutput: \"f\"\nExplanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n\nExample 3:\n\nInput: letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\nOutput: \"x\"\nExplanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].\n\n \nConstraints:\n\n2 <= letters.length <= 104\nletters[i] is a lowercase English letter.\nletters is sorted in non-decreasing order.\nletters contains at least two different characters.\ntarget is a lowercase English letter.\n\n", "hints": ["Try to find whether each of 26 next letters are in the given string array."], "exampleTestcases": "[\"c\",\"f\",\"j\"]\n\"a\"\n[\"c\",\"f\",\"j\"]\n\"c\"\n[\"x\",\"x\",\"y\",\"y\"]\n\"z\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char nextGreatestLetter(char* letters, int lettersSize, char target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public char NextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nextGreatestLetter(letters: string[], target: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $letters\n     * @param String $target\n     * @return String\n     */\n    function nextGreatestLetter($letters, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nextGreatestLetter(_ letters: [Character], _ target: Character) -> Character {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nextGreatestLetter(letters: CharArray, target: Char): Char {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String nextGreatestLetter(List<String> letters, String target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nextGreatestLetter(letters []byte, target byte) byte {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn next_greatest_letter(letters: Vec<char>, target: char) -> char {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (next-greatest-letter letters target)\n  (-> (listof char?) char? char?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec next_greatest_letter(Letters :: [char()], Target :: char()) -> char().\nnext_greatest_letter(Letters, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec next_greatest_letter(letters :: [char], target :: char) :: char\n  def next_greatest_letter(letters, target) do\n    \n  end\nend"}}}