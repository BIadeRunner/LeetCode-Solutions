{"questionId": "2733", "acRate": 87.21436190325694, "difficulty": "Easy", "freqBar": 49.08885691170408, "frontendQuestionId": "2621", "paidOnly": false, "status": "ac", "title": "Sleep", "topicTags": [], "titleSlug": "sleep", "content": "<p>Given&nbsp;a positive integer <code>millis</code>, write an asynchronous function that sleeps for <code>millis</code>&nbsp;milliseconds. It can resolve any value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> millis = 100\n<strong>Output:</strong> 100\n<strong>Explanation:</strong> It should return a promise that resolves after 100ms.\nlet t = Date.now();\nsleep(100).then(() =&gt; {\n  console.log(Date.now() - t); // 100\n});\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> millis = 200\n<strong>Output:</strong> 200\n<strong>Explanation:</strong> It should return a promise that resolves after 200ms.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= millis &lt;= 1000</code></li>\n</ul>\n", "hints": ["In Javascript, you can execute code after some delay with the setTimeout(fn, sleepTime) function.", "An async function is defined as function which returns a Promise.", "To create a Promise, you can code new Promise((resolve, reject) => {}). When you want the function to return a value, code resolve(value) inside the callback."], "exampleTestcases": "100\n200", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} millis\n * @return {Promise}\n */\nasync function sleep(millis) {\n    \n}\n\n/** \n * let t = Date.now()\n * sleep(100).then(() => console.log(Date.now() - t)) // 100\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "async function sleep(millis: number): Promise<void> {\n    \n}\n\n\n/** \n * let t = Date.now()\n * sleep(100).then(() => console.log(Date.now() - t)) // 100\n */"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "promise-time-limit", "title": "Promise Time Limit", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "promise-pool", "title": "Promise Pool", "isPaidOnly": true}]}