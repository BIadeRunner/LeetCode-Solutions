{"question_id": "751", "problem_slug": "number-of-corner-rectangles", "problem_title": "Number Of Corner Rectangles", "content": "Given an m x n integer matrix grid where each entry is only 0 or 1, return the number of corner rectangles.\nA corner rectangle is four distinct 1's on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1's used must be distinct.\n \nExample 1:\n\n\nInput: grid = [[1,0,0,1,0],[0,0,1,0,1],[0,0,0,1,0],[1,0,1,0,1]]\nOutput: 1\nExplanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].\n\nExample 2:\n\n\nInput: grid = [[1,1,1],[1,1,1],[1,1,1]]\nOutput: 9\nExplanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\n\nExample 3:\n\n\nInput: grid = [[1,1,1,1]]\nOutput: 0\nExplanation: Rectangles must have four distinct corners.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\ngrid[i][j] is either 0 or 1.\nThe number of 1's in the grid is in the range [1, 6000].\n\n", "hints": ["For each pair of 1s in the new row (say at `new_row[i]` and `new_row[j]`), we could create more rectangles where that pair forms the base.  The number of new rectangles is the number of times some previous row had `row[i] = row[j] = 1`."], "exampleTestcases": "[[1,0,0,1,0],[0,0,1,0,1],[0,0,0,1,0],[1,0,1,0,1]]\n[[1,1,1],[1,1,1],[1,1,1]]\n[[1,1,1,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countCornerRectangles(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countCornerRectangles(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countCornerRectangles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countCornerRectangles(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countCornerRectangles(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountCornerRectangles(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar countCornerRectangles = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countCornerRectangles(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function countCornerRectangles($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countCornerRectangles(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countCornerRectangles(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countCornerRectangles(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countCornerRectangles(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef count_corner_rectangles(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countCornerRectangles(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_corner_rectangles(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-corner-rectangles grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_corner_rectangles(Grid :: [[integer()]]) -> integer().\ncount_corner_rectangles(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_corner_rectangles(grid :: [[integer]]) :: integer\n  def count_corner_rectangles(grid) do\n    \n  end\nend"}}}