{"questionId": "2954", "acRate": 38.507990279107446, "difficulty": "Medium", "freqBar": 48.47893407563074, "frontendQuestionId": "2841", "paidOnly": false, "status": "ac", "title": "Maximum Sum of Almost Unique Subarray", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "maximum-sum-of-almost-unique-subarray", "content": "<p>You are given an integer array <code>nums</code> and two positive integers <code>m</code> and <code>k</code>.</p>\n\n<p>Return <em>the <strong>maximum sum</strong> out of all <strong>almost unique</strong> subarrays of length </em><code>k</code><em> of</em> <code>nums</code>. If no such subarray exists, return <code>0</code>.</p>\n\n<p>A subarray of <code>nums</code> is <strong>almost unique</strong> if it contains at least <code>m</code> distinct elements.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,7,3,1,7], m = 3, k = 4\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> There are 3 almost unique subarrays of size <code>k = 4</code>. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,9,9,2,4,5,4], m = 1, k = 3\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1,2,1], m = 3, k = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no subarrays of size <code>k = 3</code> that contain at least <code>m = 3</code> distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= k &lt;= nums.length</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Use a set or map to keep track of the number of distinct elements.", "Use 2-pointers to maintain the size, the number of unique elements, and the sum of all the elements in all subarrays of size k from left to right dynamically.****"], "exampleTestcases": "[2,6,7,3,1,7]\n3\n4\n[5,9,9,2,4,5,4]\n1\n3\n[1,2,1,2,1,2,1]\n3\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxSum(vector<int>& nums, int m, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maxSum(List<Integer> nums, int m, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSum(self, nums, m, k):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSum(self, nums: List[int], m: int, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maxSum(int* nums, int numsSize, int m, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaxSum(IList<int> nums, int m, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @param {number} k\n * @return {number}\n */\nvar maxSum = function(nums, m, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSum(nums: number[], m: number, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSum($nums, $m, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSum(_ nums: [Int], _ m: Int, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSum(nums: List<Int>, m: Int, k: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxSum(List<int> nums, int m, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSum(nums []int, m int, k int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @param {Integer} k\n# @return {Integer}\ndef max_sum(nums, m, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSum(nums: List[Int], m: Int, k: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, m: i32, k: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-sum nums m k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_sum(Nums :: [integer()], M :: integer(), K :: integer()) -> integer().\nmax_sum(Nums, M, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sum(nums :: [integer], m :: integer, k :: integer) :: integer\n  def max_sum(nums, m, k) do\n    \n  end\nend"}], "similarQuestionList": []}