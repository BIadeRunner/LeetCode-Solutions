{"questionId": "2141", "acRate": 48.40780054307579, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1999", "paidOnly": true, "status": "ac", "title": "Smallest Greater Multiple Made of Two Digits", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "smallest-greater-multiple-made-of-two-digits", "content": "<p>Given three integers, <code>k</code>, <code>digit1</code>, and <code>digit2</code>, you want to find the <strong>smallest</strong> integer that is:</p>\n\n<ul>\n\t<li><strong>Larger</strong> than <code>k</code>,</li>\n\t<li>A <strong>multiple</strong> of <code>k</code>, and</li>\n\t<li>Comprised of <strong>only</strong> the digits <code>digit1</code> and/or <code>digit2</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>smallest</strong> such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (</em><code>2<sup>31</sup> - 1</code><em>), return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, digit1 = 0, digit2 = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong>\n20 is the first integer larger than 2, a multiple of 2, and comprised of only the digits 0 and/or 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, digit1 = 4, digit2 = 2\n<strong>Output:</strong> 24\n<strong>Explanation:</strong>\n24 is the first integer larger than 3, a multiple of 3, and comprised of only the digits 4 and/or 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, digit1 = 0, digit2 = 0\n<strong>Output:</strong> -1\n<strong>Explanation:\n</strong>No integer meets the requirements so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= digit1 &lt;= 9</code></li>\n\t<li><code>0 &lt;= digit2 &lt;= 9</code></li>\n</ul>\n", "hints": ["Could you generate all the different numbers comprised of only digit1 and digit2 with the constraints?", "Going from least to greatest, check if the number you generated is greater than k and a multiple of k."], "exampleTestcases": "2\n0\n2\n3\n4\n2\n2\n0\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findInteger(int k, int digit1, int digit2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findInteger(int k, int digit1, int digit2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findInteger(self, k, digit1, digit2):\n        \"\"\"\n        :type k: int\n        :type digit1: int\n        :type digit2: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findInteger(self, k: int, digit1: int, digit2: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findInteger(int k, int digit1, int digit2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindInteger(int k, int digit1, int digit2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number} digit1\n * @param {number} digit2\n * @return {number}\n */\nvar findInteger = function(k, digit1, digit2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findInteger(k: number, digit1: number, digit2: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $digit1\n     * @param Integer $digit2\n     * @return Integer\n     */\n    function findInteger($k, $digit1, $digit2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findInteger(_ k: Int, _ digit1: Int, _ digit2: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findInteger(k: Int, digit1: Int, digit2: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findInteger(int k, int digit1, int digit2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findInteger(k int, digit1 int, digit2 int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} digit1\n# @param {Integer} digit2\n# @return {Integer}\ndef find_integer(k, digit1, digit2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findInteger(k: Int, digit1: Int, digit2: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_integer(k: i32, digit1: i32, digit2: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-integer k digit1 digit2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_integer(K :: integer(), Digit1 :: integer(), Digit2 :: integer()) -> integer().\nfind_integer(K, Digit1, Digit2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_integer(k :: integer, digit1 :: integer, digit2 :: integer) :: integer\n  def find_integer(k, digit1, digit2) do\n    \n  end\nend"}], "similarQuestionList": []}