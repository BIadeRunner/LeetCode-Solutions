{"questionId": "2354", "acRate": 57.652682467544224, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2214", "paidOnly": true, "status": "ac", "title": "Minimum Health to Beat Game", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "minimum-health-to-beat-game", "content": "<p>You are playing a game that has <code>n</code> levels numbered from <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> integer array <code>damage</code> where <code>damage[i]</code> is the amount of health you will lose to complete the <code>i<sup>th</sup></code> level.</p>\n\n<p>You are also given an integer <code>armor</code>. You may use your armor ability <strong>at most once</strong> during the game on <strong>any</strong> level which will protect you from <strong>at most</strong> <code>armor</code> damage.</p>\n\n<p>You must complete the levels in order and your health must be <strong>greater than</strong> <code>0</code> at all times to beat the game.</p>\n\n<p>Return <em>the <strong>minimum</strong> health you need to start with to beat the game.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> damage = [2,7,4,3], armor = 4\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> One optimal way to beat the game starting at 13 health is:\nOn round 1, take 2 damage. You have 13 - 2 = 11 health.\nOn round 2, take 7 damage. You have 11 - 7 = 4 health.\nOn round 3, use your armor to protect you from 4 damage. You have 4 - 0 = 4 health.\nOn round 4, take 3 damage. You have 4 - 3 = 1 health.\nNote that 13 is the minimum health you need to start with to beat the game.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> damage = [2,5,3,4], armor = 7\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> One optimal way to beat the game starting at 10 health is:\nOn round 1, take 2 damage. You have 10 - 2 = 8 health.\nOn round 2, use your armor to protect you from 5 damage. You have 8 - 0 = 8 health.\nOn round 3, take 3 damage. You have 8 - 3 = 5 health.\nOn round 4, take 4 damage. You have 5 - 4 = 1 health.\nNote that 10 is the minimum health you need to start with to beat the game.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> damage = [3,3,3], armor = 0\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> One optimal way to beat the game starting at 10 health is:\nOn round 1, take 3 damage. You have 10 - 3 = 7 health.\nOn round 2, take 3 damage. You have 7 - 3 = 4 health.\nOn round 3, take 3 damage. You have 4 - 3 = 1 health.\nNote that you did not use your armor ability.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == damage.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= damage[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= armor &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["When should you use your armor ability?", "It is always optimal to use your armor ability on the level where you take the most amount of damage."], "exampleTestcases": "[2,7,4,3]\n4\n[2,5,3,4]\n7\n[3,3,3]\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumHealth(vector<int>& damage, int armor) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minimumHealth(int[] damage, int armor) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumHealth(self, damage, armor):\n        \"\"\"\n        :type damage: List[int]\n        :type armor: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minimumHealth(int* damage, int damageSize, int armor) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinimumHealth(int[] damage, int armor) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} damage\n * @param {number} armor\n * @return {number}\n */\nvar minimumHealth = function(damage, armor) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumHealth(damage: number[], armor: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $damage\n     * @param Integer $armor\n     * @return Integer\n     */\n    function minimumHealth($damage, $armor) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumHealth(_ damage: [Int], _ armor: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumHealth(damage: IntArray, armor: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumHealth(List<int> damage, int armor) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumHealth(damage []int, armor int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} damage\n# @param {Integer} armor\n# @return {Integer}\ndef minimum_health(damage, armor)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumHealth(damage: Array[Int], armor: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_health(damage: Vec<i32>, armor: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-health damage armor)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_health(Damage :: [integer()], Armor :: integer()) -> integer().\nminimum_health(Damage, Armor) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_health(damage :: [integer], armor :: integer) :: integer\n  def minimum_health(damage, armor) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "dungeon-game", "title": "Dungeon Game", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "eliminate-maximum-number-of-monsters", "title": "Eliminate Maximum Number of Monsters", "isPaidOnly": false}]}