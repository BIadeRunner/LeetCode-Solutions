{"question_id": "2699", "problem_slug": "count-the-number-of-fair-pairs", "problem_title": "Count the Number of Fair Pairs", "content": "Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.\nA pair (i, j) is fair if:\n\n0 <= i < j < n, and\nlower <= nums[i] + nums[j] <= upper\n\n \nExample 1:\n\nInput: nums = [0,1,7,4,4,5], lower = 3, upper = 6\nOutput: 6\nExplanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n\nExample 2:\n\nInput: nums = [1,7,9,2,5], lower = 11, upper = 11\nOutput: 1\nExplanation: There is a single fair pair: (2,3).\n\n \nConstraints:\n\n1 <= nums.length <= 105\nnums.length == n\n-109 <= nums[i] <= 109\n-109 <= lower <= upper <= 109\n\n", "hints": ["Sort the array in ascending order.", "For each number in the array, keep track of the smallest and largest numbers in the array that can form a fair pair with this number.", "As you move to larger number, both boundaries move down."], "exampleTestcases": "[0,1,7,4,4,5]\n3\n6\n[1,7,9,2,5]\n11\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countFairPairs(vector<int>& nums, int lower, int upper) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countFairPairs(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countFairPairs(int* nums, int numsSize, int lower, int upper){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountFairPairs(int[] nums, int lower, int upper) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar countFairPairs = function(nums, lower, upper) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countFairPairs(nums: number[], lower: number, upper: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function countFairPairs($nums, $lower, $upper) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countFairPairs(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countFairPairs(nums: IntArray, lower: Int, upper: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countFairPairs(List<int> nums, int lower, int upper) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countFairPairs(nums []int, lower int, upper int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_fair_pairs(nums, lower, upper)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countFairPairs(nums: Array[Int], lower: Int, upper: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_fair_pairs(nums: Vec<i32>, lower: i32, upper: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-fair-pairs nums lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_fair_pairs(Nums :: [integer()], Lower :: integer(), Upper :: integer()) -> integer().\ncount_fair_pairs(Nums, Lower, Upper) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_fair_pairs(nums :: [integer], lower :: integer, upper :: integer) :: integer\n  def count_fair_pairs(nums, lower, upper) do\n    \n  end\nend"}}}