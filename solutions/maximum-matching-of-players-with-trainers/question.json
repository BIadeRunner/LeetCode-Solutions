{"questionId": "2497", "acRate": 64.30230904177138, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2410", "paidOnly": false, "status": "ac", "title": "Maximum Matching of Players With Trainers", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "maximum-matching-of-players-with-trainers", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>players</code>, where <code>players[i]</code> represents the <strong>ability</strong> of the <code>i<sup>th</sup></code> player. You are also given a <strong>0-indexed</strong> integer array <code>trainers</code>, where <code>trainers[j]</code> represents the <strong>training capacity </strong>of the <code>j<sup>th</sup></code> trainer.</p>\n\n<p>The <code>i<sup>th</sup></code> player can <strong>match</strong> with the <code>j<sup>th</sup></code> trainer if the player&#39;s ability is <strong>less than or equal to</strong> the trainer&#39;s training capacity. Additionally, the <code>i<sup>th</sup></code> player can be matched with at most one trainer, and the <code>j<sup>th</sup></code> trainer can be matched with at most one player.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of matchings between </em><code>players</code><em> and </em><code>trainers</code><em> that satisfy these conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> players = [4,7,9], trainers = [8,2,5,8]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOne of the ways we can form two matchings is as follows:\n- players[0] can be matched with trainers[0] since 4 &lt;= 8.\n- players[1] can be matched with trainers[3] since 7 &lt;= 8.\nIt can be proven that 2 is the maximum number of matchings that can be formed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> players = [1,1,1], trainers = [10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe trainer can be matched with any of the 3 players.\nEach player can only be matched with one trainer, so the maximum answer is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= players.length, trainers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= players[i], trainers[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as <a href=\"https://leetcode.com/problems/assign-cookies/description/\" target=\"_blank\"> 445: Assign Cookies.</a></p>\n", "hints": ["Sort both the arrays.", "Construct the matching greedily."], "exampleTestcases": "[4,7,9]\n[8,2,5,8]\n[1,1,1]\n[10]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int matchPlayersAndTrainers(vector<int>& players, vector<int>& trainers) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int matchPlayersAndTrainers(int[] players, int[] trainers) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def matchPlayersAndTrainers(self, players, trainers):\n        \"\"\"\n        :type players: List[int]\n        :type trainers: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int matchPlayersAndTrainers(int* players, int playersSize, int* trainers, int trainersSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MatchPlayersAndTrainers(int[] players, int[] trainers) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} players\n * @param {number[]} trainers\n * @return {number}\n */\nvar matchPlayersAndTrainers = function(players, trainers) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function matchPlayersAndTrainers(players: number[], trainers: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $players\n     * @param Integer[] $trainers\n     * @return Integer\n     */\n    function matchPlayersAndTrainers($players, $trainers) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func matchPlayersAndTrainers(_ players: [Int], _ trainers: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun matchPlayersAndTrainers(players: IntArray, trainers: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int matchPlayersAndTrainers(List<int> players, List<int> trainers) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func matchPlayersAndTrainers(players []int, trainers []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} players\n# @param {Integer[]} trainers\n# @return {Integer}\ndef match_players_and_trainers(players, trainers)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def matchPlayersAndTrainers(players: Array[Int], trainers: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn match_players_and_trainers(players: Vec<i32>, trainers: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (match-players-and-trainers players trainers)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec match_players_and_trainers(Players :: [integer()], Trainers :: [integer()]) -> integer().\nmatch_players_and_trainers(Players, Trainers) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec match_players_and_trainers(players :: [integer], trainers :: [integer]) :: integer\n  def match_players_and_trainers(players, trainers) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "most-profit-assigning-work", "title": "Most Profit Assigning Work", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "long-pressed-name", "title": "Long Pressed Name", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "interval-list-intersections", "title": "Interval List Intersections", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "largest-merge-of-two-strings", "title": "Largest Merge Of Two Strings", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "successful-pairs-of-spells-and-potions", "title": "Successful Pairs of Spells and Potions", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximize-greatness-of-an-array", "title": "Maximize Greatness of an Array", "isPaidOnly": false}]}