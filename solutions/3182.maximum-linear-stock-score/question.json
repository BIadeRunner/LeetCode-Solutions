{"question_id": "3182", "problem_slug": "maximum-linear-stock-score", "problem_title": "Maximum Linear Stock Score", "content": "Given a 1-indexed integer array prices, where prices[i] is the price of a particular stock on the ith day, your task is to select some of the elements of prices such that your selection is linear.\nA selection indexes, where indexes is a 1-indexed integer array of length k which is a subsequence of the array [1, 2, ..., n], is linear if:\n\nFor every 1 < j <= k, prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1].\n\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nThe score of a selection indexes, is equal to the sum of the following array: [prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]].\nReturn the maximum score that a linear selection can have.\n \nExample 1:\n\nInput: prices = [1,5,3,7,8]\nOutput: 20\nExplanation: We can select the indexes [2,4,5]. We show that our selection is linear:\nFor j = 2, we have:\nindexes[2] - indexes[1] = 4 - 2 = 2.\nprices[4] - prices[2] = 7 - 5 = 2.\nFor j = 3, we have:\nindexes[3] - indexes[2] = 5 - 4 = 1.\nprices[5] - prices[4] = 8 - 7 = 1.\nThe sum of the elements is: prices[2] + prices[4] + prices[5] = 20.\nIt can be shown that the maximum sum a linear selection can have is 20.\n\nExample 2:\n\nInput: prices = [5,6,7,8,9]\nOutput: 35\nExplanation: We can select all of the indexes [1,2,3,4,5]. Since each element has a difference of exactly 1 from its previous element, our selection is linear.\nThe sum of all the elements is 35 which is the maximum possible some out of every selection.\n \nConstraints:\n\n1 <= prices.length <= 105\n1 <= prices[i] <= 109\n\n", "hints": ["Let's look at the condition as: <code>prices[indexes[i]] - indexes[i] == prices[indexes[j]] - indexes[j]</code>.", "So now we define a new array named <code>group</code> and is constructed as <code>group[i] = prices[i] - i</code>.", "A subarray of <code>prices</code> is linear if they belong to the same group.", "Since all elements are positive, if we choose some index <code>i</code>, the optimum way is to choose all elements from <code>group[i]</code>.", "So for each group, we calculate the sum of its prices and the answer would be the maximum sum over all groups."], "exampleTestcases": "[1,5,3,7,8]\n[5,6,7,8,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<int>& prices) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxScore(int[] prices) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxScore(self, prices: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxScore(int* prices, int pricesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[] prices) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxScore = function(prices) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxScore(prices: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxScore($prices) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxScore(_ prices: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(prices: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxScore(List<int> prices) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxScore(prices []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_score(prices)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxScore(prices: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(prices: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-score prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_score(Prices :: [integer()]) -> integer().\nmax_score(Prices) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(prices :: [integer]) :: integer\n  def max_score(prices) do\n    \n  end\nend"}}}