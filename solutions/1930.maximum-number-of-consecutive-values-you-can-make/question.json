{"question_id": "1930", "problem_slug": "maximum-number-of-consecutive-values-you-can-make", "problem_title": "Maximum Number of Consecutive Values You Can Make", "content": "You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.\nReturn the maximum number of consecutive integer values that you can make with your coins starting from and including 0.\nNote that you may have multiple coins of the same value.\n \nExample 1:\n\nInput: coins = [1,3]\nOutput: 2\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0.\nExample 2:\n\nInput: coins = [1,1,1,4]\nOutput: 8\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0.\nExample 3:\n\nInput: coins = [1,4,10,3,1]\nOutput: 20\n \nConstraints:\n\ncoins.length == n\n1 <= n <= 4 * 104\n1 <= coins[i] <= 4 * 104\n\n", "hints": ["If you can make the first x values and you have a value v, then you can make all the values <var>≤ v + x</var>", "Sort the array of coins. You can always make the value 0 so you can start with x = 0.", "Process the values starting from the smallest and stop when there is a value that cannot be achieved with the current x."], "exampleTestcases": "[1,3]\n[1,1,1,4]\n[1,4,10,3,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int getMaximumConsecutive(vector<int>& coins) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int getMaximumConsecutive(int[] coins) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getMaximumConsecutive(self, coins):\n        \"\"\"\n        :type coins: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getMaximumConsecutive(self, coins: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int getMaximumConsecutive(int* coins, int coinsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int GetMaximumConsecutive(int[] coins) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} coins\n * @return {number}\n */\nvar getMaximumConsecutive = function(coins) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getMaximumConsecutive(coins: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @return Integer\n     */\n    function getMaximumConsecutive($coins) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getMaximumConsecutive(_ coins: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getMaximumConsecutive(coins: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int getMaximumConsecutive(List<int> coins) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getMaximumConsecutive(coins []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} coins\n# @return {Integer}\ndef get_maximum_consecutive(coins)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getMaximumConsecutive(coins: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_maximum_consecutive(coins: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-maximum-consecutive coins)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_maximum_consecutive(Coins :: [integer()]) -> integer().\nget_maximum_consecutive(Coins) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_maximum_consecutive(coins :: [integer]) :: integer\n  def get_maximum_consecutive(coins) do\n    \n  end\nend"}}}