{"question_id": "3002", "problem_slug": "flight-occupancy-and-waitlist-analysis", "problem_title": "Flight Occupancy and Waitlist Analysis", "content": "Table: Flights\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| flight_id   | int  |\n| capacity    | int  |\n+-------------+------+\nflight_id is the column with unique values for this table.\nEach row of this table contains flight id and its capacity.\n\nTable: Passengers\n\n+--------------+------+\n| Column Name  | Type |\n+--------------+------+\n| passenger_id | int  |\n| flight_id    | int  |\n+--------------+------+\npassenger_id is the column with unique values for this table.\nEach row of this table contains passenger id and flight id.\n\nPassengers book tickets for flights in advance. If a passenger books a ticket for a flight and there are still empty seats available on the flight, the passenger ticket will be confirmed. However, the passenger will be on a waitlist if the flight is already at full capacity.\nWrite a solution to report the number of passengers who successfully booked a flight (got a seat) and the number of passengers who are on the waitlist for each flight.\nReturn the result table ordered by flight_id in ascending order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nFlights table:\n+-----------+----------+\n| flight_id | capacity |\n+-----------+----------+\n| 1         | 2        |\n| 2         | 2        |\n| 3         | 1        |\n+-----------+----------+\nPassengers table:\n+--------------+-----------+\n| passenger_id | flight_id |\n+--------------+-----------+\n| 101          | 1         |\n| 102          | 1         |\n| 103          | 1         |\n| 104          | 2         |\n| 105          | 2         |\n| 106          | 3         |\n| 107          | 3         |\n+--------------+-----------+\nOutput: \n+-----------+------------+--------------+\n| flight_id | booked_cnt | waitlist_cnt |\n+-----------+------------+--------------+\n| 1         | 2          | 1            |\n| 2         | 2          | 0            |\n| 3         | 1          | 1            |\n+-----------+------------+--------------+\nExplanation: \n- Flight 1 has a capacity of 2. As there are 3 passengers who have booked tickets, only 2 passengers can get a seat. Therefore, 2 passengers are successfully booked, and 1 passenger is on the waitlist.\n- Flight 2 has a capacity of 2. Since there are exactly 2 passengers who booked tickets, everyone can secure a seat. As a result, 2 passengers successfully booked their seats and there are no passengers on the waitlist.\n- Flight 3 has a capacity of 1. As there are 2 passengers who have booked tickets, only 1 passenger can get a seat. Therefore, 1 passenger is successfully booked, and 1 passenger is on the waitlist.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Flights\":[\"flight_id\",\"capacity\"],\"Passengers\":[\"passenger_id\",\"flight_id\"]},\"rows\":{\"Flights\":[[1,2],[2,2],[3,1]],\"Passengers\":[[101,1],[102,1],[103,1],[104,2],[105,2],[106,3],[107,3]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef waitlist_analysis(flights: pd.DataFrame, passengers: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}