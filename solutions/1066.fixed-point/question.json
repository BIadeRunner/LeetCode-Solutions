{"questionId": "1066", "acRate": 64.11880630630631, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1064", "paidOnly": true, "status": "ac", "title": "Fixed Point", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "fixed-point", "content": "<p>Given an array of distinct integers <code>arr</code>, where <code>arr</code> is sorted in <strong>ascending order</strong>, return the smallest index <code>i</code> that satisfies <code>arr[i] == i</code>. If there is no such index, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-10,-5,0,3,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> For the given array, <code>arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3</code>, thus the output is 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,5,8,17]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> <code>arr[0] = 0</code>, thus the output is 0.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-10,-5,3,4,7,9]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no such <code>i</code> that <code>arr[i] == i</code>, thus the output is -1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt; 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> The <code>O(n)</code> solution is very straightforward. Can we do better?", "hints": ["Loop over the array and check the first index i such A[i] == i"], "exampleTestcases": "[-10,-5,0,3,7]\n[0,2,5,8,17]\n[-10,-5,3,4,7,9]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int fixedPoint(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int fixedPoint(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fixedPoint(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int fixedPoint(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FixedPoint(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar fixedPoint = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fixedPoint(arr: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function fixedPoint($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fixedPoint(_ arr: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fixedPoint(arr: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int fixedPoint(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func fixedPoint(arr []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef fixed_point(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fixedPoint(arr: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fixed_point(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (fixed-point arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec fixed_point(Arr :: [integer()]) -> integer().\nfixed_point(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec fixed_point(arr :: [integer]) :: integer\n  def fixed_point(arr) do\n    \n  end\nend"}], "similarQuestionList": []}