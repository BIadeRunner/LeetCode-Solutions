{"question_id": "1066", "problem_slug": "fixed-point", "problem_title": "Fixed Point", "content": "Given an array of distinct integers arr, where arr is sorted in ascending order, return the smallest index i that satisfies arr[i] == i. If there is no such index, return -1.\n \nExample 1:\n\nInput: arr = [-10,-5,0,3,7]\nOutput: 3\nExplanation: For the given array, arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3, thus the output is 3.\nExample 2:\n\nInput: arr = [0,2,5,8,17]\nOutput: 0\nExplanation: arr[0] = 0, thus the output is 0.\nExample 3:\n\nInput: arr = [-10,-5,3,4,7,9]\nOutput: -1\nExplanation: There is no such i that arr[i] == i, thus the output is -1.\n \nConstraints:\n\n1 <= arr.length < 104\n-109 <= arr[i] <= 109\n\n \nFollow up: The O(n) solution is very straightforward. Can we do better?", "hints": ["Loop over the array and check the first index i such A[i] == i"], "exampleTestcases": "[-10,-5,0,3,7]\n[0,2,5,8,17]\n[-10,-5,3,4,7,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int fixedPoint(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int fixedPoint(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def fixedPoint(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def fixedPoint(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int fixedPoint(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FixedPoint(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar fixedPoint = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function fixedPoint(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function fixedPoint($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func fixedPoint(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun fixedPoint(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int fixedPoint(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func fixedPoint(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef fixed_point(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def fixedPoint(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn fixed_point(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (fixed-point arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec fixed_point(Arr :: [integer()]) -> integer().\nfixed_point(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec fixed_point(arr :: [integer]) :: integer\n  def fixed_point(arr) do\n    \n  end\nend"}}}