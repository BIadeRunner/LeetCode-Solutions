{"question_id": "1102", "problem_slug": "check-if-a-number-is-majority-element-in-a-sorted-array", "problem_title": "Check If a Number Is Majority Element in a Sorted Array", "content": "Given an integer array nums sorted in non-decreasing order and an integer target, return true if target is a majority element, or false otherwise.\nA majority element in an array nums is an element that appears more than nums.length / 2 times in the array.\n \nExample 1:\n\nInput: nums = [2,4,5,5,5,5,5,6,6], target = 5\nOutput: true\nExplanation: The value 5 appears 5 times and the length of the array is 9.\nThus, 5 is a majority element because 5 > 9/2 is true.\n\nExample 2:\n\nInput: nums = [10,100,101,101], target = 101\nOutput: false\nExplanation: The value 101 appears 2 times and the length of the array is 4.\nThus, 101 is not a majority element because 2 > 4/2 is false.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i], target <= 109\nnums is sorted in non-decreasing order.\n\n", "hints": ["How to check if a given number target is a majority element?.", "Find the frequency of target and compare it to the length of the array.", "You can find the frequency of an element using Binary Search since the array is sorted.", "Using Binary Search, find the first and last occurrences of A. Then just calculate the difference between the indexes of these occurrences."], "exampleTestcases": "[2,4,5,5,5,5,5,6,6]\n5\n[10,100,101,101]\n101", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isMajorityElement(vector<int>& nums, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isMajorityElement(int[] nums, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isMajorityElement(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isMajorityElement(self, nums: List[int], target: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isMajorityElement(int* nums, int numsSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsMajorityElement(int[] nums, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar isMajorityElement = function(nums, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isMajorityElement(nums: number[], target: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Boolean\n     */\n    function isMajorityElement($nums, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isMajorityElement(_ nums: [Int], _ target: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isMajorityElement(nums: IntArray, target: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isMajorityElement(List<int> nums, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isMajorityElement(nums []int, target int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Boolean}\ndef is_majority_element(nums, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isMajorityElement(nums: Array[Int], target: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_majority_element(nums: Vec<i32>, target: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-majority-element nums target)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_majority_element(Nums :: [integer()], Target :: integer()) -> boolean().\nis_majority_element(Nums, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_majority_element(nums :: [integer], target :: integer) :: boolean\n  def is_majority_element(nums, target) do\n    \n  end\nend"}}}