{"question_id": "3434", "problem_slug": "find-the-number-of-distinct-colors-among-the-balls", "problem_title": "Find the Number of Distinct Colors Among the Balls", "content": "You are given an integer limit and a 2D array queries of size n x 2.\nThere are limit + 1 balls with distinct labels in the range [0, limit]. Initially, all balls are uncolored. For every query in queries that is of the form [x, y], you mark ball x with the color y. After each query, you need to find the number of distinct colors among the balls.\nReturn an array result of length n, where result[i] denotes the number of distinct colors after ith query.\nNote that when answering a query, lack of a color will not be considered as a color.\n \nExample 1:\n\nInput: limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]\nOutput: [1,2,2,3]\nExplanation:\n\n\nAfter query 0, ball 1 has color 4.\nAfter query 1, ball 1 has color 4, and ball 2 has color 5.\nAfter query 2, ball 1 has color 3, and ball 2 has color 5.\nAfter query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.\n\n\nExample 2:\n\nInput: limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]\nOutput: [1,2,2,3,4]\nExplanation:\n\n\nAfter query 0, ball 0 has color 1.\nAfter query 1, ball 0 has color 1, and ball 1 has color 2.\nAfter query 2, ball 0 has color 1, and balls 1 and 2 have color 2.\nAfter query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.\nAfter query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.\n\n\n \nConstraints:\n\n1 <= limit <= 109\n1 <= n == queries.length <= 105\nqueries[i].length == 2\n0 <= queries[i][0] <= limit\n1 <= queries[i][1] <= 109\n\n", "hints": ["Use two HashMaps to maintain the color of each ball and the set of balls with each color."], "exampleTestcases": "4\n[[1,4],[2,5],[1,3],[3,4]]\n4\n[[0,1],[1,2],[2,2],[3,4],[4,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> queryResults(int limit, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] queryResults(int limit, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def queryResults(self, limit, queries):\n        \"\"\"\n        :type limit: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* queryResults(int limit, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] QueryResults(int limit, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} limit\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar queryResults = function(limit, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function queryResults(limit: number, queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $limit\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function queryResults($limit, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func queryResults(_ limit: Int, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun queryResults(limit: Int, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> queryResults(int limit, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func queryResults(limit int, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} limit\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef query_results(limit, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def queryResults(limit: Int, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn query_results(limit: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (query-results limit queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec query_results(Limit :: integer(), Queries :: [[integer()]]) -> [integer()].\nquery_results(Limit, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec query_results(limit :: integer, queries :: [[integer]]) :: [integer]\n  def query_results(limit, queries) do\n    \n  end\nend"}}}