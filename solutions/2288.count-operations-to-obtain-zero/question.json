{"question_id": "2288", "problem_slug": "count-operations-to-obtain-zero", "problem_title": "Count Operations to Obtain Zero", "content": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\n\nFor example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.\n\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\n \nExample 1:\n\nInput: num1 = 2, num2 = 3\nOutput: 3\nExplanation: \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.\n\nExample 2:\n\nInput: num1 = 10, num2 = 10\nOutput: 1\nExplanation: \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.\n\n \nConstraints:\n\n0 <= num1, num2 <= 105\n\n", "hints": ["Try simulating the process until either of the two integers is zero.", "Count the number of operations done."], "exampleTestcases": "2\n3\n10\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countOperations(int num1, int num2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countOperations(int num1, int num2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countOperations(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countOperations(self, num1: int, num2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countOperations(int num1, int num2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountOperations(int num1, int num2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar countOperations = function(num1, num2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countOperations(num1: number, num2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function countOperations($num1, $num2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countOperations(num1: Int, num2: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countOperations(int num1, int num2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countOperations(num1 int, num2 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef count_operations(num1, num2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countOperations(num1: Int, num2: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_operations(num1: i32, num2: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-operations num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_operations(Num1 :: integer(), Num2 :: integer()) -> integer().\ncount_operations(Num1, Num2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_operations(num1 :: integer, num2 :: integer) :: integer\n  def count_operations(num1, num2) do\n    \n  end\nend"}}}