{"question_id": "2506", "problem_slug": "minimize-maximum-value-in-a-grid", "problem_title": "Minimize Maximum Value in a Grid", "content": "You are given an m x n integer matrix grid containing distinct positive integers.\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\nThe relative order of every two elements that are in the same row or column should stay the same after the replacements.\nThe maximum number in the matrix after the replacements should be as small as possible.\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that grid[r1][c1] > grid[r2][c2] where either r1 == r2 or c1 == c2, then it must be true that grid[r1][c1] > grid[r2][c2] after the replacements.\nFor example, if grid = [[2, 4, 5], [7, 3, 9]] then a good replacement could be either grid = [[1, 2, 3], [2, 1, 4]] or grid = [[1, 2, 3], [3, 1, 4]].\nReturn the resulting matrix. If there are multiple answers, return any of them.\n \nExample 1:\n\n\nInput: grid = [[3,1],[2,5]]\nOutput: [[2,1],[1,2]]\nExplanation: The above diagram shows a valid replacement.\nThe maximum number in the matrix is 2. It can be shown that no smaller value can be obtained.\n\nExample 2:\n\nInput: grid = [[10]]\nOutput: [[1]]\nExplanation: We replace the only number in the matrix with 1.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 1000\n1 <= m * n <= 105\n1 <= grid[i][j] <= 109\ngrid consists of distinct integers.\n\n", "hints": ["Can you think of which element in the grid you should replace first?", "Replace the elements in the matrix from the smallest number to the largest. Replace each element with the smallest possible number so far."], "exampleTestcases": "[[3,1],[2,5]]\n[[10]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> minScore(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[][] minScore(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** minScore(int** grid, int gridSize, int* gridColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[][] MinScore(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar minScore = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minScore(grid: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function minScore($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minScore(_ grid: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minScore(grid: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> minScore(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minScore(grid [][]int) [][]int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer[][]}\ndef min_score(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minScore(grid: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_score(grid: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-score grid)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_score(Grid :: [[integer()]]) -> [[integer()]].\nmin_score(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_score(grid :: [[integer]]) :: [[integer]]\n  def min_score(grid) do\n    \n  end\nend"}}}