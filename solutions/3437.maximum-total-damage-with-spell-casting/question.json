{"question_id": "3437", "problem_slug": "maximum-total-damage-with-spell-casting", "problem_title": "Maximum Total Damage With Spell Casting", "content": "A magician has various spells.\nYou are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.\nIt is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.\nEach spell can be cast only once.\nReturn the maximum possible total damage that a magician can cast.\n \nExample 1:\n\nInput: power = [1,1,3,4]\nOutput: 6\nExplanation:\nThe maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.\n\nExample 2:\n\nInput: power = [7,1,6,6]\nOutput: 13\nExplanation:\nThe maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.\n\n \nConstraints:\n\n1 <= power.length <= 105\n1 <= power[i] <= 109\n\n", "hints": ["If we ever decide to use some spell with power <code>x</code>, then we will use all spells with power <code>x</code>.", "Think of dynamic programming.", "<code>dp[i][j]</code> represents the maximum damage considering up to the <code>i</code>-th unique spell and <code>j</code> represents the number of spells skipped (up to 3 as per constraints)."], "exampleTestcases": "[1,1,3,4]\n[7,1,6,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumTotalDamage(vector<int>& power) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumTotalDamage(int[] power) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumTotalDamage(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumTotalDamage(self, power: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumTotalDamage(int* power, int powerSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumTotalDamage(int[] power) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar maximumTotalDamage = function(power) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumTotalDamage(power: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function maximumTotalDamage($power) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumTotalDamage(_ power: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumTotalDamage(power: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumTotalDamage(List<int> power) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumTotalDamage(power []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} power\n# @return {Integer}\ndef maximum_total_damage(power)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumTotalDamage(power: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_total_damage(power: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-total-damage power)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_total_damage(Power :: [integer()]) -> integer().\nmaximum_total_damage(Power) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_total_damage(power :: [integer]) :: integer\n  def maximum_total_damage(power) do\n    \n  end\nend"}}}