{"question_id": "67", "problem_slug": "add-binary", "problem_title": "Add Binary", "content": "Given two binary strings a and b, return their sum as a binary string.\n \nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\n \nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.\n\n", "hints": [], "exampleTestcases": "\"11\"\n\"1\"\n\"1010\"\n\"1011\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* addBinary(char* a, char* b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function addBinary(a: string, b: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func addBinary(a string, b string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"}}}