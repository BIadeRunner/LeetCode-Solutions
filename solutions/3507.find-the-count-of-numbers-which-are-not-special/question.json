{"question_id": "3507", "problem_slug": "find-the-count-of-numbers-which-are-not-special", "problem_title": "Find the Count of Numbers Which Are Not Special", "content": "You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x.\nA number is called special if it has exactly 2 proper divisors. For example:\n\nThe number 4 is special because it has proper divisors 1 and 2.\nThe number 6 is not special because it has proper divisors 1, 2, and 3.\n\nReturn the count of numbers in the range [l, r] that are not special.\n \nExample 1:\n\nInput: l = 5, r = 7\nOutput: 3\nExplanation:\nThere are no special numbers in the range [5, 7].\n\nExample 2:\n\nInput: l = 4, r = 16\nOutput: 11\nExplanation:\nThe special numbers in the range [4, 16] are 4 and 9.\n\n \nConstraints:\n\n1 <= l <= r <= 109\n\n", "hints": ["A special number must be a square of a prime number.", "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.", "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."], "exampleTestcases": "5\n7\n4\n16", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int nonSpecialCount(int l, int r) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nonSpecialCount(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int nonSpecialCount(int l, int r) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NonSpecialCount(int l, int r) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar nonSpecialCount = function(l, r) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nonSpecialCount(l: number, r: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function nonSpecialCount($l, $r) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nonSpecialCount(_ l: Int, _ r: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nonSpecialCount(l: Int, r: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int nonSpecialCount(int l, int r) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nonSpecialCount(l int, r int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef non_special_count(l, r)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nonSpecialCount(l: Int, r: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn non_special_count(l: i32, r: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (non-special-count l r)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec non_special_count(L :: integer(), R :: integer()) -> integer().\nnon_special_count(L, R) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec non_special_count(l :: integer, r :: integer) :: integer\n  def non_special_count(l, r) do\n    \n  end\nend"}}}