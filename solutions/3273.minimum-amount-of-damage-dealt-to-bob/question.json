{"questionId": "3531", "acRate": 37.85249457700651, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3273", "paidOnly": false, "status": "ac", "title": "Minimum Amount of Damage Dealt to Bob", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "minimum-amount-of-damage-dealt-to-bob", "content": "<p>You are given an integer <code>power</code> and two integer arrays <code>damage</code> and <code>health</code>, both having length <code>n</code>.</p>\n\n<p>Bob has <code>n</code> enemies, where enemy <code>i</code> will deal Bob <code>damage[i]</code> <strong>points</strong> of damage per second while they are <em>alive</em> (i.e. <code>health[i] &gt; 0</code>).</p>\n\n<p>Every second, <strong>after</strong> the enemies deal damage to Bob, he chooses <strong>one</strong> of the enemies that is still <em>alive</em> and deals <code>power</code> points of damage to them.</p>\n\n<p>Determine the <strong>minimum</strong> total amount of damage points that will be dealt to Bob before <strong>all</strong> <code>n</code> enemies are <em>dead</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 4, damage = [1,2,3,4], health = [4,5,6,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">39</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Attack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>10 + 10 = 20</code> points.</li>\n\t<li>Attack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>6 + 6 = 12</code> points.</li>\n\t<li>Attack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>3</code> points.</li>\n\t<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>2 + 2 = 4</code> points.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 1, damage = [1,1,1,1], health = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">20</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Attack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>4</code> points.</li>\n\t<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>3 + 3 = 6</code> points.</li>\n\t<li>Attack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>2 + 2 + 2 = 6</code> points.</li>\n\t<li>Attack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>1 + 1 + 1 + 1 = 4</code> points.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 8, damage = [40], health = [59]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">320</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= power &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= n == damage.length == health.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= damage[i], health[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Can we use sorting here along with a custom comparator?", "For any two enemies <code>i</code> and <code>j</code> with damages <code>damage[i]</code> and <code>damage[j]</code>, and time to take each of them down <code>t<sub>i</sub></code> and <code>t<sub>j</sub></code>, when is it better to choose enemy <code>i</code> over enemy <code>j</code> first?"], "exampleTestcases": "4\n[1,2,3,4]\n[4,5,6,8]\n1\n[1,1,1,1]\n[1,2,3,4]\n8\n[40]\n[59]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minDamage(int power, vector<int>& damage, vector<int>& health) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minDamage(int power, int[] damage, int[] health) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDamage(self, power, damage, health):\n        \"\"\"\n        :type power: int\n        :type damage: List[int]\n        :type health: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDamage(self, power: int, damage: List[int], health: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minDamage(int power, int* damage, int damageSize, int* health, int healthSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinDamage(int power, int[] damage, int[] health) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} power\n * @param {number[]} damage\n * @param {number[]} health\n * @return {number}\n */\nvar minDamage = function(power, damage, health) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDamage(power: number, damage: number[], health: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $power\n     * @param Integer[] $damage\n     * @param Integer[] $health\n     * @return Integer\n     */\n    function minDamage($power, $damage, $health) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDamage(_ power: Int, _ damage: [Int], _ health: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDamage(power: Int, damage: IntArray, health: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minDamage(int power, List<int> damage, List<int> health) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minDamage(power int, damage []int, health []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} power\n# @param {Integer[]} damage\n# @param {Integer[]} health\n# @return {Integer}\ndef min_damage(power, damage, health)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDamage(power: Int, damage: Array[Int], health: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_damage(power: i32, damage: Vec<i32>, health: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-damage power damage health)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_damage(Power :: integer(), Damage :: [integer()], Health :: [integer()]) -> integer().\nmin_damage(Power, Damage, Health) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_damage(power :: integer, damage :: [integer], health :: [integer]) :: integer\n  def min_damage(power, damage, health) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-penalty-for-a-shop", "title": "Minimum Penalty for a Shop", "isPaidOnly": false}]}