{"question_id": "2675", "problem_slug": "find-the-width-of-columns-of-a-grid", "problem_title": "Find the Width of Columns of a Grid", "content": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.\n\nFor example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.\n\nReturn an integer array ans of size n where ans[i] is the width of the ith column.\nThe length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.\n \nExample 1:\n\nInput: grid = [[1],[22],[333]]\nOutput: [3]\nExplanation: In the 0th column, 333 is of length 3.\n\nExample 2:\n\nInput: grid = [[-15,1,3],[15,7,12],[5,6,-2]]\nOutput: [3,1,2]\nExplanation: \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100 \n-109 <= grid[r][c] <= 109\n\n", "hints": ["You can find the length of a number by dividing it by 10 and then rounding it down again and again until this number becomes equal to 0. Add 1 if this number is negative.", "Traverse the matrix column-wise to find the maximum length in each column."], "exampleTestcases": "[[1],[22],[333]]\n[[-15,1,3],[15,7,12],[5,6,-2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findColumnWidth(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findColumnWidth(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findColumnWidth(int** grid, int gridSize, int* gridColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindColumnWidth(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar findColumnWidth = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findColumnWidth(grid: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function findColumnWidth($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findColumnWidth(_ grid: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findColumnWidth(grid: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findColumnWidth(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findColumnWidth(grid [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer[]}\ndef find_column_width(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findColumnWidth(grid: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-column-width grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_column_width(Grid :: [[integer()]]) -> [integer()].\nfind_column_width(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_column_width(grid :: [[integer]]) :: [integer]\n  def find_column_width(grid) do\n    \n  end\nend"}}}