{"question_id": "1513", "problem_slug": "find-all-good-strings", "problem_title": "Find All Good Strings", "content": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.\nA good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.\n \nExample 1:\n\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51 \nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\". \n\nExample 2:\n\nInput: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\nOutput: 0 \nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.\n\nExample 3:\n\nInput: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\nOutput: 2\n\n \nConstraints:\n\ns1.length == n\ns2.length == n\ns1 <= s2\n1 <= n <= 500\n1 <= evil.length <= 50\nAll strings consist of lowercase English letters.\n\n", "hints": ["Use DP with 4 states (pos: Int, posEvil: Int, equalToS1: Bool, equalToS2: Bool) which compute the number of valid strings of size \"pos\" where the maximum common suffix with string \"evil\" has size \"posEvil\". When \"equalToS1\" is \"true\", the current valid string is equal to \"S1\" otherwise it is greater. In a similar way when equalToS2 is \"true\" the current valid string is equal to \"S2\" otherwise it is smaller.", "To update the maximum common suffix with string \"evil\" use KMP preprocessing."], "exampleTestcases": "2\n\"aa\"\n\"da\"\n\"b\"\n8\n\"leetcode\"\n\"leetgoes\"\n\"leet\"\n2\n\"gx\"\n\"gz\"\n\"x\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findGoodStrings(int n, string s1, string s2, string evil) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findGoodStrings(int n, String s1, String s2, String evil) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findGoodStrings(self, n, s1, s2, evil):\n        \"\"\"\n        :type n: int\n        :type s1: str\n        :type s2: str\n        :type evil: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findGoodStrings(int n, char* s1, char* s2, char* evil) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindGoodStrings(int n, string s1, string s2, string evil) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {string} s1\n * @param {string} s2\n * @param {string} evil\n * @return {number}\n */\nvar findGoodStrings = function(n, s1, s2, evil) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findGoodStrings(n: number, s1: string, s2: string, evil: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param String $s1\n     * @param String $s2\n     * @param String $evil\n     * @return Integer\n     */\n    function findGoodStrings($n, $s1, $s2, $evil) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findGoodStrings(_ n: Int, _ s1: String, _ s2: String, _ evil: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findGoodStrings(n: Int, s1: String, s2: String, evil: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findGoodStrings(int n, String s1, String s2, String evil) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findGoodStrings(n int, s1 string, s2 string, evil string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {String} s1\n# @param {String} s2\n# @param {String} evil\n# @return {Integer}\ndef find_good_strings(n, s1, s2, evil)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findGoodStrings(n: Int, s1: String, s2: String, evil: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_good_strings(n: i32, s1: String, s2: String, evil: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-good-strings n s1 s2 evil)\n  (-> exact-integer? string? string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_good_strings(N :: integer(), S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), Evil :: unicode:unicode_binary()) -> integer().\nfind_good_strings(N, S1, S2, Evil) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_good_strings(n :: integer, s1 :: String.t, s2 :: String.t, evil :: String.t) :: integer\n  def find_good_strings(n, s1, s2, evil) do\n    \n  end\nend"}}}