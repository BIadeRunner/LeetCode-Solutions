{"question_id": "3493", "problem_slug": "maximum-number-of-operations-to-move-ones-to-the-end", "problem_title": "Maximum Number of Operations to Move Ones to the End", "content": "You are given a binary string s.\nYou can perform the following operation on the string any number of times:\n\nChoose any index i from the string where i + 1 < s.length such that s[i] == '1' and s[i + 1] == '0'.\nMove the character s[i] to the right until it reaches the end of the string or another '1'. For example, for s = \"010010\", if we choose i = 1, the resulting string will be s = \"000110\".\n\nReturn the maximum number of operations that you can perform.\n \nExample 1:\n\nInput: s = \"1001101\"\nOutput: 4\nExplanation:\nWe can perform the following operations:\n\nChoose index i = 0. The resulting string is s = \"0011101\".\nChoose index i = 4. The resulting string is s = \"0011011\".\nChoose index i = 3. The resulting string is s = \"0010111\".\nChoose index i = 2. The resulting string is s = \"0001111\".\n\n\nExample 2:\n\nInput: s = \"00111\"\nOutput: 0\n\n \nConstraints:\n\n1 <= s.length <= 105\ns[i] is either '0' or '1'.\n\n", "hints": ["It is optimal to perform the operation on the lowest index possible each time.", "Traverse the string from left to right and perform the operation every time it is possible."], "exampleTestcases": "\"1001101\"\n\"00111\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxOperations(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxOperations(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxOperations(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxOperations(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxOperations(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxOperations(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxOperations = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxOperations(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxOperations($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxOperations(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxOperations(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxOperations(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxOperations(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef max_operations(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxOperations(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_operations(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-operations s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_operations(S :: unicode:unicode_binary()) -> integer().\nmax_operations(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_operations(s :: String.t) :: integer\n  def max_operations(s) do\n    \n  end\nend"}}}