{"question_id": "985", "problem_slug": "bag-of-tokens", "problem_title": "Bag of Tokens", "content": "You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] denotes the value of tokeni.\nYour goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):\n\nFace-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.\nFace-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.\n\nReturn the maximum possible score you can achieve after playing any number of tokens.\n \nExample 1:\n\nInput: tokens = [100], power = 50\nOutput: 0\nExplanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).\n\nExample 2:\n\nInput: tokens = [200,100], power = 150\nOutput: 1\nExplanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1.\nThere is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.\n\nExample 3:\n\nInput: tokens = [100,200,300,400], power = 200\nOutput: 2\nExplanation: Play the tokens in this order to get a score of 2:\n\nPlay token0 (100) face-up, reducing power to 100 and increasing score to 1.\nPlay token3 (400) face-down, increasing power to 500 and reducing score to 0.\nPlay token1 (200) face-up, reducing power to 300 and increasing score to 1.\nPlay token2 (300) face-up, reducing power to 0 and increasing score to 2.\n\nThe maximum score achievable is 2.\n\n \nConstraints:\n\n0 <= tokens.length <= 1000\n0 <= tokens[i], power < 104\n\n", "hints": [], "exampleTestcases": "[100]\n50\n[200,100]\n150\n[100,200,300,400]\n200", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int bagOfTokensScore(vector<int>& tokens, int power) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int bagOfTokensScore(int[] tokens, int power) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def bagOfTokensScore(self, tokens, power):\n        \"\"\"\n        :type tokens: List[int]\n        :type power: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int bagOfTokensScore(int* tokens, int tokensSize, int power) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BagOfTokensScore(int[] tokens, int power) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} tokens\n * @param {number} power\n * @return {number}\n */\nvar bagOfTokensScore = function(tokens, power) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function bagOfTokensScore(tokens: number[], power: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $tokens\n     * @param Integer $power\n     * @return Integer\n     */\n    function bagOfTokensScore($tokens, $power) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func bagOfTokensScore(_ tokens: [Int], _ power: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun bagOfTokensScore(tokens: IntArray, power: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int bagOfTokensScore(List<int> tokens, int power) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func bagOfTokensScore(tokens []int, power int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} tokens\n# @param {Integer} power\n# @return {Integer}\ndef bag_of_tokens_score(tokens, power)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def bagOfTokensScore(tokens: Array[Int], power: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn bag_of_tokens_score(tokens: Vec<i32>, power: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (bag-of-tokens-score tokens power)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec bag_of_tokens_score(Tokens :: [integer()], Power :: integer()) -> integer().\nbag_of_tokens_score(Tokens, Power) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec bag_of_tokens_score(tokens :: [integer], power :: integer) :: integer\n  def bag_of_tokens_score(tokens, power) do\n    \n  end\nend"}}}