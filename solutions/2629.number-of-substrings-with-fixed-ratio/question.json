{"question_id": "2629", "problem_slug": "number-of-substrings-with-fixed-ratio", "problem_title": "Number of Substrings With Fixed Ratio", "content": "You are given a binary string s, and two integers num1 and num2. num1 and num2 are coprime numbers.\nA ratio substring is a substring of s where the ratio between the number of 0's and the number of 1's in the substring is exactly num1 : num2.\n\nFor example, if num1 = 2 and num2 = 3, then \"01011\" and \"1110000111\" are ratio substrings, while \"11000\" is not.\n\nReturn the number of non-empty ratio substrings of s.\nNote that:\n\nA substring is a contiguous sequence of characters within a string.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\n\n \nExample 1:\n\nInput: s = \"0110011\", num1 = 1, num2 = 2\nOutput: 4\nExplanation: There exist 4 non-empty ratio substrings.\n- The substring s[0..2]: \"0110011\". It contains one 0 and two 1's. The ratio is 1 : 2.\n- The substring s[1..4]: \"0110011\". It contains one 0 and two 1's. The ratio is 1 : 2.\n- The substring s[4..6]: \"0110011\". It contains one 0 and two 1's. The ratio is 1 : 2.\n- The substring s[1..6]: \"0110011\". It contains two 0's and four 1's. The ratio is 2 : 4 == 1 : 2.\nIt can be shown that there are no more ratio substrings.\n\nExample 2:\n\nInput: s = \"10101\", num1 = 3, num2 = 1\nOutput: 0\nExplanation: There is no ratio substrings of s. We return 0.\n\n \nConstraints:\n\n1 <= s.length <= 105\n1 <= num1, num2 <= s.length\nnum1 and num2 are coprime integers.\n\n", "hints": ["Let Func(i) denote the number of 0’s in the prefix [0…i]. We want to find the number of pairs of indices L and R such that Func(R) - Func(L) : R - L - Func(R) + Func(L) = num1 : num2.", "It is better to simplify the formula.", "Func(R) * (num1 + num2) - R * num1 = Func(L) * (num1 + num2) - L * num1.", "Iterate from left to right and use a hash map to count the number of indices having the same value for the above formula."], "exampleTestcases": "\"0110011\"\n1\n2\n\"10101\"\n3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long fixedRatio(string s, int num1, int num2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long fixedRatio(String s, int num1, int num2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def fixedRatio(self, s, num1, num2):\n        \"\"\"\n        :type s: str\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def fixedRatio(self, s: str, num1: int, num2: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long fixedRatio(char* s, int num1, int num2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long FixedRatio(string s, int num1, int num2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar fixedRatio = function(s, num1, num2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function fixedRatio(s: string, num1: number, num2: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function fixedRatio($s, $num1, $num2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func fixedRatio(_ s: String, _ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun fixedRatio(s: String, num1: Int, num2: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int fixedRatio(String s, int num1, int num2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func fixedRatio(s string, num1 int, num2 int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef fixed_ratio(s, num1, num2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def fixedRatio(s: String, num1: Int, num2: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn fixed_ratio(s: String, num1: i32, num2: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (fixed-ratio s num1 num2)\n  (-> string? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec fixed_ratio(S :: unicode:unicode_binary(), Num1 :: integer(), Num2 :: integer()) -> integer().\nfixed_ratio(S, Num1, Num2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec fixed_ratio(s :: String.t, num1 :: integer, num2 :: integer) :: integer\n  def fixed_ratio(s, num1, num2) do\n    \n  end\nend"}}}