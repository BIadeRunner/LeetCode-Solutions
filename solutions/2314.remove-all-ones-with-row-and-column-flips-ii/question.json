{"question_id": "2314", "problem_slug": "remove-all-ones-with-row-and-column-flips-ii", "problem_title": "Remove All Ones With Row and Column Flips II", "content": "You are given a 0-indexed m x n binary matrix grid.\nIn one operation, you can choose any i and j that meet the following conditions:\n\n0 <= i < m\n0 <= j < n\ngrid[i][j] == 1\n\nand change the values of all cells in row i and column j to zero.\nReturn the minimum number of operations needed to remove all 1's from grid.\n \nExample 1:\n\n\nInput: grid = [[1,1,1],[1,1,1],[0,1,0]]\nOutput: 2\nExplanation:\nIn the first operation, change all cell values of row 1 and column 1 to zero.\nIn the second operation, change all cell values of row 0 and column 0 to zero.\n\nExample 2:\n\n\nInput: grid = [[0,1,0],[1,0,1],[0,1,0]]\nOutput: 2\nExplanation:\nIn the first operation, change all cell values of row 1 and column 0 to zero.\nIn the second operation, change all cell values of row 2 and column 1 to zero.\nNote that we cannot perform an operation using row 1 and column 1 because grid[1][1] != 1.\n\nExample 3:\n\n\nInput: grid = [[0,0],[0,0]]\nOutput: 0\nExplanation:\nThere are no 1's to remove so return 0.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 15\n1 <= m * n <= 15\ngrid[i][j] is either 0 or 1.\n\n", "hints": ["With the given constraints, could a brute force solution pass?", "What would a brute force solution look like?", "We can try every single possibility of choosing to do an operation on a cell with a 1 or choosing to ignore it."], "exampleTestcases": "[[1,1,1],[1,1,1],[0,1,0]]\n[[0,1,0],[1,0,1],[0,1,0]]\n[[0,0],[0,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int removeOnes(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int removeOnes(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def removeOnes(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def removeOnes(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int removeOnes(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int RemoveOnes(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar removeOnes = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function removeOnes(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function removeOnes($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func removeOnes(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun removeOnes(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int removeOnes(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func removeOnes(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef remove_ones(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def removeOnes(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn remove_ones(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (remove-ones grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec remove_ones(Grid :: [[integer()]]) -> integer().\nremove_ones(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec remove_ones(grid :: [[integer]]) :: integer\n  def remove_ones(grid) do\n    \n  end\nend"}}}