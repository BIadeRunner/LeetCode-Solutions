{"questionId": "3413", "acRate": 39.68539212088232, "difficulty": "Medium", "freqBar": 40.58890095271872, "frontendQuestionId": "3175", "paidOnly": false, "status": "ac", "title": "Find The First Player to win K Games in a Row", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "find-the-first-player-to-win-k-games-in-a-row", "content": "<p>A competition consists of <code>n</code> players numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given an integer array <code>skills</code> of size <code>n</code> and a <strong>positive</strong> integer <code>k</code>, where <code>skills[i]</code> is the skill level of player <code>i</code>. All integers in <code>skills</code> are <strong>unique</strong>.</p>\n\n<p>All players are standing in a queue in order from player <code>0</code> to player <code>n - 1</code>.</p>\n\n<p>The competition process is as follows:</p>\n\n<ul>\n\t<li>The first two players in the queue play a game, and the player with the <strong>higher</strong> skill level wins.</li>\n\t<li>After the game, the winner stays at the beginning of the queue, and the loser goes to the end of it.</li>\n</ul>\n\n<p>The winner of the competition is the <strong>first</strong> player who wins <code>k</code> games <strong>in a row</strong>.</p>\n\n<p>Return the initial index of the <em>winning</em> player.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">skills = [4,2,6,3,9], k = 2</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, the queue of players is <code>[0,1,2,3,4]</code>. The following process happens:</p>\n\n<ul>\n\t<li>Players 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is <code>[0,2,3,4,1]</code>.</li>\n\t<li>Players 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is <code>[2,3,4,1,0]</code>.</li>\n\t<li>Players 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is <code>[2,4,1,0,3]</code>.</li>\n</ul>\n\n<p>Player 2 won <code>k = 2</code> games in a row, so the winner is player 2.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">skills = [2,5,4], k = 3</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, the queue of players is <code>[0,1,2]</code>. The following process happens:</p>\n\n<ul>\n\t<li>Players 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is <code>[1,2,0]</code>.</li>\n\t<li>Players 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is <code>[1,0,2]</code>.</li>\n\t<li>Players 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is <code>[1,2,0]</code>.</li>\n</ul>\n\n<p>Player 1 won <code>k = 3</code> games in a row, so the winner is player 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == skills.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= skills[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All integers in <code>skills</code> are unique.</li>\n</ul>\n", "hints": ["Suppose that <code>k \u2265 n</code>, there is exactly one player who can win <code>k</code> games in a row. Who is it?", "In case <code>k < n</code>, you can simulate the competition process described."], "exampleTestcases": "[4,2,6,3,9]\n2\n[2,5,4]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findWinningPlayer(vector<int>& skills, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findWinningPlayer(int[] skills, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findWinningPlayer(self, skills, k):\n        \"\"\"\n        :type skills: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findWinningPlayer(self, skills: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findWinningPlayer(int* skills, int skillsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindWinningPlayer(int[] skills, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} skills\n * @param {number} k\n * @return {number}\n */\nvar findWinningPlayer = function(skills, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findWinningPlayer(skills: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $skills\n     * @param Integer $k\n     * @return Integer\n     */\n    function findWinningPlayer($skills, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findWinningPlayer(_ skills: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findWinningPlayer(skills: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findWinningPlayer(List<int> skills, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findWinningPlayer(skills []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} skills\n# @param {Integer} k\n# @return {Integer}\ndef find_winning_player(skills, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findWinningPlayer(skills: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_winning_player(skills: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-winning-player skills k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_winning_player(Skills :: [integer()], K :: integer()) -> integer().\nfind_winning_player(Skills, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_winning_player(skills :: [integer], k :: integer) :: integer\n  def find_winning_player(skills, k) do\n    \n  end\nend"}], "similarQuestionList": []}