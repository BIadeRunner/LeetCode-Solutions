{"question_id": "2570", "problem_slug": "maximize-total-tastiness-of-purchased-fruits", "problem_title": "Maximize Total Tastiness of Purchased Fruits", "content": "You are given two non-negative integer arrays price and tastiness, both arrays have the same length n. You are also given two non-negative integers maxAmount and maxCoupons.\nFor every integer i in range [0, n - 1]:\n\nprice[i] describes the price of ith fruit.\ntastiness[i] describes the tastiness of ith fruit.\n\nYou want to purchase some fruits such that total tastiness is maximized and the total price does not exceed maxAmount.\nAdditionally, you can use a coupon to purchase fruit for half of its price (rounded down to the closest integer). You can use at most maxCoupons of such coupons.\nReturn the maximum total tastiness that can be purchased.\nNote that:\n\nYou can purchase each fruit at most once.\nYou can use coupons on some fruit at most once.\n\n \nExample 1:\n\nInput: price = [10,20,20], tastiness = [5,8,8], maxAmount = 20, maxCoupons = 1\nOutput: 13\nExplanation: It is possible to make total tastiness 13 in following way:\n- Buy first fruit without coupon, so that total price = 0 + 10 and total tastiness = 0 + 5.\n- Buy second fruit with coupon, so that total price = 10 + 10 and total tastiness = 5 + 8.\n- Do not buy third fruit, so that total price = 20 and total tastiness = 13.\nIt can be proven that 13 is the maximum total tastiness that can be obtained.\n\nExample 2:\n\nInput: price = [10,15,7], tastiness = [5,8,20], maxAmount = 10, maxCoupons = 2\nOutput: 28\nExplanation: It is possible to make total tastiness 20 in following way:\n- Do not buy first fruit, so that total price = 0 and total tastiness = 0.\n- Buy second fruit with coupon, so that total price = 0 + 7 and total tastiness = 0 + 8.\n- Buy third fruit with coupon, so that total price = 7 + 3 and total tastiness = 8 + 20.\nIt can be proven that 28 is the maximum total tastiness that can be obtained.\n\n \nConstraints:\n\nn == price.length == tastiness.length\n1 <= n <= 100\n0 <= price[i], tastiness[i], maxAmount <= 1000\n0 <= maxCoupons <= 5\n\n", "hints": ["We have multiple options within the given budget. Trying all of them will take exponential time. How can we improve that?", "We can use dynamic programming to speed up the algorithm.", "We have three options for each fruit. To skip it, to buy it with a coupon, or to buy it without a coupon."], "exampleTestcases": "[10,20,20]\n[5,8,8]\n20\n1\n[10,15,7]\n[5,8,20]\n10\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxTastiness(vector<int>& price, vector<int>& tastiness, int maxAmount, int maxCoupons) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxTastiness(int[] price, int[] tastiness, int maxAmount, int maxCoupons) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n        \"\"\"\n        :type price: List[int]\n        :type tastiness: List[int]\n        :type maxAmount: int\n        :type maxCoupons: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxTastiness(self, price: List[int], tastiness: List[int], maxAmount: int, maxCoupons: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxTastiness(int* price, int priceSize, int* tastiness, int tastinessSize, int maxAmount, int maxCoupons) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxTastiness(int[] price, int[] tastiness, int maxAmount, int maxCoupons) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} price\n * @param {number[]} tastiness\n * @param {number} maxAmount\n * @param {number} maxCoupons\n * @return {number}\n */\nvar maxTastiness = function(price, tastiness, maxAmount, maxCoupons) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxTastiness(price: number[], tastiness: number[], maxAmount: number, maxCoupons: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $price\n     * @param Integer[] $tastiness\n     * @param Integer $maxAmount\n     * @param Integer $maxCoupons\n     * @return Integer\n     */\n    function maxTastiness($price, $tastiness, $maxAmount, $maxCoupons) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxTastiness(_ price: [Int], _ tastiness: [Int], _ maxAmount: Int, _ maxCoupons: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxTastiness(price: IntArray, tastiness: IntArray, maxAmount: Int, maxCoupons: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxTastiness(List<int> price, List<int> tastiness, int maxAmount, int maxCoupons) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxTastiness(price []int, tastiness []int, maxAmount int, maxCoupons int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} price\n# @param {Integer[]} tastiness\n# @param {Integer} max_amount\n# @param {Integer} max_coupons\n# @return {Integer}\ndef max_tastiness(price, tastiness, max_amount, max_coupons)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxTastiness(price: Array[Int], tastiness: Array[Int], maxAmount: Int, maxCoupons: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_tastiness(price: Vec<i32>, tastiness: Vec<i32>, max_amount: i32, max_coupons: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-tastiness price tastiness maxAmount maxCoupons)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_tastiness(Price :: [integer()], Tastiness :: [integer()], MaxAmount :: integer(), MaxCoupons :: integer()) -> integer().\nmax_tastiness(Price, Tastiness, MaxAmount, MaxCoupons) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_tastiness(price :: [integer], tastiness :: [integer], max_amount :: integer, max_coupons :: integer) :: integer\n  def max_tastiness(price, tastiness, max_amount, max_coupons) do\n    \n  end\nend"}}}