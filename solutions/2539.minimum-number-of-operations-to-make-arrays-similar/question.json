{"question_id": "2539", "problem_slug": "minimum-number-of-operations-to-make-arrays-similar", "problem_title": "Minimum Number of Operations to Make Arrays Similar", "content": "You are given two positive integer arrays nums and target, of the same length.\nIn one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:\n\nset nums[i] = nums[i] + 2 and\nset nums[j] = nums[j] - 2.\n\nTwo arrays are considered to be similar if the frequency of each element is the same.\nReturn the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.\n \nExample 1:\n\nInput: nums = [8,12,6], target = [2,14,10]\nOutput: 2\nExplanation: It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed.\n\nExample 2:\n\nInput: nums = [1,2,5], target = [4,1,3]\nOutput: 1\nExplanation: We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3].\n\nExample 3:\n\nInput: nums = [1,1,1,1,1], target = [1,1,1,1,1]\nOutput: 0\nExplanation: The array nums is already similiar to target.\n\n \nConstraints:\n\nn == nums.length == target.length\n1 <= n <= 105\n1 <= nums[i], target[i] <= 106\nIt is possible to make nums similar to target.\n\n", "hints": ["Solve for even and odd numbers separately.", "Greedily match smallest even element from nums to smallest even element from target, then similarly next smallest element and so on.", "Similarly, match odd elements too."], "exampleTestcases": "[8,12,6]\n[2,14,10]\n[1,2,5]\n[4,1,3]\n[1,1,1,1,1]\n[1,1,1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long makeSimilar(vector<int>& nums, vector<int>& target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long makeSimilar(int[] nums, int[] target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeSimilar(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long makeSimilar(int* nums, int numsSize, int* target, int targetSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MakeSimilar(int[] nums, int[] target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar makeSimilar = function(nums, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeSimilar(nums: number[], target: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $target\n     * @return Integer\n     */\n    function makeSimilar($nums, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeSimilar(_ nums: [Int], _ target: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeSimilar(nums: IntArray, target: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int makeSimilar(List<int> nums, List<int> target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeSimilar(nums []int, target []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} target\n# @return {Integer}\ndef make_similar(nums, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeSimilar(nums: Array[Int], target: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_similar(nums: Vec<i32>, target: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-similar nums target)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_similar(Nums :: [integer()], Target :: [integer()]) -> integer().\nmake_similar(Nums, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_similar(nums :: [integer], target :: [integer]) :: integer\n  def make_similar(nums, target) do\n    \n  end\nend"}}}