{"question_id": "1809", "problem_slug": "sum-of-special-evenly-spaced-elements-in-array", "problem_title": "Sum Of Special Evenly-Spaced Elements In Array", "content": "You are given a 0-indexed integer array nums consisting of n non-negative integers.\nYou are also given an array queries, where queries[i] = [xi, yi]. The answer to the ith query is the sum of all nums[j] where xi <= j < n and (j - xi) is divisible by yi.\nReturn an array answer where answer.length == queries.length and answer[i] is the answer to the ith query modulo 109 + 7.\n \nExample 1:\n\nInput: nums = [0,1,2,3,4,5,6,7], queries = [[0,3],[5,1],[4,2]]\nOutput: [9,18,10]\nExplanation: The answers of the queries are as follows:\n1) The j indices that satisfy this query are 0, 3, and 6. nums[0] + nums[3] + nums[6] = 9\n2) The j indices that satisfy this query are 5, 6, and 7. nums[5] + nums[6] + nums[7] = 18\n3) The j indices that satisfy this query are 4 and 6. nums[4] + nums[6] = 10\n\nExample 2:\n\nInput: nums = [100,200,101,201,102,202,103,203], queries = [[0,7]]\nOutput: [303]\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n0 <= nums[i] <= 109\n1 <= queries.length <= 1.5 * 105\n0 <= xi < n\n1 <= yi <= 5 * 104\n\n", "hints": ["Think if y cannot be small. You can solve a query in O(n/y), so if y is large enough, it won't be a problem.", "If y is small, like less than B, you can preprocess the answers for all such ys in O(n * B), then answer each such query in O(1).", "As you might have already guessed, the optimal value for B is ~sqrt(n)."], "exampleTestcases": "[0,1,2,3,4,5,6,7]\n[[0,3],[5,1],[4,2]]\n[100,200,101,201,102,202,103,203]\n[[0,7]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> solve(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] solve(int[] nums, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def solve(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def solve(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* solve(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] Solve(int[] nums, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar solve = function(nums, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function solve(nums: number[], queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function solve($nums, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func solve(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun solve(nums: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> solve(List<int> nums, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func solve(nums []int, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef solve(nums, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def solve(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn solve(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (solve nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec solve(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nsolve(Nums, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec solve(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def solve(nums, queries) do\n    \n  end\nend"}}}