{"question_id": "1746", "problem_slug": "largest-substring-between-two-equal-characters", "problem_title": "Largest Substring Between Two Equal Characters", "content": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.\nExample 2:\n\nInput: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".\n\nExample 3:\n\nInput: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s.\n\n \nConstraints:\n\n1 <= s.length <= 300\ns contains only lowercase English letters.\n\n", "hints": ["Try saving the first and last position of each character", "Try finding every pair of indexes with equal characters"], "exampleTestcases": "\"aa\"\n\"abca\"\n\"cbzxy\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxLengthBetweenEqualCharacters(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxLengthBetweenEqualCharacters(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxLengthBetweenEqualCharacters(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxLengthBetweenEqualCharacters = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxLengthBetweenEqualCharacters(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxLengthBetweenEqualCharacters($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxLengthBetweenEqualCharacters(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxLengthBetweenEqualCharacters(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxLengthBetweenEqualCharacters(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxLengthBetweenEqualCharacters(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef max_length_between_equal_characters(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxLengthBetweenEqualCharacters(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-length-between-equal-characters s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_length_between_equal_characters(S :: unicode:unicode_binary()) -> integer().\nmax_length_between_equal_characters(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_length_between_equal_characters(s :: String.t) :: integer\n  def max_length_between_equal_characters(s) do\n    \n  end\nend"}}}