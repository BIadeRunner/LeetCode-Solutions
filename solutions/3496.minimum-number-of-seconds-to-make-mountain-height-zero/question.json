{"question_id": "3496", "problem_slug": "minimum-number-of-seconds-to-make-mountain-height-zero", "problem_title": "Minimum Number of Seconds to Make Mountain Height Zero", "content": "You are given an integer mountainHeight denoting the height of a mountain.\nYou are also given an integer array workerTimes representing the work time of workers in seconds.\nThe workers work simultaneously to reduce the height of the mountain. For worker i:\n\nTo decrease the mountain's height by x, it takes workerTimes[i] + workerTimes[i] * 2 + ... + workerTimes[i] * x seconds. For example:\n\n\t\nTo reduce the height of the mountain by 1, it takes workerTimes[i] seconds.\nTo reduce the height of the mountain by 2, it takes workerTimes[i] + workerTimes[i] * 2 seconds, and so on.\n\n\n\nReturn an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.\n \nExample 1:\n\nInput: mountainHeight = 4, workerTimes = [2,1,1]\nOutput: 3\nExplanation:\nOne way the height of the mountain can be reduced to 0 is:\n\nWorker 0 reduces the height by 1, taking workerTimes[0] = 2 seconds.\nWorker 1 reduces the height by 2, taking workerTimes[1] + workerTimes[1] * 2 = 3 seconds.\nWorker 2 reduces the height by 1, taking workerTimes[2] = 1 second.\n\nSince they work simultaneously, the minimum time needed is max(2, 3, 1) = 3 seconds.\n\nExample 2:\n\nInput: mountainHeight = 10, workerTimes = [3,2,2,4]\nOutput: 12\nExplanation:\n\nWorker 0 reduces the height by 2, taking workerTimes[0] + workerTimes[0] * 2 = 9 seconds.\nWorker 1 reduces the height by 3, taking workerTimes[1] + workerTimes[1] * 2 + workerTimes[1] * 3 = 12 seconds.\nWorker 2 reduces the height by 3, taking workerTimes[2] + workerTimes[2] * 2 + workerTimes[2] * 3 = 12 seconds.\nWorker 3 reduces the height by 2, taking workerTimes[3] + workerTimes[3] * 2 = 12 seconds.\n\nThe number of seconds needed is max(9, 12, 12, 12) = 12 seconds.\n\nExample 3:\n\nInput: mountainHeight = 5, workerTimes = [1]\nOutput: 15\nExplanation:\nThere is only one worker in this example, so the answer is workerTimes[0] + workerTimes[0] * 2 + workerTimes[0] * 3 + workerTimes[0] * 4 + workerTimes[0] * 5 = 15.\n\n \nConstraints:\n\n1 <= mountainHeight <= 105\n1 <= workerTimes.length <= 104\n1 <= workerTimes[i] <= 106\n\n", "hints": ["Can we use binary search to solve this problem?", "Do a binary search on the number of seconds to check if it's enough to reduce the mountain height to 0 or less with all workers working simultaneously."], "exampleTestcases": "4\n[2,1,1]\n10\n[3,2,2,4]\n5\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minNumberOfSeconds(int mountainHeight, vector<int>& workerTimes) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minNumberOfSeconds(self, mountainHeight, workerTimes):\n        \"\"\"\n        :type mountainHeight: int\n        :type workerTimes: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minNumberOfSeconds(int mountainHeight, int* workerTimes, int workerTimesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinNumberOfSeconds(int mountainHeight, int[] workerTimes) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} mountainHeight\n * @param {number[]} workerTimes\n * @return {number}\n */\nvar minNumberOfSeconds = function(mountainHeight, workerTimes) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minNumberOfSeconds(mountainHeight: number, workerTimes: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $mountainHeight\n     * @param Integer[] $workerTimes\n     * @return Integer\n     */\n    function minNumberOfSeconds($mountainHeight, $workerTimes) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minNumberOfSeconds(_ mountainHeight: Int, _ workerTimes: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minNumberOfSeconds(mountainHeight: Int, workerTimes: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minNumberOfSeconds(int mountainHeight, List<int> workerTimes) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minNumberOfSeconds(mountainHeight int, workerTimes []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} mountain_height\n# @param {Integer[]} worker_times\n# @return {Integer}\ndef min_number_of_seconds(mountain_height, worker_times)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minNumberOfSeconds(mountainHeight: Int, workerTimes: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_number_of_seconds(mountain_height: i32, worker_times: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-number-of-seconds mountainHeight workerTimes)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_number_of_seconds(MountainHeight :: integer(), WorkerTimes :: [integer()]) -> integer().\nmin_number_of_seconds(MountainHeight, WorkerTimes) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_number_of_seconds(mountain_height :: integer, worker_times :: [integer]) :: integer\n  def min_number_of_seconds(mountain_height, worker_times) do\n    \n  end\nend"}}}