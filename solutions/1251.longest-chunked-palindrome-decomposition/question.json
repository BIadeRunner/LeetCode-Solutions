{"question_id": "1251", "problem_slug": "longest-chunked-palindrome-decomposition", "problem_title": "Longest Chunked Palindrome Decomposition", "content": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\n\nsubtexti is a non-empty string.\nThe concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).\nsubtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).\n\nReturn the largest possible value of k.\n \nExample 1:\n\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n\nExample 2:\n\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n\nExample 3:\n\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\".\n\n \nConstraints:\n\n1 <= text.length <= 1000\ntext consists only of lowercase English characters.\n\n", "hints": ["Using a rolling hash, we can quickly check whether two strings are equal.", "Use that as the basis of a dp."], "exampleTestcases": "\"ghiabcdefhelloadamhelloabcdefghi\"\n\"merchant\"\n\"antaprezatepzapreanta\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestDecomposition(string text) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestDecomposition(String text) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestDecomposition(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestDecomposition(self, text: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestDecomposition(char* text) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestDecomposition(string text) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} text\n * @return {number}\n */\nvar longestDecomposition = function(text) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestDecomposition(text: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $text\n     * @return Integer\n     */\n    function longestDecomposition($text) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestDecomposition(_ text: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestDecomposition(text: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestDecomposition(String text) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestDecomposition(text string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} text\n# @return {Integer}\ndef longest_decomposition(text)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestDecomposition(text: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_decomposition(text: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-decomposition text)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_decomposition(Text :: unicode:unicode_binary()) -> integer().\nlongest_decomposition(Text) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_decomposition(text :: String.t) :: integer\n  def longest_decomposition(text) do\n    \n  end\nend"}}}