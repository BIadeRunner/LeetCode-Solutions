{"questionId": "2073", "acRate": 48.05984104721833, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1956", "paidOnly": true, "status": "ac", "title": "Minimum Time For K Virus Variants to Spread", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "minimum-time-for-k-virus-variants-to-spread", "content": "<p>There are <code>n</code> <strong>unique</strong> virus variants in an infinite 2D grid. You are given a 2D array <code>points</code>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a virus originating at <code>(x<sub>i</sub>, y<sub>i</sub>)</code> on day <code>0</code>. Note that it is possible for <strong>multiple </strong>virus variants to originate at the <strong>same</strong> point.</p>\n\n<p>Every day, each cell infected with a virus variant will spread the virus to <strong>all </strong>neighboring points in the <strong>four</strong> cardinal directions (i.e. up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other.</p>\n\n<p>Given an integer <code>k</code>, return <em>the <strong>minimum integer</strong> number of days for <strong>any</strong> point to contain <strong>at least</strong> </em><code>k</code><em> of the unique virus variants</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/30/case-1.png\" style=\"width: 421px; height: 256px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[6,1]], k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> On day 3, points (3,1) and (4,1) will contain both virus variants. Note that these are not the only points that will contain both virus variants.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/30/case-2.png\" style=\"width: 416px; height: 257px;\" />\n<pre>\n<strong>Input:</strong> points = [[3,3],[1,2],[9,2]], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> On day 2, points (1,3), (2,3), (2,2), and (3,2) will contain the first two viruses. Note that these are not the only points that will contain both virus variants.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/30/case-2.png\" style=\"width: 416px; height: 257px;\" />\n<pre>\n<strong>Input:</strong> points = [[3,3],[1,2],[9,2]], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> On day 4, the point (5,2) will contain all 3 viruses. Note that this is not the only point that will contain all 3 virus variants.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == points.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n\t<li><code>2 &lt;= k &lt;= n</code></li>\n</ul>\n", "hints": ["n is very small, how can we use that?", "What shape is the region when two viruses intersect?"], "exampleTestcases": "[[1,1],[6,1]]\n2\n[[3,3],[1,2],[9,2]]\n2\n[[3,3],[1,2],[9,2]]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDayskVariants(vector<vector<int>>& points, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDayskVariants(int[][] points, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDayskVariants(self, points, k):\n        \"\"\"\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDayskVariants(self, points: List[List[int]], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minDayskVariants(int** points, int pointsSize, int* pointsColSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDayskVariants(int[][] points, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @param {number} k\n * @return {number}\n */\nvar minDayskVariants = function(points, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDayskVariants(points: number[][], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $k\n     * @return Integer\n     */\n    function minDayskVariants($points, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDayskVariants(_ points: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDayskVariants(points: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minDayskVariants(List<List<int>> points, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minDayskVariants(points [][]int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @param {Integer} k\n# @return {Integer}\ndef min_daysk_variants(points, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDayskVariants(points: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_daysk_variants(points: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-daysk-variants points k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_daysk_variants(Points :: [[integer()]], K :: integer()) -> integer().\nmin_daysk_variants(Points, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_daysk_variants(points :: [[integer]], k :: integer) :: integer\n  def min_daysk_variants(points, k) do\n    \n  end\nend"}], "similarQuestionList": []}