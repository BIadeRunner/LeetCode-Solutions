{"questionId": "395", "acRate": 45.1261514574872, "difficulty": "Medium", "freqBar": 71.06753991286453, "frontendQuestionId": "395", "paidOnly": false, "status": "ac", "title": "Longest Substring with At Least K Repeating Characters", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Divide and Conquer", "id": "VG9waWNUYWdOb2RlOjEy", "slug": "divide-and-conquer"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "longest-substring-with-at-least-k-repeating-characters", "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p>\n\n<p data-pm-slice=\"1 1 []\">if no such substring exists, return 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabb&quot;, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbc&quot;, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"aaabb\"\n3\n\"ababbc\"\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestSubstring(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestSubstring(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int longestSubstring(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestSubstring(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar longestSubstring = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestSubstring(s: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function longestSubstring($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestSubstring(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestSubstring(s: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int longestSubstring(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func longestSubstring(s string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef longest_substring(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestSubstring(s: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_substring(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (longest-substring s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec longest_substring(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nlongest_substring(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_substring(s :: String.t, k :: integer) :: integer\n  def longest_substring(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "longest-subsequence-repeated-k-times", "title": "Longest Subsequence Repeated k Times", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-equal-count-substrings", "title": "Number of Equal Count Substrings", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "optimal-partition-of-string", "title": "Optimal Partition of String", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "length-of-longest-subarray-with-at-most-k-frequency", "title": "Length of Longest Subarray With at Most K Frequency", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-longest-special-substring-that-occurs-thrice-ii", "title": "Find Longest Special Substring That Occurs Thrice II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-longest-special-substring-that-occurs-thrice-i", "title": "Find Longest Special Substring That Occurs Thrice I", "isPaidOnly": false}]}