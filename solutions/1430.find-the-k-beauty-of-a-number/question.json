{"question_id": "1430", "problem_slug": "find-the-k-beauty-of-a-number", "problem_title": "Find the K-Beauty of a Number", "content": "The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:\n\nIt has a length of k.\nIt is a divisor of num.\n\nGiven integers num and k, return the k-beauty of num.\nNote:\n\nLeading zeros are allowed.\n0 is not a divisor of any value.\n\nA substring is a contiguous sequence of characters in a string.\n \nExample 1:\n\nInput: num = 240, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"24\" from \"240\": 24 is a divisor of 240.\n- \"40\" from \"240\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2.\n\nExample 2:\n\nInput: num = 430043, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"43\" from \"430043\": 43 is a divisor of 430043.\n- \"30\" from \"430043\": 30 is not a divisor of 430043.\n- \"00\" from \"430043\": 0 is not a divisor of 430043.\n- \"04\" from \"430043\": 4 is not a divisor of 430043.\n- \"43\" from \"430043\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2.\n\n \nConstraints:\n\n1 <= num <= 109\n1 <= k <= num.length (taking num as a string)\n\n", "hints": ["We should check all the substrings of num with a length of k and see if it is a divisor of num.", "We can more easily obtain the substrings by converting num into a string and converting back to an integer to check for divisibility."], "exampleTestcases": "240\n2\n430043\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int divisorSubstrings(int num, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int divisorSubstrings(int num, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def divisorSubstrings(self, num, k):\n        \"\"\"\n        :type num: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int divisorSubstrings(int num, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DivisorSubstrings(int num, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @param {number} k\n * @return {number}\n */\nvar divisorSubstrings = function(num, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function divisorSubstrings(num: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $k\n     * @return Integer\n     */\n    function divisorSubstrings($num, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func divisorSubstrings(_ num: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun divisorSubstrings(num: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int divisorSubstrings(int num, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func divisorSubstrings(num int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @param {Integer} k\n# @return {Integer}\ndef divisor_substrings(num, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def divisorSubstrings(num: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn divisor_substrings(num: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (divisor-substrings num k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec divisor_substrings(Num :: integer(), K :: integer()) -> integer().\ndivisor_substrings(Num, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec divisor_substrings(num :: integer, k :: integer) :: integer\n  def divisor_substrings(num, k) do\n    \n  end\nend"}}}