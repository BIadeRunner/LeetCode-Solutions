{"questionId": "3534", "acRate": 37.02802370892369, "difficulty": "Medium", "freqBar": 37.83107336987063, "frontendQuestionId": "3265", "paidOnly": false, "status": "ac", "title": "Count Almost Equal Pairs I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "count-almost-equal-pairs-i", "content": "<p>You are given an array <code>nums</code> consisting of positive integers.</p>\n\n<p>We call two integers <code>x</code> and <code>y</code> in this problem <strong>almost equal</strong> if both integers can become equal after performing the following operation <strong>at most once</strong>:</p>\n\n<ul>\n\t<li>Choose <strong>either</strong> <code>x</code> or <code>y</code> and swap any two digits within the chosen number.</li>\n</ul>\n\n<p>Return the number of indices <code>i</code> and <code>j</code> in <code>nums</code> where <code>i &lt; j</code> such that <code>nums[i]</code> and <code>nums[j]</code> are <strong>almost equal</strong>.</p>\n\n<p><strong>Note</strong> that it is allowed for an integer to have leading zeros after performing an operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,12,30,17,21]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The almost equal pairs of elements are:</p>\n\n<ul>\n\t<li>3 and 30. By swapping 3 and 0 in 30, you get 3.</li>\n\t<li>12 and 21. By swapping 1 and 2 in 12, you get 21.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every two elements in the array are almost equal.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [123,231]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We cannot swap any two digits of 123 or 231 to reach the other.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Since the constraint on the number of elements is small, you can check all pairs in the array.", "For each pair, perform an operation on one of the elements and check if it becomes equal to the other."], "exampleTestcases": "[3,12,30,17,21]\n[1,1,1,1,1]\n[123,231]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPairs(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPairs(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countPairs(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPairs(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countPairs = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPairs(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countPairs($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPairs(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPairs(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countPairs(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countPairs(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_pairs(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPairs(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_pairs(Nums :: [integer()]) -> integer().\ncount_pairs(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_pairs(nums :: [integer]) :: integer\n  def count_pairs(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "check-if-one-string-swap-can-make-strings-equal", "title": "Check if One String Swap Can Make Strings Equal", "isPaidOnly": false}]}