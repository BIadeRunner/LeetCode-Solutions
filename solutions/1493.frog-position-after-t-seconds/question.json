{"question_id": "1493", "problem_slug": "frog-position-after-t-seconds", "problem_title": "Frog Position After T Seconds", "content": "Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\nReturn the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\n\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666 \nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n\nExample 2:\n\n\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\nOutput: 0.3333333333333333\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. \n\n \nConstraints:\n\n1 <= n <= 100\nedges.length == n - 1\nedges[i].length == 2\n1 <= ai, bi <= n\n1 <= t <= 50\n1 <= target <= n\n\n", "hints": ["Use a variation of DFS with parameters 'curent_vertex' and 'current_time'.", "Update the probability considering to jump to one of the children vertices."], "exampleTestcases": "7\n[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]]\n2\n4\n7\n[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]]\n1\n7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double frogPosition(int n, int[][] edges, int t, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def frogPosition(self, n, edges, t, target):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type t: int\n        :type target: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double frogPosition(int n, int** edges, int edgesSize, int* edgesColSize, int t, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double FrogPosition(int n, int[][] edges, int t, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} t\n * @param {number} target\n * @return {number}\n */\nvar frogPosition = function(n, edges, t, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function frogPosition(n: number, edges: number[][], t: number, target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $t\n     * @param Integer $target\n     * @return Float\n     */\n    function frogPosition($n, $edges, $t, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func frogPosition(_ n: Int, _ edges: [[Int]], _ t: Int, _ target: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun frogPosition(n: Int, edges: Array<IntArray>, t: Int, target: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double frogPosition(int n, List<List<int>> edges, int t, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func frogPosition(n int, edges [][]int, t int, target int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} t\n# @param {Integer} target\n# @return {Float}\ndef frog_position(n, edges, t, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def frogPosition(n: Int, edges: Array[Array[Int]], t: Int, target: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn frog_position(n: i32, edges: Vec<Vec<i32>>, t: i32, target: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (frog-position n edges t target)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec frog_position(N :: integer(), Edges :: [[integer()]], T :: integer(), Target :: integer()) -> float().\nfrog_position(N, Edges, T, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec frog_position(n :: integer, edges :: [[integer]], t :: integer, target :: integer) :: float\n  def frog_position(n, edges, t, target) do\n    \n  end\nend"}}}