{"question_id": "640", "problem_slug": "solve-the-equation", "problem_title": "Solve the Equation", "content": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.\n \nExample 1:\n\nInput: equation = \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\nExample 2:\n\nInput: equation = \"x=x\"\nOutput: \"Infinite solutions\"\n\nExample 3:\n\nInput: equation = \"2x=x\"\nOutput: \"x=0\"\n\n \nConstraints:\n\n3 <= equation.length <= 1000\nequation has exactly one '='.\nequation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.\nThe input is generated that if there is a single solution, it will be an integer.\n\n", "hints": [], "exampleTestcases": "\"x+5-3+x=6+x-2\"\n\"x=x\"\n\"2x=x\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string solveEquation(string equation) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String solveEquation(String equation) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def solveEquation(self, equation):\n        \"\"\"\n        :type equation: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def solveEquation(self, equation: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* solveEquation(char* equation) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SolveEquation(string equation) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} equation\n * @return {string}\n */\nvar solveEquation = function(equation) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function solveEquation(equation: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $equation\n     * @return String\n     */\n    function solveEquation($equation) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func solveEquation(_ equation: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun solveEquation(equation: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String solveEquation(String equation) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func solveEquation(equation string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} equation\n# @return {String}\ndef solve_equation(equation)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def solveEquation(equation: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn solve_equation(equation: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (solve-equation equation)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec solve_equation(Equation :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsolve_equation(Equation) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec solve_equation(equation :: String.t) :: String.t\n  def solve_equation(equation) do\n    \n  end\nend"}}}