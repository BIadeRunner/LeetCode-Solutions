{"question_id": "564", "problem_slug": "find-the-closest-palindrome", "problem_title": "Find the Closest Palindrome", "content": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\nThe closest is defined as the absolute difference minimized between two integers.\n \nExample 1:\n\nInput: n = \"123\"\nOutput: \"121\"\n\nExample 2:\n\nInput: n = \"1\"\nOutput: \"0\"\nExplanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\n\n \nConstraints:\n\n1 <= n.length <= 18\nn consists of only digits.\nn does not have leading zeros.\nn is representing an integer in the range [1, 1018 - 1].\n\n", "hints": ["Will brute force work for this problem? Think of something else.", "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?", "Do we have to consider only left half or right half of the string or both?", "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"], "exampleTestcases": "\"123\"\n\"1\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string nearestPalindromic(string n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String nearestPalindromic(String n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nearestPalindromic(self, n: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* nearestPalindromic(char* n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string NearestPalindromic(string n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} n\n * @return {string}\n */\nvar nearestPalindromic = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nearestPalindromic(n: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $n\n     * @return String\n     */\n    function nearestPalindromic($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nearestPalindromic(_ n: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nearestPalindromic(n: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String nearestPalindromic(String n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nearestPalindromic(n string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} n\n# @return {String}\ndef nearest_palindromic(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nearestPalindromic(n: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn nearest_palindromic(n: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (nearest-palindromic n)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec nearest_palindromic(N :: unicode:unicode_binary()) -> unicode:unicode_binary().\nnearest_palindromic(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec nearest_palindromic(n :: String.t) :: String.t\n  def nearest_palindromic(n) do\n    \n  end\nend"}}}