{"question_id": "358", "problem_slug": "rearrange-string-k-distance-apart", "problem_title": "Rearrange String k Distance Apart", "content": "Given a string s and an integer k, rearrange s such that the same characters are at least distance k from each other. If it is not possible to rearrange the string, return an empty string \"\".\n \nExample 1:\n\nInput: s = \"aabbcc\", k = 3\nOutput: \"abcabc\"\nExplanation: The same letters are at least a distance of 3 from each other.\n\nExample 2:\n\nInput: s = \"aaabc\", k = 3\nOutput: \"\"\nExplanation: It is not possible to rearrange the string.\n\nExample 3:\n\nInput: s = \"aaadbbcc\", k = 2\nOutput: \"abacabcd\"\nExplanation: The same letters are at least a distance of 2 from each other.\n\n \nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of only lowercase English letters.\n0 <= k <= s.length\n\n", "hints": [], "exampleTestcases": "\"aabbcc\"\n3\n\"aaabc\"\n3\n\"aaadbbcc\"\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string rearrangeString(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String rearrangeString(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def rearrangeString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* rearrangeString(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string RearrangeString(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar rearrangeString = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rearrangeString(s: string, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function rearrangeString($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func rearrangeString(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun rearrangeString(s: String, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String rearrangeString(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func rearrangeString(s string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef rearrange_string(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def rearrangeString(s: String, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn rearrange_string(s: String, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (rearrange-string s k)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec rearrange_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nrearrange_string(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec rearrange_string(s :: String.t, k :: integer) :: String.t\n  def rearrange_string(s, k) do\n    \n  end\nend"}}}