{"question_id": "505", "problem_slug": "the-maze-ii", "problem_title": "The Maze II", "content": "There is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\nGiven the m x n maze, the ball's start position and the destination, where start = [startrow, startcol] and destination = [destinationrow, destinationcol], return the shortest distance for the ball to stop at the destination. If the ball cannot stop at destination, return -1.\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\nYou may assume that the borders of the maze are all walls (see examples).\n \nExample 1:\n\n\nInput: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]\nOutput: 12\nExplanation: One possible way is : left -> down -> left -> down -> right -> down -> right.\nThe length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n\nExample 2:\n\n\nInput: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]\nOutput: -1\nExplanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.\n\nExample 3:\n\nInput: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]\nOutput: -1\n\n \nConstraints:\n\nm == maze.length\nn == maze[i].length\n1 <= m, n <= 100\nmaze[i][j] is 0 or 1.\nstart.length == 2\ndestination.length == 2\n0 <= startrow, destinationrow < m\n0 <= startcol, destinationcol < n\nBoth the ball and the destination exist in an empty space, and they will not be in the same position initially.\nThe maze contains at least 2 empty spaces.\n\n", "hints": [], "exampleTestcases": "[[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]]\n[0,4]\n[4,4]\n[[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]]\n[0,4]\n[3,2]\n[[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]]\n[4,3]\n[0,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestDistance(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shortestDistance(int** maze, int mazeSize, int* mazeColSize, int* start, int startSize, int* destination, int destinationSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShortestDistance(int[][] maze, int[] start, int[] destination) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} maze\n * @param {number[]} start\n * @param {number[]} destination\n * @return {number}\n */\nvar shortestDistance = function(maze, start, destination) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestDistance(maze: number[][], start: number[], destination: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $maze\n     * @param Integer[] $start\n     * @param Integer[] $destination\n     * @return Integer\n     */\n    function shortestDistance($maze, $start, $destination) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestDistance(_ maze: [[Int]], _ start: [Int], _ destination: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestDistance(maze: Array<IntArray>, start: IntArray, destination: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shortestDistance(List<List<int>> maze, List<int> start, List<int> destination) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestDistance(maze [][]int, start []int, destination []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} maze\n# @param {Integer[]} start\n# @param {Integer[]} destination\n# @return {Integer}\ndef shortest_distance(maze, start, destination)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestDistance(maze: Array[Array[Int]], start: Array[Int], destination: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_distance(maze: Vec<Vec<i32>>, start: Vec<i32>, destination: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-distance maze start destination)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_distance(Maze :: [[integer()]], Start :: [integer()], Destination :: [integer()]) -> integer().\nshortest_distance(Maze, Start, Destination) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_distance(maze :: [[integer]], start :: [integer], destination :: [integer]) :: integer\n  def shortest_distance(maze, start, destination) do\n    \n  end\nend"}}}