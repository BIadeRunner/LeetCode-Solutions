{"question_id": "2477", "problem_slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "problem_title": "Number of Ways to Reach a Position After Exactly k Steps", "content": "You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.\nGiven a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.\nTwo ways are considered different if the order of the steps made is not exactly the same.\nNote that the number line includes negative integers.\n \nExample 1:\n\nInput: startPos = 1, endPos = 2, k = 3\nOutput: 3\nExplanation: We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -> 2 -> 3 -> 2.\n- 1 -> 2 -> 1 -> 2.\n- 1 -> 0 -> 1 -> 2.\nIt can be proven that no other way is possible, so we return 3.\nExample 2:\n\nInput: startPos = 2, endPos = 5, k = 10\nOutput: 0\nExplanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.\n\n \nConstraints:\n\n1 <= startPos, endPos, k <= 1000\n\n", "hints": ["How many steps to the left and to the right do you need to make exactly?", "Does the order of the steps matter?", "Use combinatorics to find the number of ways to order the steps."], "exampleTestcases": "1\n2\n3\n2\n5\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfWays(int startPos, int endPos, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfWays(int startPos, int endPos, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfWays(self, startPos, endPos, k):\n        \"\"\"\n        :type startPos: int\n        :type endPos: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfWays(int startPos, int endPos, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfWays(int startPos, int endPos, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} startPos\n * @param {number} endPos\n * @param {number} k\n * @return {number}\n */\nvar numberOfWays = function(startPos, endPos, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfWays(startPos: number, endPos: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $startPos\n     * @param Integer $endPos\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfWays($startPos, $endPos, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfWays(_ startPos: Int, _ endPos: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfWays(startPos: Int, endPos: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfWays(int startPos, int endPos, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfWays(startPos int, endPos int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} start_pos\n# @param {Integer} end_pos\n# @param {Integer} k\n# @return {Integer}\ndef number_of_ways(start_pos, end_pos, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfWays(startPos: Int, endPos: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_ways(start_pos: i32, end_pos: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-ways startPos endPos k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_ways(StartPos :: integer(), EndPos :: integer(), K :: integer()) -> integer().\nnumber_of_ways(StartPos, EndPos, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_ways(start_pos :: integer, end_pos :: integer, k :: integer) :: integer\n  def number_of_ways(start_pos, end_pos, k) do\n    \n  end\nend"}}}