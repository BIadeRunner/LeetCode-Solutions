{"questionId": "2242", "acRate": 36.21742671009772, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2098", "paidOnly": true, "status": "ac", "title": "Subsequence of Size K With the Largest Even Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum", "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. Find the <strong>largest even sum</strong> of any subsequence of <code>nums</code> that has a length of <code>k</code>.</p>\n\n<p>Return <em>this sum, or </em><code>-1</code><em> if such a sum does not exist</em>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,1,5,3,1], k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong>\nThe subsequence with the largest possible even sum is [4,5,3]. It has a sum of 4 + 5 + 3 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,6,2], k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong>\nThe subsequence with the largest possible even sum is [4,6,2]. It has a sum of 4 + 6 + 2 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nNo subsequence of nums with length 1 has an even sum.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n", "hints": ["Is the sum of two even numbers even or odd? How about two odd numbers? One odd number and one even number?", "If there is an even number of odd numbers, the sum will be even and vice versa.", "Create an integer array to store all the even numbers in nums and another array to store all the odd numbers in nums. Sort both arrays."], "exampleTestcases": "[4,1,5,3,1]\n3\n[4,6,2]\n3\n[1,3,5]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long largestEvenSum(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long largestEvenSum(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestEvenSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestEvenSum(self, nums: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long largestEvenSum(int* nums, int numsSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long LargestEvenSum(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar largestEvenSum = function(nums, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestEvenSum(nums: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function largestEvenSum($nums, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestEvenSum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestEvenSum(nums: IntArray, k: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int largestEvenSum(List<int> nums, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func largestEvenSum(nums []int, k int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef largest_even_sum(nums, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestEvenSum(nums: Array[Int], k: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_even_sum(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (largest-even-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec largest_even_sum(Nums :: [integer()], K :: integer()) -> integer().\nlargest_even_sum(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_even_sum(nums :: [integer], k :: integer) :: integer\n  def largest_even_sum(nums, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "split-array-largest-sum", "title": "Split Array Largest Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "partition-array-for-maximum-sum", "title": "Partition Array for Maximum Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-sub-arrays-with-odd-sum", "title": "Number of Sub-arrays With Odd Sum", "isPaidOnly": false}]}