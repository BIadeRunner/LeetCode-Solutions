{"question_id": "2317", "problem_slug": "count-collisions-on-a-road", "problem_title": "Count Collisions on a Road", "content": "There are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.\nYou are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed.\nThe number of collisions can be calculated as follows:\n\nWhen two cars moving in opposite directions collide with each other, the number of collisions increases by 2.\nWhen a moving car collides with a stationary car, the number of collisions increases by 1.\n\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\nReturn the total number of collisions that will happen on the road.\n \nExample 1:\n\nInput: directions = \"RLRSLL\"\nOutput: 5\nExplanation:\nThe collisions that will happen on the road are:\n- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.\n- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.\n- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.\n- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.\nThus, the total number of collisions that will happen on the road is 5. \n\nExample 2:\n\nInput: directions = \"LLRR\"\nOutput: 0\nExplanation:\nNo cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.\n \nConstraints:\n\n1 <= directions.length <= 105\ndirections[i] is either 'L', 'R', or 'S'.\n\n", "hints": ["In what circumstances does a moving car not collide with another car?", "If we disregard the moving cars that do not collide with another car, what does each moving car contribute to the answer?", "Will stationary cars contribute towards the answer?"], "exampleTestcases": "\"RLRSLL\"\n\"LLRR\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countCollisions(string directions) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countCollisions(String directions) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countCollisions(self, directions):\n        \"\"\"\n        :type directions: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countCollisions(self, directions: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countCollisions(char* directions) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountCollisions(string directions) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} directions\n * @return {number}\n */\nvar countCollisions = function(directions) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countCollisions(directions: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $directions\n     * @return Integer\n     */\n    function countCollisions($directions) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countCollisions(_ directions: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countCollisions(directions: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countCollisions(String directions) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countCollisions(directions string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} directions\n# @return {Integer}\ndef count_collisions(directions)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countCollisions(directions: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_collisions(directions: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-collisions directions)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_collisions(Directions :: unicode:unicode_binary()) -> integer().\ncount_collisions(Directions) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_collisions(directions :: String.t) :: integer\n  def count_collisions(directions) do\n    \n  end\nend"}}}