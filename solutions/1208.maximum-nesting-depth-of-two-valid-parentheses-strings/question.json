{"question_id": "1208", "problem_slug": "maximum-nesting-depth-of-two-valid-parentheses-strings", "problem_title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "content": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:\n\nIt is the empty string, or\nIt can be written as AB (A concatenated with B), where A and B are VPS's, or\nIt can be written as (A), where A is a VPS.\n\nWe can similarly define the nesting depth depth(S) of any VPS S as follows:\n\ndepth(\"\") = 0\ndepth(A + B) = max(depth(A), depth(B)), where A and B are VPS's\ndepth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS.\n\nFor example,  \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\n \nGiven a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).\nNow choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.\n \nExample 1:\n\nInput: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]\n\nExample 2:\n\nInput: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]\n\n \nConstraints:\n\n1 <= seq.size <= 10000\n\n", "hints": [], "exampleTestcases": "\"(()())\"\n\"()(())()\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxDepthAfterSplit(string seq) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] maxDepthAfterSplit(String seq) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxDepthAfterSplit(self, seq):\n        \"\"\"\n        :type seq: str\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxDepthAfterSplit(self, seq: str) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxDepthAfterSplit(char* seq, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxDepthAfterSplit(string seq) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} seq\n * @return {number[]}\n */\nvar maxDepthAfterSplit = function(seq) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxDepthAfterSplit(seq: string): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $seq\n     * @return Integer[]\n     */\n    function maxDepthAfterSplit($seq) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxDepthAfterSplit(_ seq: String) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxDepthAfterSplit(seq: String): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> maxDepthAfterSplit(String seq) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxDepthAfterSplit(seq string) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} seq\n# @return {Integer[]}\ndef max_depth_after_split(seq)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxDepthAfterSplit(seq: String): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_depth_after_split(seq: String) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-depth-after-split seq)\n  (-> string? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_depth_after_split(Seq :: unicode:unicode_binary()) -> [integer()].\nmax_depth_after_split(Seq) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_depth_after_split(seq :: String.t) :: [integer]\n  def max_depth_after_split(seq) do\n    \n  end\nend"}}}