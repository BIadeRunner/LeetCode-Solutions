{"questionId": "1208", "acRate": 72.09965137287834, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1111", "paidOnly": false, "status": "ac", "title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}], "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings", "content": "<p>A string is a <em>valid parentheses string</em>&nbsp;(denoted VPS) if and only if it consists of <code>&quot;(&quot;</code> and <code>&quot;)&quot;</code> characters only, and:</p>\r\n\r\n<ul>\r\n\t<li>It is the empty string, or</li>\r\n\t<li>It can be written as&nbsp;<code>AB</code>&nbsp;(<code>A</code>&nbsp;concatenated with&nbsp;<code>B</code>), where&nbsp;<code>A</code>&nbsp;and&nbsp;<code>B</code>&nbsp;are VPS&#39;s, or</li>\r\n\t<li>It can be written as&nbsp;<code>(A)</code>, where&nbsp;<code>A</code>&nbsp;is a VPS.</li>\r\n</ul>\r\n\r\n<p>We can&nbsp;similarly define the <em>nesting depth</em> <code>depth(S)</code> of any VPS <code>S</code> as follows:</p>\r\n\r\n<ul>\r\n\t<li><code>depth(&quot;&quot;) = 0</code></li>\r\n\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS&#39;s</li>\r\n\t<li><code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>, where <code>A</code> is a VPS.</li>\r\n</ul>\r\n\r\n<p>For example,&nbsp; <code>&quot;&quot;</code>,&nbsp;<code>&quot;()()&quot;</code>, and&nbsp;<code>&quot;()(()())&quot;</code>&nbsp;are VPS&#39;s (with nesting depths 0, 1, and 2), and <code>&quot;)(&quot;</code> and <code>&quot;(()&quot;</code> are not VPS&#39;s.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a VPS <font face=\"monospace\">seq</font>, split it into two disjoint subsequences <code>A</code> and <code>B</code>, such that&nbsp;<code>A</code> and <code>B</code> are VPS&#39;s (and&nbsp;<code>A.length + B.length = seq.length</code>).</p>\r\n\r\n<p>Now choose <strong>any</strong> such <code>A</code> and <code>B</code> such that&nbsp;<code>max(depth(A), depth(B))</code> is the minimum possible value.</p>\r\n\r\n<p>Return an <code>answer</code> array (of length <code>seq.length</code>) that encodes such a&nbsp;choice of <code>A</code> and <code>B</code>:&nbsp; <code>answer[i] = 0</code> if <code>seq[i]</code> is part of <code>A</code>, else <code>answer[i] = 1</code>.&nbsp; Note that even though multiple answers may exist, you may return any of them.</p>\r\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> seq = &quot;(()())&quot;\n<strong>Output:</strong> [0,1,1,1,1,0]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seq = &quot;()(())()&quot;\n<strong>Output:</strong> [0,0,0,1,1,0,1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= seq.size &lt;= 10000</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"(()())\"\n\"()(())()\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxDepthAfterSplit(string seq) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxDepthAfterSplit(String seq) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxDepthAfterSplit(self, seq):\n        \"\"\"\n        :type seq: str\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxDepthAfterSplit(self, seq: str) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxDepthAfterSplit(char* seq, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxDepthAfterSplit(string seq) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} seq\n * @return {number[]}\n */\nvar maxDepthAfterSplit = function(seq) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxDepthAfterSplit(seq: string): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $seq\n     * @return Integer[]\n     */\n    function maxDepthAfterSplit($seq) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxDepthAfterSplit(_ seq: String) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxDepthAfterSplit(seq: String): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> maxDepthAfterSplit(String seq) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxDepthAfterSplit(seq string) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} seq\n# @return {Integer[]}\ndef max_depth_after_split(seq)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxDepthAfterSplit(seq: String): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_depth_after_split(seq: String) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-depth-after-split seq)\n  (-> string? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_depth_after_split(Seq :: unicode:unicode_binary()) -> [integer()].\nmax_depth_after_split(Seq) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_depth_after_split(seq :: String.t) :: [integer]\n  def max_depth_after_split(seq) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "maximum-nesting-depth-of-the-parentheses", "title": "Maximum Nesting Depth of the Parentheses", "isPaidOnly": false}]}