{"question_id": "2925", "problem_slug": "inversion-of-object", "problem_title": "Inversion of Object", "content": "Given an object or an array obj, return an inverted object or array invertedObj.\nThe invertedObj should have the keys of obj as values and the values of obj as keys. The indices of array should be treated as keys.\nThe function should handle duplicates, meaning that if there are multiple keys in obj with the same value, the invertedObj should map the value to an array containing all corresponding keys.\nIt is guaranteed that the values in obj are only strings.\n \nExample 1:\n\nInput: obj = {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\", \"d\": \"4\"}\nOutput: invertedObj = {\"1\": \"a\", \"2\": \"b\", \"3\": \"c\", \"4\": \"d\"}\nExplanation: The keys from obj become the values in invertedObj, and the values from obj become the keys in invertedObj.\n\nExample 2:\n\nInput: obj = {\"a\": \"1\", \"b\": \"2\", \"c\": \"2\", \"d\": \"4\"}\nOutput: invertedObj = {\"1\": \"a\", \"2\": [\"b\", \"c\"], \"4\": \"d\"}\nExplanation: There are two keys in obj with the same value, the invertedObj mapped the value to an array containing all corresponding keys.\nExample 3:\n\nInput: obj = [\"1\", \"2\", \"3\", \"4\"]\nOutput: invertedObj = {\"1\": \"0\", \"2\": \"1\", \"3\": \"2\", \"4\": \"3\"}\nExplanation: Arrays are also objects therefore array has changed to an object and the keys (indices) from obj become the values in invertedObj, and the values from obj become the keys in invertedObj.\n\n \nConstraints:\n\nobj is a valid JSON object or array\ntypeof obj[key] === \"string\"\n2 <= JSON.stringify(obj).length <= 105\n\n", "hints": [], "exampleTestcases": "{\"a\": \"1\",\"b\": \"2\",\"c\": \"3\",\"d\": \"4\" }\n{\"a\": \"1\",\"b\": \"2\",\"c\": \"2\",\"d\": \"4\" }\n[\"1\",\"2\",\"3\",\"4\"]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Object|Array} obj\n * @return {Object}\n */\nvar invertObject = function(obj) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Obj = Record<string, JSONValue> | Array<JSONValue>\n\nfunction invertObject(obj: Obj): Record<string, JSONValue> {\n    \n};"}}}