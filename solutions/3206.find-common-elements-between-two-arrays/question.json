{"question_id": "3206", "problem_slug": "find-common-elements-between-two-arrays", "problem_title": "Find Common Elements Between Two Arrays", "content": "You are given two integer arrays nums1 and nums2 of sizes n and m, respectively. Calculate the following values:\n\nanswer1 : the number of indices i such that nums1[i] exists in nums2.\nanswer2 : the number of indices i such that nums2[i] exists in nums1.\n\nReturn [answer1,answer2].\n \nExample 1:\n\nInput: nums1 = [2,3,2], nums2 = [1,2]\nOutput: [2,1]\nExplanation:\n\n\nExample 2:\n\nInput: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\nOutput: [3,4]\nExplanation:\nThe elements at indices 1, 2, and 3 in nums1 exist in nums2 as well. So answer1 is 3.\nThe elements at indices 0, 1, 3, and 4 in nums2 exist in nums1. So answer2 is 4.\n\nExample 3:\n\nInput: nums1 = [3,4,2,3], nums2 = [1,5]\nOutput: [0,0]\nExplanation:\nNo numbers are common between nums1 and nums2, so answer is [0,0].\n\n \nConstraints:\n\nn == nums1.length\nm == nums2.length\n1 <= n, m <= 100\n1 <= nums1[i], nums2[i] <= 100\n\n", "hints": ["Since the constraints are small, you can use brute force to solve the problem.", "For each element <code>i</code> in <code>nums1</code>, iterate over all elements of <code>nums2</code> to find if it occurs."], "exampleTestcases": "[2,3,2]\n[1,2]\n[4,3,2,3,1]\n[2,2,5,2,3,6]\n[3,4,2,3]\n[1,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findIntersectionValues(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findIntersectionValues(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findIntersectionValues(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindIntersectionValues(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar findIntersectionValues = function(nums1, nums2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findIntersectionValues(nums1: number[], nums2: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function findIntersectionValues($nums1, $nums2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findIntersectionValues(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findIntersectionValues(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findIntersectionValues(List<int> nums1, List<int> nums2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findIntersectionValues(nums1 []int, nums2 []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef find_intersection_values(nums1, nums2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findIntersectionValues(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_intersection_values(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-intersection-values nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_intersection_values(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\nfind_intersection_values(Nums1, Nums2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_intersection_values(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def find_intersection_values(nums1, nums2) do\n    \n  end\nend"}}}