{"questionId": "2699", "acRate": 33.397449248373626, "difficulty": "Medium", "freqBar": 52.492293049394, "frontendQuestionId": "2563", "paidOnly": false, "status": "ac", "title": "Count the Number of Fair Pairs", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "count-the-number-of-fair-pairs", "content": "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of fair pairs</em>.</p>\n\n<p>A pair <code>(i, j)</code> is <b>fair </b>if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; n</code>, and</li>\n\t<li><code>lower &lt;= nums[i] + nums[j] &lt;= upper</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,7,4,4,5], lower = 3, upper = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,9,2,5], lower = 11, upper = 11\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is a single fair pair: (2,3).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums.length == n</code></li>\n\t<li><code><font face=\"monospace\">-10<sup>9</sup></font>&nbsp;&lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code><font face=\"monospace\">-10<sup>9</sup>&nbsp;&lt;= lower &lt;= upper &lt;= 10<sup>9</sup></font></code></li>\n</ul>\n", "hints": ["Sort the array in ascending order.", "For each number in the array, keep track of the smallest and largest numbers in the array that can form a fair pair with this number.", "As you move to larger number, both boundaries move down."], "exampleTestcases": "[0,1,7,4,4,5]\n3\n6\n[1,7,9,2,5]\n11\n11", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countFairPairs(vector<int>& nums, int lower, int upper) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countFairPairs(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long countFairPairs(int* nums, int numsSize, int lower, int upper) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long CountFairPairs(int[] nums, int lower, int upper) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar countFairPairs = function(nums, lower, upper) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countFairPairs(nums: number[], lower: number, upper: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function countFairPairs($nums, $lower, $upper) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countFairPairs(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countFairPairs(nums: IntArray, lower: Int, upper: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countFairPairs(List<int> nums, int lower, int upper) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countFairPairs(nums []int, lower int, upper int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_fair_pairs(nums, lower, upper)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countFairPairs(nums: Array[Int], lower: Int, upper: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_fair_pairs(nums: Vec<i32>, lower: i32, upper: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-fair-pairs nums lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_fair_pairs(Nums :: [integer()], Lower :: integer(), Upper :: integer()) -> integer().\ncount_fair_pairs(Nums, Lower, Upper) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_fair_pairs(nums :: [integer], lower :: integer, upper :: integer) :: integer\n  def count_fair_pairs(nums, lower, upper) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "count-of-range-sum", "title": "Count of Range Sum", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "finding-pairs-with-a-certain-sum", "title": "Finding Pairs With a Certain Sum", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-number-of-pairs-with-absolute-difference-k", "title": "Count Number of Pairs With Absolute Difference K", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-pairs-whose-sum-is-less-than-target", "title": "Count Pairs Whose Sum is Less than Target", "isPaidOnly": false}]}