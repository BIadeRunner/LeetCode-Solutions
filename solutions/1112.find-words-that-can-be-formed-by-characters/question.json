{"question_id": "1112", "problem_slug": "find-words-that-can-be-formed-by-characters", "problem_title": "Find Words That Can Be Formed by Characters", "content": "You are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once).\nReturn the sum of lengths of all good strings in words.\n \nExample 1:\n\nInput: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\nOutput: 6\nExplanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.\n\nExample 2:\n\nInput: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\nOutput: 10\nExplanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\n\n \nConstraints:\n\n1 <= words.length <= 1000\n1 <= words[i].length, chars.length <= 100\nwords[i] and chars consist of lowercase English letters.\n\n", "hints": ["Solve the problem for each string in <code>words</code> independently.", "Now try to think in frequency of letters.", "Count how many times each character occurs in string <code>chars</code>.", "To form a string using characters from <code>chars</code>, the frequency of each character in <code>chars</code> must be greater than or equal the frequency of that character in the string to be formed."], "exampleTestcases": "[\"cat\",\"bt\",\"hat\",\"tree\"]\n\"atach\"\n[\"hello\",\"world\",\"leetcode\"]\n\"welldonehoneyr\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countCharacters(vector<string>& words, string chars) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countCharacters(String[] words, String chars) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countCharacters(self, words, chars):\n        \"\"\"\n        :type words: List[str]\n        :type chars: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countCharacters(char** words, int wordsSize, char* chars) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountCharacters(string[] words, string chars) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} chars\n * @return {number}\n */\nvar countCharacters = function(words, chars) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countCharacters(words: string[], chars: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $chars\n     * @return Integer\n     */\n    function countCharacters($words, $chars) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countCharacters(_ words: [String], _ chars: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countCharacters(words: Array<String>, chars: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countCharacters(List<String> words, String chars) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countCharacters(words []string, chars string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} chars\n# @return {Integer}\ndef count_characters(words, chars)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countCharacters(words: Array[String], chars: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_characters(words: Vec<String>, chars: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-characters words chars)\n  (-> (listof string?) string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_characters(Words :: [unicode:unicode_binary()], Chars :: unicode:unicode_binary()) -> integer().\ncount_characters(Words, Chars) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_characters(words :: [String.t], chars :: String.t) :: integer\n  def count_characters(words, chars) do\n    \n  end\nend"}}}