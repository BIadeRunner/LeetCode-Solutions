{"question_id": "2365", "problem_slug": "percentage-of-letter-in-string", "problem_title": "Percentage of Letter in String", "content": "Given a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.\n \nExample 1:\n\nInput: s = \"foobar\", letter = \"o\"\nOutput: 33\nExplanation:\nThe percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33.\n\nExample 2:\n\nInput: s = \"jjjj\", letter = \"k\"\nOutput: 0\nExplanation:\nThe percentage of characters in s that equal the letter 'k' is 0%, so we return 0.\n \nConstraints:\n\n1 <= s.length <= 100\ns consists of lowercase English letters.\nletter is a lowercase English letter.\n\n", "hints": ["Can we count the number of occurrences of letter in s?", "Recall that the percentage is calculated as (occurrences / total) * 100."], "exampleTestcases": "\"foobar\"\n\"o\"\n\"jjjj\"\n\"k\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int percentageLetter(string s, char letter) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int percentageLetter(String s, char letter) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def percentageLetter(self, s, letter):\n        \"\"\"\n        :type s: str\n        :type letter: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def percentageLetter(self, s: str, letter: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int percentageLetter(char* s, char letter) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int PercentageLetter(string s, char letter) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {character} letter\n * @return {number}\n */\nvar percentageLetter = function(s, letter) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function percentageLetter(s: string, letter: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $letter\n     * @return Integer\n     */\n    function percentageLetter($s, $letter) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func percentageLetter(_ s: String, _ letter: Character) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun percentageLetter(s: String, letter: Char): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int percentageLetter(String s, String letter) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func percentageLetter(s string, letter byte) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Character} letter\n# @return {Integer}\ndef percentage_letter(s, letter)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def percentageLetter(s: String, letter: Char): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn percentage_letter(s: String, letter: char) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (percentage-letter s letter)\n  (-> string? char? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec percentage_letter(S :: unicode:unicode_binary(), Letter :: char()) -> integer().\npercentage_letter(S, Letter) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec percentage_letter(s :: String.t, letter :: char) :: integer\n  def percentage_letter(s, letter) do\n    \n  end\nend"}}}