{"question_id": "3497", "problem_slug": "find-the-last-marked-nodes-in-tree", "problem_title": "Find the Last Marked Nodes in Tree", "content": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nInitially, all nodes are unmarked. After every second, you mark all unmarked nodes which have at least one marked node adjacent to them.\nReturn an array nodes where nodes[i] is the last node to get marked in the tree, if you mark node i at time t = 0. If nodes[i] has multiple answers for any node i, you can choose any one answer.\n \nExample 1:\n\nInput: edges = [[0,1],[0,2]]\nOutput: [2,2,1]\nExplanation:\n\n\nFor i = 0, the nodes are marked in the sequence: [0] -> [0,1,2]. Either 1 or 2 can be the answer.\nFor i = 1, the nodes are marked in the sequence: [1] -> [0,1] -> [0,1,2]. Node 2 is marked last.\nFor i = 2, the nodes are marked in the sequence: [2] -> [0,2] -> [0,1,2]. Node 1 is marked last.\n\n\nExample 2:\n\nInput: edges = [[0,1]]\nOutput: [1,0]\nExplanation:\n\n\nFor i = 0, the nodes are marked in the sequence: [0] -> [0,1].\nFor i = 1, the nodes are marked in the sequence: [1] -> [0,1].\n\n\nExample 3:\n\nInput: edges = [[0,1],[0,2],[2,3],[2,4]]\nOutput: [3,3,1,1,1]\nExplanation:\n\n\nFor i = 0, the nodes are marked in the sequence: [0] -> [0,1,2] -> [0,1,2,3,4].\nFor i = 1, the nodes are marked in the sequence: [1] -> [0,1] -> [0,1,2] -> [0,1,2,3,4].\nFor i = 2, the nodes are marked in the sequence: [2] -> [0,2,3,4] -> [0,1,2,3,4].\nFor i = 3, the nodes are marked in the sequence: [3] -> [2,3] -> [0,2,3,4] -> [0,1,2,3,4].\nFor i = 4, the nodes are marked in the sequence: [4] -> [2,4] -> [0,2,3,4] -> [0,1,2,3,4].\n\n\n \nConstraints:\n\n2 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n0 <= edges[i][0], edges[i][1] <= n - 1\nThe input is generated such that edges represents a valid tree.\n\n", "hints": ["We need to calculate the height of tree when rooted at each node.", "Find a diameter using two DFS.", "The farthest node from each node must be one of the endpoints of the diameter.", "The last marked node will be one of the end of the diameter, whichever is more distant."], "exampleTestcases": "[[0,1],[0,2]]\n[[0,1]]\n[[0,1],[0,2],[2,3],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> lastMarkedNodes(vector<vector<int>>& edges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] lastMarkedNodes(int[][] edges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def lastMarkedNodes(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def lastMarkedNodes(self, edges: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lastMarkedNodes(int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] LastMarkedNodes(int[][] edges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar lastMarkedNodes = function(edges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function lastMarkedNodes(edges: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function lastMarkedNodes($edges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func lastMarkedNodes(_ edges: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun lastMarkedNodes(edges: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> lastMarkedNodes(List<List<int>> edges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func lastMarkedNodes(edges [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer[]}\ndef last_marked_nodes(edges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def lastMarkedNodes(edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn last_marked_nodes(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (last-marked-nodes edges)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec last_marked_nodes(Edges :: [[integer()]]) -> [integer()].\nlast_marked_nodes(Edges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec last_marked_nodes(edges :: [[integer]]) :: [integer]\n  def last_marked_nodes(edges) do\n    \n  end\nend"}}}