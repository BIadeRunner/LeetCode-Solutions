{"question_id": "2764", "problem_slug": "maximum-number-of-fish-in-a-grid", "problem_title": "Maximum Number of Fish in a Grid", "content": "You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:\n\nA land cell if grid[r][c] = 0, or\nA water cell containing grid[r][c] fish, if grid[r][c] > 0.\n\nA fisher can start at any water cell (r, c) and can do the following operations any number of times:\n\nCatch all the fish at cell (r, c), or\nMove to any adjacent water cell.\n\nReturn the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.\nAn adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.\n \nExample 1:\n\n\nInput: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]\nOutput: 7\nExplanation: The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3) and collect 4 fish.\n\nExample 2:\n\n\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]\nOutput: 1\nExplanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish. \n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 10\n0 <= grid[i][j] <= 10\n\n", "hints": ["Run DFS from each non-zero cell.", "Each time you pick a cell to start from, add up the number of fish contained in the cells you visit."], "exampleTestcases": "[[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]\n[[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxFish(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findMaxFish(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMaxFish(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMaxFish(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findMaxFish(int** grid, int gridSize, int* gridColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxFish(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar findMaxFish = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMaxFish(grid: number[][]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function findMaxFish($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMaxFish(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaxFish(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findMaxFish(List<List<int>> grid) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMaxFish(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef find_max_fish(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMaxFish(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_fish(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-max-fish grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_max_fish(Grid :: [[integer()]]) -> integer().\nfind_max_fish(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_max_fish(grid :: [[integer]]) :: integer\n  def find_max_fish(grid) do\n    \n  end\nend"}}}