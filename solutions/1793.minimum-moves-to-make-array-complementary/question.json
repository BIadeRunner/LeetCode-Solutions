{"question_id": "1793", "problem_slug": "minimum-moves-to-make-array-complementary", "problem_title": "Minimum Moves to Make Array Complementary", "content": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.\n \nExample 1:\n\nInput: nums = [1,2,4,3], limit = 4\nOutput: 1\nExplanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.\n\nExample 2:\n\nInput: nums = [1,2,2,1], limit = 2\nOutput: 2\nExplanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.\n\nExample 3:\n\nInput: nums = [1,2,1,2], limit = 2\nOutput: 0\nExplanation: nums is already complementary.\n\n \nConstraints:\n\nn == nums.length\n2 <= n <= 105\n1 <= nums[i] <= limit <= 105\nn is even.\n\n", "hints": ["Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications.", "Can you find the optimal target sum x value such that the sum of modifications is minimized?", "Create a difference array to efficiently sum all the modifications."], "exampleTestcases": "[1,2,4,3]\n4\n[1,2,2,1]\n2\n[1,2,1,2]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMoves(vector<int>& nums, int limit) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minMoves(int[] nums, int limit) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minMoves(self, nums, limit):\n        \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minMoves(self, nums: List[int], limit: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minMoves(int* nums, int numsSize, int limit) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinMoves(int[] nums, int limit) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} limit\n * @return {number}\n */\nvar minMoves = function(nums, limit) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minMoves(nums: number[], limit: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @return Integer\n     */\n    function minMoves($nums, $limit) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minMoves(_ nums: [Int], _ limit: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minMoves(nums: IntArray, limit: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minMoves(List<int> nums, int limit) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minMoves(nums []int, limit int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer}\ndef min_moves(nums, limit)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minMoves(nums: Array[Int], limit: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_moves(nums: Vec<i32>, limit: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-moves nums limit)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_moves(Nums :: [integer()], Limit :: integer()) -> integer().\nmin_moves(Nums, Limit) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_moves(nums :: [integer], limit :: integer) :: integer\n  def min_moves(nums, limit) do\n    \n  end\nend"}}}