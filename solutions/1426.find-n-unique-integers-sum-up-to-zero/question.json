{"question_id": "1426", "problem_slug": "find-n-unique-integers-sum-up-to-zero", "problem_title": "Find N Unique Integers Sum up to Zero", "content": "Given an integer n, return any array containing n unique integers such that they add up to 0.\n \nExample 1:\n\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\n\nExample 2:\n\nInput: n = 3\nOutput: [-1,0,1]\n\nExample 3:\n\nInput: n = 1\nOutput: [0]\n\n \nConstraints:\n\n1 <= n <= 1000\n\n", "hints": ["Return an array where the values are symmetric. (+x , -x).", "If n is odd, append value 0 in your returned array."], "exampleTestcases": "5\n3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sumZero(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] sumZero(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumZero(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumZero(self, n: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumZero(int n, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] SumZero(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar sumZero = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumZero(n: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function sumZero($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumZero(_ n: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumZero(n: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> sumZero(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumZero(n int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef sum_zero(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumZero(n: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_zero(n: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-zero n)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_zero(N :: integer()) -> [integer()].\nsum_zero(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_zero(n :: integer) :: [integer]\n  def sum_zero(n) do\n    \n  end\nend"}}}