{"questionId": "2482", "acRate": 56.19008064237012, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2397", "paidOnly": false, "status": "ac", "title": "Maximum Rows Covered by Columns", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Enumeration", "id": "VG9waWNUYWdOb2RlOjYxMDY2", "slug": "enumeration"}], "titleSlug": "maximum-rows-covered-by-columns", "content": "<p>You are given an <code>m x n</code> binary matrix <code>matrix</code> and an integer <code>numSelect</code>.</p>\n\n<p>Your goal is to select exactly <code>numSelect</code> <strong>distinct </strong>columns from <code>matrix</code> such that you cover as many rows as possible.</p>\n\n<p>A row is considered <strong>covered</strong> if all the <code>1</code>&#39;s in that row are also part of a column that you have selected. If a row does not have any <code>1</code>s, it is also considered covered.</p>\n\n<p>More formally, let us consider <code>selected = {c<sub>1</sub>, c<sub>2</sub>, ...., c<sub>numSelect</sub>}</code> as the set of columns selected by you. A row <code>i</code> is <strong>covered</strong> by <code>selected</code> if:</p>\n\n<ul>\n\t<li>For each cell where <code>matrix[i][j] == 1</code>, the column <code>j</code> is in <code>selected</code>.</li>\n\t<li>Or, no cell in row <code>i</code> has a value of <code>1</code>.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> number of rows that can be <strong>covered</strong> by a set of <code>numSelect</code> columns.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/14/rowscovered.png\" style=\"width: 240px; height: 400px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible way to cover 3 rows is shown in the diagram above.<br />\nWe choose s = {0, 2}.<br />\n- Row 0 is covered because it has no occurrences of 1.<br />\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.<br />\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.<br />\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.<br />\nThus, we can cover three rows.<br />\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/14/rowscovered2.png\" style=\"height: 250px; width: 84px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">matrix = [[1],[0]], numSelect = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Selecting the only column will result in both rows being covered since the entire matrix is selected.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= numSelect&nbsp;&lt;= n</code></li>\n</ul>\n", "hints": ["Try a brute-force approach.", "Iterate through all possible sets of exactly <code>cols</code> columns.", "For each valid set, check how many rows are covered, and return the maximum."], "exampleTestcases": "[[0,0,0],[1,0,1],[0,1,1],[0,0,1]]\n2\n[[1],[0]]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumRows(vector<vector<int>>& matrix, int numSelect) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumRows(int[][] matrix, int numSelect) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumRows(self, matrix, numSelect):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type numSelect: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumRows(int** matrix, int matrixSize, int* matrixColSize, int numSelect) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumRows(int[][] matrix, int numSelect) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @param {number} numSelect\n * @return {number}\n */\nvar maximumRows = function(matrix, numSelect) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumRows(matrix: number[][], numSelect: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $numSelect\n     * @return Integer\n     */\n    function maximumRows($matrix, $numSelect) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumRows(_ matrix: [[Int]], _ numSelect: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumRows(matrix: Array<IntArray>, numSelect: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumRows(List<List<int>> matrix, int numSelect) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumRows(matrix [][]int, numSelect int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @param {Integer} num_select\n# @return {Integer}\ndef maximum_rows(matrix, num_select)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumRows(matrix: Array[Array[Int]], numSelect: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_rows(matrix: Vec<Vec<i32>>, num_select: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-rows matrix numSelect)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_rows(Matrix :: [[integer()]], NumSelect :: integer()) -> integer().\nmaximum_rows(Matrix, NumSelect) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_rows(matrix :: [[integer]], num_select :: integer) :: integer\n  def maximum_rows(matrix, num_select) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "matchsticks-to-square", "title": "Matchsticks to Square", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-shortest-superstring", "title": "Find the Shortest Superstring", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "isPaidOnly": false}]}