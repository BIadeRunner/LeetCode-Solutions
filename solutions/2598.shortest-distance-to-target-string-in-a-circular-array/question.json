{"question_id": "2598", "problem_slug": "shortest-distance-to-target-string-in-a-circular-array", "problem_title": "Shortest Distance to Target String in a Circular Array", "content": "You are given a 0-indexed circular string array words and a string target. A circular array means that the array's end connects to the array's beginning.\n\nFormally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words.\n\nStarting from startIndex, you can move to either the next word or the previous word with 1 step at a time.\nReturn the shortest distance needed to reach the string target. If the string target does not exist in words, return -1.\n \nExample 1:\n\nInput: words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1\nOutput: 1\nExplanation: We start from index 1 and can reach \"hello\" by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach \"hello\" is 1.\n\nExample 2:\n\nInput: words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0\nOutput: 1\nExplanation: We start from index 0 and can reach \"leetcode\" by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach \"leetcode\" is 1.\nExample 3:\n\nInput: words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0\nOutput: -1\nExplanation: Since \"ate\" does not exist in words, we return -1.\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] and target consist of only lowercase English letters.\n0 <= startIndex < words.length\n\n", "hints": ["You have two options, either move straight to the left or move straight to the right.", "Find the first target word and record the distance.", "Choose the one with the minimum distance."], "exampleTestcases": "[\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"]\n\"hello\"\n1\n[\"a\",\"b\",\"leetcode\"]\n\"leetcode\"\n0\n[\"i\",\"eat\",\"leetcode\"]\n\"ate\"\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int closetTarget(vector<string>& words, string target, int startIndex) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int closetTarget(String[] words, String target, int startIndex) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def closetTarget(self, words, target, startIndex):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :type startIndex: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int closetTarget(char** words, int wordsSize, char* target, int startIndex) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ClosetTarget(string[] words, string target, int startIndex) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} target\n * @param {number} startIndex\n * @return {number}\n */\nvar closetTarget = function(words, target, startIndex) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function closetTarget(words: string[], target: string, startIndex: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $target\n     * @param Integer $startIndex\n     * @return Integer\n     */\n    function closetTarget($words, $target, $startIndex) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func closetTarget(_ words: [String], _ target: String, _ startIndex: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun closetTarget(words: Array<String>, target: String, startIndex: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int closetTarget(List<String> words, String target, int startIndex) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func closetTarget(words []string, target string, startIndex int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} target\n# @param {Integer} start_index\n# @return {Integer}\ndef closet_target(words, target, start_index)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def closetTarget(words: Array[String], target: String, startIndex: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn closet_target(words: Vec<String>, target: String, start_index: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (closet-target words target startIndex)\n  (-> (listof string?) string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec closet_target(Words :: [unicode:unicode_binary()], Target :: unicode:unicode_binary(), StartIndex :: integer()) -> integer().\ncloset_target(Words, Target, StartIndex) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec closet_target(words :: [String.t], target :: String.t, start_index :: integer) :: integer\n  def closet_target(words, target, start_index) do\n    \n  end\nend"}}}