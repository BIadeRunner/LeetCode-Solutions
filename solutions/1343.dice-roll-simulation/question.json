{"questionId": "1343", "acRate": 49.583372490054195, "difficulty": "Hard", "freqBar": 21.95218178726204, "frontendQuestionId": "1223", "paidOnly": false, "status": "ac", "title": "Dice Roll Simulation", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "dice-roll-simulation", "content": "<p>A die simulator generates a random number from <code>1</code> to <code>6</code> for each roll. You introduced a constraint to the generator such that it cannot roll the number <code>i</code> more than <code>rollMax[i]</code> (<strong>1-indexed</strong>) consecutive times.</p>\n\n<p>Given an array of integers <code>rollMax</code> and an integer <code>n</code>, return <em>the number of distinct sequences that can be obtained with exact </em><code>n</code><em> rolls</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two sequences are considered different if at least one element differs from each other.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, rollMax = [1,1,2,2,2,3]\n<strong>Output:</strong> 34\n<strong>Explanation:</strong> There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, rollMax = [1,1,1,1,1,1]\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, rollMax = [1,1,1,2,2,3]\n<strong>Output:</strong> 181\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>rollMax.length == 6</code></li>\n\t<li><code>1 &lt;= rollMax[i] &lt;= 15</code></li>\n</ul>\n", "hints": ["Think on Dynamic Programming.", "DP(pos, last) which means we are at the position pos having as last the last character seen."], "exampleTestcases": "2\n[1,1,2,2,2,3]\n2\n[1,1,1,1,1,1]\n3\n[1,1,1,2,2,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int dieSimulator(int n, vector<int>& rollMax) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int dieSimulator(int n, int[] rollMax) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def dieSimulator(self, n, rollMax):\n        \"\"\"\n        :type n: int\n        :type rollMax: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int dieSimulator(int n, int* rollMax, int rollMaxSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DieSimulator(int n, int[] rollMax) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} rollMax\n * @return {number}\n */\nvar dieSimulator = function(n, rollMax) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function dieSimulator(n: number, rollMax: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $rollMax\n     * @return Integer\n     */\n    function dieSimulator($n, $rollMax) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func dieSimulator(_ n: Int, _ rollMax: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun dieSimulator(n: Int, rollMax: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int dieSimulator(int n, List<int> rollMax) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func dieSimulator(n int, rollMax []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} roll_max\n# @return {Integer}\ndef die_simulator(n, roll_max)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def dieSimulator(n: Int, rollMax: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn die_simulator(n: i32, roll_max: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (die-simulator n rollMax)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec die_simulator(N :: integer(), RollMax :: [integer()]) -> integer().\ndie_simulator(N, RollMax) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec die_simulator(n :: integer, roll_max :: [integer]) :: integer\n  def die_simulator(n, roll_max) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "find-missing-observations", "title": "Find Missing Observations", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "isPaidOnly": false}]}