{"question_id": "1343", "problem_slug": "dice-roll-simulation", "problem_title": "Dice Roll Simulation", "content": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.\nGiven an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. Since the answer may be too large, return it modulo 109 + 7.\nTwo sequences are considered different if at least one element differs from each other.\n \nExample 1:\n\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n\nExample 2:\n\nInput: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30\n\nExample 3:\n\nInput: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181\n\n \nConstraints:\n\n1 <= n <= 5000\nrollMax.length == 6\n1 <= rollMax[i] <= 15\n\n", "hints": ["Think on Dynamic Programming.", "DP(pos, last) which means we are at the position pos having as last the last character seen."], "exampleTestcases": "2\n[1,1,2,2,2,3]\n2\n[1,1,1,1,1,1]\n3\n[1,1,1,2,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int dieSimulator(int n, vector<int>& rollMax) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int dieSimulator(int n, int[] rollMax) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def dieSimulator(self, n, rollMax):\n        \"\"\"\n        :type n: int\n        :type rollMax: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int dieSimulator(int n, int* rollMax, int rollMaxSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int DieSimulator(int n, int[] rollMax) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} rollMax\n * @return {number}\n */\nvar dieSimulator = function(n, rollMax) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function dieSimulator(n: number, rollMax: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $rollMax\n     * @return Integer\n     */\n    function dieSimulator($n, $rollMax) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func dieSimulator(_ n: Int, _ rollMax: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun dieSimulator(n: Int, rollMax: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int dieSimulator(int n, List<int> rollMax) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func dieSimulator(n int, rollMax []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} roll_max\n# @return {Integer}\ndef die_simulator(n, roll_max)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def dieSimulator(n: Int, rollMax: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn die_simulator(n: i32, roll_max: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (die-simulator n rollMax)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec die_simulator(N :: integer(), RollMax :: [integer()]) -> integer().\ndie_simulator(N, RollMax) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec die_simulator(n :: integer, roll_max :: [integer]) :: integer\n  def die_simulator(n, roll_max) do\n    \n  end\nend"}}}