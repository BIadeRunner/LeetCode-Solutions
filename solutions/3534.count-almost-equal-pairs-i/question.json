{"question_id": "3534", "problem_slug": "count-almost-equal-pairs-i", "problem_title": "Count Almost Equal Pairs I", "content": "You are given an array nums consisting of positive integers.\nWe call two integers x and y in this problem almost equal if both integers can become equal after performing the following operation at most once:\n\nChoose either x or y and swap any two digits within the chosen number.\n\nReturn the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.\nNote that it is allowed for an integer to have leading zeros after performing an operation.\n \nExample 1:\n\nInput: nums = [3,12,30,17,21]\nOutput: 2\nExplanation:\nThe almost equal pairs of elements are:\n\n3 and 30. By swapping 3 and 0 in 30, you get 3.\n12 and 21. By swapping 1 and 2 in 12, you get 21.\n\n\nExample 2:\n\nInput: nums = [1,1,1,1,1]\nOutput: 10\nExplanation:\nEvery two elements in the array are almost equal.\n\nExample 3:\n\nInput: nums = [123,231]\nOutput: 0\nExplanation:\nWe cannot swap any two digits of 123 or 231 to reach the other.\n\n \nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 106\n\n", "hints": ["Since the constraint on the number of elements is small, you can check all pairs in the array.", "For each pair, perform an operation on one of the elements and check if it becomes equal to the other."], "exampleTestcases": "[3,12,30,17,21]\n[1,1,1,1,1]\n[123,231]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPairs(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countPairs(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countPairs(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountPairs(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countPairs = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countPairs(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countPairs($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countPairs(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countPairs(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countPairs(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countPairs(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_pairs(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countPairs(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_pairs(Nums :: [integer()]) -> integer().\ncount_pairs(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_pairs(nums :: [integer]) :: integer\n  def count_pairs(nums) do\n    \n  end\nend"}}}