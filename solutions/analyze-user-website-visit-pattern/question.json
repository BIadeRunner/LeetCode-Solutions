{"questionId": "1108", "acRate": 42.8205613008237, "difficulty": "Medium", "freqBar": 75.52537664347959, "frontendQuestionId": "1152", "paidOnly": true, "status": "ac", "title": "Analyze User Website Visit Pattern", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "analyze-user-website-visit-pattern", "content": "<p>You are given two string arrays <code>username</code> and <code>website</code> and an integer array <code>timestamp</code>. All the given arrays are of the same length and the tuple <code>[username[i], website[i], timestamp[i]]</code> indicates that the user <code>username[i]</code> visited the website <code>website[i]</code> at time <code>timestamp[i]</code>.</p>\n\n<p>A <strong>pattern</strong> is a list of three websites (not necessarily distinct).</p>\n\n<ul>\n\t<li>For example, <code>[&quot;home&quot;, &quot;away&quot;, &quot;love&quot;]</code>, <code>[&quot;leetcode&quot;, &quot;love&quot;, &quot;leetcode&quot;]</code>, and <code>[&quot;luffy&quot;, &quot;luffy&quot;, &quot;luffy&quot;]</code> are all patterns.</li>\n</ul>\n\n<p>The <strong>score</strong> of a <strong>pattern</strong> is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.</p>\n\n<ul>\n\t<li>For example, if the pattern is <code>[&quot;home&quot;, &quot;away&quot;, &quot;love&quot;]</code>, the score is the number of users <code>x</code> such that <code>x</code> visited <code>&quot;home&quot;</code> then visited <code>&quot;away&quot;</code> and visited <code>&quot;love&quot;</code> after that.</li>\n\t<li>Similarly, if the pattern is <code>[&quot;leetcode&quot;, &quot;love&quot;, &quot;leetcode&quot;]</code>, the score is the number of users <code>x</code> such that <code>x</code> visited <code>&quot;leetcode&quot;</code> then visited <code>&quot;love&quot;</code> and visited <code>&quot;leetcode&quot;</code> <strong>one more time</strong> after that.</li>\n\t<li>Also, if the pattern is <code>[&quot;luffy&quot;, &quot;luffy&quot;, &quot;luffy&quot;]</code>, the score is the number of users <code>x</code> such that <code>x</code> visited <code>&quot;luffy&quot;</code> three different times at different timestamps.</li>\n</ul>\n\n<p>Return the <strong>pattern</strong> with the largest <strong>score</strong>. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.</p>\n\n<p>Note that the websites in a pattern <strong>do not</strong> need to be visited <em>contiguously</em>, they only need to be visited in the order they appeared in the pattern.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> username = [&quot;joe&quot;,&quot;joe&quot;,&quot;joe&quot;,&quot;james&quot;,&quot;james&quot;,&quot;james&quot;,&quot;james&quot;,&quot;mary&quot;,&quot;mary&quot;,&quot;mary&quot;], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [&quot;home&quot;,&quot;about&quot;,&quot;career&quot;,&quot;home&quot;,&quot;cart&quot;,&quot;maps&quot;,&quot;home&quot;,&quot;home&quot;,&quot;about&quot;,&quot;career&quot;]\n<strong>Output:</strong> [&quot;home&quot;,&quot;about&quot;,&quot;career&quot;]\n<strong>Explanation:</strong> The tuples in this example are:\n[&quot;joe&quot;,&quot;home&quot;,1],[&quot;joe&quot;,&quot;about&quot;,2],[&quot;joe&quot;,&quot;career&quot;,3],[&quot;james&quot;,&quot;home&quot;,4],[&quot;james&quot;,&quot;cart&quot;,5],[&quot;james&quot;,&quot;maps&quot;,6],[&quot;james&quot;,&quot;home&quot;,7],[&quot;mary&quot;,&quot;home&quot;,8],[&quot;mary&quot;,&quot;about&quot;,9], and [&quot;mary&quot;,&quot;career&quot;,10].\nThe pattern (&quot;home&quot;, &quot;about&quot;, &quot;career&quot;) has score 2 (joe and mary).\nThe pattern (&quot;home&quot;, &quot;cart&quot;, &quot;maps&quot;) has score 1 (james).\nThe pattern (&quot;home&quot;, &quot;cart&quot;, &quot;home&quot;) has score 1 (james).\nThe pattern (&quot;home&quot;, &quot;maps&quot;, &quot;home&quot;) has score 1 (james).\nThe pattern (&quot;cart&quot;, &quot;maps&quot;, &quot;home&quot;) has score 1 (james).\nThe pattern (&quot;home&quot;, &quot;home&quot;, &quot;home&quot;) has score 0 (no user visited home 3 times).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> username = [&quot;ua&quot;,&quot;ua&quot;,&quot;ua&quot;,&quot;ub&quot;,&quot;ub&quot;,&quot;ub&quot;], timestamp = [1,2,3,4,5,6], website = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= username.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= username[i].length &lt;= 10</code></li>\n\t<li><code>timestamp.length == username.length</code></li>\n\t<li><code>1 &lt;= timestamp[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>website.length == username.length</code></li>\n\t<li><code>1 &lt;= website[i].length &lt;= 10</code></li>\n\t<li><code>username[i]</code> and <code>website[i]</code> consist of lowercase English letters.</li>\n\t<li>It is guaranteed that there is at least one user who visited at least three websites.</li>\n\t<li>All the tuples <code>[username[i], timestamp[i], website[i]]</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Let's find for every user separately the websites he visited.", "Consider all possible 3-sequences, find the number of distinct users who visited each of them.", "How to check if some user visited some 3-sequence ?", "Store for every user all the 3-sequence he visited."], "exampleTestcases": "[\"joe\",\"joe\",\"joe\",\"james\",\"james\",\"james\",\"james\",\"mary\",\"mary\",\"mary\"]\n[1,2,3,4,5,6,7,8,9,10]\n[\"home\",\"about\",\"career\",\"home\",\"cart\",\"maps\",\"home\",\"home\",\"about\",\"career\"]\n[\"ua\",\"ua\",\"ua\",\"ub\",\"ub\",\"ub\"]\n[1,2,3,4,5,6]\n[\"a\",\"b\",\"a\",\"a\",\"b\",\"c\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> mostVisitedPattern(vector<string>& username, vector<int>& timestamp, vector<string>& website) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mostVisitedPattern(self, username, timestamp, website):\n        \"\"\"\n        :type username: List[str]\n        :type timestamp: List[int]\n        :type website: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** mostVisitedPattern(char** username, int usernameSize, int* timestamp, int timestampSize, char** website, int websiteSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> MostVisitedPattern(string[] username, int[] timestamp, string[] website) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} username\n * @param {number[]} timestamp\n * @param {string[]} website\n * @return {string[]}\n */\nvar mostVisitedPattern = function(username, timestamp, website) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mostVisitedPattern(username: string[], timestamp: number[], website: string[]): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $username\n     * @param Integer[] $timestamp\n     * @param String[] $website\n     * @return String[]\n     */\n    function mostVisitedPattern($username, $timestamp, $website) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mostVisitedPattern(_ username: [String], _ timestamp: [Int], _ website: [String]) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mostVisitedPattern(username: Array<String>, timestamp: IntArray, website: Array<String>): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> mostVisitedPattern(List<String> username, List<int> timestamp, List<String> website) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mostVisitedPattern(username []string, timestamp []int, website []string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} username\n# @param {Integer[]} timestamp\n# @param {String[]} website\n# @return {String[]}\ndef most_visited_pattern(username, timestamp, website)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mostVisitedPattern(username: Array[String], timestamp: Array[Int], website: Array[String]): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn most_visited_pattern(username: Vec<String>, timestamp: Vec<i32>, website: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (most-visited-pattern username timestamp website)\n  (-> (listof string?) (listof exact-integer?) (listof string?) (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec most_visited_pattern(Username :: [unicode:unicode_binary()], Timestamp :: [integer()], Website :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nmost_visited_pattern(Username, Timestamp, Website) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_visited_pattern(username :: [String.t], timestamp :: [integer], website :: [String.t]) :: [String.t]\n  def most_visited_pattern(username, timestamp, website) do\n    \n  end\nend"}], "similarQuestionList": []}