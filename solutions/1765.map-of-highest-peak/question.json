{"questionId": "1876", "acRate": 63.018049921662055, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1765", "paidOnly": false, "status": "ac", "title": "Map of Highest Peak", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "map-of-highest-peak", "content": "<p>You are given an integer matrix <code>isWater</code> of size <code>m x n</code> that represents a map of <strong>land</strong> and <strong>water</strong> cells.</p>\n\n<ul>\n\t<li>If <code>isWater[i][j] == 0</code>, cell <code>(i, j)</code> is a <strong>land</strong> cell.</li>\n\t<li>If <code>isWater[i][j] == 1</code>, cell <code>(i, j)</code> is a <strong>water</strong> cell.</li>\n</ul>\n\n<p>You must assign each cell a height in a way that follows these rules:</p>\n\n<ul>\n\t<li>The height of each cell must be non-negative.</li>\n\t<li>If the cell is a <strong>water</strong> cell, its height must be <code>0</code>.</li>\n\t<li>Any two adjacent cells must have an absolute height difference of <strong>at most</strong> <code>1</code>. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</li>\n</ul>\n\n<p>Find an assignment of heights such that the maximum height in the matrix is <strong>maximized</strong>.</p>\n\n<p>Return <em>an integer matrix </em><code>height</code><em> of size </em><code>m x n</code><em> where </em><code>height[i][j]</code><em> is cell </em><code>(i, j)</code><em>&#39;s height. If there are multiple solutions, return <strong>any</strong> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png\" style=\"width: 220px; height: 219px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> isWater = [[0,1],[0,0]]\n<strong>Output:</strong> [[1,0],[2,1]]\n<strong>Explanation:</strong> The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png\" style=\"width: 300px; height: 296px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> isWater = [[0,0,1],[1,0,0],[0,0,0]]\n<strong>Output:</strong> [[1,1,0],[0,1,1],[1,2,2]]\n<strong>Explanation:</strong> A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == isWater.length</code></li>\n\t<li><code>n == isWater[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>isWater[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There is at least <strong>one</strong> water cell.</li>\n</ul>\n", "hints": ["Set each water cell to be 0. The height of each cell is limited by its closest water cell.", "Perform a multi-source BFS with all the water cells as sources."], "exampleTestcases": "[[0,1],[0,0]]\n[[0,0,1],[1,0,0],[0,0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] highestPeak(int[][] isWater) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def highestPeak(self, isWater):\n        \"\"\"\n        :type isWater: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** highestPeak(int** isWater, int isWaterSize, int* isWaterColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] HighestPeak(int[][] isWater) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} isWater\n * @return {number[][]}\n */\nvar highestPeak = function(isWater) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function highestPeak(isWater: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $isWater\n     * @return Integer[][]\n     */\n    function highestPeak($isWater) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func highestPeak(_ isWater: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun highestPeak(isWater: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> highestPeak(List<List<int>> isWater) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func highestPeak(isWater [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} is_water\n# @return {Integer[][]}\ndef highest_peak(is_water)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def highestPeak(isWater: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn highest_peak(is_water: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (highest-peak isWater)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec highest_peak(IsWater :: [[integer()]]) -> [[integer()]].\nhighest_peak(IsWater) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec highest_peak(is_water :: [[integer]]) :: [[integer]]\n  def highest_peak(is_water) do\n    \n  end\nend"}], "similarQuestionList": []}