{"question_id": "1790", "problem_slug": "lowest-common-ancestor-of-a-binary-tree-iii", "problem_title": "Lowest Common Ancestor of a Binary Tree III", "content": "Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).\nEach node will have a reference to its parent node. The definition for Node is below:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\"\n \nExample 1:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nExample 2:\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\n\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q exist in the tree.\n\n", "hints": ["Store the path from p to the root.", "Traverse the path from q to the root, the first common point of the two paths is the LCA."], "exampleTestcases": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1\n[3,5,1,6,2,0,8,null,null,7,4]\n5\n4\n[1,2]\n1\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* parent;\n};\n*/\n\nclass Solution {\npublic:\n    Node* lowestCommonAncestor(Node* p, Node * q) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n};\n*/\n\nclass Solution {\n    public Node lowestCommonAncestor(Node p, Node q) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution(object):\n    def lowestCommonAncestor(self, p, q):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution:\n    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':\n        "}, "C": {"langSlug": "c", "code": "/*\n// Definition for a Node.\nstruct Node {\n    int val;\n    struct Node* left;\n    struct Node* right;\n    struct Node* parent;\n};\n*/\n\nstruct Node* lowestCommonAncestor(struct Node* p,struct Node* q) {\n\t\n}"}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n*/\n\npublic class Solution {\n    public Node LowestCommonAncestor(Node p, Node q) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val) {\n *    this.val = val;\n *    this.left = null;\n *    this.right = null;\n *    this.parent = null;\n * };\n */\n\n/**\n * @param {_Node} p\n * @param {_Node} q\n * @return {_Node}\n */\nvar lowestCommonAncestor = function(p, q) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     left: _Node | null\n *     right: _Node | null\n *     parent: _Node | null\n *     \n *     constructor(v: number) {\n *         this.val = v;\n *         this.left = null;\n *         this.right = null;\n *         this.parent = null;\n *     }\n * }\n */\n\n\nfunction lowestCommonAncestor(p: _Node | null, q: _Node | null): _Node | null {\n\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     public $parent = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->left = null;\n *         $this->right = null;\n *         $this->parent = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $node\n     * @return Node\n     */\n    function lowestCommonAncestor($p, $q) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *     public var parent: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.parent = nil\n *     }\n * }\n */\n\nclass Solution {\n    func lowestCommonAncestor(_ p: Node?,_ q: Node?) -> Node? {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *\t\tvar left: TreeNode? = null\n *\t\tvar right: TreeNode? = null\n *\t\tvar parent: Node? = null\n * }\n */\n\nclass Solution {\n    fun lowestCommonAncestor(p: Node?, q: Node?): Node? {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Parent *Node\n * }\n */\n\nfunc lowestCommonAncestor(p *Node, q *Node) *Node {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :left, :right, :parent\n#     def initialize(val=0)\n#         @val = val\n#         @left, @right, parent = nil, nil, nil\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef lowest_common_ancestor(p, q)\n\t\nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var left: Node = null\n *   var right: Node = null\n *   var parent: Node = null\n * }\n */\n\nobject Solution {\n    def lowestCommonAncestor(p: Node, q: Node): Node = {\n\t\t\n\t}\n}"}}}