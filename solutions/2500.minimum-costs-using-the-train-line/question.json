{"question_id": "2500", "problem_slug": "minimum-costs-using-the-train-line", "problem_title": "Minimum Costs Using the Train Line", "content": "A train line going through a city has two routes, the regular route and the express route. Both routes go through the same n + 1 stops labeled from 0 to n. Initially, you start on the regular route at stop 0.\nYou are given two 1-indexed integer arrays regular and express, both of length n. regular[i] describes the cost it takes to go from stop i - 1 to stop i using the regular route, and express[i] describes the cost it takes to go from stop i - 1 to stop i using the express route.\nYou are also given an integer expressCost which represents the cost to transfer from the regular route to the express route.\nNote that:\n\nThere is no cost to transfer from the express route back to the regular route.\nYou pay expressCost every time you transfer from the regular route to the express route.\nThere is no extra cost to stay on the express route.\n\nReturn a 1-indexed array costs of length n, where costs[i] is the minimum cost to reach stop i from stop 0.\nNote that a stop can be counted as reached from either route.\n \nExample 1:\n\n\nInput: regular = [1,6,9,5], express = [5,2,3,10], expressCost = 8\nOutput: [1,7,14,19]\nExplanation: The diagram above shows how to reach stop 4 from stop 0 with minimum cost.\n- Take the regular route from stop 0 to stop 1, costing 1.\n- Take the express route from stop 1 to stop 2, costing 8 + 2 = 10.\n- Take the express route from stop 2 to stop 3, costing 3.\n- Take the regular route from stop 3 to stop 4, costing 5.\nThe total cost is 1 + 10 + 3 + 5 = 19.\nNote that a different route could be taken to reach the other stops with minimum cost.\n\nExample 2:\n\n\nInput: regular = [11,5,13], express = [7,10,6], expressCost = 3\nOutput: [10,15,24]\nExplanation: The diagram above shows how to reach stop 3 from stop 0 with minimum cost.\n- Take the express route from stop 0 to stop 1, costing 3 + 7 = 10.\n- Take the regular route from stop 1 to stop 2, costing 5.\n- Take the express route from stop 2 to stop 3, costing 3 + 6 = 9.\nThe total cost is 10 + 5 + 9 = 24.\nNote that the expressCost is paid again to transfer back to the express route.\n\n \nConstraints:\n\nn == regular.length == express.length\n1 <= n <= 105\n1 <= regular[i], express[i], expressCost <= 105\n\n", "hints": ["Notice and evaluate the different ways there are to move from one stop to the next.", "From the express route at a previous stop, we can use either the express route or the regular route to the next stop without paying expressCost.", "From the regular route at a previous stop, we can either use the express route after paying expressCost or use the regular route without paying expressCost.", "Iterate through the stops and compare the above cases to obtain the minimum costs for each stop."], "exampleTestcases": "[1,6,9,5]\n[5,2,3,10]\n8\n[11,5,13]\n[7,10,6]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> minimumCosts(vector<int>& regular, vector<int>& express, int expressCost) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long[] minimumCosts(int[] regular, int[] express, int expressCost) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCosts(self, regular, express, expressCost):\n        \"\"\"\n        :type regular: List[int]\n        :type express: List[int]\n        :type expressCost: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCosts(self, regular: List[int], express: List[int], expressCost: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* minimumCosts(int* regular, int regularSize, int* express, int expressSize, int expressCost, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long[] MinimumCosts(int[] regular, int[] express, int expressCost) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} regular\n * @param {number[]} express\n * @param {number} expressCost\n * @return {number[]}\n */\nvar minimumCosts = function(regular, express, expressCost) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCosts(regular: number[], express: number[], expressCost: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $regular\n     * @param Integer[] $express\n     * @param Integer $expressCost\n     * @return Integer[]\n     */\n    function minimumCosts($regular, $express, $expressCost) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCosts(_ regular: [Int], _ express: [Int], _ expressCost: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCosts(regular: IntArray, express: IntArray, expressCost: Int): LongArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> minimumCosts(List<int> regular, List<int> express, int expressCost) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCosts(regular []int, express []int, expressCost int) []int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} regular\n# @param {Integer[]} express\n# @param {Integer} express_cost\n# @return {Integer[]}\ndef minimum_costs(regular, express, express_cost)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCosts(regular: Array[Int], express: Array[Int], expressCost: Int): Array[Long] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_costs(regular: Vec<i32>, express: Vec<i32>, express_cost: i32) -> Vec<i64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-costs regular express expressCost)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_costs(Regular :: [integer()], Express :: [integer()], ExpressCost :: integer()) -> [integer()].\nminimum_costs(Regular, Express, ExpressCost) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_costs(regular :: [integer], express :: [integer], express_cost :: integer) :: [integer]\n  def minimum_costs(regular, express, express_cost) do\n    \n  end\nend"}}}