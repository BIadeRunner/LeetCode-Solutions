{"questionId": "1067", "acRate": 55.219625323134856, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1066", "paidOnly": true, "status": "ac", "title": "Campus Bikes II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}, {"name": "Bitmask", "id": "VG9waWNUYWdOb2RlOjYxMDc4", "slug": "bitmask"}], "titleSlug": "campus-bikes-ii", "content": "<p>On a campus represented as a 2D grid, there are <code>n</code> workers and <code>m</code> bikes, with <code>n &lt;= m</code>. Each worker and bike is a 2D coordinate on this grid.</p>\n\n<p>We assign one unique bike to each worker so that the sum of the <strong>Manhattan distances</strong> between each worker and their assigned bike is minimized.</p>\n\n<p>Return <code>the minimum possible sum of Manhattan distances between each worker and their assigned bike</code>.</p>\n\n<p>The <strong>Manhattan distance</strong> between two points <code>p1</code> and <code>p2</code> is <code>Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png\" style=\"width: 376px; height: 366px;\" />\n<pre>\n<strong>Input:</strong> workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nWe assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png\" style=\"width: 376px; height: 366px;\" />\n<pre>\n<strong>Input:</strong> workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>\nWe first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]\n<strong>Output:</strong> 4995\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == workers.length</code></li>\n\t<li><code>m == bikes.length</code></li>\n\t<li><code>1 &lt;= n &lt;= m &lt;= 10</code></li>\n\t<li><code>workers[i].length == 2</code></li>\n\t<li><code>bikes[i].length == 2</code></li>\n\t<li><code>0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code></li>\n\t<li>All the workers and the bikes locations are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Model the problem with a dp(pos, mask) where pos represents the current bike to be assigned and mask the set of available workers."], "exampleTestcases": "[[0,0],[2,1]]\n[[1,2],[3,3]]\n[[0,0],[1,1],[2,0]]\n[[1,0],[2,2],[2,1]]\n[[0,0],[1,0],[2,0],[3,0],[4,0]]\n[[0,999],[1,999],[2,999],[3,999],[4,999]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int assignBikes(int[][] workers, int[][] bikes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def assignBikes(self, workers, bikes):\n        \"\"\"\n        :type workers: List[List[int]]\n        :type bikes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int assignBikes(int** workers, int workersSize, int* workersColSize, int** bikes, int bikesSize, int* bikesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int AssignBikes(int[][] workers, int[][] bikes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} workers\n * @param {number[][]} bikes\n * @return {number}\n */\nvar assignBikes = function(workers, bikes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function assignBikes(workers: number[][], bikes: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $workers\n     * @param Integer[][] $bikes\n     * @return Integer\n     */\n    function assignBikes($workers, $bikes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func assignBikes(_ workers: [[Int]], _ bikes: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun assignBikes(workers: Array<IntArray>, bikes: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int assignBikes(List<List<int>> workers, List<List<int>> bikes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func assignBikes(workers [][]int, bikes [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} workers\n# @param {Integer[][]} bikes\n# @return {Integer}\ndef assign_bikes(workers, bikes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def assignBikes(workers: Array[Array[Int]], bikes: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn assign_bikes(workers: Vec<Vec<i32>>, bikes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (assign-bikes workers bikes)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec assign_bikes(Workers :: [[integer()]], Bikes :: [[integer()]]) -> integer().\nassign_bikes(Workers, Bikes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec assign_bikes(workers :: [[integer]], bikes :: [[integer]]) :: integer\n  def assign_bikes(workers, bikes) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "campus-bikes", "title": "Campus Bikes", "isPaidOnly": true}]}