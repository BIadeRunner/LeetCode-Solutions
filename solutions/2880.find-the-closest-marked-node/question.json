{"question_id": "2880", "problem_slug": "find-the-closest-marked-node", "problem_title": "Find the Closest Marked Node", "content": "You are given a positive integer n which is the number of nodes of a 0-indexed directed weighted graph and a 0-indexed 2D array edges where edges[i] = [ui, vi, wi] indicates that there is an edge from node ui to node vi with weight wi.\nYou are also given a node s and a node array marked; your task is to find the minimum distance from s to any of the nodes in marked.\nReturn an integer denoting the minimum distance from s to any node in marked or -1 if there are no paths from s to any of the marked nodes.\n \nExample 1:\n\nInput: n = 4, edges = [[0,1,1],[1,2,3],[2,3,2],[0,3,4]], s = 0, marked = [2,3]\nOutput: 4\nExplanation: There is one path from node 0 (the green node) to node 2 (a red node), which is 0->1->2, and has a distance of 1 + 3 = 4.\nThere are two paths from node 0 to node 3 (a red node), which are 0->1->2->3 and 0->3, the first one has a distance of 1 + 3 + 2 = 6 and the second one has a distance of 4.\nThe minimum of them is 4.\n\n\nExample 2:\n\nInput: n = 5, edges = [[0,1,2],[0,2,4],[1,3,1],[2,3,3],[3,4,2]], s = 1, marked = [0,4]\nOutput: 3\nExplanation: There are no paths from node 1 (the green node) to node 0 (a red node).\nThere is one path from node 1 to node 4 (a red node), which is 1->3->4, and has a distance of 1 + 2 = 3.\nSo the answer is 3.\n\n\nExample 3:\n\nInput: n = 4, edges = [[0,1,1],[1,2,3],[2,3,2]], s = 3, marked = [0,1]\nOutput: -1\nExplanation: There are no paths from node 3 (the green node) to any of the marked nodes (the red nodes), so the answer is -1.\n\n\n \nConstraints:\n\n2 <= n <= 500\n1 <= edges.length <= 104\nedges[i].length = 3\n0 <= edges[i][0], edges[i][1] <= n - 1\n1 <= edges[i][2] <= 106\n1 <= marked.length <= n - 1\n0 <= s, marked[i] <= n - 1\ns != marked[i]\nmarked[i] != marked[j] for every i != j\nThe graph might have repeated edges.\nThe graph is generated such that it has no self-loops.\n\n", "hints": ["Find the distance from s to all nodes.", "You can use Dijkstra to find them.", "Find the minimum distance between marked nodes."], "exampleTestcases": "4\n[[0,1,1],[1,2,3],[2,3,2],[0,3,4]]\n0\n[2,3]\n5\n[[0,1,2],[0,2,4],[1,3,1],[2,3,3],[3,4,2]]\n1\n[0,4]\n4\n[[0,1,1],[1,2,3],[2,3,2]]\n3\n[0,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumDistance(int n, vector<vector<int>>& edges, int s, vector<int>& marked) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumDistance(int n, List<List<Integer>> edges, int s, int[] marked) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumDistance(self, n, edges, s, marked):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type s: int\n        :type marked: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumDistance(self, n: int, edges: List[List[int]], s: int, marked: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumDistance(int n, int** edges, int edgesSize, int* edgesColSize, int s, int* marked, int markedSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumDistance(int n, IList<IList<int>> edges, int s, int[] marked) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} s\n * @param {number[]} marked\n * @return {number}\n */\nvar minimumDistance = function(n, edges, s, marked) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumDistance(n: number, edges: number[][], s: number, marked: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $s\n     * @param Integer[] $marked\n     * @return Integer\n     */\n    function minimumDistance($n, $edges, $s, $marked) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumDistance(_ n: Int, _ edges: [[Int]], _ s: Int, _ marked: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumDistance(n: Int, edges: List<List<Int>>, s: Int, marked: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumDistance(int n, List<List<int>> edges, int s, List<int> marked) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumDistance(n int, edges [][]int, s int, marked []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} s\n# @param {Integer[]} marked\n# @return {Integer}\ndef minimum_distance(n, edges, s, marked)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumDistance(n: Int, edges: List[List[Int]], s: Int, marked: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_distance(n: i32, edges: Vec<Vec<i32>>, s: i32, marked: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-distance n edges s marked)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_distance(N :: integer(), Edges :: [[integer()]], S :: integer(), Marked :: [integer()]) -> integer().\nminimum_distance(N, Edges, S, Marked) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_distance(n :: integer, edges :: [[integer]], s :: integer, marked :: [integer]) :: integer\n  def minimum_distance(n, edges, s, marked) do\n    \n  end\nend"}}}