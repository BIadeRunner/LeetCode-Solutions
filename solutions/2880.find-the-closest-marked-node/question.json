{"questionId": "2880", "acRate": 58.203005213124804, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2737", "paidOnly": true, "status": "ac", "title": "Find the Closest Marked Node", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Shortest Path", "id": "VG9waWNUYWdOb2RlOjYxMDc2", "slug": "shortest-path"}], "titleSlug": "find-the-closest-marked-node", "content": "<p>You are given a positive integer <code>n</code> which is the number of nodes of a <strong>0-indexed directed weighted</strong> graph and a <strong>0-indexed</strong> <strong>2D array</strong> <code>edges</code> where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge from node <code>u<sub>i</sub></code> to node <code>v<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p>\n\n<p>You are also given a node <code>s</code> and a node array <code>marked</code>; your task is to find the <strong>minimum</strong> distance from <code>s</code> to <strong>any</strong> of the nodes in <code>marked</code>.</p>\n\n<p>Return <em>an integer denoting the minimum distance from </em><code>s</code><em> to any node in </em><code>marked</code><em> or </em><code>-1</code><em> if there are no paths from s to any of the marked nodes</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1,1],[1,2,3],[2,3,2],[0,3,4]], s = 0, marked = [2,3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There is one path from node 0 (the green node) to node 2 (a red node), which is 0-&gt;1-&gt;2, and has a distance of 1 + 3 = 4.\nThere are two paths from node 0 to node 3 (a red node), which are 0-&gt;1-&gt;2-&gt;3 and 0-&gt;3, the first one has a distance of 1 + 3 + 2 = 6 and the second one has a distance of 4.\nThe minimum of them is 4.\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/06/13/image_2023-06-13_16-34-38.png\" style=\"width: 185px; height: 180px;\" /></p>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, edges = [[0,1,2],[0,2,4],[1,3,1],[2,3,3],[3,4,2]], s = 1, marked = [0,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are no paths from node 1 (the green node) to node 0 (a red node).\nThere is one path from node 1 to node 4 (a red node), which is 1-&gt;3-&gt;4, and has a distance of 1 + 2 = 3.\nSo the answer is 3.\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/06/13/image_2023-06-13_16-35-13.png\" style=\"width: 300px; height: 285px;\" /></p>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1,1],[1,2,3],[2,3,2]], s = 3, marked = [0,1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no paths from node 3 (the green node) to any of the marked nodes (the red nodes), so the answer is -1.\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/06/13/image_2023-06-13_16-35-47.png\" style=\"width: 420px; height: 80px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>edges[i].length = 3</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= edges[i][2] &lt;=&nbsp;10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= marked.length&nbsp;&lt;= n - 1</code></li>\n\t<li><code>0 &lt;= s, marked[i]&nbsp;&lt;= n - 1</code></li>\n\t<li><code>s != marked[i]</code></li>\n\t<li><code>marked[i] != marked[j]</code> for every <code>i != j</code></li>\n\t<li>The&nbsp;graph might have&nbsp;<strong>repeated edges</strong>.</li>\n\t<li>The graph is generated such that it has no&nbsp;<strong>self-loops</strong>.</li>\n</ul>\n", "hints": ["Find the distance from s to all nodes.", "You can use Dijkstra to find them.", "Find the minimum distance between marked nodes."], "exampleTestcases": "4\n[[0,1,1],[1,2,3],[2,3,2],[0,3,4]]\n0\n[2,3]\n5\n[[0,1,2],[0,2,4],[1,3,1],[2,3,3],[3,4,2]]\n1\n[0,4]\n4\n[[0,1,1],[1,2,3],[2,3,2]]\n3\n[0,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumDistance(int n, vector<vector<int>>& edges, int s, vector<int>& marked) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumDistance(int n, List<List<Integer>> edges, int s, int[] marked) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumDistance(self, n, edges, s, marked):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type s: int\n        :type marked: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumDistance(self, n: int, edges: List[List[int]], s: int, marked: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumDistance(int n, int** edges, int edgesSize, int* edgesColSize, int s, int* marked, int markedSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumDistance(int n, IList<IList<int>> edges, int s, int[] marked) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} s\n * @param {number[]} marked\n * @return {number}\n */\nvar minimumDistance = function(n, edges, s, marked) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumDistance(n: number, edges: number[][], s: number, marked: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $s\n     * @param Integer[] $marked\n     * @return Integer\n     */\n    function minimumDistance($n, $edges, $s, $marked) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumDistance(_ n: Int, _ edges: [[Int]], _ s: Int, _ marked: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumDistance(n: Int, edges: List<List<Int>>, s: Int, marked: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumDistance(int n, List<List<int>> edges, int s, List<int> marked) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumDistance(n int, edges [][]int, s int, marked []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} s\n# @param {Integer[]} marked\n# @return {Integer}\ndef minimum_distance(n, edges, s, marked)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumDistance(n: Int, edges: List[List[Int]], s: Int, marked: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_distance(n: i32, edges: Vec<Vec<i32>>, s: i32, marked: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-distance n edges s marked)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_distance(N :: integer(), Edges :: [[integer()]], S :: integer(), Marked :: [integer()]) -> integer().\nminimum_distance(N, Edges, S, Marked) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_distance(n :: integer, edges :: [[integer]], s :: integer, marked :: [integer]) :: integer\n  def minimum_distance(n, edges, s, marked) do\n    \n  end\nend"}], "similarQuestionList": []}