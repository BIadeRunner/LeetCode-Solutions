{"question_id": "367", "problem_slug": "valid-perfect-square", "problem_title": "Valid Perfect Square", "content": "Given a positive integer num, return true if num is a perfect square or false otherwise.\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\nYou must not use any built-in library function, such as sqrt.\n \nExample 1:\n\nInput: num = 16\nOutput: true\nExplanation: We return true because 4 * 4 = 16 and 4 is an integer.\n\nExample 2:\n\nInput: num = 14\nOutput: false\nExplanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n\n \nConstraints:\n\n1 <= num <= 231 - 1\n\n", "hints": [], "exampleTestcases": "16\n14", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPerfectSquare(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isPerfectSquare(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isPerfectSquare(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsPerfectSquare(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPerfectSquare = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isPerfectSquare(num: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function isPerfectSquare($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isPerfectSquare(_ num: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isPerfectSquare(num: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isPerfectSquare(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isPerfectSquare(num int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef is_perfect_square(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isPerfectSquare(num: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_perfect_square(num: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-perfect-square num)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_perfect_square(Num :: integer()) -> boolean().\nis_perfect_square(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_perfect_square(num :: integer) :: boolean\n  def is_perfect_square(num) do\n    \n  end\nend"}}}