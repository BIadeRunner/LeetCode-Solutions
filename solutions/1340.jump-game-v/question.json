{"questionId": "1466", "acRate": 63.70832333893019, "difficulty": "Hard", "freqBar": 35.499487410500734, "frontendQuestionId": "1340", "paidOnly": false, "status": "ac", "title": "Jump Game V", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "jump-game-v", "content": "<p>Given an array of&nbsp;integers <code>arr</code> and an integer <code>d</code>. In one step you can jump from index <code>i</code> to index:</p>\n\n<ul>\n\t<li><code>i + x</code> where:&nbsp;<code>i + x &lt; arr.length</code> and <code> 0 &lt;&nbsp;x &lt;= d</code>.</li>\n\t<li><code>i - x</code> where:&nbsp;<code>i - x &gt;= 0</code> and <code> 0 &lt;&nbsp;x &lt;= d</code>.</li>\n</ul>\n\n<p>In addition, you can only jump from index <code>i</code> to index <code>j</code>&nbsp;if <code>arr[i] &gt; arr[j]</code> and <code>arr[i] &gt; arr[k]</code> for all indices <code>k</code> between <code>i</code> and <code>j</code> (More formally <code>min(i,&nbsp;j) &lt; k &lt; max(i, j)</code>).</p>\n\n<p>You can choose any index of the array and start jumping. Return <em>the maximum number of indices</em>&nbsp;you can visit.</p>\n\n<p>Notice that you can not jump outside of the array at any time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg\" style=\"width: 633px; height: 419px;\" />\n<pre>\n<strong>Input:</strong> arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can start at index 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 &gt; 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,3,3,3,3], d = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can start at any index. You always cannot jump to any index.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [7,6,5,4,3,2,1], d = 1\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Start at index 0. You can visit all the indicies. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= d &lt;= arr.length</code></li>\n</ul>\n", "hints": ["Use dynamic programming. dp[i] is max jumps you can do starting from index i. Answer is max(dp[i]).", "dp[i] = 1 + max (dp[j]) where j is all indices you can reach from i."], "exampleTestcases": "[6,4,14,6,8,13,9,7,10,6,12]\n2\n[3,3,3,3,3]\n3\n[7,6,5,4,3,2,1]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxJumps(vector<int>& arr, int d) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxJumps(int[] arr, int d) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxJumps(self, arr, d):\n        \"\"\"\n        :type arr: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxJumps(self, arr: List[int], d: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxJumps(int* arr, int arrSize, int d) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxJumps(int[] arr, int d) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} d\n * @return {number}\n */\nvar maxJumps = function(arr, d) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxJumps(arr: number[], d: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $d\n     * @return Integer\n     */\n    function maxJumps($arr, $d) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxJumps(_ arr: [Int], _ d: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxJumps(arr: IntArray, d: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxJumps(List<int> arr, int d) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxJumps(arr []int, d int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} d\n# @return {Integer}\ndef max_jumps(arr, d)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxJumps(arr: Array[Int], d: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_jumps(arr: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-jumps arr d)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_jumps(Arr :: [integer()], D :: integer()) -> integer().\nmax_jumps(Arr, D) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_jumps(arr :: [integer], d :: integer) :: integer\n  def max_jumps(arr, d) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "jump-game-vii", "title": "Jump Game VII", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game-viii", "title": "Jump Game VIII", "isPaidOnly": true}]}