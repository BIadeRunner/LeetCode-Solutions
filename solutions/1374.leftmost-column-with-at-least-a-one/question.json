{"question_id": "1374", "problem_slug": "leftmost-column-with-at-least-a-one", "problem_title": "Leftmost Column with at Least a One", "content": "A row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.\nGiven a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.\nYou can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:\n\nBinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed).\nBinaryMatrix.dimensions() returns the dimensions of the matrix as a list of 2 elements [rows, cols], which means the matrix is rows x cols.\n\nSubmissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\nFor custom testing purposes, the input will be the entire binary matrix mat. You will not have access to the binary matrix directly.\n \nExample 1:\n\n\nInput: mat = [[0,0],[1,1]]\nOutput: 0\n\nExample 2:\n\n\nInput: mat = [[0,0],[0,1]]\nOutput: 1\n\nExample 3:\n\n\nInput: mat = [[0,0],[0,0]]\nOutput: -1\n\n \nConstraints:\n\nrows == mat.length\ncols == mat[i].length\n1 <= rows, cols <= 100\nmat[i][j] is either 0 or 1.\nmat[i] is sorted in non-decreasing order.\n\n", "hints": ["1. (Binary Search) For each row do a binary search to find the leftmost one on that row and update the answer.", "2. (Optimal Approach) Imagine there is a pointer p(x, y) starting from top right corner. p can only move left or down. If the value at p is 0, move down. If the value at p is 1, move left. Try to figure out the correctness and time complexity of this algorithm."], "exampleTestcases": "[[0,0],[1,1]]\n[[0,0],[0,1]]\n[[0,0],[0,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *   public:\n *     int get(int row, int col);\n *     vector<int> dimensions();\n * };\n */\n\nclass Solution {\npublic:\n    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface BinaryMatrix {\n *     public int get(int row, int col) {}\n *     public List<Integer> dimensions {}\n * };\n */\n\nclass Solution {\n    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class BinaryMatrix(object):\n#    def get(self, row, col):\n#        \"\"\"\n#        :type row : int, col : int\n#        :rtype int\n#        \"\"\"\n#\n#    def dimensions:\n#        \"\"\"\n#        :rtype list[]\n#        \"\"\"\n\nclass Solution(object):\n    def leftMostColumnWithOne(self, binaryMatrix):\n        \"\"\"\n        :type binaryMatrix: BinaryMatrix\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class BinaryMatrix(object):\n#    def get(self, row: int, col: int) -> int:\n#    def dimensions(self) -> list[]:\n\nclass Solution:\n    def leftMostColumnWithOne(self, binaryMatrix: 'BinaryMatrix') -> int:\n        "}, "C": {"langSlug": "c", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * struct BinaryMatrix {\n *     int (*get)(struct BinaryMatrix*, int, int);\n *     int* (*dimensions)(struct BinaryMatrix*);\n * };\n */\n\nint leftMostColumnWithOne(struct BinaryMatrix* matrix) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     public int Get(int row, int col) {}\n *     public IList<int> Dimensions() {}\n * }\n */\n\nclass Solution {\n    public int LeftMostColumnWithOne(BinaryMatrix binaryMatrix) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * function BinaryMatrix() {\n *     @param {integer} row, col\n *     @return {integer}\n *     this.get = function(row, col) {\n *         ...\n *     };\n *\n *     @return {[integer, integer]}\n *     this.dimensions = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {BinaryMatrix} binaryMatrix\n * @return {number}\n */\nvar leftMostColumnWithOne = function(binaryMatrix) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *      get(row: number, col: number): number {}\n *\n *      dimensions(): number[] {}\n * }\n */\n\nfunction leftMostColumnWithOne(binaryMatrix: BinaryMatrix) {\n\t\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     public function get($row, $col) {} @return Integer\n *     public function dimensions() {} @return Integer[]\n * }\n */\n\nclass Solution {\n    /**\n     * @param BinaryMatrix $binaryMatrix\n     * @return Integer\n     */\n    public function leftMostColumnWithOne($binaryMatrix) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * public class BinaryMatrix {\n *     public func get(_ row: Int, _ col: Int) -> Int {}\n *     public func dimensions() -> [Int] {}\n * };\n */\n\nclass Solution {\n    func leftMostColumnWithOne(_ binaryMatrix: BinaryMatrix) -> Int {\n\t\t\n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     fun get(row:Int, col:Int):Int {}\n *     fun dimensions():List<Int> {}\n * }\n */\n\nclass Solution {\n    fun leftMostColumnWithOne(binaryMatrix:BinaryMatrix):Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * type BinaryMatrix struct {\n *     Get func(int, int) int\n *     Dimensions func() []int\n * }\n */\n\nfunc leftMostColumnWithOne(binaryMatrix BinaryMatrix) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class BinaryMatrix\n# \tdef get(row, col)\n# \t\t@return {Integer}\n# \tend\n#\n# \tdef dimensions()\n# \t\t@return {List[Integer]}\n# \tend\n# end\n\n# @param {BinaryMatrix} binaryMatrix\n# @return {Integer}\ndef leftMostColumnWithOne(binaryMatrix)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     def get(row: Int, col: Int): Int = {}\n *     def dimensions(): Array[Int] = {}\n * }\n */\n\nobject Solution {\n    def leftMostColumnWithOne(binaryMatrix: BinaryMatrix): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n *  struct BinaryMatrix;\n *  impl BinaryMatrix {\n *      fn get(&self, row: i32, col: i32) -> i32;\n *     fn dimensions() -> Vec<i32>;\n * };\n */\n\nimpl Solution {\n    pub fn left_most_column_with_one(binaryMatrix: &BinaryMatrix) -> i32 {\n         \n    }\n}"}}}