{"questionId": "2684", "acRate": 34.874921168803866, "difficulty": "Easy", "freqBar": 30.265150635476374, "frontendQuestionId": "2660", "paidOnly": false, "status": "ac", "title": "Determine the Winner of a Bowling Game", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "determine-the-winner-of-a-bowling-game", "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code><font face=\"monospace\">player1</font></code> and <code>player2</code>, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.</p>\n\n<p>The bowling game consists of <code>n</code> turns, and the number of pins in each turn is exactly 10.</p>\n\n<p>Assume a player hits <code>x<sub>i</sub></code> pins in the i<sup>th</sup> turn. The value of the i<sup>th</sup> turn for the player is:</p>\n\n<ul>\n\t<li><code>2x<sub>i</sub></code> if the player hits 10 pins <b>in either (i - 1)<sup>th</sup> or (i - 2)<sup>th</sup> turn</b>.</li>\n\t<li>Otherwise, it is <code>x<sub>i</sub></code>.</li>\n</ul>\n\n<p>The <strong>score</strong> of the player is the sum of the values of their <code>n</code> turns.</p>\n\n<p>Return</p>\n\n<ul>\n\t<li>1 if the score of player 1 is more than the score of player 2,</li>\n\t<li>2 if the score of player 2 is more than the score of player 1, and</li>\n\t<li>0 in case of a draw.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">player1 = [5,10,3,2], player2 = [6,5,7,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The score of player 1 is 5 + 10 + 2*3 + 2*2 = 25.</p>\n\n<p>The score of player 2 is 6 + 5 + 7 + 3 = 21.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">player1 = [3,5,7,6], player2 = [8,10,10,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The score of player 1 is 3 + 5 + 7 + 6 = 21.</p>\n\n<p>The score of player 2 is 8 + 10 + 2*10 + 2*2 = 42.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">player1 = [2,3], player2 = [4,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The score of player1 is 2 + 3 = 5.</p>\n\n<p>The score of player2 is 4 + 1 = 5.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The score of player1 is 1 + 1 + 1 + 10 + 2*10 + 2*10 + 2*10 = 73.</p>\n\n<p>The score of player2 is 10 + 2*10 + 2*10 + 2*10 + 2*1 + 2*1 + 1 = 75.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == player1.length == player2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= player1[i], player2[i] &lt;= 10</code></li>\n</ul>\n", "hints": ["Think about simulating the process to calculate the answer.", "Iterate over each element and check the previous two elements. See if one of them is 10 and can affect the score."], "exampleTestcases": "[5,10,3,2]\n[6,5,7,3]\n[3,5,7,6]\n[8,10,10,2]\n[2,3]\n[4,1]\n[1,1,1,10,10,10,10]\n[10,10,10,10,1,1,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int isWinner(vector<int>& player1, vector<int>& player2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int isWinner(int[] player1, int[] player2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isWinner(self, player1, player2):\n        \"\"\"\n        :type player1: List[int]\n        :type player2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isWinner(self, player1: List[int], player2: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int isWinner(int* player1, int player1Size, int* player2, int player2Size) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IsWinner(int[] player1, int[] player2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} player1\n * @param {number[]} player2\n * @return {number}\n */\nvar isWinner = function(player1, player2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isWinner(player1: number[], player2: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $player1\n     * @param Integer[] $player2\n     * @return Integer\n     */\n    function isWinner($player1, $player2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isWinner(_ player1: [Int], _ player2: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isWinner(player1: IntArray, player2: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int isWinner(List<int> player1, List<int> player2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isWinner(player1 []int, player2 []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} player1\n# @param {Integer[]} player2\n# @return {Integer}\ndef is_winner(player1, player2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isWinner(player1: Array[Int], player2: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_winner(player1: Vec<i32>, player2: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-winner player1 player2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_winner(Player1 :: [integer()], Player2 :: [integer()]) -> integer().\nis_winner(Player1, Player2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_winner(player1 :: [integer], player2 :: [integer]) :: integer\n  def is_winner(player1, player2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "high-five", "title": "High Five", "isPaidOnly": true}]}