{"questionId": "2693", "acRate": 66.8602054488611, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2548", "paidOnly": true, "status": "ac", "title": "Maximum Price to Fill a Bag", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "maximum-price-to-fill-a-bag", "content": "<p>You are given a 2D integer array <code>items</code> where <code>items[i] = [price<sub>i</sub>, weight<sub>i</sub>]</code> denotes the price and weight of the <code>i<sup>th</sup></code> item, respectively.</p>\n\n<p>You are also given a <strong>positive</strong> integer <code>capacity</code>.</p>\n\n<p>Each item can be divided into two items with ratios <code>part1</code> and <code>part2</code>, where <code>part1 + part2 == 1</code>.</p>\n\n<ul>\n\t<li>The weight of the first item is <code>weight<sub>i</sub> * part1</code> and the price of the first item is <code>price<sub>i</sub> * part1</code>.</li>\n\t<li>Similarly, the weight of the second item is <code>weight<sub>i</sub> * part2</code> and the price of the second item is <code>price<sub>i</sub> * part2</code>.</li>\n</ul>\n\n<p>Return <em><strong>the maximum total price</strong> to fill a bag of capacity</em> <code>capacity</code> <em>with given items</em>. If it is impossible to fill a bag return <code>-1</code>. Answers within <code>10<sup>-5</sup></code> of the <strong>actual answer</strong> will be considered accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[50,1],[10,8]], capacity = 5\n<strong>Output:</strong> 55.00000\n<strong>Explanation:</strong> \nWe divide the 2<sup>nd</sup> item into two parts with part1 = 0.5 and part2 = 0.5.\nThe price and weight of the 1<sup>st</sup> item are 5, 4. And similarly, the price and the weight of the 2<sup>nd</sup> item are 5, 4.\nThe array items after operation becomes [[50,1],[5,4],[5,4]]. \nTo fill a bag with capacity 5 we take the 1<sup>st</sup> element with a price of 50 and the 2<sup>nd</sup> element with a price of 5.\nIt can be proved that 55.0 is the maximum total price that we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[100,30]], capacity = 50\n<strong>Output:</strong> -1.00000\n<strong>Explanation:</strong> It is impossible to fill a bag with the given item.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>items[i].length == 2</code></li>\n\t<li><code>1 &lt;= price<sub>i</sub>, weight<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= capacity &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["If the total weight of the items is less than the capacity, then it is impossible to fill a bag.", "The intended solution greedily chooses items to fill a bag.", "Sort items in decreasing order of price/weight and greedily fill a bag. The main intuition behind the greedy strategy is that we try to take the highest possible price for 1 unit of weight."], "exampleTestcases": "[[50,1],[10,8]]\n5\n[[100,30]]\n50", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double maxPrice(vector<vector<int>>& items, int capacity) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double maxPrice(int[][] items, int capacity) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxPrice(self, items, capacity):\n        \"\"\"\n        :type items: List[List[int]]\n        :type capacity: int\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double maxPrice(int** items, int itemsSize, int* itemsColSize, int capacity) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double MaxPrice(int[][] items, int capacity) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} items\n * @param {number} capacity\n * @return {number}\n */\nvar maxPrice = function(items, capacity) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxPrice(items: number[][], capacity: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $items\n     * @param Integer $capacity\n     * @return Float\n     */\n    function maxPrice($items, $capacity) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxPrice(_ items: [[Int]], _ capacity: Int) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxPrice(items: Array<IntArray>, capacity: Int): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double maxPrice(List<List<int>> items, int capacity) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxPrice(items [][]int, capacity int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} items\n# @param {Integer} capacity\n# @return {Float}\ndef max_price(items, capacity)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxPrice(items: Array[Array[Int]], capacity: Int): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_price(items: Vec<Vec<i32>>, capacity: i32) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-price items capacity)\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_price(Items :: [[integer()]], Capacity :: integer()) -> float().\nmax_price(Items, Capacity) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_price(items :: [[integer]], capacity :: integer) :: float\n  def max_price(items, capacity) do\n    \n  end\nend"}], "similarQuestionList": []}