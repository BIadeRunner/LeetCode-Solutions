{"questionId": "1295", "acRate": 54.769511638521216, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1954", "paidOnly": false, "status": "ac", "title": "Minimum Garden Perimeter to Collect Enough Apples", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "minimum-garden-perimeter-to-collect-enough-apples", "content": "<p>In a garden represented as an infinite 2D grid, there is an apple tree planted at <strong>every</strong> integer coordinate. The apple tree planted at an integer coordinate <code>(i, j)</code> has <code>|i| + |j|</code> apples growing on it.</p>\n\n<p>You will buy an axis-aligned <strong>square plot</strong> of land that is centered at <code>(0, 0)</code>.</p>\n\n<p>Given an integer <code>neededApples</code>, return <em>the <strong>minimum perimeter</strong> of a plot such that <strong>at least</strong></em><strong> </strong><code>neededApples</code> <em>apples are <strong>inside or on</strong> the perimeter of that plot</em>.</p>\n\n<p>The value of <code>|x|</code> is defined as:</p>\n\n<ul>\n\t<li><code>x</code> if <code>x &gt;= 0</code></li>\n\t<li><code>-x</code> if <code>x &lt; 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/30/1527_example_1_2.png\" style=\"width: 442px; height: 449px;\" />\n<pre>\n<strong>Input:</strong> neededApples = 1\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> neededApples = 13\n<strong>Output:</strong> 16\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> neededApples = 1000000000\n<strong>Output:</strong> 5040\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= neededApples &lt;= 10<sup>15</sup></code></li>\n</ul>\n", "hints": ["Find a formula for the number of apples inside a square with a side length L.", "Iterate over the possible lengths of the square until enough apples are collected."], "exampleTestcases": "1\n13\n1000000000", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumPerimeter(long long neededApples) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minimumPerimeter(long neededApples) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumPerimeter(self, neededApples):\n        \"\"\"\n        :type neededApples: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minimumPerimeter(long long neededApples) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinimumPerimeter(long neededApples) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} neededApples\n * @return {number}\n */\nvar minimumPerimeter = function(neededApples) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumPerimeter(neededApples: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $neededApples\n     * @return Integer\n     */\n    function minimumPerimeter($neededApples) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumPerimeter(_ neededApples: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumPerimeter(neededApples: Long): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumPerimeter(int neededApples) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumPerimeter(neededApples int64) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} needed_apples\n# @return {Integer}\ndef minimum_perimeter(needed_apples)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumPerimeter(neededApples: Long): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_perimeter(needed_apples: i64) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-perimeter neededApples)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_perimeter(NeededApples :: integer()) -> integer().\nminimum_perimeter(NeededApples) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_perimeter(needed_apples :: integer) :: integer\n  def minimum_perimeter(needed_apples) do\n    \n  end\nend"}], "similarQuestionList": []}