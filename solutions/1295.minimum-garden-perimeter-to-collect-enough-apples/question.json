{"question_id": "1295", "problem_slug": "minimum-garden-perimeter-to-collect-enough-apples", "problem_title": "Minimum Garden Perimeter to Collect Enough Apples", "content": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.\nYou will buy an axis-aligned square plot of land that is centered at (0, 0).\nGiven an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.\nThe value of |x| is defined as:\n\nx if x >= 0\n-x if x < 0\n\n \nExample 1:\n\n\nInput: neededApples = 1\nOutput: 8\nExplanation: A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n\nExample 2:\n\nInput: neededApples = 13\nOutput: 16\n\nExample 3:\n\nInput: neededApples = 1000000000\nOutput: 5040\n\n \nConstraints:\n\n1 <= neededApples <= 1015\n\n", "hints": ["Find a formula for the number of apples inside a square with a side length L.", "Iterate over the possible lengths of the square until enough apples are collected."], "exampleTestcases": "1\n13\n1000000000", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minimumPerimeter(long long neededApples) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long minimumPerimeter(long neededApples) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumPerimeter(self, neededApples):\n        \"\"\"\n        :type neededApples: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long minimumPerimeter(long long neededApples) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MinimumPerimeter(long neededApples) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} neededApples\n * @return {number}\n */\nvar minimumPerimeter = function(neededApples) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumPerimeter(neededApples: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $neededApples\n     * @return Integer\n     */\n    function minimumPerimeter($neededApples) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumPerimeter(_ neededApples: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumPerimeter(neededApples: Long): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumPerimeter(int neededApples) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumPerimeter(neededApples int64) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} needed_apples\n# @return {Integer}\ndef minimum_perimeter(needed_apples)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumPerimeter(neededApples: Long): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_perimeter(needed_apples: i64) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-perimeter neededApples)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_perimeter(NeededApples :: integer()) -> integer().\nminimum_perimeter(NeededApples) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_perimeter(needed_apples :: integer) :: integer\n  def minimum_perimeter(needed_apples) do\n    \n  end\nend"}}}