{"question_id": "1004", "problem_slug": "least-operators-to-express-number", "problem_title": "Least Operators to Express Number", "content": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\n\nThe division operator (/) returns rational numbers.\nThere are no parentheses placed anywhere.\nWe use the usual order of operations: multiplication and division happen before addition and subtraction.\nIt is not allowed to use the unary negation operator (-). For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.\n \nExample 1:\n\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n\nExample 2:\n\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n\nExample 3:\n\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n\n \nConstraints:\n\n2 <= x <= 100\n1 <= target <= 2 * 108\n\n", "hints": [], "exampleTestcases": "3\n19\n5\n501\n100\n100000000", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int leastOpsExpressTarget(int x, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def leastOpsExpressTarget(self, x, target):\n        \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int leastOpsExpressTarget(int x, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LeastOpsExpressTarget(int x, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */\nvar leastOpsExpressTarget = function(x, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function leastOpsExpressTarget(x: number, target: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $target\n     * @return Integer\n     */\n    function leastOpsExpressTarget($x, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func leastOpsExpressTarget(_ x: Int, _ target: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun leastOpsExpressTarget(x: Int, target: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int leastOpsExpressTarget(int x, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func leastOpsExpressTarget(x int, target int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} target\n# @return {Integer}\ndef least_ops_express_target(x, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn least_ops_express_target(x: i32, target: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (least-ops-express-target x target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec least_ops_express_target(X :: integer(), Target :: integer()) -> integer().\nleast_ops_express_target(X, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec least_ops_express_target(x :: integer, target :: integer) :: integer\n  def least_ops_express_target(x, target) do\n    \n  end\nend"}}}