{"question_id": "1003", "problem_slug": "minimum-area-rectangle-ii", "problem_title": "Minimum Area Rectangle II", "content": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.\nAnswers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\n\nInput: points = [[1,2],[2,1],[1,0],[0,1]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.\n\nExample 2:\n\n\nInput: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]\nOutput: 1.00000\nExplanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\n\nExample 3:\n\n\nInput: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]\nOutput: 0\nExplanation: There is no possible rectangle to form from these points.\n\n \nConstraints:\n\n1 <= points.length <= 50\npoints[i].length == 2\n0 <= xi, yi <= 4 * 104\nAll the given points are unique.\n\n", "hints": [], "exampleTestcases": "[[1,2],[2,1],[1,0],[0,1]]\n[[0,1],[2,1],[1,1],[1,0],[2,0]]\n[[0,3],[1,2],[3,1],[1,3],[2,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double minAreaFreeRect(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double minAreaFreeRect(int[][] points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minAreaFreeRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minAreaFreeRect(self, points: List[List[int]]) -> float:\n        "}, "C": {"langSlug": "c", "code": "double minAreaFreeRect(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double MinAreaFreeRect(int[][] points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minAreaFreeRect = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minAreaFreeRect(points: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function minAreaFreeRect($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minAreaFreeRect(_ points: [[Int]]) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minAreaFreeRect(points: Array<IntArray>): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double minAreaFreeRect(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minAreaFreeRect(points [][]int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Float}\ndef min_area_free_rect(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minAreaFreeRect(points: Array[Array[Int]]): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_area_free_rect(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-area-free-rect points)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_area_free_rect(Points :: [[integer()]]) -> float().\nmin_area_free_rect(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_area_free_rect(points :: [[integer]]) :: float\n  def min_area_free_rect(points) do\n    \n  end\nend"}}}