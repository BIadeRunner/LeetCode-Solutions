{"questionId": "1403", "acRate": 61.19759277833501, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1278", "paidOnly": false, "status": "ac", "title": "Palindrome Partitioning III", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "palindrome-partitioning-iii", "content": "<p>You are given a string <code>s</code> containing lowercase letters and an integer <code>k</code>. You need to :</p>\n\n<ul>\n\t<li>First, change some characters of <code>s</code> to other lowercase English letters.</li>\n\t<li>Then divide <code>s</code> into <code>k</code> non-empty disjoint substrings such that each substring is a palindrome.</li>\n</ul>\n\n<p>Return <em>the minimal number of characters that you need to change to divide the string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;You can split the string into &quot;ab&quot; and &quot;c&quot;, and change 1 character in &quot;ab&quot; to make it palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabbc&quot;, k = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;You can split the string into &quot;aa&quot;, &quot;bb&quot; and &quot;c&quot;, all of them are palindrome.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, k = 8\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 100</code>.</li>\n\t<li><code>s</code> only contains lowercase English letters.</li>\n</ul>\n", "hints": ["For each substring calculate the minimum number of steps to make it palindrome and store it in a table.", "Create a dp(pos, cnt) which means the minimum number of characters changed for the suffix of s starting on pos splitting the suffix on cnt chunks."], "exampleTestcases": "\"abc\"\n2\n\"aabbc\"\n3\n\"leetcode\"\n8", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int palindromePartition(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int palindromePartition(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def palindromePartition(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int palindromePartition(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PalindromePartition(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar palindromePartition = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function palindromePartition(s: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function palindromePartition($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func palindromePartition(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun palindromePartition(s: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int palindromePartition(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func palindromePartition(s string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef palindrome_partition(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def palindromePartition(s: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn palindrome_partition(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (palindrome-partition s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec palindrome_partition(S :: unicode:unicode_binary(), K :: integer()) -> integer().\npalindrome_partition(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec palindrome_partition(s :: String.t, k :: integer) :: integer\n  def palindrome_partition(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-changes-to-make-k-semi-palindromes", "title": "Minimum Changes to Make K Semi-palindromes", "isPaidOnly": false}]}