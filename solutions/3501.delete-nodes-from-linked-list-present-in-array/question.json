{"question_id": "3501", "problem_slug": "delete-nodes-from-linked-list-present-in-array", "problem_title": "Delete Nodes From Linked List Present in Array", "content": "You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.\n \nExample 1:\n\nInput: nums = [1,2,3], head = [1,2,3,4,5]\nOutput: [4,5]\nExplanation:\n\nRemove the nodes with values 1, 2, and 3.\n\nExample 2:\n\nInput: nums = [1], head = [1,2,1,2,1,2]\nOutput: [2,2,2]\nExplanation:\n\nRemove the nodes with value 1.\n\nExample 3:\n\nInput: nums = [5], head = [1,2,3,4]\nOutput: [1,2,3,4]\nExplanation:\n\nNo node has value 5.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\nAll elements in nums are unique.\nThe number of nodes in the given list is in the range [1, 105].\n1 <= Node.val <= 105\nThe input is generated such that there is at least one node in the linked list that has a value not present in nums.\n\n", "hints": ["Add all elements of <code>nums</code> into a Set.", "Scan the list to check if the current element should be deleted by checking the Set."], "exampleTestcases": "[1,2,3]\n[1,2,3,4,5]\n[1]\n[1,2,1,2,1,2]\n[5]\n[1,2,3,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* modifiedList(vector<int>& nums, ListNode* head) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def modifiedList(self, nums, head):\n        \"\"\"\n        :type nums: List[int]\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def modifiedList(self, nums: List[int], head: Optional[ListNode]) -> Optional[ListNode]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* modifiedList(int* nums, int numsSize, struct ListNode* head) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ModifiedList(int[] nums, ListNode head) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {number[]} nums\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar modifiedList = function(nums, head) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction modifiedList(nums: number[], head: ListNode | null): ListNode | null {\n    \n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function modifiedList($nums, $head) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func modifiedList(_ nums: [Int], _ head: ListNode?) -> ListNode? {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun modifiedList(nums: IntArray, head: ListNode?): ListNode? {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? modifiedList(List<int> nums, ListNode? head) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc modifiedList(nums []int, head *ListNode) *ListNode {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {Integer[]} nums\n# @param {ListNode} head\n# @return {ListNode}\ndef modified_list(nums, head)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def modifiedList(nums: Array[Int], head: ListNode): ListNode = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn modified_list(nums: Vec<i32>, head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (modified-list nums head)\n  (-> (listof exact-integer?) (or/c list-node? #f) (or/c list-node? #f))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec modified_list(Nums :: [integer()], Head :: #list_node{} | null) -> #list_node{} | null.\nmodified_list(Nums, Head) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec modified_list(nums :: [integer], head :: ListNode.t | nil) :: ListNode.t | nil\n  def modified_list(nums, head) do\n    \n  end\nend"}}}