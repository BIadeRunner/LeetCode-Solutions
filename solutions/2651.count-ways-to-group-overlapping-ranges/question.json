{"question_id": "2651", "problem_slug": "count-ways-to-group-overlapping-ranges", "problem_title": "Count Ways to Group Overlapping Ranges", "content": "You are given a 2D integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range.\nYou are to split ranges into two (possibly empty) groups such that:\n\nEach range belongs to exactly one group.\nAny two overlapping ranges must belong to the same group.\n\nTwo ranges are said to be overlapping if there exists at least one integer that is present in both ranges.\n\nFor example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges.\n\nReturn the total number of ways to split ranges into two groups. Since the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: ranges = [[6,10],[5,15]]\nOutput: 2\nExplanation: \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n\nExample 2:\n\nInput: ranges = [[1,3],[10,20],[2,5],[4,8]]\nOutput: 4\nExplanation: \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n\n \nConstraints:\n\n1 <= ranges.length <= 105\nranges[i].length == 2\n0 <= starti <= endi <= 109\n\n", "hints": ["Can we use sorting here?", "Sort the ranges and merge the overlapping ranges. Then count number of non-overlapping ranges.", "How many ways can we group these non-overlapping ranges?"], "exampleTestcases": "[[6,10],[5,15]]\n[[1,3],[10,20],[2,5],[4,8]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countWays(vector<vector<int>>& ranges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countWays(int[][] ranges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countWays(self, ranges):\n        \"\"\"\n        :type ranges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countWays(self, ranges: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countWays(int** ranges, int rangesSize, int* rangesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountWays(int[][] ranges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} ranges\n * @return {number}\n */\nvar countWays = function(ranges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countWays(ranges: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $ranges\n     * @return Integer\n     */\n    function countWays($ranges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countWays(_ ranges: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countWays(ranges: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countWays(List<List<int>> ranges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countWays(ranges [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} ranges\n# @return {Integer}\ndef count_ways(ranges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countWays(ranges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_ways(ranges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-ways ranges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_ways(Ranges :: [[integer()]]) -> integer().\ncount_ways(Ranges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_ways(ranges :: [[integer]]) :: integer\n  def count_ways(ranges) do\n    \n  end\nend"}}}