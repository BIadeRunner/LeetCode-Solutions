{"question_id": "850", "problem_slug": "insert-into-a-sorted-circular-linked-list", "problem_title": "Insert into a Sorted Circular Linked List", "content": "Given a Circular Linked List node, which is sorted in non-descending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list and may not necessarily be the smallest value in the circular list.\nIf there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.\nIf the list is empty (i.e., the given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the originally given node.\n \nExample 1:\n\n \n\nInput: head = [3,4,1], insertVal = 2\nOutput: [3,4,1,2]\nExplanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.\n\n\n\n\nExample 2:\n\nInput: head = [], insertVal = 1\nOutput: [1]\nExplanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.\n\nExample 3:\n\nInput: head = [1], insertVal = 0\nOutput: [1,0]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-106 <= Node.val, insertVal <= 106\n\n", "hints": [], "exampleTestcases": "[3,4,1]\n2\n[]\n1\n[1]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n    }\n\n    Node(int _val, Node* _next) {\n        val = _val;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* insert(Node* head, int insertVal) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _next) {\n        val = _val;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node insert(Node head, int insertVal) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n\"\"\"\n\nclass Solution(object):\n    def insert(self, head, insertVal):\n        \"\"\"\n        :type head: Node\n        :type insertVal: int\n        :rtype: Node\n        \"\"\"\n\t\t"}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def insert(self, head: 'Optional[Node]', insertVal: int) -> 'Node':\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     struct TreeNode *next;\n * };\n */\n\nstruct Node* insert(struct Node* head, int insertVal) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n        next = null;\n    }\n\n    public Node(int _val, Node _next) {\n        val = _val;\n        next = _next;\n    }\n}\n*/\n\npublic class Solution {\n    public Node Insert(Node head, int insertVal) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val, next) {\n *     this.val = val;\n *     this.next = next;\n * };\n */\n\n/**\n * @param {_Node} head\n * @param {number} insertVal\n * @return {_Node}\n */\nvar insert = function(head, insertVal) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     next: _Node | null\n *     \n *     constructor(val?: number, next?: _Node) {\n *         this.val = (val===undefined ? 0 : val);\n *         this.next = (next===undefined ? null : next);\n *     }\n * }\n */\n\n\nfunction insert(head: _Node | null, insertVal: number): _Node | null {\n\t\n}"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $next = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->next = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @param Integer $insertVal\n     * @return Node\n     */\n    function insert($head, $insertVal) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var next: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func insert(_ head: Node?, _ insertVal: Int) -> Node? {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var next: Node? = null\n * }\n */\n\nclass Solution {\n    fun insert(head: Node?, insertVal: Int): Node? {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Next *Node\n * }\n */\n\nfunc insert(aNode *Node, x int) *Node {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :next\n#     def initialize(val=nil, next_=nil)\n#         @val = val\n#         @next = next_\n#     end\n# end\n\n# @param {Node} head\n# @param {Integer} insertVal\n# @return {Node}\ndef insert(head, insertVal)\n\t\nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var next: Node = null\n * }\n */\n\nobject Solution {\n    def insert(head: Node, insertVal: Int): Node = {\n        \n    }\n}"}}}