{"question_id": "3316", "problem_slug": "find-the-sum-of-subsequence-powers", "problem_title": "Find the Sum of Subsequence Powers", "content": "You are given an integer array nums of length n, and a positive integer k.\nThe power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence.\nReturn the sum of powers of all subsequences of nums which have length equal to k.\nSince the answer may be large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: nums = [1,2,3,4], k = 3\nOutput: 4\nExplanation:\nThere are 4 subsequences in nums which have length 3: [1,2,3], [1,3,4], [1,2,4], and [2,3,4]. The sum of powers is |2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4.\n\nExample 2:\n\nInput: nums = [2,2], k = 2\nOutput: 0\nExplanation:\nThe only subsequence in nums which has length 2 is [2,2]. The sum of powers is |2 - 2| = 0.\n\nExample 3:\n\nInput: nums = [4,3,-1], k = 2\nOutput: 10\nExplanation:\nThere are 3 subsequences in nums which have length 2: [4,3], [4,-1], and [3,-1]. The sum of powers is |4 - 3| + |4 - (-1)| + |3 - (-1)| = 10.\n\n \nConstraints:\n\n2 <= n == nums.length <= 50\n-108 <= nums[i] <= 108 \n2 <= k <= n\n\n", "hints": ["Sort <code>nums</code>.", "There are at most <code>n<sup>2</sup></code> distinct differences.", "For a particular difference <code>d</code>, let <code>dp[len][i][j]</code> be the number of subsequences of length <code>len</code> in the subarray <code>nums[0..i]</code> where the last element picked was at index <code>j</code>.", "For each index, we can check if it can be picked if <code>nums[i] - nums[j] <= d</code>."], "exampleTestcases": "[1,2,3,4]\n3\n[2,2]\n2\n[4,3,-1]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumOfPowers(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumOfPowers(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOfPowers(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumOfPowers(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumOfPowers(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPowers = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOfPowers(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPowers($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOfPowers(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOfPowers(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumOfPowers(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOfPowers(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_powers(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOfPowers(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_powers(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-of-powers nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_of_powers(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_powers(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_of_powers(nums :: [integer], k :: integer) :: integer\n  def sum_of_powers(nums, k) do\n    \n  end\nend"}}}