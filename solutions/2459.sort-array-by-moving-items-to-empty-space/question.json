{"questionId": "2489", "acRate": 45.52102376599635, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2459", "paidOnly": true, "status": "ac", "title": "Sort Array by Moving Items to Empty Space", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "sort-array-by-moving-items-to-empty-space", "content": "<p>You are given an integer array <code>nums</code> of size <code>n</code> containing <strong>each</strong> element from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). Each of the elements from <code>1</code> to <code>n - 1</code> represents an item, and the element <code>0</code> represents an empty space.</p>\n\n<p>In one operation, you can move <strong>any</strong> item to the empty space. <code>nums</code> is considered to be sorted if the numbers of all the items are in <strong>ascending</strong> order and the empty space is either at the beginning or at the end of the array.</p>\n\n<p>For example, if <code>n = 4</code>, <code>nums</code> is sorted if:</p>\n\n<ul>\n\t<li><code>nums = [0,1,2,3]</code> or</li>\n\t<li><code>nums = [1,2,3,0]</code></li>\n</ul>\n\n<p>...and considered to be unsorted otherwise.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to sort </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,0,3,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- Move item 2 to the empty space. Now, nums = [4,0,2,3,1].\n- Move item 1 to the empty space. Now, nums = [4,1,2,3,0].\n- Move item 4 to the empty space. Now, nums = [0,1,2,3,4].\nIt can be proven that 3 is the minimum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> nums is already sorted so return 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,2,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- Move item 2 to the empty space. Now, nums = [1,2,0,4,3].\n- Move item 3 to the empty space. Now, nums = [1,2,3,4,0].\nIt can be proven that 2 is the minimum number of operations needed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; n</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["There are two possibilities for nums to be sorted. Find the minimum number of operations needed for the first possibility, then find the minimum number of operations needed for the second possibility. The answer is the minimum out of the two.", "If the empty space is not at its ending position, then you can move the item that should be where the empty space is to the empty space.", "If the empty space is at its ending position, then you need to move an out-of-place item to the empty space."], "exampleTestcases": "[4,2,0,3,1]\n[1,2,3,4,0]\n[1,0,2,4,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int sortArray(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int sortArray(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortArray(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int sortArray(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SortArray(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sortArray = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortArray(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sortArray($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortArray(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortArray(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int sortArray(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func sortArray(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sort_array(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortArray(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (sort-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec sort_array(Nums :: [integer()]) -> integer().\nsort_array(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec sort_array(nums :: [integer]) :: integer\n  def sort_array(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "course-schedule-ii", "title": "Course Schedule II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "strange-printer-ii", "title": "Strange Printer II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "isPaidOnly": false}]}