{"question_id": "2658", "problem_slug": "count-the-number-of-k-big-indices", "problem_title": "Count the Number of K-Big Indices", "content": "You are given a 0-indexed integer array nums and a positive integer k.\nWe call an index i k-big if the following conditions are satisfied:\n\nThere exist at least k different indices idx1 such that idx1 < i and nums[idx1] < nums[i].\nThere exist at least k different indices idx2 such that idx2 > i and nums[idx2] < nums[i].\n\nReturn the number of k-big indices.\n \nExample 1:\n\nInput: nums = [2,3,6,5,2,3], k = 2\nOutput: 2\nExplanation: There are only two 2-big indices in nums:\n- i = 2 --> There are two valid idx1: 0 and 1. There are three valid idx2: 2, 3, and 4.\n- i = 3 --> There are two valid idx1: 0 and 1. There are two valid idx2: 3 and 4.\n\nExample 2:\n\nInput: nums = [1,1,1], k = 3\nOutput: 0\nExplanation: There are no 3-big indices in nums.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i], k <= nums.length\n\n", "hints": ["The intended solution uses Fenwick Tree.", "Let’s describe the solution for counting the number of elements smaller than nums[i] in the range [0, i - 1], and counting in the range [i + 1, nums.length - 1] can be done similarly by simply reversing the array.", "Iterate from left to right and maintain the Fenwick Tree. Save the value of the query(nums[i]) and update nums[i] + 1 by 1."], "exampleTestcases": "[2,3,6,5,2,3]\n2\n[1,1,1]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kBigIndices(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kBigIndices(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kBigIndices(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kBigIndices(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kBigIndices(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KBigIndices(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar kBigIndices = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kBigIndices(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function kBigIndices($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kBigIndices(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kBigIndices(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kBigIndices(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kBigIndices(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef k_big_indices(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kBigIndices(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn k_big_indices(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (k-big-indices nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec k_big_indices(Nums :: [integer()], K :: integer()) -> integer().\nk_big_indices(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec k_big_indices(nums :: [integer], k :: integer) :: integer\n  def k_big_indices(nums, k) do\n    \n  end\nend"}}}