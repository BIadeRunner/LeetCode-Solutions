{"question_id": "3571", "problem_slug": "length-of-the-longest-increasing-path", "problem_title": "Length of the Longest Increasing Path", "content": "You are given a 2D array of integers coordinates of length n and an integer k, where 0 <= k < n.\ncoordinates[i] = [xi, yi] indicates the point (xi, yi) in a 2D plane.\nAn increasing path of length m is defined as a list of points (x1, y1), (x2, y2), (x3, y3), ..., (xm, ym) such that:\n\nxi < xi + 1 and yi < yi + 1 for all i where 1 <= i < m.\n(xi, yi) is in the given coordinates for all i where 1 <= i <= m.\n\nReturn the maximum length of an increasing path that contains coordinates[k].\n \nExample 1:\n\nInput: coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1\nOutput: 3\nExplanation:\n(0, 0), (2, 2), (5, 3) is the longest increasing path that contains (2, 2).\n\nExample 2:\n\nInput: coordinates = [[2,1],[7,0],[5,6]], k = 2\nOutput: 2\nExplanation:\n(2, 1), (5, 6) is the longest increasing path that contains (5, 6).\n\n \nConstraints:\n\n1 <= n == coordinates.length <= 105\ncoordinates[i].length == 2\n0 <= coordinates[i][0], coordinates[i][1] <= 109\nAll elements in coordinates are distinct.\n0 <= k <= n - 1\n\n", "hints": ["Only keep coordinates with both <code>x</code> and <code>y</code> being strictly less than <code>coordinates[k]</code>.", "Sort them by <code>x</code>’s, in the case of equal, the <code>y</code> values should be decreasing.", "Calculate LIS only using <code>y</code> values.", "Do the same for coordinates with both <code>x</code> and <code>y</code> being strictly larger than <code>coordinates[k]</code>."], "exampleTestcases": "[[3,1],[2,2],[4,1],[0,0],[5,3]]\n1\n[[2,1],[7,0],[5,6]]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxPathLength(vector<vector<int>>& coordinates, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxPathLength(int[][] coordinates, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxPathLength(self, coordinates, k):\n        \"\"\"\n        :type coordinates: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxPathLength(self, coordinates: List[List[int]], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxPathLength(int** coordinates, int coordinatesSize, int* coordinatesColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxPathLength(int[][] coordinates, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} coordinates\n * @param {number} k\n * @return {number}\n */\nvar maxPathLength = function(coordinates, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxPathLength(coordinates: number[][], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $coordinates\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPathLength($coordinates, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxPathLength(_ coordinates: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxPathLength(coordinates: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxPathLength(List<List<int>> coordinates, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxPathLength(coordinates [][]int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} coordinates\n# @param {Integer} k\n# @return {Integer}\ndef max_path_length(coordinates, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxPathLength(coordinates: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_path_length(coordinates: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-path-length coordinates k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_path_length(Coordinates :: [[integer()]], K :: integer()) -> integer().\nmax_path_length(Coordinates, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_path_length(coordinates :: [[integer]], k :: integer) :: integer\n  def max_path_length(coordinates, k) do\n    \n  end\nend"}}}