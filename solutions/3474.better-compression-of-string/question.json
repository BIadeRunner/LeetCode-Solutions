{"question_id": "3474", "problem_slug": "better-compression-of-string", "problem_title": "Better Compression of String", "content": "You are given a string compressed representing a compressed version of a string. The format is a character followed by its frequency. For example, \"a3b1a1c2\" is a compressed version of the string \"aaabacc\".\nWe seek a better compression with the following conditions:\n\nEach character should appear only once in the compressed version.\nThe characters should be in alphabetical order.\n\nReturn the better compression of compressed.\nNote: In the better version of compression, the order of letters may change, which is acceptable.\n \nExample 1:\n\nInput: compressed = \"a3c9b2c1\"\nOutput: \"a3b2c10\"\nExplanation:\nCharacters \"a\" and \"b\" appear only once in the input, but \"c\" appears twice, once with a size of 9 and once with a size of 1.\nHence, in the resulting string, it should have a size of 10.\n\nExample 2:\n\nInput: compressed = \"c2b3a1\"\nOutput: \"a1b3c2\"\n\nExample 3:\n\nInput: compressed = \"a2b4c1\"\nOutput: \"a2b4c1\"\n\n \nConstraints:\n\n1 <= compressed.length <= 6 * 104\ncompressed consists only of lowercase English letters and digits.\ncompressed is a valid compression, i.e., each character is followed by its frequency.\nFrequencies are in the range [1, 104] and have no leading zeroes.\n\n", "hints": ["This is an implementation problem.", "Try to extract each character with its corresponding frequency.", "Sum the frequencies for a single character.", "Sort characters and append them to a string in alphabetical order."], "exampleTestcases": "\"a3c9b2c1\"\n\"c2b3a1\"\n\"a2b4c1\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string betterCompression(string compressed) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String betterCompression(String compressed) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def betterCompression(self, compressed):\n        \"\"\"\n        :type compressed: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def betterCompression(self, compressed: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* betterCompression(char* compressed) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string BetterCompression(string compressed) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} compressed\n * @return {string}\n */\nvar betterCompression = function(compressed) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function betterCompression(compressed: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $compressed\n     * @return String\n     */\n    function betterCompression($compressed) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func betterCompression(_ compressed: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun betterCompression(compressed: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String betterCompression(String compressed) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func betterCompression(compressed string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} compressed\n# @return {String}\ndef better_compression(compressed)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def betterCompression(compressed: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn better_compression(compressed: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (better-compression compressed)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec better_compression(Compressed :: unicode:unicode_binary()) -> unicode:unicode_binary().\nbetter_compression(Compressed) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec better_compression(compressed :: String.t) :: String.t\n  def better_compression(compressed) do\n    \n  end\nend"}}}