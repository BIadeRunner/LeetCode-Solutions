{"question_id": "1738", "problem_slug": "maximal-network-rank", "problem_title": "Maximal Network Rank", "content": "There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.\nThe network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.\nThe maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.\nGiven the integer n and the array roads, return the maximal network rank of the entire infrastructure.\n \nExample 1:\n\n\nInput: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\nOutput: 4\nExplanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.\n\nExample 2:\n\n\nInput: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\nOutput: 5\nExplanation: There are 5 roads that are connected to cities 1 or 2.\n\nExample 3:\n\nInput: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\nOutput: 5\nExplanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.\n\n \nConstraints:\n\n2 <= n <= 100\n0 <= roads.length <= n * (n - 1) / 2\nroads[i].length == 2\n0 <= ai, bi <= n-1\nai != bi\nEach pair of cities has at most one road connecting them.\n\n", "hints": ["Try every pair of different cities and calculate its network rank.", "The network rank of two vertices is <i>almost</i> the sum of their degrees.", "How can you efficiently check if there is a road connecting two different cities?"], "exampleTestcases": "4\n[[0,1],[0,3],[1,2],[1,3]]\n5\n[[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\n8\n[[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximalNetworkRank(int n, vector<vector<int>>& roads) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximalNetworkRank(int n, int[][] roads) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximalNetworkRank(self, n, roads):\n        \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximalNetworkRank(int n, int** roads, int roadsSize, int* roadsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximalNetworkRank(int n, int[][] roads) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} roads\n * @return {number}\n */\nvar maximalNetworkRank = function(n, roads) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximalNetworkRank(n: number, roads: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $roads\n     * @return Integer\n     */\n    function maximalNetworkRank($n, $roads) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximalNetworkRank(_ n: Int, _ roads: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximalNetworkRank(n: Int, roads: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximalNetworkRank(int n, List<List<int>> roads) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximalNetworkRank(n int, roads [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} roads\n# @return {Integer}\ndef maximal_network_rank(n, roads)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximalNetworkRank(n: Int, roads: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximal_network_rank(n: i32, roads: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximal-network-rank n roads)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximal_network_rank(N :: integer(), Roads :: [[integer()]]) -> integer().\nmaximal_network_rank(N, Roads) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximal_network_rank(n :: integer, roads :: [[integer]]) :: integer\n  def maximal_network_rank(n, roads) do\n    \n  end\nend"}}}