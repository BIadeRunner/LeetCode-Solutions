{"questionId": "3541", "acRate": 47.264488582850205, "difficulty": "Medium", "freqBar": 21.248702310444717, "frontendQuestionId": "3295", "paidOnly": false, "status": "ac", "title": "Report Spam Message", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "report-spam-message", "content": "<p>You are given an array of strings <code>message</code> and an array of strings <code>bannedWords</code>.</p>\n\n<p>An array of words is considered <strong>spam</strong> if there are <strong>at least</strong> two words in it that <b>exactly</b> match any word in <code>bannedWords</code>.</p>\n\n<p>Return <code>true</code> if the array <code>message</code> is spam, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">message = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], bannedWords = [&quot;world&quot;,&quot;hello&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The words <code>&quot;hello&quot;</code> and <code>&quot;world&quot;</code> from the <code>message</code> array both appear in the <code>bannedWords</code> array.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">message = [&quot;hello&quot;,&quot;programming&quot;,&quot;fun&quot;], bannedWords = [&quot;world&quot;,&quot;programming&quot;,&quot;leetcode&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Only one word from the <code>message</code> array (<code>&quot;programming&quot;</code>) appears in the <code>bannedWords</code> array.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= message.length, bannedWords.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= message[i].length, bannedWords[i].length &lt;= 15</code></li>\n\t<li><code>message[i]</code> and <code>bannedWords[i]</code> consist only of lowercase English letters.</li>\n</ul>\n", "hints": ["Use hash set."], "exampleTestcases": "[\"hello\",\"world\",\"leetcode\"]\n[\"world\",\"hello\"]\n[\"hello\",\"programming\",\"fun\"]\n[\"world\",\"programming\",\"leetcode\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool reportSpam(vector<string>& message, vector<string>& bannedWords) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean reportSpam(String[] message, String[] bannedWords) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reportSpam(self, message, bannedWords):\n        \"\"\"\n        :type message: List[str]\n        :type bannedWords: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool reportSpam(char** message, int messageSize, char** bannedWords, int bannedWordsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ReportSpam(string[] message, string[] bannedWords) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} message\n * @param {string[]} bannedWords\n * @return {boolean}\n */\nvar reportSpam = function(message, bannedWords) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reportSpam(message: string[], bannedWords: string[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $message\n     * @param String[] $bannedWords\n     * @return Boolean\n     */\n    function reportSpam($message, $bannedWords) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reportSpam(_ message: [String], _ bannedWords: [String]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reportSpam(message: Array<String>, bannedWords: Array<String>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool reportSpam(List<String> message, List<String> bannedWords) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func reportSpam(message []string, bannedWords []string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} message\n# @param {String[]} banned_words\n# @return {Boolean}\ndef report_spam(message, banned_words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reportSpam(message: Array[String], bannedWords: Array[String]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn report_spam(message: Vec<String>, banned_words: Vec<String>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (report-spam message bannedWords)\n  (-> (listof string?) (listof string?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec report_spam(Message :: [unicode:unicode_binary()], BannedWords :: [unicode:unicode_binary()]) -> boolean().\nreport_spam(Message, BannedWords) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec report_spam(message :: [String.t], banned_words :: [String.t]) :: boolean\n  def report_spam(message, banned_words) do\n    \n  end\nend"}], "similarQuestionList": []}