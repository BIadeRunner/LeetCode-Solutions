{"question_id": "2062", "problem_slug": "game-of-nim", "problem_title": "Game of Nim", "content": "Alice and Bob take turns playing a game with Alice starting first.\nIn this game, there are n piles of stones. On each player's turn, the player should remove any positive number of stones from a non-empty pile of his or her choice. The first player who cannot make a move loses, and the other player wins.\nGiven an integer array piles, where piles[i] is the number of stones in the ith pile, return true if Alice wins, or false if Bob wins.\nBoth Alice and Bob play optimally.\n \nExample 1:\n\nInput: piles = [1]\nOutput: true\nExplanation: There is only one possible scenario:\n- On the first turn, Alice removes one stone from the first pile. piles = [0].\n- On the second turn, there are no stones left for Bob to remove. Alice wins.\n\nExample 2:\n\nInput: piles = [1,1]\nOutput: false\nExplanation: It can be proven that Bob will always win. One possible scenario is:\n- On the first turn, Alice removes one stone from the first pile. piles = [0,1].\n- On the second turn, Bob removes one stone from the second pile. piles = [0,0].\n- On the third turn, there are no stones left for Alice to remove. Bob wins.\n\nExample 3:\n\nInput: piles = [1,2,3]\nOutput: false\nExplanation: It can be proven that Bob will always win. One possible scenario is:\n- On the first turn, Alice removes three stones from the third pile. piles = [1,2,0].\n- On the second turn, Bob removes one stone from the second pile. piles = [1,1,0].\n- On the third turn, Alice removes one stone from the first pile. piles = [0,1,0].\n- On the fourth turn, Bob removes one stone from the second pile. piles = [0,0,0].\n- On the fifth turn, there are no stones left for Alice to remove. Bob wins.\n \nConstraints:\n\nn == piles.length\n1 <= n <= 7\n1 <= piles[i] <= 7\n\n \nFollow-up: Could you find a linear time solution? Although the linear time solution may be beyond the scope of an interview, it could be interesting to know.\n", "hints": ["Simulate the game and try all possible moves for each player."], "exampleTestcases": "[1]\n[1,1]\n[1,2,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool nimGame(vector<int>& piles) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean nimGame(int[] piles) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def nimGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def nimGame(self, piles: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool nimGame(int* piles, int pilesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool NimGame(int[] piles) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar nimGame = function(piles) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function nimGame(piles: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @return Boolean\n     */\n    function nimGame($piles) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func nimGame(_ piles: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun nimGame(piles: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool nimGame(List<int> piles) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func nimGame(piles []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} piles\n# @return {Boolean}\ndef nim_game(piles)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def nimGame(piles: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn nim_game(piles: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (nim-game piles)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec nim_game(Piles :: [integer()]) -> boolean().\nnim_game(Piles) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec nim_game(piles :: [integer]) :: boolean\n  def nim_game(piles) do\n    \n  end\nend"}}}