{"question_id": "761", "problem_slug": "employee-free-time", "problem_title": "Employee Free Time", "content": "We are given a list schedule of employees, which represents the working time for each employee.\nEach employee has a list of non-overlapping Intervals, and these intervals are in sorted order.\nReturn the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.\n(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.\n \nExample 1:\n\nInput: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\nOutput: [[3,4]]\nExplanation: There are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\nWe discard any intervals that contain inf as they aren't finite.\n\nExample 2:\n\nInput: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\nOutput: [[5,6],[7,9]]\n\n \nConstraints:\n\n1 <= schedule.length , schedule[i].length <= 50\n0 <= schedule[i].start < schedule[i].end <= 10^8\n\n", "hints": ["Take all the intervals and do an \"events\" (or \"line sweep\") approach - an event of (x, OPEN) increases the number of active intervals, while (x, CLOSE) decreases it.\r\n\r\nProcessing in sorted order from left to right, if the number of active intervals is zero, then you crossed a region of common free time."], "exampleTestcases": "[[[1,2],[5,6]],[[1,3]],[[4,10]]]\n[[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for an Interval.\nclass Interval {\npublic:\n    int start;\n    int end;\n\n    Interval() {}\n\n    Interval(int _start, int _end) {\n        start = _start;\n        end = _end;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<Interval> employeeFreeTime(vector<vector<Interval>> schedule) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for an Interval.\nclass Interval {\n    public int start;\n    public int end;\n\n    public Interval() {}\n\n    public Interval(int _start, int _end) {\n        start = _start;\n        end = _end;\n    }\n};\n*/\n\nclass Solution {\n    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for an Interval.\nclass Interval(object):\n    def __init__(self, start=None, end=None):\n        self.start = start\n        self.end = end\n\"\"\"\n\nclass Solution(object):\n    def employeeFreeTime(self, schedule):\n        \"\"\"\n        :type schedule: [[Interval]]\n        :rtype: [Interval]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for an Interval.\nclass Interval:\n    def __init__(self, start: int = None, end: int = None):\n        self.start = start\n        self.end = end\n\"\"\"\n\nclass Solution:\n    def employeeFreeTime(self, schedule: '[[Interval]]') -> '[Interval]':\n        "}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for an Interval.\npublic class Interval {\n    public int start;\n    public int end;\n\n    public Interval(){}\n    public Interval(int _start, int _end) {\n        start = _start;\n        end = _end;\n    }\n}\n*/\n\npublic class Solution {\n    public IList<Interval> EmployeeFreeTime(IList<IList<Interval>> schedule) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for an Interval.\n * function Interval(start, end) {\n *    this.start = start;\n *    this.end = end;\n * };\n */\n\n/**\n * @param {Interval[][]} schedule\n * @return {Interval[]}\n */\nvar employeeFreeTime = function(schedule) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * // Definition for an Interval.\n * class Interval {\n *    start: number;\n *    end: number;\n *    constructor(start: number, end: number) {\n *        this.start = start;\n *        this.end = end;\n *    }\n * }\n */\n\nfunction employeeFreeTime(schedule: Interval[][]): Interval[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for an Interval.\n * class Interval {\n *     public $start = null;\n *     public $end = null;\n *     function __construct($start, $end) {\n *         $this->start = $start;\n *         $this->end = $end;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Interval[][] $schedule\n     * @return Interval[]\n     */\n    function employeeFreeTime($schedule) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for an Interval.\n * public class Interval {\n *     public var start: Int\n *     public var end: Int\n *     public init(_ start: Int, _ end: Int) {\n *         self.start = start\n *         self.end = end\n *     }\n * }\n */\n\nclass Solution {\n    func employeeFreeTime(_ schedule: [[Interval]]) -> [Interval] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/*\n *\t// Definition for an Interval.\n *\tclass Interval {\n *\t\tvar start:Int = 0\n *\t\tvar end:Int = 0\n *\t\n *\t\tconstructor(_start:Int, _end:Int) {\n *\t\t\tstart = _start\n *\t\t\tend = _end\n *\t\t}\n *\t}\n */\n\nclass Solution {\n    fun employeeFreeTime(schedule: ArrayList<ArrayList<Interval>>): ArrayList<Interval> {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for an Interval.\n * type Interval struct {\n *     Start int\n *     End   int\n * }\n */\n\nfunc employeeFreeTime(schedule [][]*Interval) []*Interval {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for an Interval.\n# class Interval\n#     def initialize(start_, end_)\n#         @start = start_\n#         @end = end_\n#     end\n# end\n\n# @param {List[List[Interval]]} schedule\n# @return {List[List[Interval]]}\ndef employeeFreeTime(schedule)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for an Interval.\n * class Interval(var _start: Int, var _end: Int) {\n *   var start: Int = _start\n *  var end: Int = _end\n * }\n */\n\nobject Solution {\n    def employeeFreeTime(schedule: List[List[Interval]]): List[Interval] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "/*\n// Definition for an Interval.\n#[derive(PartialEq, Eq, Clone, Debug)]\nstruct Interval {\n    pub start:i32,\n    pub end:i32\n}\n\nimpl Interval {\n    #[inline]\n    fn new(start:i32, end:i32) -> Self{\n        Interval {\n            start,\n            end\n        }\n    }\n}\n*/\n\nimpl Solution {\n    pub fn employee_free_time(schedule: Vec<Vec<Interval>>) -> Vec<Interval> {\n        \n    }\n}"}}}