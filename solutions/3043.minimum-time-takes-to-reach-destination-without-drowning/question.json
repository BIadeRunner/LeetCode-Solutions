{"question_id": "3043", "problem_slug": "minimum-time-takes-to-reach-destination-without-drowning", "problem_title": "Minimum Time Takes to Reach Destination Without Drowning", "content": "You are given an n * m 0-indexed grid of string land. Right now, you are standing at the cell that contains \"S\", and you want to get to the cell containing \"D\". There are three other types of cells in this land:\n\n\".\": These cells are empty.\n\"X\": These cells are stone.\n\"*\": These cells are flooded.\n\nAt each second, you can move to a cell that shares a side with your current cell (if it exists). Also, at each second, every empty cell that shares a side with a flooded cell becomes flooded as well.\nThere are two problems ahead of your journey:\n\nYou can't step on stone cells.\nYou can't step on flooded cells since you will drown (also, you can't step on a cell that will be flooded at the same time as you step on it).\n\nReturn the minimum time it takes you to reach the destination in seconds, or -1 if it is impossible.\nNote that the destination will never be flooded.\n \nExample 1:\n\nInput: land = [[\"D\",\".\",\"*\"],[\".\",\".\",\".\"],[\".\",\"S\",\".\"]]\nOutput: 3\nExplanation: The picture below shows the simulation of the land second by second. The blue cells are flooded, and the gray cells are stone.\nPicture (0) shows the initial state and picture (3) shows the final state when we reach destination. As you see, it takes us 3 second to reach destination and the answer would be 3.\nIt can be shown that 3 is the minimum time needed to reach from S to D.\n\n\nExample 2:\n\nInput: land = [[\"D\",\"X\",\"*\"],[\".\",\".\",\".\"],[\".\",\".\",\"S\"]]\nOutput: -1\nExplanation: The picture below shows the simulation of the land second by second. The blue cells are flooded, and the gray cells are stone.\nPicture (0) shows the initial state. As you see, no matter which paths we choose, we will drown at the 3rd second. Also the minimum path takes us 4 seconds to reach from S to D.\nSo the answer would be -1.\n\n\nExample 3:\n\nInput: land = [[\"D\",\".\",\".\",\".\",\"*\",\".\"],[\".\",\"X\",\".\",\"X\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"S\",\".\"]]\nOutput: 6\nExplanation: It can be shown that we can reach destination in 6 seconds. Also it can be shown that 6 is the minimum seconds one need to reach from S to D.\n\n \nConstraints:\n\n2 <= n, m <= 100\nland consists only of \"S\", \"D\", \".\", \"*\" and \"X\".\nExactly one of the cells is equal to \"S\".\nExactly one of the cells is equal to \"D\".\n\n", "hints": ["Think of using breadth-first search.", "Use a BFS to find for each cell the time at which it will become flooded.", "Another BFS then simulates your movement, taking into account information gathered by the first BFS."], "exampleTestcases": "[[\"D\",\".\",\"*\"],[\".\",\".\",\".\"],[\".\",\"S\",\".\"]]\n[[\"D\",\"X\",\"*\"],[\".\",\".\",\".\"],[\".\",\".\",\"S\"]]\n[[\"D\",\".\",\".\",\".\",\"*\",\".\"],[\".\",\"X\",\".\",\"X\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"S\",\".\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSeconds(vector<vector<string>>& land) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSeconds(List<List<String>> land) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSeconds(self, land):\n        \"\"\"\n        :type land: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSeconds(self, land: List[List[str]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSeconds(char *** land, int landSize, int* landColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSeconds(IList<IList<string>> land) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[][]} land\n * @return {number}\n */\nvar minimumSeconds = function(land) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSeconds(land: string[][]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $land\n     * @return Integer\n     */\n    function minimumSeconds($land) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSeconds(_ land: [[String]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSeconds(land: List<List<String>>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSeconds(List<List<String>> land) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSeconds(land [][]string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[][]} land\n# @return {Integer}\ndef minimum_seconds(land)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSeconds(land: List[List[String]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_seconds(land: Vec<Vec<String>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-seconds land)\n  (-> (listof (listof string?)) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_seconds(Land :: [[unicode:unicode_binary()]]) -> integer().\nminimum_seconds(Land) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_seconds(land :: [[String.t]]) :: integer\n  def minimum_seconds(land) do\n    \n  end\nend"}}}