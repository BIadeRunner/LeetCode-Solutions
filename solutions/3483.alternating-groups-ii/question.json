{"question_id": "3483", "problem_slug": "alternating-groups-ii", "problem_title": "Alternating Groups II", "content": "There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]:\n\ncolors[i] == 0 means that tile i is red.\ncolors[i] == 1 means that tile i is blue.\n\nAn alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its left and right tiles).\nReturn the number of alternating groups.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\n \nExample 1:\n\nInput: colors = [0,1,0,1,0], k = 3\nOutput: 3\nExplanation:\n\nAlternating groups:\n\n\nExample 2:\n\nInput: colors = [0,1,0,0,1,0,1], k = 6\nOutput: 2\nExplanation:\n\nAlternating groups:\n\n\nExample 3:\n\nInput: colors = [1,1,0,1], k = 4\nOutput: 0\nExplanation:\n\n\n \nConstraints:\n\n3 <= colors.length <= 105\n0 <= colors[i] <= 1\n3 <= k <= colors.length\n\n", "hints": ["Try to find a tile that has the same color as its next tile (if it exists).", "Then try to find maximal alternating groups by starting a single for loop from that tile."], "exampleTestcases": "[0,1,0,1,0]\n3\n[0,1,0,0,1,0,1]\n6\n[1,1,0,1]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfAlternatingGroups(int[] colors, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors, k):\n        \"\"\"\n        :type colors: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfAlternatingGroups(int* colors, int colorsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfAlternatingGroups(int[] colors, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} colors\n * @param {number} k\n * @return {number}\n */\nvar numberOfAlternatingGroups = function(colors, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfAlternatingGroups(colors: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfAlternatingGroups($colors, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfAlternatingGroups(List<int> colors, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfAlternatingGroups(colors []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} colors\n# @param {Integer} k\n# @return {Integer}\ndef number_of_alternating_groups(colors, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-alternating-groups colors k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_alternating_groups(Colors :: [integer()], K :: integer()) -> integer().\nnumber_of_alternating_groups(Colors, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer], k :: integer) :: integer\n  def number_of_alternating_groups(colors, k) do\n    \n  end\nend"}}}