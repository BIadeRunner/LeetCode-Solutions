{"question_id": "2664", "problem_slug": "maximize-greatness-of-an-array", "problem_title": "Maximize Greatness of an Array", "content": "You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing.\nWe define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].\nReturn the maximum possible greatness you can achieve after permuting nums.\n \nExample 1:\n\nInput: nums = [1,3,5,2,1,3,1]\nOutput: 4\nExplanation: One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4.\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n", "hints": ["Can we use sorting and two pointers here?", "Assign every element the next bigger unused element as many times as possible."], "exampleTestcases": "[1,3,5,2,1,3,1]\n[1,2,3,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximizeGreatness(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximizeGreatness(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximizeGreatness(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximizeGreatness(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximizeGreatness(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximizeGreatness = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximizeGreatness(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximizeGreatness($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximizeGreatness(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximizeGreatness(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximizeGreatness(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximizeGreatness(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximize_greatness(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximizeGreatness(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximize_greatness(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximize-greatness nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximize_greatness(Nums :: [integer()]) -> integer().\nmaximize_greatness(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximize_greatness(nums :: [integer]) :: integer\n  def maximize_greatness(nums) do\n    \n  end\nend"}}}