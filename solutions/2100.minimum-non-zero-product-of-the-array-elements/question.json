{"question_id": "2100", "problem_slug": "minimum-non-zero-product-of-the-array-elements", "problem_title": "Minimum Non-Zero Product of the Array Elements", "content": "You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:\n\nChoose two elements x and y from nums.\nChoose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.\n\nFor example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.\nFind the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.\nNote: The answer should be the minimum product before the modulo operation is done.\n \nExample 1:\n\nInput: p = 1\nOutput: 1\nExplanation: nums = [1].\nThere is only one element, so the product equals that element.\n\nExample 2:\n\nInput: p = 2\nOutput: 6\nExplanation: nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized.\n\nExample 3:\n\nInput: p = 3\nOutput: 1512\nExplanation: nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.\n\n \nConstraints:\n\n1 <= p <= 60\n\n", "hints": ["Try to minimize each element by swapping bits with any of the elements after it.", "If you swap out all the 1s in some element, this will lead to a product of zero."], "exampleTestcases": "1\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minNonZeroProduct(int p) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minNonZeroProduct(int p) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minNonZeroProduct(self, p):\n        \"\"\"\n        :type p: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minNonZeroProduct(self, p: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minNonZeroProduct(int p) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinNonZeroProduct(int p) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} p\n * @return {number}\n */\nvar minNonZeroProduct = function(p) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minNonZeroProduct(p: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $p\n     * @return Integer\n     */\n    function minNonZeroProduct($p) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minNonZeroProduct(_ p: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minNonZeroProduct(p: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minNonZeroProduct(int p) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minNonZeroProduct(p int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} p\n# @return {Integer}\ndef min_non_zero_product(p)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minNonZeroProduct(p: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_non_zero_product(p: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-non-zero-product p)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_non_zero_product(P :: integer()) -> integer().\nmin_non_zero_product(P) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_non_zero_product(p :: integer) :: integer\n  def min_non_zero_product(p) do\n    \n  end\nend"}}}