{"question_id": "2073", "problem_slug": "minimum-time-for-k-virus-variants-to-spread", "problem_title": "Minimum Time For K Virus Variants to Spread", "content": "There are n unique virus variants in an infinite 2D grid. You are given a 2D array points, where points[i] = [xi, yi] represents a virus originating at (xi, yi) on day 0. Note that it is possible for multiple virus variants to originate at the same point.\nEvery day, each cell infected with a virus variant will spread the virus to all neighboring points in the four cardinal directions (i.e. up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other.\nGiven an integer k, return the minimum integer number of days for any point to contain at least k of the unique virus variants.\n \nExample 1:\n\n\nInput: points = [[1,1],[6,1]], k = 2\nOutput: 3\nExplanation: On day 3, points (3,1) and (4,1) will contain both virus variants. Note that these are not the only points that will contain both virus variants.\n\nExample 2:\n\n\nInput: points = [[3,3],[1,2],[9,2]], k = 2\nOutput: 2\nExplanation: On day 2, points (1,3), (2,3), (2,2), and (3,2) will contain the first two viruses. Note that these are not the only points that will contain both virus variants.\n\nExample 3:\n\n\nInput: points = [[3,3],[1,2],[9,2]], k = 3\nOutput: 4\nExplanation: On day 4, the point (5,2) will contain all 3 viruses. Note that this is not the only point that will contain all 3 virus variants.\n\n \nConstraints:\n\nn == points.length\n2 <= n <= 50\npoints[i].length == 2\n1 <= xi, yi <= 100\n2 <= k <= n\n\n", "hints": ["n is very small, how can we use that?", "What shape is the region when two viruses intersect?"], "exampleTestcases": "[[1,1],[6,1]]\n2\n[[3,3],[1,2],[9,2]]\n2\n[[3,3],[1,2],[9,2]]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDayskVariants(vector<vector<int>>& points, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minDayskVariants(int[][] points, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minDayskVariants(self, points, k):\n        \"\"\"\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minDayskVariants(self, points: List[List[int]], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minDayskVariants(int** points, int pointsSize, int* pointsColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinDayskVariants(int[][] points, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @param {number} k\n * @return {number}\n */\nvar minDayskVariants = function(points, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minDayskVariants(points: number[][], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $k\n     * @return Integer\n     */\n    function minDayskVariants($points, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minDayskVariants(_ points: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minDayskVariants(points: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minDayskVariants(List<List<int>> points, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minDayskVariants(points [][]int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @param {Integer} k\n# @return {Integer}\ndef min_daysk_variants(points, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minDayskVariants(points: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_daysk_variants(points: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-daysk-variants points k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_daysk_variants(Points :: [[integer()]], K :: integer()) -> integer().\nmin_daysk_variants(Points, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_daysk_variants(points :: [[integer]], k :: integer) :: integer\n  def min_daysk_variants(points, k) do\n    \n  end\nend"}}}