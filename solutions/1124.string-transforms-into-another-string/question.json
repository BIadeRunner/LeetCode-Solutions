{"question_id": "1124", "problem_slug": "string-transforms-into-another-string", "problem_title": "String Transforms Into Another String", "content": "Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.\nIn one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.\nReturn true if and only if you can transform str1 into str2.\n \nExample 1:\n\nInput: str1 = \"aabcc\", str2 = \"ccdee\"\nOutput: true\nExplanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.\n\nExample 2:\n\nInput: str1 = \"leetcode\", str2 = \"codeleet\"\nOutput: false\nExplanation: There is no way to transform str1 to str2.\n\n \nConstraints:\n\n1 <= str1.length == str2.length <= 104\nstr1 and str2 contain only lowercase English letters.\n\n", "hints": ["Model the problem as a graph problem. Add an edge from one character to another if you need to convert between them.", "What if one character needs to be converted into more than one character?", "There would be no solution. Thus, every node can have at most one outgoing edge.", "How to process a linked list?", "How to process a cycle?", "What if there is a character with no outgoing edge? You can use it to break all cycles!"], "exampleTestcases": "\"aabcc\"\n\"ccdee\"\n\"leetcode\"\n\"codeleet\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canConvert(string str1, string str2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean canConvert(String str1, String str2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def canConvert(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def canConvert(self, str1: str, str2: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "\n\nbool canConvert(char * str1, char * str2){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanConvert(string str1, string str2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} str1\n * @param {string} str2\n * @return {boolean}\n */\nvar canConvert = function(str1, str2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function canConvert(str1: string, str2: string): boolean {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return Boolean\n     */\n    function canConvert($str1, $str2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func canConvert(_ str1: String, _ str2: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun canConvert(str1: String, str2: String): Boolean {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func canConvert(str1 string, str2 string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} str1\n# @param {String} str2\n# @return {Boolean}\ndef can_convert(str1, str2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def canConvert(str1: String, str2: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_convert(str1: String, str2: String) -> bool {\n        \n    }\n}"}}}