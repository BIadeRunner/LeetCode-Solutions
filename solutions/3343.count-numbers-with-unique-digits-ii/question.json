{"question_id": "3343", "problem_slug": "count-numbers-with-unique-digits-ii", "problem_title": "Count Numbers With Unique Digits II", "content": "Given two positive integers a and b, return the count of numbers having unique digits in the range [a, b] (inclusive).\n \nExample 1:\n\nInput: a = 1, b = 20\nOutput: 19\nExplanation: All the numbers in the range [1, 20] have unique digits except 11. Hence, the answer is 19.\n\nExample 2:\n\nInput: a = 9, b = 19\nOutput: 10\nExplanation: All the numbers in the range [9, 19] have unique digits except 11. Hence, the answer is 10. \n\nExample 3:\n\nInput: a = 80, b = 120\nOutput: 27\nExplanation: There are 41 numbers in the range [80, 120], 27 of which have unique digits.\n\n \nConstraints:\n\n1 <= a <= b <= 1000\n\n", "hints": ["You can traverse over all numbers and check if the current number has unique digits or not."], "exampleTestcases": "1\n20\n9\n19\n80\n120", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberCount(int a, int b) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberCount(int a, int b) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberCount(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberCount(self, a: int, b: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberCount(int a, int b) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberCount(int a, int b) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar numberCount = function(a, b) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberCount(a: number, b: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function numberCount($a, $b) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberCount(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberCount(a: Int, b: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberCount(int a, int b) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberCount(a int, b int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef number_count(a, b)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberCount(a: Int, b: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_count(a: i32, b: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-count a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_count(A :: integer(), B :: integer()) -> integer().\nnumber_count(A, B) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_count(a :: integer, b :: integer) :: integer\n  def number_count(a, b) do\n    \n  end\nend"}}}