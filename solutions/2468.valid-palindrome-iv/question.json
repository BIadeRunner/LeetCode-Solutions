{"question_id": "2468", "problem_slug": "valid-palindrome-iv", "problem_title": "Valid Palindrome IV", "content": "You are given a 0-indexed string s consisting of only lowercase English letters. In one operation, you can change any character of s to any other character.\nReturn true if you can make s a palindrome after performing exactly one or two operations, or return false otherwise.\n \nExample 1:\n\nInput: s = \"abcdba\"\nOutput: true\nExplanation: One way to make s a palindrome using 1 operation is:\n- Change s[2] to 'd'. Now, s = \"abddba\".\nOne operation could be performed to make s a palindrome so return true.\n\nExample 2:\n\nInput: s = \"aa\"\nOutput: true\nExplanation: One way to make s a palindrome using 2 operations is:\n- Change s[0] to 'b'. Now, s = \"ba\".\n- Change s[1] to 'b'. Now, s = \"bb\".\nTwo operations could be performed to make s a palindrome so return true.\n\nExample 3:\n\nInput: s = \"abcdef\"\nOutput: false\nExplanation: It is not possible to make s a palindrome using one or two operations so return false.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists only of lowercase English letters.\n\n", "hints": ["Count the number of pairs of characters that should be equal if s were a palindrome, but are not equal.", "If the number of pairs is 0, then s is already palindrome. You can pick any pair of characters and change them both to a different character and s will stay a palindrome."], "exampleTestcases": "\"abcdba\"\n\"aa\"\n\"abcdef\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool makePalindrome(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean makePalindrome(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makePalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makePalindrome(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool makePalindrome(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool MakePalindrome(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar makePalindrome = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makePalindrome(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function makePalindrome($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makePalindrome(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makePalindrome(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool makePalindrome(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makePalindrome(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef make_palindrome(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makePalindrome(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_palindrome(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-palindrome s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_palindrome(S :: unicode:unicode_binary()) -> boolean().\nmake_palindrome(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_palindrome(s :: String.t) :: boolean\n  def make_palindrome(s) do\n    \n  end\nend"}}}