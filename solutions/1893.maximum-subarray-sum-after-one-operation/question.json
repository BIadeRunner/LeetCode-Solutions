{"question_id": "1893", "problem_slug": "maximum-subarray-sum-after-one-operation", "problem_title": "Maximum Subarray Sum After One Operation", "content": "You are given an integer array nums. You must perform exactly one operation where you can replace one element nums[i] with nums[i] * nums[i]. \nReturn the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.\n \nExample 1:\n\r\nInput: nums = [2,-1,-4,-3]\r\nOutput: 17\r\nExplanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.\nExample 2:\n\r\nInput: nums = [1,-1,1,1,-1,-1,1]\r\nOutput: 4\r\nExplanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n", "hints": ["Think about dynamic programming", "Define an array dp[nums.length][2], where dp[i][0] is the max subarray sum including nums[i] and without squaring any element.", "dp[i][1] is the max subarray sum including nums[i] and having only one element squared."], "exampleTestcases": "[2,-1,-4,-3]\n[1,-1,1,1,-1,-1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSumAfterOperation(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxSumAfterOperation(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxSumAfterOperation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint maxSumAfterOperation(int* nums, int numsSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxSumAfterOperation(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSumAfterOperation = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxSumAfterOperation(nums: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSumAfterOperation($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxSumAfterOperation(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxSumAfterOperation(nums: IntArray): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func maxSumAfterOperation(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sum_after_operation(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxSumAfterOperation(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_after_operation(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-sum-after-operation nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}}}