{"question_id": "2780", "problem_slug": "make-costs-of-paths-equal-in-a-binary-tree", "problem_title": "Make Costs of Paths Equal in a Binary Tree", "content": "You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.\nEach node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times.\nReturn the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.\nNote:\n\nA perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.\nThe cost of a path is the sum of costs of nodes in the path.\n\n \nExample 1:\n\n\nInput: n = 7, cost = [1,5,2,2,3,3,1]\nOutput: 6\nExplanation: We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve.\n\nExample 2:\n\n\nInput: n = 3, cost = [5,3,3]\nOutput: 0\nExplanation: The two paths already have equal total costs, so no increments are needed.\n\n \nConstraints:\n\n3 <= n <= 105\nn + 1 is a power of 2\ncost.length == n\n1 <= cost[i] <= 104\n\n", "hints": ["The path from the root to a leaf that has the maximum cost should not be modified.", "The optimal way is to increase all other paths to make their costs equal to the path with maximum cost."], "exampleTestcases": "7\n[1,5,2,2,3,3,1]\n3\n[5,3,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minIncrements(int n, vector<int>& cost) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minIncrements(int n, int[] cost) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minIncrements(self, n, cost):\n        \"\"\"\n        :type n: int\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minIncrements(self, n: int, cost: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minIncrements(int n, int* cost, int costSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinIncrements(int n, int[] cost) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} cost\n * @return {number}\n */\nvar minIncrements = function(n, cost) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minIncrements(n: number, cost: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minIncrements($n, $cost) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minIncrements(_ n: Int, _ cost: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minIncrements(n: Int, cost: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minIncrements(int n, List<int> cost) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minIncrements(n int, cost []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} cost\n# @return {Integer}\ndef min_increments(n, cost)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minIncrements(n: Int, cost: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_increments(n: i32, cost: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-increments n cost)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_increments(N :: integer(), Cost :: [integer()]) -> integer().\nmin_increments(N, Cost) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_increments(n :: integer, cost :: [integer]) :: integer\n  def min_increments(n, cost) do\n    \n  end\nend"}}}