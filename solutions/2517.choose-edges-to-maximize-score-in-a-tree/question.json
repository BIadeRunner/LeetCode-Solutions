{"question_id": "2517", "problem_slug": "choose-edges-to-maximize-score-in-a-tree", "problem_title": "Choose Edges to Maximize Score in a Tree", "content": "You are given a weighted tree consisting of n nodes numbered from 0 to n - 1.\nThe tree is rooted at node 0 and represented with a 2D array edges of size n where edges[i] = [pari, weighti] indicates that node pari is the parent of node i, and the edge between them has a weight equal to weighti. Since the root does not have a parent, you have edges[0] = [-1, -1].\nChoose some edges from the tree such that no two chosen edges are adjacent and the sum of the weights of the chosen edges is maximized.\nReturn the maximum sum of the chosen edges.\nNote:\n\nYou are allowed to not choose any edges in the tree, the sum of weights in this case will be 0.\nTwo edges Edge1 and Edge2 in the tree are adjacent if they have a common node.\n\t\nIn other words, they are adjacent if Edge1 connects nodes a and b and Edge2 connects nodes b and c.\n\n\n\n \nExample 1:\n\n\nInput: edges = [[-1,-1],[0,5],[0,10],[2,6],[2,4]]\nOutput: 11\nExplanation: The above diagram shows the edges that we have to choose colored in red.\nThe total score is 5 + 6 = 11.\nIt can be shown that no better score can be obtained.\n\nExample 2:\n\n\nInput: edges = [[-1,-1],[0,5],[0,-6],[0,7]]\nOutput: 7\nExplanation: We choose the edge with weight 7.\nNote that we cannot choose more than one edge because all edges are adjacent to each other.\n\n \nConstraints:\n\nn == edges.length\n1 <= n <= 105\nedges[i].length == 2\npar0 == weight0 == -1\n0 <= pari <= n - 1 for all i >= 1.\npari != i\n-106 <= weighti <= 106 for all i >= 1.\nedges represents a valid tree.\n\n", "hints": ["Use dynamic programming to recursively solve the problem for smaller subtrees.", "You can ignore the edges with negative weights.", "The states of the dp are the following: the root of the subtree you are at, and a boolean variable that will tell you if you have chosen the edge that connects that node and its parent.", "What are the transitions of this dp?"], "exampleTestcases": "[[-1,-1],[0,5],[0,10],[2,6],[2,4]]\n[[-1,-1],[0,5],[0,-6],[0,7]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<vector<int>>& edges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxScore(int[][] edges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxScore(int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[][] edges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar maxScore = function(edges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxScore(edges: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maxScore($edges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxScore(_ edges: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(edges: Array<IntArray>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxScore(List<List<int>> edges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxScore(edges [][]int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer}\ndef max_score(edges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxScore(edges: Array[Array[Int]]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(edges: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-score edges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_score(Edges :: [[integer()]]) -> integer().\nmax_score(Edges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(edges :: [[integer]]) :: integer\n  def max_score(edges) do\n    \n  end\nend"}}}