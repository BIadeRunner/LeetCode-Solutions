{"questionId": "2517", "acRate": 58.099112426035504, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2378", "paidOnly": true, "status": "ac", "title": "Choose Edges to Maximize Score in a Tree", "topicTags": [{"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}], "titleSlug": "choose-edges-to-maximize-score-in-a-tree", "content": "<p>You are given a <strong>weighted</strong> tree consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>The tree is <strong>rooted</strong> at node <code>0</code> and represented with a <strong>2D</strong> array <code>edges</code> of size <code>n</code> where <code>edges[i] = [par<sub>i</sub>, weight<sub>i</sub>]</code> indicates that node <code>par<sub>i</sub></code> is the <strong>parent</strong> of node <code>i</code>, and the edge between them has a weight equal to <code>weight<sub>i</sub></code>. Since the root does <strong>not</strong> have a parent, you have <code>edges[0] = [-1, -1]</code>.</p>\n\n<p>Choose some edges from the tree such that no two chosen edges are <strong>adjacent</strong> and the <strong>sum</strong> of the weights of the chosen edges is maximized.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of the chosen edges</em>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>You are allowed to <strong>not</strong> choose any edges in the tree, the sum of weights in this case will be <code>0</code>.</li>\n\t<li>Two edges <code>Edge<sub>1</sub></code> and <code>Edge<sub>2</sub></code> in the tree are <strong>adjacent</strong> if they have a <strong>common</strong> node.\n\t<ul>\n\t\t<li>In other words, they are adjacent if <code>Edge<sub>1</sub></code> connects nodes <code>a</code> and <code>b</code> and <code>Edge<sub>2</sub></code> connects nodes <code>b</code> and <code>c</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/16/treedrawio.png\" style=\"width: 271px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> edges = [[-1,-1],[0,5],[0,10],[2,6],[2,4]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The above diagram shows the edges that we have to choose colored in red.\nThe total score is 5 + 6 = 11.\nIt can be shown that no better score can be obtained.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/17/treee1293712983719827.png\" style=\"width: 221px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> edges = [[-1,-1],[0,5],[0,-6],[0,7]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We choose the edge with weight 7.\nNote that we cannot choose more than one edge because all edges are adjacent to each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>par<sub>0</sub> == weight<sub>0</sub> == -1</code></li>\n\t<li><code>0 &lt;= par<sub>i</sub> &lt;= n - 1</code> for all <code>i &gt;= 1</code>.</li>\n\t<li><code>par<sub>i</sub> != i</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup></code> for all <code>i &gt;= 1</code>.</li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n", "hints": ["Use dynamic programming to recursively solve the problem for smaller subtrees.", "You can ignore the edges with negative weights.", "The states of the dp are the following: the root of the subtree you are at, and a boolean variable that will tell you if you have chosen the edge that connects that node and its parent.", "What are the transitions of this dp?"], "exampleTestcases": "[[-1,-1],[0,5],[0,10],[2,6],[2,4]]\n[[-1,-1],[0,5],[0,-6],[0,7]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<vector<int>>& edges) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maxScore(int[][] edges) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maxScore(int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[][] edges) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar maxScore = function(edges) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxScore(edges: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maxScore($edges) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxScore(_ edges: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(edges: Array<IntArray>): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxScore(List<List<int>> edges) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxScore(edges [][]int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer}\ndef max_score(edges)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxScore(edges: Array[Array[Int]]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(edges: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-score edges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_score(Edges :: [[integer()]]) -> integer().\nmax_score(Edges) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(edges :: [[integer]]) :: integer\n  def max_score(edges) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "binary-tree-cameras", "title": "Binary Tree Cameras", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "longest-path-with-different-adjacent-characters", "title": "Longest Path With Different Adjacent Characters", "isPaidOnly": false}]}