{"questionId": "2107", "acRate": 74.75311623318571, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1980", "paidOnly": false, "status": "ac", "title": "Find Unique Binary String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}], "titleSlug": "find-unique-binary-string", "content": "<p>Given an array of strings <code>nums</code> containing <code>n</code> <strong>unique</strong> binary strings each of length <code>n</code>, return <em>a binary string of length </em><code>n</code><em> that <strong>does not appear</strong> in </em><code>nums</code><em>. If there are multiple answers, you may return <strong>any</strong> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;01&quot;,&quot;10&quot;]\n<strong>Output:</strong> &quot;11&quot;\n<strong>Explanation:</strong> &quot;11&quot; does not appear in nums. &quot;00&quot; would also be correct.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;00&quot;,&quot;01&quot;]\n<strong>Output:</strong> &quot;11&quot;\n<strong>Explanation:</strong> &quot;11&quot; does not appear in nums. &quot;10&quot; would also be correct.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;111&quot;,&quot;011&quot;,&quot;001&quot;]\n<strong>Output:</strong> &quot;101&quot;\n<strong>Explanation:</strong> &quot;101&quot; does not appear in nums. &quot;000&quot;, &quot;010&quot;, &quot;100&quot;, and &quot;110&quot; would also be correct.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n\t<li><code>nums[i].length == n</code></li>\n\t<li><code>nums[i] </code>is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li>All the strings of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["We can convert the given strings into base 10 integers.", "Can we use recursion to generate all possible strings?"], "exampleTestcases": "[\"01\",\"10\"]\n[\"00\",\"01\"]\n[\"111\",\"011\",\"001\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string findDifferentBinaryString(vector<string>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String findDifferentBinaryString(String[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDifferentBinaryString(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDifferentBinaryString(self, nums: List[str]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* findDifferentBinaryString(char** nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FindDifferentBinaryString(string[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} nums\n * @return {string}\n */\nvar findDifferentBinaryString = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDifferentBinaryString(nums: string[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $nums\n     * @return String\n     */\n    function findDifferentBinaryString($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDifferentBinaryString(_ nums: [String]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDifferentBinaryString(nums: Array<String>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String findDifferentBinaryString(List<String> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findDifferentBinaryString(nums []string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} nums\n# @return {String}\ndef find_different_binary_string(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDifferentBinaryString(nums: Array[String]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_different_binary_string(nums: Vec<String>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-different-binary-string nums)\n  (-> (listof string?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_different_binary_string(Nums :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nfind_different_binary_string(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_different_binary_string(nums :: [String.t]) :: String.t\n  def find_different_binary_string(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "missing-number", "title": "Missing Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-all-numbers-disappeared-in-an-array", "title": "Find All Numbers Disappeared in an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "random-pick-with-blacklist", "title": "Random Pick with Blacklist", "isPaidOnly": false}]}