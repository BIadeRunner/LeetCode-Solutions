{"question_id": "2107", "problem_slug": "find-unique-binary-string", "problem_title": "Find Unique Binary String", "content": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.\n \nExample 1:\n\nInput: nums = [\"01\",\"10\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"00\" would also be correct.\n\nExample 2:\n\nInput: nums = [\"00\",\"01\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"10\" would also be correct.\n\nExample 3:\n\nInput: nums = [\"111\",\"011\",\"001\"]\nOutput: \"101\"\nExplanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct.\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 16\nnums[i].length == n\nnums[i] is either '0' or '1'.\nAll the strings of nums are unique.\n\n", "hints": ["We can convert the given strings into base 10 integers.", "Can we use recursion to generate all possible strings?"], "exampleTestcases": "[\"01\",\"10\"]\n[\"00\",\"01\"]\n[\"111\",\"011\",\"001\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string findDifferentBinaryString(vector<string>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String findDifferentBinaryString(String[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findDifferentBinaryString(self, nums):\n        \"\"\"\n        :type nums: List[str]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findDifferentBinaryString(self, nums: List[str]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* findDifferentBinaryString(char** nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string FindDifferentBinaryString(string[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} nums\n * @return {string}\n */\nvar findDifferentBinaryString = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findDifferentBinaryString(nums: string[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $nums\n     * @return String\n     */\n    function findDifferentBinaryString($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findDifferentBinaryString(_ nums: [String]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findDifferentBinaryString(nums: Array<String>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String findDifferentBinaryString(List<String> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findDifferentBinaryString(nums []string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} nums\n# @return {String}\ndef find_different_binary_string(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findDifferentBinaryString(nums: Array[String]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_different_binary_string(nums: Vec<String>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-different-binary-string nums)\n  (-> (listof string?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_different_binary_string(Nums :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nfind_different_binary_string(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_different_binary_string(nums :: [String.t]) :: String.t\n  def find_different_binary_string(nums) do\n    \n  end\nend"}}}