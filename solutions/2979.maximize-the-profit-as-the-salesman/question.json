{"questionId": "2979", "acRate": 36.72856539947408, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2830", "paidOnly": false, "status": "ac", "title": "Maximize the Profit as the Salesman", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "maximize-the-profit-as-the-salesman", "content": "<p>You are given an integer <code>n</code> representing the number of houses on a number line, numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>Additionally, you are given a 2D integer array <code>offers</code> where <code>offers[i] = [start<sub>i</sub>, end<sub>i</sub>, gold<sub>i</sub>]</code>, indicating that <code>i<sup>th</sup></code> buyer wants to buy all the houses from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> for <code>gold<sub>i</sub></code> amount of gold.</p>\n\n<p>As a salesman, your goal is to <strong>maximize</strong> your earnings by strategically selecting and selling houses to buyers.</p>\n\n<p>Return <em>the maximum amount of gold you can earn</em>.</p>\n\n<p><strong>Note</strong> that different buyers can&#39;t buy the same house, and some houses may remain unsold.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1<sup>st</sup> buyer for 1 gold and houses in the range [1,3] to 3<sup>rd</sup> buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2<sup>nd</sup> buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= offers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>offers[i].length == 3</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= gold<sub>i</sub> &lt;= 10<sup>3</sup></code></li>\n</ul>\n", "hints": ["<div class=\"_1l1MA\">The intended solution uses a dynamic programming approach to solve the problem.</div>", "<div class=\"_1l1MA\">Sort the array offers by <code>start<sub>i</sub></code>.</div>", "<div class=\"_1l1MA\">Let <code>dp[i]</code> = { the maximum amount of gold if the sold houses are in the range <code>[0 \u2026 i]</code> }.</div>"], "exampleTestcases": "5\n[[0,0,1],[0,2,2],[1,3,2]]\n5\n[[0,0,1],[0,2,10],[1,3,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximizeTheProfit(int n, vector<vector<int>>& offers) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximizeTheProfit(int n, List<List<Integer>> offers) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximizeTheProfit(self, n, offers):\n        \"\"\"\n        :type n: int\n        :type offers: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximizeTheProfit(int n, int** offers, int offersSize, int* offersColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximizeTheProfit(int n, IList<IList<int>> offers) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} offers\n * @return {number}\n */\nvar maximizeTheProfit = function(n, offers) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximizeTheProfit(n: number, offers: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $offers\n     * @return Integer\n     */\n    function maximizeTheProfit($n, $offers) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximizeTheProfit(_ n: Int, _ offers: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximizeTheProfit(n: Int, offers: List<List<Int>>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximizeTheProfit(int n, List<List<int>> offers) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximizeTheProfit(n int, offers [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} offers\n# @return {Integer}\ndef maximize_the_profit(n, offers)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximizeTheProfit(n: Int, offers: List[List[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximize_the_profit(n: i32, offers: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximize-the-profit n offers)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximize_the_profit(N :: integer(), Offers :: [[integer()]]) -> integer().\nmaximize_the_profit(N, Offers) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximize_the_profit(n :: integer, offers :: [[integer]]) :: integer\n  def maximize_the_profit(n, offers) do\n    \n  end\nend"}], "similarQuestionList": []}