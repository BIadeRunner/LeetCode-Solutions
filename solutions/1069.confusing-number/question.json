{"question_id": "1069", "problem_slug": "confusing-number", "problem_title": "Confusing Number", "content": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\nWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\nWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\n\nNote that after rotating a number, we can ignore leading zeros.\n\nFor example, after rotating 8000, we have 0008 which is considered as just 8.\n\nGiven an integer n, return true if it is a confusing number, or false otherwise.\n \nExample 1:\n\n\nInput: n = 6\nOutput: true\nExplanation: We get 9 after rotating 6, 9 is a valid number, and 9 != 6.\n\nExample 2:\n\n\nInput: n = 89\nOutput: true\nExplanation: We get 68 after rotating 89, 68 is a valid number and 68 != 89.\n\nExample 3:\n\n\nInput: n = 11\nOutput: false\nExplanation: We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number\n\n \nConstraints:\n\n0 <= n <= 109\n\n", "hints": ["Reverse each digit with their corresponding new digit if an invalid digit is found the return -1. After reversing the digits just compare the reversed number with the original number."], "exampleTestcases": "6\n89\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool confusingNumber(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean confusingNumber(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def confusingNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def confusingNumber(self, n: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool confusingNumber(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ConfusingNumber(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar confusingNumber = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function confusingNumber(n: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function confusingNumber($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func confusingNumber(_ n: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun confusingNumber(n: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool confusingNumber(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func confusingNumber(n int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef confusing_number(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def confusingNumber(n: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn confusing_number(n: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (confusing-number n)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec confusing_number(N :: integer()) -> boolean().\nconfusing_number(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec confusing_number(n :: integer) :: boolean\n  def confusing_number(n) do\n    \n  end\nend"}}}