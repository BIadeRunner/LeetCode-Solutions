{"question_id": "353", "problem_slug": "design-snake-game", "problem_title": "Design Snake Game", "content": "Design a Snake game that is played on a device with screen size height x width. Play the game online if you are not familiar with the game.\nThe snake is initially positioned at the top left corner (0, 0) with a length of 1 unit.\nYou are given an array food where food[i] = (ri, ci) is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by 1.\nEach piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.\nWhen a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake.\nThe game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself).\nImplement the SnakeGame class:\n\nSnakeGame(int width, int height, int[][] food) Initializes the object with a screen of size height x width and the positions of the food.\nint move(String direction) Returns the score of the game after applying one direction move by the snake. If the game is over, return -1.\n\n \nExample 1:\n\n\nInput\n[\"SnakeGame\", \"move\", \"move\", \"move\", \"move\", \"move\", \"move\"]\n[[3, 2, [[1, 2], [0, 1]]], [\"R\"], [\"D\"], [\"R\"], [\"U\"], [\"L\"], [\"U\"]]\nOutput\n[null, 0, 0, 1, 1, 2, -1]\n\nExplanation\nSnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(\"R\"); // return 0\nsnakeGame.move(\"D\"); // return 0\nsnakeGame.move(\"R\"); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move(\"U\"); // return 1\nsnakeGame.move(\"L\"); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move(\"U\"); // return -1, game over because snake collides with border\n\n \nConstraints:\n\n1 <= width, height <= 104\n1 <= food.length <= 50\nfood[i].length == 2\n0 <= ri < height\n0 <= ci < width\ndirection.length == 1\ndirection is 'U', 'D', 'L', or 'R'.\nAt most 104 calls will be made to move.\n\n", "hints": [], "exampleTestcases": "[\"SnakeGame\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\n[[3,2,[[1,2],[0,1]]],[\"R\"],[\"D\"],[\"R\"],[\"U\"],[\"L\"],[\"U\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class SnakeGame {\npublic:\n    SnakeGame(int width, int height, vector<vector<int>>& food) {\n        \n    }\n    \n    int move(string direction) {\n        \n    }\n};\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame* obj = new SnakeGame(width, height, food);\n * int param_1 = obj->move(direction);\n */"}, "Java": {"langSlug": "java", "code": "class SnakeGame {\n\n    public SnakeGame(int width, int height, int[][] food) {\n        \n    }\n    \n    public int move(String direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame obj = new SnakeGame(width, height, food);\n * int param_1 = obj.move(direction);\n */"}, "Python": {"langSlug": "python", "code": "class SnakeGame(object):\n\n    def __init__(self, width, height, food):\n        \"\"\"\n        :type width: int\n        :type height: int\n        :type food: List[List[int]]\n        \"\"\"\n        \n\n    def move(self, direction):\n        \"\"\"\n        :type direction: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame(width, height, food)\n# param_1 = obj.move(direction)"}, "Python3": {"langSlug": "python3", "code": "class SnakeGame:\n\n    def __init__(self, width: int, height: int, food: List[List[int]]):\n        \n\n    def move(self, direction: str) -> int:\n        \n\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame(width, height, food)\n# param_1 = obj.move(direction)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} SnakeGame;\n\n\nSnakeGame* snakeGameCreate(int width, int height, int** food, int foodSize, int* foodColSize) {\n    \n}\n\nint snakeGameMove(SnakeGame* obj, char * direction) {\n  \n}\n\nvoid snakeGameFree(SnakeGame* obj) {\n    \n}\n\n/**\n * Your SnakeGame struct will be instantiated and called as such:\n * SnakeGame* obj = snakeGameCreate(width, height, food, foodSize, foodColSize);\n * int param_1 = snakeGameMove(obj, direction);\n \n * snakeGameFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class SnakeGame {\n\n    public SnakeGame(int width, int height, int[][] food) {\n        \n    }\n    \n    public int Move(string direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * SnakeGame obj = new SnakeGame(width, height, food);\n * int param_1 = obj.Move(direction);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} width\n * @param {number} height\n * @param {number[][]} food\n */\nvar SnakeGame = function(width, height, food) {\n    \n};\n\n/** \n * @param {string} direction\n * @return {number}\n */\nSnakeGame.prototype.move = function(direction) {\n    \n};\n\n/** \n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class SnakeGame {\n    constructor(width: number, height: number, food: number[][]) {\n\n    }\n\n    move(direction: string): number {\n\n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, "PHP": {"langSlug": "php", "code": "class SnakeGame {\n    /**\n     * @param Integer $width\n     * @param Integer $height\n     * @param Integer[][] $food\n     */\n    function __construct($width, $height, $food) {\n        \n    }\n  \n    /**\n     * @param String $direction\n     * @return Integer\n     */\n    function move($direction) {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * $obj = SnakeGame($width, $height, $food);\n * $ret_1 = $obj->move($direction);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass SnakeGame {\n\n    init(_ width: Int, _ height: Int, _ food: [[Int]]) {\n        \n    }\n    \n    func move(_ direction: String) -> Int {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * let obj = SnakeGame(width, height, food)\n * let ret_1: Int = obj.move(direction)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class SnakeGame(width: Int, height: Int, food: Array<IntArray>) {\n\n    fun move(direction: String): Int {\n        \n    }\n\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, "Go": {"langSlug": "golang", "code": "type SnakeGame struct {\n    \n}\n\n\nfunc Constructor(width int, height int, food [][]int) SnakeGame {\n    \n}\n\n\nfunc (this *SnakeGame) Move(direction string) int {\n    \n}\n\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * obj := Constructor(width, height, food);\n * param_1 := obj.Move(direction);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class SnakeGame\n\n=begin\n    :type width: Integer\n    :type height: Integer\n    :type food: Integer[][]\n=end\n    def initialize(width, height, food)\n        \n    end\n\n\n=begin\n    :type direction: String\n    :rtype: Integer\n=end\n    def move(direction)\n        \n    end\n\n\nend\n\n# Your SnakeGame object will be instantiated and called as such:\n# obj = SnakeGame.new(width, height, food)\n# param_1 = obj.move(direction)"}, "Scala": {"langSlug": "scala", "code": "class SnakeGame(_width: Int, _height: Int, _food: Array[Array[Int]]) {\n\n    def move(direction: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * var obj = new SnakeGame(width, height, food)\n * var param_1 = obj.move(direction)\n */"}, "Rust": {"langSlug": "rust", "code": "struct SnakeGame {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SnakeGame {\n\n    fn new(width: i32, height: i32, food: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn make_a_move(&self, direction: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * let obj = SnakeGame::new(width, height, food);\n * let ret_1: i32 = obj.move(direction);\n */"}, "Racket": {"langSlug": "racket", "code": "(define snake-game%\n  (class object%\n    (super-new)\n\n    ; width : exact-integer?\n\n    ; height : exact-integer?\n\n    ; food : (listof (listof exact-integer?))\n    (init-field\n      width\n      height\n      food)\n    \n    ; move : string? -> exact-integer?\n    (define/public (move direction)\n\n      )))\n\n;; Your snake-game% object will be instantiated and called as such:\n;; (define obj (new snake-game% [width width] [height height] [food food]))\n;; (define param_1 (send obj move direction))"}, "Erlang": {"langSlug": "erlang", "code": "-spec snake_game_init_(Width :: integer(), Height :: integer(), Food :: [[integer()]]) -> any().\nsnake_game_init_(Width, Height, Food) ->\n  .\n\n-spec snake_game_move(Direction :: unicode:unicode_binary()) -> integer().\nsnake_game_move(Direction) ->\n  .\n\n\n%% Your functions will be called as such:\n%% snake_game_init_(Width, Height, Food),\n%% Param_1 = snake_game_move(Direction),\n\n%% snake_game_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule SnakeGame do\n  @spec init_(width :: integer, height :: integer, food :: [[integer]]) :: any\n  def init_(width, height, food) do\n\n  end\n\n  @spec move(direction :: String.t) :: integer\n  def move(direction) do\n\n  end\nend\n\n# Your functions will be called as such:\n# SnakeGame.init_(width, height, food)\n# param_1 = SnakeGame.move(direction)\n\n# SnakeGame.init_ will be called before every test case, in which you can do some necessary initializations."}}}