{"questionId": "1331", "acRate": 68.05599813056317, "difficulty": "Medium", "freqBar": 75.73239113071567, "frontendQuestionId": "1219", "paidOnly": false, "status": "ac", "title": "Path with Maximum Gold", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "path-with-maximum-gold", "content": "<p>In a gold mine <code>grid</code> of size <code>m x n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n\n<ul>\n\t<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n\t<li>From your position, you can walk one step to the left, right, up, or down.</li>\n\t<li>You can&#39;t visit the same cell more than once.</li>\n\t<li>Never visit a cell with <code>0</code> gold.</li>\n\t<li>You can start and stop collecting gold from <strong>any </strong>position in the grid that has some gold.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,6,0],[5,8,7],[0,9,0]]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong>\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -&gt; 8 -&gt; 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong>\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 15</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n\t<li>There are at most <strong>25 </strong>cells containing gold.</li>\n</ul>\n", "hints": ["Use recursion to try all such paths and find the one with the maximum value."], "exampleTestcases": "[[0,6,0],[5,8,7],[0,9,0]]\n[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getMaximumGold(vector<vector<int>>& grid) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getMaximumGold(int[][] grid) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getMaximumGold(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getMaximumGold(self, grid: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int getMaximumGold(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetMaximumGold(int[][] grid) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar getMaximumGold = function(grid) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getMaximumGold(grid: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function getMaximumGold($grid) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getMaximumGold(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getMaximumGold(grid: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int getMaximumGold(List<List<int>> grid) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getMaximumGold(grid [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef get_maximum_gold(grid)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getMaximumGold(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_maximum_gold(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-maximum-gold grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_maximum_gold(Grid :: [[integer()]]) -> integer().\nget_maximum_gold(Grid) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_maximum_gold(grid :: [[integer]]) :: integer\n  def get_maximum_gold(grid) do\n    \n  end\nend"}], "similarQuestionList": []}