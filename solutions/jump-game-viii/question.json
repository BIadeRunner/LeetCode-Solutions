{"questionId": "2056", "acRate": 45.681929281407854, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2297", "paidOnly": true, "status": "ac", "title": "Jump Game VIII", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}, {"name": "Shortest Path", "id": "VG9waWNUYWdOb2RlOjYxMDc2", "slug": "shortest-path"}], "titleSlug": "jump-game-viii", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>. You are initially standing at index <code>0</code>. You can jump from index <code>i</code> to index <code>j</code> where <code>i &lt; j</code> if:</p>\n\n<ul>\n\t<li><code>nums[i] &lt;= nums[j]</code> and <code>nums[k] &lt; nums[i]</code> for all indexes <code>k</code> in the range <code>i &lt; k &lt; j</code>, or</li>\n\t<li><code>nums[i] &gt; nums[j]</code> and <code>nums[k] &gt;= nums[i]</code> for all indexes <code>k</code> in the range <code>i &lt; k &lt; j</code>.</li>\n</ul>\n\n<p>You are also given an integer array <code>costs</code> of length <code>n</code> where <code>costs[i]</code> denotes the cost of jumping <strong>to</strong> index <code>i</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> cost to jump to the index </em><code>n - 1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4,4,1], costs = [3,7,6,4,2]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> You start at index 0.\n- Jump to index 2 with a cost of costs[2] = 6.\n- Jump to index 4 with a cost of costs[4] = 2.\nThe total cost is 8. It can be proven that 8 is the minimum cost needed.\nTwo other possible paths are from index 0 -&gt; 1 -&gt; 4 and index 0 -&gt; 2 -&gt; 3 -&gt; 4.\nThese have a total cost of 9 and 12, respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2], costs = [1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Start at index 0.\n- Jump to index 1 with a cost of costs[1] = 1.\n- Jump to index 2 with a cost of costs[2] = 1.\nThe total cost is 2. Note that you cannot jump directly from index 0 to index 2 because nums[0] &lt;= nums[1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == costs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], costs[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["For each index, find the indexes that you can jump to.", "We can do this by using a monotonic stack and iterating through the array backwards.", "Create another integer array of length n called dp where dp[i] is the minimum cost of getting to index i."], "exampleTestcases": "[3,2,4,4,1]\n[3,7,6,4,2]\n[0,1,2]\n[1,1,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long minCost(vector<int>& nums, vector<int>& costs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long minCost(int[] nums, int[] costs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minCost(self, nums, costs):\n        \"\"\"\n        :type nums: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long minCost(int* nums, int numsSize, int* costs, int costsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MinCost(int[] nums, int[] costs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[]} costs\n * @return {number}\n */\nvar minCost = function(nums, costs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minCost(nums: number[], costs: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minCost($nums, $costs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minCost(_ nums: [Int], _ costs: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minCost(nums: IntArray, costs: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minCost(List<int> nums, List<int> costs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minCost(nums []int, costs []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[]} costs\n# @return {Integer}\ndef min_cost(nums, costs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minCost(nums: Array[Int], costs: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>, costs: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-cost nums costs)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_cost(Nums :: [integer()], Costs :: [integer()]) -> integer().\nmin_cost(Nums, Costs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost(nums :: [integer], costs :: [integer]) :: integer\n  def min_cost(nums, costs) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "jump-game-ii", "title": "Jump Game II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game", "title": "Jump Game", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game-iii", "title": "Jump Game III", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "jump-game-iv", "title": "Jump Game IV", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "jump-game-v", "title": "Jump Game V", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game-vi", "title": "Jump Game VI", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game-vii", "title": "Jump Game VII", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game-viii", "title": "Jump Game VIII", "isPaidOnly": true}]}