{"question_id": "1400", "problem_slug": "find-winner-on-a-tic-tac-toe-game", "problem_title": "Find Winner on a Tic Tac Toe Game", "content": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:\n\nPlayers take turns placing characters into empty squares ' '.\nThe first player A always places 'X' characters, while the second player B always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never on filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\n\nGiven a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".\nYou can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.\n \nExample 1:\n\n\nInput: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: A wins, they always play first.\n\nExample 2:\n\n\nInput: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: B wins.\n\nExample 3:\n\n\nInput: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.\n\n \nConstraints:\n\n1 <= moves.length <= 9\nmoves[i].length == 2\n0 <= rowi, coli <= 2\nThere are no repeated elements on moves.\nmoves follow the rules of tic tac toe.\n\n", "hints": ["It's straightforward to check if A or B won or not, check for each row/column/diag if all the three are the same.", "Then if no one wins, the game is a draw iff the board is full, i.e. moves.length = 9 otherwise is pending."], "exampleTestcases": "[[0,0],[2,0],[1,1],[2,1],[2,2]]\n[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\n[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string tictactoe(vector<vector<int>>& moves) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String tictactoe(int[][] moves) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def tictactoe(self, moves):\n        \"\"\"\n        :type moves: List[List[int]]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* tictactoe(int** moves, int movesSize, int* movesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string Tictactoe(int[][] moves) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} moves\n * @return {string}\n */\nvar tictactoe = function(moves) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function tictactoe(moves: number[][]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $moves\n     * @return String\n     */\n    function tictactoe($moves) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func tictactoe(_ moves: [[Int]]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun tictactoe(moves: Array<IntArray>): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String tictactoe(List<List<int>> moves) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func tictactoe(moves [][]int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} moves\n# @return {String}\ndef tictactoe(moves)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def tictactoe(moves: Array[Array[Int]]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn tictactoe(moves: Vec<Vec<i32>>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (tictactoe moves)\n  (-> (listof (listof exact-integer?)) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec tictactoe(Moves :: [[integer()]]) -> unicode:unicode_binary().\ntictactoe(Moves) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec tictactoe(moves :: [[integer]]) :: String.t\n  def tictactoe(moves) do\n    \n  end\nend"}}}