{"question_id": "1359", "problem_slug": "circular-permutation-in-binary-representation", "problem_title": "Circular Permutation in Binary Representation", "content": "Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :\n\np[0] = start\np[i] and p[i+1] differ by only one bit in their binary representation.\np[0] and p[2^n -1] must also differ by only one bit in their binary representation.\n\n \nExample 1:\n\r\nInput: n = 2, start = 3\r\nOutput: [3,2,0,1]\r\nExplanation: The binary representation of the permutation is (11,10,00,01). \r\nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]\r\n\nExample 2:\n\r\nInput: n = 3, start = 2\r\nOutput: [2,6,7,5,4,0,1,3]\r\nExplanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).\r\n\n \nConstraints:\n\n1 <= n <= 16\n0 <= start < 2 ^ n\n", "hints": ["Use gray code to generate a n-bit sequence.", "Rotate the sequence such that its first element is start."], "exampleTestcases": "2\n3\n3\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    vector<int> circularPermutation(int n, int start) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public List<Integer> circularPermutation(int n, int start) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def circularPermutation(self, n, start):\r\n        \"\"\"\r\n        :type n: int\r\n        :type start: int\r\n        :rtype: List[int]\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def circularPermutation(self, n: int, start: int) -> List[int]:"}, "C": {"langSlug": "c", "code": "/**\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* circularPermutation(int n, int start, int* returnSize){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public IList<int> CircularPermutation(int n, int start) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {number} n\r\n * @param {number} start\r\n * @return {number[]}\r\n */\r\nvar circularPermutation = function(n, start) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function circularPermutation(n: number, start: number): number[] {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer $n\r\n     * @param Integer $start\r\n     * @return Integer[]\r\n     */\r\n    function circularPermutation($n, $start) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func circularPermutation(_ n: Int, _ start: Int) -> [Int] {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun circularPermutation(n: Int, start: Int): List<Int> {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func circularPermutation(n int, start int) []int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\r\n# @param {Integer} start\r\n# @return {Integer[]}\r\ndef circular_permutation(n, start)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def circularPermutation(n: Int, start: Int): List[Int] = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn circular_permutation(n: i32, start: i32) -> Vec<i32> {\r\n        \r\n    }\r\n}"}}}