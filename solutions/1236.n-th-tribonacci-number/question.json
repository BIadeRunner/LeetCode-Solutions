{"question_id": "1236", "problem_slug": "n-th-tribonacci-number", "problem_title": "N-th Tribonacci Number", "content": "The Tribonacci sequence Tn is defined as follows: \nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.\n \nExample 1:\n\nInput: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n\nExample 2:\n\nInput: n = 25\nOutput: 1389537\n\n \nConstraints:\n\n0 <= n <= 37\nThe answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.\n\n", "hints": ["Make an array F of length 38, and set F[0] = 0, F[1] = F[2] = 1.", "Now write a loop where you set F[n+3] = F[n] + F[n+1] + F[n+2], and return F[n]."], "exampleTestcases": "4\n25", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int tribonacci(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int tribonacci(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def tribonacci(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint tribonacci(int n){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int Tribonacci(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar tribonacci = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function tribonacci(n: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function tribonacci($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func tribonacci(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun tribonacci(n: Int): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func tribonacci(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef tribonacci(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def tribonacci(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn tribonacci(n: i32) -> i32 {\n        \n    }\n}"}, "Erlang": {"langSlug": "erlang", "code": "-spec tribonacci(N :: integer()) -> integer().\ntribonacci(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec tribonacci(n :: integer) :: integer\n  def tribonacci(n) do\n    \n  end\nend"}}}