{"question_id": "548", "problem_slug": "split-array-with-equal-sum", "problem_title": "Split Array with Equal Sum", "content": "Given an integer array nums of length n, return true if there is a triplet (i, j, k) which satisfies the following conditions:\n\n0 < i, i + 1 < j, j + 1 < k < n - 1\nThe sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) is equal.\n\nA subarray (l, r) represents a slice of the original array starting from the element indexed l to the element indexed r.\n \nExample 1:\n\nInput: nums = [1,2,1,2,1,2,1]\nOutput: true\nExplanation:\ni = 1, j = 3, k = 5. \nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1\n\nExample 2:\n\nInput: nums = [1,2,1,2,1,2,1,2]\nOutput: false\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 2000\n-106 <= nums[i] <= 106\n\n", "hints": [], "exampleTestcases": "[1,2,1,2,1,2,1]\n[1,2,1,2,1,2,1,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool splitArray(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean splitArray(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def splitArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def splitArray(self, nums: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool splitArray(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool SplitArray(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar splitArray = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function splitArray(nums: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function splitArray($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func splitArray(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun splitArray(nums: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool splitArray(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func splitArray(nums []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef split_array(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def splitArray(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn split_array(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (split-array nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec split_array(Nums :: [integer()]) -> boolean().\nsplit_array(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_array(nums :: [integer]) :: boolean\n  def split_array(nums) do\n    \n  end\nend"}}}