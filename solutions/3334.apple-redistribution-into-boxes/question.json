{"question_id": "3334", "problem_slug": "apple-redistribution-into-boxes", "problem_title": "Apple Redistribution into Boxes", "content": "You are given an array apple of size n and an array capacity of size m.\nThere are n packs where the ith pack contains apple[i] apples. There are m boxes as well, and the ith box has a capacity of capacity[i] apples.\nReturn the minimum number of boxes you need to select to redistribute these n packs of apples into boxes.\nNote that, apples from the same pack can be distributed into different boxes.\n \nExample 1:\n\nInput: apple = [1,3,2], capacity = [4,3,1,5,2]\nOutput: 2\nExplanation: We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples.\n\nExample 2:\n\nInput: apple = [5,5,5], capacity = [2,4,2,7]\nOutput: 4\nExplanation: We will need to use all the boxes.\n\n \nConstraints:\n\n1 <= n == apple.length <= 50\n1 <= m == capacity.length <= 50\n1 <= apple[i], capacity[i] <= 50\nThe input is generated such that it's possible to redistribute packs of apples into boxes.\n\n", "hints": ["Sort array <code>capacity</code> in non-decreasing order.", "Greedily select boxes with the largest capacities to redistribute apples optimally."], "exampleTestcases": "[1,3,2]\n[4,3,1,5,2]\n[5,5,5]\n[2,4,2,7]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumBoxes(vector<int>& apple, vector<int>& capacity) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumBoxes(int[] apple, int[] capacity) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumBoxes(self, apple, capacity):\n        \"\"\"\n        :type apple: List[int]\n        :type capacity: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumBoxes(int* apple, int appleSize, int* capacity, int capacitySize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumBoxes(int[] apple, int[] capacity) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} apple\n * @param {number[]} capacity\n * @return {number}\n */\nvar minimumBoxes = function(apple, capacity) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumBoxes(apple: number[], capacity: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $apple\n     * @param Integer[] $capacity\n     * @return Integer\n     */\n    function minimumBoxes($apple, $capacity) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumBoxes(_ apple: [Int], _ capacity: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumBoxes(apple: IntArray, capacity: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumBoxes(List<int> apple, List<int> capacity) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumBoxes(apple []int, capacity []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} apple\n# @param {Integer[]} capacity\n# @return {Integer}\ndef minimum_boxes(apple, capacity)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumBoxes(apple: Array[Int], capacity: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_boxes(apple: Vec<i32>, capacity: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-boxes apple capacity)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_boxes(Apple :: [integer()], Capacity :: [integer()]) -> integer().\nminimum_boxes(Apple, Capacity) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_boxes(apple :: [integer], capacity :: [integer]) :: integer\n  def minimum_boxes(apple, capacity) do\n    \n  end\nend"}}}