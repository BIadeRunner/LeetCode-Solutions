{"question_id": "1121", "problem_slug": "partition-array-for-maximum-sum", "problem_title": "Partition Array for Maximum Sum", "content": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n \nExample 1:\n\nInput: arr = [1,15,7,9,2,5,10], k = 3\nOutput: 84\nExplanation: arr becomes [15,15,15,9,10,10,10]\n\nExample 2:\n\nInput: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\nOutput: 83\n\nExample 3:\n\nInput: arr = [1], k = 1\nOutput: 1\n\n \nConstraints:\n\n1 <= arr.length <= 500\n0 <= arr[i] <= 109\n1 <= k <= arr.length\n\n", "hints": ["Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].", "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."], "exampleTestcases": "[1,15,7,9,2,5,10]\n3\n[1,4,1,5,7,3,6,1,9,9,3]\n4\n[1]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxSumAfterPartitioning(int[] arr, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxSumAfterPartitioning(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxSumAfterPartitioning(int* arr, int arrSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxSumAfterPartitioning(int[] arr, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(arr, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxSumAfterPartitioning(arr: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSumAfterPartitioning($arr, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxSumAfterPartitioning(_ arr: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxSumAfterPartitioning(List<int> arr, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxSumAfterPartitioning(arr []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Integer}\ndef max_sum_after_partitioning(arr, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxSumAfterPartitioning(arr: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_after_partitioning(arr: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-sum-after-partitioning arr k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_sum_after_partitioning(Arr :: [integer()], K :: integer()) -> integer().\nmax_sum_after_partitioning(Arr, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sum_after_partitioning(arr :: [integer], k :: integer) :: integer\n  def max_sum_after_partitioning(arr, k) do\n    \n  end\nend"}}}