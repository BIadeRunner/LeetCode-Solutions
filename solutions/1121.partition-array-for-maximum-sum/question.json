{"questionId": "1121", "acRate": 76.72729967028489, "difficulty": "Medium", "freqBar": 44.56554759671958, "frontendQuestionId": "1043", "paidOnly": false, "status": "ac", "title": "Partition Array for Maximum Sum", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "partition-array-for-maximum-sum", "content": "<p>Given an integer array <code>arr</code>, partition the array into (contiguous) subarrays of length <strong>at most</strong> <code>k</code>. After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p>\n\n<p>Return <em>the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,15,7,9,2,5,10], k = 3\n<strong>Output:</strong> 84\n<strong>Explanation:</strong> arr becomes [15,15,15,9,10,10,10]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n<strong>Output:</strong> 83\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= arr.length</code></li>\n</ul>\n", "hints": ["Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].", "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."], "exampleTestcases": "[1,15,7,9,2,5,10]\n3\n[1,4,1,5,7,3,6,1,9,9,3]\n4\n[1]\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxSumAfterPartitioning(int[] arr, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSumAfterPartitioning(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxSumAfterPartitioning(int* arr, int arrSize, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxSumAfterPartitioning(int[] arr, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(arr, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSumAfterPartitioning(arr: number[], k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSumAfterPartitioning($arr, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSumAfterPartitioning(_ arr: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxSumAfterPartitioning(List<int> arr, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSumAfterPartitioning(arr []int, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Integer}\ndef max_sum_after_partitioning(arr, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSumAfterPartitioning(arr: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_after_partitioning(arr: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-sum-after-partitioning arr k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_sum_after_partitioning(Arr :: [integer()], K :: integer()) -> integer().\nmax_sum_after_partitioning(Arr, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sum_after_partitioning(arr :: [integer], k :: integer) :: integer\n  def max_sum_after_partitioning(arr, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum", "title": "Subsequence of Size K With the Largest Even Sum", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "partition-string-into-minimum-beautiful-substrings", "title": "Partition String Into Minimum Beautiful Substrings", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-substring-partition-of-equal-character-frequency", "title": "Minimum Substring Partition of Equal Character Frequency", "isPaidOnly": false}]}