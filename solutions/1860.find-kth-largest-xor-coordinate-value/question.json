{"question_id": "1860", "problem_slug": "find-kth-largest-xor-coordinate-value", "problem_title": "Find Kth Largest XOR Coordinate Value", "content": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.\n \nExample 1:\n\nInput: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n\nExample 2:\n\nInput: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n\nExample 3:\n\nInput: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 1000\n0 <= matrix[i][j] <= 106\n1 <= k <= m * n\n\n", "hints": ["Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix."], "exampleTestcases": "[[5,2],[1,6]]\n1\n[[5,2],[1,6]]\n2\n[[5,2],[1,6]]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int kthLargestValue(vector<vector<int>>& matrix, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int kthLargestValue(int[][] matrix, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kthLargestValue(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int kthLargestValue(int** matrix, int matrixSize, int* matrixColSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int KthLargestValue(int[][] matrix, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthLargestValue = function(matrix, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kthLargestValue(matrix: number[][], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthLargestValue($matrix, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kthLargestValue(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kthLargestValue(matrix: Array<IntArray>, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int kthLargestValue(List<List<int>> matrix, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kthLargestValue(matrix [][]int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef kth_largest_value(matrix, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kthLargestValue(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn kth_largest_value(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (kth-largest-value matrix k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec kth_largest_value(Matrix :: [[integer()]], K :: integer()) -> integer().\nkth_largest_value(Matrix, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_largest_value(matrix :: [[integer]], k :: integer) :: integer\n  def kth_largest_value(matrix, k) do\n    \n  end\nend"}}}