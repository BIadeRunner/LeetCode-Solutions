{"question_id": "1919", "problem_slug": "sort-features-by-popularity", "problem_title": "Sort Features by Popularity", "content": "You are given a string array features where features[i] is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array responses, where each responses[i] is a string containing space-separated words.\nThe popularity of a feature is the number of responses[i] that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in features. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.\nReturn the features in sorted order.\n \nExample 1:\n\nInput: features = [\"cooler\",\"lock\",\"touch\"], responses = [\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]\nOutput: [\"touch\",\"cooler\",\"lock\"]\nExplanation: appearances(\"cooler\") = 1, appearances(\"lock\") = 1, appearances(\"touch\") = 2. Since \"cooler\" and \"lock\" both had 1 appearance, \"cooler\" comes first because \"cooler\" came first in the features array.\n\nExample 2:\n\nInput: features = [\"a\",\"aa\",\"b\",\"c\"], responses = [\"a\",\"a aa\",\"a a a a a\",\"b a\"]\nOutput: [\"a\",\"aa\",\"b\",\"c\"]\n\n \nConstraints:\n\n1 <= features.length <= 104\n1 <= features[i].length <= 10\nfeatures contains no duplicates.\nfeatures[i] consists of lowercase letters.\n1 <= responses.length <= 102\n1 <= responses[i].length <= 103\nresponses[i] consists of lowercase letters and spaces.\nresponses[i] contains no two consecutive spaces.\nresponses[i] has no leading or trailing spaces.\n\n", "hints": ["Use a hash map to count the frequency of each word of each string.", "Use the map for sorting the features."], "exampleTestcases": "[\"cooler\",\"lock\",\"touch\"]\n[\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]\n[\"a\",\"aa\",\"b\",\"c\"]\n[\"a\",\"a aa\",\"a a a a a\",\"b a\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> sortFeatures(vector<string>& features, vector<string>& responses) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String[] sortFeatures(String[] features, String[] responses) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sortFeatures(self, features, responses):\n        \"\"\"\n        :type features: List[str]\n        :type responses: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sortFeatures(self, features: List[str], responses: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** sortFeatures(char** features, int featuresSize, char** responses, int responsesSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string[] SortFeatures(string[] features, string[] responses) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} features\n * @param {string[]} responses\n * @return {string[]}\n */\nvar sortFeatures = function(features, responses) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sortFeatures(features: string[], responses: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $features\n     * @param String[] $responses\n     * @return String[]\n     */\n    function sortFeatures($features, $responses) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sortFeatures(_ features: [String], _ responses: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sortFeatures(features: Array<String>, responses: Array<String>): Array<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> sortFeatures(List<String> features, List<String> responses) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sortFeatures(features []string, responses []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} features\n# @param {String[]} responses\n# @return {String[]}\ndef sort_features(features, responses)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sortFeatures(features: Array[String], responses: Array[String]): Array[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sort_features(features: Vec<String>, responses: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sort-features features responses)\n  (-> (listof string?) (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sort_features(Features :: [unicode:unicode_binary()], Responses :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nsort_features(Features, Responses) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sort_features(features :: [String.t], responses :: [String.t]) :: [String.t]\n  def sort_features(features, responses) do\n    \n  end\nend"}}}