{"questionId": "1228", "acRate": 67.76898326898328, "difficulty": "Medium", "freqBar": 36.14818580916425, "frontendQuestionId": "1130", "paidOnly": false, "status": "ac", "title": "Minimum Cost Tree From Leaf Values", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}], "titleSlug": "minimum-cost-tree-from-leaf-values", "content": "<p>Given an array <code>arr</code> of positive integers, consider all binary trees such that:</p>\n\n<ul>\n\t<li>Each node has either <code>0</code> or <code>2</code> children;</li>\n\t<li>The values of <code>arr</code> correspond to the values of each <strong>leaf</strong> in an in-order traversal of the tree.</li>\n\t<li>The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.</li>\n</ul>\n\n<p>Among all possible binary trees considered, return <em>the smallest possible sum of the values of each non-leaf node</em>. It is guaranteed this sum fits into a <strong>32-bit</strong> integer.</p>\n\n<p>A node is a <strong>leaf</strong> if and only if it has zero children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/tree1.jpg\" style=\"width: 500px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> arr = [6,2,4]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/tree2.jpg\" style=\"width: 224px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> arr = [4,11]\n<strong>Output:</strong> 44\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 40</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 15</code></li>\n\t<li>It is guaranteed that the answer fits into a <strong>32-bit</strong> signed integer (i.e., it is less than 2<sup>31</sup>).</li>\n</ul>\n", "hints": ["Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j].", "For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j)."], "exampleTestcases": "[6,2,4]\n[4,11]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mctFromLeafValues(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mctFromLeafValues(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mctFromLeafValues(self, arr: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int mctFromLeafValues(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MctFromLeafValues(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar mctFromLeafValues = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mctFromLeafValues(arr: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function mctFromLeafValues($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mctFromLeafValues(_ arr: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mctFromLeafValues(arr: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int mctFromLeafValues(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mctFromLeafValues(arr []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef mct_from_leaf_values(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mctFromLeafValues(arr: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mct_from_leaf_values(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (mct-from-leaf-values arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec mct_from_leaf_values(Arr :: [integer()]) -> integer().\nmct_from_leaf_values(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec mct_from_leaf_values(arr :: [integer]) :: integer\n  def mct_from_leaf_values(arr) do\n    \n  end\nend"}], "similarQuestionList": []}