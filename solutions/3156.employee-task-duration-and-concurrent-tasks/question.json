{"questionId": "3465", "acRate": 53.453689167974886, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3156", "paidOnly": true, "status": "ac", "title": "Employee Task Duration and Concurrent Tasks", "titleSlug": "employee-task-duration-and-concurrent-tasks", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "content": "<p>Table: <code>Tasks</code></p>\n\n<pre>\n+---------------+----------+\n| Column Name   | Type     |\n+---------------+----------+\n| task_id       | int      |\n| employee_id   | int      |\n| start_time    | datetime |\n| end_time      | datetime |\n+---------------+----------+\n(task_id, employee_id) is the primary key for this table.\nEach row in this table contains the task identifier, the employee identifier, and the start and end times of each task.\n</pre>\n\n<p>Write a solution to find the <strong>total duration</strong> of tasks for <strong>each</strong> employee and the <strong>maximum number of concurrent tasks</strong> an employee handled at <strong>any point in time</strong>. The total duration should be <strong>rounded down</strong> to the nearest number of <strong>full hours</strong>.</p>\n\n<p>Return <em>the result table ordered by</em>&nbsp;<code>employee_id</code><strong> <em>ascending</em></strong><em> order</em>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>Tasks table:</p>\n\n<pre class=\"example-io\">\n+---------+-------------+---------------------+---------------------+\n| task_id | employee_id | start_time          | end_time            |\n+---------+-------------+---------------------+---------------------+\n| 1       | 1001        | 2023-05-01 08:00:00 | 2023-05-01 09:00:00 |\n| 2       | 1001        | 2023-05-01 08:30:00 | 2023-05-01 10:30:00 |\n| 3       | 1001        | 2023-05-01 11:00:00 | 2023-05-01 12:00:00 |\n| 7       | 1001        | 2023-05-01 13:00:00 | 2023-05-01 15:30:00 |\n| 4       | 1002        | 2023-05-01 09:00:00 | 2023-05-01 10:00:00 |\n| 5       | 1002        | 2023-05-01 09:30:00 | 2023-05-01 11:30:00 |\n| 6       | 1003        | 2023-05-01 14:00:00 | 2023-05-01 16:00:00 |\n+---------+-------------+---------------------+---------------------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+-------------+------------------+----------------------+\n| employee_id | total_task_hours | max_concurrent_tasks |\n+-------------+------------------+----------------------+\n| 1001        | 6                | 2                    |\n| 1002        | 2                | 2                    |\n| 1003        | 2                | 1                    |\n+-------------+------------------+----------------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>For employee ID 1001:\n\t<ul>\n\t\t<li>Task 1 and Task 2 overlap from 08:30 to 09:00 (30 minutes).</li>\n\t\t<li>Task 7 has a duration of 150 minutes (2 hours and 30 minutes).</li>\n\t\t<li>Total task time: 60 (Task 1) + 120 (Task 2) + 60 (Task 3) + 150 (Task 7) - 30 (overlap) = 360 minutes = 6 hours.</li>\n\t\t<li>Maximum concurrent tasks: 2 (during the overlap period).</li>\n\t</ul>\n\t</li>\n\t<li>For employee ID 1002:\n\t<ul>\n\t\t<li>Task 4 and Task 5 overlap from 09:30 to 10:00 (30 minutes).</li>\n\t\t<li>Total task time: 60 (Task 4) + 120 (Task 5) - 30 (overlap) = 150 minutes = 2 hours and 30 minutes.</li>\n\t\t<li>Total task hours (rounded down): 2 hours.</li>\n\t\t<li>Maximum concurrent tasks: 2 (during the overlap period).</li>\n\t</ul>\n\t</li>\n\t<li>For employee ID 1003:\n\t<ul>\n\t\t<li>No overlapping tasks.</li>\n\t\t<li>Total task time: 120 minutes = 2 hours.</li>\n\t\t<li>Maximum concurrent tasks: 1.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><b>Note:</b> Output table is ordered by employee_id in ascending order.</p>\n</div>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Tasks\":[\"task_id\",\"employee_id\",\"start_time\",\"end_time\"]},\"rows\":{\"Tasks\":[[1,1001,\"2023-05-01 08:00:00\",\"2023-05-01 09:00:00\"],[2,1001,\"2023-05-01 08:30:00\",\"2023-05-01 10:30:00\"],[3,1001,\"2023-05-01 11:00:00\",\"2023-05-01 12:00:00\"],[7,1001,\"2023-05-01 13:00:00\",\"2023-05-01 15:30:00\"],[4,1002,\"2023-05-01 09:00:00\",\"2023-05-01 10:00:00\"],[5,1002,\"2023-05-01 09:30:00\",\"2023-05-01 11:30:00\"],[6,1003,\"2023-05-01 14:00:00\",\"2023-05-01 16:00:00\"]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef find_total_duration(tasks: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": []}