{"question_id": "3442", "problem_slug": "maximum-total-reward-using-operations-i", "problem_title": "Maximum Total Reward Using Operations I", "content": "You are given an integer array rewardValues of length n, representing the values of rewards.\nInitially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:\n\nChoose an unmarked index i from the range [0, n - 1].\nIf rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.\n\nReturn an integer denoting the maximum total reward you can collect by performing the operations optimally.\n \nExample 1:\n\nInput: rewardValues = [1,1,3,3]\nOutput: 4\nExplanation:\nDuring the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.\n\nExample 2:\n\nInput: rewardValues = [1,6,4,3,2]\nOutput: 11\nExplanation:\nMark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.\n\n \nConstraints:\n\n1 <= rewardValues.length <= 2000\n1 <= rewardValues[i] <= 2000\n\n", "hints": ["Sort the rewards array first.", "If we decide to apply some rewards, it's always optimal to apply them in order.", "Let <code>dp[i][j]</code> (true/false) be the state after the first <code>i</code> rewards, indicating whether we can get exactly <code>j</code> points.", "The transition is given by: <code>dp[i][j] = dp[i - 1][j − rewardValues[i]]</code> if <code>j − rewardValues[i] < rewardValues[i]</code>."], "exampleTestcases": "[1,1,3,3]\n[1,6,4,3,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxTotalReward(vector<int>& rewardValues) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward = function(rewardValues) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxTotalReward(rewardValues: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxTotalReward(List<int> rewardValues) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxTotalReward(rewardValues []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-total-reward rewardValues)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_total_reward(RewardValues :: [integer()]) -> integer().\nmax_total_reward(RewardValues) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend"}}}