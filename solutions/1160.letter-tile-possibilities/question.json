{"question_id": "1160", "problem_slug": "letter-tile-possibilities", "problem_title": "Letter Tile Possibilities", "content": "You have n  tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.\n \nExample 1:\n\nInput: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n\nExample 2:\n\nInput: tiles = \"AAABBC\"\nOutput: 188\n\nExample 3:\n\nInput: tiles = \"V\"\nOutput: 1\n\n \nConstraints:\n\n1 <= tiles.length <= 7\ntiles consists of uppercase English letters.\n\n", "hints": ["Try to build the string with a backtracking DFS by considering what you can put in every position."], "exampleTestcases": "\"AAB\"\n\"AAABBC\"\n\"V\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTilePossibilities(string tiles) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numTilePossibilities(String tiles) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numTilePossibilities(self, tiles):\n        \"\"\"\n        :type tiles: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numTilePossibilities(char* tiles) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumTilePossibilities(string tiles) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} tiles\n * @return {number}\n */\nvar numTilePossibilities = function(tiles) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numTilePossibilities(tiles: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $tiles\n     * @return Integer\n     */\n    function numTilePossibilities($tiles) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numTilePossibilities(_ tiles: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numTilePossibilities(tiles: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numTilePossibilities(String tiles) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numTilePossibilities(tiles string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} tiles\n# @return {Integer}\ndef num_tile_possibilities(tiles)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numTilePossibilities(tiles: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_tile_possibilities(tiles: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-tile-possibilities tiles)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_tile_possibilities(Tiles :: unicode:unicode_binary()) -> integer().\nnum_tile_possibilities(Tiles) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_tile_possibilities(tiles :: String.t) :: integer\n  def num_tile_possibilities(tiles) do\n    \n  end\nend"}}}