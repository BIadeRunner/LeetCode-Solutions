{"question_id": "634", "problem_slug": "find-the-derangement-of-an-array", "problem_title": "Find the Derangement of An Array", "content": "In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\nYou are given an integer n. There is originally an array consisting of n integers from 1 to n in ascending order, return the number of derangements it can generate. Since the answer may be huge, return it modulo 109 + 7.\n \nExample 1:\n\nInput: n = 3\nOutput: 2\nExplanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\n\nExample 2:\n\nInput: n = 2\nOutput: 1\n\n \nConstraints:\n\n1 <= n <= 106\n\n", "hints": [], "exampleTestcases": "3\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findDerangement(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findDerangement(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findDerangement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findDerangement(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findDerangement(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindDerangement(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar findDerangement = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findDerangement(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findDerangement($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findDerangement(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findDerangement(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findDerangement(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findDerangement(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef find_derangement(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findDerangement(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_derangement(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-derangement n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_derangement(N :: integer()) -> integer().\nfind_derangement(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_derangement(n :: integer) :: integer\n  def find_derangement(n) do\n    \n  end\nend"}}}