{"question_id": "1298", "problem_slug": "reverse-substrings-between-each-pair-of-parentheses", "problem_title": "Reverse Substrings Between Each Pair of Parentheses", "content": "You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\n \nExample 1:\n\nInput: s = \"(abcd)\"\nOutput: \"dcba\"\n\nExample 2:\n\nInput: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.\n\nExample 3:\n\nInput: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n\n \nConstraints:\n\n1 <= s.length <= 2000\ns only contains lower case English characters and parentheses.\nIt is guaranteed that all parentheses are balanced.\n\n", "hints": ["Find all brackets in the string.", "Does the order of the reverse matter ?", "The order does not matter."], "exampleTestcases": "\"(abcd)\"\n\"(u(love)i)\"\n\"(ed(et(oc))el)\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseParentheses(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String reverseParentheses(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def reverseParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* reverseParentheses(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string ReverseParentheses(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseParentheses = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function reverseParentheses(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseParentheses($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func reverseParentheses(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun reverseParentheses(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String reverseParentheses(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func reverseParentheses(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reverse_parentheses(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def reverseParentheses(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_parentheses(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (reverse-parentheses s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec reverse_parentheses(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreverse_parentheses(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec reverse_parentheses(s :: String.t) :: String.t\n  def reverse_parentheses(s) do\n    \n  end\nend"}}}