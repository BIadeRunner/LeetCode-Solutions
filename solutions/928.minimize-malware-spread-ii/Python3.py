from typing import List
from collections import defaultdict, deque

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        def bfs(start, ignored_node):
            queue = deque([start])
            visited = set([start])
            while queue:
                node = queue.popleft()
                for neighbor in range(len(graph)):
                    if graph[node][neighbor] == 1 and neighbor != ignored_node and neighbor not in visited:
                        visited.add(neighbor)
                        queue.append(neighbor)
            return visited
        
        def count_infected_after_removal(node):
            infected = set(initial) - {node}
            total_infected = set()
            for start in infected:
                total_infected |= bfs(start, node)
            return len(total_infected)
        
        initial.sort()
        min_infected = float('inf')
        best_node = initial[0]
        
        for node in initial:
            infected_count = count_infected_after_removal(node)
            if infected_count < min_infected:
                min_infected = infected_count
                best_node = node
                
        return best_node