{"question_id": "1096", "problem_slug": "maximum-sum-of-two-non-overlapping-subarrays", "problem_title": "Maximum Sum of Two Non-Overlapping Subarrays", "content": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.\nThe array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.\nA subarray is a contiguous part of an array.\n \nExample 1:\n\nInput: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n\nExample 2:\n\nInput: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n\nExample 3:\n\nInput: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.\n\n \nConstraints:\n\n1 <= firstLen, secondLen <= 1000\n2 <= firstLen + secondLen <= 1000\nfirstLen + secondLen <= nums.length <= 1000\n0 <= nums[i] <= 1000\n\n", "hints": ["We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it."], "exampleTestcases": "[0,6,5,2,2,5,1,9,4]\n1\n2\n[3,8,1,3,2,1,8,9,0]\n3\n2\n[2,1,5,6,0,9,5,0,3,8]\n4\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxSumTwoNoOverlap(self, nums, firstLen, secondLen):\n        \"\"\"\n        :type nums: List[int]\n        :type firstLen: int\n        :type secondLen: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxSumTwoNoOverlap(int* nums, int numsSize, int firstLen, int secondLen) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} firstLen\n * @param {number} secondLen\n * @return {number}\n */\nvar maxSumTwoNoOverlap = function(nums, firstLen, secondLen) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxSumTwoNoOverlap(nums: number[], firstLen: number, secondLen: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $firstLen\n     * @param Integer $secondLen\n     * @return Integer\n     */\n    function maxSumTwoNoOverlap($nums, $firstLen, $secondLen) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxSumTwoNoOverlap(_ nums: [Int], _ firstLen: Int, _ secondLen: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxSumTwoNoOverlap(nums: IntArray, firstLen: Int, secondLen: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxSumTwoNoOverlap(List<int> nums, int firstLen, int secondLen) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxSumTwoNoOverlap(nums []int, firstLen int, secondLen int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} first_len\n# @param {Integer} second_len\n# @return {Integer}\ndef max_sum_two_no_overlap(nums, first_len, second_len)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxSumTwoNoOverlap(nums: Array[Int], firstLen: Int, secondLen: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_two_no_overlap(nums: Vec<i32>, first_len: i32, second_len: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-sum-two-no-overlap nums firstLen secondLen)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_sum_two_no_overlap(Nums :: [integer()], FirstLen :: integer(), SecondLen :: integer()) -> integer().\nmax_sum_two_no_overlap(Nums, FirstLen, SecondLen) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_sum_two_no_overlap(nums :: [integer], first_len :: integer, second_len :: integer) :: integer\n  def max_sum_two_no_overlap(nums, first_len, second_len) do\n    \n  end\nend"}}}