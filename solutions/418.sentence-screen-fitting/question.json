{"question_id": "418", "problem_slug": "sentence-screen-fitting", "problem_title": "Sentence Screen Fitting", "content": "Given a rows x cols screen and a sentence represented as a list of strings, return the number of times the given sentence can be fitted on the screen.\nThe order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.\n \nExample 1:\n\nInput: sentence = [\"hello\",\"world\"], rows = 2, cols = 8\nOutput: 1\nExplanation:\nhello---\nworld---\nThe character '-' signifies an empty space on the screen.\n\nExample 2:\n\nInput: sentence = [\"a\", \"bcd\", \"e\"], rows = 3, cols = 6\nOutput: 2\nExplanation:\na-bcd- \ne-a---\nbcd-e-\nThe character '-' signifies an empty space on the screen.\n\nExample 3:\n\nInput: sentence = [\"i\",\"had\",\"apple\",\"pie\"], rows = 4, cols = 5\nOutput: 1\nExplanation:\ni-had\napple\npie-i\nhad--\nThe character '-' signifies an empty space on the screen.\n\n \nConstraints:\n\n1 <= sentence.length <= 100\n1 <= sentence[i].length <= 10\nsentence[i] consists of lowercase English letters.\n1 <= rows, cols <= 2 * 104\n\n", "hints": [], "exampleTestcases": "[\"hello\",\"world\"]\n2\n8\n[\"a\", \"bcd\", \"e\"]\n3\n6\n[\"i\",\"had\",\"apple\",\"pie\"]\n4\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int wordsTyping(vector<string>& sentence, int rows, int cols) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int wordsTyping(String[] sentence, int rows, int cols) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wordsTyping(self, sentence, rows, cols):\n        \"\"\"\n        :type sentence: List[str]\n        :type rows: int\n        :type cols: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wordsTyping(self, sentence: List[str], rows: int, cols: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int wordsTyping(char** sentence, int sentenceSize, int rows, int cols) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WordsTyping(string[] sentence, int rows, int cols) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} sentence\n * @param {number} rows\n * @param {number} cols\n * @return {number}\n */\nvar wordsTyping = function(sentence, rows, cols) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wordsTyping(sentence: string[], rows: number, cols: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $sentence\n     * @param Integer $rows\n     * @param Integer $cols\n     * @return Integer\n     */\n    function wordsTyping($sentence, $rows, $cols) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wordsTyping(_ sentence: [String], _ rows: Int, _ cols: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wordsTyping(sentence: Array<String>, rows: Int, cols: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int wordsTyping(List<String> sentence, int rows, int cols) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wordsTyping(sentence []string, rows int, cols int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} sentence\n# @param {Integer} rows\n# @param {Integer} cols\n# @return {Integer}\ndef words_typing(sentence, rows, cols)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wordsTyping(sentence: Array[String], rows: Int, cols: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn words_typing(sentence: Vec<String>, rows: i32, cols: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (words-typing sentence rows cols)\n  (-> (listof string?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec words_typing(Sentence :: [unicode:unicode_binary()], Rows :: integer(), Cols :: integer()) -> integer().\nwords_typing(Sentence, Rows, Cols) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec words_typing(sentence :: [String.t], rows :: integer, cols :: integer) :: integer\n  def words_typing(sentence, rows, cols) do\n    \n  end\nend"}}}