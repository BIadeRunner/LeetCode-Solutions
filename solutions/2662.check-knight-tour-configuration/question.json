{"question_id": "2662", "problem_slug": "check-knight-tour-configuration", "problem_title": "Check Knight Tour Configuration", "content": "There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.\nYou are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.\nReturn true if grid represents a valid configuration of the knight's movements or false otherwise.\nNote that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n \nExample 1:\n\n\nInput: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\nOutput: true\nExplanation: The above diagram represents the grid. It can be shown that it is a valid configuration.\n\nExample 2:\n\n\nInput: grid = [[0,3,6],[5,8,1],[2,7,4]]\nOutput: false\nExplanation: The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.\n\n \nConstraints:\n\nn == grid.length == grid[i].length\n3 <= n <= 7\n0 <= grid[row][col] < n * n\nAll integers in grid are unique.\n\n", "hints": ["It is enough to check if each move of the knight is valid.", "Try all cases of the knight's movements to check if a move is valid."], "exampleTestcases": "[[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\n[[0,3,6],[5,8,1],[2,7,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkValidGrid(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkValidGrid(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkValidGrid(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckValidGrid(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar checkValidGrid = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkValidGrid(grid: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function checkValidGrid($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkValidGrid(_ grid: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkValidGrid(grid: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkValidGrid(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkValidGrid(grid [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef check_valid_grid(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkValidGrid(grid: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_valid_grid(grid: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-valid-grid grid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_valid_grid(Grid :: [[integer()]]) -> boolean().\ncheck_valid_grid(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_valid_grid(grid :: [[integer]]) :: boolean\n  def check_valid_grid(grid) do\n    \n  end\nend"}}}