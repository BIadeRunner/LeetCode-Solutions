{"question_id": "2776", "problem_slug": "make-object-immutable", "problem_title": "Make Object Immutable", "content": "Write a function that takes an object obj and returns a new immutable version of this object.\nAn immutable object is an object that can't be altered and will throw an error if any attempt is made to alter it.\nThere are three types of error messages that can be produced from this new object.\n\nAttempting to modify a key on the object will result in this error message: `Error Modifying: ${key}`.\nAttempting to modify an index on an array will result in this error message: `Error Modifying Index: ${index}`.\nAttempting to call a method that mutates an array will result in this error message: `Error Calling Method: ${methodName}`. You may assume the only methods that can mutate an array are ['pop', 'push', 'shift', 'unshift', 'splice', 'sort', 'reverse'].\n\nobj is a valid JSON object or array, meaning it is the output of JSON.parse().\nNote that a string literal should be thrown, not an Error.\n \nExample 1:\n\nInput: \nobj = {\n  \"x\": 5\n}\nfn = (obj) => { \n  obj.x = 5;\n  return obj.x;\n}\nOutput: {\"value\": null, \"error\": \"Error Modifying: x\"}\nExplanation: Attempting to modify a key on an object resuts in a thrown error. Note that it doesn't matter that the value was set to the same value as it was before.\n\nExample 2:\n\nInput: \nobj = [1, 2, 3]\nfn = (arr) => { \n  arr[1] = {}; \n  return arr[2]; \n}\nOutput: {\"value\": null, \"error\": \"Error Modifying Index: 1\"}\nExplanation: Attempting to modify an array results in a thrown error.\n\nExample 3:\n\nInput: \nobj = {\n  \"arr\": [1, 2, 3]\n}\nfn = (obj) => { \n  obj.arr.push(4);\n  return 42;\n}\nOutput: { \"value\": null, \"error\": \"Error Calling Method: push\"}\nExplanation: Calling a method that can result in a mutation results in a thrown error.\n\nExample 4:\n\nInput: \nobj = {\n  \"x\": 2,\n  \"y\": 2\n}\nfn = (obj) => { \n  return Object.keys(obj);\n}\nOutput: {\"value\": [\"x\", \"y\"], \"error\": null}\nExplanation: No mutations were attempted so the function returns as normal.\n\n \nConstraints:\n\nobj is a valid JSON object or array\n2 <= JSON.stringify(obj).length <= 105\n\n", "hints": ["Javascript has the concept of Proxy. That concept is critical to this problem.", "Recursively use proxy so that the user of the object is only able to access a proxy object.", "Override how set works. It should throw the correct error instead of actually setting a value."], "exampleTestcases": "{\"x\":5}\n(obj) => { obj.x = 5; return obj.x; }\n[1,2,3]\n(arr) => { arr[1] = {}; return arr[2]; }\n{\"arr\":[1,2,3]}\n(obj) => { obj.arr.push(4); return 42; }\n{\"x\":2,\"y\":2}\n(obj) => { return Object.keys(obj); }", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {Object|Array} obj\n * @return {Object|Array} immutable obj\n */\nvar makeImmutable = function(obj) {\n    \n};\n\n/**\n * const obj = makeImmutable({x: 5});\n * obj.x = 6; // throws \"Error Modifying x\"\n */"}, "TypeScript": {"langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Obj = Array<JSONValue> | Record<string, JSONValue>;\n\nfunction makeImmutable(obj: Obj): Obj {\n    \n};\n\n/**\n * const obj = makeImmutable({x: 5});\n * obj.x = 6; // throws \"Error Modifying x\"\n */"}}}