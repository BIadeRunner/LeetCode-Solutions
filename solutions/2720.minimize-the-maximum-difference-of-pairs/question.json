{"question_id": "2720", "problem_slug": "minimize-the-maximum-difference-of-pairs", "problem_title": "Minimize the Maximum Difference of Pairs", "content": "You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.\nNote that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.\nReturn the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.\n \nExample 1:\n\nInput: nums = [10,1,2,7,1,3], p = 2\nOutput: 1\nExplanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.\n\nExample 2:\n\nInput: nums = [4,2,1,2], p = 1\nOutput: 0\nExplanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= p <= (nums.length)/2\n\n", "hints": ["Can we use dynamic programming here?", "To minimize the answer, the array should be sorted first.", "The recurrence relation is fn(i, x) = min(fn(i+1, x), max(abs(nums[i]-nums[i+1]), fn(i+2, p-1)), and fn(0,p) gives the desired answer."], "exampleTestcases": "[10,1,2,7,1,3]\n2\n[4,2,1,2]\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizeMax(vector<int>& nums, int p) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimizeMax(int[] nums, int p) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimizeMax(self, nums, p):\n        \"\"\"\n        :type nums: List[int]\n        :type p: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimizeMax(self, nums: List[int], p: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimizeMax(int* nums, int numsSize, int p){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimizeMax(int[] nums, int p) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} p\n * @return {number}\n */\nvar minimizeMax = function(nums, p) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimizeMax(nums: number[], p: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $p\n     * @return Integer\n     */\n    function minimizeMax($nums, $p) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimizeMax(_ nums: [Int], _ p: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimizeMax(nums: IntArray, p: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimizeMax(List<int> nums, int p) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimizeMax(nums []int, p int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} p\n# @return {Integer}\ndef minimize_max(nums, p)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimizeMax(nums: Array[Int], p: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_max(nums: Vec<i32>, p: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimize-max nums p)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimize_max(Nums :: [integer()], P :: integer()) -> integer().\nminimize_max(Nums, P) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_max(nums :: [integer], p :: integer) :: integer\n  def minimize_max(nums, p) do\n    \n  end\nend"}}}