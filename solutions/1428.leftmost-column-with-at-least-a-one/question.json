{"questionId": "1374", "acRate": 54.73679902478097, "difficulty": "Medium", "freqBar": 50.36029123223399, "frontendQuestionId": "1428", "paidOnly": true, "status": "ac", "title": "Leftmost Column with at Least a One", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "leftmost-column-with-at-least-a-one", "content": "<p>A <strong>row-sorted binary matrix</strong> means that all elements are <code>0</code> or <code>1</code> and each row of the matrix is sorted in non-decreasing order.</p>\n\n<p>Given a <strong>row-sorted binary matrix</strong> <code>binaryMatrix</code>, return <em>the index (0-indexed) of the <strong>leftmost column</strong> with a 1 in it</em>. If such an index does not exist, return <code>-1</code>.</p>\n\n<p><strong>You can&#39;t access the Binary Matrix directly.</strong> You may only access the matrix using a <code>BinaryMatrix</code> interface:</p>\n\n<ul>\n\t<li><code>BinaryMatrix.get(row, col)</code> returns the element of the matrix at index <code>(row, col)</code> (0-indexed).</li>\n\t<li><code>BinaryMatrix.dimensions()</code> returns the dimensions of the matrix as a list of 2 elements <code>[rows, cols]</code>, which means the matrix is <code>rows x cols</code>.</li>\n</ul>\n\n<p>Submissions making more than <code>1000</code> calls to <code>BinaryMatrix.get</code> will be judged <em>Wrong Answer</em>. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p>\n\n<p>For custom testing purposes, the input will be the entire binary matrix <code>mat</code>. You will not have access to the binary matrix directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-5.jpg\" style=\"width: 81px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0],[1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-4.jpg\" style=\"width: 81px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0],[0,1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-3.jpg\" style=\"width: 81px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0],[0,0]]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == mat.length</code></li>\n\t<li><code>cols == mat[i].length</code></li>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>mat[i]</code> is sorted in non-decreasing order.</li>\n</ul>\n", "hints": ["1. (Binary Search) For each row do a binary search to find the leftmost one on that row and update the answer.", "2. (Optimal Approach) Imagine there is a pointer p(x, y) starting from top right corner. p can only move left or down. If the value at p is 0, move down. If the value at p is 1, move left. Try to figure out the correctness and time complexity of this algorithm."], "exampleTestcases": "[[0,0],[1,1]]\n[[0,0],[0,1]]\n[[0,0],[0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *   public:\n *     int get(int row, int col);\n *     vector<int> dimensions();\n * };\n */\n\nclass Solution {\npublic:\n    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface BinaryMatrix {\n *     public int get(int row, int col) {}\n *     public List<Integer> dimensions {}\n * };\n */\n\nclass Solution {\n    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class BinaryMatrix(object):\n#    def get(self, row, col):\n#        \"\"\"\n#        :type row : int, col : int\n#        :rtype int\n#        \"\"\"\n#\n#    def dimensions:\n#        \"\"\"\n#        :rtype list[]\n#        \"\"\"\n\nclass Solution(object):\n    def leftMostColumnWithOne(self, binaryMatrix):\n        \"\"\"\n        :type binaryMatrix: BinaryMatrix\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class BinaryMatrix(object):\n#    def get(self, row: int, col: int) -> int:\n#    def dimensions(self) -> list[]:\n\nclass Solution:\n    def leftMostColumnWithOne(self, binaryMatrix: 'BinaryMatrix') -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * struct BinaryMatrix {\n *     int (*get)(struct BinaryMatrix*, int, int);\n *     int* (*dimensions)(struct BinaryMatrix*);\n * };\n */\n\nint leftMostColumnWithOne(struct BinaryMatrix* matrix) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     public int Get(int row, int col) {}\n *     public IList<int> Dimensions() {}\n * }\n */\n\nclass Solution {\n    public int LeftMostColumnWithOne(BinaryMatrix binaryMatrix) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * function BinaryMatrix() {\n *     @param {integer} row, col\n *     @return {integer}\n *     this.get = function(row, col) {\n *         ...\n *     };\n *\n *     @return {[integer, integer]}\n *     this.dimensions = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {BinaryMatrix} binaryMatrix\n * @return {number}\n */\nvar leftMostColumnWithOne = function(binaryMatrix) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *      get(row: number, col: number): number {}\n *\n *      dimensions(): number[] {}\n * }\n */\n\nfunction leftMostColumnWithOne(binaryMatrix: BinaryMatrix) {\n\t\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     public function get($row, $col) {} @return Integer\n *     public function dimensions() {} @return Integer[]\n * }\n */\n\nclass Solution {\n    /**\n     * @param BinaryMatrix $binaryMatrix\n     * @return Integer\n     */\n    public function leftMostColumnWithOne($binaryMatrix) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * public class BinaryMatrix {\n *     public func get(_ row: Int, _ col: Int) -> Int {}\n *     public func dimensions() -> [Int] {}\n * };\n */\n\nclass Solution {\n    func leftMostColumnWithOne(_ binaryMatrix: BinaryMatrix) -> Int {\n\t\t\n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     fun get(row:Int, col:Int):Int {}\n *     fun dimensions():List<Int> {}\n * }\n */\n\nclass Solution {\n    fun leftMostColumnWithOne(binaryMatrix:BinaryMatrix):Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * type BinaryMatrix struct {\n *     Get func(int, int) int\n *     Dimensions func() []int\n * }\n */\n\nfunc leftMostColumnWithOne(binaryMatrix BinaryMatrix) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# \"\"\"\n# This is BinaryMatrix's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class BinaryMatrix\n# \tdef get(row, col)\n# \t\t@return {Integer}\n# \tend\n#\n# \tdef dimensions()\n# \t\t@return {List[Integer]}\n# \tend\n# end\n\n# @param {BinaryMatrix} binaryMatrix\n# @return {Integer}\ndef leftMostColumnWithOne(binaryMatrix)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *     def get(row: Int, col: Int): Int = {}\n *     def dimensions(): Array[Int] = {}\n * }\n */\n\nobject Solution {\n    def leftMostColumnWithOne(binaryMatrix: BinaryMatrix): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n *  struct BinaryMatrix;\n *  impl BinaryMatrix {\n *      fn get(&self, row: i32, col: i32) -> i32;\n *     fn dimensions() -> Vec<i32>;\n * };\n */\n\nimpl Solution {\n    pub fn left_most_column_with_one(binaryMatrix: &BinaryMatrix) -> i32 {\n         \n    }\n}"}], "similarQuestionList": []}