{"questionId": "2650", "acRate": 71.29629629629629, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2578", "paidOnly": false, "status": "ac", "title": "Split With Minimum Sum", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "split-with-minimum-sum", "content": "<p>Given a positive integer <code>num</code>, split it into two non-negative integers <code>num1</code> and <code>num2</code> such that:</p>\n\n<ul>\n\t<li>The concatenation of <code>num1</code> and <code>num2</code> is a permutation of <code>num</code>.\n\n\t<ul>\n\t\t<li>In other words, the sum of the number of occurrences of each digit in <code>num1</code> and <code>num2</code> is equal to the number of occurrences of that digit in <code>num</code>.</li>\n\t</ul>\n\t</li>\n\t<li><code>num1</code> and <code>num2</code> can contain leading zeros.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of</em> <code>num1</code> <em>and</em> <code>num2</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>It is guaranteed that <code>num</code> does not contain any leading zeros.</li>\n\t<li>The order of occurrence of the digits in <code>num1</code> and <code>num2</code> may differ from the order of occurrence of <code>num</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 4325\n<strong>Output:</strong> 59\n<strong>Explanation:</strong> We can split 4325 so that <code>num1</code> is 24 and <code>num2</code> is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 687\n<strong>Output:</strong> 75\n<strong>Explanation:</strong> We can split 687 so that <code>num1</code> is 68 and <code>num2</code> is 7, which would give an optimal sum of 75.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>10 &lt;= num &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Sort the digits of num in non decreasing order.", "Assign digits to num1 and num2 alternatively."], "exampleTestcases": "4325\n687", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int splitNum(int num) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int splitNum(int num) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def splitNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def splitNum(self, num: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int splitNum(int num) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SplitNum(int num) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar splitNum = function(num) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function splitNum(num: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function splitNum($num) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func splitNum(_ num: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun splitNum(num: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int splitNum(int num) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func splitNum(num int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef split_num(num)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def splitNum(num: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn split_num(num: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (split-num num)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec split_num(Num :: integer()) -> integer().\nsplit_num(Num) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_num(num :: integer) :: integer\n  def split_num(num) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "minimum-cost-to-move-chips-to-the-same-position", "title": "Minimum Cost to Move Chips to The Same Position", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "isPaidOnly": false}]}