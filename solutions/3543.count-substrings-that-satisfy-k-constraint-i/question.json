{"question_id": "3543", "problem_slug": "count-substrings-that-satisfy-k-constraint-i", "problem_title": "Count Substrings That Satisfy K-Constraint I", "content": "You are given a binary string s and an integer k.\nA binary string satisfies the k-constraint if either of the following conditions holds:\n\nThe number of 0's in the string is at most k.\nThe number of 1's in the string is at most k.\n\nReturn an integer denoting the number of substrings of s that satisfy the k-constraint.\n \nExample 1:\n\nInput: s = \"10101\", k = 1\nOutput: 12\nExplanation:\nEvery substring of s except the substrings \"1010\", \"10101\", and \"0101\" satisfies the k-constraint.\n\nExample 2:\n\nInput: s = \"1010101\", k = 2\nOutput: 25\nExplanation:\nEvery substring of s except the substrings with a length greater than 5 satisfies the k-constraint.\n\nExample 3:\n\nInput: s = \"11111\", k = 1\nOutput: 15\nExplanation:\nAll substrings of s satisfy the k-constraint.\n\n \nConstraints:\n\n1 <= s.length <= 50 \n1 <= k <= s.length\ns[i] is either '0' or '1'.\n\n", "hints": ["Using a brute force approach, check each index until a substring satisfying the k-constraint is found, then increment."], "exampleTestcases": "\"10101\"\n1\n\"1010101\"\n2\n\"11111\"\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countKConstraintSubstrings(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countKConstraintSubstrings(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countKConstraintSubstrings(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countKConstraintSubstrings(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountKConstraintSubstrings(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countKConstraintSubstrings = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countKConstraintSubstrings(s: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function countKConstraintSubstrings($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countKConstraintSubstrings(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countKConstraintSubstrings(s: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countKConstraintSubstrings(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countKConstraintSubstrings(s string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef count_k_constraint_substrings(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countKConstraintSubstrings(s: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_k_constraint_substrings(s: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-k-constraint-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_k_constraint_substrings(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_k_constraint_substrings(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_k_constraint_substrings(s :: String.t, k :: integer) :: integer\n  def count_k_constraint_substrings(s, k) do\n    \n  end\nend"}}}