{"question_id": "2152", "problem_slug": "the-number-of-seniors-and-juniors-to-join-the-company", "problem_title": "The Number of Seniors and Juniors to Join the Company", "content": "Table: Candidates\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| employee_id | int  |\n| experience  | enum |\n| salary      | int  |\n+-------------+------+\nemployee_id is the column with unique values for this table.\nexperience is an ENUM (category) type of values ('Senior', 'Junior').\nEach row of this table indicates the id of a candidate, their monthly salary, and their experience.\n\n \nA company wants to hire new employees. The budget of the company for the salaries is $70000. The company's criteria for hiring are:\n\nHiring the largest number of seniors.\nAfter hiring the maximum number of seniors, use the remaining budget to hire the largest number of juniors.\n\nWrite a solution to find the number of seniors and juniors hired under the mentioned criteria.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nCandidates table:\n+-------------+------------+--------+\n| employee_id | experience | salary |\n+-------------+------------+--------+\n| 1           | Junior     | 10000  |\n| 9           | Junior     | 10000  |\n| 2           | Senior     | 20000  |\n| 11          | Senior     | 20000  |\n| 13          | Senior     | 50000  |\n| 4           | Junior     | 40000  |\n+-------------+------------+--------+\nOutput: \n+------------+---------------------+\n| experience | accepted_candidates |\n+------------+---------------------+\n| Senior     | 2                   |\n| Junior     | 2                   |\n+------------+---------------------+\nExplanation: \nWe can hire 2 seniors with IDs (2, 11). Since the budget is $70000 and the sum of their salaries is $40000, we still have $30000 but they are not enough to hire the senior candidate with ID 13.\nWe can hire 2 juniors with IDs (1, 9). Since the remaining budget is $30000 and the sum of their salaries is $20000, we still have $10000 but they are not enough to hire the junior candidate with ID 4.\n\nExample 2:\n\nInput: \nCandidates table:\n+-------------+------------+--------+\n| employee_id | experience | salary |\n+-------------+------------+--------+\n| 1           | Junior     | 10000  |\n| 9           | Junior     | 10000  |\n| 2           | Senior     | 80000  |\n| 11          | Senior     | 80000  |\n| 13          | Senior     | 80000  |\n| 4           | Junior     | 40000  |\n+-------------+------------+--------+\nOutput: \n+------------+---------------------+\n| experience | accepted_candidates |\n+------------+---------------------+\n| Senior     | 0                   |\n| Junior     | 3                   |\n+------------+---------------------+\nExplanation: \nWe cannot hire any seniors with the current budget as we need at least $80000 to hire one senior.\nWe can hire all three juniors with the remaining budget.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Candidates\":[\"employee_id\",\"experience\",\"salary\"]},\"rows\":{\"Candidates\":[[1,\"Junior\",10000],[9,\"Junior\",10000],[2,\"Senior\",20000],[11,\"Senior\",20000],[13,\"Senior\",50000],[4,\"Junior\",40000]]}}\n{\"headers\":{\"Candidates\":[\"employee_id\",\"experience\",\"salary\"]},\"rows\":{\"Candidates\":[[1,\"Junior\",10000],[9,\"Junior\",10000],[2,\"Senior\",80000],[11,\"Senior\",80000],[13,\"Senior\",80000],[4,\"Junior\",40000]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef count_seniors_and_juniors(candidates: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}