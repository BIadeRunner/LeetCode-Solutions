{"question_id": "2516", "problem_slug": "sort-the-olympic-table", "problem_title": "Sort the Olympic Table", "content": "Table: Olympic\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| country       | varchar |\n| gold_medals   | int     |\n| silver_medals | int     |\n| bronze_medals | int     |\n+---------------+---------+\nIn SQL, country is the primary key for this table.\nEach row in this table shows a country name and the number of gold, silver, and bronze medals it won in the Olympic games.\n\n \nThe Olympic table is sorted according to the following rules:\n\nThe country with more gold medals comes first.\nIf there is a tie in the gold medals, the country with more silver medals comes first.\nIf there is a tie in the silver medals, the country with more bronze medals comes first.\nIf there is a tie in the bronze medals, the countries with the tie are sorted in ascending order lexicographically.\n\nWrite a solution to sort the Olympic table.\nThe result format is shown in the following example.\n \nExample 1:\n\nInput: \nOlympic table:\n+-------------+-------------+---------------+---------------+\n| country     | gold_medals | silver_medals | bronze_medals |\n+-------------+-------------+---------------+---------------+\n| China       | 10          | 10            | 20            |\n| South Sudan | 0           | 0             | 1             |\n| USA         | 10          | 10            | 20            |\n| Israel      | 2           | 2             | 3             |\n| Egypt       | 2           | 2             | 2             |\n+-------------+-------------+---------------+---------------+\nOutput: \n+-------------+-------------+---------------+---------------+\n| country     | gold_medals | silver_medals | bronze_medals |\n+-------------+-------------+---------------+---------------+\n| China       | 10          | 10            | 20            |\n| USA         | 10          | 10            | 20            |\n| Israel      | 2           | 2             | 3             |\n| Egypt       | 2           | 2             | 2             |\n| South Sudan | 0           | 0             | 1             |\n+-------------+-------------+---------------+---------------+\nExplanation: \nThe tie between China and USA is broken by their lexicographical names. Since \"China\" is lexicographically smaller than \"USA\", it comes first.\nIsrael comes before Egypt because it has more bronze medals.\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Olympic\":[\"country\",\"gold_medals\",\"silver_medals\",\"bronze_medals\"]},\"rows\":{\"Olympic\":[[\"China\",10,10,20],[\"South Sudan\",0,0,1],[\"USA\",10,10,20],[\"Israel\",2,2,3],[\"Egypt\",2,2,2]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef sort_table(olympic: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}