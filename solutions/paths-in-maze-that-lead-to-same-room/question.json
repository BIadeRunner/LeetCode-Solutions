{"questionId": "2218", "acRate": 56.002271436683706, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2077", "paidOnly": true, "status": "ac", "title": "Paths in Maze That Lead to Same Room", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "paths-in-maze-that-lead-to-same-room", "content": "<p>A maze consists of <code>n</code> rooms numbered from <code>1</code> to <code>n</code>, and some rooms are connected by corridors. You are given a 2D integer array <code>corridors</code> where <code>corridors[i] = [room1<sub>i</sub>, room2<sub>i</sub>]</code> indicates that there is a corridor connecting <code>room1<sub>i</sub></code> and <code>room2<sub>i</sub></code>, allowing a person in the maze to go from <code>room1<sub>i</sub></code> to <code>room2<sub>i</sub></code> <strong>and vice versa</strong>.</p>\n\n<p>The designer of the maze wants to know how confusing the maze is. The <strong>confusion</strong> <strong>score</strong> of the maze is the number of different cycles of <strong>length 3</strong>.</p>\n\n<ul>\n\t<li>For example, <code>1 &rarr; 2 &rarr; 3 &rarr; 1</code> is a cycle of length 3, but <code>1 &rarr; 2 &rarr; 3 &rarr; 4</code> and <code>1 &rarr; 2 &rarr; 3 &rarr; 2 &rarr; 1</code> are not.</li>\n</ul>\n\n<p>Two cycles are considered to be <strong>different</strong> if one or more of the rooms visited in the first cycle is <strong>not</strong> in the second cycle.</p>\n\n<p>Return <em>the</em> <em><strong>confusion</strong><strong> score</strong> of the maze.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2021/11/14/image-20211114164827-1.png\" style=\"width: 440px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> n = 5, corridors = [[1,2],[5,2],[4,1],[2,4],[3,1],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOne cycle of length 3 is 4 &rarr; 1 &rarr; 3 &rarr; 4, denoted in red.\nNote that this is the same cycle as 3 &rarr; 4 &rarr; 1 &rarr; 3 or 1 &rarr; 3 &rarr; 4 &rarr; 1 because the rooms are the same.\nAnother cycle of length 3 is 1 &rarr; 2 &rarr; 4 &rarr; 1, denoted in blue.\nThus, there are two different cycles of length 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2021/11/14/image-20211114164851-2.png\" style=\"width: 329px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> n = 4, corridors = [[1,2],[3,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThere are no cycles of length 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= corridors.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>corridors[i].length == 2</code></li>\n\t<li><code>1 &lt;= room1<sub>i</sub>, room2<sub>i</sub> &lt;= n</code></li>\n\t<li><code>room1<sub>i</sub> != room2<sub>i</sub></code></li>\n\t<li>There are no duplicate corridors.</li>\n</ul>\n", "hints": ["If the path starts at room i, what properties must the other two rooms in the cycle have?", "The other two rooms must be connected to room i, and must be connected to each other."], "exampleTestcases": "5\n[[1,2],[5,2],[4,1],[2,4],[3,1],[3,4]]\n4\n[[1,2],[3,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPaths(int n, vector<vector<int>>& corridors) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfPaths(int n, int[][] corridors) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfPaths(self, n, corridors):\n        \"\"\"\n        :type n: int\n        :type corridors: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfPaths(self, n: int, corridors: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfPaths(int n, int** corridors, int corridorsSize, int* corridorsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPaths(int n, int[][] corridors) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} corridors\n * @return {number}\n */\nvar numberOfPaths = function(n, corridors) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfPaths(n: number, corridors: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $corridors\n     * @return Integer\n     */\n    function numberOfPaths($n, $corridors) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfPaths(_ n: Int, _ corridors: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPaths(n: Int, corridors: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfPaths(int n, List<List<int>> corridors) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfPaths(n int, corridors [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} corridors\n# @return {Integer}\ndef number_of_paths(n, corridors)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfPaths(n: Int, corridors: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_paths(n: i32, corridors: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-paths n corridors)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_paths(N :: integer(), Corridors :: [[integer()]]) -> integer().\nnumber_of_paths(N, Corridors) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_paths(n :: integer, corridors :: [[integer]]) :: integer\n  def number_of_paths(n, corridors) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "distance-to-a-cycle-in-undirected-graph", "title": "Distance to a Cycle in Undirected Graph", "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "isPaidOnly": false}]}