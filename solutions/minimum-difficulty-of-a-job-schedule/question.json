{"questionId": "1457", "acRate": 59.60868502501672, "difficulty": "Hard", "freqBar": 44.56554759671958, "frontendQuestionId": "1335", "paidOnly": false, "status": "ac", "title": "Minimum Difficulty of a Job Schedule", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "minimum-difficulty-of-a-job-schedule", "content": "<p>You want to schedule a list of jobs in <code>d</code> days. Jobs are dependent (i.e To work on the <code>i<sup>th</sup></code> job, you have to finish all the jobs <code>j</code> where <code>0 &lt;= j &lt; i</code>).</p>\n\n<p>You have to finish <strong>at least</strong> one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the <code>d</code> days. The difficulty of a day is the maximum difficulty of a job done on that day.</p>\n\n<p>You are given an integer array <code>jobDifficulty</code> and an integer <code>d</code>. The difficulty of the <code>i<sup>th</sup></code> job is <code>jobDifficulty[i]</code>.</p>\n\n<p>Return <em>the minimum difficulty of a job schedule</em>. If you cannot find a schedule for the jobs return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/16/untitled.png\" style=\"width: 365px; height: 370px;\" />\n<pre>\n<strong>Input:</strong> jobDifficulty = [6,5,4,3,2,1], d = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobDifficulty = [9,9,9], d = 4\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobDifficulty = [1,1,1], d = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The schedule is one job per day. total difficulty will be 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li>\n\t<li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= d &lt;= 10</code></li>\n</ul>\n", "hints": ["Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array.", "Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d)."], "exampleTestcases": "[6,5,4,3,2,1]\n2\n[9,9,9]\n4\n[1,1,1]\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDifficulty(vector<int>& jobDifficulty, int d) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDifficulty(int[] jobDifficulty, int d) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDifficulty(self, jobDifficulty, d):\n        \"\"\"\n        :type jobDifficulty: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minDifficulty(int* jobDifficulty, int jobDifficultySize, int d) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDifficulty(int[] jobDifficulty, int d) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} jobDifficulty\n * @param {number} d\n * @return {number}\n */\nvar minDifficulty = function(jobDifficulty, d) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDifficulty(jobDifficulty: number[], d: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $jobDifficulty\n     * @param Integer $d\n     * @return Integer\n     */\n    function minDifficulty($jobDifficulty, $d) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDifficulty(_ jobDifficulty: [Int], _ d: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDifficulty(jobDifficulty: IntArray, d: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minDifficulty(List<int> jobDifficulty, int d) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minDifficulty(jobDifficulty []int, d int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} job_difficulty\n# @param {Integer} d\n# @return {Integer}\ndef min_difficulty(job_difficulty, d)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDifficulty(jobDifficulty: Array[Int], d: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_difficulty(job_difficulty: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-difficulty jobDifficulty d)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_difficulty(JobDifficulty :: [integer()], D :: integer()) -> integer().\nmin_difficulty(JobDifficulty, D) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_difficulty(job_difficulty :: [integer], d :: integer) :: integer\n  def min_difficulty(job_difficulty, d) do\n    \n  end\nend"}], "similarQuestionList": []}