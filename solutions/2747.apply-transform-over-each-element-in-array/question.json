{"question_id": "2747", "problem_slug": "apply-transform-over-each-element-in-array", "problem_title": "Apply Transform Over Each Element in Array", "content": "Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.\nThe returned array should be created such that returnedArray[i] = fn(arr[i], i).\nPlease solve it without the built-in Array.map method.\n \nExample 1:\n\nInput: arr = [1,2,3], fn = function plusone(n) { return n + 1; }\nOutput: [2,3,4]\nExplanation:\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one. \n\nExample 2:\n\nInput: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }\nOutput: [1,3,5]\nExplanation: The function increases each value by the index it resides in.\n\nExample 3:\n\nInput: arr = [10,20,30], fn = function constant() { return 42; }\nOutput: [42,42,42]\nExplanation: The function always returns 42.\n\n \nConstraints:\n\n0 <= arr.length <= 1000\n-109 <= arr[i] <= 109\nfn returns a number\n\n", "hints": ["Start by creating an array that will eventually be returned.", "Loop over each element in the passed array. Push fn(arr[i]) to the returned array."], "exampleTestcases": "function plusone(n) { return n + 1; }\n[1,2,3]\nfunction plusI(n, i) { return n + i; }\n[1,2,3]\nfunction constant(n, i) { return 42; }\n[10,20,30]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {Function} fn\n * @return {number[]}\n */\nvar map = function(arr, fn) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function map(arr: number[], fn: (n: number, i: number) => number): number[] {\n    \n};"}}}