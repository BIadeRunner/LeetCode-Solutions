{"question_id": "3240", "problem_slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k", "problem_title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K", "content": "You are given an integer k and an integer x. The price of a number num is calculated by the count of set bits at positions x, 2x, 3x, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.\n\n\n\nx\nnum\nBinary Representation\nPrice\n\n\n1\n13\n000001101\n3\n\n\n2\n13\n000001101\n1\n\n\n2\n233\n011101001\n3\n\n\n3\n13\n000001101\n1\n\n\n3\n362\n101101010\n2\n\n\n\nThe accumulated price of num is the total price of numbers from 1 to num. num is considered cheap if its accumulated price is less than or equal to k.\nReturn the greatest cheap number.\n \nExample 1:\n\nInput: k = 9, x = 1\nOutput: 6\nExplanation:\nAs shown in the table below, 6 is the greatest cheap number.\n\n\n\nx\nnum\nBinary Representation\nPrice\nAccumulated Price\n\n\n1\n1\n001\n1\n1\n\n\n1\n2\n010\n1\n2\n\n\n1\n3\n011\n2\n4\n\n\n1\n4\n100\n1\n5\n\n\n1\n5\n101\n2\n7\n\n\n1\n6\n110\n2\n9\n\n\n1\n7\n111\n3\n12\n\n\n\n\nExample 2:\n\nInput: k = 7, x = 2\nOutput: 9\nExplanation:\nAs shown in the table below, 9 is the greatest cheap number.\n\n\n\nx\nnum\nBinary Representation\nPrice\nAccumulated Price\n\n\n2\n1\n0001\n0\n0\n\n\n2\n2\n0010\n1\n1\n\n\n2\n3\n0011\n1\n2\n\n\n2\n4\n0100\n0\n2\n\n\n2\n5\n0101\n0\n2\n\n\n2\n6\n0110\n1\n3\n\n\n2\n7\n0111\n1\n4\n\n\n2\n8\n1000\n1\n5\n\n\n2\n9\n1001\n1\n6\n\n\n2\n10\n1010\n2\n8\n\n\n\n\n \nConstraints:\n\n1 <= k <= 1015\n1 <= x <= 8\n\n", "hints": ["Binary search the answer.", "In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."], "exampleTestcases": "9\n1\n7\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long findMaximumNumber(long long k, int x) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number} x\n * @return {number}\n */\nvar findMaximumNumber = function(k, x) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findMaximumNumber(k: number, x: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaximumNumber(k: Long, x: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findMaximumNumber(int k, int x) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findMaximumNumber(k int64, x int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-maximum-number k x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_maximum_number(K :: integer(), X :: integer()) -> integer().\nfind_maximum_number(K, X) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_maximum_number(k :: integer, x :: integer) :: integer\n  def find_maximum_number(k, x) do\n    \n  end\nend"}}}