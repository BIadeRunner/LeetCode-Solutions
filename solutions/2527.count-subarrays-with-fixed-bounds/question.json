{"question_id": "2527", "problem_slug": "count-subarrays-with-fixed-bounds", "problem_title": "Count Subarrays With Fixed Bounds", "content": "You are given an integer array nums and two integers minK and maxK.\nA fixed-bound subarray of nums is a subarray that satisfies the following conditions:\n\nThe minimum value in the subarray is equal to minK.\nThe maximum value in the subarray is equal to maxK.\n\nReturn the number of fixed-bound subarrays.\nA subarray is a contiguous part of an array.\n \nExample 1:\n\nInput: nums = [1,3,5,2,7,5], minK = 1, maxK = 5\nOutput: 2\nExplanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].\n\nExample 2:\n\nInput: nums = [1,1,1,1], minK = 1, maxK = 1\nOutput: 10\nExplanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.\n\n \nConstraints:\n\n2 <= nums.length <= 105\n1 <= nums[i], minK, maxK <= 106\n\n", "hints": ["Can you solve the problem if all the numbers in the array were between minK and maxK inclusive?", "Think of the inclusion-exclusion principle.", "Divide the array into multiple subarrays such that each number in each subarray is between minK and maxK inclusive, solve the previous problem for each subarray, and sum all the answers."], "exampleTestcases": "[1,3,5,2,7,5]\n1\n5\n[1,1,1,1]\n1\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int minK, int maxK) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countSubarrays(int[] nums, int minK, int maxK) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSubarrays(self, nums, minK, maxK):\n        \"\"\"\n        :type nums: List[int]\n        :type minK: int\n        :type maxK: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countSubarrays(int* nums, int numsSize, int minK, int maxK) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountSubarrays(int[] nums, int minK, int maxK) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} minK\n * @param {number} maxK\n * @return {number}\n */\nvar countSubarrays = function(nums, minK, maxK) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSubarrays(nums: number[], minK: number, maxK: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $minK\n     * @param Integer $maxK\n     * @return Integer\n     */\n    function countSubarrays($nums, $minK, $maxK) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSubarrays(_ nums: [Int], _ minK: Int, _ maxK: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSubarrays(nums: IntArray, minK: Int, maxK: Int): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countSubarrays(List<int> nums, int minK, int maxK) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSubarrays(nums []int, minK int, maxK int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} min_k\n# @param {Integer} max_k\n# @return {Integer}\ndef count_subarrays(nums, min_k, max_k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSubarrays(nums: Array[Int], minK: Int, maxK: Int): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, min_k: i32, max_k: i32) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-subarrays nums minK maxK)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_subarrays(Nums :: [integer()], MinK :: integer(), MaxK :: integer()) -> integer().\ncount_subarrays(Nums, MinK, MaxK) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], min_k :: integer, max_k :: integer) :: integer\n  def count_subarrays(nums, min_k, max_k) do\n    \n  end\nend"}}}