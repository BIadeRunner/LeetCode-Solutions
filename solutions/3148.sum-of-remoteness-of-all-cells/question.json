{"question_id": "3148", "problem_slug": "sum-of-remoteness-of-all-cells", "problem_title": "Sum of Remoteness of All Cells", "content": "You are given a 0-indexed matrix grid of order n * n. Each cell in this matrix has a value grid[i][j], which is either a positive integer or -1 representing a blocked cell.\nYou can move from a non-blocked cell to any non-blocked cell that shares an edge.\nFor any cell (i, j), we represent its remoteness as R[i][j] which is defined as the following:\n\nIf the cell (i, j) is a non-blocked cell, R[i][j] is the sum of the values grid[x][y] such that there is no path from the non-blocked cell (x, y) to the cell (i, j).\nFor blocked cells, R[i][j] == 0.\n\nReturn the sum of R[i][j] over all cells.\n \nExample 1:\n\n\nInput: grid = [[-1,1,-1],[5,-1,4],[-1,3,-1]]\nOutput: 39\nExplanation: In the picture above, there are four grids. The top-left grid contains the initial values in the grid. Blocked cells are colored black, and other cells get their values as it is in the input. In the top-right grid, you can see the value of R[i][j] for all cells. So the answer would be the sum of them. That is: 0 + 12 + 0 + 8 + 0 + 9 + 0 + 10 + 0 = 39.\nLet's jump on the bottom-left grid in the above picture and calculate R[0][1] (the target cell is colored green). We should sum up the value of cells that can't be reached by the cell (0, 1). These cells are colored yellow in this grid. So R[0][1] = 5 + 4 + 3 = 12.\nNow let's jump on the bottom-right grid in the above picture and calculate R[1][2] (the target cell is colored green). We should sum up the value of cells that can't be reached by the cell (1, 2). These cells are colored yellow in this grid. So R[1][2] = 1 + 5 + 3 = 9.\n\n\nExample 2:\n\nInput: grid = [[-1,3,4],[-1,-1,-1],[3,-1,-1]]\nOutput: 13\nExplanation: In the picture above, there are four grids. The top-left grid contains the initial values in the grid. Blocked cells are colored black, and other cells get their values as it is in the input. In the top-right grid, you can see the value of R[i][j] for all cells. So the answer would be the sum of them. That is: 3 + 3 + 0 + 0 + 0 + 0 + 7 + 0 + 0 = 13.\nLet's jump on the bottom-left grid in the above picture and calculate R[0][2] (the target cell is colored green). We should sum up the value of cells that can't be reached by the cell (0, 2). This cell is colored yellow in this grid. So R[0][2] = 3.\nNow let's jump on the bottom-right grid in the above picture and calculate R[2][0] (the target cell is colored green). We should sum up the value of cells that can't be reached by the cell (2, 0). These cells are colored yellow in this grid. So R[2][0] = 3 + 4 = 7.\n\nExample 3:\n\nInput: grid = [[1]]\nOutput: 0\nExplanation: Since there are no other cells than (0, 0), R[0][0] is equal to 0. So the sum of R[i][j] over all cells would be 0.\n\n \nConstraints:\n\n1 <= n <= 300\n1 <= grid[i][j] <= 106 or grid[i][j] == -1\n\n", "hints": ["We consider each cell of <code>grid</code> a node on a graph, and there is an edge between two nodes if one of them doesn't contain <code>-1</code> and they share an edge on the grid.", "We find the connected components of said graph.", "The nodes of each connected component have the same value for <code>R</code> and it's the sum of the values of all nodes in other connected components."], "exampleTestcases": "[[-1,1,-1],[5,-1,4],[-1,3,-1]]\n[[-1,3,4],[-1,-1,-1],[3,-1,-1]]\n[[1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long sumRemoteness(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long sumRemoteness(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumRemoteness(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumRemoteness(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long sumRemoteness(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long SumRemoteness(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar sumRemoteness = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumRemoteness(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function sumRemoteness($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumRemoteness(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumRemoteness(grid: Array<IntArray>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumRemoteness(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumRemoteness(grid [][]int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef sum_remoteness(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumRemoteness(grid: Array[Array[Int]]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_remoteness(grid: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-remoteness grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_remoteness(Grid :: [[integer()]]) -> integer().\nsum_remoteness(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_remoteness(grid :: [[integer]]) :: integer\n  def sum_remoteness(grid) do\n    \n  end\nend"}}}