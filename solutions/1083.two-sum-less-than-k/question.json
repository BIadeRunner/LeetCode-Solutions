{"question_id": "1083", "problem_slug": "two-sum-less-than-k", "problem_title": "Two Sum Less Than K", "content": "Given an array nums of integers and integer k, return the maximum sum such that there exists i < j with nums[i] + nums[j] = sum and sum < k. If no i, j exist satisfying this equation, return -1.\n \nExample 1:\n\nInput: nums = [34,23,1,24,75,33,54,8], k = 60\nOutput: 58\nExplanation: We can use 34 and 24 to sum 58 which is less than 60.\n\nExample 2:\n\nInput: nums = [10,20,30], k = 15\nOutput: -1\nExplanation: In this case it is not possible to get a pair sum less that 15.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 1000\n1 <= k <= 2000\n\n", "hints": ["What if we have the array sorted?", "Loop the array and get the value A[i] then we need to find a value A[j] such that A[i] + A[j] < K  which means A[j] < K - A[i]. In order to do that we can find that value with a binary search."], "exampleTestcases": "[34,23,1,24,75,33,54,8]\n60\n[10,20,30]\n15", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int twoSumLessThanK(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int twoSumLessThanK(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def twoSumLessThanK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def twoSumLessThanK(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int twoSumLessThanK(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TwoSumLessThanK(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar twoSumLessThanK = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function twoSumLessThanK(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function twoSumLessThanK($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func twoSumLessThanK(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun twoSumLessThanK(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int twoSumLessThanK(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func twoSumLessThanK(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef two_sum_less_than_k(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def twoSumLessThanK(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn two_sum_less_than_k(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (two-sum-less-than-k nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec two_sum_less_than_k(Nums :: [integer()], K :: integer()) -> integer().\ntwo_sum_less_than_k(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec two_sum_less_than_k(nums :: [integer], k :: integer) :: integer\n  def two_sum_less_than_k(nums, k) do\n    \n  end\nend"}}}