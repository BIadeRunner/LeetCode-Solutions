{"question_id": "1619", "problem_slug": "path-crossing", "problem_title": "Path Crossing", "content": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.\n \nExample 1:\n\n\nInput: path = \"NES\"\nOutput: false \nExplanation: Notice that the path doesn't cross any point more than once.\n\nExample 2:\n\n\nInput: path = \"NESWW\"\nOutput: true\nExplanation: Notice that the path visits the origin twice.\n \nConstraints:\n\n1 <= path.length <= 104\npath[i] is either 'N', 'S', 'E', or 'W'.\n\n", "hints": ["Simulate the process while keeping track of visited points.", "Use a set to store previously visited points."], "exampleTestcases": "\"NES\"\n\"NESWW\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPathCrossing(string path) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isPathCrossing(String path) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isPathCrossing(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isPathCrossing(self, path: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isPathCrossing(char* path) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsPathCrossing(string path) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} path\n * @return {boolean}\n */\nvar isPathCrossing = function(path) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isPathCrossing(path: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return Boolean\n     */\n    function isPathCrossing($path) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isPathCrossing(_ path: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isPathCrossing(path: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isPathCrossing(String path) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isPathCrossing(path string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} path\n# @return {Boolean}\ndef is_path_crossing(path)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isPathCrossing(path: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_path_crossing(path: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-path-crossing path)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_path_crossing(Path :: unicode:unicode_binary()) -> boolean().\nis_path_crossing(Path) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_path_crossing(path :: String.t) :: boolean\n  def is_path_crossing(path) do\n    \n  end\nend"}}}