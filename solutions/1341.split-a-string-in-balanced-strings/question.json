{"question_id": "1341", "problem_slug": "split-a-string-in-balanced-strings", "problem_title": "Split a String in Balanced Strings", "content": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it into some number of substrings such that:\n\nEach substring is balanced.\n\nReturn the maximum number of balanced strings you can obtain.\n \nExample 1:\n\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\n\nExample 2:\n\nInput: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.\nExample 3:\n\nInput: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".\n\n \nConstraints:\n\n2 <= s.length <= 1000\ns[i] is either 'L' or 'R'.\ns is a balanced string.\n\n", "hints": ["Loop from left to right maintaining a balance variable when it gets an L increase it by one otherwise decrease it by one.", "Whenever the balance variable reaches zero then we increase the answer by one."], "exampleTestcases": "\"RLRRLLRLRL\"\n\"RLRRRLLRLL\"\n\"LLLLRRRR\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int balancedStringSplit(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int balancedStringSplit(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def balancedStringSplit(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int balancedStringSplit(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BalancedStringSplit(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar balancedStringSplit = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function balancedStringSplit(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function balancedStringSplit($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func balancedStringSplit(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun balancedStringSplit(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int balancedStringSplit(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func balancedStringSplit(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef balanced_string_split(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def balancedStringSplit(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn balanced_string_split(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (balanced-string-split s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec balanced_string_split(S :: unicode:unicode_binary()) -> integer().\nbalanced_string_split(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec balanced_string_split(s :: String.t) :: integer\n  def balanced_string_split(s) do\n    \n  end\nend"}}}