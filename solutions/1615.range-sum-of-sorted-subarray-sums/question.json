{"question_id": "1615", "problem_slug": "range-sum-of-sorted-subarray-sums", "problem_title": "Range Sum of Sorted Subarray Sums", "content": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.\n \nExample 1:\n\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput: 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n\nExample 2:\n\nInput: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput: 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n\nExample 3:\n\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 10\nOutput: 50\n\n \nConstraints:\n\nn == nums.length\n1 <= nums.length <= 1000\n1 <= nums[i] <= 100\n1 <= left <= right <= n * (n + 1) / 2\n\n", "hints": ["Compute all sums and save it in array.", "Then just go from LEFT to RIGHT index and calculate answer modulo 1e9 + 7."], "exampleTestcases": "[1,2,3,4]\n4\n1\n5\n[1,2,3,4]\n4\n3\n4\n[1,2,3,4]\n4\n1\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int rangeSum(vector<int>& nums, int n, int left, int right) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int rangeSum(int[] nums, int n, int left, int right) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def rangeSum(self, nums, n, left, right):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int rangeSum(int* nums, int numsSize, int n, int left, int right) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int RangeSum(int[] nums, int n, int left, int right) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeSum = function(nums, n, left, right) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rangeSum(nums: number[], n: number, left: number, right: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function rangeSum($nums, $n, $left, $right) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func rangeSum(_ nums: [Int], _ n: Int, _ left: Int, _ right: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun rangeSum(nums: IntArray, n: Int, left: Int, right: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int rangeSum(List<int> nums, int n, int left, int right) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func rangeSum(nums []int, n int, left int, right int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} n\n# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef range_sum(nums, n, left, right)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def rangeSum(nums: Array[Int], n: Int, left: Int, right: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn range_sum(nums: Vec<i32>, n: i32, left: i32, right: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (range-sum nums n left right)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec range_sum(Nums :: [integer()], N :: integer(), Left :: integer(), Right :: integer()) -> integer().\nrange_sum(Nums, N, Left, Right) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec range_sum(nums :: [integer], n :: integer, left :: integer, right :: integer) :: integer\n  def range_sum(nums, n, left, right) do\n    \n  end\nend"}}}