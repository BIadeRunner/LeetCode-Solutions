{"question_id": "391", "problem_slug": "perfect-rectangle", "problem_title": "Perfect Rectangle", "content": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\n \nExample 1:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n\nExample 2:\n\n\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n\nExample 3:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\n\n \nConstraints:\n\n1 <= rectangles.length <= 2 * 104\nrectangles[i].length == 4\n-105 <= xi < ai <= 105\n-105 <= yi < bi <= 105\n\n", "hints": [], "exampleTestcases": "[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n[[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n[[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isRectangleCover(int** rectangles, int rectanglesSize, int* rectanglesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsRectangleCover(int[][] rectangles) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\nvar isRectangleCover = function(rectangles) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isRectangleCover(rectangles: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Boolean\n     */\n    function isRectangleCover($rectangles) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isRectangleCover(_ rectangles: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isRectangleCover(rectangles: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isRectangleCover(List<List<int>> rectangles) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isRectangleCover(rectangles [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} rectangles\n# @return {Boolean}\ndef is_rectangle_cover(rectangles)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_rectangle_cover(rectangles: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-rectangle-cover rectangles)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_rectangle_cover(Rectangles :: [[integer()]]) -> boolean().\nis_rectangle_cover(Rectangles) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_rectangle_cover(rectangles :: [[integer]]) :: boolean\n  def is_rectangle_cover(rectangles) do\n    \n  end\nend"}}}