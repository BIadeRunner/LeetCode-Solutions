{"questionId": "3511", "acRate": 51.8855196803982, "difficulty": "Easy", "freqBar": 35.234032790197844, "frontendQuestionId": "3222", "paidOnly": false, "status": "ac", "title": "Find the Winning Player in Coin Game", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}, {"name": "Game Theory", "id": "VG9waWNUYWdOb2RlOjYxMDcz", "slug": "game-theory"}], "titleSlug": "find-the-winning-player-in-coin-game", "content": "<p>You are given two <strong>positive</strong> integers <code>x</code> and <code>y</code>, denoting the number of coins with values 75 and 10 <em>respectively</em>.</p>\n\n<p>Alice and Bob are playing a game. Each turn, starting with <strong>Alice</strong>, the player must pick up coins with a <strong>total</strong> value 115. If the player is unable to do so, they <strong>lose</strong> the game.</p>\n\n<p>Return the <em>name</em> of the player who wins the game if both players play <strong>optimally</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 2, y = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;Alice&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The game ends in a single turn:</p>\n\n<ul>\n\t<li>Alice picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">x = 4, y = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;Bob&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The game ends in 2 turns:</p>\n\n<ul>\n\t<li>Alice picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n\t<li>Bob picks 1 coin with a value of 75 and 4 coins with a value of 10.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x, y &lt;= 100</code></li>\n</ul>\n", "hints": ["The only way to make 115 is to use one coin of value 75 and four coins of value 10. Each turn uses up these many coins.", "Hence the number of turns is <code>min(x, y / 4)</code>.", "Determine the winner from its parity."], "exampleTestcases": "2\n7\n4\n11", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string losingPlayer(int x, int y) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String losingPlayer(int x, int y) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def losingPlayer(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def losingPlayer(self, x: int, y: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* losingPlayer(int x, int y) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LosingPlayer(int x, int y) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {string}\n */\nvar losingPlayer = function(x, y) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function losingPlayer(x: number, y: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return String\n     */\n    function losingPlayer($x, $y) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func losingPlayer(_ x: Int, _ y: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun losingPlayer(x: Int, y: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String losingPlayer(int x, int y) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func losingPlayer(x int, y int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {String}\ndef losing_player(x, y)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def losingPlayer(x: Int, y: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn losing_player(x: i32, y: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (losing-player x y)\n  (-> exact-integer? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec losing_player(X :: integer(), Y :: integer()) -> unicode:unicode_binary().\nlosing_player(X, Y) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec losing_player(x :: integer, y :: integer) :: String.t\n  def losing_player(x, y) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "can-i-win", "title": "Can I Win", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "predict-the-winner", "title": "Predict the Winner", "isPaidOnly": false}]}