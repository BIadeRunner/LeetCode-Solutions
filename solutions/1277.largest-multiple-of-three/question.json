{"question_id": "1277", "problem_slug": "largest-multiple-of-three", "problem_title": "Largest Multiple of Three", "content": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n \nExample 1:\n\nInput: digits = [8,1,9]\nOutput: \"981\"\n\nExample 2:\n\nInput: digits = [8,6,7,1,0]\nOutput: \"8760\"\n\nExample 3:\n\nInput: digits = [1]\nOutput: \"\"\n\n \nConstraints:\n\n1 <= digits.length <= 104\n0 <= digits[i] <= 9\n\n", "hints": ["A number is a multiple of three if and only if its sum of digits is a multiple of three.", "Use dynamic programming.", "To find the maximum number, try to maximize the number of digits of the number.", "Sort the digits in descending order to find the maximum number."], "exampleTestcases": "[8,1,9]\n[8,6,7,1,0]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestMultipleOfThree(vector<int>& digits) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String largestMultipleOfThree(int[] digits) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestMultipleOfThree(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* largestMultipleOfThree(int* digits, int digitsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LargestMultipleOfThree(int[] digits) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} digits\n * @return {string}\n */\nvar largestMultipleOfThree = function(digits) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestMultipleOfThree(digits: number[]): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return String\n     */\n    function largestMultipleOfThree($digits) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestMultipleOfThree(_ digits: [Int]) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestMultipleOfThree(digits: IntArray): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String largestMultipleOfThree(List<int> digits) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestMultipleOfThree(digits []int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} digits\n# @return {String}\ndef largest_multiple_of_three(digits)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestMultipleOfThree(digits: Array[Int]): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_multiple_of_three(digits: Vec<i32>) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-multiple-of-three digits)\n  (-> (listof exact-integer?) string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_multiple_of_three(Digits :: [integer()]) -> unicode:unicode_binary().\nlargest_multiple_of_three(Digits) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_multiple_of_three(digits :: [integer]) :: String.t\n  def largest_multiple_of_three(digits) do\n    \n  end\nend"}}}