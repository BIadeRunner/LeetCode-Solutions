{"questionId": "2737", "acRate": 75.52870738956426, "difficulty": "Easy", "freqBar": 48.84181169547052, "frontendQuestionId": "2643", "paidOnly": false, "status": "ac", "title": "Row With Maximum Ones", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "row-with-maximum-ones", "content": "<p>Given a <code>m x n</code> binary matrix <code>mat</code>, find the <strong>0-indexed</strong> position of the row that contains the <strong>maximum</strong> count of <strong>ones,</strong> and the number of ones in that row.</p>\n\n<p>In case there are multiple rows that have the maximum count of ones, the row with the <strong>smallest row number</strong> should be selected.</p>\n\n<p>Return<em> an array containing the index of the row, and the number of ones in it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Both rows have the same number of 1&#39;s. So we return the index of the smaller row, 0, and the maximum count of ones (1<code>)</code>. So, the answer is [0,1]. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,1]]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The row indexed 1 has the maximum count of ones <code>(2)</code>. So we return its index, <code>1</code>, and the count. So, the answer is [1,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,0],[1,1],[0,0]]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code>&nbsp;</li>\n\t<li><code>n == mat[i].length</code>&nbsp;</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code>&nbsp;</li>\n\t<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["Iterate through each row and keep the count of ones."], "exampleTestcases": "[[0,1],[1,0]]\n[[0,0,0],[0,1,1]]\n[[0,0],[1,1],[0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] rowAndMaximumOnes(int[][] mat) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rowAndMaximumOnes(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* rowAndMaximumOnes(int** mat, int matSize, int* matColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] RowAndMaximumOnes(int[][] mat) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @return {number[]}\n */\nvar rowAndMaximumOnes = function(mat) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rowAndMaximumOnes(mat: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer[]\n     */\n    function rowAndMaximumOnes($mat) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rowAndMaximumOnes(_ mat: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rowAndMaximumOnes(mat: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> rowAndMaximumOnes(List<List<int>> mat) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func rowAndMaximumOnes(mat [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @return {Integer[]}\ndef row_and_maximum_ones(mat)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rowAndMaximumOnes(mat: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn row_and_maximum_ones(mat: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (row-and-maximum-ones mat)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec row_and_maximum_ones(Mat :: [[integer()]]) -> [integer()].\nrow_and_maximum_ones(Mat) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec row_and_maximum_ones(mat :: [[integer]]) :: [integer]\n  def row_and_maximum_ones(mat) do\n    \n  end\nend"}], "similarQuestionList": []}