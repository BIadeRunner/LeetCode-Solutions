{"questionId": "3417", "acRate": 42.38013698630137, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3109", "paidOnly": true, "status": "ac", "title": "Find the Index of Permutation", "titleSlug": "find-the-index-of-permutation", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Divide and Conquer", "id": "VG9waWNUYWdOb2RlOjEy", "slug": "divide-and-conquer"}, {"name": "Binary Indexed Tree", "id": "VG9waWNUYWdOb2RlOjI4", "slug": "binary-indexed-tree"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}, {"name": "Merge Sort", "id": "VG9waWNUYWdOb2RlOjYxMDUx", "slug": "merge-sort"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "content": "<p>Given an array <code>perm</code> of length <code>n</code> which is a permutation of <code>[1, 2, ..., n]</code>, return the index of <code>perm</code> in the <span data-keyword=\"lexicographically-sorted-array\">lexicographically sorted</span> array of all of the permutations of <code>[1, 2, ..., n]</code>.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup>&nbsp;+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">perm = [1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are only two permutations in the following order:</p>\n\n<p><code>[1,2]</code>, <code>[2,1]</code><br />\n<br />\nAnd <code>[1,2]</code> is at index 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">perm = [3,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are only six permutations in the following order:</p>\n\n<p><code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[2,1,3]</code>, <code>[2,3,1]</code>, <code>[3,1,2]</code>, <code>[3,2,1]</code><br />\n<br />\nAnd <code>[3,1,2]</code> is at index 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == perm.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>perm</code> is a permutation of <code>[1, 2, ..., n]</code>.</li>\n</ul>\n", "hints": ["If <code>perm[0]</code> is <code>x</code>, there are at least <code>(x - 1) * (n - 1)!</code> permutations before <code>perm<c/ode>. (All the ones starting with numbers less than <code>x</code>)", "Can you find out what happens for <code>perm[1]</code> onwards?", "Think about the count of the numbers that can be in place of <code>perm[i]</code> and come before it."], "exampleTestcases": "[1,2]\n[3,1,2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getPermutationIndex(vector<int>& perm) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getPermutationIndex(int[] perm) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getPermutationIndex(self, perm):\n        \"\"\"\n        :type perm: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getPermutationIndex(self, perm: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int getPermutationIndex(int* perm, int permSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetPermutationIndex(int[] perm) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} perm\n * @return {number}\n */\nvar getPermutationIndex = function(perm) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getPermutationIndex(perm: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $perm\n     * @return Integer\n     */\n    function getPermutationIndex($perm) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getPermutationIndex(_ perm: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getPermutationIndex(perm: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int getPermutationIndex(List<int> perm) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getPermutationIndex(perm []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} perm\n# @return {Integer}\ndef get_permutation_index(perm)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getPermutationIndex(perm: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_permutation_index(perm: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-permutation-index perm)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_permutation_index(Perm :: [integer()]) -> integer().\nget_permutation_index(Perm) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_permutation_index(perm :: [integer]) :: integer\n  def get_permutation_index(perm) do\n    \n  end\nend"}], "similarQuestionList": []}