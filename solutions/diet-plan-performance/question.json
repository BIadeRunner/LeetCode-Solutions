{"questionId": "1280", "acRate": 53.68499398239057, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1176", "paidOnly": true, "status": "ac", "title": "Diet Plan Performance", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "diet-plan-performance", "content": "<p>A dieter consumes&nbsp;<code>calories[i]</code>&nbsp;calories on the <code>i</code>-th day.&nbsp;</p>\n\n<p>Given an integer <code>k</code>, for <strong>every</strong> consecutive sequence of <code>k</code> days (<code>calories[i], calories[i+1], ..., calories[i+k-1]</code>&nbsp;for all <code>0 &lt;= i &lt;= n-k</code>), they look at <em>T</em>, the total calories consumed during that sequence of <code>k</code> days (<code>calories[i] + calories[i+1] + ... + calories[i+k-1]</code>):</p>\n\n<ul>\n\t<li>If <code>T &lt; lower</code>, they performed poorly on their diet and lose 1 point;&nbsp;</li>\n\t<li>If <code>T &gt; upper</code>, they performed well on their diet and gain 1 point;</li>\n\t<li>Otherwise, they performed normally and there is no change in points.</li>\n</ul>\n\n<p>Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for <code>calories.length</code>&nbsp;days.</p>\n\n<p>Note that the total points can be negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories[0] and calories[1] are less than lower so 2 points are lost.\ncalories[3] and calories[4] are greater than upper so 2 points are gained.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [3,2], k = 2, lower = 0, upper = 1\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Since k = 2, we consider subarrays of length 2.\ncalories[0] + calories[1] &gt; upper so 1 point is gained.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> calories = [6,5,0,0], k = 2, lower = 1, upper = 5\n<strong>Output:</strong> 0\n<strong>Explanation</strong>:\ncalories[0] + calories[1] &gt; upper so 1 point is gained.\nlower &lt;= calories[1] + calories[2] &lt;= upper so no change in points.\ncalories[2] + calories[3] &lt; lower so 1 point is lost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= calories.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= calories[i] &lt;= 20000</code></li>\n\t<li><code>0 &lt;= lower &lt;= upper</code></li>\n</ul>\n", "hints": ["Use sliding window technique (aka two pointers)."], "exampleTestcases": "[1,2,3,4,5]\n1\n3\n3\n[3,2]\n2\n0\n1\n[6,5,0,0]\n2\n1\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int dietPlanPerformance(vector<int>& calories, int k, int lower, int upper) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int dietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def dietPlanPerformance(self, calories, k, lower, upper):\n        \"\"\"\n        :type calories: List[int]\n        :type k: int\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def dietPlanPerformance(self, calories: List[int], k: int, lower: int, upper: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int dietPlanPerformance(int* calories, int caloriesSize, int k, int lower, int upper) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DietPlanPerformance(int[] calories, int k, int lower, int upper) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} calories\n * @param {number} k\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar dietPlanPerformance = function(calories, k, lower, upper) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function dietPlanPerformance(calories: number[], k: number, lower: number, upper: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $calories\n     * @param Integer $k\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function dietPlanPerformance($calories, $k, $lower, $upper) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func dietPlanPerformance(_ calories: [Int], _ k: Int, _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun dietPlanPerformance(calories: IntArray, k: Int, lower: Int, upper: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int dietPlanPerformance(List<int> calories, int k, int lower, int upper) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func dietPlanPerformance(calories []int, k int, lower int, upper int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} calories\n# @param {Integer} k\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef diet_plan_performance(calories, k, lower, upper)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def dietPlanPerformance(calories: Array[Int], k: Int, lower: Int, upper: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn diet_plan_performance(calories: Vec<i32>, k: i32, lower: i32, upper: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (diet-plan-performance calories k lower upper)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec diet_plan_performance(Calories :: [integer()], K :: integer(), Lower :: integer(), Upper :: integer()) -> integer().\ndiet_plan_performance(Calories, K, Lower, Upper) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec diet_plan_performance(calories :: [integer], k :: integer, lower :: integer, upper :: integer) :: integer\n  def diet_plan_performance(calories, k, lower, upper) do\n    \n  end\nend"}], "similarQuestionList": []}