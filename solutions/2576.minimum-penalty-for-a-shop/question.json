{"question_id": "2576", "problem_slug": "minimum-penalty-for-a-shop", "problem_title": "Minimum Penalty for a Shop", "content": "You are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':\n\nif the ith character is 'Y', it means that customers come at the ith hour\nwhereas 'N' indicates that no customers come at the ith hour.\n\nIf the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:\n\nFor every hour when the shop is open and no customers come, the penalty increases by 1.\nFor every hour when the shop is closed and customers come, the penalty increases by 1.\n\nReturn the earliest hour at which the shop must be closed to incur a minimum penalty.\nNote that if a shop closes at the jth hour, it means the shop is closed at the hour j.\n \nExample 1:\n\nInput: customers = \"YYNY\"\nOutput: 2\nExplanation: \n- Closing the shop at the 0th hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1st hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2nd hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3rd hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4th hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2nd or 4th hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.\n\nExample 2:\n\nInput: customers = \"NNNNN\"\nOutput: 0\nExplanation: It is best to close the shop at the 0th hour as no customers arrive.\nExample 3:\n\nInput: customers = \"YYYY\"\nOutput: 4\nExplanation: It is best to close the shop at the 4th hour as customers arrive at each hour.\n\n \nConstraints:\n\n1 <= customers.length <= 105\ncustomers consists only of characters 'Y' and 'N'.\n\n", "hints": ["At any index, the penalty is the sum of prefix count of ‘N’ and suffix count of ‘Y’.", "Enumerate all indices and find the minimum such value."], "exampleTestcases": "\"YYNY\"\n\"NNNNN\"\n\"YYYY\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int bestClosingTime(string customers) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int bestClosingTime(String customers) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def bestClosingTime(self, customers):\n        \"\"\"\n        :type customers: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def bestClosingTime(self, customers: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int bestClosingTime(char* customers) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BestClosingTime(string customers) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} customers\n * @return {number}\n */\nvar bestClosingTime = function(customers) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function bestClosingTime(customers: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $customers\n     * @return Integer\n     */\n    function bestClosingTime($customers) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func bestClosingTime(_ customers: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun bestClosingTime(customers: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int bestClosingTime(String customers) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func bestClosingTime(customers string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} customers\n# @return {Integer}\ndef best_closing_time(customers)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def bestClosingTime(customers: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn best_closing_time(customers: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (best-closing-time customers)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec best_closing_time(Customers :: unicode:unicode_binary()) -> integer().\nbest_closing_time(Customers) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec best_closing_time(customers :: String.t) :: integer\n  def best_closing_time(customers) do\n    \n  end\nend"}}}