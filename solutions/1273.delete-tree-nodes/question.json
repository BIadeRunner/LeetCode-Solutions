{"questionId": "1201", "acRate": 61.227796100214086, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1273", "paidOnly": true, "status": "ac", "title": "Delete Tree Nodes", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}], "titleSlug": "delete-tree-nodes", "content": "<p>A tree rooted at node 0 is given as follows:</p>\n\n<ul>\n\t<li>The number of nodes is <code>nodes</code>;</li>\n\t<li>The value of the <code>i<sup>th</sup></code> node is <code>value[i]</code>;</li>\n\t<li>The parent of the <code>i<sup>th</sup></code> node is <code>parent[i]</code>.</li>\n</ul>\n\n<p>Remove every subtree whose sum of values of nodes is zero.</p>\n\n<p>Return <em>the number of the remaining nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/07/02/1421_sample_1.PNG\" style=\"width: 403px; height: 347px;\" />\n<pre>\n<strong>Input:</strong> nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nodes &lt;= 10<sup>4</sup></code></li>\n\t<li><code>parent.length == nodes</code></li>\n\t<li><code>0 &lt;= parent[i] &lt;= nodes - 1</code></li>\n\t<li><code>parent[0] == -1</code> which indicates that <code>0</code> is the root.</li>\n\t<li><code>value.length == nodes</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= value[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The given input is <strong>guaranteed</strong> to represent a <strong>valid tree</strong>.</li>\n</ul>\n", "hints": ["Traverse the tree using depth first search.", "Find for every node the sum of values of its sub-tree.", "Traverse the tree again from the root and return once you reach a node with zero sum of values in its sub-tree."], "exampleTestcases": "7\n[-1,0,0,1,2,2,2]\n[1,-2,4,0,-2,-1,-1]\n7\n[-1,0,0,1,2,2,2]\n[1,-2,4,0,-2,-1,-2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int deleteTreeNodes(int nodes, vector<int>& parent, vector<int>& value) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int deleteTreeNodes(int nodes, int[] parent, int[] value) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def deleteTreeNodes(self, nodes, parent, value):\n        \"\"\"\n        :type nodes: int\n        :type parent: List[int]\n        :type value: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def deleteTreeNodes(self, nodes: int, parent: List[int], value: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int deleteTreeNodes(int nodes, int* parent, int parentSize, int* value, int valueSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DeleteTreeNodes(int nodes, int[] parent, int[] value) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} nodes\n * @param {number[]} parent\n * @param {number[]} value\n * @return {number}\n */\nvar deleteTreeNodes = function(nodes, parent, value) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function deleteTreeNodes(nodes: number, parent: number[], value: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $nodes\n     * @param Integer[] $parent\n     * @param Integer[] $value\n     * @return Integer\n     */\n    function deleteTreeNodes($nodes, $parent, $value) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func deleteTreeNodes(_ nodes: Int, _ parent: [Int], _ value: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun deleteTreeNodes(nodes: Int, parent: IntArray, value: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int deleteTreeNodes(int nodes, List<int> parent, List<int> value) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func deleteTreeNodes(nodes int, parent []int, value []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} nodes\n# @param {Integer[]} parent\n# @param {Integer[]} value\n# @return {Integer}\ndef delete_tree_nodes(nodes, parent, value)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def deleteTreeNodes(nodes: Int, parent: Array[Int], value: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn delete_tree_nodes(nodes: i32, parent: Vec<i32>, value: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (delete-tree-nodes nodes parent value)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec delete_tree_nodes(Nodes :: integer(), Parent :: [integer()], Value :: [integer()]) -> integer().\ndelete_tree_nodes(Nodes, Parent, Value) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec delete_tree_nodes(nodes :: integer, parent :: [integer], value :: [integer]) :: integer\n  def delete_tree_nodes(nodes, parent, value) do\n    \n  end\nend"}], "similarQuestionList": []}