{"question_id": "2756", "problem_slug": "buy-two-chocolates", "problem_title": "Buy Two Chocolates", "content": "You are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money.\nYou must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\nReturn the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.\n \nExample 1:\n\nInput: prices = [1,2,2], money = 3\nOutput: 0\nExplanation: Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0.\n\nExample 2:\n\nInput: prices = [3,2,3], money = 3\nOutput: 3\nExplanation: You cannot buy 2 chocolates without going in debt, so we return 3.\n\n \nConstraints:\n\n2 <= prices.length <= 50\n1 <= prices[i] <= 100\n1 <= money <= 100\n\n", "hints": ["Sort the array and check if the money is more than or equal to the sum of the two cheapest elements."], "exampleTestcases": "[1,2,2]\n3\n[3,2,3]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int buyChoco(vector<int>& prices, int money) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int buyChoco(int[] prices, int money) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def buyChoco(self, prices, money):\n        \"\"\"\n        :type prices: List[int]\n        :type money: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def buyChoco(self, prices: List[int], money: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int buyChoco(int* prices, int pricesSize, int money){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int BuyChoco(int[] prices, int money) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @param {number} money\n * @return {number}\n */\nvar buyChoco = function(prices, money) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function buyChoco(prices: number[], money: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @param Integer $money\n     * @return Integer\n     */\n    function buyChoco($prices, $money) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func buyChoco(_ prices: [Int], _ money: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun buyChoco(prices: IntArray, money: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int buyChoco(List<int> prices, int money) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func buyChoco(prices []int, money int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @param {Integer} money\n# @return {Integer}\ndef buy_choco(prices, money)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def buyChoco(prices: Array[Int], money: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn buy_choco(prices: Vec<i32>, money: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (buy-choco prices money)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec buy_choco(Prices :: [integer()], Money :: integer()) -> integer().\nbuy_choco(Prices, Money) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec buy_choco(prices :: [integer], money :: integer) :: integer\n  def buy_choco(prices, money) do\n    \n  end\nend"}}}