{"question_id": "1889", "problem_slug": "check-if-number-is-a-sum-of-powers-of-three", "problem_title": "Check if Number is a Sum of Powers of Three", "content": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3x.\n \nExample 1:\n\nInput: n = 12\nOutput: true\nExplanation: 12 = 31 + 32\n\nExample 2:\n\nInput: n = 91\nOutput: true\nExplanation: 91 = 30 + 32 + 34\n\nExample 3:\n\nInput: n = 21\nOutput: false\n\n \nConstraints:\n\n1 <= n <= 107\n\n", "hints": ["Let's note that the maximum power of 3 you'll use in your soln is 3^16", "The number can not be represented as a sum of powers of 3 if it's ternary presentation has a 2 in it"], "exampleTestcases": "12\n91\n21", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkPowersOfThree(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkPowersOfThree(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkPowersOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkPowersOfThree(self, n: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkPowersOfThree(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckPowersOfThree(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar checkPowersOfThree = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkPowersOfThree(n: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function checkPowersOfThree($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkPowersOfThree(_ n: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkPowersOfThree(n: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkPowersOfThree(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkPowersOfThree(n int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef check_powers_of_three(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkPowersOfThree(n: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_powers_of_three(n: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-powers-of-three n)\n  (-> exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_powers_of_three(N :: integer()) -> boolean().\ncheck_powers_of_three(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_powers_of_three(n :: integer) :: boolean\n  def check_powers_of_three(n) do\n    \n  end\nend"}}}