{"question_id": "408", "problem_slug": "valid-word-abbreviation", "problem_title": "Valid Word Abbreviation", "content": "A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\nFor example, a string such as \"substitution\" could be abbreviated as (but not limited to):\n\n\"s10n\" (\"s ubstitutio n\")\n\"sub4u4\" (\"sub stit u tion\")\n\"12\" (\"substitution\")\n\"su3i1u2on\" (\"su bst i t u ti on\")\n\"substitution\" (no substrings replaced)\n\nThe following are not valid abbreviations:\n\n\"s55n\" (\"s ubsti tutio n\", the replaced substrings are adjacent)\n\"s010n\" (has leading zeros)\n\"s0ubstitution\" (replaces an empty substring)\n\nGiven a string word and an abbreviation abbr, return whether the string matches the given abbreviation.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: word = \"internationalization\", abbr = \"i12iz4n\"\nOutput: true\nExplanation: The word \"internationalization\" can be abbreviated as \"i12iz4n\" (\"i nternational iz atio n\").\n\nExample 2:\n\nInput: word = \"apple\", abbr = \"a2e\"\nOutput: false\nExplanation: The word \"apple\" cannot be abbreviated as \"a2e\".\n\n \nConstraints:\n\n1 <= word.length <= 20\nword consists of only lowercase English letters.\n1 <= abbr.length <= 10\nabbr consists of lowercase English letters and digits.\nAll the integers in abbr will fit in a 32-bit integer.\n\n", "hints": [], "exampleTestcases": "\"internationalization\"\n\"i12iz4n\"\n\"apple\"\n\"a2e\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validWordAbbreviation(string word, string abbr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean validWordAbbreviation(String word, String abbr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validWordAbbreviation(self, word, abbr):\n        \"\"\"\n        :type word: str\n        :type abbr: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool validWordAbbreviation(char* word, char* abbr) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ValidWordAbbreviation(string word, string abbr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {string} abbr\n * @return {boolean}\n */\nvar validWordAbbreviation = function(word, abbr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validWordAbbreviation(word: string, abbr: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param String $abbr\n     * @return Boolean\n     */\n    function validWordAbbreviation($word, $abbr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validWordAbbreviation(_ word: String, _ abbr: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validWordAbbreviation(word: String, abbr: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool validWordAbbreviation(String word, String abbr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validWordAbbreviation(word string, abbr string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @param {String} abbr\n# @return {Boolean}\ndef valid_word_abbreviation(word, abbr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validWordAbbreviation(word: String, abbr: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_word_abbreviation(word: String, abbr: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-word-abbreviation word abbr)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_word_abbreviation(Word :: unicode:unicode_binary(), Abbr :: unicode:unicode_binary()) -> boolean().\nvalid_word_abbreviation(Word, Abbr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_word_abbreviation(word :: String.t, abbr :: String.t) :: boolean\n  def valid_word_abbreviation(word, abbr) do\n    \n  end\nend"}}}