{"question_id": "441", "problem_slug": "arranging-coins", "problem_title": "Arranging Coins", "content": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.\n \nExample 1:\n\n\nInput: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.\n\nExample 2:\n\n\nInput: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3.\n\n \nConstraints:\n\n1 <= n <= 231 - 1\n\n", "hints": [], "exampleTestcases": "5\n8", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int arrangeCoins(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int arrangeCoins(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int arrangeCoins(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ArrangeCoins(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar arrangeCoins = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function arrangeCoins(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function arrangeCoins($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func arrangeCoins(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun arrangeCoins(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int arrangeCoins(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func arrangeCoins(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef arrange_coins(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn arrange_coins(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (arrange-coins n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec arrange_coins(N :: integer()) -> integer().\narrange_coins(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec arrange_coins(n :: integer) :: integer\n  def arrange_coins(n) do\n    \n  end\nend"}}}