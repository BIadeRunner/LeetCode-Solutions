{"questionId": "650", "acRate": 59.61257725488769, "difficulty": "Medium", "freqBar": 81.60308253190685, "frontendQuestionId": "650", "paidOnly": false, "status": "ac", "title": "2 Keys Keyboard", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "2-keys-keyboard", "content": "<p>There is only one character <code>&#39;A&#39;</code> on the screen of a notepad. You can perform one of two operations on this notepad for each step:</p>\n\n<ul>\n\t<li>Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).</li>\n\t<li>Paste: You can paste the characters which are copied last time.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the minimum number of operations to get the character</em> <code>&#39;A&#39;</code> <em>exactly</em> <code>n</code> <em>times on the screen</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, we have one character &#39;A&#39;.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get &#39;AA&#39;.\nIn step 3, we use Paste operation to get &#39;AAA&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n", "hints": ["How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"], "exampleTestcases": "3\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSteps(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSteps(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSteps(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSteps(self, n: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minSteps(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSteps(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar minSteps = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSteps(n: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minSteps($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSteps(_ n: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSteps(n: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minSteps(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minSteps(n int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef min_steps(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSteps(n: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_steps(n: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-steps n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_steps(N :: integer()) -> integer().\nmin_steps(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_steps(n :: integer) :: integer\n  def min_steps(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "4-keys-keyboard", "title": "4 Keys Keyboard", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "broken-calculator", "title": "Broken Calculator", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors", "title": "Smallest Value After Replacing With Sum of Prime Factors", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "distinct-prime-factors-of-product-of-array", "title": "Distinct Prime Factors of Product of Array", "isPaidOnly": false}]}