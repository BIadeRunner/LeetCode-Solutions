{"questionId": "3603", "acRate": 14.987853793570984, "difficulty": "Hard", "freqBar": 1.7863588430772706, "frontendQuestionId": "3327", "paidOnly": false, "status": "ac", "title": "Check if DFS Strings Are Palindromes", "titleSlug": "check-if-dfs-strings-are-palindromes", "topicTags": [], "content": "<p>You are given a tree rooted at node 0, consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by an array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node 0 is the root, <code>parent[0] == -1</code>.</p>\n\n<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to node <code>i</code>.</p>\n\n<p>Consider an empty string <code>dfsStr</code>, and define a recursive function <code>dfs(int x)</code> that takes a node <code>x</code> as a parameter and performs the following steps in order:</p>\n\n<ul>\n\t<li>Iterate over each child <code>y</code> of <code>x</code> <strong>in increasing order of their numbers</strong>, and call <code>dfs(y)</code>.</li>\n\t<li>Add the character <code>s[x]</code> to the end of the string <code>dfsStr</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that <code>dfsStr</code> is shared across all recursive calls of <code>dfs</code>.</p>\n\n<p>You need to find a boolean array <code>answer</code> of size <code>n</code>, where for each index <code>i</code> from <code>0</code> to <code>n - 1</code>, you do the following:</p>\n\n<ul>\n\t<li>Empty the string <code>dfsStr</code> and call <code>dfs(i)</code>.</li>\n\t<li>If the resulting string <code>dfsStr</code> is a <span data-keyword=\"palindrome-string\">palindrome</span>, then set <code>answer[i]</code> to <code>true</code>. Otherwise, set <code>answer[i]</code> to <code>false</code>.</li>\n</ul>\n\n<p>Return the array <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/09/01/tree1drawio.png\" style=\"width: 240px; height: 256px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">parent = [-1,0,0,1,1,2], s = &quot;aababa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,true,false,true,true,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Calling <code>dfs(0)</code> results in the string <code>dfsStr = &quot;abaaba&quot;</code>, which is a palindrome.</li>\n\t<li>Calling <code>dfs(1)</code> results in the string <code>dfsStr = &quot;aba&quot;</code>, which is a palindrome.</li>\n\t<li>Calling <code>dfs(2)</code> results in the string <code>dfsStr = &quot;ab&quot;</code>, which is <strong>not</strong> a palindrome.</li>\n\t<li>Calling <code>dfs(3)</code> results in the string <code>dfsStr = &quot;a&quot;</code>, which is a palindrome.</li>\n\t<li>Calling <code>dfs(4)</code> results in the string <code>dfsStr = &quot;b&quot;</code>, which is a palindrome.</li>\n\t<li>Calling <code>dfs(5)</code> results in the string <code>dfsStr = &quot;a&quot;</code>, which is a palindrome.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/09/01/tree2drawio-1.png\" style=\"width: 260px; height: 167px;\" />\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">parent = [-1,0,0,0,0], s = &quot;aabcb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[true,true,true,true,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Every call on <code>dfs(x)</code> results in a palindrome string.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parent.length == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code>.</li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>parent</code> represents a valid tree.</li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Perform the dfs described from the root of tree, and store the order in which nodes are visited into an array.", "For any node in the tree, the nodes in its subtree will form a contiguous subarray within the DFS traversal array.", "Use Manacherâ€™s algorithm to compute the answer for each node in constant time."], "exampleTestcases": "[-1,0,0,1,1,2]\n\"aababa\"\n[-1,0,0,0,0]\n\"aabcb\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> findAnswer(vector<int>& parent, string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean[] findAnswer(int[] parent, String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findAnswer(self, parent, s):\n        \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: List[bool]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findAnswer(self, parent: List[int], s: str) -> List[bool]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* findAnswer(int* parent, int parentSize, char* s, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool[] FindAnswer(int[] parent, string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} parent\n * @param {string} s\n * @return {boolean[]}\n */\nvar findAnswer = function(parent, s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findAnswer(parent: number[], s: string): boolean[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $parent\n     * @param String $s\n     * @return Boolean[]\n     */\n    function findAnswer($parent, $s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findAnswer(_ parent: [Int], _ s: String) -> [Bool] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findAnswer(parent: IntArray, s: String): BooleanArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<bool> findAnswer(List<int> parent, String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findAnswer(parent []int, s string) []bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} parent\n# @param {String} s\n# @return {Boolean[]}\ndef find_answer(parent, s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findAnswer(parent: Array[Int], s: String): Array[Boolean] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_answer(parent: Vec<i32>, s: String) -> Vec<bool> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-answer parent s)\n  (-> (listof exact-integer?) string? (listof boolean?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_answer(Parent :: [integer()], S :: unicode:unicode_binary()) -> [boolean()].\nfind_answer(Parent, S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_answer(parent :: [integer], s :: String.t) :: [boolean]\n  def find_answer(parent, s) do\n    \n  end\nend"}], "similarQuestionList": []}