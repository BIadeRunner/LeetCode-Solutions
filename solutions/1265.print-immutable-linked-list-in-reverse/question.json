{"questionId": "1404", "acRate": 94.03705555208398, "difficulty": "Medium", "freqBar": 31.94743221311026, "frontendQuestionId": "1265", "paidOnly": true, "status": "ac", "title": "Print Immutable Linked List in Reverse", "topicTags": [{"name": "Linked List", "id": "VG9waWNUYWdOb2RlOjc=", "slug": "linked-list"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}], "titleSlug": "print-immutable-linked-list-in-reverse", "content": "<p>You are given an immutable linked list, print out all values of each node in reverse with the help of the following&nbsp;interface:</p>\n\n<ul>\n\t<li><code>ImmutableListNode</code>:&nbsp;An interface of immutable linked list, you are given the head of the list.</li>\n</ul>\n\n<p>You need to use the following functions to access the linked list (you <strong>can&#39;t</strong> access the <code>ImmutableListNode</code> directly):</p>\n\n<ul>\n\t<li><code>ImmutableListNode.printValue()</code>: Print value of the current node.</li>\n\t<li><code>ImmutableListNode.getNext()</code>: Return the next node.</li>\n</ul>\n\n<p>The input is only given to initialize the linked list internally.&nbsp;You must solve this problem without modifying the linked list. In other words, you must operate&nbsp;the linked list using only the mentioned&nbsp;APIs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [4,3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [0,-4,-1,3,-5]\n<strong>Output:</strong> [-5,3,-1,-4,0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [-2,0,6,4,4,-6]\n<strong>Output:</strong> [-6,4,4,6,0,-2]\n</pre>\n\n<ul>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The length of the linked list&nbsp;is between <code>[1, 1000]</code>.</li>\n\t<li>The value of each&nbsp;node in the linked list&nbsp;is between <code>[-1000, 1000]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>Follow up:</strong></p>\n\n<p>Could you solve this problem in:</p>\n\n<ul>\n\t<li>Constant space complexity?</li>\n\t<li>Linear time complexity and less than linear space complexity?</li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,2,3,4]\n[0,-4,-1,3,-5]\n[-2,0,6,4,4,-6]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n * public:\n *    void printValue(); // print the value of the node.\n *    ImmutableListNode* getNext(); // return the next node.\n * };\n */\n\nclass Solution {\npublic:\n    void printLinkedListInReverse(ImmutableListNode* head) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * interface ImmutableListNode {\n *     public void printValue(); // print the value of this node.\n *     public ImmutableListNode getNext(); // return the next node.\n * };\n */\n\nclass Solution {\n    public void printLinkedListInReverse(ImmutableListNode head) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "#   \"\"\"\n#   This is the ImmutableListNode's API interface.\n#   You should not implement it, or speculate about its implementation.\n#   \"\"\"\n#   class ImmutableListNode(object):\n#      def printValue(self): # print the value of this node.\n# .        \"\"\"\n#          :rtype None\n#          \"\"\"\n#\n#      def getNext(self): # return the next node.\n# .        \"\"\"\n#          :rtype ImmutableListNode\n#          \"\"\"\n\nclass Solution(object):\n    def printLinkedListInReverse(self, head):\n        \"\"\"\n        :type head: ImmutableListNode\n        :rtype: None\n        \"\"\"\n\t\t"}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is the ImmutableListNode's API interface.\n# You should not implement it, or speculate about its implementation.\n# \"\"\"\n# class ImmutableListNode:\n#     def printValue(self) -> None: # print the value of this node.\n#     def getNext(self) -> 'ImmutableListNode': # return the next node.\n\nclass Solution:\n    def printLinkedListInReverse(self, head: 'ImmutableListNode') -> None:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for ImmutableListNode.\n * struct ImmutableListNode {\n *     struct ImmutableListNode* (*getNext)(struct ImmutableListNode*); // return the next node.\n *     void (*printValue)(struct ImmutableListNode*); // print the value of the node.\n * };\n */\n\nvoid printLinkedListInReverse(struct ImmutableListNode* head) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     public void PrintValue(); // print the value of this node.\n *     public ImmutableListNode GetNext(); // return the next node.\n * }\n */\n\npublic class Solution {\n    public void PrintLinkedListInReverse(ImmutableListNode head) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * function ImmutableListNode() {\n *    @ return {void}\n *    this.printValue = function() { // print the value of this node.\n *       ...\n *    }; \n *\n *    @return {ImmutableListNode}\n *    this.getNext = function() { // return the next node.\n *       ...\n *    };\n * };\n */\n\n/**\n * @param {ImmutableListNode} head\n * @return {void}\n */\nvar printLinkedListInReverse = function(head) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ImmutableListNode {\n *      printValue() {}\n *\n *      getNext(): ImmutableListNode {}\n * }\n */\n\nfunction printLinkedListInReverse(head: ImmutableListNode) {\n\t\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     public function printValue() {} // print the value of this node.\n *     public function getNext() {} // return the next node.\n * };\n */\n\nclass Solution {\n    /**\n     * @param  ImmutableListNode  $head\n     * @return void\n     */\n    function printLinkedListInReverse($head) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for ImmutableListNode.\n * public class ImmutableListNode {\n *     public func printValue() {}\n *     public func getNext() -> ImmutableListNode? {}\n * }\n */\n\nclass Solution {\n    func printLinkedListInReverse(_ head: ImmutableListNode?) {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     fun getNext(): ImmutableListNode? {} // return the next node.\n *     fun printValue() {} // print the value of this node.\n * };\n */\n\nclass Solution {\n\tfun printLinkedListInReverse(head:ImmutableListNode?) {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/*   Below is the interface for ImmutableListNode, which is already defined for you.\n *\n *   type ImmutableListNode struct {\n *       \n *   }\n *\n *   func (this *ImmutableListNode) getNext() ImmutableListNode {\n *\t\t// return the next node.\n *   }\n *\n *   func (this *ImmutableListNode) printValue() {\n *\t\t// print the value of this node.\n *   }\n */\n\nfunc printLinkedListInReverse(head ImmutableListNode) {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "#   This is the ImmutableListNode's API interface.\n#   You should not implement it, or speculate about its implementation.\n#\n#   class ImmutableListNode\n#      def printValue()\n# .        print the value of this node.\n#      def end\n#          \"\"\"\n#\n#      def getNext()\n# .        return the next node.\n#      end\n#   end\n\ndef printLinkedListInReverse(head)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode{\n *     def printValue(): Unit = {} // print the value of this node.\n *     def getNext(): ImmutableListNode = {} // return the next node.\n * };\n */\n\nobject Solution {\n    def printLinkedListInReverse(head: ImmutableListNode): Unit = {\n        \n    }\n}"}], "similarQuestionList": []}