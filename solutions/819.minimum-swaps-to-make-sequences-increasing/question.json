{"question_id": "819", "problem_slug": "minimum-swaps-to-make-sequences-increasing", "problem_title": "Minimum Swaps To Make Sequences Increasing", "content": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n\nFor example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\n\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\n \nExample 1:\n\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\nExample 2:\n\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\nOutput: 1\n\n \nConstraints:\n\n2 <= nums1.length <= 105\nnums2.length == nums1.length\n0 <= nums1[i], nums2[i] <= 2 * 105\n\n", "hints": [], "exampleTestcases": "[1,3,5,4]\n[1,2,3,7]\n[0,3,5,8,9]\n[2,1,4,6,9]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSwap(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minSwap(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minSwap(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minSwap(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinSwap(int[] nums1, int[] nums2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minSwap = function(nums1, nums2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minSwap(nums1: number[], nums2: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minSwap($nums1, $nums2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minSwap(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minSwap(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minSwap(List<int> nums1, List<int> nums2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minSwap(nums1 []int, nums2 []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef min_swap(nums1, nums2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minSwap(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_swap(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-swap nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_swap(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_swap(Nums1, Nums2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_swap(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_swap(nums1, nums2) do\n    \n  end\nend"}}}