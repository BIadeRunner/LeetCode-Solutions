{"questionId": "786", "acRate": 72.40592685822166, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "702", "paidOnly": true, "status": "ac", "title": "Search in a Sorted Array of Unknown Size", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "search-in-a-sorted-array-of-unknown-size", "content": "<p>This is an <strong><em>interactive problem</em></strong>.</p>\n\n<p>You have a sorted array of <strong>unique</strong> elements and an <strong>unknown size</strong>. You do not have an access to the array but you can use the <code>ArrayReader</code> interface to access it. You can call <code>ArrayReader.get(i)</code> that:</p>\n\n<ul>\n\t<li>returns the value at the <code>i<sup>th</sup></code> index (<strong>0-indexed</strong>) of the secret array (i.e., <code>secret[i]</code>), or</li>\n\t<li>returns <code>2<sup>31</sup> - 1</code> if the <code>i</code> is out of the boundary of the array.</li>\n</ul>\n\n<p>You are also given an integer <code>target</code>.</p>\n\n<p>Return the index <code>k</code> of the hidden array where <code>secret[k] == target</code> or return <code>-1</code> otherwise.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = [-1,0,3,5,9,12], target = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in secret and its index is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = [-1,0,3,5,9,12], target = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in secret so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= secret.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= secret[i], target &lt;= 10<sup>4</sup></code></li>\n\t<li><code>secret</code> is sorted in a strictly increasing order.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[-1,0,3,5,9,12]\n9\n[-1,0,3,5,9,12]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *   public:\n *     int get(int index);\n * };\n */\n\nclass Solution {\npublic:\n    int search(const ArrayReader& reader, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     public int get(int index) {}\n * }\n */\n\nclass Solution {\n    public int search(ArrayReader reader, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#    def get(self, index):\n#        \"\"\"\n#        :type index: int\n#        :rtype int\n#        \"\"\"\n\nclass Solution(object):\n    def search(self, reader, target):\n        \"\"\"\n        :type reader: ArrayReader\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader:\n#    def get(self, index: int) -> int:\n\nclass Solution:\n    def search(self, reader: 'ArrayReader', target: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * int getElement(ArrayReader *, int index);\n */\n\nint search(struct ArrayReader* reader, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     public int Get(int index) {}\n * }\n */\n\nclass Solution {\n    public int Search(ArrayReader reader, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * function ArrayReader() {\n *\n *     @param {number} index\n *     @return {number}\n *     this.get = function(index) {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {ArrayReader} reader\n * @param {number} target\n * @return {number}\n */\nvar search = function (reader, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * class ArrayReader {\n *\t\t// This is the ArrayReader's API interface.\n *\t\t// You should not implement it, or speculate about its implementation\n *\t\tget(index: number): number {};\n *  };\n */\n\nfunction search(reader: ArrayReader, target: number): number {\n\t\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     function get($index) {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param ArrayReader $reader\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($reader, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * public class ArrayReader {\n *     public func get(_ index: Int) -> Int {}\n * }\n */\n\nclass Solution {\n    func search(_ reader: ArrayReader, _ target: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     fun get(index: Int): Int {}\n * }\n */\n\nclass Solution {\n    fun search(reader: ArrayReader, target: Int): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * type ArrayReader struct {\n * }\n *\n * func (this *ArrayReader) get(index int) int {}\n */\n\nfunc search(reader ArrayReader, target int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# class ArrayReader\n#     def get(index)\n#\t\t\n#     end\n# end\n\n# @param {ArrayReader} reader\n# @param {int} target\n# @return {int}\ndef search(reader, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     def get(index: Int): Int = {}\n * }\n */\n\nobject Solution {\n    def search(reader: ArrayReader, target: Int): Int = {\n        \n    }\n}"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "binary-search", "title": "Binary Search", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-index-of-the-large-integer", "title": "Find the Index of the Large Integer", "isPaidOnly": true}]}