{"question_id": "3582", "problem_slug": "find-indices-of-stable-mountains", "problem_title": "Find Indices of Stable Mountains", "content": "There are n mountains in a row, and each mountain has a height. You are given an integer array height where height[i] represents the height of mountain i, and an integer threshold.\nA mountain is called stable if the mountain just before it (if it exists) has a height strictly greater than threshold. Note that mountain 0 is not stable.\nReturn an array containing the indices of all stable mountains in any order.\n \nExample 1:\n\nInput: height = [1,2,3,4,5], threshold = 2\nOutput: [3,4]\nExplanation:\n\nMountain 3 is stable because height[2] == 3 is greater than threshold == 2.\nMountain 4 is stable because height[3] == 4 is greater than threshold == 2.\n\n\nExample 2:\n\nInput: height = [10,1,10,1,10], threshold = 3\nOutput: [1,3]\n\nExample 3:\n\nInput: height = [10,1,10,1,10], threshold = 10\nOutput: []\n\n \nConstraints:\n\n2 <= n == height.length <= 100\n1 <= height[i] <= 100\n1 <= threshold <= 100\n\n", "hints": [], "exampleTestcases": "[1,2,3,4,5]\n2\n[10,1,10,1,10]\n3\n[10,1,10,1,10]\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> stableMountains(vector<int>& height, int threshold) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> stableMountains(int[] height, int threshold) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def stableMountains(self, height, threshold):\n        \"\"\"\n        :type height: List[int]\n        :type threshold: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* stableMountains(int* height, int heightSize, int threshold, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> StableMountains(int[] height, int threshold) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @param {number} threshold\n * @return {number[]}\n */\nvar stableMountains = function(height, threshold) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function stableMountains(height: number[], threshold: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @param Integer $threshold\n     * @return Integer[]\n     */\n    function stableMountains($height, $threshold) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func stableMountains(_ height: [Int], _ threshold: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun stableMountains(height: IntArray, threshold: Int): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> stableMountains(List<int> height, int threshold) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func stableMountains(height []int, threshold int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} height\n# @param {Integer} threshold\n# @return {Integer[]}\ndef stable_mountains(height, threshold)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def stableMountains(height: Array[Int], threshold: Int): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn stable_mountains(height: Vec<i32>, threshold: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (stable-mountains height threshold)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec stable_mountains(Height :: [integer()], Threshold :: integer()) -> [integer()].\nstable_mountains(Height, Threshold) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec stable_mountains(height :: [integer], threshold :: integer) :: [integer]\n  def stable_mountains(height, threshold) do\n    \n  end\nend"}}}