{"question_id": "594", "problem_slug": "longest-harmonious-subsequence", "problem_title": "Longest Harmonious Subsequence", "content": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\nA subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n \nExample 1:\n\r\nInput: nums = [1,3,2,2,5,2,3,7]\r\nOutput: 5\r\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].\r\n\nExample 2:\n\r\nInput: nums = [1,2,3,4]\r\nOutput: 2\r\n\nExample 3:\n\r\nInput: nums = [1,1,1,1]\r\nOutput: 0\r\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-109 <= nums[i] <= 109\n", "hints": [], "exampleTestcases": "[1,3,2,2,5,2,3,7]\n[1,2,3,4]\n[1,1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    int findLHS(vector<int>& nums) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public int findLHS(int[] nums) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def findLHS(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def findLHS(self, nums: List[int]) -> int:"}, "C": {"langSlug": "c", "code": "int findLHS(int* nums, int numsSize){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public int FindLHS(int[] nums) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findLHS = function(nums) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findLHS(nums: number[]): number {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $nums\r\n     * @return Integer\r\n     */\r\n    function findLHS($nums) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func findLHS(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun findLHS(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func findLHS(nums []int) int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_lhs(nums)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def findLHS(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn find_lhs(nums: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-lhs nums)\r\n  (-> (listof exact-integer?) exact-integer?)\r\n\r\n  )"}}}