{"questionId": "2364", "acRate": 54.25636488744716, "difficulty": "Hard", "freqBar": 69.92973639352414, "frontendQuestionId": "2246", "paidOnly": false, "status": "ac", "title": "Longest Path With Different Adjacent Characters", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Topological Sort", "id": "VG9waWNUYWdOb2RlOjI2", "slug": "topological-sort"}], "titleSlug": "longest-path-with-different-adjacent-characters", "content": "<p>You are given a <strong>tree</strong> (i.e. a connected, undirected graph that has no cycles) <strong>rooted</strong> at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a <strong>0-indexed</strong> array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p>\n\n<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to node <code>i</code>.</p>\n\n<p>Return <em>the length of the <strong>longest path</strong> in the tree such that no pair of <strong>adjacent</strong> nodes on the path have the same character assigned to them.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/testingdrawio.png\" style=\"width: 201px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,1,1,2], s = &quot;abacbe&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -&gt; 1 -&gt; 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/graph2drawio.png\" style=\"width: 201px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> parent = [-1,0,0,0], s = &quot;aabc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest path where each two adjacent nodes have different characters is the path: 2 -&gt; 0 -&gt; 3. The length of this path is 3, so 3 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parent.length == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>parent</code> represents a valid tree.</li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": ["Do a DFS from the root. At each node, calculate the longest path we can make from two branches of that subtree.", "To do that, we need to find the length of the longest path from each of the node\u2019s children."], "exampleTestcases": "[-1,0,0,1,1,2]\n\"abacbe\"\n[-1,0,0,0]\n\"aabc\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPath(vector<int>& parent, string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestPath(int[] parent, String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestPath(self, parent, s):\n        \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int longestPath(int* parent, int parentSize, char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestPath(int[] parent, string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} parent\n * @param {string} s\n * @return {number}\n */\nvar longestPath = function(parent, s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestPath(parent: number[], s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $parent\n     * @param String $s\n     * @return Integer\n     */\n    function longestPath($parent, $s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestPath(_ parent: [Int], _ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestPath(parent: IntArray, s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int longestPath(List<int> parent, String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func longestPath(parent []int, s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} parent\n# @param {String} s\n# @return {Integer}\ndef longest_path(parent, s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestPath(parent: Array[Int], s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_path(parent: Vec<i32>, s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (longest-path parent s)\n  (-> (listof exact-integer?) string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec longest_path(Parent :: [integer()], S :: unicode:unicode_binary()) -> integer().\nlongest_path(Parent, S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_path(parent :: [integer], s :: String.t) :: integer\n  def longest_path(parent, s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "diameter-of-binary-tree", "title": "Diameter of Binary Tree", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-univalue-path", "title": "Longest Univalue Path", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "isPaidOnly": true}]}