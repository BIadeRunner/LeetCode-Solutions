{"question_id": "1120", "problem_slug": "flower-planting-with-no-adjacent", "problem_title": "Flower Planting With No Adjacent", "content": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.\n \nExample 1:\n\nInput: n = 3, paths = [[1,2],[2,3],[3,1]]\nOutput: [1,2,3]\nExplanation:\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].\n\nExample 2:\n\nInput: n = 4, paths = [[1,2],[3,4]]\nOutput: [1,2,1,2]\n\nExample 3:\n\nInput: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\nOutput: [1,2,3,4]\n\n \nConstraints:\n\n1 <= n <= 104\n0 <= paths.length <= 2 * 104\npaths[i].length == 2\n1 <= xi, yi <= n\nxi != yi\nEvery garden has at most 3 paths coming into or leaving it.\n\n", "hints": ["Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."], "exampleTestcases": "3\n[[1,2],[2,3],[3,1]]\n4\n[[1,2],[3,4]]\n4\n[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] gardenNoAdj(int n, int[][] paths) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def gardenNoAdj(self, n, paths):\n        \"\"\"\n        :type n: int\n        :type paths: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* gardenNoAdj(int n, int** paths, int pathsSize, int* pathsColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] GardenNoAdj(int n, int[][] paths) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} paths\n * @return {number[]}\n */\nvar gardenNoAdj = function(n, paths) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function gardenNoAdj(n: number, paths: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $paths\n     * @return Integer[]\n     */\n    function gardenNoAdj($n, $paths) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func gardenNoAdj(_ n: Int, _ paths: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun gardenNoAdj(n: Int, paths: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> gardenNoAdj(int n, List<List<int>> paths) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func gardenNoAdj(n int, paths [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} paths\n# @return {Integer[]}\ndef garden_no_adj(n, paths)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def gardenNoAdj(n: Int, paths: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn garden_no_adj(n: i32, paths: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (garden-no-adj n paths)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec garden_no_adj(N :: integer(), Paths :: [[integer()]]) -> [integer()].\ngarden_no_adj(N, Paths) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec garden_no_adj(n :: integer, paths :: [[integer]]) :: [integer]\n  def garden_no_adj(n, paths) do\n    \n  end\nend"}}}