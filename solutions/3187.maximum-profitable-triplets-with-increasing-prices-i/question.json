{"question_id": "3187", "problem_slug": "maximum-profitable-triplets-with-increasing-prices-i", "problem_title": "Maximum Profitable Triplets With Increasing Prices I", "content": "Given the 0-indexed arrays prices and profits of length n. There are n items in an store where the ith item has a price of prices[i] and a profit of profits[i].\nWe have to pick three items with the following condition:\n\nprices[i] < prices[j] < prices[k] where i < j < k.\n\nIf we pick items with indices i, j and k satisfying the above condition, the profit would be profits[i] + profits[j] + profits[k].\nReturn the maximum profit we can get, and -1 if it's not possible to pick three items with the given condition.\n \nExample 1:\n\nInput: prices = [10,2,3,4], profits = [100,2,7,10]\nOutput: 19\nExplanation: We can't pick the item with index i=0 since there are no indices j and k such that the condition holds.\nSo the only triplet we can pick, are the items with indices 1, 2 and 3 and it's a valid pick since prices[1] < prices[2] < prices[3].\nThe answer would be sum of their profits which is 2 + 7 + 10 = 19.\nExample 2:\n\nInput: prices = [1,2,3,4,5], profits = [1,5,3,4,6]\nOutput: 15\nExplanation: We can select any triplet of items since for each triplet of indices i, j and k such that i < j < k, the condition holds.\nTherefore the maximum profit we can get would be the 3 most profitable items which are indices 1, 3 and 4.\nThe answer would be sum of their profits which is 5 + 4 + 6 = 15.\nExample 3:\n\nInput: prices = [4,3,2,1], profits = [33,20,19,87]\nOutput: -1\nExplanation: We can't select any triplet of indices such that the condition holds, so we return -1.\n\n \nConstraints:\n\n3 <= prices.length == profits.length <= 2000\n1 <= prices[i] <= 106\n1 <= profits[i] <= 106\n\n", "hints": ["Let's fix the middle chosen item.", "For a fixed item with an index <code>j</code>, iterate over items with an index <code>k > j</code> such that <code>prices[k] > prices[j]</code>.", "Find the maximum <code>profit[k]</code> with the above condition. Let's call this maximum value <code>max_right</code>.", "Do the same for items with an index <code>i < j</code> such that <code>prices[i] < prices[j]</code> and find the maximum <code>profit[i]</code> among them. Let's call this maximum value <code>max_left</code>.", "Now the profit when an item with the index <code>j</code> is the middle one would be <code>profit[j] + max_right + max_left</code>.", "Finally, do the above procedure for all <code>j</code>'s and find the maximum profit among them. That would be the final answer."], "exampleTestcases": "[10,2,3,4]\n[100,2,7,10]\n[1,2,3,4,5]\n[1,5,3,4,6]\n[4,3,2,1]\n[33,20,19,87]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices, vector<int>& profits) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxProfit(int[] prices, int[] profits) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxProfit(self, prices, profits):\n        \"\"\"\n        :type prices: List[int]\n        :type profits: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxProfit(self, prices: List[int], profits: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxProfit(int* prices, int pricesSize, int* profits, int profitsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxProfit(int[] prices, int[] profits) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @param {number[]} profits\n * @return {number}\n */\nvar maxProfit = function(prices, profits) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxProfit(prices: number[], profits: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @param Integer[] $profits\n     * @return Integer\n     */\n    function maxProfit($prices, $profits) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxProfit(_ prices: [Int], _ profits: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxProfit(prices: IntArray, profits: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxProfit(List<int> prices, List<int> profits) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxProfit(prices []int, profits []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @param {Integer[]} profits\n# @return {Integer}\ndef max_profit(prices, profits)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxProfit(prices: Array[Int], profits: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>, profits: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-profit prices profits)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_profit(Prices :: [integer()], Profits :: [integer()]) -> integer().\nmax_profit(Prices, Profits) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_profit(prices :: [integer], profits :: [integer]) :: integer\n  def max_profit(prices, profits) do\n    \n  end\nend"}}}