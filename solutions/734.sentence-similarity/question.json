{"question_id": "734", "problem_slug": "sentence-similarity", "problem_title": "Sentence Similarity", "content": "We can represent a sentence as an array of words, for example, the sentence \"I am happy with leetcode\" can be represented as arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"].\nGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\nReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\nTwo sentences are similar if:\n\nThey have the same length (i.e., the same number of words)\nsentence1[i] and sentence2[i] are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words a and b are similar, and the words b and c are similar, a and c are not necessarily similar.\n \nExample 1:\n\nInput: sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]\nOutput: true\nExplanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n\nExample 2:\n\nInput: sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []\nOutput: true\nExplanation: A word is similar to itself.\n\nExample 3:\n\nInput: sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]\nOutput: false\nExplanation: As they don't have the same length, we return false.\n\n \nConstraints:\n\n1 <= sentence1.length, sentence2.length <= 1000\n1 <= sentence1[i].length, sentence2[i].length <= 20\nsentence1[i] and sentence2[i] consist of English letters.\n0 <= similarPairs.length <= 1000\nsimilarPairs[i].length == 2\n1 <= xi.length, yi.length <= 20\nxi and yi consist of lower-case and upper-case English letters.\nAll the pairs (xi, yi) are distinct.\n\n", "hints": ["Two words w1 and w2 are similar if and only if w1 == w2, (w1, w2) was a pair, or (w2, w1) was a pair."], "exampleTestcases": "[\"great\",\"acting\",\"skills\"]\n[\"fine\",\"drama\",\"talent\"]\n[[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]\n[\"great\"]\n[\"great\"]\n[]\n[\"great\"]\n[\"doubleplus\",\"good\"]\n[[\"great\",\"doubleplus\"]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areSentencesSimilar(vector<string>& sentence1, vector<string>& sentence2, vector<vector<string>>& similarPairs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean areSentencesSimilar(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def areSentencesSimilar(self, sentence1, sentence2, similarPairs):\n        \"\"\"\n        :type sentence1: List[str]\n        :type sentence2: List[str]\n        :type similarPairs: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def areSentencesSimilar(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool areSentencesSimilar(char** sentence1, int sentence1Size, char** sentence2, int sentence2Size, char*** similarPairs, int similarPairsSize, int* similarPairsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool AreSentencesSimilar(string[] sentence1, string[] sentence2, IList<IList<string>> similarPairs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} sentence1\n * @param {string[]} sentence2\n * @param {string[][]} similarPairs\n * @return {boolean}\n */\nvar areSentencesSimilar = function(sentence1, sentence2, similarPairs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function areSentencesSimilar(sentence1: string[], sentence2: string[], similarPairs: string[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $sentence1\n     * @param String[] $sentence2\n     * @param String[][] $similarPairs\n     * @return Boolean\n     */\n    function areSentencesSimilar($sentence1, $sentence2, $similarPairs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func areSentencesSimilar(_ sentence1: [String], _ sentence2: [String], _ similarPairs: [[String]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun areSentencesSimilar(sentence1: Array<String>, sentence2: Array<String>, similarPairs: List<List<String>>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool areSentencesSimilar(List<String> sentence1, List<String> sentence2, List<List<String>> similarPairs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func areSentencesSimilar(sentence1 []string, sentence2 []string, similarPairs [][]string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} sentence1\n# @param {String[]} sentence2\n# @param {String[][]} similar_pairs\n# @return {Boolean}\ndef are_sentences_similar(sentence1, sentence2, similar_pairs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def areSentencesSimilar(sentence1: Array[String], sentence2: Array[String], similarPairs: List[List[String]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn are_sentences_similar(sentence1: Vec<String>, sentence2: Vec<String>, similar_pairs: Vec<Vec<String>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (are-sentences-similar sentence1 sentence2 similarPairs)\n  (-> (listof string?) (listof string?) (listof (listof string?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec are_sentences_similar(Sentence1 :: [unicode:unicode_binary()], Sentence2 :: [unicode:unicode_binary()], SimilarPairs :: [[unicode:unicode_binary()]]) -> boolean().\nare_sentences_similar(Sentence1, Sentence2, SimilarPairs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_sentences_similar(sentence1 :: [String.t], sentence2 :: [String.t], similar_pairs :: [[String.t]]) :: boolean\n  def are_sentences_similar(sentence1, sentence2, similar_pairs) do\n    \n  end\nend"}}}