{"question_id": "1776", "problem_slug": "minimum-operations-to-reduce-x-to-zero", "problem_title": "Minimum Operations to Reduce X to Zero", "content": "You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.\nReturn the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.\n \nExample 1:\n\nInput: nums = [1,1,4,2,3], x = 5\nOutput: 2\nExplanation: The optimal solution is to remove the last two elements to reduce x to zero.\n\nExample 2:\n\nInput: nums = [5,6,7,8,9], x = 4\nOutput: -1\n\nExample 3:\n\nInput: nums = [3,2,20,1,1,3], x = 10\nOutput: 5\nExplanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n1 <= x <= 109\n\n", "hints": ["Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray.", "Finding the maximum subarray is standard and can be done greedily."], "exampleTestcases": "[1,1,4,2,3]\n5\n[5,6,7,8,9]\n4\n[3,2,20,1,1,3]\n10", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minOperations(int[] nums, int x) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minOperations(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minOperations(int* nums, int numsSize, int x) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinOperations(int[] nums, int x) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(nums, x) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minOperations(nums: number[], x: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function minOperations($nums, $x) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minOperations(_ nums: [Int], _ x: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minOperations(nums: IntArray, x: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minOperations(List<int> nums, int x) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minOperations(nums []int, x int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} x\n# @return {Integer}\ndef min_operations(nums, x)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minOperations(nums: Array[Int], x: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-operations nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_operations(Nums :: [integer()], X :: integer()) -> integer().\nmin_operations(Nums, X) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], x :: integer) :: integer\n  def min_operations(nums, x) do\n    \n  end\nend"}}}