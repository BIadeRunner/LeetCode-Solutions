{"question_id": "3156", "problem_slug": "rolling-average-steps", "problem_title": "Rolling Average Steps", "content": "Table: Steps\n\n+-------------+------+ \n| Column Name | Type | \n+-------------+------+ \n| user_id     | int  | \n| steps_count | int  |\n| steps_date  | date |\n+-------------+------+\n(user_id, steps_date) is the primary key for this table.\nEach row of this table contains user_id, steps_count, and steps_date.\n\nWrite a solution to calculate 3-day rolling averages of steps for each user.\nWe calculate the n-day rolling average this way:\n\nFor each day, we calculate the average of n consecutive days of step counts ending on that day if available, otherwise, n-day rolling average is not defined for it.\n\nOutput the user_id, steps_date, and rolling average. Round the rolling average to two decimal places.\nReturn the result table ordered by user_id, steps_date in ascending order.\nThe result format is in the following example.\nÂ \nExample 1:\n\nInput: \nSteps table:\n+---------+-------------+------------+\n| user_id | steps_count | steps_date |\n+---------+-------------+------------+\n| 1       | 687         | 2021-09-02 |\n| 1       | 395         | 2021-09-04 |\n| 1       | 499         | 2021-09-05 |\n| 1       | 712         | 2021-09-06 |\n| 1       | 576         | 2021-09-07 |\n| 2       | 153         | 2021-09-06 |\n| 2       | 171         | 2021-09-07 |\n| 2       | 530         | 2021-09-08 |\n| 3       | 945         | 2021-09-04 |\n| 3       | 120         | 2021-09-07 |\n| 3       | 557         | 2021-09-08 |\n| 3       | 840         | 2021-09-09 |\n| 3       | 627         | 2021-09-10 |\n| 5       | 382         | 2021-09-05 |\n| 6       | 480         | 2021-09-01 |\n| 6       | 191         | 2021-09-02 |\n| 6       | 303         | 2021-09-05 |\n+---------+-------------+------------+\nOutput: \n+---------+------------+-----------------+\n| user_id | steps_date | rolling_average | \n+---------+------------+-----------------+\n| 1       | 2021-09-06 | 535.33          | \n| 1       | 2021-09-07 | 595.67          | \n| 2       | 2021-09-08 | 284.67          |\n| 3       | 2021-09-09 | 505.67          |\n| 3       | 2021-09-10 | 674.67          |    \n+---------+------------+-----------------+\nExplanation: \n- For user id 1, the step counts for the three consecutive days up to 2021-09-06 are available. Consequently, the rolling average for this particular date is computed as (395 + 499 + 712) / 3 = 535.33.\n- For user id 1, the step counts for the three consecutive days up to 2021-09-07 are available. Consequently, the rolling average for this particular date is computed as (499 + 712 + 576) / 3 = 595.67.\n- For user id 2, the step counts for the three consecutive days up to 2021-09-08 are available. Consequently, the rolling average for this particular date is computed as (153 + 171 + 530) / 3 = 284.67.\n- For user id 3, the step counts for the three consecutive days up to 2021-09-09 are available. Consequently, the rolling average for this particular date is computed as (120 + 557 + 840) / 3 = 505.67.\n- For user id 3, the step counts for the three consecutive days up to 2021-09-10 are available. Consequently, the rolling average for this particular date is computed as (557 + 840 + 627) / 3 = 674.67.\n- For user id 4 and 5, the calculation of the rolling average is not viable as there is insufficient data for the consecutive three days. Output table ordered by user_id and steps_date in ascending order.\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Steps\": [\"user_id\", \"steps_count\", \"steps_date\"]}, \"rows\": {\"Steps\": [[1,687,\"2021-09-02\"],[1,395,\"2021-09-04\"],[1,499,\"2021-09-05\"],[1,712,\"2021-09-06\"],[1,576,\"2021-09-07\"],[2,153,\"2021-09-06\"],[2,171,\"2021-09-07\"],[2,530,\"2021-09-08\"],[3,945,\"2021-09-04\"],[3,120,\"2021-09-07\"],[3,557,\"2021-09-08\"],[3,840,\"2021-09-09\"],[3,627,\"2021-09-10\"],[5,382,\"2021-09-05\"],[6,480,\"2021-09-01\"],[6,191,\"2021-09-02\"],[6,303,\"2021-09-05\"]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef rolling_average(steps: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}