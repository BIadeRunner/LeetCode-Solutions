{"questionId": "2654", "acRate": 74.5028409090909, "difficulty": "Easy", "freqBar": 25.841481246225957, "frontendQuestionId": "2586", "paidOnly": false, "status": "ac", "title": "Count the Number of Vowel Strings in Range", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "count-the-number-of-vowel-strings-in-range", "content": "<p>You are given a <strong>0-indexed</strong> array of string <code>words</code> and two integers <code>left</code> and <code>right</code>.</p>\n\n<p>A string is called a <strong>vowel string</strong> if it starts with a vowel character and ends with a vowel character where vowel characters are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>.</p>\n\n<p>Return <em>the number of vowel strings </em><code>words[i]</code><em> where </em><code>i</code><em> belongs to the inclusive range </em><code>[left, right]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;are&quot;,&quot;amy&quot;,&quot;u&quot;], left = 0, right = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- &quot;are&quot; is a vowel string because it starts with &#39;a&#39; and ends with &#39;e&#39;.\n- &quot;amy&quot; is not a vowel string because it does not end with a vowel.\n- &quot;u&quot; is a vowel string because it starts with &#39;u&#39; and ends with &#39;u&#39;.\nThe number of vowel strings in the mentioned range is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hey&quot;,&quot;aeo&quot;,&quot;mu&quot;,&quot;ooo&quot;,&quot;artro&quot;], left = 1, right = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \n- &quot;aeo&quot; is a vowel string because it starts with &#39;a&#39; and ends with &#39;o&#39;.\n- &quot;mu&quot; is not a vowel string because it does not start with a vowel.\n- &quot;ooo&quot; is a vowel string because it starts with &#39;o&#39; and ends with &#39;o&#39;.\n- &quot;artro&quot; is a vowel string because it starts with &#39;a&#39; and ends with &#39;o&#39;.\nThe number of vowel strings in the mentioned range is 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n\t<li><code>0 &lt;= left &lt;= right &lt; words.length</code></li>\n</ul>\n", "hints": ["consider iterating over all strings from left to right and use an if condition to check if the first character and last character are vowels."], "exampleTestcases": "[\"are\",\"amy\",\"u\"]\n0\n2\n[\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"]\n1\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int vowelStrings(vector<string>& words, int left, int right) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int vowelStrings(String[] words, int left, int right) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def vowelStrings(self, words, left, right):\n        \"\"\"\n        :type words: List[str]\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int vowelStrings(char** words, int wordsSize, int left, int right) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int VowelStrings(string[] words, int left, int right) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar vowelStrings = function(words, left, right) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function vowelStrings(words: string[], left: number, right: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function vowelStrings($words, $left, $right) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func vowelStrings(_ words: [String], _ left: Int, _ right: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun vowelStrings(words: Array<String>, left: Int, right: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int vowelStrings(List<String> words, int left, int right) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func vowelStrings(words []string, left int, right int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef vowel_strings(words, left, right)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def vowelStrings(words: Array[String], left: Int, right: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn vowel_strings(words: Vec<String>, left: i32, right: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (vowel-strings words left right)\n  (-> (listof string?) exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec vowel_strings(Words :: [unicode:unicode_binary()], Left :: integer(), Right :: integer()) -> integer().\nvowel_strings(Words, Left, Right) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec vowel_strings(words :: [String.t], left :: integer, right :: integer) :: integer\n  def vowel_strings(words, left, right) do\n    \n  end\nend"}], "similarQuestionList": []}