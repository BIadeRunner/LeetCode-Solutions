{"question_id": "854", "problem_slug": "making-a-large-island", "problem_title": "Making A Large Island", "content": "You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.\n \nExample 1:\n\nInput: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n\nExample 2:\n\nInput: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\nExample 3:\n\nInput: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.\n\n \nConstraints:\n\nn == grid.length\nn == grid[i].length\n1 <= n <= 500\ngrid[i][j] is either 0 or 1.\n\n", "hints": [], "exampleTestcases": "[[1,0],[0,1]]\n[[1,1],[1,0]]\n[[1,1],[1,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestIsland(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int largestIsland(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestIsland(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint largestIsland(int** grid, int gridSize, int* gridColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestIsland(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar largestIsland = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestIsland(grid: number[][]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function largestIsland($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestIsland(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestIsland(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func largestIsland(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef largest_island(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestIsland(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_island(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-island grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_island(Grid :: [[integer()]]) -> integer().\nlargest_island(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_island(grid :: [[integer]]) :: integer\n  def largest_island(grid) do\n    \n  end\nend"}}}