{"question_id": "1366", "problem_slug": "first-unique-number", "problem_title": "First Unique Number", "content": "You have a queue of integers, you need to retrieve the first unique integer in the queue.\nImplement the FirstUnique class:\n\nFirstUnique(int[] nums) Initializes the object with the numbers in the queue.\nint showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.\nvoid add(int value) insert value to the queue.\n\n \nExample 1:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\nOutput: \n[null,2,null,2,null,3,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([2,3,5]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now [2,3,5,5]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);            // the queue is now [2,3,5,5,2]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);            // the queue is now [2,3,5,5,2,3]\nfirstUnique.showFirstUnique(); // return -1\n\nExample 2:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\nOutput: \n[null,-1,null,null,null,null,null,17]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]\nfirstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]\nfirstUnique.showFirstUnique(); // return 17\n\nExample 3:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[809]],[],[809],[]]\nOutput: \n[null,809,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([809]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now [809,809]\nfirstUnique.showFirstUnique(); // return -1\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^8\n1 <= value <= 10^8\nAt most 50000 calls will be made to showFirstUnique and add.\n\n", "hints": ["Use doubly Linked list with hashmap of pointers to linked list nodes. add unique number to the linked list. When add is called check if the added number is unique then it have to be added to the linked list and if it is repeated remove it from the linked list if exists. When showFirstUnique is called retrieve the head of the linked list.", "Use queue and check that first element of the queue is always unique.", "Use set or heap to make running time of each function O(logn)."], "exampleTestcases": "[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\r\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\r\n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]\r\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\r\n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\r\n[[[809]],[],[809],[]]\r", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class FirstUnique {\npublic:\n    FirstUnique(vector<int>& nums) {\n        \n    }\n    \n    int showFirstUnique() {\n        \n    }\n    \n    void add(int value) {\n        \n    }\n};\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * FirstUnique* obj = new FirstUnique(nums);\n * int param_1 = obj->showFirstUnique();\n * obj->add(value);\n */"}, "Java": {"langSlug": "java", "code": "class FirstUnique {\n\n    public FirstUnique(int[] nums) {\n        \n    }\n    \n    public int showFirstUnique() {\n        \n    }\n    \n    public void add(int value) {\n        \n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * FirstUnique obj = new FirstUnique(nums);\n * int param_1 = obj.showFirstUnique();\n * obj.add(value);\n */"}, "Python": {"langSlug": "python", "code": "class FirstUnique(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def showFirstUnique(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def add(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your FirstUnique object will be instantiated and called as such:\n# obj = FirstUnique(nums)\n# param_1 = obj.showFirstUnique()\n# obj.add(value)"}, "Python3": {"langSlug": "python3", "code": "class FirstUnique:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def showFirstUnique(self) -> int:\n        \n\n    def add(self, value: int) -> None:\n        \n\n\n# Your FirstUnique object will be instantiated and called as such:\n# obj = FirstUnique(nums)\n# param_1 = obj.showFirstUnique()\n# obj.add(value)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FirstUnique;\n\n\nFirstUnique* firstUniqueCreate(int* nums, int numsSize) {\n    \n}\n\nint firstUniqueShowFirstUnique(FirstUnique* obj) {\n  \n}\n\nvoid firstUniqueAdd(FirstUnique* obj, int value) {\n  \n}\n\nvoid firstUniqueFree(FirstUnique* obj) {\n    \n}\n\n/**\n * Your FirstUnique struct will be instantiated and called as such:\n * FirstUnique* obj = firstUniqueCreate(nums, numsSize);\n * int param_1 = firstUniqueShowFirstUnique(obj);\n \n * firstUniqueAdd(obj, value);\n \n * firstUniqueFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class FirstUnique {\n\n    public FirstUnique(int[] nums) {\n        \n    }\n    \n    public int ShowFirstUnique() {\n        \n    }\n    \n    public void Add(int value) {\n        \n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * FirstUnique obj = new FirstUnique(nums);\n * int param_1 = obj.ShowFirstUnique();\n * obj.Add(value);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n */\nvar FirstUnique = function(nums) {\n    \n};\n\n/**\n * @return {number}\n */\nFirstUnique.prototype.showFirstUnique = function() {\n    \n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nFirstUnique.prototype.add = function(value) {\n    \n};\n\n/** \n * Your FirstUnique object will be instantiated and called as such:\n * var obj = new FirstUnique(nums)\n * var param_1 = obj.showFirstUnique()\n * obj.add(value)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class FirstUnique {\n    constructor(nums: number[]) {\n\n    }\n\n    showFirstUnique(): number {\n\n    }\n\n    add(value: number): void {\n\n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * var obj = new FirstUnique(nums)\n * var param_1 = obj.showFirstUnique()\n * obj.add(value)\n */"}, "PHP": {"langSlug": "php", "code": "class FirstUnique {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function showFirstUnique() {\n        \n    }\n  \n    /**\n     * @param Integer $value\n     * @return NULL\n     */\n    function add($value) {\n        \n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * $obj = FirstUnique($nums);\n * $ret_1 = $obj->showFirstUnique();\n * $obj->add($value);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass FirstUnique {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func showFirstUnique() -> Int {\n        \n    }\n    \n    func add(_ value: Int) {\n        \n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * let obj = FirstUnique(nums)\n * let ret_1: Int = obj.showFirstUnique()\n * obj.add(value)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class FirstUnique(nums: IntArray) {\n\n    fun showFirstUnique(): Int {\n        \n    }\n\n    fun add(value: Int) {\n        \n    }\n\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * var obj = FirstUnique(nums)\n * var param_1 = obj.showFirstUnique()\n * obj.add(value)\n */"}, "Go": {"langSlug": "golang", "code": "type FirstUnique struct {\n    \n}\n\n\nfunc Constructor(nums []int) FirstUnique {\n    \n}\n\n\nfunc (this *FirstUnique) ShowFirstUnique() int {\n    \n}\n\n\nfunc (this *FirstUnique) Add(value int)  {\n    \n}\n\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.ShowFirstUnique();\n * obj.Add(value);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class FirstUnique\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def show_first_unique()\n        \n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Void\n=end\n    def add(value)\n        \n    end\n\n\nend\n\n# Your FirstUnique object will be instantiated and called as such:\n# obj = FirstUnique.new(nums)\n# param_1 = obj.show_first_unique()\n# obj.add(value)"}, "Scala": {"langSlug": "scala", "code": "class FirstUnique(_nums: Array[Int]) {\n\n    def showFirstUnique(): Int = {\n        \n    }\n\n    def add(value: Int) {\n        \n    }\n\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * var obj = new FirstUnique(nums)\n * var param_1 = obj.showFirstUnique()\n * obj.add(value)\n */"}, "Rust": {"langSlug": "rust", "code": "struct FirstUnique {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FirstUnique {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn show_first_unique(&self) -> i32 {\n        \n    }\n    \n    fn add(&self, value: i32) {\n        \n    }\n}\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * let obj = FirstUnique::new(nums);\n * let ret_1: i32 = obj.show_first_unique();\n * obj.add(value);\n */"}, "Racket": {"langSlug": "racket", "code": "(define first-unique%\n  (class object%\n    (super-new)\n\n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; show-first-unique : -> exact-integer?\n    (define/public (show-first-unique)\n\n      )\n    ; add : exact-integer? -> void?\n    (define/public (add value)\n\n      )))\n\n;; Your first-unique% object will be instantiated and called as such:\n;; (define obj (new first-unique% [nums nums]))\n;; (define param_1 (send obj show-first-unique))\n;; (send obj add value)"}}}