{"question_id": "2610", "problem_slug": "closest-prime-numbers-in-range", "problem_title": "Closest Prime Numbers in Range", "content": "Given two positive integers left and right, find the two integers num1 and num2 such that:\n\nleft <= num1 < num2 <= right .\nnum1 and num2 are both prime numbers.\nnum2 - num1 is the minimum amongst all other pairs satisfying the above conditions.\n\nReturn the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the minimum num1 value or [-1, -1] if such numbers do not exist.\nA number greater than 1 is called prime if it is only divisible by 1 and itself.\n \nExample 1:\n\nInput: left = 10, right = 19\nOutput: [11,13]\nExplanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair.\n\nExample 2:\n\nInput: left = 4, right = 6\nOutput: [-1,-1]\nExplanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.\n\n \nConstraints:\n\n1 <= left <= right <= 106\n\n \n\n", "hints": ["Use Sieve of Eratosthenes to mark numbers that are primes.", "Iterate from right to left and find pair with the minimum distance between marked numbers."], "exampleTestcases": "10\n19\n4\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> closestPrimes(int left, int right) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] closestPrimes(int left, int right) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def closestPrimes(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def closestPrimes(self, left: int, right: int) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* closestPrimes(int left, int right, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] ClosestPrimes(int left, int right) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar closestPrimes = function(left, right) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function closestPrimes(left: number, right: number): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer[]\n     */\n    function closestPrimes($left, $right) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func closestPrimes(_ left: Int, _ right: Int) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun closestPrimes(left: Int, right: Int): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> closestPrimes(int left, int right) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func closestPrimes(left int, right int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} left\n# @param {Integer} right\n# @return {Integer[]}\ndef closest_primes(left, right)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def closestPrimes(left: Int, right: Int): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn closest_primes(left: i32, right: i32) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (closest-primes left right)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec closest_primes(Left :: integer(), Right :: integer()) -> [integer()].\nclosest_primes(Left, Right) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec closest_primes(left :: integer, right :: integer) :: [integer]\n  def closest_primes(left, right) do\n    \n  end\nend"}}}