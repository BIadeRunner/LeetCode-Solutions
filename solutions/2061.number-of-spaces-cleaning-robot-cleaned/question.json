{"questionId": "2203", "acRate": 62.54767353165522, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2061", "paidOnly": true, "status": "ac", "title": "Number of Spaces Cleaning Robot Cleaned", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "number-of-spaces-cleaning-robot-cleaned", "content": "<p>A room is represented by a <strong>0-indexed</strong> 2D binary matrix <code>room</code> where a <code>0</code> represents an <strong>empty</strong> space and a <code>1</code> represents a space with an <strong>object</strong>. The top left corner of the room will be empty in all test cases.</p>\n\n<p>A cleaning robot starts at the top left corner of the room and is facing right. The robot will continue heading straight until it reaches the edge of the room or it hits an object, after which it will turn 90 degrees <strong>clockwise</strong> and repeat this process. The starting space and all spaces that the robot visits are <strong>cleaned</strong> by it.</p>\n\n<p>Return <em>the number of <strong>clean</strong> spaces in the room if the robot runs indefinitely.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2021/11/01/image-20211101204703-1.png\" style=\"width: 250px; height: 242px;\" />\n<p>&nbsp;</p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">room = [[0,0,0],[1,1,0],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ol>\n\t<li>\u200b\u200b\u200b\u200b\u200b\u200b\u200bThe robot cleans the spaces at (0, 0), (0, 1), and (0, 2).</li>\n\t<li>The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces down.</li>\n\t<li>The robot cleans the spaces at (1, 2), and (2, 2).</li>\n\t<li>The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces left.</li>\n\t<li>The robot cleans the spaces at (2, 1), and (2, 0).</li>\n\t<li>The robot has cleaned all 7 empty spaces, so return 7.</li>\n</ol>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2021/11/01/image-20211101204736-2.png\" style=\"width: 250px; height: 245px;\" />\n<p>&nbsp;</p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">room = [[0,1,0],[1,0,0],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ol>\n\t<li>The robot cleans the space at (0, 0).</li>\n\t<li>The robot hits an object, so it turns 90 degrees clockwise and now faces down.</li>\n\t<li>The robot hits an object, so it turns 90 degrees clockwise and now faces left.</li>\n\t<li>The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces up.</li>\n\t<li>The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces right.</li>\n\t<li>The robot is back at its starting position.</li>\n\t<li>The robot has cleaned 1 space, so return 1.</li>\n</ol>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">room = [[0,0,0],[0,0,0],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span>\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p>\n\n<p>&nbsp;</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == room.length</code></li>\n\t<li><code>n == room[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>room[r][c]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>room[0][0] == 0</code></li>\n</ul>\n", "hints": ["Simulate how the robot moves and keep track of how many spaces it has cleaned so far.", "When can we stop the simulation?", "When the robot reaches a space that it has already cleaned and is facing the same direction as before, we can stop the simulation."], "exampleTestcases": "[[0,0,0],[1,1,0],[0,0,0]]\n[[0,1,0],[1,0,0],[0,0,0]]\n[[0,0,0],[0,0,0],[0,0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfCleanRooms(vector<vector<int>>& room) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfCleanRooms(int[][] room) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfCleanRooms(self, room):\n        \"\"\"\n        :type room: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfCleanRooms(self, room: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfCleanRooms(int** room, int roomSize, int* roomColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfCleanRooms(int[][] room) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} room\n * @return {number}\n */\nvar numberOfCleanRooms = function(room) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfCleanRooms(room: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $room\n     * @return Integer\n     */\n    function numberOfCleanRooms($room) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfCleanRooms(_ room: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfCleanRooms(room: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfCleanRooms(List<List<int>> room) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfCleanRooms(room [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} room\n# @return {Integer}\ndef number_of_clean_rooms(room)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfCleanRooms(room: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_clean_rooms(room: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-clean-rooms room)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_clean_rooms(Room :: [[integer()]]) -> integer().\nnumber_of_clean_rooms(Room) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_clean_rooms(room :: [[integer]]) :: integer\n  def number_of_clean_rooms(room) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "robot-room-cleaner", "title": "Robot Room Cleaner", "isPaidOnly": true}]}