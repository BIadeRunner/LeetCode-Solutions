{"question_id": "875", "problem_slug": "longest-mountain-in-array", "problem_title": "Longest Mountain in Array", "content": "You may recall that an array arr is a mountain array if and only if:\n\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n \nExample 1:\n\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\nExample 2:\n\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\n \nConstraints:\n\n1 <= arr.length <= 104\n0 <= arr[i] <= 104\n\n \nFollow up:\n\nCan you solve it using only one pass?\nCan you solve it in O(1) space?\n\n", "hints": [], "exampleTestcases": "[2,1,4,7,3,2,5]\n[2,2,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestMountain(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestMountain(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestMountain(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestMountain(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestMountain(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar longestMountain = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestMountain(arr: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function longestMountain($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestMountain(_ arr: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestMountain(arr: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestMountain(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestMountain(arr []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef longest_mountain(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestMountain(arr: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_mountain(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-mountain arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_mountain(Arr :: [integer()]) -> integer().\nlongest_mountain(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_mountain(arr :: [integer]) :: integer\n  def longest_mountain(arr) do\n    \n  end\nend"}}}