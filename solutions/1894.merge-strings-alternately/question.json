{"questionId": "1894", "acRate": 80.94699910707372, "difficulty": "Easy", "freqBar": 94.86787664962917, "frontendQuestionId": "1768", "paidOnly": false, "status": "ac", "title": "Merge Strings Alternately", "topicTags": [{"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "merge-strings-alternately", "content": "<p>You are given two strings <code>word1</code> and <code>word2</code>. Merge the strings by adding letters in alternating order, starting with <code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p>\r\n\r\n<p>Return <em>the merged string.</em></p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;abc&quot;, word2 = &quot;pqr&quot;\r\n<strong>Output:</strong> &quot;apbqcr&quot;\r\n<strong>Explanation:</strong>&nbsp;The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;ab&quot;, word2 = &quot;pqrs&quot;\r\n<strong>Output:</strong> &quot;apbqrs&quot;\r\n<strong>Explanation:</strong>&nbsp;Notice that as word2 is longer, &quot;rs&quot; is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;abcd&quot;, word2 = &quot;pq&quot;\r\n<strong>Output:</strong> &quot;apbqcd&quot;\r\n<strong>Explanation:</strong>&nbsp;Notice that as word1 is longer, &quot;cd&quot; is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li>\r\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\r\n</ul>", "hints": ["Use two pointers, one pointer for each string. Alternately choose the character from each pointer, and move the pointer upwards."], "exampleTestcases": "\"abc\"\n\"pqr\"\n\"ab\"\n\"pqrs\"\n\"abcd\"\n\"pq\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String mergeAlternately(String word1, String word2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mergeAlternately(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * mergeAlternately(char * word1, char * word2){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MergeAlternately(string word1, string word2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {string}\n */\nvar mergeAlternately = function(word1, word2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mergeAlternately(word1: string, word2: string): string {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return String\n     */\n    function mergeAlternately($word1, $word2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mergeAlternately(_ word1: String, _ word2: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mergeAlternately(word1: String, word2: String): String {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mergeAlternately(word1 string, word2 string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {String}\ndef merge_alternately(word1, word2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mergeAlternately(word1: String, word2: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn merge_alternately(word1: String, word2: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (merge-alternately word1 word2)\n  (-> string? string? string?)\n\n  )"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "zigzag-iterator", "title": "Zigzag Iterator", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "minimum-additions-to-make-valid-string", "title": "Minimum Additions to Make Valid String", "isPaidOnly": false}]}