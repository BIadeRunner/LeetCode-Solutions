{"question_id": "1894", "problem_slug": "merge-strings-alternately", "problem_title": "Merge Strings Alternately", "content": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.\n \nExample 1:\n\r\nInput: word1 = \"abc\", word2 = \"pqr\"\r\nOutput: \"apbqcr\"\r\nExplanation: The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n\nExample 2:\n\r\nInput: word1 = \"ab\", word2 = \"pqrs\"\r\nOutput: \"apbqrs\"\r\nExplanation: Notice that as word2 is longer, \"rs\" is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n\nExample 3:\n\r\nInput: word1 = \"abcd\", word2 = \"pq\"\r\nOutput: \"apbqcd\"\r\nExplanation: Notice that as word1 is longer, \"cd\" is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n\n \nConstraints:\n\n1 <= word1.length, word2.length <= 100\nword1 and word2 consist of lowercase English letters.\n", "hints": ["Use two pointers, one pointer for each string. Alternately choose the character from each pointer, and move the pointer upwards."], "exampleTestcases": "\"abc\"\n\"pqr\"\n\"ab\"\n\"pqrs\"\n\"abcd\"\n\"pq\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String mergeAlternately(String word1, String word2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mergeAlternately(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "\n\nchar * mergeAlternately(char * word1, char * word2){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string MergeAlternately(string word1, string word2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {string}\n */\nvar mergeAlternately = function(word1, word2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mergeAlternately(word1: string, word2: string): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return String\n     */\n    function mergeAlternately($word1, $word2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mergeAlternately(_ word1: String, _ word2: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mergeAlternately(word1: String, word2: String): String {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func mergeAlternately(word1 string, word2 string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {String}\ndef merge_alternately(word1, word2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mergeAlternately(word1: String, word2: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn merge_alternately(word1: String, word2: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (merge-alternately word1 word2)\n  (-> string? string? string?)\n\n  )"}}}