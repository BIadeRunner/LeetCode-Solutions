{"questionId": "255", "acRate": 50.291092274742844, "difficulty": "Medium", "freqBar": 47.52871243745737, "frontendQuestionId": "255", "paidOnly": true, "status": "ac", "title": "Verify Preorder Sequence in Binary Search Tree", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Binary Search Tree", "id": "VG9waWNUYWdOb2RlOjMw", "slug": "binary-search-tree"}, {"name": "Recursion", "id": "VG9waWNUYWdOb2RlOjMx", "slug": "recursion"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}, {"name": "Binary Tree", "id": "VG9waWNUYWdOb2RlOjYxMDU3", "slug": "binary-tree"}], "titleSlug": "verify-preorder-sequence-in-binary-search-tree", "content": "<p>Given an array of <strong>unique</strong> integers <code>preorder</code>, return <code>true</code> <em>if it is the correct preorder traversal sequence of a binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/preorder-tree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> preorder = [5,2,1,3,6]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [5,2,6,1,3]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= preorder[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All the elements of <code>preorder</code> are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it using only constant space complexity?</p>\n", "hints": [], "exampleTestcases": "[5,2,1,3,6]\n[5,2,6,1,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool verifyPreorder(vector<int>& preorder) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean verifyPreorder(int[] preorder) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def verifyPreorder(self, preorder):\n        \"\"\"\n        :type preorder: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def verifyPreorder(self, preorder: List[int]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool verifyPreorder(int* preorder, int preorderSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool VerifyPreorder(int[] preorder) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} preorder\n * @return {boolean}\n */\nvar verifyPreorder = function(preorder) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function verifyPreorder(preorder: number[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $preorder\n     * @return Boolean\n     */\n    function verifyPreorder($preorder) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func verifyPreorder(_ preorder: [Int]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun verifyPreorder(preorder: IntArray): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool verifyPreorder(List<int> preorder) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func verifyPreorder(preorder []int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} preorder\n# @return {Boolean}\ndef verify_preorder(preorder)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def verifyPreorder(preorder: Array[Int]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn verify_preorder(preorder: Vec<i32>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (verify-preorder preorder)\n  (-> (listof exact-integer?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec verify_preorder(Preorder :: [integer()]) -> boolean().\nverify_preorder(Preorder) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec verify_preorder(preorder :: [integer]) :: boolean\n  def verify_preorder(preorder) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "binary-tree-preorder-traversal", "title": "Binary Tree Preorder Traversal", "isPaidOnly": false}]}