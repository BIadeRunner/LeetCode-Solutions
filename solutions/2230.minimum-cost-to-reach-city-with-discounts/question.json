{"question_id": "2230", "problem_slug": "minimum-cost-to-reach-city-with-discounts", "problem_title": "Minimum Cost to Reach City With Discounts", "content": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer discounts which represents the number of discounts you have. You can use a discount to travel across the ith highway for a cost of tolli / 2 (integer division). Each discount may only be used once, and you can only use at most one discount per highway.\nReturn the minimum total cost to go from city 0 to city n - 1, or -1 if it is not possible to go from city 0 to city n - 1.\n \nExample 1:\n\n\nInput: n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1\nOutput: 9\nExplanation:\nGo from 0 to 1 for a cost of 4.\nGo from 1 to 4 and use a discount for a cost of 11 / 2 = 5.\nThe minimum cost to go from 0 to 4 is 4 + 5 = 9.\n\nExample 2:\n\n\nInput: n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20\nOutput: 8\nExplanation:\nGo from 0 to 1 and use a discount for a cost of 6 / 2 = 3.\nGo from 1 to 2 and use a discount for a cost of 7 / 2 = 3.\nGo from 2 to 3 and use a discount for a cost of 5 / 2 = 2.\nThe minimum cost to go from 0 to 3 is 3 + 3 + 2 = 8.\n\nExample 3:\n\n\nInput: n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0\nOutput: -1\nExplanation:\nIt is impossible to go from 0 to 3 so return -1.\n\n \nConstraints:\n\n2 <= n <= 1000\n1 <= highways.length <= 1000\nhighways[i].length == 3\n0 <= city1i, city2i <= n - 1\ncity1i != city2i\n0 <= tolli <= 105\n0 <= discounts <= 500\nThere are no duplicate highways.\n\n", "hints": ["Try to construct a graph out of highways. What type of graph is this?", "We essentially need to find the minimum distance to get from node 0 to node n - 1 in an undirected weighted graph. What algorithm should we use to do this?", "Use Dijkstra's algorithm to find the minimum weight path. Keep track of the minimum distance to each vertex with d discounts left"], "exampleTestcases": "5\n[[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]]\n1\n4\n[[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]]\n20\n4\n[[0,1,3],[2,3,2]]\n0", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(int n, vector<vector<int>>& highways, int discounts) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumCost(int n, int[][] highways, int discounts) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, n, highways, discounts):\n        \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type discounts: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumCost(int n, int** highways, int highwaysSize, int* highwaysColSize, int discounts) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(int n, int[][] highways, int discounts) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} highways\n * @param {number} discounts\n * @return {number}\n */\nvar minimumCost = function(n, highways, discounts) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumCost(n: number, highways: number[][], discounts: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $highways\n     * @param Integer $discounts\n     * @return Integer\n     */\n    function minimumCost($n, $highways, $discounts) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ n: Int, _ highways: [[Int]], _ discounts: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(n: Int, highways: Array<IntArray>, discounts: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumCost(int n, List<List<int>> highways, int discounts) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumCost(n int, highways [][]int, discounts int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} highways\n# @param {Integer} discounts\n# @return {Integer}\ndef minimum_cost(n, highways, discounts)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumCost(n: Int, highways: Array[Array[Int]], discounts: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(n: i32, highways: Vec<Vec<i32>>, discounts: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-cost n highways discounts)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_cost(N :: integer(), Highways :: [[integer()]], Discounts :: integer()) -> integer().\nminimum_cost(N, Highways, Discounts) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, highways :: [[integer]], discounts :: integer) :: integer\n  def minimum_cost(n, highways, discounts) do\n    \n  end\nend"}}}