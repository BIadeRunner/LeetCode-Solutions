{"question_id": "1137", "problem_slug": "height-checker", "problem_title": "Height Checker", "content": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.\nYou are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).\nReturn the number of indices where heights[i] != expected[i].\n \nExample 1:\n\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nheights:  [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match.\n\nExample 2:\n\nInput: heights = [5,1,2,3,4]\nOutput: 5\nExplanation:\nheights:  [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match.\n\nExample 3:\n\nInput: heights = [1,2,3,4,5]\nOutput: 0\nExplanation:\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.\n\n \nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n", "hints": ["Build the correct order of heights by sorting another array, then compare the two arrays."], "exampleTestcases": "[1,1,4,2,1,3]\n[5,1,2,3,4]\n[1,2,3,4,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int heightChecker(vector<int>& heights) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int heightChecker(int[] heights) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def heightChecker(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int heightChecker(int* heights, int heightsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int HeightChecker(int[] heights) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function heightChecker(heights: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function heightChecker($heights) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func heightChecker(_ heights: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun heightChecker(heights: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int heightChecker(List<int> heights) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func heightChecker(heights []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef height_checker(heights)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def heightChecker(heights: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn height_checker(heights: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (height-checker heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec height_checker(Heights :: [integer()]) -> integer().\nheight_checker(Heights) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec height_checker(heights :: [integer]) :: integer\n  def height_checker(heights) do\n    \n  end\nend"}}}