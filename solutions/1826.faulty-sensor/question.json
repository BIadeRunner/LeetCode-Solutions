{"questionId": "1980", "acRate": 50.37781212433453, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1826", "paidOnly": true, "status": "ac", "title": "Faulty Sensor", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}], "titleSlug": "faulty-sensor", "content": "<p>An experiment is being conducted in a lab. To ensure accuracy, there are<strong> two </strong>sensors collecting data simultaneously. You are given two arrays <code>sensor1</code> and <code>sensor2</code>, where <code>sensor1[i]</code> and <code>sensor2[i]</code> are the <code>i<sup>th</sup></code> data points collected by the two sensors.</p>\n\n<p>However, this type of sensor has a chance of being defective, which causes <strong>exactly one</strong> data point to be dropped. After the data is dropped, all the data points to the <strong>right</strong> of the dropped data are <strong>shifted</strong> one place to the left, and the last data point is replaced with some <strong>random value</strong>. It is guaranteed that this random value will <strong>not</strong> be equal to the dropped value.</p>\n\n<ul>\n\t<li>For example, if the correct data is <code>[1,2,<u><strong>3</strong></u>,4,5]</code> and <code>3</code> is dropped, the sensor could return <code>[1,2,4,5,<u><strong>7</strong></u>]</code> (the last position can be <strong>any</strong> value, not just <code>7</code>).</li>\n</ul>\n\n<p>We know that there is a defect in <strong>at most one</strong> of the sensors. Return <em>the sensor number (</em><code>1</code><em> or </em><code>2</code><em>) with the defect. If there is <strong>no defect</strong> in either sensor or if it is<strong> impossible</strong> to determine the defective sensor, return </em><code>-1</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sensor1 = [2,3,4,5], sensor2 = [2,1,3,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Sensor 2 has the correct values.\nThe second data point from sensor 2 is dropped, and the last value of sensor 1 is replaced by a 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sensor1 = [2,2,2,2,2], sensor2 = [2,2,2,2,5]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to determine which sensor has a defect.\nDropping the last value for either sensor could produce the output for the other sensor.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sensor1 = [2,3,2,2,3,2], sensor2 = [2,3,2,3,2,7]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Sensor 1 has the correct values.\nThe fourth data point from sensor 1 is dropped, and the last value of sensor 1 is replaced by a 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>sensor1.length == sensor2.length</code></li>\n\t<li><code>1 &lt;= sensor1.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= sensor1[i], sensor2[i] &lt;= 100</code></li>\n</ul>\n", "hints": ["Check for a common prefix of the two arrays.", "After this common prefix, there should be one array similar to the other but shifted by one.", "If both arrays can be shifted, return -1."], "exampleTestcases": "[2,3,4,5]\n[2,1,3,4]\n[2,2,2,2,2]\n[2,2,2,2,5]\n[2,3,2,2,3,2]\n[2,3,2,3,2,7]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int badSensor(vector<int>& sensor1, vector<int>& sensor2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int badSensor(int[] sensor1, int[] sensor2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def badSensor(self, sensor1, sensor2):\n        \"\"\"\n        :type sensor1: List[int]\n        :type sensor2: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int badSensor(int* sensor1, int sensor1Size, int* sensor2, int sensor2Size) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BadSensor(int[] sensor1, int[] sensor2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} sensor1\n * @param {number[]} sensor2\n * @return {number}\n */\nvar badSensor = function(sensor1, sensor2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function badSensor(sensor1: number[], sensor2: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $sensor1\n     * @param Integer[] $sensor2\n     * @return Integer\n     */\n    function badSensor($sensor1, $sensor2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func badSensor(_ sensor1: [Int], _ sensor2: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun badSensor(sensor1: IntArray, sensor2: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int badSensor(List<int> sensor1, List<int> sensor2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func badSensor(sensor1 []int, sensor2 []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} sensor1\n# @param {Integer[]} sensor2\n# @return {Integer}\ndef bad_sensor(sensor1, sensor2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def badSensor(sensor1: Array[Int], sensor2: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn bad_sensor(sensor1: Vec<i32>, sensor2: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (bad-sensor sensor1 sensor2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec bad_sensor(Sensor1 :: [integer()], Sensor2 :: [integer()]) -> integer().\nbad_sensor(Sensor1, Sensor2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec bad_sensor(sensor1 :: [integer], sensor2 :: [integer]) :: integer\n  def bad_sensor(sensor1, sensor2) do\n    \n  end\nend"}], "similarQuestionList": []}