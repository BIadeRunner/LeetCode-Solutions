{"questionId": "837", "acRate": 44.35356318696213, "difficulty": "Easy", "freqBar": 43.29947761477257, "frontendQuestionId": "819", "paidOnly": false, "status": "ac", "title": "Most Common Word", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "most-common-word", "content": "<p>Given a string <code>paragraph</code> and a string array of the banned words <code>banned</code>, return <em>the most frequent word that is not banned</em>. It is <strong>guaranteed</strong> there is <strong>at least one word</strong> that is not banned, and that the answer is <strong>unique</strong>.</p>\n\n<p>The words in <code>paragraph</code> are <strong>case-insensitive</strong> and the answer should be returned in <strong>lowercase</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> paragraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;, banned = [&quot;hit&quot;]\n<strong>Output:</strong> &quot;ball&quot;\n<strong>Explanation:</strong> \n&quot;hit&quot; occurs 3 times, but it is a banned word.\n&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), \nand that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> paragraph = &quot;a.&quot;, banned = []\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paragraph.length &lt;= 1000</code></li>\n\t<li>paragraph consists of English letters, space <code>&#39; &#39;</code>, or one of the symbols: <code>&quot;!?&#39;,;.&quot;</code>.</li>\n\t<li><code>0 &lt;= banned.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= banned[i].length &lt;= 10</code></li>\n\t<li><code>banned[i]</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": [], "exampleTestcases": "\"Bob hit a ball, the hit BALL flew far after it was hit.\"\n[\"hit\"]\n\"a.\"\n[]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string mostCommonWord(string paragraph, vector<string>& banned) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String mostCommonWord(String paragraph, String[] banned) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mostCommonWord(self, paragraph, banned):\n        \"\"\"\n        :type paragraph: str\n        :type banned: List[str]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* mostCommonWord(char* paragraph, char** banned, int bannedSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MostCommonWord(string paragraph, string[] banned) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} paragraph\n * @param {string[]} banned\n * @return {string}\n */\nvar mostCommonWord = function(paragraph, banned) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mostCommonWord(paragraph: string, banned: string[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $paragraph\n     * @param String[] $banned\n     * @return String\n     */\n    function mostCommonWord($paragraph, $banned) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mostCommonWord(_ paragraph: String, _ banned: [String]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mostCommonWord(paragraph: String, banned: Array<String>): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String mostCommonWord(String paragraph, List<String> banned) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mostCommonWord(paragraph string, banned []string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} paragraph\n# @param {String[]} banned\n# @return {String}\ndef most_common_word(paragraph, banned)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mostCommonWord(paragraph: String, banned: Array[String]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn most_common_word(paragraph: String, banned: Vec<String>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (most-common-word paragraph banned)\n  (-> string? (listof string?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec most_common_word(Paragraph :: unicode:unicode_binary(), Banned :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nmost_common_word(Paragraph, Banned) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_common_word(paragraph :: String.t, banned :: [String.t]) :: String.t\n  def most_common_word(paragraph, banned) do\n    \n  end\nend"}], "similarQuestionList": []}