{"question_id": "2536", "problem_slug": "determine-if-two-events-have-conflict", "problem_title": "Determine if Two Events Have Conflict", "content": "You are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:\n\nevent1 = [startTime1, endTime1] and\nevent2 = [startTime2, endTime2].\n\nEvent times are valid 24 hours format in the form of HH:MM.\nA conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).\nReturn true if there is a conflict between two events. Otherwise, return false.\n \nExample 1:\n\nInput: event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect at time 2:00.\n\nExample 2:\n\nInput: event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect starting from 01:20 to 02:00.\n\nExample 3:\n\nInput: event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]\nOutput: false\nExplanation: The two events do not intersect.\n\n \nConstraints:\n\nevent1.length == event2.length == 2\nevent1[i].length == event2[i].length == 5\nstartTime1 <= endTime1\nstartTime2 <= endTime2\nAll the event times follow the HH:MM format.\n\n", "hints": ["Parse time format to some integer interval first", "How would you determine if two intervals overlap?"], "exampleTestcases": "[\"01:15\",\"02:00\"]\n[\"02:00\",\"03:00\"]\n[\"01:00\",\"02:00\"]\n[\"01:20\",\"03:00\"]\n[\"10:00\",\"11:00\"]\n[\"14:00\",\"15:00\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool haveConflict(vector<string>& event1, vector<string>& event2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean haveConflict(String[] event1, String[] event2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def haveConflict(self, event1, event2):\n        \"\"\"\n        :type event1: List[str]\n        :type event2: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool haveConflict(char** event1, int event1Size, char** event2, int event2Size) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool HaveConflict(string[] event1, string[] event2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} event1\n * @param {string[]} event2\n * @return {boolean}\n */\nvar haveConflict = function(event1, event2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function haveConflict(event1: string[], event2: string[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $event1\n     * @param String[] $event2\n     * @return Boolean\n     */\n    function haveConflict($event1, $event2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func haveConflict(_ event1: [String], _ event2: [String]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun haveConflict(event1: Array<String>, event2: Array<String>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool haveConflict(List<String> event1, List<String> event2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func haveConflict(event1 []string, event2 []string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} event1\n# @param {String[]} event2\n# @return {Boolean}\ndef have_conflict(event1, event2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def haveConflict(event1: Array[String], event2: Array[String]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn have_conflict(event1: Vec<String>, event2: Vec<String>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (have-conflict event1 event2)\n  (-> (listof string?) (listof string?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec have_conflict(Event1 :: [unicode:unicode_binary()], Event2 :: [unicode:unicode_binary()]) -> boolean().\nhave_conflict(Event1, Event2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec have_conflict(event1 :: [String.t], event2 :: [String.t]) :: boolean\n  def have_conflict(event1, event2) do\n    \n  end\nend"}}}