{"questionId": "3101", "acRate": 71.03064066852369, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2838", "paidOnly": true, "status": "ac", "title": "Maximum Coins Heroes Can Collect", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "maximum-coins-heroes-can-collect", "content": "<p>There is a battle and <code>n</code> heroes are trying to defeat <code>m</code> monsters. You are given two <strong>1-indexed</strong> arrays of <strong>positive</strong> integers <code><font face=\"monospace\">heroes</font></code> and <code><font face=\"monospace\">monsters</font></code> of length <code>n</code> and <code>m</code>, respectively. <code><font face=\"monospace\">heroes</font>[i]</code> is the power of <code>i<sup>th</sup></code> hero, and <code><font face=\"monospace\">monsters</font>[i]</code> is the power of <code>i<sup>th</sup></code> monster.</p>\n\n<p>The <code>i<sup>th</sup></code> hero can defeat the <code>j<sup>th</sup></code> monster if <code>monsters[j] &lt;= heroes[i]</code>.</p>\n\n<p>You are also given a <strong>1-indexed</strong> array <code>coins</code> of length <code>m</code> consisting of <strong>positive</strong> integers. <code>coins[i]</code> is the number of coins that each hero earns after defeating the <code>i<sup>th</sup></code> monster.</p>\n\n<p>Return<em> an array </em><code>ans</code><em> of length </em><code>n</code><em> where </em><code>ans[i]</code><em> is the <strong>maximum</strong> number of coins that the </em><code>i<sup>th</sup></code><em> hero can collect from this battle</em>.</p>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n\t<li>The health of a hero doesn&#39;t get reduced after defeating a monster.</li>\n\t<li>Multiple heroes can defeat a monster, but each monster can be defeated by a given hero only once.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> heroes = [1,4,2], monsters = [1,1,5,2,3], coins = [2,3,4,5,6]\n<strong>Output:</strong> [5,16,10]\n<strong>Explanation: </strong>For each hero, we list the index of all the monsters he can defeat:\n1<sup>st</sup> hero: [1,2] since the power of this hero is 1 and monsters[1], monsters[2] &lt;= 1. So this hero collects coins[1] + coins[2] = 5 coins.\n2<sup>nd</sup> hero: [1,2,4,5] since the power of this hero is 4 and monsters[1], monsters[2], monsters[4], monsters[5] &lt;= 4. So this hero collects coins[1] + coins[2] + coins[4] + coins[5] = 16 coins.\n3<sup>rd</sup> hero: [1,2,4] since the power of this hero is 2 and monsters[1], monsters[2], monsters[4] &lt;= 2. So this hero collects coins[1] + coins[2] + coins[4] = 10 coins.\nSo the answer would be [5,16,10].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heroes = [5], monsters = [2,3,1,2], coins = [10,6,5,2]\n<strong>Output:</strong> [23]\n<strong>Explanation:</strong> This hero can defeat all the monsters since monsters[i] &lt;= 5. So he collects all of the coins: coins[1] + coins[2] + coins[3] + coins[4] = 23, and the answer would be [23].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> heroes = [4,4], monsters = [5,7,8], coins = [1,1,1]\n<strong>Output:</strong> [0,0]\n<strong>Explanation:</strong> In this example, no hero can defeat a monster. So the answer would be [0,0],\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == heroes.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m == monsters.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>coins.length == m</code></li>\n\t<li><code>1 &lt;= heroes[i], monsters[i], coins[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["If a hero can defeat the <code>i<sup>th</sup></code> monster, then he defeats all the monsters having a power less than <code>monster[i]</code>.", "Sort monsters by their powers. Also change the order of the coins array according to this sort.", "Construct a prefix sum array for the updated coins array.", "For each hero, do a binary search and find the last position of the most powerful monster that this hero can defeat.", "If said monster has index <code>i</code>, then the <code>i<sup>th</sup></code> element of the partial sum array would be the answer.", "If a hero can defeat the <code>i<sup>th</sup></code> monster, then he defeats all the monsters having a power less than <code>monster[i]</code>.", "Sort monsters by their powers. Also change the order of the coins array according to this sort.", "Construct a prefix sum array for the updated coins array.", "For each hero, do a binary search and find the last position of the most powerful monster that this hero can defeat.", "If said monster has index <code>i</code>, then the <code>i<sup>th</sup></code> element of the partial sum array would be the answer."], "exampleTestcases": "[1,4,2]\n[1,1,5,2,3]\n[2,3,4,5,6]\n[5]\n[2,3,1,2]\n[10,6,5,2]\n[4,4]\n[5,7,8]\n[1,1,1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> maximumCoins(vector<int>& heroes, vector<int>& monsters, vector<int>& coins) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long[] maximumCoins(int[] heroes, int[] monsters, int[] coins) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumCoins(self, heroes, monsters, coins):\n        \"\"\"\n        :type heroes: List[int]\n        :type monsters: List[int]\n        :type coins: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumCoins(self, heroes: List[int], monsters: List[int], coins: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* maximumCoins(int* heroes, int heroesSize, int* monsters, int monstersSize, int* coins, int coinsSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long[] MaximumCoins(int[] heroes, int[] monsters, int[] coins) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} heroes\n * @param {number[]} monsters\n * @param {number[]} coins\n * @return {number[]}\n */\nvar maximumCoins = function(heroes, monsters, coins) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumCoins(heroes: number[], monsters: number[], coins: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heroes\n     * @param Integer[] $monsters\n     * @param Integer[] $coins\n     * @return Integer[]\n     */\n    function maximumCoins($heroes, $monsters, $coins) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumCoins(_ heroes: [Int], _ monsters: [Int], _ coins: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumCoins(heroes: IntArray, monsters: IntArray, coins: IntArray): LongArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> maximumCoins(List<int> heroes, List<int> monsters, List<int> coins) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumCoins(heroes []int, monsters []int, coins []int) []int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} heroes\n# @param {Integer[]} monsters\n# @param {Integer[]} coins\n# @return {Integer[]}\ndef maximum_coins(heroes, monsters, coins)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumCoins(heroes: Array[Int], monsters: Array[Int], coins: Array[Int]): Array[Long] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_coins(heroes: Vec<i32>, monsters: Vec<i32>, coins: Vec<i32>) -> Vec<i64> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-coins heroes monsters coins)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_coins(Heroes :: [integer()], Monsters :: [integer()], Coins :: [integer()]) -> [integer()].\nmaximum_coins(Heroes, Monsters, Coins) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_coins(heroes :: [integer], monsters :: [integer], coins :: [integer]) :: [integer]\n  def maximum_coins(heroes, monsters, coins) do\n    \n  end\nend"}], "similarQuestionList": []}