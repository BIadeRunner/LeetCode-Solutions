{"question_id": "1238", "problem_slug": "alphabet-board-path", "problem_title": "Alphabet Board Path", "content": "On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].\nHere, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below.\n\nWe may make the following moves:\n\n'U' moves our position up one row, if the position exists on the board;\n'D' moves our position down one row, if the position exists on the board;\n'L' moves our position left one column, if the position exists on the board;\n'R' moves our position right one column, if the position exists on the board;\n'!' adds the character board[r][c] at our current position (r, c) to the answer.\n\n(Here, the only positions that exist on the board are positions with letters on them.)\nReturn a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.\n \nExample 1:\nInput: target = \"leet\"\r\nOutput: \"DDR!UURRR!!DDD!\"\r\nExample 2:\nInput: target = \"code\"\r\nOutput: \"RR!DDRR!UUL!R!\"\r\n\n \nConstraints:\n\n1 <= target.length <= 100\ntarget consists only of English lowercase letters.\n", "hints": ["Create a hashmap from letter to position on the board.", "Now for each letter, try moving there in steps, where at each step you check if it is inside the boundaries of the board."], "exampleTestcases": "\"leet\"\n\"code\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string alphabetBoardPath(string target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String alphabetBoardPath(String target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def alphabetBoardPath(self, target):\n        \"\"\"\n        :type target: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def alphabetBoardPath(self, target: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "\n\nchar * alphabetBoardPath(char * target){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string AlphabetBoardPath(string target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} target\n * @return {string}\n */\nvar alphabetBoardPath = function(target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function alphabetBoardPath(target: string): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @return String\n     */\n    function alphabetBoardPath($target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func alphabetBoardPath(_ target: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun alphabetBoardPath(target: String): String {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func alphabetBoardPath(target string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} target\n# @return {String}\ndef alphabet_board_path(target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def alphabetBoardPath(target: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn alphabet_board_path(target: String) -> String {\n        \n    }\n}"}}}