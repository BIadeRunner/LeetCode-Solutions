{"questionId": "909", "acRate": 71.19742499709474, "difficulty": "Medium", "freqBar": 38.45798014704633, "frontendQuestionId": "877", "paidOnly": false, "status": "ac", "title": "Stone Game", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Game Theory", "id": "VG9waWNUYWdOb2RlOjYxMDcz", "slug": "game-theory"}], "titleSlug": "stone-game", "content": "<p>Alice and Bob play a game with piles of stones. There are an <strong>even</strong> number of piles arranged in a row, and each pile has a <strong>positive</strong> integer number of stones <code>piles[i]</code>.</p>\n\n<p>The objective of the game is to end with the most stones. The <strong>total</strong> number of stones across all the piles is <strong>odd</strong>, so there are no ties.</p>\n\n<p>Alice and Bob take turns, with <strong>Alice starting first</strong>. Each turn, a player takes the entire pile of stones either from the <strong>beginning</strong> or from the <strong>end</strong> of the row. This continues until there are no more piles left, at which point the person with the <strong>most stones wins</strong>.</p>\n\n<p>Assuming Alice and Bob play optimally, return <code>true</code><em> if Alice wins the game, or </em><code>false</code><em> if Bob wins</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [5,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,7,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> is <strong>even</strong>.</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles[i])</code> is <strong>odd</strong>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[5,3,4,5]\n[3,7,2,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool stoneGame(vector<int>& piles) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean stoneGame(int[] piles) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool stoneGame(int* piles, int pilesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool StoneGame(int[] piles) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function stoneGame(piles: number[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @return Boolean\n     */\n    function stoneGame($piles) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func stoneGame(_ piles: [Int]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun stoneGame(piles: IntArray): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool stoneGame(List<int> piles) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func stoneGame(piles []int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} piles\n# @return {Boolean}\ndef stone_game(piles)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def stoneGame(piles: Array[Int]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn stone_game(piles: Vec<i32>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (stone-game piles)\n  (-> (listof exact-integer?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec stone_game(Piles :: [integer()]) -> boolean().\nstone_game(Piles) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec stone_game(piles :: [integer]) :: boolean\n  def stone_game(piles) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "stone-game-v", "title": "Stone Game V", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "stone-game-vi", "title": "Stone Game VI", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "stone-game-vii", "title": "Stone Game VII", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "stone-game-viii", "title": "Stone Game VIII", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "stone-game-ix", "title": "Stone Game IX", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "strictly-palindromic-number", "title": "Strictly Palindromic Number", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "visit-array-positions-to-maximize-score", "title": "Visit Array Positions to Maximize Score", "isPaidOnly": false}]}