{"question_id": "1335", "problem_slug": "maximum-candies-allocated-to-k-children", "problem_title": "Maximum Candies Allocated to K Children", "content": "You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.\nYou are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused.\nReturn the maximum number of candies each child can get.\n \nExample 1:\n\nInput: candies = [5,8,6], k = 3\nOutput: 5\nExplanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.\n\nExample 2:\n\nInput: candies = [2,5], k = 11\nOutput: 0\nExplanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.\n\n \nConstraints:\n\n1 <= candies.length <= 105\n1 <= candies[i] <= 107\n1 <= k <= 1012\n\n", "hints": ["For a fixed number of candies c, how can you check if each child can get c candies?", "Use binary search to find the maximum c as the answer."], "exampleTestcases": "[5,8,6]\n3\n[2,5]\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumCandies(vector<int>& candies, long long k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumCandies(int[] candies, long k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumCandies(self, candies, k):\n        \"\"\"\n        :type candies: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumCandies(self, candies: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumCandies(int* candies, int candiesSize, long long k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumCandies(int[] candies, long k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} candies\n * @param {number} k\n * @return {number}\n */\nvar maximumCandies = function(candies, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumCandies(candies: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumCandies($candies, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumCandies(_ candies: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumCandies(candies: IntArray, k: Long): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumCandies(List<int> candies, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumCandies(candies []int, k int64) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} candies\n# @param {Integer} k\n# @return {Integer}\ndef maximum_candies(candies, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumCandies(candies: Array[Int], k: Long): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_candies(candies: Vec<i32>, k: i64) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-candies candies k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_candies(Candies :: [integer()], K :: integer()) -> integer().\nmaximum_candies(Candies, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_candies(candies :: [integer], k :: integer) :: integer\n  def maximum_candies(candies, k) do\n    \n  end\nend"}}}