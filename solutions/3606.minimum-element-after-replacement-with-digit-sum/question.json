{"question_id": "3606", "problem_slug": "minimum-element-after-replacement-with-digit-sum", "problem_title": "Minimum Element After Replacement With Digit Sum", "content": "You are given an integer array nums.\nYou replace each element in nums with the sum of its digits.\nReturn the minimum element in nums after all replacements.\n \nExample 1:\n\nInput: nums = [10,12,13,14]\nOutput: 1\nExplanation:\nnums becomes [1, 3, 4, 5] after all replacements, with minimum element 1.\n\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: 1\nExplanation:\nnums becomes [1, 2, 3, 4] after all replacements, with minimum element 1.\n\nExample 3:\n\nInput: nums = [999,19,199]\nOutput: 10\nExplanation:\nnums becomes [27, 10, 19] after all replacements, with minimum element 10.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 104\n\n", "hints": ["Convert to string and calculate the sum for each element."], "exampleTestcases": "[10,12,13,14]\n[1,2,3,4]\n[999,19,199]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minElement(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minElement(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minElement(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinElement(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minElement = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minElement(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minElement($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minElement(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minElement(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minElement(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minElement(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_element(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minElement(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_element(Nums :: [integer()]) -> integer().\nmin_element(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_element(nums :: [integer]) :: integer\n  def min_element(nums) do\n    \n  end\nend"}}}