{"questionId": "2513", "acRate": 44.34409006805281, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2426", "paidOnly": false, "status": "ac", "title": "Number of Pairs Satisfying Inequality", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Divide and Conquer", "id": "VG9waWNUYWdOb2RlOjEy", "slug": "divide-and-conquer"}, {"name": "Binary Indexed Tree", "id": "VG9waWNUYWdOb2RlOjI4", "slug": "binary-indexed-tree"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}, {"name": "Merge Sort", "id": "VG9waWNUYWdOb2RlOjYxMDUx", "slug": "merge-sort"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "titleSlug": "number-of-pairs-satisfying-inequality", "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, each of size <code>n</code>, and an integer <code>diff</code>. Find the number of <strong>pairs</strong> <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt;= n - 1</code> <strong>and</strong></li>\n\t<li><code>nums1[i] - nums1[j] &lt;= nums2[i] - nums2[j] + diff</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>number of pairs</strong> that satisfy the conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,2,5], nums2 = [2,2,1], diff = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 &lt;= 2 - 2 + 1. Since i &lt; j and 1 &lt;= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -2 &lt;= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -3 &lt;= 2, this pair satisfies the conditions.\nTherefore, we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,-1], nums2 = [-2,2], diff = -1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nSince there does not exist any pair that satisfies the conditions, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= diff &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "hints": ["Try rearranging the equation.", "Once the equation is rearranged properly, think how a segment tree or a Fenwick tree can be used to solve the rearranged equation.", "Iterate through the array backwards."], "exampleTestcases": "[3,2,5]\n[2,2,1]\n1\n[3,-1]\n[-2,2]\n-1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, diff):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int diff) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long NumberOfPairs(int[] nums1, int[] nums2, int diff) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} diff\n * @return {number}\n */\nvar numberOfPairs = function(nums1, nums2, diff) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfPairs(nums1: number[], nums2: number[], diff: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $diff\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $diff) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ diff: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, diff: Int): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfPairs(List<int> nums1, List<int> nums2, int diff) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfPairs(nums1 []int, nums2 []int, diff int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} diff\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, diff)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], diff: Int): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec<i32>, nums2: Vec<i32>, diff: i32) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-pairs nums1 nums2 diff)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], Diff :: integer()) -> integer().\nnumber_of_pairs(Nums1, Nums2, Diff) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], diff :: integer) :: integer\n  def number_of_pairs(nums1, nums2, diff) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "k-diff-pairs-in-an-array", "title": "K-diff Pairs in an Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-nice-pairs-in-an-array", "title": "Count Nice Pairs in an Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-number-of-bad-pairs", "title": "Count Number of Bad Pairs", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "isPaidOnly": false}]}