{"question_id": "2209", "problem_slug": "number-of-equal-count-substrings", "problem_title": "Number of Equal Count Substrings", "content": "You are given a 0-indexed string s consisting of only lowercase English letters, and an integer count. A substring of s is said to be an equal count substring if, for each unique letter in the substring, it appears exactly count times in the substring.\nReturn the number of equal count substrings in s.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"aaabcbbcc\", count = 3\nOutput: 3\nExplanation:\nThe substring that starts at index 0 and ends at index 2 is \"aaa\".\nThe letter 'a' in the substring appears exactly 3 times.\nThe substring that starts at index 3 and ends at index 8 is \"bcbbcc\".\nThe letters 'b' and 'c' in the substring appear exactly 3 times.\nThe substring that starts at index 0 and ends at index 8 is \"aaabcbbcc\".\nThe letters 'a', 'b', and 'c' in the substring appear exactly 3 times.\n\nExample 2:\n\nInput: s = \"abcd\", count = 2\nOutput: 0\nExplanation:\nThe number of times each letter appears in s is less than count.\nTherefore, no substrings in s are equal count substrings, so return 0.\n\nExample 3:\n\nInput: s = \"a\", count = 5\nOutput: 0\nExplanation:\nThe number of times each letter appears in s is less than count.\nTherefore, no substrings in s are equal count substrings, so return 0\n \nConstraints:\n\n1 <= s.length <= 3 * 104\n1 <= count <= 3 * 104\ns consists only of lowercase English letters.\n\n", "hints": ["The brute force solution is to check every substring, which would TLE. How can we improve this solution?", "In an equal count substring, the first character appears count times, the second character appears count times, and so on.", "The length of an equal count substring is the number of unique characters multiplied by count.", "The length of all equal count substrings are multiples of count."], "exampleTestcases": "\"aaabcbbcc\"\n3\n\"abcd\"\n2\n\"a\"\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int equalCountSubstrings(string s, int count) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int equalCountSubstrings(String s, int count) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def equalCountSubstrings(self, s, count):\n        \"\"\"\n        :type s: str\n        :type count: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def equalCountSubstrings(self, s: str, count: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int equalCountSubstrings(char* s, int count) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int EqualCountSubstrings(string s, int count) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} count\n * @return {number}\n */\nvar equalCountSubstrings = function(s, count) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function equalCountSubstrings(s: string, count: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $count\n     * @return Integer\n     */\n    function equalCountSubstrings($s, $count) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func equalCountSubstrings(_ s: String, _ count: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun equalCountSubstrings(s: String, count: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int equalCountSubstrings(String s, int count) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func equalCountSubstrings(s string, count int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} count\n# @return {Integer}\ndef equal_count_substrings(s, count)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def equalCountSubstrings(s: String, count: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn equal_count_substrings(s: String, count: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (equal-count-substrings s count)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec equal_count_substrings(S :: unicode:unicode_binary(), Count :: integer()) -> integer().\nequal_count_substrings(S, Count) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec equal_count_substrings(s :: String.t, count :: integer) :: integer\n  def equal_count_substrings(s, count) do\n    \n  end\nend"}}}