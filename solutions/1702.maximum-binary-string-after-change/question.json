{"questionId": "1804", "acRate": 47.02303346371143, "difficulty": "Medium", "freqBar": 38.22812310601904, "frontendQuestionId": "1702", "paidOnly": false, "status": "ac", "title": "Maximum Binary String After Change", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "maximum-binary-string-after-change", "content": "<p>You are given a binary string <code>binary</code> consisting of only <code>0</code>&#39;s or <code>1</code>&#39;s. You can apply each of the following operations any number of times:</p>\n\n<ul>\n\t<li>Operation 1: If the number contains the substring <code>&quot;00&quot;</code>, you can replace it with <code>&quot;10&quot;</code>.\n\n\t<ul>\n\t\t<li>For example, <code>&quot;<u>00</u>010&quot; -&gt; &quot;<u>10</u>010</code>&quot;</li>\n\t</ul>\n\t</li>\n\t<li>Operation 2: If the number contains the substring <code>&quot;10&quot;</code>, you can replace it with <code>&quot;01&quot;</code>.\n\t<ul>\n\t\t<li>For example, <code>&quot;000<u>10</u>&quot; -&gt; &quot;000<u>01</u>&quot;</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><em>Return the <strong>maximum binary string</strong> you can obtain after any number of operations. Binary string <code>x</code> is greater than binary string <code>y</code> if <code>x</code>&#39;s decimal representation is greater than <code>y</code>&#39;s decimal representation.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;000110&quot;\n<strong>Output:</strong> &quot;111011&quot;\n<strong>Explanation:</strong> A valid transformation sequence can be:\n&quot;0001<u>10</u>&quot; -&gt; &quot;0001<u>01</u>&quot; \n&quot;<u>00</u>0101&quot; -&gt; &quot;<u>10</u>0101&quot; \n&quot;1<u>00</u>101&quot; -&gt; &quot;1<u>10</u>101&quot; \n&quot;110<u>10</u>1&quot; -&gt; &quot;110<u>01</u>1&quot; \n&quot;11<u>00</u>11&quot; -&gt; &quot;11<u>10</u>11&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;01&quot;\n<strong>Output:</strong> &quot;01&quot;\n<strong>Explanation:</strong>&nbsp;&quot;01&quot; cannot be transformed any further.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>binary</code> consist of <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n</ul>\n", "hints": ["Note that with the operations, you can always make the string only contain at most 1 zero."], "exampleTestcases": "\"000110\"\n\"01\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string maximumBinaryString(string binary) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String maximumBinaryString(String binary) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumBinaryString(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumBinaryString(self, binary: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* maximumBinaryString(char* binary) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MaximumBinaryString(string binary) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} binary\n * @return {string}\n */\nvar maximumBinaryString = function(binary) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumBinaryString(binary: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $binary\n     * @return String\n     */\n    function maximumBinaryString($binary) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumBinaryString(_ binary: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumBinaryString(binary: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String maximumBinaryString(String binary) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumBinaryString(binary string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} binary\n# @return {String}\ndef maximum_binary_string(binary)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumBinaryString(binary: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_binary_string(binary: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-binary-string binary)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_binary_string(Binary :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmaximum_binary_string(Binary) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_binary_string(binary :: String.t) :: String.t\n  def maximum_binary_string(binary) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-binary-subsequence-less-than-or-equal-to-k", "title": "Longest Binary Subsequence Less Than or Equal to K", "isPaidOnly": false}]}