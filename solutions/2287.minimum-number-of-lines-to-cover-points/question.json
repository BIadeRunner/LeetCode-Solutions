{"question_id": "2287", "problem_slug": "minimum-number-of-lines-to-cover-points", "problem_title": "Minimum Number of Lines to Cover Points", "content": "You are given an array points where points[i] = [xi, yi] represents a point on an X-Y plane.\nStraight lines are going to be added to the X-Y plane, such that every point is covered by at least one line.\nReturn the minimum number of straight lines needed to cover all the points.\n \nExample 1:\n\n\nInput: points = [[0,1],[2,3],[4,5],[4,3]]\nOutput: 2\nExplanation: The minimum number of straight lines needed is two. One possible solution is to add:\n- One line connecting the point at (0, 1) to the point at (4, 5).\n- Another line connecting the point at (2, 3) to the point at (4, 3).\n\nExample 2:\n\n\nInput: points = [[0,2],[-2,-2],[1,4]]\nOutput: 1\nExplanation: The minimum number of straight lines needed is one. The only solution is to add:\n- One line connecting the point at (-2, -2) to the point at (1, 4).\n\n \nConstraints:\n\n1 <= points.length <= 10\npoints[i].length == 2\n-100 <= xi, yi <= 100\nAll the points are unique.\n\n", "hints": ["What is the highest possible answer for a set of n points?", "The highest possible answer is n / 2 (rounded up). This is because you can cover at least two points with a line, and if n is odd, you need to add one extra line to cover the last point.", "Suppose you have a line covering two points, how can you quickly check if a third point is also covered by that line?", "Calculate the slope from the first point to the second point. If the slope from the first point to the third point is the same, then it is also covered by that line."], "exampleTestcases": "[[0,1],[2,3],[4,5],[4,3]]\n[[0,2],[-2,-2],[1,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumLines(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumLines(int[][] points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumLines(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumLines(self, points: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumLines(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumLines(int[][] points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minimumLines = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumLines(points: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minimumLines($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumLines(_ points: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumLines(points: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumLines(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumLines(points [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef minimum_lines(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumLines(points: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_lines(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-lines points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_lines(Points :: [[integer()]]) -> integer().\nminimum_lines(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_lines(points :: [[integer]]) :: integer\n  def minimum_lines(points) do\n    \n  end\nend"}}}