{"questionId": "3393", "acRate": 51.39318885448917, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3088", "paidOnly": true, "status": "ac", "title": "Make String Anti-palindrome", "titleSlug": "make-string-anti-palindrome", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Counting Sort", "id": "VG9waWNUYWdOb2RlOjYxMDcy", "slug": "counting-sort"}], "content": "<p>We call a string <code>s</code> of <strong>even</strong> length <code>n</code> an <strong>anti-palindrome</strong> if for each index <code>0 &lt;= i &lt; n</code>, <code>s[i] != s[n - i - 1]</code>.</p>\n\n<p>Given a string <code>s</code>, your task is to make <code>s</code> an <strong>anti-palindrome</strong> by doing <strong>any</strong> number of operations (including zero).</p>\n\n<p>In one operation, you can select two characters from <code>s</code> and swap them.</p>\n\n<p>Return <em>the resulting string. If multiple strings meet the conditions, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> one. If it can&#39;t be made into an anti-palindrome, return </em><code>&quot;-1&quot;</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abca&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aabc&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>&quot;aabc&quot;</code> is an anti-palindrome string since <code>s[0] != s[3]</code> and <code>s[1] != s[2]</code>. Also, it is a rearrangement of <code>&quot;abca&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;aabb&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>&quot;aabb&quot;</code> is an anti-palindrome string since <code>s[0] != s[3]</code> and <code>s[1] != s[2]</code>. Also, it is a rearrangement of <code>&quot;abba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cccd&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;-1&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>You can see that no matter how you rearrange the characters of <code>&quot;cccd&quot;</code>, either <code>s[0] == s[3]</code> or <code>s[1] == s[2]</code>. So it can not form an anti-palindrome string.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s.length % 2 == 0</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Sort the string.", "Check if there are equivalent characters in the middle, if there are, shift the ones from the right side more to the right until they don't overlap."], "exampleTestcases": "\"abca\"\n\"abba\"\n\"cccd\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string makeAntiPalindrome(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String makeAntiPalindrome(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makeAntiPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makeAntiPalindrome(self, s: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* makeAntiPalindrome(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MakeAntiPalindrome(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar makeAntiPalindrome = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makeAntiPalindrome(s: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function makeAntiPalindrome($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makeAntiPalindrome(_ s: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makeAntiPalindrome(s: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String makeAntiPalindrome(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func makeAntiPalindrome(s string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef make_anti_palindrome(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makeAntiPalindrome(s: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn make_anti_palindrome(s: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (make-anti-palindrome s)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec make_anti_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_anti_palindrome(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_anti_palindrome(s :: String.t) :: String.t\n  def make_anti_palindrome(s) do\n    \n  end\nend"}], "similarQuestionList": []}