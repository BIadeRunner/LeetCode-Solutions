{"questionId": "3523", "acRate": 26.721403246874413, "difficulty": "Medium", "freqBar": 25.841481246225957, "frontendQuestionId": "3255", "paidOnly": false, "status": "ac", "title": "Find the Power of K-Size Subarrays II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "find-the-power-of-k-size-subarrays-ii", "content": "<p>You are given an array of integers <code>nums</code> of length <code>n</code> and a <em>positive</em> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of an array is defined as:</p>\n\n<ul>\n\t<li>Its <strong>maximum</strong> element if <em>all</em> of its elements are <strong>consecutive</strong> and <strong>sorted</strong> in <strong>ascending</strong> order.</li>\n\t<li>-1 otherwise.</li>\n</ul>\n\n<p>You need to find the <strong>power</strong> of all <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code> of size <code>k</code>.</p>\n\n<p>Return an integer array <code>results</code> of size <code>n - k + 1</code>, where <code>results[i]</code> is the <em>power</em> of <code>nums[i..(i + k - 1)]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,3,2,5], k = 3</span></p>\n\n<p><strong>Output:</strong> [3,4,-1,-1,-1]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 5 subarrays of <code>nums</code> of size 3:</p>\n\n<ul>\n\t<li><code>[1, 2, 3]</code> with the maximum element 3.</li>\n\t<li><code>[2, 3, 4]</code> with the maximum element 4.</li>\n\t<li><code>[3, 4, 3]</code> whose elements are <strong>not</strong> consecutive.</li>\n\t<li><code>[4, 3, 2]</code> whose elements are <strong>not</strong> sorted.</li>\n\t<li><code>[3, 2, 5]</code> whose elements are <strong>not</strong> consecutive.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2,2,2,2], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1,-1]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,2,3,2,3,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1,3,-1,3,-1]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n", "hints": ["Let <code>dp[i]</code> denote the length of the longest subarray ending at index <code>i</code> that has consecutive and sorted elements.", "Use a TreeMap with a sliding window to check if there are <code>k</code> elements in the subarray ending at index <code>i</code>.", "If TreeMap has less than <code>k</code> elements and <code>dp[i] < k</code>, the subarray has power equal to -1.", "Is it possible to achieve <code>O(nums.length)</code> using a Stack?"], "exampleTestcases": "[1,2,3,4,3,2,5]\n3\n[2,2,2,2,2]\n4\n[3,2,3,2,3,2]\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> resultsArray(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] resultsArray(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def resultsArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultsArray(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ResultsArray(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar resultsArray = function(nums, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function resultsArray(nums: number[], k: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function resultsArray($nums, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func resultsArray(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun resultsArray(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> resultsArray(List<int> nums, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func resultsArray(nums []int, k int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef results_array(nums, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def resultsArray(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn results_array(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (results-array nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec results_array(Nums :: [integer()], K :: integer()) -> [integer()].\nresults_array(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec results_array(nums :: [integer], k :: integer) :: [integer]\n  def results_array(nums, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k", "title": "Maximum Sum of Distinct Subarrays With Length K", "isPaidOnly": false}]}