{"question_id": "1293", "problem_slug": "three-consecutive-odds", "problem_title": "Three Consecutive Odds", "content": "Given an integer array arr, return true if there are three consecutive odd numbers in the array. Otherwise, return false.\n \nExample 1:\n\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.\n\nExample 2:\n\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.\n\n \nConstraints:\n\n1 <= arr.length <= 1000\n1 <= arr[i] <= 1000\n\n", "hints": ["Check every three consecutive numbers in the array for parity."], "exampleTestcases": "[2,6,4,1]\n[1,2,34,3,4,5,7,23,12]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool threeConsecutiveOdds(vector<int>& arr) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean threeConsecutiveOdds(int[] arr) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def threeConsecutiveOdds(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool threeConsecutiveOdds(int* arr, int arrSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ThreeConsecutiveOdds(int[] arr) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar threeConsecutiveOdds = function(arr) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function threeConsecutiveOdds(arr: number[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function threeConsecutiveOdds($arr) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func threeConsecutiveOdds(_ arr: [Int]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun threeConsecutiveOdds(arr: IntArray): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool threeConsecutiveOdds(List<int> arr) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func threeConsecutiveOdds(arr []int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Boolean}\ndef three_consecutive_odds(arr)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def threeConsecutiveOdds(arr: Array[Int]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn three_consecutive_odds(arr: Vec<i32>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (three-consecutive-odds arr)\n  (-> (listof exact-integer?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec three_consecutive_odds(Arr :: [integer()]) -> boolean().\nthree_consecutive_odds(Arr) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec three_consecutive_odds(arr :: [integer]) :: boolean\n  def three_consecutive_odds(arr) do\n    \n  end\nend"}}}