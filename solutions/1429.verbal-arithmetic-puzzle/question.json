{"question_id": "1429", "problem_slug": "verbal-arithmetic-puzzle", "problem_title": "Verbal Arithmetic Puzzle", "content": "Given an equation, represented by words on the left side and the result on the right side.\nYou need to check if the equation is solvable under the following rules:\n\nEach character is decoded as one digit (0 - 9).\nNo two characters can map to the same digit.\nEach words[i] and result are decoded as one number without leading zeros.\nSum of numbers on the left side (words) will equal to the number on the right side (result).\n\nReturn true if the equation is solvable, otherwise return false.\n \nExample 1:\n\nInput: words = [\"SEND\",\"MORE\"], result = \"MONEY\"\nOutput: true\nExplanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652\nExample 2:\n\nInput: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\nOutput: true\nExplanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214\nExample 3:\n\nInput: words = [\"LEET\",\"CODE\"], result = \"POINT\"\nOutput: false\nExplanation: There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit.\n\n \nConstraints:\n\n2 <= words.length <= 5\n1 <= words[i].length, result.length <= 7\nwords[i], result contain only uppercase English letters.\nThe number of different characters used in the expression is at most 10.\n\n", "hints": ["Use Backtracking and pruning to solve this problem.", "If you set the values of some digits (from right to left), the other digits will be constrained."], "exampleTestcases": "[\"SEND\",\"MORE\"]\n\"MONEY\"\n[\"SIX\",\"SEVEN\",\"SEVEN\"]\n\"TWENTY\"\n[\"LEET\",\"CODE\"]\n\"POINT\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isSolvable(vector<string>& words, string result) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isSolvable(String[] words, String result) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isSolvable(self, words, result):\n        \"\"\"\n        :type words: List[str]\n        :type result: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isSolvable(self, words: List[str], result: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isSolvable(char** words, int wordsSize, char* result) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsSolvable(string[] words, string result) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} result\n * @return {boolean}\n */\nvar isSolvable = function(words, result) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isSolvable(words: string[], result: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $result\n     * @return Boolean\n     */\n    function isSolvable($words, $result) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isSolvable(_ words: [String], _ result: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isSolvable(words: Array<String>, result: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isSolvable(List<String> words, String result) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isSolvable(words []string, result string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} result\n# @return {Boolean}\ndef is_solvable(words, result)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isSolvable(words: Array[String], result: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_solvable(words: Vec<String>, result: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-solvable words result)\n  (-> (listof string?) string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_solvable(Words :: [unicode:unicode_binary()], Result :: unicode:unicode_binary()) -> boolean().\nis_solvable(Words, Result) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_solvable(words :: [String.t], result :: String.t) :: boolean\n  def is_solvable(words, result) do\n    \n  end\nend"}}}