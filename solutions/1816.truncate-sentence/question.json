{"questionId": "1944", "acRate": 85.68110497743776, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1816", "paidOnly": false, "status": "ac", "title": "Truncate Sentence", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "truncate-sentence", "content": "<p>A <strong>sentence</strong> is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of <strong>only</strong> uppercase and lowercase English letters (no punctuation).</p>\n\n<ul>\n\t<li>For example, <code>&quot;Hello World&quot;</code>, <code>&quot;HELLO&quot;</code>, and <code>&quot;hello world hello world&quot;</code> are all sentences.</li>\n</ul>\n\n<p>You are given a sentence <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and an integer <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b. You want to <strong>truncate</strong> <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the <strong>first</strong> <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b words. Return <code>s</code>\u200b\u200b\u200b\u200b<em>\u200b\u200b after <strong>truncating</strong> it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello how are you Contestant&quot;, k = 4\n<strong>Output:</strong> &quot;Hello how are you&quot;\n<strong>Explanation:</strong>\nThe words in s are [&quot;Hello&quot;, &quot;how&quot; &quot;are&quot;, &quot;you&quot;, &quot;Contestant&quot;].\nThe first 4 words are [&quot;Hello&quot;, &quot;how&quot;, &quot;are&quot;, &quot;you&quot;].\nHence, you should return &quot;Hello how are you&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;What is the solution to this problem&quot;, k = 4\n<strong>Output:</strong> &quot;What is the solution&quot;\n<strong>Explanation:</strong>\nThe words in s are [&quot;What&quot;, &quot;is&quot; &quot;the&quot;, &quot;solution&quot;, &quot;to&quot;, &quot;this&quot;, &quot;problem&quot;].\nThe first 4 words are [&quot;What&quot;, &quot;is&quot;, &quot;the&quot;, &quot;solution&quot;].\nHence, you should return &quot;What is the solution&quot;.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;chopper is not a tanuki&quot;, k = 5\n<strong>Output:</strong> &quot;chopper is not a tanuki&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of words in s]</code>.</li>\n\t<li><code>s</code> consist of only lowercase and uppercase English letters and spaces.</li>\n\t<li>The words in <code>s</code> are separated by a single space.</li>\n\t<li>There are no leading or trailing spaces.</li>\n</ul>\n", "hints": ["It's easier to solve this problem on an array of strings so parse the string to an array of words", "After return the first k words as a sentence"], "exampleTestcases": "\"Hello how are you Contestant\"\n4\n\"What is the solution to this problem\"\n4\n\"chopper is not a tanuki\"\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string truncateSentence(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String truncateSentence(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def truncateSentence(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* truncateSentence(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string TruncateSentence(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function truncateSentence(s: string, k: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function truncateSentence($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func truncateSentence(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun truncateSentence(s: String, k: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String truncateSentence(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func truncateSentence(s string, k int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef truncate_sentence(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def truncateSentence(s: String, k: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn truncate_sentence(s: String, k: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (truncate-sentence s k)\n  (-> string? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec truncate_sentence(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\ntruncate_sentence(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec truncate_sentence(s :: String.t, k :: integer) :: String.t\n  def truncate_sentence(s, k) do\n    \n  end\nend"}], "similarQuestionList": []}