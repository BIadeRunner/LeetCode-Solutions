{"questionId": "2173", "acRate": 29.46650913387258, "difficulty": "Easy", "freqBar": 38.5356877649538, "frontendQuestionId": "2047", "paidOnly": false, "status": "ac", "title": "Number of Valid Words in a Sentence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "number-of-valid-words-in-a-sentence", "content": "<p>A sentence consists of lowercase letters (<code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>), digits (<code>&#39;0&#39;</code> to <code>&#39;9&#39;</code>), hyphens (<code>&#39;-&#39;</code>), punctuation marks (<code>&#39;!&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39;,&#39;</code>), and spaces (<code>&#39; &#39;</code>) only. Each sentence can be broken down into <strong>one or more tokens</strong> separated by one or more spaces <code>&#39; &#39;</code>.</p>\n\n<p>A token is a valid word if <strong>all three</strong> of the following are true:</p>\n\n<ul>\n\t<li>It only contains lowercase letters, hyphens, and/or punctuation (<strong>no</strong> digits).</li>\n\t<li>There is <strong>at most one</strong> hyphen <code>&#39;-&#39;</code>. If present, it <strong>must</strong> be surrounded by lowercase characters (<code>&quot;a-b&quot;</code> is valid, but <code>&quot;-ab&quot;</code> and <code>&quot;ab-&quot;</code> are not valid).</li>\n\t<li>There is <strong>at most one</strong> punctuation mark. If present, it <strong>must</strong> be at the <strong>end</strong> of the token (<code>&quot;ab,&quot;</code>, <code>&quot;cd!&quot;</code>, and <code>&quot;.&quot;</code> are valid, but <code>&quot;a!b&quot;</code> and <code>&quot;c.,&quot;</code> are not valid).</li>\n</ul>\n\n<p>Examples of valid words include <code>&quot;a-b.&quot;</code>, <code>&quot;afad&quot;</code>, <code>&quot;ba-c&quot;</code>, <code>&quot;a!&quot;</code>, and <code>&quot;!&quot;</code>.</p>\n\n<p>Given a string <code>sentence</code>, return <em>the <strong>number</strong> of valid words in </em><code>sentence</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;<u>cat</u> <u>and</u>  <u>dog</u>&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The valid words in the sentence are &quot;cat&quot;, &quot;and&quot;, and &quot;dog&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;!this  1-s b8d!&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no valid words in the sentence.\n&quot;!this&quot; is invalid because it starts with a punctuation mark.\n&quot;1-s&quot; and &quot;b8d&quot; are invalid because they contain digits.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence = &quot;<u>alice</u> <u>and</u>  <u>bob</u> <u>are</u> <u>playing</u> stone-game10&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The valid words in the sentence are &quot;alice&quot;, &quot;and&quot;, &quot;bob&quot;, &quot;are&quot;, and &quot;playing&quot;.\n&quot;stone-game10&quot; is invalid because it contains digits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 1000</code></li>\n\t<li><code>sentence</code> only contains lowercase English letters, digits, <code>&#39; &#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39;,&#39;</code>.</li>\n\t<li>There will be at least&nbsp;<code>1</code> token.</li>\n</ul>\n", "hints": ["Iterate through the string to split it by spaces.", "Count the number of characters of each type (letters, numbers, hyphens, and punctuations)."], "exampleTestcases": "\"cat and  dog\"\n\"!this  1-s b8d!\"\n\"alice and  bob are playing stone-game10\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countValidWords(string sentence) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countValidWords(String sentence) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countValidWords(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countValidWords(self, sentence: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countValidWords(char* sentence) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountValidWords(string sentence) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @return {number}\n */\nvar countValidWords = function(sentence) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countValidWords(sentence: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return Integer\n     */\n    function countValidWords($sentence) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countValidWords(_ sentence: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countValidWords(sentence: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countValidWords(String sentence) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countValidWords(sentence string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} sentence\n# @return {Integer}\ndef count_valid_words(sentence)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countValidWords(sentence: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_valid_words(sentence: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-valid-words sentence)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_valid_words(Sentence :: unicode:unicode_binary()) -> integer().\ncount_valid_words(Sentence) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_valid_words(sentence :: String.t) :: integer\n  def count_valid_words(sentence) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "maximum-number-of-words-found-in-sentences", "title": "Maximum Number of Words Found in Sentences", "isPaidOnly": false}]}