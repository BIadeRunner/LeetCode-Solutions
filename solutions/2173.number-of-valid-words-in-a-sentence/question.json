{"question_id": "2173", "problem_slug": "number-of-valid-words-in-a-sentence", "problem_title": "Number of Valid Words in a Sentence", "content": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.\nA token is a valid word if all three of the following are true:\n\nIt only contains lowercase letters, hyphens, and/or punctuation (no digits).\nThere is at most one hyphen '-'. If present, it must be surrounded by lowercase characters (\"a-b\" is valid, but \"-ab\" and \"ab-\" are not valid).\nThere is at most one punctuation mark. If present, it must be at the end of the token (\"ab,\", \"cd!\", and \".\" are valid, but \"a!b\" and \"c.,\" are not valid).\n\nExamples of valid words include \"a-b.\", \"afad\", \"ba-c\", \"a!\", and \"!\".\nGiven a string sentence, return the number of valid words in sentence.\n \nExample 1:\n\nInput: sentence = \"cat and  dog\"\nOutput: 3\nExplanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\".\n\nExample 2:\n\nInput: sentence = \"!this  1-s b8d!\"\nOutput: 0\nExplanation: There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits.\n\nExample 3:\n\nInput: sentence = \"alice and  bob are playing stone-game10\"\nOutput: 5\nExplanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits.\n\n \nConstraints:\n\n1 <= sentence.length <= 1000\nsentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','.\nThere will be at least 1 token.\n\n", "hints": ["Iterate through the string to split it by spaces.", "Count the number of characters of each type (letters, numbers, hyphens, and punctuations)."], "exampleTestcases": "\"cat and  dog\"\n\"!this  1-s b8d!\"\n\"alice and  bob are playing stone-game10\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countValidWords(string sentence) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countValidWords(String sentence) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countValidWords(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countValidWords(self, sentence: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countValidWords(char* sentence) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountValidWords(string sentence) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} sentence\n * @return {number}\n */\nvar countValidWords = function(sentence) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countValidWords(sentence: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return Integer\n     */\n    function countValidWords($sentence) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countValidWords(_ sentence: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countValidWords(sentence: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countValidWords(String sentence) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countValidWords(sentence string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} sentence\n# @return {Integer}\ndef count_valid_words(sentence)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countValidWords(sentence: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_valid_words(sentence: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-valid-words sentence)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_valid_words(Sentence :: unicode:unicode_binary()) -> integer().\ncount_valid_words(Sentence) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_valid_words(sentence :: String.t) :: integer\n  def count_valid_words(sentence) do\n    \n  end\nend"}}}