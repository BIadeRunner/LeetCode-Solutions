{"questionId": "2091", "acRate": 20.92864670510198, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1977", "paidOnly": false, "status": "ac", "title": "Number of Ways to Separate Numbers", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Suffix Array", "id": "VG9waWNUYWdOb2RlOjU2Njk4", "slug": "suffix-array"}], "titleSlug": "number-of-ways-to-separate-numbers", "content": "<p>You wrote down many <strong>positive</strong> integers in a string called <code>num</code>. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was <strong>non-decreasing</strong> and that <strong>no</strong> integer had leading zeros.</p>\n\n<p>Return <em>the <strong>number of possible lists of integers</strong> that you could have written down to get the string </em><code>num</code>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;327&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You could have written down the numbers:\n3, 27\n327\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;094&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No numbers can have leading zeros and all numbers must be positive.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No numbers can have leading zeros and all numbers must be positive.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 3500</code></li>\n\t<li><code>num</code> consists of digits <code>&#39;0&#39;</code> through <code>&#39;9&#39;</code>.</li>\n</ul>\n", "hints": ["If we know the current number has d digits, how many digits can the previous number have?", "Is there a quick way of calculating the number of possibilities for the previous number if we know that it must have less than or equal to d digits? Try to do some pre-processing."], "exampleTestcases": "\"327\"\n\"094\"\n\"0\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfCombinations(string num) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfCombinations(String num) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfCombinations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfCombinations(self, num: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numberOfCombinations(char* num) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfCombinations(string num) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {number}\n */\nvar numberOfCombinations = function(num) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfCombinations(num: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Integer\n     */\n    function numberOfCombinations($num) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfCombinations(_ num: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfCombinations(num: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numberOfCombinations(String num) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfCombinations(num string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @return {Integer}\ndef number_of_combinations(num)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfCombinations(num: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_combinations(num: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (number-of-combinations num)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec number_of_combinations(Num :: unicode:unicode_binary()) -> integer().\nnumber_of_combinations(Num) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_combinations(num :: String.t) :: integer\n  def number_of_combinations(num) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "decode-ways", "title": "Decode Ways", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "decode-ways-ii", "title": "Decode Ways II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "restore-the-array", "title": "Restore The Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "isPaidOnly": false}]}