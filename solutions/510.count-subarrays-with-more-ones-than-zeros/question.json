{"question_id": "510", "problem_slug": "count-subarrays-with-more-ones-than-zeros", "problem_title": "Count Subarrays With More Ones Than Zeros", "content": "You are given a binary array nums containing only the integers 0 and 1. Return the number of subarrays in nums that have more 1's than 0's. Since the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [0,1,1,0,1]\nOutput: 9\nExplanation:\nThe subarrays of size 1 that have more ones than zeros are: [1], [1], [1]\nThe subarrays of size 2 that have more ones than zeros are: [1,1]\nThe subarrays of size 3 that have more ones than zeros are: [0,1,1], [1,1,0], [1,0,1]\nThe subarrays of size 4 that have more ones than zeros are: [1,1,0,1]\nThe subarrays of size 5 that have more ones than zeros are: [0,1,1,0,1]\n\nExample 2:\n\nInput: nums = [0]\nOutput: 0\nExplanation:\nNo subarrays have more ones than zeros.\n\nExample 3:\n\nInput: nums = [1]\nOutput: 1\nExplanation:\nThe subarrays of size 1 that have more ones than zeros are: [1]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 1\n\n", "hints": ["Change the zeros in nums to -1 and create a prefix sum array prefixSum using the new nums.", "If prefixSum[i] for any index i in the range 0 <= i < prefixSum.length is positive, that means that there are more ones than zeros in the prefix ending at index i.", "If prefixSum[j] > prefixSum[i] for two indexes i and j such that 0 <= i < j < prefixSum.length, that means that there are more ones than zeros in nums in the range [i + 1 : j] (inclusive)"], "exampleTestcases": "[0,1,1,0,1]\n[0]\n[1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarraysWithMoreZerosThanOnes(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int subarraysWithMoreZerosThanOnes(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def subarraysWithMoreZerosThanOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def subarraysWithMoreZerosThanOnes(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int subarraysWithMoreZerosThanOnes(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SubarraysWithMoreZerosThanOnes(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar subarraysWithMoreZerosThanOnes = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function subarraysWithMoreZerosThanOnes(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function subarraysWithMoreZerosThanOnes($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func subarraysWithMoreZerosThanOnes(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun subarraysWithMoreZerosThanOnes(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int subarraysWithMoreZerosThanOnes(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func subarraysWithMoreZerosThanOnes(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef subarrays_with_more_zeros_than_ones(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def subarraysWithMoreZerosThanOnes(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn subarrays_with_more_zeros_than_ones(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (subarrays-with-more-zeros-than-ones nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec subarrays_with_more_zeros_than_ones(Nums :: [integer()]) -> integer().\nsubarrays_with_more_zeros_than_ones(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec subarrays_with_more_zeros_than_ones(nums :: [integer]) :: integer\n  def subarrays_with_more_zeros_than_ones(nums) do\n    \n  end\nend"}}}