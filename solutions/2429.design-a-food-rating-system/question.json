{"questionId": "2429", "acRate": 45.1802227826818, "difficulty": "Medium", "freqBar": 37.928989683030366, "frontendQuestionId": "2353", "paidOnly": false, "status": "ac", "title": "Design a Food Rating System", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Design", "id": "VG9waWNUYWdOb2RlOjI1", "slug": "design"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Ordered Set", "id": "VG9waWNUYWdOb2RlOjYxMDcw", "slug": "ordered-set"}], "titleSlug": "design-a-food-rating-system", "content": "<p>Design a food rating system that can do the following:</p>\n\n<ul>\n\t<li><strong>Modify</strong> the rating of a food item listed in the system.</li>\n\t<li>Return the highest-rated food item for a type of cuisine in the system.</li>\n</ul>\n\n<p>Implement the <code>FoodRatings</code> class:</p>\n\n<ul>\n\t<li><code>FoodRatings(String[] foods, String[] cuisines, int[] ratings)</code> Initializes the system. The food items are described by <code>foods</code>, <code>cuisines</code> and <code>ratings</code>, all of which have a length of <code>n</code>.\n\n\t<ul>\n\t\t<li><code>foods[i]</code> is the name of the <code>i<sup>th</sup></code> food,</li>\n\t\t<li><code>cuisines[i]</code> is the type of cuisine of the <code>i<sup>th</sup></code> food, and</li>\n\t\t<li><code>ratings[i]</code> is the initial rating of the <code>i<sup>th</sup></code> food.</li>\n\t</ul>\n\t</li>\n\t<li><code>void changeRating(String food, int newRating)</code> Changes the rating of the food item with the name <code>food</code>.</li>\n\t<li><code>String highestRated(String cuisine)</code> Returns the name of the food item that has the highest rating for the given type of <code>cuisine</code>. If there is a tie, return the item with the <strong>lexicographically smaller</strong> name.</li>\n</ul>\n\n<p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FoodRatings&quot;, &quot;highestRated&quot;, &quot;highestRated&quot;, &quot;changeRating&quot;, &quot;highestRated&quot;, &quot;changeRating&quot;, &quot;highestRated&quot;]\n[[[&quot;kimchi&quot;, &quot;miso&quot;, &quot;sushi&quot;, &quot;moussaka&quot;, &quot;ramen&quot;, &quot;bulgogi&quot;], [&quot;korean&quot;, &quot;japanese&quot;, &quot;japanese&quot;, &quot;greek&quot;, &quot;japanese&quot;, &quot;korean&quot;], [9, 12, 8, 15, 14, 7]], [&quot;korean&quot;], [&quot;japanese&quot;], [&quot;sushi&quot;, 16], [&quot;japanese&quot;], [&quot;ramen&quot;, 16], [&quot;japanese&quot;]]\n<strong>Output</strong>\n[null, &quot;kimchi&quot;, &quot;ramen&quot;, null, &quot;sushi&quot;, null, &quot;ramen&quot;]\n\n<strong>Explanation</strong>\nFoodRatings foodRatings = new FoodRatings([&quot;kimchi&quot;, &quot;miso&quot;, &quot;sushi&quot;, &quot;moussaka&quot;, &quot;ramen&quot;, &quot;bulgogi&quot;], [&quot;korean&quot;, &quot;japanese&quot;, &quot;japanese&quot;, &quot;greek&quot;, &quot;japanese&quot;, &quot;korean&quot;], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(&quot;korean&quot;); // return &quot;kimchi&quot;\n                                    // &quot;kimchi&quot; is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;ramen&quot;\n                                      // &quot;ramen&quot; is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(&quot;sushi&quot;, 16); // &quot;sushi&quot; now has a rating of 16.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;sushi&quot;\n                                      // &quot;sushi&quot; is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(&quot;ramen&quot;, 16); // &quot;ramen&quot; now has a rating of 16.\nfoodRatings.highestRated(&quot;japanese&quot;); // return &quot;ramen&quot;\n                                      // Both &quot;sushi&quot; and &quot;ramen&quot; have a rating of 16.\n                                      // However, &quot;ramen&quot; is lexicographically smaller than &quot;sushi&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>n == foods.length == cuisines.length == ratings.length</code></li>\n\t<li><code>1 &lt;= foods[i].length, cuisines[i].length &lt;= 10</code></li>\n\t<li><code>foods[i]</code>, <code>cuisines[i]</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= ratings[i] &lt;= 10<sup>8</sup></code></li>\n\t<li>All the strings in <code>foods</code> are <strong>distinct</strong>.</li>\n\t<li><code>food</code> will be the name of a food item in the system across all calls to <code>changeRating</code>.</li>\n\t<li><code>cuisine</code> will be a type of cuisine of <strong>at least one</strong> food item in the system across all calls to <code>highestRated</code>.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>changeRating</code> and <code>highestRated</code>.</li>\n</ul>\n", "hints": ["The key to solving this problem is to properly store the data using the right data structures.", "Firstly, a hash table is needed to efficiently map each food item to its cuisine and current rating.", "In addition, another hash table is needed to map cuisines to foods within each cuisine stored in an ordered set according to their ratings."], "exampleTestcases": "[\"FoodRatings\",\"highestRated\",\"highestRated\",\"changeRating\",\"highestRated\",\"changeRating\",\"highestRated\"]\n[[[\"kimchi\",\"miso\",\"sushi\",\"moussaka\",\"ramen\",\"bulgogi\"],[\"korean\",\"japanese\",\"japanese\",\"greek\",\"japanese\",\"korean\"],[9,12,8,15,14,7]],[\"korean\"],[\"japanese\"],[\"sushi\",16],[\"japanese\"],[\"ramen\",16],[\"japanese\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class FoodRatings {\npublic:\n    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {\n        \n    }\n    \n    void changeRating(string food, int newRating) {\n        \n    }\n    \n    string highestRated(string cuisine) {\n        \n    }\n};\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);\n * obj->changeRating(food,newRating);\n * string param_2 = obj->highestRated(cuisine);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class FoodRatings {\n\n    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {\n        \n    }\n    \n    public void changeRating(String food, int newRating) {\n        \n    }\n    \n    public String highestRated(String cuisine) {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * FoodRatings obj = new FoodRatings(foods, cuisines, ratings);\n * obj.changeRating(food,newRating);\n * String param_2 = obj.highestRated(cuisine);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class FoodRatings(object):\n\n    def __init__(self, foods, cuisines, ratings):\n        \"\"\"\n        :type foods: List[str]\n        :type cuisines: List[str]\n        :type ratings: List[int]\n        \"\"\"\n        \n\n    def changeRating(self, food, newRating):\n        \"\"\"\n        :type food: str\n        :type newRating: int\n        :rtype: None\n        \"\"\"\n        \n\n    def highestRated(self, cuisine):\n        \"\"\"\n        :type cuisine: str\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your FoodRatings object will be instantiated and called as such:\n# obj = FoodRatings(foods, cuisines, ratings)\n# obj.changeRating(food,newRating)\n# param_2 = obj.highestRated(cuisine)"}, {"lang": "Python3", "langSlug": "python3", "code": "class FoodRatings:\n\n    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):\n        \n\n    def changeRating(self, food: str, newRating: int) -> None:\n        \n\n    def highestRated(self, cuisine: str) -> str:\n        \n\n\n# Your FoodRatings object will be instantiated and called as such:\n# obj = FoodRatings(foods, cuisines, ratings)\n# obj.changeRating(food,newRating)\n# param_2 = obj.highestRated(cuisine)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FoodRatings;\n\n\nFoodRatings* foodRatingsCreate(char** foods, int foodsSize, char** cuisines, int cuisinesSize, int* ratings, int ratingsSize) {\n    \n}\n\nvoid foodRatingsChangeRating(FoodRatings* obj, char* food, int newRating) {\n    \n}\n\nchar* foodRatingsHighestRated(FoodRatings* obj, char* cuisine) {\n    \n}\n\nvoid foodRatingsFree(FoodRatings* obj) {\n    \n}\n\n/**\n * Your FoodRatings struct will be instantiated and called as such:\n * FoodRatings* obj = foodRatingsCreate(foods, foodsSize, cuisines, cuisinesSize, ratings, ratingsSize);\n * foodRatingsChangeRating(obj, food, newRating);\n \n * char* param_2 = foodRatingsHighestRated(obj, cuisine);\n \n * foodRatingsFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class FoodRatings {\n\n    public FoodRatings(string[] foods, string[] cuisines, int[] ratings) {\n        \n    }\n    \n    public void ChangeRating(string food, int newRating) {\n        \n    }\n    \n    public string HighestRated(string cuisine) {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * FoodRatings obj = new FoodRatings(foods, cuisines, ratings);\n * obj.ChangeRating(food,newRating);\n * string param_2 = obj.HighestRated(cuisine);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} foods\n * @param {string[]} cuisines\n * @param {number[]} ratings\n */\nvar FoodRatings = function(foods, cuisines, ratings) {\n    \n};\n\n/** \n * @param {string} food \n * @param {number} newRating\n * @return {void}\n */\nFoodRatings.prototype.changeRating = function(food, newRating) {\n    \n};\n\n/** \n * @param {string} cuisine\n * @return {string}\n */\nFoodRatings.prototype.highestRated = function(cuisine) {\n    \n};\n\n/** \n * Your FoodRatings object will be instantiated and called as such:\n * var obj = new FoodRatings(foods, cuisines, ratings)\n * obj.changeRating(food,newRating)\n * var param_2 = obj.highestRated(cuisine)\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class FoodRatings {\n    constructor(foods: string[], cuisines: string[], ratings: number[]) {\n        \n    }\n\n    changeRating(food: string, newRating: number): void {\n        \n    }\n\n    highestRated(cuisine: string): string {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * var obj = new FoodRatings(foods, cuisines, ratings)\n * obj.changeRating(food,newRating)\n * var param_2 = obj.highestRated(cuisine)\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class FoodRatings {\n    /**\n     * @param String[] $foods\n     * @param String[] $cuisines\n     * @param Integer[] $ratings\n     */\n    function __construct($foods, $cuisines, $ratings) {\n        \n    }\n  \n    /**\n     * @param String $food\n     * @param Integer $newRating\n     * @return NULL\n     */\n    function changeRating($food, $newRating) {\n        \n    }\n  \n    /**\n     * @param String $cuisine\n     * @return String\n     */\n    function highestRated($cuisine) {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * $obj = FoodRatings($foods, $cuisines, $ratings);\n * $obj->changeRating($food, $newRating);\n * $ret_2 = $obj->highestRated($cuisine);\n */"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass FoodRatings {\n\n    init(_ foods: [String], _ cuisines: [String], _ ratings: [Int]) {\n        \n    }\n    \n    func changeRating(_ food: String, _ newRating: Int) {\n        \n    }\n    \n    func highestRated(_ cuisine: String) -> String {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * let obj = FoodRatings(foods, cuisines, ratings)\n * obj.changeRating(food, newRating)\n * let ret_2: String = obj.highestRated(cuisine)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class FoodRatings(foods: Array<String>, cuisines: Array<String>, ratings: IntArray) {\n\n    fun changeRating(food: String, newRating: Int) {\n        \n    }\n\n    fun highestRated(cuisine: String): String {\n        \n    }\n\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * var obj = FoodRatings(foods, cuisines, ratings)\n * obj.changeRating(food,newRating)\n * var param_2 = obj.highestRated(cuisine)\n */"}, {"lang": "Dart", "langSlug": "dart", "code": "class FoodRatings {\n\n  FoodRatings(List<String> foods, List<String> cuisines, List<int> ratings) {\n    \n  }\n  \n  void changeRating(String food, int newRating) {\n    \n  }\n  \n  String highestRated(String cuisine) {\n    \n  }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * FoodRatings obj = FoodRatings(foods, cuisines, ratings);\n * obj.changeRating(food,newRating);\n * String param2 = obj.highestRated(cuisine);\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type FoodRatings struct {\n    \n}\n\n\nfunc Constructor(foods []string, cuisines []string, ratings []int) FoodRatings {\n    \n}\n\n\nfunc (this *FoodRatings) ChangeRating(food string, newRating int)  {\n    \n}\n\n\nfunc (this *FoodRatings) HighestRated(cuisine string) string {\n    \n}\n\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * obj := Constructor(foods, cuisines, ratings);\n * obj.ChangeRating(food,newRating);\n * param_2 := obj.HighestRated(cuisine);\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class FoodRatings\n\n=begin\n    :type foods: String[]\n    :type cuisines: String[]\n    :type ratings: Integer[]\n=end\n    def initialize(foods, cuisines, ratings)\n        \n    end\n\n\n=begin\n    :type food: String\n    :type new_rating: Integer\n    :rtype: Void\n=end\n    def change_rating(food, new_rating)\n        \n    end\n\n\n=begin\n    :type cuisine: String\n    :rtype: String\n=end\n    def highest_rated(cuisine)\n        \n    end\n\n\nend\n\n# Your FoodRatings object will be instantiated and called as such:\n# obj = FoodRatings.new(foods, cuisines, ratings)\n# obj.change_rating(food, new_rating)\n# param_2 = obj.highest_rated(cuisine)"}, {"lang": "Scala", "langSlug": "scala", "code": "class FoodRatings(_foods: Array[String], _cuisines: Array[String], _ratings: Array[Int]) {\n\n    def changeRating(food: String, newRating: Int): Unit = {\n        \n    }\n\n    def highestRated(cuisine: String): String = {\n        \n    }\n\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * val obj = new FoodRatings(foods, cuisines, ratings)\n * obj.changeRating(food,newRating)\n * val param_2 = obj.highestRated(cuisine)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct FoodRatings {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FoodRatings {\n\n    fn new(foods: Vec<String>, cuisines: Vec<String>, ratings: Vec<i32>) -> Self {\n        \n    }\n    \n    fn change_rating(&self, food: String, new_rating: i32) {\n        \n    }\n    \n    fn highest_rated(&self, cuisine: String) -> String {\n        \n    }\n}\n\n/**\n * Your FoodRatings object will be instantiated and called as such:\n * let obj = FoodRatings::new(foods, cuisines, ratings);\n * obj.change_rating(food, newRating);\n * let ret_2: String = obj.highest_rated(cuisine);\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define food-ratings%\n  (class object%\n    (super-new)\n    \n    ; foods : (listof string?)\n    ; cuisines : (listof string?)\n    ; ratings : (listof exact-integer?)\n    (init-field\n      foods\n      cuisines\n      ratings)\n    \n    ; change-rating : string? exact-integer? -> void?\n    (define/public (change-rating food new-rating)\n      )\n    ; highest-rated : string? -> string?\n    (define/public (highest-rated cuisine)\n      )))\n\n;; Your food-ratings% object will be instantiated and called as such:\n;; (define obj (new food-ratings% [foods foods] [cuisines cuisines] [ratings ratings]))\n;; (send obj change-rating food new-rating)\n;; (define param_2 (send obj highest-rated cuisine))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec food_ratings_init_(Foods :: [unicode:unicode_binary()], Cuisines :: [unicode:unicode_binary()], Ratings :: [integer()]) -> any().\nfood_ratings_init_(Foods, Cuisines, Ratings) ->\n  .\n\n-spec food_ratings_change_rating(Food :: unicode:unicode_binary(), NewRating :: integer()) -> any().\nfood_ratings_change_rating(Food, NewRating) ->\n  .\n\n-spec food_ratings_highest_rated(Cuisine :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfood_ratings_highest_rated(Cuisine) ->\n  .\n\n\n%% Your functions will be called as such:\n%% food_ratings_init_(Foods, Cuisines, Ratings),\n%% food_ratings_change_rating(Food, NewRating),\n%% Param_2 = food_ratings_highest_rated(Cuisine),\n\n%% food_ratings_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule FoodRatings do\n  @spec init_(foods :: [String.t], cuisines :: [String.t], ratings :: [integer]) :: any\n  def init_(foods, cuisines, ratings) do\n    \n  end\n\n  @spec change_rating(food :: String.t, new_rating :: integer) :: any\n  def change_rating(food, new_rating) do\n    \n  end\n\n  @spec highest_rated(cuisine :: String.t) :: String.t\n  def highest_rated(cuisine) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FoodRatings.init_(foods, cuisines, ratings)\n# FoodRatings.change_rating(food, new_rating)\n# param_2 = FoodRatings.highest_rated(cuisine)\n\n# FoodRatings.init_ will be called before every test case, in which you can do some necessary initializations."}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "design-a-number-container-system", "title": "Design a Number Container System", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "most-popular-video-creator", "title": "Most Popular Video Creator", "isPaidOnly": false}]}