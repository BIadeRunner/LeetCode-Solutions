{"questionId": "1065", "acRate": 57.69048337717217, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1016", "paidOnly": false, "status": "ac", "title": "Binary String With Substrings Representing 1 To N", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "binary-string-with-substrings-representing-1-to-n", "content": "<p>Given a binary string <code>s</code> and a positive integer <code>n</code>, return <code>true</code><em> if the binary representation of all the integers in the range </em><code>[1, n]</code><em> are <strong>substrings</strong> of </em><code>s</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"0110\", n = 3\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"0110\", n = 4\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["We only need to check substrings of length at most 30, because 10^9 has 30 bits."], "exampleTestcases": "\"0110\"\n3\n\"0110\"\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool queryString(string s, int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean queryString(String s, int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def queryString(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def queryString(self, s: str, n: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool queryString(char* s, int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool QueryString(string s, int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} n\n * @return {boolean}\n */\nvar queryString = function(s, n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function queryString(s: string, n: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $n\n     * @return Boolean\n     */\n    function queryString($s, $n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func queryString(_ s: String, _ n: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun queryString(s: String, n: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool queryString(String s, int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func queryString(s string, n int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} n\n# @return {Boolean}\ndef query_string(s, n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def queryString(s: String, n: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn query_string(s: String, n: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (query-string s n)\n  (-> string? exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec query_string(S :: unicode:unicode_binary(), N :: integer()) -> boolean().\nquery_string(S, N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec query_string(s :: String.t, n :: integer) :: boolean\n  def query_string(s, n) do\n    \n  end\nend"}], "similarQuestionList": []}