{"question_id": "1061", "problem_slug": "number-of-valid-subarrays", "problem_title": "Number of Valid Subarrays", "content": "Given an integer array nums, return the number of non-empty subarrays with the leftmost element of the subarray not larger than other elements in the subarray.\nA subarray is a contiguous part of an array.\n \nExample 1:\n\nInput: nums = [1,4,2,5,3]\nOutput: 11\nExplanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].\n\nExample 2:\n\nInput: nums = [3,2,1]\nOutput: 3\nExplanation: The 3 valid subarrays are: [3],[2],[1].\n\nExample 3:\n\nInput: nums = [2,2,2]\nOutput: 6\nExplanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n0 <= nums[i] <= 105\n\n", "hints": ["Given a data structure that answers queries of the type to find the minimum in a range of an array (Range minimum query (RMQ) sparse table) in O(1) time. How can you solve this problem?", "For each starting index do a binary search with an RMQ to find the ending possible position."], "exampleTestcases": "[1,4,2,5,3]\n[3,2,1]\n[2,2,2]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int validSubarrays(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int validSubarrays(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validSubarrays(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int validSubarrays(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ValidSubarrays(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar validSubarrays = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validSubarrays(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function validSubarrays($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validSubarrays(nums: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int validSubarrays(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validSubarrays(nums []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef valid_subarrays(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validSubarrays(nums: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_subarrays(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_subarrays(Nums :: [integer()]) -> integer().\nvalid_subarrays(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_subarrays(nums :: [integer]) :: integer\n  def valid_subarrays(nums) do\n    \n  end\nend"}}}