{"question_id": "1131", "problem_slug": "count-substrings-with-only-one-distinct-letter", "problem_title": "Count Substrings with Only One Distinct Letter", "content": "Given a string s, return the number of substrings that have only one distinct letter.\n \nExample 1:\n\nInput: s = \"aaaba\"\nOutput: 8\nExplanation: The substrings with one distinct letter are \"aaa\", \"aa\", \"a\", \"b\".\n\"aaa\" occurs 1 time.\n\"aa\" occurs 2 times.\n\"a\" occurs 4 times.\n\"b\" occurs 1 time.\nSo the answer is 1 + 2 + 4 + 1 = 8.\n\nExample 2:\n\nInput: s = \"aaaaaaaaaa\"\nOutput: 55\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns[i] consists of only lowercase English letters.\n\n", "hints": ["What if we divide the string into substrings containing only one distinct character with maximal lengths?", "Now that you have sub-strings with only one distinct character, Try to come up with a formula that counts the number of its sub-strings.", "Alternatively, Observe that the constraints are small so you can use brute force."], "exampleTestcases": "\"aaaba\"\n\"aaaaaaaaaa\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countLetters(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countLetters(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countLetters(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countLetters(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountLetters(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countLetters = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countLetters(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countLetters($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countLetters(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countLetters(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countLetters(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countLetters(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_letters(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countLetters(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_letters(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-letters s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_letters(S :: unicode:unicode_binary()) -> integer().\ncount_letters(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_letters(s :: String.t) :: integer\n  def count_letters(s) do\n    \n  end\nend"}}}