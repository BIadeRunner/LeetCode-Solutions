{"questionId": "1131", "acRate": 80.15987345705167, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1180", "paidOnly": true, "status": "ac", "title": "Count Substrings with Only One Distinct Letter", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "count-substrings-with-only-one-distinct-letter", "content": "<p>Given a string <code>s</code>, return <em>the number of substrings that have only <strong>one distinct</strong> letter</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaba&quot;\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>The substrings with one distinct letter are &quot;aaa&quot;, &quot;aa&quot;, &quot;a&quot;, &quot;b&quot;.\n&quot;aaa&quot; occurs 1 time.\n&quot;aa&quot; occurs 2 times.\n&quot;a&quot; occurs 4 times.\n&quot;b&quot; occurs 1 time.\nSo the answer is 1 + 2 + 4 + 1 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaaaaaaaa&quot;\n<strong>Output:</strong> 55\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": ["What if we divide the string into substrings containing only one distinct character with maximal lengths?", "Now that you have sub-strings with only one distinct character, Try to come up with a formula that counts the number of its sub-strings.", "Alternatively, Observe that the constraints are small so you can use brute force."], "exampleTestcases": "\"aaaba\"\n\"aaaaaaaaaa\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countLetters(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countLetters(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countLetters(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countLetters(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountLetters(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countLetters = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countLetters(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countLetters($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countLetters(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countLetters(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countLetters(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countLetters(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_letters(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countLetters(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_letters(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-letters s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_letters(S :: unicode:unicode_binary()) -> integer().\ncount_letters(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_letters(s :: String.t) :: integer\n  def count_letters(s) do\n    \n  end\nend"}], "similarQuestionList": []}