{"questionId": "370", "acRate": 71.86552563585585, "difficulty": "Medium", "freqBar": 24.04958010177, "frontendQuestionId": "370", "paidOnly": true, "status": "ac", "title": "Range Addition", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "range-addition", "content": "<p>You are given an integer <code>length</code> and an array <code>updates</code> where <code>updates[i] = [startIdx<sub>i</sub>, endIdx<sub>i</sub>, inc<sub>i</sub>]</code>.</p>\n\n<p>You have an array <code>arr</code> of length <code>length</code> with all zeros, and you have some operation to apply on <code>arr</code>. In the <code>i<sup>th</sup></code> operation, you should increment all the elements <code>arr[startIdx<sub>i</sub>], arr[startIdx<sub>i</sub> + 1], ..., arr[endIdx<sub>i</sub>]</code> by <code>inc<sub>i</sub></code>.</p>\n\n<p>Return <code>arr</code> <em>after applying all the</em> <code>updates</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/rangeadd-grid.jpg\" style=\"width: 413px; height: 573px;\" />\n<pre>\n<strong>Input:</strong> length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]\n<strong>Output:</strong> [-2,0,3,5,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]\n<strong>Output:</strong> [0,-4,2,2,2,4,4,-4,-4,-4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= updates.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= startIdx<sub>i</sub> &lt;= endIdx<sub>i</sub> &lt; length</code></li>\n\t<li><code>-1000 &lt;= inc<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n", "hints": ["Thinking of using advanced data structures? You are thinking it too complicated.", "For each update operation, do you really need to update all elements between i and j?", "Update only the first and end element is sufficient.", "The optimal time complexity is O(<b><i>k</i></b> + <b><i>n</i></b>) and uses O(1) extra space."], "exampleTestcases": "5\n[[1,3,2],[2,4,3],[0,2,-2]]\n10\n[[2,4,6],[5,6,8],[1,9,-4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] getModifiedArray(int length, int[][] updates) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getModifiedArray(self, length, updates):\n        \"\"\"\n        :type length: int\n        :type updates: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getModifiedArray(int length, int** updates, int updatesSize, int* updatesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] GetModifiedArray(int length, int[][] updates) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} length\n * @param {number[][]} updates\n * @return {number[]}\n */\nvar getModifiedArray = function(length, updates) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getModifiedArray(length: number, updates: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $length\n     * @param Integer[][] $updates\n     * @return Integer[]\n     */\n    function getModifiedArray($length, $updates) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getModifiedArray(_ length: Int, _ updates: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getModifiedArray(length: Int, updates: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> getModifiedArray(int length, List<List<int>> updates) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getModifiedArray(length int, updates [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} length\n# @param {Integer[][]} updates\n# @return {Integer[]}\ndef get_modified_array(length, updates)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getModifiedArray(length: Int, updates: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_modified_array(length: i32, updates: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-modified-array length updates)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_modified_array(Length :: integer(), Updates :: [[integer()]]) -> [integer()].\nget_modified_array(Length, Updates) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_modified_array(length :: integer, updates :: [[integer]]) :: [integer]\n  def get_modified_array(length, updates) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "range-addition-ii", "title": "Range Addition II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-positions-on-street-with-required-brightness", "title": "Count Positions on Street With Required Brightness", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "shifting-letters-ii", "title": "Shifting Letters II", "isPaidOnly": false}]}