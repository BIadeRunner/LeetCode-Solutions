{"question_id": "370", "problem_slug": "range-addition", "problem_title": "Range Addition", "content": "You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci].\nYou have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi] by inci.\nReturn arr after applying all the updates.\n \nExample 1:\n\n\nInput: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]\nOutput: [-2,0,3,5,3]\n\nExample 2:\n\nInput: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]\nOutput: [0,-4,2,2,2,4,4,-4,-4,-4]\n\n \nConstraints:\n\n1 <= length <= 105\n0 <= updates.length <= 104\n0 <= startIdxi <= endIdxi < length\n-1000 <= inci <= 1000\n\n", "hints": ["Thinking of using advanced data structures? You are thinking it too complicated.", "For each update operation, do you really need to update all elements between i and j?", "Update only the first and end element is sufficient.", "The optimal time complexity is O(<b><i>k</i></b> + <b><i>n</i></b>) and uses O(1) extra space."], "exampleTestcases": "5\n[[1,3,2],[2,4,3],[0,2,-2]]\n10\n[[2,4,6],[5,6,8],[1,9,-4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] getModifiedArray(int length, int[][] updates) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getModifiedArray(self, length, updates):\n        \"\"\"\n        :type length: int\n        :type updates: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getModifiedArray(self, length: int, updates: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getModifiedArray(int length, int** updates, int updatesSize, int* updatesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] GetModifiedArray(int length, int[][] updates) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} length\n * @param {number[][]} updates\n * @return {number[]}\n */\nvar getModifiedArray = function(length, updates) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getModifiedArray(length: number, updates: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $length\n     * @param Integer[][] $updates\n     * @return Integer[]\n     */\n    function getModifiedArray($length, $updates) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getModifiedArray(_ length: Int, _ updates: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getModifiedArray(length: Int, updates: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> getModifiedArray(int length, List<List<int>> updates) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getModifiedArray(length int, updates [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} length\n# @param {Integer[][]} updates\n# @return {Integer[]}\ndef get_modified_array(length, updates)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getModifiedArray(length: Int, updates: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_modified_array(length: i32, updates: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-modified-array length updates)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_modified_array(Length :: integer(), Updates :: [[integer()]]) -> [integer()].\nget_modified_array(Length, Updates) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_modified_array(length :: integer, updates :: [[integer]]) :: [integer]\n  def get_modified_array(length, updates) do\n    \n  end\nend"}}}