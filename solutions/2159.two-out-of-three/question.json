{"question_id": "2159", "problem_slug": "two-out-of-three", "problem_title": "Two Out of Three", "content": "Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.\n \nExample 1:\n\nInput: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\nOutput: [3,2]\nExplanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.\n\nExample 2:\n\nInput: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]\nOutput: [2,3,1]\nExplanation: The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.\n\nExample 3:\n\nInput: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]\nOutput: []\nExplanation: No value is present in at least two arrays.\n\n \nConstraints:\n\n1 <= nums1.length, nums2.length, nums3.length <= 100\n1 <= nums1[i], nums2[j], nums3[k] <= 100\n\n", "hints": ["What data structure can we use to help us quickly find whether an element belongs in an array?", "Can we count the frequencies of the elements in each array?"], "exampleTestcases": "[1,1,3,2]\n[2,3]\n[3]\n[3,1]\n[2,3]\n[1,2]\n[1,2,2]\n[4,3,3]\n[5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def twoOutOfThree(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoOutOfThree(int* nums1, int nums1Size, int* nums2, int nums2Size, int* nums3, int nums3Size, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> TwoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number[]} nums3\n * @return {number[]}\n */\nvar twoOutOfThree = function(nums1, nums2, nums3) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function twoOutOfThree(nums1: number[], nums2: number[], nums3: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer[] $nums3\n     * @return Integer[]\n     */\n    function twoOutOfThree($nums1, $nums2, $nums3) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func twoOutOfThree(_ nums1: [Int], _ nums2: [Int], _ nums3: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun twoOutOfThree(nums1: IntArray, nums2: IntArray, nums3: IntArray): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> twoOutOfThree(List<int> nums1, List<int> nums2, List<int> nums3) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func twoOutOfThree(nums1 []int, nums2 []int, nums3 []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer[]} nums3\n# @return {Integer[]}\ndef two_out_of_three(nums1, nums2, nums3)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def twoOutOfThree(nums1: Array[Int], nums2: Array[Int], nums3: Array[Int]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn two_out_of_three(nums1: Vec<i32>, nums2: Vec<i32>, nums3: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (two-out-of-three nums1 nums2 nums3)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec two_out_of_three(Nums1 :: [integer()], Nums2 :: [integer()], Nums3 :: [integer()]) -> [integer()].\ntwo_out_of_three(Nums1, Nums2, Nums3) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec two_out_of_three(nums1 :: [integer], nums2 :: [integer], nums3 :: [integer]) :: [integer]\n  def two_out_of_three(nums1, nums2, nums3) do\n    \n  end\nend"}}}