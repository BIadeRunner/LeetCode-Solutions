{"question_id": "1404", "problem_slug": "print-immutable-linked-list-in-reverse", "problem_title": "Print Immutable Linked List in Reverse", "content": "You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n\nImmutableListNode: An interface of immutable linked list, you are given the head of the list.\n\nYou need to use the following functions to access the linked list (you can't access the ImmutableListNode directly):\n\nImmutableListNode.printValue(): Print value of the current node.\nImmutableListNode.getNext(): Return the next node.\n\nThe input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.\n \nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [4,3,2,1]\n\nExample 2:\n\nInput: head = [0,-4,-1,3,-5]\nOutput: [-5,3,-1,-4,0]\n\nExample 3:\n\nInput: head = [-2,0,6,4,4,-6]\nOutput: [-6,4,4,6,0,-2]\n\n\n\n \nConstraints:\n\nThe length of the linked list is between [1, 1000].\nThe value of each node in the linked list is between [-1000, 1000].\n\n \nFollow up:\nCould you solve this problem in:\n\nConstant space complexity?\nLinear time complexity and less than linear space complexity?\n\n", "hints": [], "exampleTestcases": "[1,2,3,4]\n[0,-4,-1,3,-5]\n[-2,0,6,4,4,-6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n * public:\n *    void printValue(); // print the value of the node.\n *    ImmutableListNode* getNext(); // return the next node.\n * };\n */\n\nclass Solution {\npublic:\n    void printLinkedListInReverse(ImmutableListNode* head) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * interface ImmutableListNode {\n *     public void printValue(); // print the value of this node.\n *     public ImmutableListNode getNext(); // return the next node.\n * };\n */\n\nclass Solution {\n    public void printLinkedListInReverse(ImmutableListNode head) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "#   \"\"\"\n#   This is the ImmutableListNode's API interface.\n#   You should not implement it, or speculate about its implementation.\n#   \"\"\"\n#   class ImmutableListNode(object):\n#      def printValue(self): # print the value of this node.\n# .        \"\"\"\n#          :rtype None\n#          \"\"\"\n#\n#      def getNext(self): # return the next node.\n# .        \"\"\"\n#          :rtype ImmutableListNode\n#          \"\"\"\n\nclass Solution(object):\n    def printLinkedListInReverse(self, head):\n        \"\"\"\n        :type head: ImmutableListNode\n        :rtype: None\n        \"\"\"\n\t\t"}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is the ImmutableListNode's API interface.\n# You should not implement it, or speculate about its implementation.\n# \"\"\"\n# class ImmutableListNode:\n#     def printValue(self) -> None: # print the value of this node.\n#     def getNext(self) -> 'ImmutableListNode': # return the next node.\n\nclass Solution:\n    def printLinkedListInReverse(self, head: 'ImmutableListNode') -> None:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Definition for ImmutableListNode.\n * struct ImmutableListNode {\n *     struct ImmutableListNode* (*getNext)(struct ImmutableListNode*); // return the next node.\n *     void (*printValue)(struct ImmutableListNode*); // print the value of the node.\n * };\n */\n\nvoid printLinkedListInReverse(struct ImmutableListNode* head) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     public void PrintValue(); // print the value of this node.\n *     public ImmutableListNode GetNext(); // return the next node.\n * }\n */\n\npublic class Solution {\n    public void PrintLinkedListInReverse(ImmutableListNode head) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * function ImmutableListNode() {\n *    @ return {void}\n *    this.printValue = function() { // print the value of this node.\n *       ...\n *    }; \n *\n *    @return {ImmutableListNode}\n *    this.getNext = function() { // return the next node.\n *       ...\n *    };\n * };\n */\n\n/**\n * @param {ImmutableListNode} head\n * @return {void}\n */\nvar printLinkedListInReverse = function(head) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ImmutableListNode {\n *      printValue() {}\n *\n *      getNext(): ImmutableListNode {}\n * }\n */\n\nfunction printLinkedListInReverse(head: ImmutableListNode) {\n\t\n};"}, "PHP": {"langSlug": "php", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     public function printValue() {} // print the value of this node.\n *     public function getNext() {} // return the next node.\n * };\n */\n\nclass Solution {\n    /**\n     * @param  ImmutableListNode  $head\n     * @return void\n     */\n    function printLinkedListInReverse($head) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for ImmutableListNode.\n * public class ImmutableListNode {\n *     public func printValue() {}\n *     public func getNext() -> ImmutableListNode? {}\n * }\n */\n\nclass Solution {\n    func printLinkedListInReverse(_ head: ImmutableListNode?) {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode {\n *     fun getNext(): ImmutableListNode? {} // return the next node.\n *     fun printValue() {} // print the value of this node.\n * };\n */\n\nclass Solution {\n\tfun printLinkedListInReverse(head:ImmutableListNode?) {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "/*   Below is the interface for ImmutableListNode, which is already defined for you.\n *\n *   type ImmutableListNode struct {\n *       \n *   }\n *\n *   func (this *ImmutableListNode) getNext() ImmutableListNode {\n *\t\t// return the next node.\n *   }\n *\n *   func (this *ImmutableListNode) printValue() {\n *\t\t// print the value of this node.\n *   }\n */\n\nfunc printLinkedListInReverse(head ImmutableListNode) {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "#   This is the ImmutableListNode's API interface.\n#   You should not implement it, or speculate about its implementation.\n#\n#   class ImmutableListNode\n#      def printValue()\n# .        print the value of this node.\n#      def end\n#          \"\"\"\n#\n#      def getNext()\n# .        return the next node.\n#      end\n#   end\n\ndef printLinkedListInReverse(head)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "/**\n * // This is the ImmutableListNode's API interface.\n * // You should not implement it, or speculate about its implementation.\n * class ImmutableListNode{\n *     def printValue(): Unit = {} // print the value of this node.\n *     def getNext(): ImmutableListNode = {} // return the next node.\n * };\n */\n\nobject Solution {\n    def printLinkedListInReverse(head: ImmutableListNode): Unit = {\n        \n    }\n}"}}}