{"question_id": "2434", "problem_slug": "design-a-number-container-system", "problem_title": "Design a Number Container System", "content": "Design a number container system that can do the following:\n\nInsert or Replace a number at the given index in the system.\nReturn the smallest index for the given number in the system.\n\nImplement the NumberContainers class:\n\nNumberContainers() Initializes the number container system.\nvoid change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.\nint find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.\n\n \nExample 1:\n\nInput\n[\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]\nOutput\n[null, -1, null, null, null, null, 1, null, 2]\n\nExplanation\nNumberContainers nc = new NumberContainers();\nnc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.\nnc.change(2, 10); // Your container at index 2 will be filled with number 10.\nnc.change(1, 10); // Your container at index 1 will be filled with number 10.\nnc.change(3, 10); // Your container at index 3 will be filled with number 10.\nnc.change(5, 10); // Your container at index 5 will be filled with number 10.\nnc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.\nnc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. \nnc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.\n\n \nConstraints:\n\n1 <= index, number <= 109\nAt most 105 calls will be made in total to change and find.\n\n", "hints": ["Use a hash table to efficiently map each number to all of its indices in the container and to map each index to their current number.", "In addition, you can use ordered set to store all of the indices for each number to solve the find method. Do not forget to update the ordered set according to the change method."], "exampleTestcases": "[\"NumberContainers\",\"find\",\"change\",\"change\",\"change\",\"change\",\"find\",\"change\",\"find\"]\n[[],[10],[2,10],[1,10],[3,10],[5,10],[10],[1,20],[10]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class NumberContainers {\npublic:\n    NumberContainers() {\n        \n    }\n    \n    void change(int index, int number) {\n        \n    }\n    \n    int find(int number) {\n        \n    }\n};\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * NumberContainers* obj = new NumberContainers();\n * obj->change(index,number);\n * int param_2 = obj->find(number);\n */"}, "Java": {"langSlug": "java", "code": "class NumberContainers {\n\n    public NumberContainers() {\n        \n    }\n    \n    public void change(int index, int number) {\n        \n    }\n    \n    public int find(int number) {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * NumberContainers obj = new NumberContainers();\n * obj.change(index,number);\n * int param_2 = obj.find(number);\n */"}, "Python": {"langSlug": "python", "code": "class NumberContainers(object):\n\n    def __init__(self):\n        \n\n    def change(self, index, number):\n        \"\"\"\n        :type index: int\n        :type number: int\n        :rtype: None\n        \"\"\"\n        \n\n    def find(self, number):\n        \"\"\"\n        :type number: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)"}, "Python3": {"langSlug": "python3", "code": "class NumberContainers:\n\n    def __init__(self):\n        \n\n    def change(self, index: int, number: int) -> None:\n        \n\n    def find(self, number: int) -> int:\n        \n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} NumberContainers;\n\n\nNumberContainers* numberContainersCreate() {\n    \n}\n\nvoid numberContainersChange(NumberContainers* obj, int index, int number) {\n    \n}\n\nint numberContainersFind(NumberContainers* obj, int number) {\n    \n}\n\nvoid numberContainersFree(NumberContainers* obj) {\n    \n}\n\n/**\n * Your NumberContainers struct will be instantiated and called as such:\n * NumberContainers* obj = numberContainersCreate();\n * numberContainersChange(obj, index, number);\n \n * int param_2 = numberContainersFind(obj, number);\n \n * numberContainersFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class NumberContainers {\n\n    public NumberContainers() {\n        \n    }\n    \n    public void Change(int index, int number) {\n        \n    }\n    \n    public int Find(int number) {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * NumberContainers obj = new NumberContainers();\n * obj.Change(index,number);\n * int param_2 = obj.Find(number);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "\nvar NumberContainers = function() {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} number\n * @return {void}\n */\nNumberContainers.prototype.change = function(index, number) {\n    \n};\n\n/** \n * @param {number} number\n * @return {number}\n */\nNumberContainers.prototype.find = function(number) {\n    \n};\n\n/** \n * Your NumberContainers object will be instantiated and called as such:\n * var obj = new NumberContainers()\n * obj.change(index,number)\n * var param_2 = obj.find(number)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class NumberContainers {\n    constructor() {\n        \n    }\n\n    change(index: number, number: number): void {\n        \n    }\n\n    find(number: number): number {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * var obj = new NumberContainers()\n * obj.change(index,number)\n * var param_2 = obj.find(number)\n */"}, "PHP": {"langSlug": "php", "code": "class NumberContainers {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $index\n     * @param Integer $number\n     * @return NULL\n     */\n    function change($index, $number) {\n        \n    }\n  \n    /**\n     * @param Integer $number\n     * @return Integer\n     */\n    function find($number) {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * $obj = NumberContainers();\n * $obj->change($index, $number);\n * $ret_2 = $obj->find($number);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass NumberContainers {\n\n    init() {\n        \n    }\n    \n    func change(_ index: Int, _ number: Int) {\n        \n    }\n    \n    func find(_ number: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * let obj = NumberContainers()\n * obj.change(index, number)\n * let ret_2: Int = obj.find(number)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class NumberContainers() {\n\n    fun change(index: Int, number: Int) {\n        \n    }\n\n    fun find(number: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * var obj = NumberContainers()\n * obj.change(index,number)\n * var param_2 = obj.find(number)\n */"}, "Dart": {"langSlug": "dart", "code": "class NumberContainers {\n\n  NumberContainers() {\n    \n  }\n  \n  void change(int index, int number) {\n    \n  }\n  \n  int find(int number) {\n    \n  }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * NumberContainers obj = NumberContainers();\n * obj.change(index,number);\n * int param2 = obj.find(number);\n */"}, "Go": {"langSlug": "golang", "code": "type NumberContainers struct {\n    \n}\n\n\nfunc Constructor() NumberContainers {\n    \n}\n\n\nfunc (this *NumberContainers) Change(index int, number int)  {\n    \n}\n\n\nfunc (this *NumberContainers) Find(number int) int {\n    \n}\n\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Change(index,number);\n * param_2 := obj.Find(number);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class NumberContainers\n    def initialize()\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type number: Integer\n    :rtype: Void\n=end\n    def change(index, number)\n        \n    end\n\n\n=begin\n    :type number: Integer\n    :rtype: Integer\n=end\n    def find(number)\n        \n    end\n\n\nend\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers.new()\n# obj.change(index, number)\n# param_2 = obj.find(number)"}, "Scala": {"langSlug": "scala", "code": "class NumberContainers() {\n\n    def change(index: Int, number: Int): Unit = {\n        \n    }\n\n    def find(number: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * val obj = new NumberContainers()\n * obj.change(index,number)\n * val param_2 = obj.find(number)\n */"}, "Rust": {"langSlug": "rust", "code": "struct NumberContainers {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumberContainers {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn change(&self, index: i32, number: i32) {\n        \n    }\n    \n    fn find(&self, number: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your NumberContainers object will be instantiated and called as such:\n * let obj = NumberContainers::new();\n * obj.change(index, number);\n * let ret_2: i32 = obj.find(number);\n */"}, "Racket": {"langSlug": "racket", "code": "(define number-containers%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; change : exact-integer? exact-integer? -> void?\n    (define/public (change index number)\n      )\n    ; find : exact-integer? -> exact-integer?\n    (define/public (find number)\n      )))\n\n;; Your number-containers% object will be instantiated and called as such:\n;; (define obj (new number-containers%))\n;; (send obj change index number)\n;; (define param_2 (send obj find number))"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_containers_init_() -> any().\nnumber_containers_init_() ->\n  .\n\n-spec number_containers_change(Index :: integer(), Number :: integer()) -> any().\nnumber_containers_change(Index, Number) ->\n  .\n\n-spec number_containers_find(Number :: integer()) -> integer().\nnumber_containers_find(Number) ->\n  .\n\n\n%% Your functions will be called as such:\n%% number_containers_init_(),\n%% number_containers_change(Index, Number),\n%% Param_2 = number_containers_find(Number),\n\n%% number_containers_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule NumberContainers do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec change(index :: integer, number :: integer) :: any\n  def change(index, number) do\n    \n  end\n\n  @spec find(number :: integer) :: integer\n  def find(number) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# NumberContainers.init_()\n# NumberContainers.change(index, number)\n# param_2 = NumberContainers.find(number)\n\n# NumberContainers.init_ will be called before every test case, in which you can do some necessary initializations."}}}