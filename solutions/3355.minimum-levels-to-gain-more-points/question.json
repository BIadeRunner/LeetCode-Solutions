{"question_id": "3355", "problem_slug": "minimum-levels-to-gain-more-points", "problem_title": "Minimum Levels to Gain More Points", "content": "You are given a binary array possible of length n.\nAlice and Bob are playing a game that consists of n levels. Some of the levels in the game are impossible to clear while others can always be cleared. In particular, if possible[i] == 0, then the ith level is impossible to clear for both the players. A player gains 1 point on clearing a level and loses 1 point if the player fails to clear it.\nAt the start of the game, Alice will play some levels in the given order starting from the 0th level, after which Bob will play for the rest of the levels.\nAlice wants to know the minimum number of levels she should play to gain more points than Bob, if both players play optimally to maximize their points.\nReturn the minimum number of levels Alice should play to gain more points. If this is not possible, return -1.\nNote that each player must play at least 1 level.\n \nExample 1:\n\nInput: possible = [1,0,1,0]\nOutput: 1\nExplanation:\nLet's look at all the levels that Alice can play up to:\n\nIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.\nIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.\nIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.\n\nAlice must play a minimum of 1 level to gain more points.\n\nExample 2:\n\nInput: possible = [1,1,1,1,1]\nOutput: 3\nExplanation:\nLet's look at all the levels that Alice can play up to:\n\nIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.\nIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.\nIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.\nIf Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.\n\nAlice must play a minimum of 3 levels to gain more points.\n\nExample 3:\n\nInput: possible = [0,0]\nOutput: -1\nExplanation:\nThe only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.\n\n \nConstraints:\n\n2 <= n == possible.length <= 105\npossible[i] is either 0 or 1.\n\n", "hints": ["Change all <code>0</code> in possible array into <code>-1</code>.", "We need to find the shortest non-empty prefix of the new possible array such that the sum of elements in it is strictly larger than the remaining part."], "exampleTestcases": "[1,0,1,0]\n[1,1,1,1,1]\n[0,0]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumLevels(vector<int>& possible) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumLevels(int[] possible) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumLevels(self, possible):\n        \"\"\"\n        :type possible: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumLevels(self, possible: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumLevels(int* possible, int possibleSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumLevels(int[] possible) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} possible\n * @return {number}\n */\nvar minimumLevels = function(possible) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumLevels(possible: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $possible\n     * @return Integer\n     */\n    function minimumLevels($possible) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumLevels(_ possible: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumLevels(possible: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumLevels(List<int> possible) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumLevels(possible []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} possible\n# @return {Integer}\ndef minimum_levels(possible)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumLevels(possible: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_levels(possible: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-levels possible)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_levels(Possible :: [integer()]) -> integer().\nminimum_levels(Possible) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_levels(possible :: [integer]) :: integer\n  def minimum_levels(possible) do\n    \n  end\nend"}}}