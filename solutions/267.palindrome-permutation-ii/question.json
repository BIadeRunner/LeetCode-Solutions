{"questionId": "267", "acRate": 41.8903898517399, "difficulty": "Medium", "freqBar": 26.649847215761195, "frontendQuestionId": "267", "paidOnly": true, "status": "ac", "title": "Palindrome Permutation II", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}], "titleSlug": "palindrome-permutation-ii", "content": "<p>Given a string s, return <em>all the palindromic permutations (without duplicates) of it</em>.</p>\n\n<p>You may return the answer in <strong>any order</strong>. If <code>s</code> has no palindromic permutation, return an empty list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aabb\"\n<strong>Output:</strong> [\"abba\",\"baab\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\"\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 16</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n", "hints": ["If a palindromic permutation exists, we just need to generate the first half of the string.", "To generate all distinct permutations of a (half of) string, use a similar approach from: <a href=\"/problems/permutations-ii\">Permutations II</a> or <a href=\"/problems/next-permutation\">Next Permutation</a>."], "exampleTestcases": "\"aabb\"\n\"abc\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generatePalindromes(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> generatePalindromes(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def generatePalindromes(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def generatePalindromes(self, s: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generatePalindromes(char* s, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GeneratePalindromes(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar generatePalindromes = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function generatePalindromes(s: string): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function generatePalindromes($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func generatePalindromes(_ s: String) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun generatePalindromes(s: String): List<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> generatePalindromes(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func generatePalindromes(s string) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef generate_palindromes(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def generatePalindromes(s: String): List[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn generate_palindromes(s: String) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (generate-palindromes s)\n  (-> string? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec generate_palindromes(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_palindromes(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_palindromes(s :: String.t) :: [String.t]\n  def generate_palindromes(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "next-permutation", "title": "Next Permutation", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "permutations-ii", "title": "Permutations II", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "palindrome-permutation", "title": "Palindrome Permutation", "isPaidOnly": true}]}