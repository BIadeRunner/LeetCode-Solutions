{"question_id": "267", "problem_slug": "palindrome-permutation-ii", "problem_title": "Palindrome Permutation II", "content": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.\n \nExample 1:\nInput: s = \"aabb\"\nOutput: [\"abba\",\"baab\"]\nExample 2:\nInput: s = \"abc\"\nOutput: []\n\n \nConstraints:\n\n1 <= s.length <= 16\ns consists of only lowercase English letters.\n\n", "hints": ["If a palindromic permutation exists, we just need to generate the first half of the string.", "To generate all distinct permutations of a (half of) string, use a similar approach from: <a href=\"/problems/permutations-ii\">Permutations II</a> or <a href=\"/problems/next-permutation\">Next Permutation</a>."], "exampleTestcases": "\"aabb\"\n\"abc\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> generatePalindromes(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> generatePalindromes(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def generatePalindromes(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def generatePalindromes(self, s: str) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generatePalindromes(char* s, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> GeneratePalindromes(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar generatePalindromes = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function generatePalindromes(s: string): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function generatePalindromes($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func generatePalindromes(_ s: String) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun generatePalindromes(s: String): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> generatePalindromes(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func generatePalindromes(s string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef generate_palindromes(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def generatePalindromes(s: String): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn generate_palindromes(s: String) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (generate-palindromes s)\n  (-> string? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec generate_palindromes(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\ngenerate_palindromes(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_palindromes(s :: String.t) :: [String.t]\n  def generate_palindromes(s) do\n    \n  end\nend"}}}