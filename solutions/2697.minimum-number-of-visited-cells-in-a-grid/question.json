{"questionId": "2697", "acRate": 24.790656079781034, "difficulty": "Hard", "freqBar": 28.979918709233317, "frontendQuestionId": "2617", "paidOnly": false, "status": "ac", "title": "Minimum Number of Visited Cells in a Grid", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Monotonic Stack", "id": "VG9waWNUYWdOb2RlOjYxMDU0", "slug": "monotonic-stack"}], "titleSlug": "minimum-number-of-visited-cells-in-a-grid", "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code>. Your initial position is at the <strong>top-left</strong> cell <code>(0, 0)</code>.</p>\n\n<p>Starting from the cell <code>(i, j)</code>, you can move to one of the following cells:</p>\n\n<ul>\n\t<li>Cells <code>(i, k)</code> with <code>j &lt; k &lt;= grid[i][j] + j</code> (rightward movement), or</li>\n\t<li>Cells <code>(k, j)</code> with <code>i &lt; k &lt;= grid[i][j] + i</code> (downward movement).</li>\n</ul>\n\n<p>Return <em>the minimum number of cells you need to visit to reach the <strong>bottom-right</strong> cell</em> <code>(m - 1, n - 1)</code>. If there is no valid path, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex1.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The image above shows one of the paths that visits exactly 4 cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex2.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The image above shows one of the paths that visits exactly 3 cells.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/26/ex3.png\" style=\"width: 181px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,1,0],[1,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be proven that no path exists.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt; m * n</code></li>\n\t<li><code>grid[m - 1][n - 1] == 0</code></li>\n</ul>\n", "hints": ["For each cell (i,j), it is critical to find out the minimum number of steps to reach (i,j), denoted dis[i][j], quickly, given the tight constraint.", "Calculate dis[i][j] going left to right, top to bottom.", "Suppose we want to calculate dis[i][j], keep track of a priority queue that stores (dis[i][k], i, k) for all k \u2264 j, and another priority queue that stores (dis[k][j], k, j) for all k \u2264 i."], "exampleTestcases": "[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\n[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\n[[2,1,0],[1,0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumVisitedCells(vector<vector<int>>& grid) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumVisitedCells(int[][] grid) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumVisitedCells(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumVisitedCells(self, grid: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumVisitedCells(int** grid, int gridSize, int* gridColSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumVisitedCells(int[][] grid) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumVisitedCells = function(grid) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumVisitedCells(grid: number[][]): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumVisitedCells($grid) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumVisitedCells(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumVisitedCells(grid: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumVisitedCells(List<List<int>> grid) {\n\n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumVisitedCells(grid [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_visited_cells(grid)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumVisitedCells(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_visited_cells(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-visited-cells grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_visited_cells(Grid :: [[integer()]]) -> integer().\nminimum_visited_cells(Grid) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_visited_cells(grid :: [[integer]]) :: integer\n  def minimum_visited_cells(grid) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "jump-game-ii", "title": "Jump Game II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "jump-game", "title": "Jump Game", "isPaidOnly": false}]}