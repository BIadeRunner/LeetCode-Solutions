{"question_id": "1881", "problem_slug": "closest-subsequence-sum", "problem_title": "Closest Subsequence Sum", "content": "You are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.\n \nExample 1:\n\nInput: nums = [5,-7,3,5], goal = 6\nOutput: 0\nExplanation: Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n\nExample 2:\n\nInput: nums = [7,-9,15,-2], goal = -5\nOutput: 1\nExplanation: Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n\nExample 3:\n\nInput: nums = [1,2,3], goal = -7\nOutput: 7\n\n \nConstraints:\n\n1 <= nums.length <= 40\n-107 <= nums[i] <= 107\n-109 <= goal <= 109\n\n", "hints": ["The naive solution is to check all possible subsequences. This works in O(2^n).", "Divide the array into two parts of nearly is equal size.", "Consider all subsets of one part and make a list of all possible subset sums and sort this list.", "Consider all subsets of the other part, and for each one, let its sum = x, do binary search to get the nearest possible value to goal - x in the first part."], "exampleTestcases": "[5,-7,3,5]\n6\n[7,-9,15,-2]\n-5\n[1,2,3]\n-7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minAbsDifference(vector<int>& nums, int goal) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minAbsDifference(int[] nums, int goal) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minAbsDifference(self, nums, goal):\n        \"\"\"\n        :type nums: List[int]\n        :type goal: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minAbsDifference(self, nums: List[int], goal: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minAbsDifference(int* nums, int numsSize, int goal) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinAbsDifference(int[] nums, int goal) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} goal\n * @return {number}\n */\nvar minAbsDifference = function(nums, goal) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minAbsDifference(nums: number[], goal: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $goal\n     * @return Integer\n     */\n    function minAbsDifference($nums, $goal) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minAbsDifference(_ nums: [Int], _ goal: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minAbsDifference(nums: IntArray, goal: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minAbsDifference(List<int> nums, int goal) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minAbsDifference(nums []int, goal int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} goal\n# @return {Integer}\ndef min_abs_difference(nums, goal)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minAbsDifference(nums: Array[Int], goal: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_abs_difference(nums: Vec<i32>, goal: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-abs-difference nums goal)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_abs_difference(Nums :: [integer()], Goal :: integer()) -> integer().\nmin_abs_difference(Nums, Goal) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_abs_difference(nums :: [integer], goal :: integer) :: integer\n  def min_abs_difference(nums, goal) do\n    \n  end\nend"}}}