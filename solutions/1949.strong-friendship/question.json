{"questionId": "2097", "acRate": 54.68979711849457, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1949", "paidOnly": true, "status": "ac", "title": "Strong Friendship", "topicTags": [{"name": "Database", "id": "VG9waWNUYWdOb2RlOjYxMDQz", "slug": "database"}], "titleSlug": "strong-friendship", "content": "<p>Table: <code>Friendship</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user1_id    | int  |\n| user2_id    | int  |\n+-------------+------+\n(user1_id, user2_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates that the users user1_id and user2_id are friends.\nNote that user1_id &lt; user2_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A friendship between a pair of friends <code>x</code> and <code>y</code> is <strong>strong</strong> if <code>x</code> and <code>y</code> have <strong>at least three</strong> common friends.</p>\n\n<p>Write a solution to find all the <strong>strong friendships</strong>.</p>\n\n<p>Note that the result table should not contain duplicates with <code>user1_id &lt; user2_id</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 2        | 3        |\n| 1        | 4        |\n| 2        | 4        |\n| 1        | 5        |\n| 2        | 5        |\n| 1        | 7        |\n| 3        | 7        |\n| 1        | 6        |\n| 3        | 6        |\n| 2        | 6        |\n+----------+----------+\n<strong>Output:</strong> \n+----------+----------+---------------+\n| user1_id | user2_id | common_friend |\n+----------+----------+---------------+\n| 1        | 2        | 4             |\n| 1        | 3        | 3             |\n+----------+----------+---------------+\n<strong>Explanation:</strong> \nUsers 1 and 2 have 4 common friends (3, 4, 5, and 6).\nUsers 1 and 3 have 3 common friends (2, 6, and 7).\nWe did not include the friendship of users 2 and 3 because they only have two common friends (1 and 6).\n</pre>\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[1,2],[1,3],[2,3],[1,4],[2,4],[1,5],[2,5],[1,7],[3,7],[1,6],[3,6],[2,6]]}}", "codeSnippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, {"lang": "Pandas", "langSlug": "pythondata", "code": "import pandas as pd\n\ndef strong_friendship(friendship: pd.DataFrame) -> pd.DataFrame:\n    "}, {"lang": "PostgreSQL", "langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "page-recommendations", "title": "Page Recommendations", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "page-recommendations-ii", "title": "Page Recommendations II", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "leetcodify-friends-recommendations", "title": "Leetcodify Friends Recommendations", "isPaidOnly": true}]}