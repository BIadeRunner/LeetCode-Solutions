{"questionId": "1764", "acRate": 39.024375120139396, "difficulty": "Easy", "freqBar": 38.86010425961403, "frontendQuestionId": "1668", "paidOnly": false, "status": "ac", "title": "Maximum Repeating Substring", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}], "titleSlug": "maximum-repeating-substring", "content": "<p>For a string <code>sequence</code>, a string <code>word</code> is <strong><code>k</code>-repeating</strong> if <code>word</code> concatenated <code>k</code> times is a substring of <code>sequence</code>. The <code>word</code>&#39;s <strong>maximum <code>k</code>-repeating value</strong> is the highest value <code>k</code> where <code>word</code> is <code>k</code>-repeating in <code>sequence</code>. If <code>word</code> is not a substring of <code>sequence</code>, <code>word</code>&#39;s maximum <code>k</code>-repeating value is <code>0</code>.</p>\n\n<p>Given strings <code>sequence</code> and <code>word</code>, return <em>the <strong>maximum <code>k</code>-repeating value</strong> of <code>word</code> in <code>sequence</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ab&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>&quot;abab&quot; is a substring in &quot;<u>abab</u>c&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ba&quot;\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>&quot;ba&quot; is a substring in &quot;a<u>ba</u>bc&quot;. &quot;baba&quot; is not a substring in &quot;ababc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ac&quot;\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>&quot;ac&quot; is not a substring in &quot;ababc&quot;. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sequence.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>sequence</code> and <code>word</code>&nbsp;contains only lowercase English letters.</li>\n</ul>\n", "hints": ["The constraints are low enough for a brute force approach.", "Try every k value from 0 upwards until word is no longer k-repeating."], "exampleTestcases": "\"ababc\"\n\"ab\"\n\"ababc\"\n\"ba\"\n\"ababc\"\n\"ac\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxRepeating(string sequence, string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxRepeating(String sequence, String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxRepeating(self, sequence, word):\n        \"\"\"\n        :type sequence: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxRepeating(self, sequence: str, word: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxRepeating(char* sequence, char* word) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxRepeating(string sequence, string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} sequence\n * @param {string} word\n * @return {number}\n */\nvar maxRepeating = function(sequence, word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxRepeating(sequence: string, word: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sequence\n     * @param String $word\n     * @return Integer\n     */\n    function maxRepeating($sequence, $word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxRepeating(_ sequence: String, _ word: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxRepeating(sequence: String, word: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxRepeating(String sequence, String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxRepeating(sequence string, word string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} sequence\n# @param {String} word\n# @return {Integer}\ndef max_repeating(sequence, word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxRepeating(sequence: String, word: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_repeating(sequence: String, word: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-repeating sequence word)\n  (-> string? string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_repeating(Sequence :: unicode:unicode_binary(), Word :: unicode:unicode_binary()) -> integer().\nmax_repeating(Sequence, Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_repeating(sequence :: String.t, word :: String.t) :: integer\n  def max_repeating(sequence, word) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times", "title": "Detect Pattern of Length M Repeated K or More Times", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic", "title": "Minimum Number of Operations to Make Word K-Periodic", "isPaidOnly": false}]}