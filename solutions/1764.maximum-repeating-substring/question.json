{"question_id": "1764", "problem_slug": "maximum-repeating-substring", "problem_title": "Maximum Repeating Substring", "content": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiven strings sequence and word, return the maximum k-repeating value of word in sequence.\n \nExample 1:\n\nInput: sequence = \"ababc\", word = \"ab\"\nOutput: 2\nExplanation: \"abab\" is a substring in \"ababc\".\n\nExample 2:\n\nInput: sequence = \"ababc\", word = \"ba\"\nOutput: 1\nExplanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\".\n\nExample 3:\n\nInput: sequence = \"ababc\", word = \"ac\"\nOutput: 0\nExplanation: \"ac\" is not a substring in \"ababc\". \n\n \nConstraints:\n\n1 <= sequence.length <= 100\n1 <= word.length <= 100\nsequence and word contains only lowercase English letters.\n\n", "hints": ["The constraints are low enough for a brute force approach.", "Try every k value from 0 upwards until word is no longer k-repeating."], "exampleTestcases": "\"ababc\"\n\"ab\"\n\"ababc\"\n\"ba\"\n\"ababc\"\n\"ac\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxRepeating(string sequence, string word) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxRepeating(String sequence, String word) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxRepeating(self, sequence, word):\n        \"\"\"\n        :type sequence: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxRepeating(self, sequence: str, word: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxRepeating(char* sequence, char* word) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxRepeating(string sequence, string word) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} sequence\n * @param {string} word\n * @return {number}\n */\nvar maxRepeating = function(sequence, word) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxRepeating(sequence: string, word: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $sequence\n     * @param String $word\n     * @return Integer\n     */\n    function maxRepeating($sequence, $word) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxRepeating(_ sequence: String, _ word: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxRepeating(sequence: String, word: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxRepeating(String sequence, String word) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxRepeating(sequence string, word string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} sequence\n# @param {String} word\n# @return {Integer}\ndef max_repeating(sequence, word)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxRepeating(sequence: String, word: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_repeating(sequence: String, word: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-repeating sequence word)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_repeating(Sequence :: unicode:unicode_binary(), Word :: unicode:unicode_binary()) -> integer().\nmax_repeating(Sequence, Word) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_repeating(sequence :: String.t, word :: String.t) :: integer\n  def max_repeating(sequence, word) do\n    \n  end\nend"}}}