{"question_id": "2693", "problem_slug": "maximum-price-to-fill-a-bag", "problem_title": "Maximum Price to Fill a Bag", "content": "You are given a 2D integer array items where items[i] = [pricei, weighti] denotes the price and weight of the ith item, respectively.\nYou are also given a positive integer capacity.\nEach item can be divided into two items with ratios part1 and part2, where part1 + part2 == 1.\n\nThe weight of the first item is weighti * part1 and the price of the first item is pricei * part1.\nSimilarly, the weight of the second item is weighti * part2 and the price of the second item is pricei * part2.\n\nReturn the maximum total price to fill a bag of capacity capacity with given items. If it is impossible to fill a bag return -1. Answers within 10-5 of the actual answer will be considered accepted.\n \nExample 1:\n\nInput: items = [[50,1],[10,8]], capacity = 5\nOutput: 55.00000\nExplanation: \nWe divide the 2nd item into two parts with part1 = 0.5 and part2 = 0.5.\nThe price and weight of the 1st item are 5, 4. And similarly, the price and the weight of the 2nd item are 5, 4.\nThe array items after operation becomes [[50,1],[5,4],[5,4]]. \nTo fill a bag with capacity 5 we take the 1st element with a price of 50 and the 2nd element with a price of 5.\nIt can be proved that 55.0 is the maximum total price that we can achieve.\n\nExample 2:\n\nInput: items = [[100,30]], capacity = 50\nOutput: -1.00000\nExplanation: It is impossible to fill a bag with the given item.\n\n \nConstraints:\n\n1 <= items.length <= 105\nitems[i].length == 2\n1 <= pricei, weighti <= 104\n1 <= capacity <= 109\n\n", "hints": ["If the total weight of the items is less than the capacity, then it is impossible to fill a bag.", "The intended solution greedily chooses items to fill a bag.", "Sort items in decreasing order of price/weight and greedily fill a bag. The main intuition behind the greedy strategy is that we try to take the highest possible price for 1 unit of weight."], "exampleTestcases": "[[50,1],[10,8]]\n5\n[[100,30]]\n50", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    double maxPrice(vector<vector<int>>& items, int capacity) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double maxPrice(int[][] items, int capacity) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxPrice(self, items, capacity):\n        \"\"\"\n        :type items: List[List[int]]\n        :type capacity: int\n        :rtype: float\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n        "}, "C": {"langSlug": "c", "code": "double maxPrice(int** items, int itemsSize, int* itemsColSize, int capacity) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double MaxPrice(int[][] items, int capacity) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} items\n * @param {number} capacity\n * @return {number}\n */\nvar maxPrice = function(items, capacity) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxPrice(items: number[][], capacity: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $items\n     * @param Integer $capacity\n     * @return Float\n     */\n    function maxPrice($items, $capacity) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxPrice(_ items: [[Int]], _ capacity: Int) -> Double {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxPrice(items: Array<IntArray>, capacity: Int): Double {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  double maxPrice(List<List<int>> items, int capacity) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxPrice(items [][]int, capacity int) float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} items\n# @param {Integer} capacity\n# @return {Float}\ndef max_price(items, capacity)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxPrice(items: Array[Array[Int]], capacity: Int): Double = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_price(items: Vec<Vec<i32>>, capacity: i32) -> f64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-price items capacity)\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_price(Items :: [[integer()]], Capacity :: integer()) -> float().\nmax_price(Items, Capacity) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_price(items :: [[integer]], capacity :: integer) :: float\n  def max_price(items, capacity) do\n    \n  end\nend"}}}