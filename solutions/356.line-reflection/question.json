{"question_id": "356", "problem_slug": "line-reflection", "problem_title": "Line Reflection", "content": "Given n points on a 2D plane, find if there is such a line parallel to the y-axis that reflects the given points symmetrically.\nIn other words, answer whether or not if there exists a line that after reflecting all points over the given line, the original points' set is the same as the reflected ones.\nNote that there can be repeated points.\n \nExample 1:\n\n\nInput: points = [[1,1],[-1,1]]\nOutput: true\nExplanation: We can choose the line x = 0.\n\nExample 2:\n\n\nInput: points = [[1,1],[-1,-1]]\nOutput: false\nExplanation: We can't choose a line.\n\n \nConstraints:\n\nn == points.length\n1 <= n <= 104\n-108 <= points[i][j] <= 108\n\n \nFollow up: Could you do better than O(n2)?\n", "hints": ["Find the smallest and largest x-value for all points.", "If there is a line then it should be at y = (minX + maxX) / 2.", "For each point, make sure that it has a reflected point in the opposite side."], "exampleTestcases": "[[1,1],[-1,1]]\n[[1,1],[-1,-1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isReflected(vector<vector<int>>& points) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean isReflected(int[][] points) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def isReflected(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def isReflected(self, points: List[List[int]]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool isReflected(int** points, int pointsSize, int* pointsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsReflected(int[][] points) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {boolean}\n */\nvar isReflected = function(points) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function isReflected(points: number[][]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Boolean\n     */\n    function isReflected($points) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func isReflected(_ points: [[Int]]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun isReflected(points: Array<IntArray>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool isReflected(List<List<int>> points) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func isReflected(points [][]int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Boolean}\ndef is_reflected(points)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def isReflected(points: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_reflected(points: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (is-reflected points)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec is_reflected(Points :: [[integer()]]) -> boolean().\nis_reflected(Points) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_reflected(points :: [[integer]]) :: boolean\n  def is_reflected(points) do\n    \n  end\nend"}}}