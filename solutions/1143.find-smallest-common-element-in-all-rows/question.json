{"question_id": "1143", "problem_slug": "find-smallest-common-element-in-all-rows", "problem_title": "Find Smallest Common Element in All Rows", "content": "Given an m x n matrix mat where every row is sorted in strictly increasing order, return the smallest common element in all rows.\nIf there is no common element, return -1.\n \nExample 1:\n\nInput: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]\nOutput: 5\n\nExample 2:\n\nInput: mat = [[1,2,3],[2,3,4],[2,3,5]]\nOutput: 2\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 500\n1 <= mat[i][j] <= 104\nmat[i] is sorted in strictly increasing order.\n\n", "hints": ["Notice that each row has no duplicates.", "Is counting the frequency of elements enough to find the answer?", "Use a data structure to count the frequency of elements.", "Find an element whose frequency equals the number of rows."], "exampleTestcases": "[[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]\n[[1,2,3],[2,3,4],[2,3,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestCommonElement(vector<vector<int>>& mat) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int smallestCommonElement(int[][] mat) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestCommonElement(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestCommonElement(self, mat: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int smallestCommonElement(int** mat, int matSize, int* matColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SmallestCommonElement(int[][] mat) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar smallestCommonElement = function(mat) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestCommonElement(mat: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function smallestCommonElement($mat) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestCommonElement(_ mat: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestCommonElement(mat: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int smallestCommonElement(List<List<int>> mat) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestCommonElement(mat [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef smallest_common_element(mat)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestCommonElement(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_common_element(mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-common-element mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_common_element(Mat :: [[integer()]]) -> integer().\nsmallest_common_element(Mat) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_common_element(mat :: [[integer]]) :: integer\n  def smallest_common_element(mat) do\n    \n  end\nend"}}}