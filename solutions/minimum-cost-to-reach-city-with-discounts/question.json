{"questionId": "2230", "acRate": 59.83025229624462, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2093", "paidOnly": true, "status": "ac", "title": "Minimum Cost to Reach City With Discounts", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Shortest Path", "id": "VG9waWNUYWdOb2RlOjYxMDc2", "slug": "shortest-path"}], "titleSlug": "minimum-cost-to-reach-city-with-discounts", "content": "<p>A series of highways connect <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>highways</code> where <code>highways[i] = [city1<sub>i</sub>, city2<sub>i</sub>, toll<sub>i</sub>]</code> indicates that there is a highway that connects <code>city1<sub>i</sub></code> and <code>city2<sub>i</sub></code>, allowing a car to go from <code>city1<sub>i</sub></code> to <code>city2<sub>i</sub></code> <strong>and vice versa</strong> for a cost of <code>toll<sub>i</sub></code>.</p>\n\n<p>You are also given an integer <code>discounts</code> which represents the number of discounts you have. You can use a discount to travel across the <code>i<sup>th</sup></code> highway for a cost of <code>toll<sub>i</sub> / 2</code> (<strong>integer</strong> <strong>division</strong>). Each discount may only be used <strong>once</strong>, and you can only use at most <strong>one</strong> discount per highway.</p>\n\n<p>Return <em>the <strong>minimum total cost</strong> to go from city </em><code>0</code><em> to city </em><code>n - 1</code><em>, or </em><code>-1</code><em> if it is not possible to go from city </em><code>0</code><em> to city </em><code>n - 1</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong><br />\n<img src=\"https://assets.leetcode.com/uploads/2021/11/29/image-20211129222429-1.png\" style=\"height: 250px; width: 404px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nGo from 0 to 1 for a cost of 4.\nGo from 1 to 4 and use a discount for a cost of 11 / 2 = 5.\nThe minimum cost to go from 0 to 4 is 4 + 5 = 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong><br />\n<img src=\"https://assets.leetcode.com/uploads/2021/11/29/image-20211129222650-4.png\" style=\"width: 284px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20\n<strong>Output:</strong> 8\n<strong>Explanation:</strong>\nGo from 0 to 1 and use a discount for a cost of 6 / 2 = 3.\nGo from 1 to 2 and use a discount for a cost of 7 / 2 = 3.\nGo from 2 to 3 and use a discount for a cost of 5 / 2 = 2.\nThe minimum cost to go from 0 to 3 is 3 + 3 + 2 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong><br />\n<img src=\"https://assets.leetcode.com/uploads/2021/11/29/image-20211129222531-3.png\" style=\"width: 275px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIt is impossible to go from 0 to 3 so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= highways.length &lt;= 1000</code></li>\n\t<li><code>highways[i].length == 3</code></li>\n\t<li><code>0 &lt;= city1<sub>i</sub>, city2<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>city1<sub>i</sub> != city2<sub>i</sub></code></li>\n\t<li><code>0 &lt;= toll<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= discounts &lt;= 500</code></li>\n\t<li>There are no duplicate highways.</li>\n</ul>\n", "hints": ["Try to construct a graph out of highways. What type of graph is this?", "We essentially need to find the minimum distance to get from node 0 to node n - 1 in an undirected weighted graph. What algorithm should we use to do this?", "Use Dijkstra's algorithm to find the minimum weight path. Keep track of the minimum distance to each vertex with d discounts left"], "exampleTestcases": "5\n[[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]]\n1\n4\n[[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]]\n20\n4\n[[0,1,3],[2,3,2]]\n0", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumCost(int n, vector<vector<int>>& highways, int discounts) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumCost(int n, int[][] highways, int discounts) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumCost(self, n, highways, discounts):\n        \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type discounts: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumCost(int n, int** highways, int highwaysSize, int* highwaysColSize, int discounts) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumCost(int n, int[][] highways, int discounts) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} highways\n * @param {number} discounts\n * @return {number}\n */\nvar minimumCost = function(n, highways, discounts) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumCost(n: number, highways: number[][], discounts: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $highways\n     * @param Integer $discounts\n     * @return Integer\n     */\n    function minimumCost($n, $highways, $discounts) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumCost(_ n: Int, _ highways: [[Int]], _ discounts: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumCost(n: Int, highways: Array<IntArray>, discounts: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumCost(int n, List<List<int>> highways, int discounts) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumCost(n int, highways [][]int, discounts int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} highways\n# @param {Integer} discounts\n# @return {Integer}\ndef minimum_cost(n, highways, discounts)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumCost(n: Int, highways: Array[Array[Int]], discounts: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_cost(n: i32, highways: Vec<Vec<i32>>, discounts: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-cost n highways discounts)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_cost(N :: integer(), Highways :: [[integer()]], Discounts :: integer()) -> integer().\nminimum_cost(N, Highways, Discounts) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_cost(n :: integer, highways :: [[integer]], discounts :: integer) :: integer\n  def minimum_cost(n, highways, discounts) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "connecting-cities-with-minimum-cost", "title": "Connecting Cities With Minimum Cost", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "isPaidOnly": false}]}