{"questionId": "2519", "acRate": 88.05029682081897, "difficulty": "Medium", "freqBar": 27.75272287376839, "frontendQuestionId": "2433", "paidOnly": false, "status": "ac", "title": "Find The Original Array of Prefix Xor", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "find-the-original-array-of-prefix-xor", "content": "<p>You are given an <strong>integer</strong> array <code>pref</code> of size <code>n</code>. Find and return <em>the array </em><code>arr</code><em> of size </em><code>n</code><em> that satisfies</em>:</p>\n\n<ul>\n\t<li><code>pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]</code>.</li>\n</ul>\n\n<p>Note that <code>^</code> denotes the <strong>bitwise-xor</strong> operation.</p>\n\n<p>It can be proven that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pref = [5,2,0,3,1]\n<strong>Output:</strong> [5,7,2,3,2]\n<strong>Explanation:</strong> From the array [5,7,2,3,2] we have the following:\n- pref[0] = 5.\n- pref[1] = 5 ^ 7 = 2.\n- pref[2] = 5 ^ 7 ^ 2 = 0.\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pref = [13]\n<strong>Output:</strong> [13]\n<strong>Explanation:</strong> We have pref[0] = arr[0] = 13.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pref.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= pref[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Consider the following equation: x ^ a = b. How can you find x?", "Notice that arr[i] ^ pref[i-1] = pref[i]. This is the same as the previous equation."], "exampleTestcases": "[5,2,0,3,1]\n[13]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findArray(vector<int>& pref) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findArray(int[] pref) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findArray(self, pref):\n        \"\"\"\n        :type pref: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findArray(self, pref: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findArray(int* pref, int prefSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindArray(int[] pref) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} pref\n * @return {number[]}\n */\nvar findArray = function(pref) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findArray(pref: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $pref\n     * @return Integer[]\n     */\n    function findArray($pref) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findArray(_ pref: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findArray(pref: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> findArray(List<int> pref) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findArray(pref []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} pref\n# @return {Integer[]}\ndef find_array(pref)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findArray(pref: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_array(pref: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-array pref)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_array(Pref :: [integer()]) -> [integer()].\nfind_array(Pref) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_array(pref :: [integer]) :: [integer]\n  def find_array(pref) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "single-number-iii", "title": "Single Number III", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor", "title": "Count Triplets That Can Form Two Arrays of Equal XOR", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "decode-xored-array", "title": "Decode XORed Array", "isPaidOnly": false}]}