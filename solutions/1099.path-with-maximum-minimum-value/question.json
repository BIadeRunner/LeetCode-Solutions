{"question_id": "1099", "problem_slug": "path-with-maximum-minimum-value", "problem_title": "Path With Maximum Minimum Value", "content": "Given an m x n integer matrix grid, return the maximum score of a path starting at (0, 0) and ending at (m - 1, n - 1) moving in the 4 cardinal directions.\nThe score of a path is the minimum value in that path.\n\nFor example, the score of the path 8 → 4 → 5 → 9 is 4.\n\n \nExample 1:\n\n\nInput: grid = [[5,4,5],[1,2,6],[7,4,6]]\nOutput: 4\nExplanation: The path with the maximum score is highlighted in yellow. \n\nExample 2:\n\n\nInput: grid = [[2,2,1,2,2,2],[1,2,2,2,1,2]]\nOutput: 2\n\nExample 3:\n\n\nInput: grid = [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]\nOutput: 3\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100\n0 <= grid[i][j] <= 109\n\n", "hints": ["What if we sort each cell of the matrix by the value?", "Don't include small values in your path if you can only include large values.", "Let's keep adding a possible cell to use in the path incrementally with decreasing values.", "If the start and end cells are connected then we don't need to add more cells.", "Use union-find data structure to check connectivity and return as answer the value of the given cell that makes start and end cells connected."], "exampleTestcases": "[[5,4,5],[1,2,6],[7,4,6]]\n[[2,2,1,2,2,2],[1,2,2,2,1,2]]\n[[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumMinimumPath(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumMinimumPath(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumMinimumPath(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumMinimumPath(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximumMinimumPath(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumMinimumPath(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maximumMinimumPath = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumMinimumPath(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maximumMinimumPath($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumMinimumPath(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumMinimumPath(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumMinimumPath(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumMinimumPath(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef maximum_minimum_path(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumMinimumPath(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_minimum_path(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-minimum-path grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_minimum_path(Grid :: [[integer()]]) -> integer().\nmaximum_minimum_path(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_minimum_path(grid :: [[integer]]) :: integer\n  def maximum_minimum_path(grid) do\n    \n  end\nend"}}}