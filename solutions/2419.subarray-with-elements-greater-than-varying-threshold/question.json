{"question_id": "2419", "problem_slug": "subarray-with-elements-greater-than-varying-threshold", "problem_title": "Subarray With Elements Greater Than Varying Threshold", "content": "You are given an integer array nums and an integer threshold.\nFind any subarray of nums of length k such that every element in the subarray is greater than threshold / k.\nReturn the size of any such subarray. If there is no such subarray, return -1.\nA subarray is a contiguous non-empty sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [1,3,4,3,1], threshold = 6\nOutput: 3\nExplanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n\nExample 2:\n\nInput: nums = [6,5,6,5,8], threshold = 7\nOutput: 1\nExplanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i], threshold <= 109\n\n", "hints": ["For all elements to be greater than the threshold/length, the minimum element in the subarray must be greater than the threshold/length.", "For a given index, could you find the largest subarray such that the given index is the minimum element?", "Could you use a monotonic stack to get the next and previous smallest element for every index?"], "exampleTestcases": "[1,3,4,3,1]\n6\n[6,5,6,5,8]\n7", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int validSubarraySize(vector<int>& nums, int threshold) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int validSubarraySize(int[] nums, int threshold) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validSubarraySize(self, nums, threshold):\n        \"\"\"\n        :type nums: List[int]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int validSubarraySize(int* nums, int numsSize, int threshold) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ValidSubarraySize(int[] nums, int threshold) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} threshold\n * @return {number}\n */\nvar validSubarraySize = function(nums, threshold) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validSubarraySize(nums: number[], threshold: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function validSubarraySize($nums, $threshold) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validSubarraySize(_ nums: [Int], _ threshold: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validSubarraySize(nums: IntArray, threshold: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int validSubarraySize(List<int> nums, int threshold) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validSubarraySize(nums []int, threshold int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} threshold\n# @return {Integer}\ndef valid_subarray_size(nums, threshold)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validSubarraySize(nums: Array[Int], threshold: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_subarray_size(nums: Vec<i32>, threshold: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-subarray-size nums threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_subarray_size(Nums :: [integer()], Threshold :: integer()) -> integer().\nvalid_subarray_size(Nums, Threshold) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_subarray_size(nums :: [integer], threshold :: integer) :: integer\n  def valid_subarray_size(nums, threshold) do\n    \n  end\nend"}}}