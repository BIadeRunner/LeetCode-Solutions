{"question_id": "877", "problem_slug": "shortest-path-visiting-all-nodes", "problem_title": "Shortest Path Visiting All Nodes", "content": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n \nExample 1:\n\n\nInput: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]\n\nExample 2:\n\n\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]\n\n \nConstraints:\n\nn == graph.length\n1 <= n <= 12\n0 <= graph[i].length < n\ngraph[i] does not contain i.\nIf graph[a] contains b, then graph[b] contains a.\nThe input graph is always connected.\n\n", "hints": [], "exampleTestcases": "[[1,2,3],[0],[0],[0]]\n[[1],[0,2,4],[1,3,4],[2],[1,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int shortestPathLength(int[][] graph) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int shortestPathLength(int** graph, int graphSize, int* graphColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestPathLength(graph: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function shortestPathLength($graph) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int shortestPathLength(List<List<int>> graph) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestPathLength(graph [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_path_length(graph: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-path-length graph)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_path_length(Graph :: [[integer()]]) -> integer().\nshortest_path_length(Graph) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_path_length(graph :: [[integer]]) :: integer\n  def shortest_path_length(graph) do\n    \n  end\nend"}}}