{"questionId": "2666", "acRate": 40.7979407979408, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "2604", "paidOnly": true, "status": "ac", "title": "Minimum Time to Eat All Grains", "titleSlug": "minimum-time-to-eat-all-grains", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "content": "<p>There are <code>n</code> hens and <code>m</code> grains on a line. You are given the initial positions of the hens and the grains in two integer arrays <code>hens</code> and <code>grains</code> of size <code>n</code> and <code>m</code> respectively.</p>\n\n<p>Any hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains.</p>\n\n<p>In <code>1</code> second, a hen can move right or left by <code>1</code> unit. The hens can move simultaneously and independently of each other.</p>\n\n<p>Return <em>the <strong>minimum</strong> time to eat all grains if the hens act optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> hens = [3,6,7], grains = [2,4,7,9]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nOne of the ways hens eat all grains in 2 seconds is described below:\n- The first hen eats the grain at position 2 in 1 second. \n- The second hen eats the grain at position 4 in 2 seconds. \n- The third hen eats the grains at positions 7 and 9 in 2 seconds. \nSo, the maximum time needed is 2.\nIt can be proven that the hens cannot eat all grains before 2 seconds.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> hens = [4,6,109,111,213,215], grains = [5,110,214]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nOne of the ways hens eat all grains in 1 second is described below:\n- The first hen eats the grain at position 5 in 1 second. \n- The fourth hen eats the grain at position 110 in 1 second.\n- The sixth hen eats the grain at position 214 in 1 second. \n- The other hens do not move. \nSo, the maximum time needed is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hens.length, grains.length &lt;= 2*10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= hens[i], grains[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Binary search the answer.", "To check if an answer is possible, for the ith hen check how far right it can go after ensuring that it eats the leftmost uneaten grain.", "If the last grain is eaten in this process, the answer is possible."], "exampleTestcases": "[3,6,7]\n[2,4,7,9]\n[4,6,109,111,213,215]\n[5,110,214]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumTime(vector<int>& hens, vector<int>& grains) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumTime(int[] hens, int[] grains) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumTime(self, hens, grains):\n        \"\"\"\n        :type hens: List[int]\n        :type grains: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumTime(self, hens: List[int], grains: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumTime(int* hens, int hensSize, int* grains, int grainsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumTime(int[] hens, int[] grains) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} hens\n * @param {number[]} grains\n * @return {number}\n */\nvar minimumTime = function(hens, grains) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumTime(hens: number[], grains: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $hens\n     * @param Integer[] $grains\n     * @return Integer\n     */\n    function minimumTime($hens, $grains) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumTime(_ hens: [Int], _ grains: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumTime(hens: IntArray, grains: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumTime(List<int> hens, List<int> grains) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumTime(hens []int, grains []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} hens\n# @param {Integer[]} grains\n# @return {Integer}\ndef minimum_time(hens, grains)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumTime(hens: Array[Int], grains: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time(hens: Vec<i32>, grains: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-time hens grains)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_time(Hens :: [integer()], Grains :: [integer()]) -> integer().\nminimum_time(Hens, Grains) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time(hens :: [integer], grains :: [integer]) :: integer\n  def minimum_time(hens, grains) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "kth-smallest-number-in-multiplication-table", "title": "Kth Smallest Number in Multiplication Table", "isPaidOnly": false}]}