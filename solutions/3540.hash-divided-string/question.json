{"question_id": "3540", "problem_slug": "hash-divided-string", "problem_title": "Hash Divided String", "content": "You are given a string s of length n and an integer k, where n is a multiple of k. Your task is to hash the string s into a new string called result, which has a length of n / k.\nFirst, divide s into n / k substrings, each with a length of k. Then, initialize result as an empty string.\nFor each substring in order from the beginning:\n\nThe hash value of a character is the index of that character in the English alphabet (e.g., 'a' → 0, 'b' → 1, ..., 'z' → 25).\nCalculate the sum of all the hash values of the characters in the substring.\nFind the remainder of this sum when divided by 26, which is called hashedChar.\nIdentify the character in the English lowercase alphabet that corresponds to hashedChar.\nAppend that character to the end of result.\n\nReturn result.\n \nExample 1:\n\nInput: s = \"abcd\", k = 2\nOutput: \"bf\"\nExplanation:\nFirst substring: \"ab\", 0 + 1 = 1, 1 % 26 = 1, result[0] = 'b'.\nSecond substring: \"cd\", 2 + 3 = 5, 5 % 26 = 5, result[1] = 'f'.\n\nExample 2:\n\nInput: s = \"mxz\", k = 3\nOutput: \"i\"\nExplanation:\nThe only substring: \"mxz\", 12 + 23 + 25 = 60, 60 % 26 = 8, result[0] = 'i'.\n\n \nConstraints:\n\n1 <= k <= 100\nk <= s.length <= 1000\ns.length is divisible by k.\ns consists only of lowercase English letters.\n\n", "hints": ["Try to find each substring.", "Use a for loop to find <code>hashedChar</code> of each substring.", "Find the answer using <code>hashedChar</code> of each substring."], "exampleTestcases": "\"abcd\"\n2\n\"mxz\"\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string stringHash(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String stringHash(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def stringHash(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* stringHash(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string StringHash(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar stringHash = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function stringHash(s: string, k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function stringHash($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func stringHash(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun stringHash(s: String, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String stringHash(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func stringHash(s string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef string_hash(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def stringHash(s: String, k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn string_hash(s: String, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (string-hash s k)\n  (-> string? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec string_hash(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nstring_hash(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec string_hash(s :: String.t, k :: integer) :: String.t\n  def string_hash(s, k) do\n    \n  end\nend"}}}