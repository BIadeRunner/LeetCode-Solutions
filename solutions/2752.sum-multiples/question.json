{"question_id": "2752", "problem_slug": "sum-multiples", "problem_title": "Sum Multiples", "content": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfying the constraint.\n \nExample 1:\n\nInput: n = 7\nOutput: 21\nExplanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.\n\nExample 2:\n\nInput: n = 10\nOutput: 40\nExplanation: Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.\n\nExample 3:\n\nInput: n = 9\nOutput: 30\nExplanation: Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.\n\n \nConstraints:\n\n1 <= n <= 103\n\n", "hints": ["Iterate through the range 1 to n and count numbers divisible by either 3, 5, or 7."], "exampleTestcases": "7\n10\n9", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumOfMultiples(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int sumOfMultiples(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sumOfMultiples(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sumOfMultiples(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int sumOfMultiples(int n){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SumOfMultiples(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar sumOfMultiples = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sumOfMultiples(n: number): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function sumOfMultiples($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sumOfMultiples(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sumOfMultiples(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int sumOfMultiples(int n) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sumOfMultiples(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef sum_of_multiples(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sumOfMultiples(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_multiples(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (sum-of-multiples n)\n  (-> exact-integer? exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec sum_of_multiples(N :: integer()) -> integer().\nsum_of_multiples(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec sum_of_multiples(n :: integer) :: integer\n  def sum_of_multiples(n) do\n    \n  end\nend"}}}