{"question_id": "2218", "problem_slug": "paths-in-maze-that-lead-to-same-room", "problem_title": "Paths in Maze That Lead to Same Room", "content": "A maze consists of n rooms numbered from 1 to n, and some rooms are connected by corridors. You are given a 2D integer array corridors where corridors[i] = [room1i, room2i] indicates that there is a corridor connecting room1i and room2i, allowing a person in the maze to go from room1i to room2i and vice versa.\nThe designer of the maze wants to know how confusing the maze is. The confusion score of the maze is the number of different cycles of length 3.\n\nFor example, 1 → 2 → 3 → 1 is a cycle of length 3, but 1 → 2 → 3 → 4 and 1 → 2 → 3 → 2 → 1 are not.\n\nTwo cycles are considered to be different if one or more of the rooms visited in the first cycle is not in the second cycle.\nReturn the confusion score of the maze.\n \nExample 1:\n\n\nInput: n = 5, corridors = [[1,2],[5,2],[4,1],[2,4],[3,1],[3,4]]\nOutput: 2\nExplanation:\nOne cycle of length 3 is 4 → 1 → 3 → 4, denoted in red.\nNote that this is the same cycle as 3 → 4 → 1 → 3 or 1 → 3 → 4 → 1 because the rooms are the same.\nAnother cycle of length 3 is 1 → 2 → 4 → 1, denoted in blue.\nThus, there are two different cycles of length 3.\n\nExample 2:\n\n\nInput: n = 4, corridors = [[1,2],[3,4]]\nOutput: 0\nExplanation:\nThere are no cycles of length 3.\n\n \nConstraints:\n\n2 <= n <= 1000\n1 <= corridors.length <= 5 * 104\ncorridors[i].length == 2\n1 <= room1i, room2i <= n\nroom1i != room2i\nThere are no duplicate corridors.\n\n", "hints": ["If the path starts at room i, what properties must the other two rooms in the cycle have?", "The other two rooms must be connected to room i, and must be connected to each other."], "exampleTestcases": "5\n[[1,2],[5,2],[4,1],[2,4],[3,1],[3,4]]\n4\n[[1,2],[3,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfPaths(int n, vector<vector<int>>& corridors) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfPaths(int n, int[][] corridors) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfPaths(self, n, corridors):\n        \"\"\"\n        :type n: int\n        :type corridors: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfPaths(self, n: int, corridors: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfPaths(int n, int** corridors, int corridorsSize, int* corridorsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfPaths(int n, int[][] corridors) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} corridors\n * @return {number}\n */\nvar numberOfPaths = function(n, corridors) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfPaths(n: number, corridors: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $corridors\n     * @return Integer\n     */\n    function numberOfPaths($n, $corridors) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfPaths(_ n: Int, _ corridors: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfPaths(n: Int, corridors: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfPaths(int n, List<List<int>> corridors) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfPaths(n int, corridors [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} corridors\n# @return {Integer}\ndef number_of_paths(n, corridors)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfPaths(n: Int, corridors: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_paths(n: i32, corridors: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-paths n corridors)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_paths(N :: integer(), Corridors :: [[integer()]]) -> integer().\nnumber_of_paths(N, Corridors) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_paths(n :: integer, corridors :: [[integer]]) :: integer\n  def number_of_paths(n, corridors) do\n    \n  end\nend"}}}