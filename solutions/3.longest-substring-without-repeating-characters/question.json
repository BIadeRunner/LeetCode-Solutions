{"questionId": "3", "acRate": 35.594406089002135, "difficulty": "Medium", "freqBar": 93.70505379581824, "frontendQuestionId": "3", "paidOnly": false, "status": "ac", "title": "Longest Substring Without Repeating Characters", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "longest-substring-without-repeating-characters", "content": "<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n", "hints": ["Generate all possible substrings & check for each substring if it's valid and keep updating maxLen accordingly."], "exampleTestcases": "\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int lengthOfLongestSubstring(char* s) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthOfLongestSubstring(s: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-substring-with-at-most-two-distinct-characters", "title": "Longest Substring with At Most Two Distinct Characters", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "longest-substring-with-at-most-k-distinct-characters", "title": "Longest Substring with At Most K Distinct Characters", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "subarrays-with-k-different-integers", "title": "Subarrays with K Different Integers", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-erasure-value", "title": "Maximum Erasure Value", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-equal-count-substrings", "title": "Number of Equal Count Substrings", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "minimum-consecutive-cards-to-pick-up", "title": "Minimum Consecutive Cards to Pick Up", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-nice-subarray", "title": "Longest Nice Subarray", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "optimal-partition-of-string", "title": "Optimal Partition of String", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-complete-subarrays-in-an-array", "title": "Count Complete Subarrays in an Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-longest-special-substring-that-occurs-thrice-ii", "title": "Find Longest Special Substring That Occurs Thrice II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-longest-special-substring-that-occurs-thrice-i", "title": "Find Longest Special Substring That Occurs Thrice I", "isPaidOnly": false}]}