{"questionId": "3273", "acRate": 79.88706194984222, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2979", "paidOnly": true, "status": "ac", "title": "Most Expensive Item That Can Not Be Bought", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "most-expensive-item-that-can-not-be-bought", "content": "<p>You are given two <strong>distinct</strong> <strong>prime</strong> numbers <code>primeOne</code> and <code>primeTwo</code>.</p>\n\n<p>Alice and Bob are visiting a market. The market has an <strong>infinite</strong> number of items, for <strong>any</strong> positive integer <code>x</code> there exists an item whose price is <code>x</code>. Alice wants to buy some items from the market to gift to Bob. She has an <strong>infinite</strong> number of coins in the denomination <code>primeOne</code> and <code>primeTwo</code>. She wants to know the <strong>most expensive</strong> item she can <strong>not</strong> buy to gift to Bob.</p>\n\n<p>Return <em>the price of the <strong>most expensive</strong> item which Alice can not gift to Bob</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> primeOne = 2, primeTwo = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The prices of items which cannot be bought are [1,3]. It can be shown that all items with a price greater than 3 can be bought using a combination of coins of denominations 2 and 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> primeOne = 5, primeTwo = 7\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The prices of items which cannot be bought are [1,2,3,4,6,8,9,11,13,16,18,23]. It can be shown that all items with a price greater than 23 can be bought.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt; primeOne, primeTwo &lt; 10<sup>4</sup></code></li>\n\t<li><code>primeOne</code>, <code>primeTwo</code> are prime numbers.</li>\n\t<li><code>primeOne * primeTwo &lt; 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Write out a few cases. It can be seen that all items greater than <code>primeOne * primeTwo</code> can always be bought.", "If we can buy items with cost <code>i</code>, we can also buy items with price <code>i + primeOne</code> and <code>i + primeTwo</code>.", "Use dynamic programming.", "There is an O(1) solution: Use the Chicken McNugget Theorem."], "exampleTestcases": "2\n5\n5\n7", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mostExpensiveItem(int primeOne, int primeTwo) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mostExpensiveItem(int primeOne, int primeTwo) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mostExpensiveItem(self, primeOne, primeTwo):\n        \"\"\"\n        :type primeOne: int\n        :type primeTwo: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mostExpensiveItem(self, primeOne: int, primeTwo: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int mostExpensiveItem(int primeOne, int primeTwo) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MostExpensiveItem(int primeOne, int primeTwo) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} primeOne\n * @param {number} primeTwo\n * @return {number}\n */\nvar mostExpensiveItem = function(primeOne, primeTwo) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mostExpensiveItem(primeOne: number, primeTwo: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $primeOne\n     * @param Integer $primeTwo\n     * @return Integer\n     */\n    function mostExpensiveItem($primeOne, $primeTwo) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mostExpensiveItem(_ primeOne: Int, _ primeTwo: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mostExpensiveItem(primeOne: Int, primeTwo: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int mostExpensiveItem(int primeOne, int primeTwo) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mostExpensiveItem(primeOne int, primeTwo int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} prime_one\n# @param {Integer} prime_two\n# @return {Integer}\ndef most_expensive_item(prime_one, prime_two)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mostExpensiveItem(primeOne: Int, primeTwo: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn most_expensive_item(prime_one: i32, prime_two: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (most-expensive-item primeOne primeTwo)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec most_expensive_item(PrimeOne :: integer(), PrimeTwo :: integer()) -> integer().\nmost_expensive_item(PrimeOne, PrimeTwo) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_expensive_item(prime_one :: integer, prime_two :: integer) :: integer\n  def most_expensive_item(prime_one, prime_two) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "coin-change", "title": "Coin Change", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-cost-for-tickets", "title": "Minimum Cost For Tickets", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-number-of-coins-to-be-added", "title": "Minimum Number of Coins to be Added", "isPaidOnly": false}]}