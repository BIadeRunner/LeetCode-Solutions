{"questionId": "1624", "acRate": 80.73050238911536, "difficulty": "Medium", "freqBar": 44.89154070851049, "frontendQuestionId": "1485", "paidOnly": true, "status": "ac", "title": "Clone Binary Tree With Random Pointer", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Binary Tree", "id": "VG9waWNUYWdOb2RlOjYxMDU3", "slug": "binary-tree"}], "titleSlug": "clone-binary-tree-with-random-pointer", "content": "<p>A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the tree.</p>\n\n<p>The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (in the input) where the random pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>You will be given the tree in class <code>Node</code> and you should return the cloned tree in class <code>NodeCopy</code>. <code>NodeCopy</code> class is just a clone of <code>Node</code> class with the same attributes and constructors.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_1.png\" style=\"width: 500px; height: 473px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,null],null,[4,3],[7,0]]\n<strong>Output:</strong> [[1,null],null,[4,3],[7,0]]\n<strong>Explanation:</strong> The original binary tree is [1,null,4,7].\nThe random pointer of node one is null, so it is represented as [1, null].\nThe random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.\nThe random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_2.png\" style=\"width: 500px; height: 540px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,4],null,[1,0],null,[1,5],[1,5]]\n<strong>Output:</strong> [[1,4],null,[1,0],null,[1,5],[1,5]]\n<strong>Explanation:</strong> The random pointer of a node can be the node itself.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_3.png\" style=\"width: 500px; height: 426px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n<strong>Output:</strong> [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the <code>tree</code> is in the range <code>[0, 1000].</code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "hints": ["Traverse the tree, keep a hashtable with you and create a nodecopy for each node in the tree.", "Start traversing the original tree again and connect the left, right and random pointers in the cloned tree the same way as the original tree with the help of the hashtable."], "exampleTestcases": "[[1,null],null,[4,3],[7,0]]\n[[1,4],null,[1,0],null,[1,5],[1,5]]\n[[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     Node *left;\n *     Node *right;\n *     Node *random;\n *     Node() : val(0), left(nullptr), right(nullptr), random(nullptr) {}\n *     Node(int x) : val(x), left(nullptr), right(nullptr), random(nullptr) {}\n *     Node(int x, Node *left, Node *right, Node *random) : val(x), left(left), right(right), random(random) {}\n * };\n */\n\nclass Solution {\npublic:\n    NodeCopy* copyRandomBinaryTree(Node* root) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for Node.\n * public class Node {\n *     int val;\n *     Node left;\n *     Node right;\n *     Node random;\n *     Node() {}\n *     Node(int val) { this.val = val; }\n *     Node(int val, Node left, Node right, Node random) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *         this.random = random;\n *     }\n * }\n */\n\nclass Solution {\n    public NodeCopy copyRandomBinaryTree(Node root) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for Node.\n# class Node(object):\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution(object):\n    def copyRandomBinaryTree(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: NodeCopy\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for Node.\n# class Node:\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution:\n    def copyRandomBinaryTree(self, root: 'Optional[Node]') -> 'Optional[NodeCopy]':\n        "}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for Node.\n * public class Node {\n *     public int val;\n *     public Node left;\n *     public Node right;\n *     public Node random;\n *     public Node(int val=0, Node left=null, Node right=null, Node random=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *         this.random = random;\n *     }\n * }\n */\n\npublic class Solution {\n    public NodeCopy CopyRandomBinaryTree(Node root) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val, left, right, random) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.random = random === undefined ? null : random;\n * };\n */\n\n/**\n * @param {_Node} root\n * @return {NodeCopy}\n */\nvar copyRandomBinaryTree = function(root) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     left: _Node | null\n *     right: _Node | null\n *     random: _Node | null\n * \n *     constructor(val?: number, left?: _Node | null, right?: _Node | null, random?: _Node | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *         this.random = (random===undefined ? null : random)\n *     }\n * }\n */\n\n\nfunction copyRandomBinaryTree(root: _Node | null): NodeCopy | null {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     public $random = null;\n *     function __construct($val = 0, $left = null, $right = null, $random = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *         $this->random = $random;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return NodeCopy\n     */\n    public function copyRandomBinaryTree($root) {\n    \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *\t   public var random: Node?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; self.random = nil; }\n *     public init(_ val: Int) {self.val = val; self.left = nil; self.right = nil; self.random = nil; }\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.random = nil\n *     }\n * }\n */\n\nclass Solution {\n    func copyRandomBinaryTree(_ root: Node?) -> NodeCopy? {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = Node(5)\n * var v = ti.`val`\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var left: Node? = null\n *     var right: Node? = null\n *     var random: Node? = null\n * }\n */\n\nclass Solution {\n    fun copyRandomBinaryTree(root: Node?): NodeCopy? {\n    \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Random *Node\n * }\n */\n\nfunc copyRandomBinaryTree(root *Node) *NodeCopy {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for Node.\n# class Node\n#     attr_accessor :val, :left, :right, :random\n#     def initialize(val = 0, left = nil, right = nil, random = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#         @random = random\n#     end\n# end\n\n# @param {Node} root\n# @return {NodeCopy}\ndef copy_random_binary_tree(root)\n\nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int, _left: Node = null, _right: Node = null, _random: Node = null) {\n *   var value: Int = _value\n *   var left: Node = _left\n *   var right: Node = _right\n *   var random: Node = _random\n * }\n */\n\nobject Solution {\n    def copyRandomBinaryTree(root: Node): NodeCopy = {\n        \n    }\n}"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "clone-graph", "title": "Clone Graph", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "copy-list-with-random-pointer", "title": "Copy List with Random Pointer", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "clone-n-ary-tree", "title": "Clone N-ary Tree", "isPaidOnly": true}]}