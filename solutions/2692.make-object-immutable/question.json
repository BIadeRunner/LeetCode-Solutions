{"questionId": "2776", "acRate": 64.52074391988555, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2692", "paidOnly": true, "status": "ac", "title": "Make Object Immutable", "topicTags": [], "titleSlug": "make-object-immutable", "content": "<p>Write a function that takes an object&nbsp;<code>obj</code> and returns a new&nbsp;<strong>immutable</strong>&nbsp;version of this object.</p>\n\n<p>An&nbsp;<strong>immutable&nbsp;</strong>object is an object that can&#39;t be altered and will throw an error if any attempt is made to alter it.</p>\n\n<p>There are three types of error messages that can be produced from this new object.</p>\n\n<ul>\n\t<li>Attempting to modify a key on the object will result in this&nbsp;error message: <code>`Error Modifying: ${key}`</code>.</li>\n\t<li>Attempting to modify an index on an array will result in this error message: <code>`Error Modifying&nbsp;Index: ${index}`</code>.</li>\n\t<li>Attempting to call a method that mutates an array will result in this error message: <code>`Error Calling Method: ${methodName}`</code>. You may assume the only methods that can mutate&nbsp;an array are&nbsp;<code>[&#39;pop&#39;, &#39;push&#39;, &#39;shift&#39;, &#39;unshift&#39;, &#39;splice&#39;, &#39;sort&#39;, &#39;reverse&#39;]</code>.</li>\n</ul>\n\n<p><code>obj</code>&nbsp;is a valid JSON object or array, meaning it is the output of <code>JSON.parse()</code>.</p>\n\n<p>Note that a string literal should be thrown, not an&nbsp;<code>Error</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj = {\n&nbsp; &quot;x&quot;: 5\n}\nfn = (obj) =&gt; { \n&nbsp; obj.x = 5;\n&nbsp; return obj.x;\n}\n<strong>Output:</strong> {&quot;value&quot;: null, &quot;error&quot;: &quot;Error Modifying:&nbsp;x&quot;}\n<strong>Explanation: </strong>Attempting to modify a key on an object resuts in a thrown error. Note that it doesn&#39;t matter that the value was set to the same value as it was before.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj = [1, 2, 3]\nfn = (arr) =&gt; { \n&nbsp; arr[1] = {}; \n&nbsp; return arr[2]; \n}\n<strong>Output:</strong> {&quot;value&quot;: null, &quot;error&quot;: &quot;Error Modifying&nbsp;Index: 1&quot;}\n<strong>Explanation: </strong>Attempting to modify an array results in a thrown error.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj = {\n&nbsp; &quot;arr&quot;: [1, 2, 3]\n}\nfn = (obj) =&gt; { \n&nbsp; obj.arr.push(4);\n&nbsp; return 42;\n}\n<strong>Output:</strong> { &quot;value&quot;: null, &quot;error&quot;: &quot;Error Calling Method: push&quot;}\n<strong>Explanation: </strong>Calling a method that can result in a mutation results in a thrown error.\n</pre>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj = {\n&nbsp; &quot;x&quot;: 2,\n&nbsp; &quot;y&quot;: 2\n}\nfn = (obj) =&gt; { \n&nbsp; return Object.keys(obj);\n}\n<strong>Output:</strong> {&quot;value&quot;: [&quot;x&quot;, &quot;y&quot;], &quot;error&quot;: null}\n<strong>Explanation: </strong>No mutations were attempted so the function returns as normal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>obj</code>&nbsp;is a valid JSON object or array</li>\n\t<li><code>2 &lt;= JSON.stringify(obj).length &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Javascript has the concept of Proxy. That concept is critical to this problem.", "Recursively use proxy so that the user of the object is only able to access a proxy object.", "Override how set works. It should throw the correct error instead of actually setting a value."], "exampleTestcases": "{\"x\":5}\n(obj) => { obj.x = 5; return obj.x; }\n[1,2,3]\n(arr) => { arr[1] = {}; return arr[2]; }\n{\"arr\":[1,2,3]}\n(obj) => { obj.arr.push(4); return 42; }\n{\"x\":2,\"y\":2}\n(obj) => { return Object.keys(obj); }", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Object|Array} obj\n * @return {Object|Array} immutable obj\n */\nvar makeImmutable = function(obj) {\n    \n};\n\n/**\n * const obj = makeImmutable({x: 5});\n * obj.x = 6; // throws \"Error Modifying x\"\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };\ntype Obj = Array<JSONValue> | Record<string, JSONValue>;\n\nfunction makeImmutable(obj: Obj): Obj {\n    \n};\n\n/**\n * const obj = makeImmutable({x: 5});\n * obj.x = 6; // throws \"Error Modifying x\"\n */"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "infinite-method-object", "title": "Infinite Method Object", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "immutability-helper", "title": "Immutability Helper", "isPaidOnly": true}]}