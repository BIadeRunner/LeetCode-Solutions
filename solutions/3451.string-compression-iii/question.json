{"question_id": "3451", "problem_slug": "string-compression-iii", "problem_title": "String Compression III", "content": "Given a string word, compress it using the following algorithm:\n\nBegin with an empty string comp. While word is not empty, use the following operation:\n\n\t\nRemove a maximum length prefix of word made of a single character c repeating at most 9 times.\nAppend the length of the prefix followed by c to comp.\n\n\n\nReturn the string comp.\n \nExample 1:\n\nInput: word = \"abcde\"\nOutput: \"1a1b1c1d1e\"\nExplanation:\nInitially, comp = \"\". Apply the operation 5 times, choosing \"a\", \"b\", \"c\", \"d\", and \"e\" as the prefix in each operation.\nFor each prefix, append \"1\" followed by the character to comp.\n\nExample 2:\n\nInput: word = \"aaaaaaaaaaaaaabb\"\nOutput: \"9a5a2b\"\nExplanation:\nInitially, comp = \"\". Apply the operation 3 times, choosing \"aaaaaaaaa\", \"aaaaa\", and \"bb\" as the prefix in each operation.\n\nFor prefix \"aaaaaaaaa\", append \"9\" followed by \"a\" to comp.\nFor prefix \"aaaaa\", append \"5\" followed by \"a\" to comp.\nFor prefix \"bb\", append \"2\" followed by \"b\" to comp.\n\n\n \nConstraints:\n\n1 <= word.length <= 2 * 105\nword consists only of lowercase English letters.\n\n", "hints": ["Each time, just cut the same character in prefix up to at max 9 times. It’s always better to cut a bigger prefix."], "exampleTestcases": "\"abcde\"\n\"aaaaaaaaaaaaaabb\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string compressedString(string word) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String compressedString(String word) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def compressedString(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def compressedString(self, word: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* compressedString(char* word) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string CompressedString(string word) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {string}\n */\nvar compressedString = function(word) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function compressedString(word: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return String\n     */\n    function compressedString($word) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func compressedString(_ word: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun compressedString(word: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String compressedString(String word) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func compressedString(word string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @return {String}\ndef compressed_string(word)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def compressedString(word: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn compressed_string(word: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (compressed-string word)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec compressed_string(Word :: unicode:unicode_binary()) -> unicode:unicode_binary().\ncompressed_string(Word) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec compressed_string(word :: String.t) :: String.t\n  def compressed_string(word) do\n    \n  end\nend"}}}