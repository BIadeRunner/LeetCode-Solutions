{"questionId": "1916", "acRate": 86.64930197878957, "difficulty": "Easy", "freqBar": 62.29847911161779, "frontendQuestionId": "1791", "paidOnly": false, "status": "ac", "title": "Find Center of Star Graph", "topicTags": [{"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "find-center-of-star-graph", "content": "<p>There is an undirected <strong>star</strong> graph consisting of <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. A star graph is a graph where there is one <strong>center</strong> node and <strong>exactly</strong> <code>n - 1</code> edges that connect the center node with every other node.</p>\n\n<p>You are given a 2D integer array <code>edges</code> where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between the nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. Return the center of the given star graph.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/24/star_graph.png\" style=\"width: 331px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> edges = [[1,2],[2,3],[4,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[1,2],[5,1],[1,3],[1,4]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li>The given <code>edges</code> represent a valid star graph.</li>\n</ul>\n", "hints": ["The center is the only node that has more than one edge.", "The center is also connected to all other nodes.", "Any two edges must have a common node, which is the center."], "exampleTestcases": "[[1,2],[2,3],[4,2]]\n[[1,2],[5,1],[1,3],[1,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findCenter(vector<vector<int>>& edges) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findCenter(int[][] edges) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findCenter(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findCenter(self, edges: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int findCenter(int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindCenter(int[][] edges) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar findCenter = function(edges) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findCenter(edges: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function findCenter($edges) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findCenter(_ edges: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findCenter(edges: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int findCenter(List<List<int>> edges) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findCenter(edges [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer}\ndef find_center(edges)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findCenter(edges: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_center(edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-center edges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_center(Edges :: [[integer()]]) -> integer().\nfind_center(Edges) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_center(edges :: [[integer]]) :: integer\n  def find_center(edges) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-star-sum-of-a-graph", "title": "Maximum Star Sum of a Graph", "isPaidOnly": false}]}