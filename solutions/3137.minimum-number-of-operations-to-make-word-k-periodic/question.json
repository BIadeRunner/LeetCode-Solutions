{"questionId": "3384", "acRate": 62.63978699125142, "difficulty": "Medium", "freqBar": 40.13816191643106, "frontendQuestionId": "3137", "paidOnly": false, "status": "ac", "title": "Minimum Number of Operations to Make Word K-Periodic", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic", "content": "<p>You are given a string <code>word</code> of size <code>n</code>, and an integer <code>k</code> such that <code>k</code> divides <code>n</code>.</p>\n\n<p>In one operation, you can pick any two indices <code>i</code> and <code>j</code>, that are divisible by <code>k</code>, then replace the <span data-keyword=\"substring\">substring</span> of length <code>k</code> starting at <code>i</code> with the substring of length <code>k</code> starting at <code>j</code>. That is, replace the substring <code>word[i..i + k - 1]</code> with the substring <code>word[j..j + k - 1]</code>.<!-- notionvc: 49ac84f7-0724-452a-ab43-0c5e53f1db33 --></p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make</em> <code>word</code> <em><strong>k-periodic</strong></em>.</p>\n\n<p>We say that <code>word</code> is <strong>k-periodic</strong> if there is some string <code>s</code> of length <code>k</code> such that <code>word</code> can be obtained by concatenating <code>s</code> an arbitrary number of times. For example, if <code>word == &ldquo;ababab&rdquo;</code>, then <code>word</code> is 2-periodic for <code>s = &quot;ab&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;leetcodeleet&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\nfont-family: Menlo,sans-serif;\nfont-size: 0.85rem;\n\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to &quot;leetleetleet&quot;.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;</span>leetcoleet<span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 2-periodic string by applying the operations in the table below.</p>\n\n<table border=\"1\" bordercolor=\"#ccc\" cellpadding=\"5\" cellspacing=\"0\" height=\"146\" style=\"border-collapse:collapse; text-align: center; vertical-align: middle;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>word</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">2</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetcoleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">4</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">6</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetetet</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div id=\"gtx-trans\" style=\"position: absolute; left: 107px; top: 238.5px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>k</code> divides <code>word.length</code>.</li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.", "The period of the final string will be the substring with the highest frequency."], "exampleTestcases": "\"leetcodeleet\"\n4\n\"leetcoleet\"\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic = function(word, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_operations_to_make_k_periodic(Word, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "maximum-repeating-substring", "title": "Maximum Repeating Substring", "isPaidOnly": false}]}