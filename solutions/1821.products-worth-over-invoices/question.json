{"question_id": "1821", "problem_slug": "products-worth-over-invoices", "problem_title": "Product's Worth Over Invoices", "content": "Table: Product\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| name        | varchar |\n+-------------+---------+\nproduct_id is the column with unique values for this table.\nThis table contains the ID and the name of the product. The name consists of only lowercase English letters. No two products have the same name.\n\n \nTable: Invoice\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| invoice_id  | int  |\n| product_id  | int  |\n| rest        | int  |\n| paid        | int  |\n| canceled    | int  |\n| refunded    | int  |\n+-------------+------+\ninvoice_id is the column with unique values for this table and the id of this invoice.\nproduct_id is the id of the product for this invoice.\nrest is the amount left to pay for this invoice.\npaid is the amount paid for this invoice.\ncanceled is the amount canceled for this invoice.\nrefunded is the amount refunded for this invoice.\n\n \nWrite a solution that will, for all products, return each product name with the total amount due, paid, canceled, and refunded across all invoices.\nReturn the result table ordered by product_name.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nProduct table:\n+------------+-------+\n| product_id | name  |\n+------------+-------+\n| 0          | ham   |\n| 1          | bacon |\n+------------+-------+\nInvoice table:\n+------------+------------+------+------+----------+----------+\n| invoice_id | product_id | rest | paid | canceled | refunded |\n+------------+------------+------+------+----------+----------+\n| 23         | 0          | 2    | 0    | 5        | 0        |\n| 12         | 0          | 0    | 4    | 0        | 3        |\n| 1          | 1          | 1    | 1    | 0        | 1        |\n| 2          | 1          | 1    | 0    | 1        | 1        |\n| 3          | 1          | 0    | 1    | 1        | 1        |\n| 4          | 1          | 1    | 1    | 1        | 0        |\n+------------+------------+------+------+----------+----------+\nOutput: \n+-------+------+------+----------+----------+\n| name  | rest | paid | canceled | refunded |\n+-------+------+------+----------+----------+\n| bacon | 3    | 3    | 3        | 3        |\n| ham   | 2    | 4    | 5        | 3        |\n+-------+------+------+----------+----------+\nExplanation: \n- The amount of money left to pay for bacon is 1 + 1 + 0 + 1 = 3\n- The amount of money paid for bacon is 1 + 0 + 1 + 1 = 3\n- The amount of money canceled for bacon is 0 + 1 + 1 + 1 = 3\n- The amount of money refunded for bacon is 1 + 1 + 1 + 0 = 3\n- The amount of money left to pay for ham is 2 + 0 = 2\n- The amount of money paid for ham is 0 + 4 = 4\n- The amount of money canceled for ham is 5 + 0 = 5\n- The amount of money refunded for ham is 0 + 3 = 3\n\n", "hints": [], "exampleTestcases": "{\"headers\":{\"Product\":[\"product_id\",\"name\"],\"Invoice\":[\"invoice_id\",\"product_id\",\"rest\",\"paid\",\"canceled\",\"refunded\"]},\"rows\":{\"Product\":[[0,\"ham\"],[1,\"bacon\"]],\"Invoice\":[[23,0,2,0,5,0],[12,0,0,4,0,3],[1,1,1,1,0,1],[2,1,1,0,1,1],[3,1,0,1,1,1],[4,1,1,1,1,0]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}, "Pandas": {"langSlug": "pythondata", "code": "import pandas as pd\n\ndef analyze_products(product: pd.DataFrame, invoice: pd.DataFrame) -> pd.DataFrame:\n    "}, "PostgreSQL": {"langSlug": "postgresql", "code": "-- Write your PostgreSQL query statement below\n"}}}