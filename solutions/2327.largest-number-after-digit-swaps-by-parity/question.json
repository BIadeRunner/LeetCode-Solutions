{"question_id": "2327", "problem_slug": "largest-number-after-digit-swaps-by-parity", "problem_title": "Largest Number After Digit Swaps by Parity", "content": "You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).\nReturn the largest possible value of num after any number of swaps.\n \nExample 1:\n\nInput: num = 1234\nOutput: 3412\nExplanation: Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n\nExample 2:\n\nInput: num = 65875\nOutput: 87655\nExplanation: Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n\n \nConstraints:\n\n1 <= num <= 109\n\n", "hints": ["The bigger digit should appear first (more to the left) because it contributes more to the value of the number.", "Get all the even digits, as well as odd digits. Sort them separately.", "Reconstruct the number by giving the earlier digits the highest available digit of the same parity."], "exampleTestcases": "1234\n65875", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestInteger(int num) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int largestInteger(int num) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestInteger(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int largestInteger(int num) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestInteger(int num) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar largestInteger = function(num) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestInteger(num: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function largestInteger($num) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestInteger(_ num: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestInteger(num: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int largestInteger(int num) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestInteger(num int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef largest_integer(num)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestInteger(num: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_integer(num: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-integer num)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_integer(Num :: integer()) -> integer().\nlargest_integer(Num) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_integer(num :: integer) :: integer\n  def largest_integer(num) do\n    \n  end\nend"}}}