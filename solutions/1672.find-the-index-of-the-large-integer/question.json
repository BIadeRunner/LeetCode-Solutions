{"questionId": "1672", "acRate": 56.13838855247425, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1533", "paidOnly": true, "status": "ac", "title": "Find the Index of the Large Integer", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Interactive", "id": "VG9waWNUYWdOb2RlOjYxMDU5", "slug": "interactive"}], "titleSlug": "find-the-index-of-the-large-integer", "content": "<p>We have an integer array <code>arr</code>, where all the integers in <code>arr</code> are equal except for one integer which is <strong>larger</strong> than the rest of the integers. You will not be given direct access to the array, instead, you will have an <strong>API</strong> <code>ArrayReader</code> which have the following functions:</p>\n\n<ul>\n\t<li><code>int compareSub(int l, int r, int x, int y)</code>: where <code>0 &lt;= l, r, x, y &lt; ArrayReader.length()</code>, <code>l &lt;= r and</code> <code>x &lt;= y</code>. The function compares the sum of sub-array <code>arr[l..r]</code> with the sum of the sub-array <code>arr[x..y]</code> and returns:\n\n\t<ul>\n\t\t<li><strong>1</strong> if <code>arr[l]+arr[l+1]+...+arr[r] &gt; arr[x]+arr[x+1]+...+arr[y]</code>.</li>\n\t\t<li><strong>0</strong> if <code>arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]</code>.</li>\n\t\t<li><strong>-1</strong> if <code>arr[l]+arr[l+1]+...+arr[r] &lt; arr[x]+arr[x+1]+...+arr[y]</code>.</li>\n\t</ul>\n\t</li>\n\t<li><code>int length()</code>: Returns the size of the array.</li>\n</ul>\n\n<p>You are allowed to call <code>compareSub()</code> <b>20 times</b> at most. You can assume both functions work in <code>O(1)</code> time.</p>\n\n<p>Return <em>the index of the array <code>arr</code> which has the largest integer</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [7,7,7,7,10,7,7,7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The following calls to the API\nreader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).\nThus we know that arr[0] and arr[1] doesn&#39;t contain the largest element.\nreader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].\nreader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.\nNotice that we made only 3 calls, so the answer is valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,6,12]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 100</code></li>\n\t<li>All elements of <code>arr</code> are equal except for one element which is larger than all other elements.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if there are two numbers in <code>arr</code> that are bigger than all other numbers?</li>\n\t<li>What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?</li>\n</ul>\n", "hints": ["Do a binary search over the array, exclude the half of the array that doesn't contain the largest number.", "Keep shrinking the search space till it reaches the size of 2 where you can easily determine which one has the largest integer."], "exampleTestcases": "[7,7,7,7,10,7,7,7]\n[6,6,12]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *   public:\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     int compareSub(int l, int r, int x, int y);\n *\n *     // Returns the length of the array\n *     int length();\n * };\n */\n\nclass Solution {\npublic:\n    int getIndex(ArrayReader &reader) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     public int compareSub(int l, int r, int x, int y) {}\n *\n *     // Returns the length of the array\n *     public int length() {}\n * }\n */\n\nclass Solution {\n    public int getIndex(ArrayReader reader) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#\t # Compares the sum of arr[l..r] with the sum of arr[x..y]\n#\t # return 1 if sum(arr[l..r]) > sum(arr[x..y])\n#\t # return 0 if sum(arr[l..r]) == sum(arr[x..y])\n#\t # return -1 if sum(arr[l..r]) < sum(arr[x..y])\n#    def compareSub(self, l, r, x, y):\n#        \"\"\"\n#        :type l, r, x, y: int\n#        :rtype int\n#        \"\"\"\n#\n#\t # Returns the length of the array\n#    def length(self):\n#        \"\"\"\n#        :rtype int\n#        \"\"\"\n\nclass Solution(object):\n    def getIndex(self, reader):\n        \"\"\"\n        :type reader: ArrayReader\n        :rtype: integer\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class ArrayReader(object):\n#\t # Compares the sum of arr[l..r] with the sum of arr[x..y]\n#\t # return 1 if sum(arr[l..r]) > sum(arr[x..y])\n#\t # return 0 if sum(arr[l..r]) == sum(arr[x..y])\n#\t # return -1 if sum(arr[l..r]) < sum(arr[x..y])\n#    def compareSub(self, l: int, r: int, x: int, y: int) -> int:\n#\n#\t # Returns the length of the array\n#    def length(self) -> int:\n#\n\n\nclass Solution:\n    def getIndex(self, reader: 'ArrayReader') -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Compares the sum of arr[l..r] with the sum of arr[x..y] \n * // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n * // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n * // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n * int compareSub(ArrayReader *, int l, int r, int x, int y);\n *\n * // Returns the length of the array\n * int length(ArrayReader *);\n */\n\nint getIndex(ArrayReader* reader) {\n\t\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     public int CompareSub(int l, int r, int x, int y) {}\n *\n *     // Returns the length of the array\n *     public int Length() {}\n * }\n */\n\nclass Solution {\n    public int GetIndex(ArrayReader reader) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * function ArrayReader() {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     @param {number} l, r, x, y\n *     @return {number}\n *     this.compareSub = function(l, r, x, y) {\n *         ...\n *     };\n *\n *     // Returns the length of the array\n *     @return {number}\n *     this.length = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {ArrayReader} reader\n * @return {number}\n */\nvar getIndex = function(reader) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * class ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     compareSub(l: number, r: number, x: number, y: number): number { };\n *\n *     // Returns the length of the array\n *     length(): number { };\n * };\n */\n\nfunction getIndex(reader: ArrayReader): number {\n\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     function compareSub($l, $r, $x, $y) {}\n *\n *     // Returns the length of the array\n *     function length() {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param ArrayReader $reader\n     * @return Integer\n     */\n    function getIndex($reader) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     public func compareSub(_ l: Int, _ r: Int, _ x: Int, _ y: Int) -> Int {}\n *\n *     // Returns the length of the array\n *     public func length() -> Int {}\n * }\n */\n\nclass Solution {\n    func getIndex(_ reader: ArrayReader) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     fun compareSub(l: Int, r: Int, x: Int, y: Int): Int {}\n *\n *     // Returns the length of the array\n *     fun length(): Int {}\n * }\n */\n\nclass Solution {\n    fun getIndex(reader: ArrayReader): Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * type ArrayReader struct {\n * }\n * // Compares the sum of arr[l..r] with the sum of arr[x..y] \n * // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n * // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n * // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n * func (this *ArrayReader) compareSub(l, r, x, y int) int {}\n * \n * // Returns the length of the array\n * func (this *ArrayReader) length() int {}\n */\n\nfunc getIndex(reader *ArrayReader) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# This is ArrayReader's API interface.\n# You should not implement it, or speculate about its implementation\n# class ArrayReader\n#\t # Compares the sum of arr[l..r] with the sum of arr[x..y]\n#\t # return 1 if sum(arr[l..r]) > sum(arr[x..y])\n#\t # return 0 if sum(arr[l..r]) == sum(arr[x..y])\n#\t # return -1 if sum(arr[l..r]) < sum(arr[x..y])\n#    def compare_sub(l, r, x, y):\n#       \n#    end\n#\n#\t # Returns the length of the array\n#    def length()\n#\t\t\n#\t end\n# end\n\n# @param {ArrayReader} reader\n# @return {int}\ndef get_index(reader)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface ArrayReader {\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     def compareSub(l: Int, r: Int, x: Int, y: Int): Int {}\n *\n *     // Returns the length of the array\n *     def length(): Int {}\n * }\n */\n\nobject Solution {\n    def getIndex(reader: ArrayReader): Int = {\n        \n\t}\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * // This is the ArrayReader's API interface.\n * // You should not implement it, or speculate about its implementation\n * struct ArrayReader;\n * impl Array Reader {\n *     pub fn compareSub(l: i32, r: i32, x: i32, y: i32) -> i32 {}\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n *     // Returns the length of the array\n * }\n */\n\nimpl Solution {\n    pub fn get_index(reader: &ArrayReader) -> i32 {\n\t\t\n    }\n}"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "search-in-a-sorted-array-of-unknown-size", "title": "Search in a Sorted Array of Unknown Size", "isPaidOnly": true}]}