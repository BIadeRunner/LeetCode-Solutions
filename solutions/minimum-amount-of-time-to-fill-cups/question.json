{"questionId": "2412", "acRate": 58.27505296489509, "difficulty": "Easy", "freqBar": 17.861874533120325, "frontendQuestionId": "2335", "paidOnly": false, "status": "ac", "title": "Minimum Amount of Time to Fill Cups", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}], "titleSlug": "minimum-amount-of-time-to-fill-cups", "content": "<p>You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up <code>2</code> cups with <strong>different</strong> types of water, or <code>1</code> cup of any type of water.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>amount</code> of length <code>3</code> where <code>amount[0]</code>, <code>amount[1]</code>, and <code>amount[2]</code> denote the number of cold, warm, and hot water cups you need to fill respectively. Return <em>the <strong>minimum</strong> number of seconds needed to fill up all the cups</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [1,4,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [5,4,4]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [5,0,0]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Every second, we fill up a cold cup.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>amount.length == 3</code></li>\n\t<li><code>0 &lt;= amount[i] &lt;= 100</code></li>\n</ul>\n", "hints": ["To minimize the amount of time needed, you want to fill up as many cups as possible in each second. This means that you want to maximize the number of seconds where you are filling up two cups.", "You always want to fill up the two types of water with the most unfilled cups."], "exampleTestcases": "[1,4,2]\n[5,4,4]\n[5,0,0]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int fillCups(vector<int>& amount) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int fillCups(int[] amount) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fillCups(self, amount):\n        \"\"\"\n        :type amount: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fillCups(self, amount: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int fillCups(int* amount, int amountSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FillCups(int[] amount) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} amount\n * @return {number}\n */\nvar fillCups = function(amount) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fillCups(amount: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $amount\n     * @return Integer\n     */\n    function fillCups($amount) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fillCups(_ amount: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fillCups(amount: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int fillCups(List<int> amount) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func fillCups(amount []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} amount\n# @return {Integer}\ndef fill_cups(amount)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fillCups(amount: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fill_cups(amount: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (fill-cups amount)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec fill_cups(Amount :: [integer()]) -> integer().\nfill_cups(Amount) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec fill_cups(amount :: [integer]) :: integer\n  def fill_cups(amount) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "construct-target-array-with-multiple-sums", "title": "Construct Target Array With Multiple Sums", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-score-from-removing-stones", "title": "Maximum Score From Removing Stones", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-running-time-of-n-computers", "title": "Maximum Running Time of N Computers", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-cost-to-make-array-equal", "title": "Minimum Cost to Make Array Equal", "isPaidOnly": false}]}