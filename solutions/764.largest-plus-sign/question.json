{"questionId": "769", "acRate": 48.489935543132255, "difficulty": "Medium", "freqBar": 50.07997302661619, "frontendQuestionId": "764", "paidOnly": false, "status": "ac", "title": "Largest Plus Sign", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "largest-plus-sign", "content": "<p>You are given an integer <code>n</code>. You have an <code>n x n</code> binary grid <code>grid</code> with all values initially <code>1</code>&#39;s except for some indices given in the array <code>mines</code>. The <code>i<sup>th</sup></code> element of the array <code>mines</code> is defined as <code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> where <code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code>.</p>\n\n<p>Return <em>the order of the largest <strong>axis-aligned</strong> plus sign of </em>1<em>&#39;s contained in </em><code>grid</code>. If there is none, return <code>0</code>.</p>\n\n<p>An <strong>axis-aligned plus sign</strong> of <code>1</code>&#39;s of order <code>k</code> has some center <code>grid[r][c] == 1</code> along with four arms of length <code>k - 1</code> going up, down, left, and right, and made of <code>1</code>&#39;s. Note that there could be <code>0</code>&#39;s or <code>1</code>&#39;s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for <code>1</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg\" style=\"width: 404px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> n = 5, mines = [[4,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg\" style=\"width: 84px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> n = 1, mines = [[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no plus sign, so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= mines.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; n</code></li>\n\t<li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."], "exampleTestcases": "5\n[[4,2]]\n1\n[[0,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int orderOfLargestPlusSign(int n, int[][] mines) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def orderOfLargestPlusSign(self, n, mines):\n        \"\"\"\n        :type n: int\n        :type mines: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int orderOfLargestPlusSign(int n, int** mines, int minesSize, int* minesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int OrderOfLargestPlusSign(int n, int[][] mines) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} mines\n * @return {number}\n */\nvar orderOfLargestPlusSign = function(n, mines) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function orderOfLargestPlusSign(n: number, mines: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $mines\n     * @return Integer\n     */\n    function orderOfLargestPlusSign($n, $mines) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func orderOfLargestPlusSign(_ n: Int, _ mines: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun orderOfLargestPlusSign(n: Int, mines: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int orderOfLargestPlusSign(int n, List<List<int>> mines) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func orderOfLargestPlusSign(n int, mines [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} mines\n# @return {Integer}\ndef order_of_largest_plus_sign(n, mines)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def orderOfLargestPlusSign(n: Int, mines: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn order_of_largest_plus_sign(n: i32, mines: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (order-of-largest-plus-sign n mines)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec order_of_largest_plus_sign(N :: integer(), Mines :: [[integer()]]) -> integer().\norder_of_largest_plus_sign(N, Mines) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec order_of_largest_plus_sign(n :: integer, mines :: [[integer]]) :: integer\n  def order_of_largest_plus_sign(n, mines) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximal-square", "title": "Maximal Square", "isPaidOnly": false}]}