{"questionId": "358", "acRate": 39.07634032634032, "difficulty": "Hard", "freqBar": 55.065023642287294, "frontendQuestionId": "358", "paidOnly": true, "status": "ac", "title": "Rearrange String k Distance Apart", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "rearrange-string-k-distance-apart", "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, rearrange <code>s</code> such that the same characters are <strong>at least</strong> distance <code>k</code> from each other. If it is not possible to rearrange the string, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabbcc&quot;, k = 3\n<strong>Output:</strong> &quot;abcabc&quot;\n<strong>Explanation:</strong> The same letters are at least a distance of 3 from each other.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabc&quot;, k = 3\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> It is not possible to rearrange the string.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaadbbcc&quot;, k = 2\n<strong>Output:</strong> &quot;abacabcd&quot;\n<strong>Explanation:</strong> The same letters are at least a distance of 2 from each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "\"aabbcc\"\n3\n\"aaabc\"\n3\n\"aaadbbcc\"\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string rearrangeString(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String rearrangeString(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rearrangeString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* rearrangeString(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string RearrangeString(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar rearrangeString = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rearrangeString(s: string, k: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function rearrangeString($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rearrangeString(_ s: String, _ k: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rearrangeString(s: String, k: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String rearrangeString(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func rearrangeString(s string, k int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef rearrange_string(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rearrangeString(s: String, k: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rearrange_string(s: String, k: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (rearrange-string s k)\n  (-> string? exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec rearrange_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nrearrange_string(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec rearrange_string(s :: String.t, k :: integer) :: String.t\n  def rearrange_string(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "task-scheduler", "title": "Task Scheduler", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "reorganize-string", "title": "Reorganize String", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "construct-string-with-repeat-limit", "title": "Construct String With Repeat Limit", "isPaidOnly": false}]}