{"question_id": "2149", "problem_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color", "problem_title": "Remove Colored Pieces if Both Neighbors are the Same Color", "content": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\n\nAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\nBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\nAlice and Bob cannot remove pieces from the edge of the line.\nIf a player cannot make a move on their turn, that player loses and the other player wins.\n\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.\n \nExample 1:\n\nInput: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.\n\nExample 2:\n\nInput: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.\n\nExample 3:\n\nInput: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.\n\n \nConstraints:\n\n1 <= colors.length <= 105\ncolors consists of only the letters 'A' and 'B'\n\n", "hints": ["Does the number of moves a player can make depend on what the other player does? No", "How many moves can Alice make if colors == \"AAAAAA\"", "If a group of n consecutive pieces has the same color, the player can take n - 2 of those pieces if n is greater than or equal to 3"], "exampleTestcases": "\"AAABABB\"\n\"AA\"\n\"ABBBBBBBAAA\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool winnerOfGame(string colors) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean winnerOfGame(String colors) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def winnerOfGame(self, colors):\n        \"\"\"\n        :type colors: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def winnerOfGame(self, colors: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool winnerOfGame(char* colors) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool WinnerOfGame(string colors) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} colors\n * @return {boolean}\n */\nvar winnerOfGame = function(colors) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function winnerOfGame(colors: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $colors\n     * @return Boolean\n     */\n    function winnerOfGame($colors) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func winnerOfGame(_ colors: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun winnerOfGame(colors: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool winnerOfGame(String colors) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func winnerOfGame(colors string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} colors\n# @return {Boolean}\ndef winner_of_game(colors)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def winnerOfGame(colors: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn winner_of_game(colors: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (winner-of-game colors)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec winner_of_game(Colors :: unicode:unicode_binary()) -> boolean().\nwinner_of_game(Colors) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec winner_of_game(colors :: String.t) :: boolean\n  def winner_of_game(colors) do\n    \n  end\nend"}}}