{"question_id": "1937", "problem_slug": "maximize-the-beauty-of-the-garden", "problem_title": "Maximize the Beauty of the Garden", "content": "There is a garden of n flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array flowers of size n and each flowers[i] represents the beauty of the ith flower.\nA garden is valid if it meets these conditions:\n\nThe garden has at least two flowers.\nThe first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.\nReturn the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.\n \nExample 1:\n\r\nInput: flowers = [1,2,3,1,2]\r\nOutput: 8\r\nExplanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.\nExample 2:\n\r\nInput: flowers = [100,1,1,-3,1]\r\nOutput: 3\r\nExplanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.\r\n\nExample 3:\n\r\nInput: flowers = [-1,-2,0,-1]\r\nOutput: -2\r\nExplanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.\r\n\n \nConstraints:\n\n2 <= flowers.length <= 105\n-104 <= flowers[i] <= 104\nIt is possible to create a valid garden by removing some (possibly none) flowers.\n", "hints": ["Consider every possible beauty and its first and last index in flowers.", "Remove all flowers with negative beauties within those indices."], "exampleTestcases": "[1,2,3,1,2]\n[100,1,1,-3,1]\n[-1,-2,0,-1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumBeauty(vector<int>& flowers) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximumBeauty(int[] flowers) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumBeauty(self, flowers):\n        \"\"\"\n        :type flowers: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumBeauty(self, flowers: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "\n\nint maximumBeauty(int* flowers, int flowersSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximumBeauty(int[] flowers) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} flowers\n * @return {number}\n */\nvar maximumBeauty = function(flowers) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumBeauty(flowers: number[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $flowers\n     * @return Integer\n     */\n    function maximumBeauty($flowers) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumBeauty(_ flowers: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumBeauty(flowers: IntArray): Int {\n        \n    }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumBeauty(flowers []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} flowers\n# @return {Integer}\ndef maximum_beauty(flowers)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumBeauty(flowers: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_beauty(flowers: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-beauty flowers)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}}}