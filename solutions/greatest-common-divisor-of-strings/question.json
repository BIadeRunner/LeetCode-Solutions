{"questionId": "1146", "acRate": 52.01106470645319, "difficulty": "Easy", "freqBar": 73.51903788954584, "frontendQuestionId": "1071", "paidOnly": false, "status": "ac", "title": "Greatest Common Divisor of Strings", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "greatest-common-divisor-of-strings", "content": "<p>For two strings <code>s</code> and <code>t</code>, we say &quot;<code>t</code> divides <code>s</code>&quot; if and only if <code>s = t + t + t + ... + t + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>\n\n<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n<strong>Output:</strong> &quot;ABC&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n\t<li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>\n</ul>\n", "hints": ["The greatest common divisor must be a prefix of each string, so we can try all prefixes."], "exampleTestcases": "\"ABCABC\"\n\"ABC\"\n\"ABABAB\"\n\"ABAB\"\n\"LEET\"\n\"CODE\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String gcdOfStrings(String str1, String str2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* gcdOfStrings(char* str1, char* str2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string GcdOfStrings(string str1, string str2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function gcdOfStrings(str1: string, str2: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function gcdOfStrings($str1, $str2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func gcdOfStrings(_ str1: String, _ str2: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun gcdOfStrings(str1: String, str2: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String gcdOfStrings(String str1, String str2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func gcdOfStrings(str1 string, str2 string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef gcd_of_strings(str1, str2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def gcdOfStrings(str1: String, str2: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn gcd_of_strings(str1: String, str2: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (gcd-of-strings str1 str2)\n  (-> string? string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec gcd_of_strings(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\ngcd_of_strings(Str1, Str2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec gcd_of_strings(str1 :: String.t, str2 :: String.t) :: String.t\n  def gcd_of_strings(str1, str2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "find-greatest-common-divisor-of-array", "title": "Find Greatest Common Divisor of Array", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "smallest-even-multiple", "title": "Smallest Even Multiple", "isPaidOnly": false}]}