{"question_id": "1042", "problem_slug": "minimum-cost-to-merge-stones", "problem_title": "Minimum Cost to Merge Stones", "content": "There are n piles of stones arranged in a row. The ith pile has stones[i] stones.\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\nReturn the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.\n \nExample 1:\n\nInput: stones = [3,2,4,1], k = 2\nOutput: 20\nExplanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.\n\nExample 2:\n\nInput: stones = [3,2,4,1], k = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n\nExample 3:\n\nInput: stones = [3,5,1,2,6], k = 3\nOutput: 25\nExplanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.\n\n \nConstraints:\n\nn == stones.length\n1 <= n <= 30\n1 <= stones[i] <= 100\n2 <= k <= 30\n\n", "hints": [], "exampleTestcases": "[3,2,4,1]\n2\n[3,2,4,1]\n3\n[3,5,1,2,6]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int mergeStones(vector<int>& stones, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int mergeStones(int[] stones, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mergeStones(self, stones, k):\n        \"\"\"\n        :type stones: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mergeStones(self, stones: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int mergeStones(int* stones, int stonesSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MergeStones(int[] stones, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} stones\n * @param {number} k\n * @return {number}\n */\nvar mergeStones = function(stones, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mergeStones(stones: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @param Integer $k\n     * @return Integer\n     */\n    function mergeStones($stones, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mergeStones(_ stones: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mergeStones(stones: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int mergeStones(List<int> stones, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mergeStones(stones []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} stones\n# @param {Integer} k\n# @return {Integer}\ndef merge_stones(stones, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mergeStones(stones: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn merge_stones(stones: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (merge-stones stones k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec merge_stones(Stones :: [integer()], K :: integer()) -> integer().\nmerge_stones(Stones, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec merge_stones(stones :: [integer], k :: integer) :: integer\n  def merge_stones(stones, k) do\n    \n  end\nend"}}}