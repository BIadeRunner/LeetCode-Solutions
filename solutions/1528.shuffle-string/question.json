{"questionId": "1651", "acRate": 84.91093150797904, "difficulty": "Easy", "freqBar": 31.913799141103034, "frontendQuestionId": "1528", "paidOnly": false, "status": "ac", "title": "Shuffle String", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "shuffle-string", "content": "<p>You are given a string <code>s</code> and an integer array <code>indices</code> of the <strong>same length</strong>. The string <code>s</code> will be shuffled such that the character at the <code>i<sup>th</sup></code> position moves to <code>indices[i]</code> in the shuffled string.</p>\n\n<p>Return <em>the shuffled string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/09/q1.jpg\" style=\"width: 321px; height: 243px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;codeleet&quot;, <code>indices</code> = [4,5,6,7,0,2,1,3]\n<strong>Output:</strong> &quot;leetcode&quot;\n<strong>Explanation:</strong> As shown, &quot;codeleet&quot; becomes &quot;leetcode&quot; after shuffling.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, <code>indices</code> = [0,1,2]\n<strong>Output:</strong> &quot;abc&quot;\n<strong>Explanation:</strong> After shuffling, each character remains in its position.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s.length == indices.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>0 &lt;= indices[i] &lt; n</code></li>\n\t<li>All values of <code>indices</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["You can create an auxiliary string t of length n.", "Assign t[indexes[i]] to s[i] for each i from 0 to n-1."], "exampleTestcases": "\"codeleet\"\n[4,5,6,7,0,2,1,3]\n\"abc\"\n[0,1,2]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string restoreString(string s, vector<int>& indices) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String restoreString(String s, int[] indices) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def restoreString(self, s, indices):\n        \"\"\"\n        :type s: str\n        :type indices: List[int]\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def restoreString(self, s: str, indices: List[int]) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* restoreString(char* s, int* indices, int indicesSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string RestoreString(string s, int[] indices) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number[]} indices\n * @return {string}\n */\nvar restoreString = function(s, indices) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function restoreString(s: string, indices: number[]): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[] $indices\n     * @return String\n     */\n    function restoreString($s, $indices) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func restoreString(_ s: String, _ indices: [Int]) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun restoreString(s: String, indices: IntArray): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String restoreString(String s, List<int> indices) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func restoreString(s string, indices []int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[]} indices\n# @return {String}\ndef restore_string(s, indices)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def restoreString(s: String, indices: Array[Int]): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn restore_string(s: String, indices: Vec<i32>) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (restore-string s indices)\n  (-> string? (listof exact-integer?) string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec restore_string(S :: unicode:unicode_binary(), Indices :: [integer()]) -> unicode:unicode_binary().\nrestore_string(S, Indices) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec restore_string(s :: String.t, indices :: [integer]) :: String.t\n  def restore_string(s, indices) do\n    \n  end\nend"}], "similarQuestionList": []}