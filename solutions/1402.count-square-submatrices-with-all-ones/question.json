{"question_id": "1402", "problem_slug": "count-square-submatrices-with-all-ones", "problem_title": "Count Square Submatrices with All Ones", "content": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.\n \nExample 1:\n\nInput: matrix =\n[\n  [0,1,1,1],\n  [1,1,1,1],\n  [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n\nExample 2:\n\nInput: matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\nOutput: 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7.\n\n \nConstraints:\n\n1 <= arr.length <= 300\n1 <= arr[0].length <= 300\n0 <= arr[i][j] <= 1\n\n", "hints": ["Create an additive table that counts the sum of elements of submatrix with the superior corner at (0,0).", "Loop over all subsquares in O(n^3) and check if the sum make the whole array to be ones, if it checks then add 1 to the answer."], "exampleTestcases": "[[0,1,1,1],[1,1,1,1],[0,1,1,1]]\n[[1,0,1],[1,1,0],[1,1,0]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSquares(vector<vector<int>>& matrix) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countSquares(int[][] matrix) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSquares(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSquares(self, matrix: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countSquares(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountSquares(int[][] matrix) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar countSquares = function(matrix) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSquares(matrix: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function countSquares($matrix) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSquares(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSquares(matrix: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countSquares(List<List<int>> matrix) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSquares(matrix [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef count_squares(matrix)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSquares(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_squares(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-squares matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_squares(Matrix :: [[integer()]]) -> integer().\ncount_squares(Matrix) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_squares(matrix :: [[integer]]) :: integer\n  def count_squares(matrix) do\n    \n  end\nend"}}}