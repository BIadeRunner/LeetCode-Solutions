{"question_id": "1534", "problem_slug": "minimum-number-of-frogs-croaking", "problem_title": "Minimum Number of Frogs Croaking", "content": "You are given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \"croak\" are mixed.\nReturn the minimum number of different frogs to finish all the croaks in the given string.\nA valid \"croak\" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid \"croak\" return -1.\n \nExample 1:\n\nInput: croakOfFrogs = \"croakcroak\"\nOutput: 1 \nExplanation: One frog yelling \"croak\" twice.\n\nExample 2:\n\nInput: croakOfFrogs = \"crcoakroak\"\nOutput: 2 \nExplanation: The minimum number of frogs is two. \nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".\n\nExample 3:\n\nInput: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.\n\n \nConstraints:\n\n1 <= croakOfFrogs.length <= 105\ncroakOfFrogs is either 'c', 'r', 'o', 'a', or 'k'.\n\n", "hints": ["keep the frequency of all characters from \"croak\" using a hashmap.", "For each character in the given string, greedily match it to a possible \"croak\"."], "exampleTestcases": "\"croakcroak\"\n\"crcoakroak\"\n\"croakcrook\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minNumberOfFrogs(string croakOfFrogs) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minNumberOfFrogs(String croakOfFrogs) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minNumberOfFrogs(self, croakOfFrogs):\n        \"\"\"\n        :type croakOfFrogs: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minNumberOfFrogs(char* croakOfFrogs) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinNumberOfFrogs(string croakOfFrogs) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} croakOfFrogs\n * @return {number}\n */\nvar minNumberOfFrogs = function(croakOfFrogs) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minNumberOfFrogs(croakOfFrogs: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $croakOfFrogs\n     * @return Integer\n     */\n    function minNumberOfFrogs($croakOfFrogs) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minNumberOfFrogs(_ croakOfFrogs: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minNumberOfFrogs(croakOfFrogs: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minNumberOfFrogs(String croakOfFrogs) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minNumberOfFrogs(croakOfFrogs string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} croak_of_frogs\n# @return {Integer}\ndef min_number_of_frogs(croak_of_frogs)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minNumberOfFrogs(croakOfFrogs: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_number_of_frogs(croak_of_frogs: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-number-of-frogs croakOfFrogs)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_number_of_frogs(CroakOfFrogs :: unicode:unicode_binary()) -> integer().\nmin_number_of_frogs(CroakOfFrogs) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_number_of_frogs(croak_of_frogs :: String.t) :: integer\n  def min_number_of_frogs(croak_of_frogs) do\n    \n  end\nend"}}}