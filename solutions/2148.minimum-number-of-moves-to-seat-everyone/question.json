{"question_id": "2148", "problem_slug": "minimum-number-of-moves-to-seat-everyone", "problem_title": "Minimum Number of Moves to Seat Everyone", "content": "There are n availabe seats and n students standing in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.\nYou may perform the following move any number of times:\n\nIncrease or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1)\n\nReturn the minimum number of moves required to move each student to a seat such that no two students are in the same seat.\nNote that there may be multiple seats or students in the same position at the beginning.\n \nExample 1:\n\nInput: seats = [3,1,5], students = [2,7,4]\nOutput: 4\nExplanation: The students are moved as follows:\n- The first student is moved from position 2 to position 1 using 1 move.\n- The second student is moved from position 7 to position 5 using 2 moves.\n- The third student is moved from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n\nExample 2:\n\nInput: seats = [4,1,5,9], students = [1,3,2,6]\nOutput: 7\nExplanation: The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from position 3 to position 4 using 1 move.\n- The third student is moved from position 2 to position 5 using 3 moves.\n- The fourth student is moved from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n\nExample 3:\n\nInput: seats = [2,2,6,6], students = [1,3,2,6]\nOutput: 4\nExplanation: Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from position 1 to position 2 using 1 move.\n- The second student is moved from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n\n \nConstraints:\n\nn == seats.length == students.length\n1 <= n <= 100\n1 <= seats[i], students[j] <= 100\n\n", "hints": ["Can we sort the arrays to help solve the problem?", "Can we greedily match each student to a seat?", "The smallest positioned student will go to the smallest positioned chair, and then the next smallest positioned student will go to the next smallest positioned chair, and so on."], "exampleTestcases": "[3,1,5]\n[2,7,4]\n[4,1,5,9]\n[1,3,2,6]\n[2,2,6,6]\n[1,3,2,6]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMovesToSeat(vector<int>& seats, vector<int>& students) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minMovesToSeat(int[] seats, int[] students) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minMovesToSeat(self, seats, students):\n        \"\"\"\n        :type seats: List[int]\n        :type students: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minMovesToSeat(int* seats, int seatsSize, int* students, int studentsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinMovesToSeat(int[] seats, int[] students) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} seats\n * @param {number[]} students\n * @return {number}\n */\nvar minMovesToSeat = function(seats, students) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minMovesToSeat(seats: number[], students: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $seats\n     * @param Integer[] $students\n     * @return Integer\n     */\n    function minMovesToSeat($seats, $students) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minMovesToSeat(_ seats: [Int], _ students: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minMovesToSeat(seats: IntArray, students: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minMovesToSeat(List<int> seats, List<int> students) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minMovesToSeat(seats []int, students []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} seats\n# @param {Integer[]} students\n# @return {Integer}\ndef min_moves_to_seat(seats, students)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minMovesToSeat(seats: Array[Int], students: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_moves_to_seat(seats: Vec<i32>, students: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-moves-to-seat seats students)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_moves_to_seat(Seats :: [integer()], Students :: [integer()]) -> integer().\nmin_moves_to_seat(Seats, Students) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_moves_to_seat(seats :: [integer], students :: [integer]) :: integer\n  def min_moves_to_seat(seats, students) do\n    \n  end\nend"}}}