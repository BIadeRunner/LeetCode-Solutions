{"question_id": "1539", "problem_slug": "diagonal-traverse-ii", "problem_title": "Diagonal Traverse II", "content": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.\n \nExample 1:\n\n\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]\n\nExample 2:\n\n\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i].length <= 105\n1 <= sum(nums[i].length) <= 105\n1 <= nums[i][j] <= 105\n\n", "hints": ["Notice that numbers with equal sums of row and column indexes belong to the same diagonal.", "Store them in tuples (sum, row, val), sort them, and then regroup the answer."], "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findDiagonalOrder(vector<vector<int>>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findDiagonalOrder(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDiagonalOrder(int** nums, int numsSize, int* numsColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindDiagonalOrder(IList<IList<int>> nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findDiagonalOrder = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findDiagonalOrder(nums: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $nums\n     * @return Integer[]\n     */\n    function findDiagonalOrder($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findDiagonalOrder(_ nums: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findDiagonalOrder(nums: List<List<Int>>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findDiagonalOrder(List<List<int>> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findDiagonalOrder(nums [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} nums\n# @return {Integer[]}\ndef find_diagonal_order(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findDiagonalOrder(nums: List[List[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_diagonal_order(nums: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-diagonal-order nums)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_diagonal_order(Nums :: [[integer()]]) -> [integer()].\nfind_diagonal_order(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_diagonal_order(nums :: [[integer]]) :: [integer]\n  def find_diagonal_order(nums) do\n    \n  end\nend"}}}