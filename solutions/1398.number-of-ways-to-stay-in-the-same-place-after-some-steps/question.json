{"question_id": "1398", "problem_slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps", "problem_title": "Number of Ways to Stay in the Same Place After Some Steps", "content": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n\nExample 2:\n\nInput: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n\nExample 3:\n\nInput: steps = 4, arrLen = 2\nOutput: 8\n\n \nConstraints:\n\n1 <= steps <= 500\n1 <= arrLen <= 106\n\n", "hints": ["Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves.", "Notice that the computational complexity does not depend of \"arrlen\"."], "exampleTestcases": "3\n2\n2\n4\n4\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numWays(int steps, int arrLen) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numWays(int steps, int arrLen) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numWays(self, steps, arrLen):\n        \"\"\"\n        :type steps: int\n        :type arrLen: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numWays(int steps, int arrLen) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumWays(int steps, int arrLen) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} steps\n * @param {number} arrLen\n * @return {number}\n */\nvar numWays = function(steps, arrLen) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numWays(steps: number, arrLen: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $steps\n     * @param Integer $arrLen\n     * @return Integer\n     */\n    function numWays($steps, $arrLen) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numWays(_ steps: Int, _ arrLen: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numWays(steps: Int, arrLen: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numWays(int steps, int arrLen) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numWays(steps int, arrLen int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} steps\n# @param {Integer} arr_len\n# @return {Integer}\ndef num_ways(steps, arr_len)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numWays(steps: Int, arrLen: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_ways(steps: i32, arr_len: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (num-ways steps arrLen)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec num_ways(Steps :: integer(), ArrLen :: integer()) -> integer().\nnum_ways(Steps, ArrLen) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_ways(steps :: integer, arr_len :: integer) :: integer\n  def num_ways(steps, arr_len) do\n    \n  end\nend"}}}