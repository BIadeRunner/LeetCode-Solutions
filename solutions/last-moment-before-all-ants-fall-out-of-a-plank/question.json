{"questionId": "1627", "acRate": 68.50294365012616, "difficulty": "Medium", "freqBar": 38.36374951127274, "frontendQuestionId": "1503", "paidOnly": false, "status": "ac", "title": "Last Moment Before All Ants Fall Out of a Plank", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Brainteaser", "id": "VG9waWNUYWdOb2RlOjMy", "slug": "brainteaser"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank", "content": "<p>We have a wooden plank of the length <code>n</code> <strong>units</strong>. Some ants are walking on the plank, each ant moves with a speed of <strong>1 unit per second</strong>. Some of the ants move to the <strong>left</strong>, the other move to the <strong>right</strong>.</p>\n\n<p>When two ants moving in two <strong>different</strong> directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.</p>\n\n<p>When an ant reaches <strong>one end</strong> of the plank at a time <code>t</code>, it falls out of the plank immediately.</p>\n\n<p>Given an integer <code>n</code> and two integer arrays <code>left</code> and <code>right</code>, the positions of the ants moving to the left and the right, return <em>the moment when the last ant(s) fall out of the plank</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants.jpg\" style=\"width: 450px; height: 610px;\" />\n<pre>\n<strong>Input:</strong> n = 4, left = [4,3], right = [0,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants2.jpg\" style=\"width: 639px; height: 101px;\" />\n<pre>\n<strong>Input:</strong> n = 7, left = [], right = [0,1,2,3,4,5,6,7]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> All ants are going to the right, the ant at index 0 needs 7 seconds to fall.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/ants3.jpg\" style=\"width: 639px; height: 100px;\" />\n<pre>\n<strong>Input:</strong> n = 7, left = [0,1,2,3,4,5,6,7], right = []\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> All ants are going to the left, the ant at index 7 needs 7 seconds to fall.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left.length &lt;= n + 1</code></li>\n\t<li><code>0 &lt;= left[i] &lt;= n</code></li>\n\t<li><code>0 &lt;= right.length &lt;= n + 1</code></li>\n\t<li><code>0 &lt;= right[i] &lt;= n</code></li>\n\t<li><code>1 &lt;= left.length + right.length &lt;= n + 1</code></li>\n\t<li>All values of <code>left</code> and <code>right</code> are unique, and each value can appear <strong>only in one</strong> of the two arrays.</li>\n</ul>\n", "hints": ["The ants change their way when they meet is equivalent to continue moving without changing their direction.", "Answer is the max distance for one ant to reach the end of the plank in the facing direction."], "exampleTestcases": "4\n[4,3]\n[0,1]\n7\n[]\n[0,1,2,3,4,5,6,7]\n7\n[0,1,2,3,4,5,6,7]\n[]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getLastMoment(int n, vector<int>& left, vector<int>& right) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getLastMoment(int n, int[] left, int[] right) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getLastMoment(self, n, left, right):\n        \"\"\"\n        :type n: int\n        :type left: List[int]\n        :type right: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int getLastMoment(int n, int* left, int leftSize, int* right, int rightSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetLastMoment(int n, int[] left, int[] right) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} left\n * @param {number[]} right\n * @return {number}\n */\nvar getLastMoment = function(n, left, right) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getLastMoment(n: number, left: number[], right: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $left\n     * @param Integer[] $right\n     * @return Integer\n     */\n    function getLastMoment($n, $left, $right) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getLastMoment(_ n: Int, _ left: [Int], _ right: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getLastMoment(n: Int, left: IntArray, right: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int getLastMoment(int n, List<int> left, List<int> right) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getLastMoment(n int, left []int, right []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} left\n# @param {Integer[]} right\n# @return {Integer}\ndef get_last_moment(n, left, right)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getLastMoment(n: Int, left: Array[Int], right: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_last_moment(n: i32, left: Vec<i32>, right: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-last-moment n left right)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_last_moment(N :: integer(), Left :: [integer()], Right :: [integer()]) -> integer().\nget_last_moment(N, Left, Right) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_last_moment(n :: integer, left :: [integer], right :: [integer]) :: integer\n  def get_last_moment(n, left, right) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "movement-of-robots", "title": "Movement of Robots", "isPaidOnly": false}]}