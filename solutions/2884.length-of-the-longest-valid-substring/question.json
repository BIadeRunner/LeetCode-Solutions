{"question_id": "2884", "problem_slug": "length-of-the-longest-valid-substring", "problem_title": "Length of the Longest Valid Substring", "content": "You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\n \nExample 1:\n\nInput: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring. \nExample 2:\n\nInput: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring. \n\n \nConstraints:\n\n1 <= word.length <= 105\nword consists only of lowercase English letters.\n1 <= forbidden.length <= 105\n1 <= forbidden[i].length <= 10\nforbidden[i] consists only of lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]\n\"leetcode\"\n[\"de\",\"le\",\"e\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestValidSubstring(string word, vector<string>& forbidden) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestValidSubstring(String word, List<String> forbidden) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestValidSubstring(self, word, forbidden):\n        \"\"\"\n        :type word: str\n        :type forbidden: List[str]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestValidSubstring(char * word, char ** forbidden, int forbiddenSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestValidSubstring(string word, IList<string> forbidden) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {string[]} forbidden\n * @return {number}\n */\nvar longestValidSubstring = function(word, forbidden) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestValidSubstring(word: string, forbidden: string[]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param String[] $forbidden\n     * @return Integer\n     */\n    function longestValidSubstring($word, $forbidden) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestValidSubstring(_ word: String, _ forbidden: [String]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestValidSubstring(word: String, forbidden: List<String>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestValidSubstring(String word, List<String> forbidden) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestValidSubstring(word string, forbidden []string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} word\n# @param {String[]} forbidden\n# @return {Integer}\ndef longest_valid_substring(word, forbidden)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestValidSubstring(word: String, forbidden: List[String]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_valid_substring(word: String, forbidden: Vec<String>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-valid-substring word forbidden)\n  (-> string? (listof string?) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_valid_substring(Word :: unicode:unicode_binary(), Forbidden :: [unicode:unicode_binary()]) -> integer().\nlongest_valid_substring(Word, Forbidden) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_valid_substring(word :: String.t, forbidden :: [String.t]) :: integer\n  def longest_valid_substring(word, forbidden) do\n    \n  end\nend"}}}