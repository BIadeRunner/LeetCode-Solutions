{"question_id": "1192", "problem_slug": "divide-chocolate", "problem_title": "Divide Chocolate", "content": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array sweetness.\nYou want to share the chocolate with your k friends so you start cutting the chocolate bar into k + 1 pieces using k cuts, each piece consists of some consecutive chunks.\nBeing generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.\nFind the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.\n \nExample 1:\n\nInput: sweetness = [1,2,3,4,5,6,7,8,9], k = 5\nOutput: 6\nExplanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]\n\nExample 2:\n\nInput: sweetness = [5,6,7,8,9,1,2,3,4], k = 8\nOutput: 1\nExplanation: There is only one way to cut the bar into 9 pieces.\n\nExample 3:\n\nInput: sweetness = [1,2,2,1,2,2,1,2,2], k = 2\nOutput: 5\nExplanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]\n\n \nConstraints:\n\n0 <= k < sweetness.length <= 104\n1 <= sweetness[i] <= 105\n\n", "hints": ["After dividing the array into K+1 sub-arrays, you will pick the sub-array with the minimum sum.", "Divide the sub-array into K+1 sub-arrays such that the minimum sub-array sum is as maximum as possible.", "Use binary search with greedy check."], "exampleTestcases": "[1,2,3,4,5,6,7,8,9]\n5\n[5,6,7,8,9,1,2,3,4]\n8\n[1,2,2,1,2,2,1,2,2]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximizeSweetness(vector<int>& sweetness, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maximizeSweetness(int[] sweetness, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximizeSweetness(self, sweetness, k):\n        \"\"\"\n        :type sweetness: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maximizeSweetness(int* sweetness, int sweetnessSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximizeSweetness(int[] sweetness, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} sweetness\n * @param {number} k\n * @return {number}\n */\nvar maximizeSweetness = function(sweetness, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximizeSweetness(sweetness: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $sweetness\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximizeSweetness($sweetness, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximizeSweetness(_ sweetness: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximizeSweetness(sweetness: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximizeSweetness(List<int> sweetness, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximizeSweetness(sweetness []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} sweetness\n# @param {Integer} k\n# @return {Integer}\ndef maximize_sweetness(sweetness, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximizeSweetness(sweetness: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximize_sweetness(sweetness: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximize-sweetness sweetness k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximize_sweetness(Sweetness :: [integer()], K :: integer()) -> integer().\nmaximize_sweetness(Sweetness, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximize_sweetness(sweetness :: [integer], k :: integer) :: integer\n  def maximize_sweetness(sweetness, k) do\n    \n  end\nend"}}}