{"questionId": "2685", "acRate": 51.025463192311506, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2661", "paidOnly": false, "status": "ac", "title": "First Completely Painted Row or Column", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "first-completely-painted-row-or-column", "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>arr</code>, and an <code>m x n</code> integer <strong>matrix</strong> <code>mat</code>. <code>arr</code> and <code>mat</code> both contain <strong>all</strong> the integers in the range <code>[1, m * n]</code>.</p>\n\n<p>Go through each index <code>i</code> in <code>arr</code> starting from index <code>0</code> and paint the cell in <code>mat</code> containing the integer <code>arr[i]</code>.</p>\n\n<p>Return <em>the smallest index</em> <code>i</code> <em>at which either a row or a column will be completely painted in</em> <code>mat</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"image explanation for example 1\" /><img alt=\"image explanation for example 1\" src=\"https://assets.leetcode.com/uploads/2023/01/18/grid1.jpg\" style=\"width: 321px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> arr = [1,3,4,2], mat = [[1,4],[2,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"image explanation for example 2\" src=\"https://assets.leetcode.com/uploads/2023/01/18/grid2.jpg\" style=\"width: 601px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The second column becomes fully painted at arr[3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n = mat[i].length</code></li>\n\t<li><code>arr.length == m * n</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i], mat[r][c] &lt;= m * n</code></li>\n\t<li>All the integers of <code>arr</code> are <strong>unique</strong>.</li>\n\t<li>All the integers of <code>mat</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Can we use a frequency array?", "Pre-process the positions of the values in the matrix.", "Traverse the array and increment the corresponding row and column frequency using the pre-processed positions.", "If the row frequency becomes equal to the number of columns, or vice-versa return the current index."], "exampleTestcases": "[1,3,4,2]\n[[1,4],[2,3]]\n[2,8,7,4,1,3,5,6,9]\n[[3,2,5],[1,4,6],[8,7,9]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int firstCompleteIndex(int[] arr, int[][] mat) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def firstCompleteIndex(self, arr, mat):\n        \"\"\"\n        :type arr: List[int]\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int firstCompleteIndex(int* arr, int arrSize, int** mat, int matSize, int* matColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FirstCompleteIndex(int[] arr, int[][] mat) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number[][]} mat\n * @return {number}\n */\nvar firstCompleteIndex = function(arr, mat) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function firstCompleteIndex(arr: number[], mat: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function firstCompleteIndex($arr, $mat) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func firstCompleteIndex(_ arr: [Int], _ mat: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun firstCompleteIndex(arr: IntArray, mat: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int firstCompleteIndex(List<int> arr, List<List<int>> mat) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func firstCompleteIndex(arr []int, mat [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer[][]} mat\n# @return {Integer}\ndef first_complete_index(arr, mat)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def firstCompleteIndex(arr: Array[Int], mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn first_complete_index(arr: Vec<i32>, mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (first-complete-index arr mat)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec first_complete_index(Arr :: [integer()], Mat :: [[integer()]]) -> integer().\nfirst_complete_index(Arr, Mat) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec first_complete_index(arr :: [integer], mat :: [[integer]]) :: integer\n  def first_complete_index(arr, mat) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "check-if-every-row-and-column-contains-all-numbers", "title": "Check if Every Row and Column Contains All Numbers", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "difference-between-ones-and-zeros-in-row-and-column", "title": "Difference Between Ones and Zeros in Row and Column", "isPaidOnly": false}]}