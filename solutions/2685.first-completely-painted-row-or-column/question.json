{"question_id": "2685", "problem_slug": "first-completely-painted-row-or-column", "problem_title": "First Completely Painted Row or Column", "content": "You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].\nGo through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].\nReturn the smallest index i at which either a row or a column will be completely painted in mat.\n \nExample 1:\n\n\nInput: arr = [1,3,4,2], mat = [[1,4],[2,3]]\nOutput: 2\nExplanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].\n\nExample 2:\n\n\nInput: arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]\nOutput: 3\nExplanation: The second column becomes fully painted at arr[3].\n\n \nConstraints:\n\nm == mat.length\nn = mat[i].length\narr.length == m * n\n1 <= m, n <= 105\n1 <= m * n <= 105\n1 <= arr[i], mat[r][c] <= m * n\nAll the integers of arr are unique.\nAll the integers of mat are unique.\n\n", "hints": ["Can we use a frequency array?", "Pre-process the positions of the values in the matrix.", "Traverse the array and increment the corresponding row and column frequency using the pre-processed positions.", "If the row frequency becomes equal to the number of columns, or vice-versa return the current index."], "exampleTestcases": "[1,3,4,2]\n[[1,4],[2,3]]\n[2,8,7,4,1,3,5,6,9]\n[[3,2,5],[1,4,6],[8,7,9]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int firstCompleteIndex(int[] arr, int[][] mat) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def firstCompleteIndex(self, arr, mat):\n        \"\"\"\n        :type arr: List[int]\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int firstCompleteIndex(int* arr, int arrSize, int** mat, int matSize, int* matColSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FirstCompleteIndex(int[] arr, int[][] mat) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number[][]} mat\n * @return {number}\n */\nvar firstCompleteIndex = function(arr, mat) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function firstCompleteIndex(arr: number[], mat: number[][]): number {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function firstCompleteIndex($arr, $mat) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func firstCompleteIndex(_ arr: [Int], _ mat: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun firstCompleteIndex(arr: IntArray, mat: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int firstCompleteIndex(List<int> arr, List<List<int>> mat) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func firstCompleteIndex(arr []int, mat [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer[][]} mat\n# @return {Integer}\ndef first_complete_index(arr, mat)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def firstCompleteIndex(arr: Array[Int], mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn first_complete_index(arr: Vec<i32>, mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (first-complete-index arr mat)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec first_complete_index(Arr :: [integer()], Mat :: [[integer()]]) -> integer().\nfirst_complete_index(Arr, Mat) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec first_complete_index(arr :: [integer], mat :: [[integer]]) :: integer\n  def first_complete_index(arr, mat) do\n    \n  end\nend"}}}