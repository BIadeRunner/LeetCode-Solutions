{"question_id": "465", "problem_slug": "optimal-account-balancing", "problem_title": "Optimal Account Balancing", "content": "You are given an array of transactions transactions where transactions[i] = [fromi, toi, amounti] indicates that the person with ID = fromi gave amounti $ to the person with ID = toi.\nReturn the minimum number of transactions required to settle the debt.\n \nExample 1:\n\nInput: transactions = [[0,1,10],[2,0,5]]\nOutput: 2\nExplanation:\nPerson #0 gave person #1 $10.\nPerson #2 gave person #0 $5.\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\n\nExample 2:\n\nInput: transactions = [[0,1,10],[1,0,1],[1,2,5],[2,0,5]]\nOutput: 1\nExplanation:\nPerson #0 gave person #1 $10.\nPerson #1 gave person #0 $1.\nPerson #1 gave person #2 $5.\nPerson #2 gave person #0 $5.\nTherefore, person #1 only need to give person #0 $4, and all debt is settled.\n\n \nConstraints:\n\n1 <= transactions.length <= 8\ntransactions[i].length == 3\n0 <= fromi, toi < 12\nfromi != toi\n1 <= amounti <= 100\n\n", "hints": [], "exampleTestcases": "[[0,1,10],[2,0,5]]\n[[0,1,10],[1,0,1],[1,2,5],[2,0,5]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minTransfers(vector<vector<int>>& transactions) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minTransfers(int[][] transactions) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minTransfers(self, transactions):\n        \"\"\"\n        :type transactions: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minTransfers(self, transactions: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minTransfers(int** transactions, int transactionsSize, int* transactionsColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinTransfers(int[][] transactions) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} transactions\n * @return {number}\n */\nvar minTransfers = function(transactions) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minTransfers(transactions: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $transactions\n     * @return Integer\n     */\n    function minTransfers($transactions) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minTransfers(_ transactions: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minTransfers(transactions: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minTransfers(List<List<int>> transactions) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minTransfers(transactions [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} transactions\n# @return {Integer}\ndef min_transfers(transactions)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minTransfers(transactions: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_transfers(transactions: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-transfers transactions)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_transfers(Transactions :: [[integer()]]) -> integer().\nmin_transfers(Transactions) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_transfers(transactions :: [[integer]]) :: integer\n  def min_transfers(transactions) do\n    \n  end\nend"}}}