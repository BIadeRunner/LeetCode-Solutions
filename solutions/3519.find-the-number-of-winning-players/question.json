{"questionId": "3519", "acRate": 61.36206571590124, "difficulty": "Easy", "freqBar": 31.073879876138665, "frontendQuestionId": "3238", "paidOnly": false, "status": "ac", "title": "Find the Number of Winning Players", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}], "titleSlug": "find-the-number-of-winning-players", "content": "<p>You are given an integer <code>n</code> representing the number of players in a game and a 2D array <code>pick</code> where <code>pick[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents that the player <code>x<sub>i</sub></code> picked a ball of color <code>y<sub>i</sub></code>.</p>\n\n<p>Player <code>i</code> <strong>wins</strong> the game if they pick <strong>strictly more</strong> than <code>i</code> balls of the <strong>same</strong> color. In other words,</p>\n\n<ul>\n\t<li>Player 0 wins if they pick any ball.</li>\n\t<li>Player 1 wins if they pick at least two balls of the <em>same</em> color.</li>\n\t<li>...</li>\n\t<li>Player <code>i</code> wins if they pick at least<code>i + 1</code> balls of the <em>same</em> color.</li>\n</ul>\n\n<p>Return the number of players who <strong>win</strong> the game.</p>\n\n<p><strong>Note</strong> that <em>multiple</em> players can win the game.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, pick = [[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Player 0 and player 1 win the game, while players 2 and 3 do not win.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, pick = [[1,1],[1,2],[1,3],[1,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No player wins the game.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, pick = [[1,1],[2,4],[2,4],[2,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Player 2 wins the game by picking 3 balls with color 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= pick.length &lt;= 100</code></li>\n\t<li><code>pick[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub> &lt;= n - 1 </code></li>\n\t<li><code>0 &lt;= y<sub>i</sub> &lt;= 10</code></li>\n</ul>\n", "hints": ["Keep track of the number of balls of each color for each user using hashing.", "Find the maximum color that occurred for each player."], "exampleTestcases": "4\n[[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]]\n5\n[[1,1],[1,2],[1,3],[1,4]]\n5\n[[1,1],[2,4],[2,4],[2,4]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int winningPlayerCount(int n, vector<vector<int>>& pick) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int winningPlayerCount(int n, int[][] pick) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def winningPlayerCount(self, n, pick):\n        \"\"\"\n        :type n: int\n        :type pick: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def winningPlayerCount(self, n: int, pick: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int winningPlayerCount(int n, int** pick, int pickSize, int* pickColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int WinningPlayerCount(int n, int[][] pick) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} pick\n * @return {number}\n */\nvar winningPlayerCount = function(n, pick) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function winningPlayerCount(n: number, pick: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $pick\n     * @return Integer\n     */\n    function winningPlayerCount($n, $pick) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func winningPlayerCount(_ n: Int, _ pick: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun winningPlayerCount(n: Int, pick: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int winningPlayerCount(int n, List<List<int>> pick) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func winningPlayerCount(n int, pick [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} pick\n# @return {Integer}\ndef winning_player_count(n, pick)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def winningPlayerCount(n: Int, pick: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn winning_player_count(n: i32, pick: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (winning-player-count n pick)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec winning_player_count(N :: integer(), Pick :: [[integer()]]) -> integer().\nwinning_player_count(N, Pick) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec winning_player_count(n :: integer, pick :: [[integer]]) :: integer\n  def winning_player_count(n, pick) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "can-i-win", "title": "Can I Win", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "predict-the-winner", "title": "Predict the Winner", "isPaidOnly": false}]}