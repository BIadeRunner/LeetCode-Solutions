{"question_id": "3519", "problem_slug": "find-the-number-of-winning-players", "problem_title": "Find the Number of Winning Players", "content": "You are given an integer n representing the number of players in a game and a 2D array pick where pick[i] = [xi, yi] represents that the player xi picked a ball of color yi.\nPlayer i wins the game if they pick strictly more than i balls of the same color. In other words,\n\nPlayer 0 wins if they pick any ball.\nPlayer 1 wins if they pick at least two balls of the same color.\n...\nPlayer i wins if they pick at leasti + 1 balls of the same color.\n\nReturn the number of players who win the game.\nNote that multiple players can win the game.\n \nExample 1:\n\nInput: n = 4, pick = [[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]]\nOutput: 2\nExplanation:\nPlayer 0 and player 1 win the game, while players 2 and 3 do not win.\n\nExample 2:\n\nInput: n = 5, pick = [[1,1],[1,2],[1,3],[1,4]]\nOutput: 0\nExplanation:\nNo player wins the game.\n\nExample 3:\n\nInput: n = 5, pick = [[1,1],[2,4],[2,4],[2,4]]\nOutput: 1\nExplanation:\nPlayer 2 wins the game by picking 3 balls with color 4.\n\n \nConstraints:\n\n2 <= n <= 10\n1 <= pick.length <= 100\npick[i].length == 2\n0 <= xi <= n - 1 \n0 <= yi <= 10\n\n", "hints": ["Keep track of the number of balls of each color for each user using hashing.", "Find the maximum color that occurred for each player."], "exampleTestcases": "4\n[[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]]\n5\n[[1,1],[1,2],[1,3],[1,4]]\n5\n[[1,1],[2,4],[2,4],[2,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int winningPlayerCount(int n, vector<vector<int>>& pick) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int winningPlayerCount(int n, int[][] pick) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def winningPlayerCount(self, n, pick):\n        \"\"\"\n        :type n: int\n        :type pick: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def winningPlayerCount(self, n: int, pick: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int winningPlayerCount(int n, int** pick, int pickSize, int* pickColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int WinningPlayerCount(int n, int[][] pick) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} pick\n * @return {number}\n */\nvar winningPlayerCount = function(n, pick) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function winningPlayerCount(n: number, pick: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $pick\n     * @return Integer\n     */\n    function winningPlayerCount($n, $pick) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func winningPlayerCount(_ n: Int, _ pick: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun winningPlayerCount(n: Int, pick: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int winningPlayerCount(int n, List<List<int>> pick) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func winningPlayerCount(n int, pick [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} pick\n# @return {Integer}\ndef winning_player_count(n, pick)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def winningPlayerCount(n: Int, pick: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn winning_player_count(n: i32, pick: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (winning-player-count n pick)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec winning_player_count(N :: integer(), Pick :: [[integer()]]) -> integer().\nwinning_player_count(N, Pick) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec winning_player_count(n :: integer, pick :: [[integer]]) :: integer\n  def winning_player_count(n, pick) do\n    \n  end\nend"}}}