{"questionId": "200", "acRate": 60.592399111185244, "difficulty": "Medium", "freqBar": 96.05603285409555, "frontendQuestionId": "200", "paidOnly": false, "status": "ac", "title": "Number of Islands", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}], "titleSlug": "number-of-islands", "content": "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n", "hints": [], "exampleTestcases": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int numIslands(char** grid, int gridSize, int* gridColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumIslands(char[][] grid) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numIslands(grid: string[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numIslands(_ grid: [[Character]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numIslands(grid: Array<CharArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int numIslands(List<List<String>> grid) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func numIslands(grid [][]byte) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (num-islands grid)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec num_islands(Grid :: [[char()]]) -> integer().\nnum_islands(Grid) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_islands(grid :: [[char]]) :: integer\n  def num_islands(grid) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "surrounded-regions", "title": "Surrounded Regions", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "walls-and-gates", "title": "Walls and Gates", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "number-of-islands-ii", "title": "Number of Islands II", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "battleships-in-a-board", "title": "Battleships in a Board", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-distinct-islands", "title": "Number of Distinct Islands", "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "max-area-of-island", "title": "Max Area of Island", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-sub-islands", "title": "Count Sub Islands", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-all-groups-of-farmland", "title": "Find All Groups of Farmland", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph", "title": "Count Unreachable Pairs of Nodes in an Undirected Graph", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-number-of-fish-in-a-grid", "title": "Maximum Number of Fish in a Grid", "isPaidOnly": false}]}