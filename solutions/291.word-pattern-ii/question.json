{"question_id": "291", "problem_slug": "word-pattern-ii", "problem_title": "Word Pattern II", "content": "Given a pattern and a string s, return true if s matches the pattern.\nA string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.\n \nExample 1:\n\nInput: pattern = \"abab\", s = \"redblueredblue\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"red\"\n'b' -> \"blue\"\nExample 2:\n\nInput: pattern = \"aaaa\", s = \"asdasdasdasd\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"asd\"\n\nExample 3:\n\nInput: pattern = \"aabb\", s = \"xyzabcxzyabc\"\nOutput: false\n\n \nConstraints:\n\n1 <= pattern.length, s.length <= 20\npattern and s consist of only lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"abab\"\n\"redblueredblue\"\n\"aaaa\"\n\"asdasdasdasd\"\n\"aabb\"\n\"xyzabcxzyabc\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool wordPatternMatch(string pattern, string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean wordPatternMatch(String pattern, String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def wordPatternMatch(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def wordPatternMatch(self, pattern: str, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool wordPatternMatch(char* pattern, char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool WordPatternMatch(string pattern, string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPatternMatch = function(pattern, s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function wordPatternMatch(pattern: string, s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPatternMatch($pattern, $s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func wordPatternMatch(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun wordPatternMatch(pattern: String, s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool wordPatternMatch(String pattern, String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func wordPatternMatch(pattern string, s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern_match(pattern, s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def wordPatternMatch(pattern: String, s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn word_pattern_match(pattern: String, s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (word-pattern-match pattern s)\n  (-> string? string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec word_pattern_match(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\nword_pattern_match(Pattern, S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec word_pattern_match(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern_match(pattern, s) do\n    \n  end\nend"}}}