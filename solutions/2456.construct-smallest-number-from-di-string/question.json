{"question_id": "2456", "problem_slug": "construct-smallest-number-from-di-string", "problem_title": "Construct Smallest Number From DI String", "content": "You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.\nA 0-indexed string num of length n + 1 is created using the following conditions:\n\nnum consists of the digits '1' to '9', where each digit is used at most once.\nIf pattern[i] == 'I', then num[i] < num[i + 1].\nIf pattern[i] == 'D', then num[i] > num[i + 1].\n\nReturn the lexicographically smallest possible string num that meets the conditions.\n \nExample 1:\n\nInput: pattern = \"IIIDIDDD\"\nOutput: \"123549876\"\nExplanation:\nAt indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once.\nExample 2:\n\nInput: pattern = \"DDD\"\nOutput: \"4321\"\nExplanation:\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions.\n\n \nConstraints:\n\n1 <= pattern.length <= 8\npattern consists of only the letters 'I' and 'D'.\n\n", "hints": ["With the constraints, could we generate every possible string?", "Yes we can. Now we just need to check if the string meets all the conditions."], "exampleTestcases": "\"IIIDIDDD\"\n\"DDD\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestNumber(string pattern) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String smallestNumber(String pattern) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestNumber(self, pattern):\n        \"\"\"\n        :type pattern: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* smallestNumber(char* pattern) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string SmallestNumber(string pattern) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} pattern\n * @return {string}\n */\nvar smallestNumber = function(pattern) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestNumber(pattern: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $pattern\n     * @return String\n     */\n    function smallestNumber($pattern) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestNumber(_ pattern: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestNumber(pattern: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String smallestNumber(String pattern) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestNumber(pattern string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} pattern\n# @return {String}\ndef smallest_number(pattern)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestNumber(pattern: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_number(pattern: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-number pattern)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_number(Pattern :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_number(Pattern) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_number(pattern :: String.t) :: String.t\n  def smallest_number(pattern) do\n    \n  end\nend"}}}