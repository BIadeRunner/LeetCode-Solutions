{"question_id": "2442", "problem_slug": "number-of-arithmetic-triplets", "problem_title": "Number of Arithmetic Triplets", "content": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\n\ni < j < k,\nnums[j] - nums[i] == diff, and\nnums[k] - nums[j] == diff.\n\nReturn the number of unique arithmetic triplets.\n \nExample 1:\n\nInput: nums = [0,1,4,6,7,10], diff = 3\nOutput: 2\nExplanation:\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n\nExample 2:\n\nInput: nums = [4,5,6,7,8,9], diff = 2\nOutput: 2\nExplanation:\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n\n \nConstraints:\n\n3 <= nums.length <= 200\n0 <= nums[i] <= 200\n1 <= diff <= 50\nnums is strictly increasing.\n\n", "hints": ["Are the constraints small enough for brute force?", "We can use three loops, each iterating through the array to go through every possible triplet. Be sure to not count duplicates."], "exampleTestcases": "[0,1,4,6,7,10]\n3\n[4,5,6,7,8,9]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int arithmeticTriplets(vector<int>& nums, int diff) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int arithmeticTriplets(int[] nums, int diff) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def arithmeticTriplets(self, nums, diff):\n        \"\"\"\n        :type nums: List[int]\n        :type diff: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int arithmeticTriplets(int* nums, int numsSize, int diff) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int ArithmeticTriplets(int[] nums, int diff) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} diff\n * @return {number}\n */\nvar arithmeticTriplets = function(nums, diff) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function arithmeticTriplets(nums: number[], diff: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $diff\n     * @return Integer\n     */\n    function arithmeticTriplets($nums, $diff) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func arithmeticTriplets(_ nums: [Int], _ diff: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun arithmeticTriplets(nums: IntArray, diff: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int arithmeticTriplets(List<int> nums, int diff) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func arithmeticTriplets(nums []int, diff int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} diff\n# @return {Integer}\ndef arithmetic_triplets(nums, diff)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def arithmeticTriplets(nums: Array[Int], diff: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn arithmetic_triplets(nums: Vec<i32>, diff: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (arithmetic-triplets nums diff)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec arithmetic_triplets(Nums :: [integer()], Diff :: integer()) -> integer().\narithmetic_triplets(Nums, Diff) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec arithmetic_triplets(nums :: [integer], diff :: integer) :: integer\n  def arithmetic_triplets(nums, diff) do\n    \n  end\nend"}}}