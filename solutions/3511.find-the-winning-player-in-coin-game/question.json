{"question_id": "3511", "problem_slug": "find-the-winning-player-in-coin-game", "problem_title": "Find the Winning Player in Coin Game", "content": "You are given two positive integers x and y, denoting the number of coins with values 75 and 10 respectively.\nAlice and Bob are playing a game. Each turn, starting with Alice, the player must pick up coins with a total value 115. If the player is unable to do so, they lose the game.\nReturn the name of the player who wins the game if both players play optimally.\n \nExample 1:\n\nInput: x = 2, y = 7\nOutput: \"Alice\"\nExplanation:\nThe game ends in a single turn:\n\nAlice picks 1 coin with a value of 75 and 4 coins with a value of 10.\n\n\nExample 2:\n\nInput: x = 4, y = 11\nOutput: \"Bob\"\nExplanation:\nThe game ends in 2 turns:\n\nAlice picks 1 coin with a value of 75 and 4 coins with a value of 10.\nBob picks 1 coin with a value of 75 and 4 coins with a value of 10.\n\n\n \nConstraints:\n\n1 <= x, y <= 100\n\n", "hints": ["The only way to make 115 is to use one coin of value 75 and four coins of value 10. Each turn uses up these many coins.", "Hence the number of turns is <code>min(x, y / 4)</code>.", "Determine the winner from its parity."], "exampleTestcases": "2\n7\n4\n11", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string losingPlayer(int x, int y) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String losingPlayer(int x, int y) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def losingPlayer(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def losingPlayer(self, x: int, y: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* losingPlayer(int x, int y) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LosingPlayer(int x, int y) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {string}\n */\nvar losingPlayer = function(x, y) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function losingPlayer(x: number, y: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return String\n     */\n    function losingPlayer($x, $y) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func losingPlayer(_ x: Int, _ y: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun losingPlayer(x: Int, y: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String losingPlayer(int x, int y) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func losingPlayer(x int, y int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {String}\ndef losing_player(x, y)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def losingPlayer(x: Int, y: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn losing_player(x: i32, y: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (losing-player x y)\n  (-> exact-integer? exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec losing_player(X :: integer(), Y :: integer()) -> unicode:unicode_binary().\nlosing_player(X, Y) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec losing_player(x :: integer, y :: integer) :: String.t\n  def losing_player(x, y) do\n    \n  end\nend"}}}