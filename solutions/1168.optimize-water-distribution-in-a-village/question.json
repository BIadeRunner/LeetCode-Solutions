{"questionId": "1144", "acRate": 64.94195433228262, "difficulty": "Hard", "freqBar": 19.30455520805437, "frontendQuestionId": "1168", "paidOnly": true, "status": "ac", "title": "Optimize Water Distribution in a Village", "topicTags": [{"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Minimum Spanning Tree", "id": "VG9waWNUYWdOb2RlOjYxMDgz", "slug": "minimum-spanning-tree"}], "titleSlug": "optimize-water-distribution-in-a-village", "content": "<p>There are <code>n</code> houses in a village. We want to supply water for all the houses by building wells and laying pipes.</p>\n\n<p>For each house <code>i</code>, we can either build a well inside it directly with cost <code>wells[i - 1]</code> (note the <code>-1</code> due to <strong>0-indexing</strong>), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array <code>pipes</code> where each <code>pipes[j] = [house1<sub>j</sub>, house2<sub>j</sub>, cost<sub>j</sub>]</code> represents the cost to connect <code>house1<sub>j</sub></code> and <code>house2<sub>j</sub></code> together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.</p>\n\n<p>Return <em>the minimum total cost to supply water to all houses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/22/1359_ex1.png\" style=\"width: 189px; height: 196px;\" />\n<pre>\n<strong>Input:</strong> n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The image shows the costs of connecting houses using pipes.\nThe best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, wells = [1,1], pipes = [[1,2,1],[1,2,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can supply water with cost two using one of the three options:\nOption 1:\n  - Build a well inside house 1 with cost 1.\n  - Build a well inside house 2 with cost 1.\nThe total cost will be 2.\nOption 2:\n  - Build a well inside house 1 with cost 1.\n  - Connect house 2 with house 1 with cost 1.\nThe total cost will be 2.\nOption 3:\n  - Build a well inside house 2 with cost 1.\n  - Connect house 1 with house 2 with cost 1.\nThe total cost will be 2.\nNote that we can connect houses 1 and 2 with cost 1 or with cost 2 but we will always choose <strong>the cheapest option</strong>. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>wells.length == n</code></li>\n\t<li><code>0 &lt;= wells[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= pipes.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>pipes[j].length == 3</code></li>\n\t<li><code>1 &lt;= house1<sub>j</sub>, house2<sub>j</sub> &lt;= n</code></li>\n\t<li><code>0 &lt;= cost<sub>j</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>house1<sub>j</sub> != house2<sub>j</sub></code></li>\n</ul>\n", "hints": ["What if we model this problem as a graph problem?", "A house is a node and a pipe is a weighted edge.", "How to represent building wells in the graph model?", "Add a virtual node, connect it to houses with edges weighted by the costs to build wells in these houses.", "The problem is now reduced to a Minimum Spanning Tree problem."], "exampleTestcases": "3\n[1,2,2]\n[[1,2,1],[2,3,1]]\n2\n[1,1]\n[[1,2,1],[1,2,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minCostToSupplyWater(self, n, wells, pipes):\n        \"\"\"\n        :type n: int\n        :type wells: List[int]\n        :type pipes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minCostToSupplyWater(int n, int* wells, int wellsSize, int** pipes, int pipesSize, int* pipesColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} wells\n * @param {number[][]} pipes\n * @return {number}\n */\nvar minCostToSupplyWater = function(n, wells, pipes) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minCostToSupplyWater(n: number, wells: number[], pipes: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $wells\n     * @param Integer[][] $pipes\n     * @return Integer\n     */\n    function minCostToSupplyWater($n, $wells, $pipes) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minCostToSupplyWater(_ n: Int, _ wells: [Int], _ pipes: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minCostToSupplyWater(n: Int, wells: IntArray, pipes: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minCostToSupplyWater(int n, List<int> wells, List<List<int>> pipes) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minCostToSupplyWater(n int, wells []int, pipes [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} wells\n# @param {Integer[][]} pipes\n# @return {Integer}\ndef min_cost_to_supply_water(n, wells, pipes)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minCostToSupplyWater(n: Int, wells: Array[Int], pipes: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost_to_supply_water(n: i32, wells: Vec<i32>, pipes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-cost-to-supply-water n wells pipes)\n  (-> exact-integer? (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_cost_to_supply_water(N :: integer(), Wells :: [integer()], Pipes :: [[integer()]]) -> integer().\nmin_cost_to_supply_water(N, Wells, Pipes) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_cost_to_supply_water(n :: integer, wells :: [integer], pipes :: [[integer]]) :: integer\n  def min_cost_to_supply_water(n, wells, pipes) do\n    \n  end\nend"}], "similarQuestionList": []}