{"questionId": "3559", "acRate": 18.3258920335043, "difficulty": "Medium", "freqBar": 31.94743221311026, "frontendQuestionId": "3291", "paidOnly": false, "status": "ac", "title": "Minimum Number of Valid Strings to Form Target I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Trie", "id": "VG9waWNUYWdOb2RlOjI3", "slug": "trie"}, {"name": "Segment Tree", "id": "VG9waWNUYWdOb2RlOjI5", "slug": "segment-tree"}, {"name": "Rolling Hash", "id": "VG9waWNUYWdOb2RlOjU2NTk4", "slug": "rolling-hash"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}, {"name": "Hash Function", "id": "VG9waWNUYWdOb2RlOjYxMDY1", "slug": "hash-function"}], "titleSlug": "minimum-number-of-valid-strings-to-form-target-i", "content": "<p>You are given an array of strings <code>words</code> and a string <code>target</code>.</p>\n\n<p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> is a <span data-keyword=\"string-prefix\">prefix</span> of <strong>any</strong> string in <code>words</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of <strong>valid</strong> strings that can be <em>concatenated</em> to form <code>target</code>. If it is <strong>not</strong> possible to form <code>target</code>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abc&quot;,&quot;aaaaa&quot;,&quot;bcdef&quot;], target = &quot;aabcdabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 2 of <code>words[1]</code>, i.e. <code>&quot;aa&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[2]</code>, i.e. <code>&quot;bcd&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[0]</code>, i.e. <code>&quot;abc&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abababab&quot;,&quot;ab&quot;], target = &quot;ababaababa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abcdef&quot;], target = &quot;xyz&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li>The input is generated such that <code>sum(words[i].length) &lt;= 10<sup>5</sup></code>.</li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>target</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.", "If <code>target[(i + 1)..j]</code> matches any prefix, update the range <code>dp[(i + 1)..j]</code> to minimum between original value and <code>dp[i] + 1</code>.", "Use a Trie to check prefix matching."], "exampleTestcases": "[\"abc\",\"aaaaa\",\"bcdef\"]\n\"aabcdabc\"\n[\"abababab\",\"ab\"]\n\"ababaababa\"\n[\"abcdef\"]\n\"xyz\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minValidStrings(vector<string>& words, string target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minValidStrings(String[] words, String target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minValidStrings(self, words, target):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minValidStrings(self, words: List[str], target: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minValidStrings(char** words, int wordsSize, char* target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinValidStrings(string[] words, string target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} target\n * @return {number}\n */\nvar minValidStrings = function(words, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minValidStrings(words: string[], target: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $target\n     * @return Integer\n     */\n    function minValidStrings($words, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minValidStrings(_ words: [String], _ target: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minValidStrings(words: Array<String>, target: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minValidStrings(List<String> words, String target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minValidStrings(words []string, target string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} target\n# @return {Integer}\ndef min_valid_strings(words, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minValidStrings(words: Array[String], target: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_valid_strings(words: Vec<String>, target: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-valid-strings words target)\n  (-> (listof string?) string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_valid_strings(Words :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\nmin_valid_strings(Words, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_valid_strings(words :: [String.t], target :: String.t) :: integer\n  def min_valid_strings(words, target) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "isPaidOnly": false}]}