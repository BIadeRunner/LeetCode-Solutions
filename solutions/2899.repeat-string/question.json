{"question_id": "2899", "problem_slug": "repeat-string", "problem_title": "Repeat String", "content": "Write code that enhances all strings such that you can call the string.replicate(x) method on any string and it will return repeated string x times.\nTry to implement it without using the built-in method string.repeat.\n \nExample 1:\n\nInput: str = \"hello\", times = 2\nOutput: \"hellohello\"\nExplanation: \"hello\" is repeated 2 times\n\nExample 2:\n\nInput: str = \"code\", times = 3\nOutput: \"codecodecode\"\nExplanation: \"code\" is repeated 3 times\n\nExample 3:\n\nInput: str = \"js\", times = 1\nOutput: \"js\"\nExplanation: \"js\" is repeated 1 time\n\n \nConstraints:\n\n1 <= times <= 105\n1 <= str.length <= 1000\n\n \nFollow up: Let's assume, for the sake of simplifying analysis, that concatenating strings is a constant time operation O(1). With this assumption in mind, can you write an algorithm with a runtime complexity of O(log n)?", "hints": [], "exampleTestcases": "\"hello\"\n2\n\"code\"\n3\n\"js\"\n1", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} times\n * @return {string}\n */\nString.prototype.replicate = function(times) {\n    \n}"}, "TypeScript": {"langSlug": "typescript", "code": "interface String {\n    replicate(times: number): string;\n}\n\nString.prototype.replicate = function(times): string {\n    \n}"}}}