{"question_id": "2025", "problem_slug": "redistribute-characters-to-make-all-strings-equal", "problem_title": "Redistribute Characters to Make All Strings Equal", "content": "You are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.\n \nExample 1:\n\nInput: words = [\"abc\",\"aabc\",\"bc\"]\nOutput: true\nExplanation: Move the first 'a' in words[1] to the front of words[2],\nto make words[1] = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return true.\n\nExample 2:\n\nInput: words = [\"ab\",\"a\"]\nOutput: false\nExplanation: It is impossible to make all the strings equal using the operation.\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists of lowercase English letters.\n\n", "hints": ["Characters are independent—only the frequency of characters matters.", "It is possible to distribute characters if all characters can be divided equally among all strings."], "exampleTestcases": "[\"abc\",\"aabc\",\"bc\"]\n[\"ab\",\"a\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool makeEqual(vector<string>& words) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean makeEqual(String[] words) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeEqual(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeEqual(self, words: List[str]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool makeEqual(char** words, int wordsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool MakeEqual(string[] words) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {boolean}\n */\nvar makeEqual = function(words) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeEqual(words: string[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Boolean\n     */\n    function makeEqual($words) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeEqual(_ words: [String]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeEqual(words: Array<String>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool makeEqual(List<String> words) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeEqual(words []string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Boolean}\ndef make_equal(words)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeEqual(words: Array[String]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_equal(words: Vec<String>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-equal words)\n  (-> (listof string?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_equal(Words :: [unicode:unicode_binary()]) -> boolean().\nmake_equal(Words) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_equal(words :: [String.t]) :: boolean\n  def make_equal(words) do\n    \n  end\nend"}}}