{"question_id": "3101", "problem_slug": "maximum-coins-heroes-can-collect", "problem_title": "Maximum Coins Heroes Can Collect", "content": "There is a battle and n heroes are trying to defeat m monsters. You are given two 1-indexed arrays of positive integers heroes and monsters of length n and m, respectively. heroes[i] is the power of ith hero, and monsters[i] is the power of ith monster.\nThe ith hero can defeat the jth monster if monsters[j] <= heroes[i].\nYou are also given a 1-indexed array coins of length m consisting of positive integers. coins[i] is the number of coins that each hero earns after defeating the ith monster.\nReturn an array ans of length n where ans[i] is the maximum number of coins that the ith hero can collect from this battle.\nNotes\n\nThe health of a hero doesn't get reduced after defeating a monster.\nMultiple heroes can defeat a monster, but each monster can be defeated by a given hero only once.\n\n \nExample 1:\n\nInput: heroes = [1,4,2], monsters = [1,1,5,2,3], coins = [2,3,4,5,6]\nOutput: [5,16,10]\nExplanation: For each hero, we list the index of all the monsters he can defeat:\n1st hero: [1,2] since the power of this hero is 1 and monsters[1], monsters[2] <= 1. So this hero collects coins[1] + coins[2] = 5 coins.\n2nd hero: [1,2,4,5] since the power of this hero is 4 and monsters[1], monsters[2], monsters[4], monsters[5] <= 4. So this hero collects coins[1] + coins[2] + coins[4] + coins[5] = 16 coins.\n3rd hero: [1,2,4] since the power of this hero is 2 and monsters[1], monsters[2], monsters[4] <= 2. So this hero collects coins[1] + coins[2] + coins[4] = 10 coins.\nSo the answer would be [5,16,10].\nExample 2:\n\nInput: heroes = [5], monsters = [2,3,1,2], coins = [10,6,5,2]\nOutput: [23]\nExplanation: This hero can defeat all the monsters since monsters[i] <= 5. So he collects all of the coins: coins[1] + coins[2] + coins[3] + coins[4] = 23, and the answer would be [23].\n\nExample 3:\n\nInput: heroes = [4,4], monsters = [5,7,8], coins = [1,1,1]\nOutput: [0,0]\nExplanation: In this example, no hero can defeat a monster. So the answer would be [0,0],\n\n \nConstraints:\n\n1 <= n == heroes.length <= 105\n1 <= m == monsters.length <= 105\ncoins.length == m\n1 <= heroes[i], monsters[i], coins[i] <= 109\n\n", "hints": ["If a hero can defeat the <code>i<sup>th</sup></code> monster, then he defeats all the monsters having a power less than <code>monster[i]</code>.", "Sort monsters by their powers. Also change the order of the coins array according to this sort.", "Construct a prefix sum array for the updated coins array.", "For each hero, do a binary search and find the last position of the most powerful monster that this hero can defeat.", "If said monster has index <code>i</code>, then the <code>i<sup>th</sup></code> element of the partial sum array would be the answer.", "If a hero can defeat the <code>i<sup>th</sup></code> monster, then he defeats all the monsters having a power less than <code>monster[i]</code>.", "Sort monsters by their powers. Also change the order of the coins array according to this sort.", "Construct a prefix sum array for the updated coins array.", "For each hero, do a binary search and find the last position of the most powerful monster that this hero can defeat.", "If said monster has index <code>i</code>, then the <code>i<sup>th</sup></code> element of the partial sum array would be the answer."], "exampleTestcases": "[1,4,2]\n[1,1,5,2,3]\n[2,3,4,5,6]\n[5]\n[2,3,1,2]\n[10,6,5,2]\n[4,4]\n[5,7,8]\n[1,1,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<long long> maximumCoins(vector<int>& heroes, vector<int>& monsters, vector<int>& coins) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long[] maximumCoins(int[] heroes, int[] monsters, int[] coins) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumCoins(self, heroes, monsters, coins):\n        \"\"\"\n        :type heroes: List[int]\n        :type monsters: List[int]\n        :type coins: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumCoins(self, heroes: List[int], monsters: List[int], coins: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* maximumCoins(int* heroes, int heroesSize, int* monsters, int monstersSize, int* coins, int coinsSize, int* returnSize){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long[] MaximumCoins(int[] heroes, int[] monsters, int[] coins) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} heroes\n * @param {number[]} monsters\n * @param {number[]} coins\n * @return {number[]}\n */\nvar maximumCoins = function(heroes, monsters, coins) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumCoins(heroes: number[], monsters: number[], coins: number[]): number[] {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heroes\n     * @param Integer[] $monsters\n     * @param Integer[] $coins\n     * @return Integer[]\n     */\n    function maximumCoins($heroes, $monsters, $coins) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumCoins(_ heroes: [Int], _ monsters: [Int], _ coins: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumCoins(heroes: IntArray, monsters: IntArray, coins: IntArray): LongArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> maximumCoins(List<int> heroes, List<int> monsters, List<int> coins) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumCoins(heroes []int, monsters []int, coins []int) []int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} heroes\n# @param {Integer[]} monsters\n# @param {Integer[]} coins\n# @return {Integer[]}\ndef maximum_coins(heroes, monsters, coins)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumCoins(heroes: Array[Int], monsters: Array[Int], coins: Array[Int]): Array[Long] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_coins(heroes: Vec<i32>, monsters: Vec<i32>, coins: Vec<i32>) -> Vec<i64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-coins heroes monsters coins)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_coins(Heroes :: [integer()], Monsters :: [integer()], Coins :: [integer()]) -> [integer()].\nmaximum_coins(Heroes, Monsters, Coins) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_coins(heroes :: [integer], monsters :: [integer], coins :: [integer]) :: [integer]\n  def maximum_coins(heroes, monsters, coins) do\n    \n  end\nend"}}}