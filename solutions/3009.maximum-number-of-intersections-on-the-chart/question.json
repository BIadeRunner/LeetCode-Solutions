{"questionId": "3315", "acRate": 45.5670350792888, "difficulty": "Hard", "freqBar": 40.24802987536686, "frontendQuestionId": "3009", "paidOnly": true, "status": "ac", "title": "Maximum Number of Intersections on the Chart", "titleSlug": "maximum-number-of-intersections-on-the-chart", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Binary Indexed Tree", "id": "VG9waWNUYWdOb2RlOjI4", "slug": "binary-indexed-tree"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}], "content": "<p>There is a line chart consisting of <code>n</code> points connected by line segments. You are given a <strong>1-indexed</strong> integer array <code>y</code>. The <code>k<sup>th</sup></code> point has coordinates <code>(k, y[k])</code>. There are no horizontal lines; that is, no two consecutive points have the same y-coordinate.</p>\n\n<p>We can draw an infinitely long horizontal line. Return <em>the <strong>maximum</strong> number of points of intersection of the line with the chart</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/static_assets/others/20231208-020549.jpeg\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; height: 217px; width: 600px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> y = [1,2,1,2,1,3,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> As you can see in the image above, the line y = 1.5 has 5 intersections with the chart (in red crosses). You can also see the line y = 2 which intersects the chart in 4 points (in red crosses). It can be shown that there is no horizontal line intersecting the chart at more than 5 points. So the answer would be 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/static_assets/others/20231208-020557.jpeg\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 400px; height: 404px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> y = [2,1,3,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> As you can see in the image above, the line y = 1.5 has 2 intersections with the chart (in red crosses). You can also see the line y = 2 which intersects the chart in 2 points (in red crosses). It can be shown that there is no horizontal line intersecting the chart at more than 2 points. So the answer would be 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= y.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= y[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>y[i] != y[i + 1]</code> for <code>i</code> in range <code>[1, n - 1]</code></li>\n</ul>\n", "hints": ["We move a horizontal line from the bottom of the chart to the top.", "For each point we reach, the number of intersections might change, so we have to count it.", "If a point we just reached is lower than its previous/next point, the number of intersections increases.", "If a point we just reached is higher than its previous/next point, the number of intersections decreases.", "There is also another solution using Fenwick Tree."], "exampleTestcases": "[1,2,1,2,1,3,2]\n[2,1,3,4,5]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxIntersectionCount(vector<int>& y) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxIntersectionCount(int[] y) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxIntersectionCount(self, y):\n        \"\"\"\n        :type y: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxIntersectionCount(self, y: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxIntersectionCount(int* y, int ySize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxIntersectionCount(int[] y) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} y\n * @return {number}\n */\nvar maxIntersectionCount = function(y) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxIntersectionCount(y: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $y\n     * @return Integer\n     */\n    function maxIntersectionCount($y) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxIntersectionCount(_ y: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxIntersectionCount(y: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxIntersectionCount(List<int> y) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxIntersectionCount(y []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} y\n# @return {Integer}\ndef max_intersection_count(y)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxIntersectionCount(y: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_intersection_count(y: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-intersection-count y)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_intersection_count(Y :: [integer()]) -> integer().\nmax_intersection_count(Y) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_intersection_count(y :: [integer]) :: integer\n  def max_intersection_count(y) do\n    \n  end\nend"}], "similarQuestionList": []}