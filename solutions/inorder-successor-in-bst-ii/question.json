{"questionId": "509", "acRate": 60.887601119399626, "difficulty": "Medium", "freqBar": 68.64326512952567, "frontendQuestionId": "510", "paidOnly": true, "status": "ac", "title": "Inorder Successor in BST II", "topicTags": [{"name": "Tree", "id": "VG9waWNUYWdOb2RlOjIw", "slug": "tree"}, {"name": "Binary Search Tree", "id": "VG9waWNUYWdOb2RlOjMw", "slug": "binary-search-tree"}, {"name": "Binary Tree", "id": "VG9waWNUYWdOb2RlOjYxMDU3", "slug": "binary-tree"}], "titleSlug": "inorder-successor-in-bst-ii", "content": "<p>Given a <code>node</code> in a binary search tree, return <em>the in-order successor of that node in the BST</em>. If that node has no in-order successor, return <code>null</code>.</p>\n\n<p>The successor of a <code>node</code> is the node with the smallest key greater than <code>node.val</code>.</p>\n\n<p>You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for <code>Node</code>:</p>\n\n<pre>\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG\" style=\"width: 122px; height: 117px;\" />\n<pre>\n<strong>Input:</strong> tree = [2,1,3], node = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1&#39;s in-order successor node is 2. Note that both the node and the return value is of Node type.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG\" style=\"width: 246px; height: 229px;\" />\n<pre>\n<strong>Input:</strong> tree = [5,3,6,2,4,null,null,1], node = 6\n<strong>Output:</strong> null\n<strong>Explanation:</strong> There is no in-order successor of the current node, so the answer is null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>All Nodes will have unique values.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it without looking up any of the node&#39;s values?</p>\n", "hints": [], "exampleTestcases": "[2,1,3]\n1\n[5,3,6,2,4,null,null,1]\n6", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* parent;\n};\n*/\n\nclass Solution {\npublic:\n    Node* inorderSuccessor(Node* node) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n};\n*/\n\nclass Solution {\n    public Node inorderSuccessor(Node node) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution(object):\n    def inorderSuccessor(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n\nclass Solution:\n    def inorderSuccessor(self, node: 'Node') -> 'Optional[Node]':\n        "}, {"lang": "C", "langSlug": "c", "code": "/*\n// Definition for a Node.\nstruct Node {\n    int val;\n    struct Node* left;\n    struct Node* right;\n    struct Node* parent;\n};\n*/\n\nstruct Node* inorderSuccessor(struct Node* node) {\n\t\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n*/\n\npublic class Solution {\n    public Node InorderSuccessor(Node x) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val) {\n *    this.val = val;\n *    this.left = null;\n *    this.right = null;\n *    this.parent = null;\n * };\n */\n\n/**\n * @param {_Node} node\n * @return {_Node}\n */\nvar inorderSuccessor = function(node) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     left: _Node | null\n *     right: _Node | null\n *     parent: _Node | null\n *     \n *     constructor(v: number) {\n *         this.val = v;\n *         this.left = null;\n *         this.right = null;\n *         this.parent = null;\n *     }\n * }\n */\n\nfunction inorderSuccessor(node: _Node | null): _Node | null {\n\t\n};"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     public $parent = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->left = null;\n *         $this->right = null;\n *         $this->parent = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $node\n     * @return Node\n     */\n    function inorderSuccessor($node) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *     public var parent: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.parent = nil\n *     }\n * }\n */\n\nclass Solution {\n    func inorderSuccessor(_ node: Node?) -> Node? {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *\t\tvar left: Node? = null\n *\t\tvar right: Node? = null\n *\t\tvar parent: Node? = null\n * }\n */\n\nclass Solution {\n    fun inorderSuccessor(node: Node?): Node? {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Parent *Node\n * }\n */\n\nfunc inorderSuccessor(node *Node) *Node {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :left, :right, :parent\n#     def initialize(val=0)\n#         @val = val\n#         @left, @right, parent = nil, nil, nil\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef inorderSuccessor(node)\n\t\nend"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var left: Node = null\n *   var right: Node = null\n *   var parent: Node = null\n * }\n */\n\nobject Solution {\n    def inorderSuccessor(node: Node): Node = {\n\t\t\n\t}\n}"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "inorder-successor-in-bst", "title": "Inorder Successor in BST", "isPaidOnly": true}]}