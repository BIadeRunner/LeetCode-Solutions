{"question_id": "3435", "problem_slug": "block-placement-queries", "problem_title": "Block Placement Queries", "content": "There exists an infinite number line, with its origin at 0 and extending towards the positive x-axis.\nYou are given a 2D array queries, which contains two types of queries:\n\nFor a query of type 1, queries[i] = [1, x]. Build an obstacle at distance x from the origin. It is guaranteed that there is no obstacle at distance x when the query is asked.\nFor a query of type 2, queries[i] = [2, x, sz]. Check if it is possible to place a block of size sz anywhere in the range [0, x] on the line, such that the block entirely lies in the range [0, x]. A block cannot be placed if it intersects with any obstacle, but it may touch it. Note that you do not actually place the block. Queries are separate.\n\nReturn a boolean array results, where results[i] is true if you can place the block specified in the ith query of type 2, and false otherwise.\n \nExample 1:\n\nInput: queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]\nOutput: [false,true,true]\nExplanation:\n\nFor query 0, place an obstacle at x = 2. A block of size at most 2 can be placed before x = 3.\n\nExample 2:\n\nInput: queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]\nOutput: [true,true,false]\nExplanation:\n\n\nPlace an obstacle at x = 7 for query 0. A block of size at most 7 can be placed before x = 7.\nPlace an obstacle at x = 2 for query 2. Now, a block of size at most 5 can be placed before x = 7, and a block of size at most 2 before x = 2.\n\n\n \nConstraints:\n\n1 <= queries.length <= 15 * 104\n2 <= queries[i].length <= 3\n1 <= queries[i][0] <= 2\n1 <= x, sz <= min(5 * 104, 3 * queries.length)\nThe input is generated such that for queries of type 1, no obstacle exists at distance x when the query is asked.\nThe input is generated such that there is at least one query of type 2.\n\n", "hints": ["Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.", "For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], …d[x - sz]) > sz</code>.", "Use segment tree to maintain <code>d[x]</code>."], "exampleTestcases": "[[1,2],[2,3,3],[2,3,1],[2,2,2]]\n[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def getResults(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* getResults(int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<bool> GetResults(int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar getResults = function(queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function getResults(queries: number[][]): boolean[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function getResults($queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func getResults(_ queries: [[Int]]) -> [Bool] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun getResults(queries: Array<IntArray>): List<Boolean> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<bool> getResults(List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func getResults(queries [][]int) []bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef get_results(queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def getResults(queries: Array[Array[Int]]): List[Boolean] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn get_results(queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (get-results queries)\n  (-> (listof (listof exact-integer?)) (listof boolean?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec get_results(Queries :: [[integer()]]) -> [boolean()].\nget_results(Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_results(queries :: [[integer]]) :: [boolean]\n  def get_results(queries) do\n    \n  end\nend"}}}