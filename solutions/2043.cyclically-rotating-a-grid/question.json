{"question_id": "2043", "problem_slug": "cyclically-rotating-a-grid", "problem_title": "Cyclically Rotating a Grid", "content": "You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\n\nA cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:\n\nReturn the matrix after applying k cyclic rotations to it.\n \nExample 1:\n\n\r\nInput: grid = [[40,10],[30,20]], k = 1\r\nOutput: [[10,20],[40,30]]\r\nExplanation: The figures above represent the grid at every state.\r\n\nExample 2:\n  \n\r\nInput: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2\r\nOutput: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\r\nExplanation: The figures above represent the grid at every state.\r\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 50\nBoth m and n are even integers.\n1 <= grid[i][j] <= 5000\n1 <= k <= 109\n", "hints": ["First, you need to consider each layer separately as an array.", "Just cycle this array and then re-assign it."], "exampleTestcases": "[[40,10],[30,20]]\n1\n[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> rotateGrid(vector<vector<int>>& grid, int k) {\r\n        \r\n    }\r\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\r\n    public int[][] rotateGrid(int[][] grid, int k) {\r\n        \r\n    }\r\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\r\n    def rotateGrid(self, grid, k):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        \"\"\""}, "Python3": {"langSlug": "python3", "code": "class Solution:\r\n    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:"}, "C": {"langSlug": "c", "code": "/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *returnColumnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** rotateGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){\r\n\r\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\r\n    public int[][] RotateGrid(int[][] grid, int k) {\r\n        \r\n    }\r\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\r\n * @param {number[][]} grid\r\n * @param {number} k\r\n * @return {number[][]}\r\n */\r\nvar rotateGrid = function(grid, k) {\r\n    \r\n};"}, "TypeScript": {"langSlug": "typescript", "code": "function rotateGrid(grid: number[][], k: number): number[][] {\r\n\r\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[][] $grid\r\n     * @param Integer $k\r\n     * @return Integer[][]\r\n     */\r\n    function rotateGrid($grid, $k) {\r\n        \r\n    }\r\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\r\n    func rotateGrid(_ grid: [[Int]], _ k: Int) -> [[Int]] {\r\n        \r\n    }\r\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\r\n    fun rotateGrid(grid: Array<IntArray>, k: Int): Array<IntArray> {\r\n        \r\n    }\r\n}"}, "Go": {"langSlug": "golang", "code": "func rotateGrid(grid [][]int, k int) [][]int {\r\n    \r\n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\r\n# @param {Integer} k\r\n# @return {Integer[][]}\r\ndef rotate_grid(grid, k)\r\n    \r\nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\r\n    def rotateGrid(grid: Array[Array[Int]], k: Int): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\r\n    pub fn rotate_grid(grid: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\r\n        \r\n    }\r\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (rotate-grid grid k)\r\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\r\n\r\n  )"}}}