{"question_id": "2491", "problem_slug": "smallest-even-multiple", "problem_title": "Smallest Even Multiple", "content": "Given a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.\n \nExample 1:\n\nInput: n = 5\nOutput: 10\nExplanation: The smallest multiple of both 5 and 2 is 10.\n\nExample 2:\n\nInput: n = 6\nOutput: 6\nExplanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.\n\n \nConstraints:\n\n1 <= n <= 150\n\n", "hints": ["A guaranteed way to find a multiple of 2 and n is to multiply them together. When is this the answer, and when is there a smaller answer?", "There is a smaller answer when n is even."], "exampleTestcases": "5\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestEvenMultiple(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int smallestEvenMultiple(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestEvenMultiple(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestEvenMultiple(self, n: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int smallestEvenMultiple(int n) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SmallestEvenMultiple(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar smallestEvenMultiple = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestEvenMultiple(n: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function smallestEvenMultiple($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestEvenMultiple(_ n: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestEvenMultiple(n: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int smallestEvenMultiple(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestEvenMultiple(n int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef smallest_even_multiple(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestEvenMultiple(n: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_even_multiple(n: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-even-multiple n)\n  (-> exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_even_multiple(N :: integer()) -> integer().\nsmallest_even_multiple(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_even_multiple(n :: integer) :: integer\n  def smallest_even_multiple(n) do\n    \n  end\nend"}}}