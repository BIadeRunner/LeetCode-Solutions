{"questionId": "202", "acRate": 56.94160253002377, "difficulty": "Easy", "freqBar": 84.29873892216206, "frontendQuestionId": "202", "paidOnly": false, "status": "ac", "title": "Happy Number", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}], "titleSlug": "happy-number", "content": "<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n\n<p>A <strong>happy number</strong> is a number defined by the following process:</p>\n\n<ul>\n\t<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n\t<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>\n\t<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 19\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "19\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isHappy(int n) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isHappy(int n) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isHappy(int n) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsHappy(int n) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isHappy(n: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isHappy(_ n: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isHappy(n: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isHappy(int n) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isHappy(n int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_happy(n)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isHappy(n: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_happy(n: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-happy n)\n  (-> exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_happy(N :: integer()) -> boolean().\nis_happy(N) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_happy(n :: integer) :: boolean\n  def is_happy(n) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "linked-list-cycle", "title": "Linked List Cycle", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "add-digits", "title": "Add Digits", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "ugly-number", "title": "Ugly Number", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "sum-of-digits-of-string-after-convert", "title": "Sum of Digits of String After Convert", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-addition-to-make-integer-beautiful", "title": "Minimum Addition to Make Integer Beautiful", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors", "title": "Smallest Value After Replacing With Sum of Prime Factors", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-the-digits-that-divide-a-number", "title": "Count the Digits That Divide a Number", "isPaidOnly": false}]}