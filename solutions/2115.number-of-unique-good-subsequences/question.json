{"question_id": "2115", "problem_slug": "number-of-unique-good-subsequences", "problem_title": "Number of Unique Good Subsequences", "content": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\n\nFor example, if binary = \"001\", then all the good subsequences are [\"0\", \"0\", \"1\"], so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\", \"01\", and \"001\" are not good because they have leading zeros.\n\nReturn the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n \nExample 1:\n\nInput: binary = \"001\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\".\n\nExample 2:\n\nInput: binary = \"11\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\".\nExample 3:\n\nInput: binary = \"101\"\nOutput: 5\nExplanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".\n\n \nConstraints:\n\n1 <= binary.length <= 105\nbinary consists of only '0's and '1's.\n\n", "hints": ["The number of unique good subsequences is equal to the number of unique decimal values there are for all possible subsequences.", "Find the answer at each index based on the previous indexes' answers."], "exampleTestcases": "\"001\"\n\"11\"\n\"101\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfUniqueGoodSubsequences(string binary) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfUniqueGoodSubsequences(String binary) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfUniqueGoodSubsequences(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfUniqueGoodSubsequences(char* binary) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfUniqueGoodSubsequences(string binary) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} binary\n * @return {number}\n */\nvar numberOfUniqueGoodSubsequences = function(binary) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfUniqueGoodSubsequences(binary: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $binary\n     * @return Integer\n     */\n    function numberOfUniqueGoodSubsequences($binary) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfUniqueGoodSubsequences(_ binary: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfUniqueGoodSubsequences(binary: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfUniqueGoodSubsequences(String binary) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfUniqueGoodSubsequences(binary string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} binary\n# @return {Integer}\ndef number_of_unique_good_subsequences(binary)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfUniqueGoodSubsequences(binary: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_unique_good_subsequences(binary: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-unique-good-subsequences binary)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_unique_good_subsequences(Binary :: unicode:unicode_binary()) -> integer().\nnumber_of_unique_good_subsequences(Binary) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_unique_good_subsequences(binary :: String.t) :: integer\n  def number_of_unique_good_subsequences(binary) do\n    \n  end\nend"}}}