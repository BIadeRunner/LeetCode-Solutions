{"question_id": "3177", "problem_slug": "minimizing-array-after-replacing-pairs-with-their-product", "problem_title": "Minimizing Array After Replacing Pairs With Their Product", "content": "Given an integer array nums and an integer k, you can perform the following operation on the array any number of times:\n\nSelect two adjacent elements of the array like x and y, such that x * y <= k, and replace both of them with a single element with value x * y (e.g. in one operation the array [1, 2, 2, 3] with k = 5 can become [1, 4, 3] or [2, 2, 3], but can't become [1, 2, 6]).\n\nReturn the minimum possible length of nums after any number of operations.\n \nExample 1:\n\nInput: nums = [2,3,3,7,3,5], k = 20\nOutput: 3\nExplanation: We perform these operations:\n1. [2,3,3,7,3,5] -> [6,3,7,3,5]\n2. [6,3,7,3,5] -> [18,7,3,5]\n3. [18,7,3,5] -> [18,7,15]\nIt can be shown that 3 is the minimum length possible to achieve with the given operation.\n\nExample 2:\n\nInput: nums = [3,3,3,3], k = 6\nOutput: 4\nExplanation: We can't perform any operations since the product of every two adjacent elements is greater than 6.\nHence, the answer is 4.\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n1 <= k <= 109\n\n", "hints": ["If there is a zero in the array, then the answer would be <code>1</code>.", "Merge all adjacent ones (since <code>1 * 1 = 1</code> and <code>k >= 1</code>).", "Let <code>dp[i]</code> be the answer to the problem for the first <code>i</code> elements.", "To calculate <code>dp[i]</code>, try to brute-force all indices <code>j</code> such that elements from <code>j</code> to <code>i</code> are merged together to create a new element.", "For a fixed <code>i</code>, you could go backward from <code>i<sup>th</sup></code> elements and multiply them together until the product is at most <code>k</code>. Now if you are currently on index <code>j</code> and you've merged all elements from <code>j<sup>th</sup></code> element to <code>i<sup>th</sup></code> element, <code>dp[i] = min(dp[i], dp[j - 1] + 1)</code>.", "The above backward moving can be done at most <code>2 * log<sub>2</sub>(k)</code> times. Since we've merged adjacent ones, every two adjacent elements have a product of at least <code>2</code>.", "So the total time complexity would be <code>n * 2 * log<sub>2</sub>(k)</code>."], "exampleTestcases": "[2,3,3,7,3,5]\n20\n[3,3,3,3]\n6", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minArrayLength(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minArrayLength(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minArrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minArrayLength(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minArrayLength(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinArrayLength(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minArrayLength = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minArrayLength(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minArrayLength($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minArrayLength(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minArrayLength(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minArrayLength(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minArrayLength(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_array_length(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minArrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_array_length(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-array-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_array_length(Nums :: [integer()], K :: integer()) -> integer().\nmin_array_length(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_array_length(nums :: [integer], k :: integer) :: integer\n  def min_array_length(nums, k) do\n    \n  end\nend"}}}