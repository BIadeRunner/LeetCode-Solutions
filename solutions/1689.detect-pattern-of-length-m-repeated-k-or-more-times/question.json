{"question_id": "1689", "problem_slug": "detect-pattern-of-length-m-repeated-k-or-more-times", "problem_title": "Detect Pattern of Length M Repeated K or More Times", "content": "Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.\n \nExample 1:\n\nInput: arr = [1,2,4,4,4,4], m = 1, k = 3\nOutput: true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n\nExample 2:\n\nInput: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.\n\nExample 3:\n\nInput: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n\n \nConstraints:\n\n2 <= arr.length <= 100\n1 <= arr[i] <= 100\n1 <= m <= 100\n2 <= k <= 100\n\n", "hints": ["Use a three-layer loop to check all possible patterns by iterating through all possible starting positions, all indexes less than m, and if the character at the index is repeated k times."], "exampleTestcases": "[1,2,4,4,4,4]\n1\n3\n[1,2,1,2,1,1,1,3]\n2\n2\n[1,2,1,2,1,3]\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool containsPattern(vector<int>& arr, int m, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean containsPattern(int[] arr, int m, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def containsPattern(self, arr, m, k):\n        \"\"\"\n        :type arr: List[int]\n        :type m: int\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool containsPattern(int* arr, int arrSize, int m, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool ContainsPattern(int[] arr, int m, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} m\n * @param {number} k\n * @return {boolean}\n */\nvar containsPattern = function(arr, m, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function containsPattern(arr: number[], m: number, k: number): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $m\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsPattern($arr, $m, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func containsPattern(_ arr: [Int], _ m: Int, _ k: Int) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun containsPattern(arr: IntArray, m: Int, k: Int): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool containsPattern(List<int> arr, int m, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func containsPattern(arr []int, m int, k int) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} m\n# @param {Integer} k\n# @return {Boolean}\ndef contains_pattern(arr, m, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def containsPattern(arr: Array[Int], m: Int, k: Int): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn contains_pattern(arr: Vec<i32>, m: i32, k: i32) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (contains-pattern arr m k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec contains_pattern(Arr :: [integer()], M :: integer(), K :: integer()) -> boolean().\ncontains_pattern(Arr, M, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec contains_pattern(arr :: [integer], m :: integer, k :: integer) :: boolean\n  def contains_pattern(arr, m, k) do\n    \n  end\nend"}}}