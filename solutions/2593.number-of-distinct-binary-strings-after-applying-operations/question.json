{"questionId": "2593", "acRate": 64.20323325635104, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2450", "paidOnly": true, "status": "ac", "title": "Number of Distinct Binary Strings After Applying Operations", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "number-of-distinct-binary-strings-after-applying-operations", "content": "<p>You are given a <strong>binary</strong> string <code>s</code> and a positive integer <code>k</code>.</p>\n\n<p>You can apply the following operation on the string <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose any substring of size <code>k</code> from <code>s</code> and <strong>flip</strong> all its characters, that is, turn all <code>1</code>&#39;s into <code>0</code>&#39;s, and all <code>0</code>&#39;s into <code>1</code>&#39;s.</li>\n</ul>\n\n<p>Return <em>the number of <strong>distinct</strong> strings you can obtain</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>A binary string is a string that consists <strong>only</strong> of the characters <code>0</code> and <code>1</code>.</li>\n\t<li>A substring is a contiguous part of a string.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1001&quot;, k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can obtain the following strings:\n- Applying no operation on the string gives s = &quot;1001&quot;.\n- Applying one operation on the substring starting at index 0 gives s = &quot;<u><strong>011</strong></u>1&quot;.\n- Applying one operation on the substring starting at index 1 gives s = &quot;1<u><strong>110</strong></u>&quot;.\n- Applying one operation on both the substrings starting at indices 0 and 1 gives s = &quot;<u><strong>0000</strong></u>&quot;.\nIt can be shown that we cannot obtain any other string, so the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10110&quot;, k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can obtain the following strings:\n- Applying no operation on the string gives s = &quot;10110&quot;.\n- Applying one operation on the whole string gives s = &quot;01001&quot;.\nIt can be shown that we cannot obtain any other string, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "hints": ["Notice that any string of the same length as s will always have the same answer, so only the length of the string matters.", "For each substring of size k, you can decide whether to flip or not. Every string s resulting from this process will be unique.", "How do you find the number of possible combinations?"], "exampleTestcases": "\"1001\"\n3\n\"10110\"\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countDistinctStrings(string s, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countDistinctStrings(String s, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countDistinctStrings(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countDistinctStrings(self, s: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countDistinctStrings(char* s, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountDistinctStrings(string s, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countDistinctStrings = function(s, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countDistinctStrings(s: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function countDistinctStrings($s, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countDistinctStrings(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countDistinctStrings(s: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countDistinctStrings(String s, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countDistinctStrings(s string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef count_distinct_strings(s, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countDistinctStrings(s: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_distinct_strings(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-distinct-strings s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_distinct_strings(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_distinct_strings(S, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_distinct_strings(s :: String.t, k :: integer) :: integer\n  def count_distinct_strings(s, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "isPaidOnly": false}]}