{"question_id": "2593", "problem_slug": "number-of-distinct-binary-strings-after-applying-operations", "problem_title": "Number of Distinct Binary Strings After Applying Operations", "content": "You are given a binary string s and a positive integer k.\nYou can apply the following operation on the string any number of times:\n\nChoose any substring of size k from s and flip all its characters, that is, turn all 1's into 0's, and all 0's into 1's.\n\nReturn the number of distinct strings you can obtain. Since the answer may be too large, return it modulo 109 + 7.\nNote that:\n\nA binary string is a string that consists only of the characters 0 and 1.\nA substring is a contiguous part of a string.\n\n \nExample 1:\n\nInput: s = \"1001\", k = 3\nOutput: 4\nExplanation: We can obtain the following strings:\n- Applying no operation on the string gives s = \"1001\".\n- Applying one operation on the substring starting at index 0 gives s = \"0111\".\n- Applying one operation on the substring starting at index 1 gives s = \"1110\".\n- Applying one operation on both the substrings starting at indices 0 and 1 gives s = \"0000\".\nIt can be shown that we cannot obtain any other string, so the answer is 4.\nExample 2:\n\nInput: s = \"10110\", k = 5\nOutput: 2\nExplanation: We can obtain the following strings:\n- Applying no operation on the string gives s = \"10110\".\n- Applying one operation on the whole string gives s = \"01001\".\nIt can be shown that we cannot obtain any other string, so the answer is 2.\n\n \nConstraints:\n\n1 <= k <= s.length <= 105\ns[i] is either 0 or 1.\n\n", "hints": ["Notice that any string of the same length as s will always have the same answer, so only the length of the string matters.", "For each substring of size k, you can decide whether to flip or not. Every string s resulting from this process will be unique.", "How do you find the number of possible combinations?"], "exampleTestcases": "\"1001\"\n3\n\"10110\"\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countDistinctStrings(string s, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countDistinctStrings(String s, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countDistinctStrings(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countDistinctStrings(self, s: str, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countDistinctStrings(char* s, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountDistinctStrings(string s, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countDistinctStrings = function(s, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countDistinctStrings(s: string, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function countDistinctStrings($s, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countDistinctStrings(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countDistinctStrings(s: String, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countDistinctStrings(String s, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countDistinctStrings(s string, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef count_distinct_strings(s, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countDistinctStrings(s: String, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_distinct_strings(s: String, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-distinct-strings s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_distinct_strings(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_distinct_strings(S, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_distinct_strings(s :: String.t, k :: integer) :: integer\n  def count_distinct_strings(s, k) do\n    \n  end\nend"}}}