{"questionId": "2509", "acRate": 44.64282260092462, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2429", "paidOnly": false, "status": "ac", "title": "Minimize XOR", "topicTags": [{"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}, {"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "minimize-xor", "content": "<p>Given two positive integers <code>num1</code> and <code>num2</code>, find the positive integer <code>x</code> such that:</p>\n\n<ul>\n\t<li><code>x</code> has the same number of set bits as <code>num2</code>, and</li>\n\t<li>The value <code>x XOR num1</code> is <strong>minimal</strong>.</li>\n</ul>\n\n<p>Note that <code>XOR</code> is the bitwise XOR operation.</p>\n\n<p>Return <em>the integer </em><code>x</code>. The test cases are generated such that <code>x</code> is <strong>uniquely determined</strong>.</p>\n\n<p>The number of <strong>set bits</strong> of an integer is the number of <code>1</code>&#39;s in its binary representation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = 3, num2 = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe binary representations of num1 and num2 are 0011 and 0101, respectively.\nThe integer <strong>3</strong> has the same number of set bits as num2, and the value <code>3 XOR 3 = 0</code> is minimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = 1, num2 = 12\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe binary representations of num1 and num2 are 0001 and 1100, respectively.\nThe integer <strong>3</strong> has the same number of set bits as num2, and the value <code>3 XOR 1 = 2</code> is minimal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1, num2 &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["To arrive at a small xor, try to turn off some bits from num1", "If there are still left bits to set, try to set them from the least significant bit"], "exampleTestcases": "3\n5\n1\n12", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimizeXor(int num1, int num2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimizeXor(int num1, int num2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimizeXor(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimizeXor(self, num1: int, num2: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimizeXor(int num1, int num2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimizeXor(int num1, int num2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar minimizeXor = function(num1, num2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimizeXor(num1: number, num2: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function minimizeXor($num1, $num2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimizeXor(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimizeXor(num1: Int, num2: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimizeXor(int num1, int num2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimizeXor(num1 int, num2 int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef minimize_xor(num1, num2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimizeXor(num1: Int, num2: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimize_xor(num1: i32, num2: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimize-xor num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimize_xor(Num1 :: integer(), Num2 :: integer()) -> integer().\nminimize_xor(Num1, Num2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimize_xor(num1 :: integer, num2 :: integer) :: integer\n  def minimize_xor(num1, num2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "maximum-xor-of-two-numbers-in-an-array", "title": "Maximum XOR of Two Numbers in an Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-xor-with-an-element-from-array", "title": "Maximum XOR With an Element From Array", "isPaidOnly": false}]}