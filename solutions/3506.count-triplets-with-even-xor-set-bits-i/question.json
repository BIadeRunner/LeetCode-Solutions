{"question_id": "3506", "problem_slug": "count-triplets-with-even-xor-set-bits-i", "problem_title": "Count Triplets with Even XOR Set Bits I", "content": "Given three integer arrays a, b, and c, return the number of triplets (a[i], b[j], c[k]), such that the bitwise XOR of the elements of each triplet has an even number of set bits.\n \nExample 1:\n\nInput: a = [1], b = [2], c = [3]\nOutput: 1\nExplanation:\nThe only triplet is (a[0], b[0], c[0]) and their XOR is: 1 XOR 2 XOR 3 = 002.\n\nExample 2:\n\nInput: a = [1,1], b = [2,3], c = [1,5]\nOutput: 4\nExplanation:\nConsider these four triplets:\n\n(a[0], b[1], c[0]): 1 XOR 3 XOR 1 = 0112\n(a[1], b[1], c[0]): 1 XOR 3 XOR 1 = 0112\n(a[0], b[0], c[1]): 1 XOR 2 XOR 5 = 1102\n(a[1], b[0], c[1]): 1 XOR 2 XOR 5 = 1102\n\n\n \nConstraints:\n\n1 <= a.length, b.length, c.length <= 100\n0 <= a[i], b[i], c[i] <= 100\n\n", "hints": ["Iterate over all possible triplets and calculate its <code>XOR</code>."], "exampleTestcases": "[1]\n[2]\n[3]\n[1,1]\n[2,3]\n[1,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int tripletCount(vector<int>& a, vector<int>& b, vector<int>& c) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int tripletCount(int[] a, int[] b, int[] c) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def tripletCount(self, a, b, c):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :type c: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def tripletCount(self, a: List[int], b: List[int], c: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int tripletCount(int* a, int aSize, int* b, int bSize, int* c, int cSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int TripletCount(int[] a, int[] b, int[] c) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} a\n * @param {number[]} b\n * @param {number[]} c\n * @return {number}\n */\nvar tripletCount = function(a, b, c) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function tripletCount(a: number[], b: number[], c: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $a\n     * @param Integer[] $b\n     * @param Integer[] $c\n     * @return Integer\n     */\n    function tripletCount($a, $b, $c) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func tripletCount(_ a: [Int], _ b: [Int], _ c: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun tripletCount(a: IntArray, b: IntArray, c: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int tripletCount(List<int> a, List<int> b, List<int> c) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func tripletCount(a []int, b []int, c []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @param {Integer[]} c\n# @return {Integer}\ndef triplet_count(a, b, c)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def tripletCount(a: Array[Int], b: Array[Int], c: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn triplet_count(a: Vec<i32>, b: Vec<i32>, c: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (triplet-count a b c)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec triplet_count(A :: [integer()], B :: [integer()], C :: [integer()]) -> integer().\ntriplet_count(A, B, C) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec triplet_count(a :: [integer], b :: [integer], c :: [integer]) :: integer\n  def triplet_count(a, b, c) do\n    \n  end\nend"}}}