{"question_id": "3205", "problem_slug": "market-analysis-iii", "problem_title": "Market Analysis III", "content": "Table: Users\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| seller_id      | int     |\n| join_date      | date    |\n| favorite_brand | varchar |\n+----------------+---------+\nseller_id is column of unique values for this table.\nThis table contains seller id, join date, and favorite brand of sellers.\n\nTable: Items\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| item_id       | int     |\n| item_brand    | varchar |\n+---------------+---------+\nitem_id is the column of unique values for this table.\nThis table contains item id and item brand.\nTable: Orders\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| order_id      | int     |\n| order_date    | date    |\n| item_id       | int     |\n| seller_id     | int     |\n+---------------+---------+\norder_id is the column of unique values for this table.\nitem_id is a foreign key to the Items table.\nseller_id is a foreign key to the Users table.\nThis table contains order id, order date, item id and seller id.\nWrite a solution to find the top seller who has sold the highest number of unique items with a different brand than their favorite brand. If there are multiple sellers with the same highest count, return all of them.\nReturn the result table ordered by seller_id in ascending order.\nThe result format is in the following example.\nÂ \nExample 1:\n\nInput: \nUsers table:\n+-----------+------------+----------------+\n| seller_id | join_date  | favorite_brand |\n+-----------+------------+----------------+\n| 1         | 2019-01-01 | Lenovo         |\n| 2         | 2019-02-09 | Samsung        |\n| 3         | 2019-01-19 | LG             |\n+-----------+------------+----------------+\nOrders table:\n+----------+------------+---------+-----------+\n| order_id | order_date | item_id | seller_id |\n+----------+------------+---------+-----------+\n| 1        | 2019-08-01 | 4       | 2         |\n| 2        | 2019-08-02 | 2       | 3         |\n| 3        | 2019-08-03 | 3       | 3         |\n| 4        | 2019-08-04 | 1       | 2         |\n| 5        | 2019-08-04 | 4       | 2         |\n+----------+------------+---------+-----------+\nItems table:\n+---------+------------+\n| item_id | item_brand |\n+---------+------------+\n| 1       | Samsung    |\n| 2       | Lenovo     |\n| 3       | LG         |\n| 4       | HP         |\n+---------+------------+\nOutput: \n+-----------+-----------+\n| seller_id | num_items |\n+-----------+-----------+\n| 2         | 1         |\n| 3         | 1         |\n+-----------+-----------+\nExplanation: \n- The user with seller_id 2 has sold three items, but only two of them are not marked as a favorite. We will include a unique count of 1 because both of these items are identical.\n- The user with seller_id 3 has sold two items, but only one of them is not marked as a favorite. We will include just that non-favorite item in our count.\nSince seller_ids 2 and 3 have the same count of one item each, they both will be displayed in the output.\n", "hints": [], "exampleTestcases": "{\"headers\": {\"Users\": [\"seller_id\", \"join_date\", \"favorite_brand\"],\"Orders\":[\"order_id\",\"order_date\",\"item_id\",\"seller_id\"],\"Items\":[\"item_id\",\"item_brand\"]},\"rows\":{\"Users\":[[1,\"2019-01-01\",\"Lenovo\"],[2,\"2019-02-09\",\"Samsung\"],[3,\"2019-01-19\",\"LG\"]],\"Orders\":[[1,\"2019-08-01\",4,2],[2,\"2019-08-02\",2,3],[3,\"2019-08-03\",3,3],[4,\"2019-08-04\",1,2],[5,\"2019-08-04\",4,2]],\"Items\":[[1,\"Samsung\"],[2,\"Lenovo\"],[3,\"LG\"],[4,\"HP\"]]}}", "codeSnippets": {"MySQL": {"langSlug": "mysql", "code": "# Write your MySQL query statement below\n"}, "MS SQL Server": {"langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n"}, "Oracle": {"langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n"}}}