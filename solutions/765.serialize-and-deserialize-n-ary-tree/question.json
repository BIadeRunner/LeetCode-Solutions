{"question_id": "765", "problem_slug": "serialize-and-deserialize-n-ary-tree", "problem_title": "Serialize and Deserialize N-ary Tree", "content": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nFor example, you may serialize the following 3-ary tree\n\n \nas [1 [3[5 6] 2 4]]. Note that this is just an example, you do not necessarily need to follow this format.\nOr you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.\n\n \nFor example, the above tree may be serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].\nYou do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.\n \nExample 1:\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n\nExample 2:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\n\nExample 3:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n0 <= Node.val <= 104\nThe height of the n-ary tree is less than or equal to 1000\nDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.\n\n", "hints": [], "exampleTestcases": "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n[1,null,3,2,4,null,5,6]\n[]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Codec {\npublic:\n    // Encodes a tree to a single string.\n    string serialize(Node* root) {\n        \n    }\n\t\n    // Decodes your encoded data to tree.\n    Node* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.deserialize(codec.serialize(root));"}, "Java": {"langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Codec {\n    // Encodes a tree to a single string.\n    public String serialize(Node root) {\n        \n    }\n\t\n    // Decodes your encoded data to tree.\n    public Node deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}, "Python": {"langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n    \tif children is None:\n            children = []\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: Node\n        :rtype: str\n        \"\"\"\n\t\t\n    \n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: Node\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))"}, "Python3": {"langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        if children is None:\n            children = []\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Codec:\n    def serialize(self, root: 'Node') -> str:\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: Node\n        :rtype: str\n        \"\"\"\n        \n\t\n    def deserialize(self, data: str) -> 'Node':\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: Node\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))"}, "C#": {"langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Codec {\n    // Encodes a tree to a single string.\n    public string serialize(Node root) {\n        \n    }\n\t\n    // Decodes your encoded data to tree.\n    public Node deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * // Definition for a _Node.\n * function _Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\nclass Codec {\n  \tconstructor() {\n        \n    }\n    \n    /** \n     * @param {_Node|null} root\n     * @return {string}\n     */\n    // Encodes a tree to a single string.\n    serialize = function(root) {\n        \n    };\n\t\n    /** \n     * @param {string} data \n     * @return {_Node|null}\n     */\n    // Decodes your encoded data to tree.\n    deserialize = function(data) {\n        \n    };\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}, "TypeScript": {"langSlug": "typescript", "code": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     children: _Node[]\n *     \n *     constructor(v: number) {\n *         this.val = v;\n *         this.children = [];\n *     }\n * }\n */\n\n\nclass Codec {\n  \tconstructor() {\n        \n    }\n    \n    // Encodes a tree to a single string.\n    serialize(root: _Node | null): string {\n        \n    };\n\t\n    // Decodes your encoded data to tree.\n    deserialize(data: string): _Node | null {\n        \n    };\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}, "PHP": {"langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Codec {\n    /**\n     * Encodes a tree to a single string.\n     * @param Node $root\n     * @return String\n     */\n    function serialize($root) {\n\t\t\n    }\n  \t\n    /**\n     * Decodes your encoded data to tree.\n     * @param String $data\n     * @return Node\n     */\n    function deserialize($data) {\n    \t\n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $obj = Codec();\n * $ret_1 = $obj->serialize($root);\n * $ret_2 = $obj->deserialize($data);\n */"}, "Swift": {"langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: Node?) -> String {\n    \t\n    }\n    \n    func deserialize(_ data: String) -> Node? {\n    \t\n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec()\n * let ret_1: TreeNode? = obj.serialize(root)\n * let ret_2: Node? = obj.decode(data)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Codec {\n    // Encodes a tree to a single string.\n    fun serialize(root: Node?): String {\n        \n    }\n    \n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): Node? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = Codec()\n * var data = obj.serialize(root)\n * var ans = obj.deserialize(data)\n */"}, "Go": {"langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() *Codec {\n    \n}\n\nfunc (this *Codec) serialize(root *Node) string {\n    \n}\n\nfunc (this *Codec) deserialize(data string) *Node {\n    \n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * obj := Constructor();\n * data := obj.serialize(root);\n * ans := obj.deserialize(data);\n */"}, "Ruby": {"langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val=0, children=[])\n#         @val = val\n#         @children = children\n#     end\n# end\n\nclass Codec\n    # Encodes a tree to a single string.\n    # @param {Node} root\n\t# @return {String}\n    def serialize(root)\n    \t\n    end\n    \n    # Decodes your encoded data to tree.\n    # @param {String} data\n\t# @return {Node}\n    def deserialize(data)\n        \n    end\nend\n\n# Your Codec object will be instantiated and called as such:\n# obj = Codec.new()\n# data = obj.seralize(root)\n# ans = obj.desrialize(data)"}, "Scala": {"langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nclass Codec {\n    // Encodes a tree to a single string.\n    def serialize(root: Node): String = {\n        \n    }\n    \n    // Decodes your encoded data to tree.\n    def deserialize(data: String): Node = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = new Codec()\n * var data = obj.serialize(root)\n * var ans = obj.deserialize(data)\n */"}}}