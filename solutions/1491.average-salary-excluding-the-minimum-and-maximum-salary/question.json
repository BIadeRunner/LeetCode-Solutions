{"questionId": "1584", "acRate": 63.47259084741537, "difficulty": "Easy", "freqBar": 13.644413701949674, "frontendQuestionId": "1491", "paidOnly": false, "status": "ac", "title": "Average Salary Excluding the Minimum and Maximum Salary", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "average-salary-excluding-the-minimum-and-maximum-salary", "content": "<p>You are given an array of <strong>unique</strong> integers <code>salary</code> where <code>salary[i]</code> is the salary of the <code>i<sup>th</sup></code> employee.</p>\n\n<p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> salary = [4000,3000,1000,2000]\n<strong>Output:</strong> 2500.00000\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> salary = [1000,2000,3000]\n<strong>Output:</strong> 2000.00000\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= salary.length &lt;= 100</code></li>\n\t<li><code>1000 &lt;= salary[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the integers of <code>salary</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Get the total sum and subtract the minimum and maximum value in the array.  Finally divide the result by n - 2."], "exampleTestcases": "[4000,3000,1000,2000]\n[1000,2000,3000]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double average(vector<int>& salary) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double average(int[] salary) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def average(self, salary):\n        \"\"\"\n        :type salary: List[int]\n        :rtype: float\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        "}, {"lang": "C", "langSlug": "c", "code": "double average(int* salary, int salarySize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double Average(int[] salary) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function average(salary: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $salary\n     * @return Float\n     */\n    function average($salary) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func average(_ salary: [Int]) -> Double {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun average(salary: IntArray): Double {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  double average(List<int> salary) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func average(salary []int) float64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} salary\n# @return {Float}\ndef average(salary)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def average(salary: Array[Int]): Double = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn average(salary: Vec<i32>) -> f64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (average salary)\n  (-> (listof exact-integer?) flonum?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec average(Salary :: [integer()]) -> float().\naverage(Salary) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec average(salary :: [integer]) :: float\n  def average(salary) do\n    \n  end\nend"}], "similarQuestionList": []}