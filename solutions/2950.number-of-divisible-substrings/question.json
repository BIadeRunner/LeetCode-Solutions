{"questionId": "3237", "acRate": 73.46693386773548, "difficulty": "Medium", "freqBar": 66.15207797071186, "frontendQuestionId": "2950", "paidOnly": true, "status": "ac", "title": "Number of Divisible Substrings", "titleSlug": "number-of-divisible-substrings", "topicTags": [{"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "content": "<p>Each character of the English alphabet has been mapped to a digit as shown below.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/28/old_phone_digits.png\" style=\"padding: 10px; width: 200px; height: 200px;\" /></p>\n\n<p>A string is <strong>divisible</strong> if the sum of the mapped values of its characters is divisible by its length.</p>\n\n<p>Given a string <code>s</code>, return <em>the number of <strong>divisible substrings</strong> of</em> <code>s</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous non-empty sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<table border=\"1\" cellspacing=\"3\" style=\"border-collapse: separate; text-align: center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"padding: 5px; border: 1px solid black;\">Substring</th>\n\t\t\t<th style=\"padding: 5px; border: 1px solid black;\">Mapped</th>\n\t\t\t<th style=\"padding: 5px; border: 1px solid black;\">Sum</th>\n\t\t\t<th style=\"padding: 5px; border: 1px solid black;\">Length</th>\n\t\t\t<th style=\"padding: 5px; border: 1px solid black;\">Divisible?</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">a</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">s</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">7</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">7</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">d</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">f</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">as</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1, 7</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">8</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">sd</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">7, 2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">9</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">No</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">df</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2, 3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">5</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">No</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">asd</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1, 7, 2</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">10</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">No</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">sdf</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">7, 2, 3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">12</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">Yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">asdf</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">1, 7, 2, 3</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">13</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">4</td>\n\t\t\t<td style=\"padding: 5px; border: 1px solid black;\">No</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<pre>\n<strong>Input:</strong> word = &quot;asdf&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The table above contains the details about every substring of word, and we can see that 6 of them are divisible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;bdh&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The 4 divisible substrings are: &quot;b&quot;, &quot;d&quot;, &quot;h&quot;, &quot;bdh&quot;.\nIt can be shown that there are no other substrings of word that are divisible.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcd&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The 6 divisible substrings are: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;ab&quot;, &quot;cd&quot;.\nIt can be shown that there are no other substrings of word that are divisible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 2000</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Iterate over all substrings in <code>O(n * n)</code>.", "For each substring, try to calculate the sum of the mapped values in <code>O(1)</code>.", "To do the above, use a partial sum array."], "exampleTestcases": "\"asdf\"\n\"bdh\"\n\"abcd\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countDivisibleSubstrings(string word) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countDivisibleSubstrings(String word) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countDivisibleSubstrings(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countDivisibleSubstrings(self, word: str) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int countDivisibleSubstrings(char* word) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountDivisibleSubstrings(string word) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {number}\n */\nvar countDivisibleSubstrings = function(word) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countDivisibleSubstrings(word: string): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function countDivisibleSubstrings($word) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countDivisibleSubstrings(_ word: String) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countDivisibleSubstrings(word: String): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int countDivisibleSubstrings(String word) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func countDivisibleSubstrings(word string) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @return {Integer}\ndef count_divisible_substrings(word)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countDivisibleSubstrings(word: String): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_divisible_substrings(word: String) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (count-divisible-substrings word)\n  (-> string? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec count_divisible_substrings(Word :: unicode:unicode_binary()) -> integer().\ncount_divisible_substrings(Word) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_divisible_substrings(word :: String.t) :: integer\n  def count_divisible_substrings(word) do\n    \n  end\nend"}], "similarQuestionList": []}