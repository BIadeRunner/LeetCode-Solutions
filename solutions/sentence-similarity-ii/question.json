{"questionId": "737", "acRate": 50.30042031282299, "difficulty": "Medium", "freqBar": 37.83107336987063, "frontendQuestionId": "737", "paidOnly": true, "status": "ac", "title": "Sentence Similarity II", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Union Find", "id": "VG9waWNUYWdOb2RlOjIz", "slug": "union-find"}], "titleSlug": "sentence-similarity-ii", "content": "<p>We can represent a sentence as an array of words, for example, the sentence <code>&quot;I am happy with leetcode&quot;</code> can be represented as <code>arr = [&quot;I&quot;,&quot;am&quot;,happy&quot;,&quot;with&quot;,&quot;leetcode&quot;]</code>.</p>\n\n<p>Given two sentences <code>sentence1</code> and <code>sentence2</code> each represented as a string array and given an array of string pairs <code>similarPairs</code> where <code>similarPairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> indicates that the two words <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> are similar.</p>\n\n<p>Return <code>true</code><em> if <code>sentence1</code> and <code>sentence2</code> are similar, or </em><code>false</code><em> if they are not similar</em>.</p>\n\n<p>Two sentences are similar if:</p>\n\n<ul>\n\t<li>They have <strong>the same length</strong> (i.e., the same number of words)</li>\n\t<li><code>sentence1[i]</code> and <code>sentence2[i]</code> are similar.</li>\n</ul>\n\n<p>Notice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words <code>a</code> and <code>b</code> are similar, and the words <code>b</code> and <code>c</code> are similar, then&nbsp;<code>a</code> and <code>c</code> are <strong>similar</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = [&quot;great&quot;,&quot;acting&quot;,&quot;skills&quot;], sentence2 = [&quot;fine&quot;,&quot;drama&quot;,&quot;talent&quot;], similarPairs = [[&quot;great&quot;,&quot;good&quot;],[&quot;fine&quot;,&quot;good&quot;],[&quot;drama&quot;,&quot;acting&quot;],[&quot;skills&quot;,&quot;talent&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = [&quot;I&quot;,&quot;love&quot;,&quot;leetcode&quot;], sentence2 = [&quot;I&quot;,&quot;love&quot;,&quot;onepiece&quot;], similarPairs = [[&quot;manga&quot;,&quot;onepiece&quot;],[&quot;platform&quot;,&quot;anime&quot;],[&quot;leetcode&quot;,&quot;platform&quot;],[&quot;anime&quot;,&quot;manga&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;leetcode&quot; --&gt; &quot;platform&quot; --&gt; &quot;anime&quot; --&gt; &quot;manga&quot; --&gt; &quot;onepiece&quot;.\nSince &quot;leetcode is similar to &quot;onepiece&quot; and the first two words are the same, the two sentences are similar.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = [&quot;I&quot;,&quot;love&quot;,&quot;leetcode&quot;], sentence2 = [&quot;I&quot;,&quot;love&quot;,&quot;onepiece&quot;], similarPairs = [[&quot;manga&quot;,&quot;hunterXhunter&quot;],[&quot;platform&quot;,&quot;anime&quot;],[&quot;leetcode&quot;,&quot;platform&quot;],[&quot;anime&quot;,&quot;manga&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;leetcode&quot; is not similar to &quot;onepiece&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= sentence1[i].length, sentence2[i].length &lt;= 20</code></li>\n\t<li><code>sentence1[i]</code> and <code>sentence2[i]</code> consist of lower-case and upper-case English letters.</li>\n\t<li><code>0 &lt;= similarPairs.length &lt;= 2000</code></li>\n\t<li><code>similarPairs[i].length == 2</code></li>\n\t<li><code>1 &lt;= x<sub>i</sub>.length, y<sub>i</sub>.length &lt;= 20</code></li>\n\t<li><code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> consist of English letters.</li>\n</ul>\n", "hints": ["Consider the graphs where each pair in \"pairs\" is an edge.  Two words are similar if they are the same, or are in the same connected component of this graph."], "exampleTestcases": "[\"great\",\"acting\",\"skills\"]\n[\"fine\",\"drama\",\"talent\"]\n[[\"great\",\"good\"],[\"fine\",\"good\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]\n[\"I\",\"love\",\"leetcode\"]\n[\"I\",\"love\",\"onepiece\"]\n[[\"manga\",\"onepiece\"],[\"platform\",\"anime\"],[\"leetcode\",\"platform\"],[\"anime\",\"manga\"]]\n[\"I\",\"love\",\"leetcode\"]\n[\"I\",\"love\",\"onepiece\"]\n[[\"manga\",\"hunterXhunter\"],[\"platform\",\"anime\"],[\"leetcode\",\"platform\"],[\"anime\",\"manga\"]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool areSentencesSimilarTwo(vector<string>& sentence1, vector<string>& sentence2, vector<vector<string>>& similarPairs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean areSentencesSimilarTwo(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def areSentencesSimilarTwo(self, sentence1, sentence2, similarPairs):\n        \"\"\"\n        :type sentence1: List[str]\n        :type sentence2: List[str]\n        :type similarPairs: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def areSentencesSimilarTwo(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool areSentencesSimilarTwo(char** sentence1, int sentence1Size, char** sentence2, int sentence2Size, char*** similarPairs, int similarPairsSize, int* similarPairsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool AreSentencesSimilarTwo(string[] sentence1, string[] sentence2, IList<IList<string>> similarPairs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} sentence1\n * @param {string[]} sentence2\n * @param {string[][]} similarPairs\n * @return {boolean}\n */\nvar areSentencesSimilarTwo = function(sentence1, sentence2, similarPairs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function areSentencesSimilarTwo(sentence1: string[], sentence2: string[], similarPairs: string[][]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $sentence1\n     * @param String[] $sentence2\n     * @param String[][] $similarPairs\n     * @return Boolean\n     */\n    function areSentencesSimilarTwo($sentence1, $sentence2, $similarPairs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func areSentencesSimilarTwo(_ sentence1: [String], _ sentence2: [String], _ similarPairs: [[String]]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun areSentencesSimilarTwo(sentence1: Array<String>, sentence2: Array<String>, similarPairs: List<List<String>>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool areSentencesSimilarTwo(List<String> sentence1, List<String> sentence2, List<List<String>> similarPairs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func areSentencesSimilarTwo(sentence1 []string, sentence2 []string, similarPairs [][]string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} sentence1\n# @param {String[]} sentence2\n# @param {String[][]} similar_pairs\n# @return {Boolean}\ndef are_sentences_similar_two(sentence1, sentence2, similar_pairs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def areSentencesSimilarTwo(sentence1: Array[String], sentence2: Array[String], similarPairs: List[List[String]]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn are_sentences_similar_two(sentence1: Vec<String>, sentence2: Vec<String>, similar_pairs: Vec<Vec<String>>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (are-sentences-similar-two sentence1 sentence2 similarPairs)\n  (-> (listof string?) (listof string?) (listof (listof string?)) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec are_sentences_similar_two(Sentence1 :: [unicode:unicode_binary()], Sentence2 :: [unicode:unicode_binary()], SimilarPairs :: [[unicode:unicode_binary()]]) -> boolean().\nare_sentences_similar_two(Sentence1, Sentence2, SimilarPairs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec are_sentences_similar_two(sentence1 :: [String.t], sentence2 :: [String.t], similar_pairs :: [[String.t]]) :: boolean\n  def are_sentences_similar_two(sentence1, sentence2, similar_pairs) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "number-of-provinces", "title": "Number of Provinces", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "accounts-merge", "title": "Accounts Merge", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "sentence-similarity", "title": "Sentence Similarity", "isPaidOnly": true}]}