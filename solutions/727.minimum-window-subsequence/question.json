{"questionId": "727", "acRate": 43.528497867253385, "difficulty": "Hard", "freqBar": 51.95677419302211, "frontendQuestionId": "727", "paidOnly": true, "status": "ac", "title": "Minimum Window Subsequence", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}, {"name": "Sliding Window", "id": "VG9waWNUYWdOb2RlOjU1ODIx", "slug": "sliding-window"}], "titleSlug": "minimum-window-subsequence", "content": "<p>Given strings <code>s1</code> and <code>s2</code>, return <em>the minimum contiguous&nbsp;substring part of </em><code>s1</code><em>, so that </em><code>s2</code><em> is a subsequence of the part</em>.</p>\n\n<p>If there is no such window in <code>s1</code> that covers all characters in <code>s2</code>, return the empty string <code>&quot;&quot;</code>. If there are multiple such minimum-length windows, return the one with the <strong>left-most starting index</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcdebdde&quot;, s2 = &quot;bde&quot;\n<strong>Output:</strong> &quot;bcde&quot;\n<strong>Explanation:</strong> \n&quot;bcde&quot; is the answer because it occurs before &quot;bdde&quot; which has the same length.\n&quot;deb&quot; is not a smaller window because the elements of s2 in the window must occur in order.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;jmeqksfrsdcmsiwvaovztaqenprpvnbstl&quot;, s2 = &quot;u&quot;\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= s2.length &lt;= 100</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n", "hints": ["Let dp[j][e] = s be the largest index for which S[s:e+1] has T[:j] as a substring."], "exampleTestcases": "\"abcdebdde\"\n\"bde\"\n\"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\"\n\"u\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string minWindow(string s1, string s2) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String minWindow(String s1, String s2) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minWindow(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minWindow(self, s1: str, s2: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* minWindow(char* s1, char* s2) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MinWindow(string s1, string s2) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {string}\n */\nvar minWindow = function(s1, s2) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minWindow(s1: string, s2: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return String\n     */\n    function minWindow($s1, $s2) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minWindow(_ s1: String, _ s2: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minWindow(s1: String, s2: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String minWindow(String s1, String s2) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minWindow(s1 string, s2 string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {String}\ndef min_window(s1, s2)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minWindow(s1: String, s2: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_window(s1: String, s2: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-window s1 s2)\n  (-> string? string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_window(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S1, S2) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_window(s1 :: String.t, s2 :: String.t) :: String.t\n  def min_window(s1, s2) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "minimum-window-substring", "title": "Minimum Window Substring", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "isPaidOnly": false}]}