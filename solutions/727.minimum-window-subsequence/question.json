{"question_id": "727", "problem_slug": "minimum-window-subsequence", "problem_title": "Minimum Window Subsequence", "content": "Given strings s1 and s2, return the minimum contiguous substring part of s1, so that s2 is a subsequence of the part.\nIf there is no such window in s1 that covers all characters in s2, return the empty string \"\". If there are multiple such minimum-length windows, return the one with the left-most starting index.\n \nExample 1:\n\nInput: s1 = \"abcdebdde\", s2 = \"bde\"\nOutput: \"bcde\"\nExplanation: \n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\n\"deb\" is not a smaller window because the elements of s2 in the window must occur in order.\n\nExample 2:\n\nInput: s1 = \"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\", s2 = \"u\"\nOutput: \"\"\n\n \nConstraints:\n\n1 <= s1.length <= 2 * 104\n1 <= s2.length <= 100\ns1 and s2 consist of lowercase English letters.\n\n", "hints": ["Let dp[j][e] = s be the largest index for which S[s:e+1] has T[:j] as a substring."], "exampleTestcases": "\"abcdebdde\"\n\"bde\"\n\"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\"\n\"u\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string minWindow(string s1, string s2) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String minWindow(String s1, String s2) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minWindow(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minWindow(self, s1: str, s2: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* minWindow(char* s1, char* s2) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string MinWindow(string s1, string s2) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {string}\n */\nvar minWindow = function(s1, s2) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minWindow(s1: string, s2: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return String\n     */\n    function minWindow($s1, $s2) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minWindow(_ s1: String, _ s2: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minWindow(s1: String, s2: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String minWindow(String s1, String s2) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minWindow(s1 string, s2 string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {String}\ndef min_window(s1, s2)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minWindow(s1: String, s2: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_window(s1: String, s2: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-window s1 s2)\n  (-> string? string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_window(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S1, S2) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_window(s1 :: String.t, s2 :: String.t) :: String.t\n  def min_window(s1, s2) do\n    \n  end\nend"}}}