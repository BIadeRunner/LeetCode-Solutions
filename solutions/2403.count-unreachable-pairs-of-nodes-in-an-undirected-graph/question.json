{"question_id": "2403", "problem_slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph", "problem_title": "Count Unreachable Pairs of Nodes in an Undirected Graph", "content": "You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nReturn the number of pairs of different nodes that are unreachable from each other.\n \nExample 1:\n\n\nInput: n = 3, edges = [[0,1],[0,2],[1,2]]\nOutput: 0\nExplanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.\n\nExample 2:\n\n\nInput: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\nOutput: 14\nExplanation: There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14.\n\n \nConstraints:\n\n1 <= n <= 105\n0 <= edges.length <= 2 * 105\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nThere are no repeated edges.\n\n", "hints": ["Find the connected components of the graph. To find connected components, you can use Union Find (Disjoint Sets), BFS, or DFS.", "For a node u, the number of nodes that are unreachable from u is the number of nodes that are not in the same connected component as u.", "The number of unreachable nodes from node u will be the same for the number of nodes that are unreachable from node v if nodes u and v belong to the same connected component."], "exampleTestcases": "3\n[[0,1],[0,2],[1,2]]\n7\n[[0,2],[0,5],[2,4],[1,6],[5,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countPairs(int n, int[][] edges) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countPairs(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countPairs(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountPairs(int n, int[][] edges) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countPairs = function(n, edges) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countPairs(n: number, edges: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countPairs($n, $edges) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countPairs(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countPairs(n: Int, edges: Array<IntArray>): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countPairs(int n, List<List<int>> edges) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countPairs(n int, edges [][]int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef count_pairs(n, edges)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countPairs(n: Int, edges: Array[Array[Int]]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_pairs(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-pairs n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_pairs(N :: integer(), Edges :: [[integer()]]) -> integer().\ncount_pairs(N, Edges) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_pairs(n :: integer, edges :: [[integer]]) :: integer\n  def count_pairs(n, edges) do\n    \n  end\nend"}}}