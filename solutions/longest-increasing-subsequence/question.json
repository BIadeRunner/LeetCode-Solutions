{"questionId": "300", "acRate": 56.43376186472666, "difficulty": "Medium", "freqBar": 71.92896682714284, "frontendQuestionId": "300", "paidOnly": false, "status": "ac", "title": "Longest Increasing Subsequence", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "longest-increasing-subsequence", "content": "<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n", "hints": [], "exampleTestcases": "[10,9,2,5,3,7,101,18]\n[0,1,0,3,2,3]\n[7,7,7,7,7,7,7]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int lengthOfLIS(int* nums, int numsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLIS(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthOfLIS(nums: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function lengthOfLIS($nums) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthOfLIS(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLIS(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int lengthOfLIS(List<int> nums) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthOfLIS(nums []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef length_of_lis(nums)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_lis(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (length-of-lis nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec length_of_lis(Nums :: [integer()]) -> integer().\nlength_of_lis(Nums) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec length_of_lis(nums :: [integer]) :: integer\n  def length_of_lis(nums) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-length-of-pair-chain", "title": "Maximum Length of Pair Chain", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-ascii-delete-sum-for-two-strings", "title": "Minimum ASCII Delete Sum for Two Strings", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position", "title": "Find the Longest Valid Obstacle Course at Each Position", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "minimum-operations-to-make-the-array-k-increasing", "title": "Minimum Operations to Make the Array K-Increasing", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "longest-ideal-subsequence", "title": "Longest Ideal Subsequence", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "isPaidOnly": true}, {"difficulty": "Hard", "titleSlug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "find-the-maximum-length-of-a-good-subsequence-ii", "title": "Find the Maximum Length of a Good Subsequence II", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-maximum-length-of-a-good-subsequence-i", "title": "Find the Maximum Length of a Good Subsequence I", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-maximum-length-of-valid-subsequence-i", "title": "Find the Maximum Length of Valid Subsequence I", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "find-the-maximum-length-of-valid-subsequence-ii", "title": "Find the Maximum Length of Valid Subsequence II", "isPaidOnly": false}]}