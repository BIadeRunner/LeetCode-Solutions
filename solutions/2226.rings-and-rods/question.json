{"question_id": "2226", "problem_slug": "rings-and-rods", "problem_title": "Rings and Rods", "content": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\n\nThe first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').\nThe second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').\n\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.\n \nExample 1:\n\n\nInput: rings = \"B0B6G0R6R0R6G9\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n\nExample 2:\n\n\nInput: rings = \"B0R0G0R9R0B0G0\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n\nExample 3:\n\nInput: rings = \"G4\"\nOutput: 0\nExplanation: \nOnly one ring is given. Thus, no rods have all three colors.\n\n \nConstraints:\n\nrings.length == 2 * n\n1 <= n <= 100\nrings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).\nrings[i] where i is odd is a digit from '0' to '9' (0-indexed).\n\n", "hints": ["For every rod, look through ‘rings’ to see if the rod contains all colors.", "Create 3 booleans, 1 for each color, to store if that color is present for the current rod. If all 3 are true after looking through the string, then the rod contains all the colors."], "exampleTestcases": "\"B0B6G0R6R0R6G9\"\n\"B0R0G0R9R0B0G0\"\n\"G4\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPoints(string rings) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countPoints(String rings) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countPoints(self, rings):\n        \"\"\"\n        :type rings: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countPoints(self, rings: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countPoints(char* rings) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountPoints(string rings) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} rings\n * @return {number}\n */\nvar countPoints = function(rings) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countPoints(rings: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $rings\n     * @return Integer\n     */\n    function countPoints($rings) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countPoints(_ rings: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countPoints(rings: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countPoints(String rings) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countPoints(rings string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} rings\n# @return {Integer}\ndef count_points(rings)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countPoints(rings: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_points(rings: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-points rings)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_points(Rings :: unicode:unicode_binary()) -> integer().\ncount_points(Rings) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_points(rings :: String.t) :: integer\n  def count_points(rings) do\n    \n  end\nend"}}}