{"questionId": "3296", "acRate": 35.76165244153949, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "3031", "paidOnly": false, "status": "ac", "title": "Minimum Time to Revert Word to Initial State II", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Rolling Hash", "id": "VG9waWNUYWdOb2RlOjU2NTk4", "slug": "rolling-hash"}, {"name": "String Matching", "id": "VG9waWNUYWdOb2RlOjYxMDUy", "slug": "string-matching"}, {"name": "Hash Function", "id": "VG9waWNUYWdOb2RlOjYxMDY1", "slug": "hash-function"}], "titleSlug": "minimum-time-to-revert-word-to-initial-state-ii", "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n", "hints": ["Find the longest suffix which is also a prefix and whose length is a multiple of <code>K</code> in <code>O(N)</code>.", "Use Z-function."], "exampleTestcases": "\"abacaba\"\n3\n\"abacaba\"\n4\n\"abcbabcd\"\n2", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumTimeToInitialState(string word, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumTimeToInitialState(String word, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumTimeToInitialState(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minimumTimeToInitialState(char* word, int k) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumTimeToInitialState(string word, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeToInitialState = function(word, k) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumTimeToInitialState(word: string, k: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeToInitialState($word, $k) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumTimeToInitialState(_ word: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumTimeToInitialState(word: String, k: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minimumTimeToInitialState(String word, int k) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumTimeToInitialState(word string, k int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_to_initial_state(word, k)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumTimeToInitialState(word: String, k: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_time_to_initial_state(word: String, k: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (minimum-time-to-initial-state word k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec minimum_time_to_initial_state(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_time_to_initial_state(Word, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_time_to_initial_state(word :: String.t, k :: integer) :: integer\n  def minimum_time_to_initial_state(word, k) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "longest-happy-prefix", "title": "Longest Happy Prefix", "isPaidOnly": false}]}