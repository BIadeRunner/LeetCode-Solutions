{"questionId": "888", "acRate": 62.377110104748546, "difficulty": "Medium", "freqBar": 38.92376650720554, "frontendQuestionId": "858", "paidOnly": false, "status": "ac", "title": "Mirror Reflection", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Geometry", "id": "VG9waWNUYWdOb2RlOjM4", "slug": "geometry"}, {"name": "Number Theory", "id": "VG9waWNUYWdOb2RlOjYxMDY3", "slug": "number-theory"}], "titleSlug": "mirror-reflection", "content": "<p>There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p>\n\n<p>The square room has walls of length <code>p</code>&nbsp;and a laser ray from the southwest corner first meets the east wall at a distance <code>q</code> from the <code>0<sup>th</sup></code> receptor.</p>\n\n<p>Given the two integers <code>p</code> and <code>q</code>, return <em>the number of the receptor that the ray meets first</em>.</p>\n\n<p>The test cases are guaranteed so that the ray will meet a receptor eventually.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png\" style=\"width: 218px; height: 217px;\" />\n<pre>\n<strong>Input:</strong> p = 2, q = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The ray meets receptor 2 the first time it gets reflected back to the left wall.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> p = 3, q = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= q &lt;= p &lt;= 1000</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "2\n1\n3\n1", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mirrorReflection(int p, int q) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int mirrorReflection(int p, int q) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MirrorReflection(int p, int q) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar mirrorReflection = function(p, q) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mirrorReflection(p: number, q: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $p\n     * @param Integer $q\n     * @return Integer\n     */\n    function mirrorReflection($p, $q) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mirrorReflection(_ p: Int, _ q: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mirrorReflection(p: Int, q: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int mirrorReflection(int p, int q) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func mirrorReflection(p int, q int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} p\n# @param {Integer} q\n# @return {Integer}\ndef mirror_reflection(p, q)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mirrorReflection(p: Int, q: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mirror_reflection(p: i32, q: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (mirror-reflection p q)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec mirror_reflection(P :: integer(), Q :: integer()) -> integer().\nmirror_reflection(P, Q) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec mirror_reflection(p :: integer, q :: integer) :: integer\n  def mirror_reflection(p, q) do\n    \n  end\nend"}], "similarQuestionList": []}