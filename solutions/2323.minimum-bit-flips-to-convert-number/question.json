{"questionId": "2323", "acRate": 87.48478568941084, "difficulty": "Easy", "freqBar": 65.4110029821535, "frontendQuestionId": "2220", "paidOnly": false, "status": "ac", "title": "Minimum Bit Flips to Convert Number", "topicTags": [{"name": "Bit Manipulation", "id": "VG9waWNUYWdOb2RlOjE5", "slug": "bit-manipulation"}], "titleSlug": "minimum-bit-flips-to-convert-number", "content": "<p>A <strong>bit flip</strong> of a number <code>x</code> is choosing a bit in the binary representation of <code>x</code> and <strong>flipping</strong> it from either <code>0</code> to <code>1</code> or <code>1</code> to <code>0</code>.</p>\n\n<ul>\n\t<li>For example, for <code>x = 7</code>, the binary representation is <code>111</code> and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get <code>110</code>, flip the second bit from the right to get <code>101</code>, flip the fifth bit from the right (a leading zero) to get <code>10111</code>, etc.</li>\n</ul>\n\n<p>Given two integers <code>start</code> and <code>goal</code>, return<em> the <strong>minimum</strong> number of <strong>bit flips</strong> to convert </em><code>start</code><em> to </em><code>goal</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = 10, goal = 7\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 101<u>0</u> -&gt; 101<u>1</u>.\n- Flip the third bit from the right: 1<u>0</u>11 -&gt; 1<u>1</u>11.\n- Flip the fourth bit from the right: <u>1</u>111 -&gt; <u>0</u>111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = 3, goal = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 01<u>1</u> -&gt; 01<u>0</u>.\n- Flip the second bit from the right: 0<u>1</u>0 -&gt; 0<u>0</u>0.\n- Flip the third bit from the right: <u>0</u>00 -&gt; <u>1</u>00.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= start, goal &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as <a href=\"https://leetcode.com/problems/hamming-distance/description/\" target=\"_blank\">461: Hamming Distance.</a></p>\n", "hints": ["If the value of a bit in start and goal differ, then we need to flip that bit.", "Consider using the XOR operation to determine which bits need a bit flip."], "exampleTestcases": "10\n7\n3\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minBitFlips(int start, int goal) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minBitFlips(int start, int goal) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minBitFlips(self, start, goal):\n        \"\"\"\n        :type start: int\n        :type goal: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int minBitFlips(int start, int goal) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinBitFlips(int start, int goal) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} start\n * @param {number} goal\n * @return {number}\n */\nvar minBitFlips = function(start, goal) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minBitFlips(start: number, goal: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $start\n     * @param Integer $goal\n     * @return Integer\n     */\n    function minBitFlips($start, $goal) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minBitFlips(_ start: Int, _ goal: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minBitFlips(start: Int, goal: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int minBitFlips(int start, int goal) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func minBitFlips(start int, goal int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} start\n# @param {Integer} goal\n# @return {Integer}\ndef min_bit_flips(start, goal)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minBitFlips(start: Int, goal: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_bit_flips(start: i32, goal: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (min-bit-flips start goal)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec min_bit_flips(Start :: integer(), Goal :: integer()) -> integer().\nmin_bit_flips(Start, Goal) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_bit_flips(start :: integer, goal :: integer) :: integer\n  def min_bit_flips(start, goal) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c", "title": "Minimum Flips to Make a OR b Equal to c", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "minimum-number-of-operations-to-make-array-xor-equal-to-k", "title": "Minimum Number of Operations to Make Array XOR Equal to K", "isPaidOnly": false}]}