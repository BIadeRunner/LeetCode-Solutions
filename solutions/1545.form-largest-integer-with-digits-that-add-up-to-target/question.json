{"questionId": "1545", "acRate": 48.50255661066472, "difficulty": "Hard", "freqBar": 0.0, "frontendQuestionId": "1449", "paidOnly": false, "status": "ac", "title": "Form Largest Integer With Digits That Add up to Target", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "form-largest-integer-with-digits-that-add-up-to-target", "content": "<p>Given an array of integers <code>cost</code> and an integer <code>target</code>, return <em>the <strong>maximum</strong> integer you can paint under the following rules</em>:</p>\n\n<ul>\n\t<li>The cost of painting a digit <code>(i + 1)</code> is given by <code>cost[i]</code> (<strong>0-indexed</strong>).</li>\n\t<li>The total cost used must be equal to <code>target</code>.</li>\n\t<li>The integer does not have <code>0</code> digits.</li>\n</ul>\n\n<p>Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return <code>&quot;0&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [4,3,2,5,6,7,2,5,5], target = 9\n<strong>Output:</strong> &quot;7772&quot;\n<strong>Explanation:</strong> The cost to paint the digit &#39;7&#39; is 2, and the digit &#39;2&#39; is 3. Then cost(&quot;7772&quot;) = 2*3+ 3*1 = 9. You could also paint &quot;977&quot;, but &quot;7772&quot; is the largest number.\n<strong>Digit    cost</strong>\n  1  -&gt;   4\n  2  -&gt;   3\n  3  -&gt;   2\n  4  -&gt;   5\n  5  -&gt;   6\n  6  -&gt;   7\n  7  -&gt;   2\n  8  -&gt;   5\n  9  -&gt;   5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [7,6,5,5,5,6,8,7,8], target = 12\n<strong>Output:</strong> &quot;85&quot;\n<strong>Explanation:</strong> The cost to paint the digit &#39;8&#39; is 7, and the digit &#39;5&#39; is 5. Then cost(&quot;85&quot;) = 7 + 5 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [2,4,6,2,4,6,4,4,4], target = 5\n<strong>Output:</strong> &quot;0&quot;\n<strong>Explanation:</strong> It is impossible to paint any integer with total cost equal to target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>cost.length == 9</code></li>\n\t<li><code>1 &lt;= cost[i], target &lt;= 5000</code></li>\n</ul>\n", "hints": ["Use dynamic programming to find the maximum digits to paint given a total cost.", "Build the largest number possible using this DP table."], "exampleTestcases": "[4,3,2,5,6,7,2,5,5]\n9\n[7,6,5,5,5,6,8,7,8]\n12\n[2,4,6,2,4,6,4,4,4]\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestNumber(vector<int>& cost, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String largestNumber(int[] cost, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestNumber(self, cost, target):\n        \"\"\"\n        :type cost: List[int]\n        :type target: int\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* largestNumber(int* cost, int costSize, int target) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LargestNumber(int[] cost, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} cost\n * @param {number} target\n * @return {string}\n */\nvar largestNumber = function(cost, target) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestNumber(cost: number[], target: number): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @param Integer $target\n     * @return String\n     */\n    function largestNumber($cost, $target) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestNumber(_ cost: [Int], _ target: Int) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestNumber(cost: IntArray, target: Int): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String largestNumber(List<int> cost, int target) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func largestNumber(cost []int, target int) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} cost\n# @param {Integer} target\n# @return {String}\ndef largest_number(cost, target)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestNumber(cost: Array[Int], target: Int): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_number(cost: Vec<i32>, target: i32) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (largest-number cost target)\n  (-> (listof exact-integer?) exact-integer? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec largest_number(Cost :: [integer()], Target :: integer()) -> unicode:unicode_binary().\nlargest_number(Cost, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_number(cost :: [integer], target :: integer) :: String.t\n  def largest_number(cost, target) do\n    \n  end\nend"}], "similarQuestionList": []}