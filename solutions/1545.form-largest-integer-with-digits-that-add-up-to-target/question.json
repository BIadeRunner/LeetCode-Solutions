{"question_id": "1545", "problem_slug": "form-largest-integer-with-digits-that-add-up-to-target", "problem_title": "Form Largest Integer With Digits That Add up to Target", "content": "Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:\n\nThe cost of painting a digit (i + 1) is given by cost[i] (0-indexed).\nThe total cost used must be equal to target.\nThe integer does not have 0 digits.\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".\n \nExample 1:\n\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n\nExample 2:\n\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n\nExample 3:\n\nInput: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It is impossible to paint any integer with total cost equal to target.\n\n \nConstraints:\n\ncost.length == 9\n1 <= cost[i], target <= 5000\n\n", "hints": ["Use dynamic programming to find the maximum digits to paint given a total cost.", "Build the largest number possible using this DP table."], "exampleTestcases": "[4,3,2,5,6,7,2,5,5]\n9\n[7,6,5,5,5,6,8,7,8]\n12\n[2,4,6,2,4,6,4,4,4]\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestNumber(vector<int>& cost, int target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String largestNumber(int[] cost, int target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def largestNumber(self, cost, target):\n        \"\"\"\n        :type cost: List[int]\n        :type target: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* largestNumber(int* cost, int costSize, int target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string LargestNumber(int[] cost, int target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} cost\n * @param {number} target\n * @return {string}\n */\nvar largestNumber = function(cost, target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function largestNumber(cost: number[], target: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @param Integer $target\n     * @return String\n     */\n    function largestNumber($cost, $target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func largestNumber(_ cost: [Int], _ target: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun largestNumber(cost: IntArray, target: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String largestNumber(List<int> cost, int target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func largestNumber(cost []int, target int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} cost\n# @param {Integer} target\n# @return {String}\ndef largest_number(cost, target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def largestNumber(cost: Array[Int], target: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_number(cost: Vec<i32>, target: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (largest-number cost target)\n  (-> (listof exact-integer?) exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec largest_number(Cost :: [integer()], Target :: integer()) -> unicode:unicode_binary().\nlargest_number(Cost, Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_number(cost :: [integer], target :: integer) :: String.t\n  def largest_number(cost, target) do\n    \n  end\nend"}}}