{"question_id": "3450", "problem_slug": "find-the-child-who-has-the-ball-after-k-seconds", "problem_title": "Find the Child Who Has the Ball After K Seconds", "content": "You are given two positive integers n and k. There are n children numbered from 0 to n - 1 standing in a queue in order from left to right.\nInitially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches either end of the line, i.e. child 0 or child n - 1, the direction of passing is reversed.\nReturn the number of the child who receives the ball after k seconds.\n \nExample 1:\n\nInput: n = 3, k = 5\nOutput: 1\nExplanation:\n\n\n\nTime elapsed\nChildren\n\n\n0\n[0, 1, 2]\n\n\n1\n[0, 1, 2]\n\n\n2\n[0, 1, 2]\n\n\n3\n[0, 1, 2]\n\n\n4\n[0, 1, 2]\n\n\n5\n[0, 1, 2]\n\n\n\n\nExample 2:\n\nInput: n = 5, k = 6\nOutput: 2\nExplanation:\n\n\n\nTime elapsed\nChildren\n\n\n0\n[0, 1, 2, 3, 4]\n\n\n1\n[0, 1, 2, 3, 4]\n\n\n2\n[0, 1, 2, 3, 4]\n\n\n3\n[0, 1, 2, 3, 4]\n\n\n4\n[0, 1, 2, 3, 4]\n\n\n5\n[0, 1, 2, 3, 4]\n\n\n6\n[0, 1, 2, 3, 4]\n\n\n\n\nExample 3:\n\nInput: n = 4, k = 2\nOutput: 2\nExplanation:\n\n\n\nTime elapsed\nChildren\n\n\n0\n[0, 1, 2, 3]\n\n\n1\n[0, 1, 2, 3]\n\n\n2\n[0, 1, 2, 3]\n\n\n\n\n \nConstraints:\n\n2 <= n <= 50\n1 <= k <= 50\n\n \nNote: This question is the same as  2582: Pass the Pillow.\n", "hints": ["The ball will go back to child 0 after <code>2 * (n - 1)</code> seconds and everything is the same as time 0.", "So the answer for <code>k</code> is the same as the answer for <code>k % (2 * (n - 1))</code>."], "exampleTestcases": "3\n5\n5\n6\n4\n2", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfChild(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int numberOfChild(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def numberOfChild(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def numberOfChild(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int numberOfChild(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfChild(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar numberOfChild = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function numberOfChild(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfChild($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func numberOfChild(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun numberOfChild(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int numberOfChild(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func numberOfChild(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef number_of_child(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def numberOfChild(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_child(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (number-of-child n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec number_of_child(N :: integer(), K :: integer()) -> integer().\nnumber_of_child(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec number_of_child(n :: integer, k :: integer) :: integer\n  def number_of_child(n, k) do\n    \n  end\nend"}}}