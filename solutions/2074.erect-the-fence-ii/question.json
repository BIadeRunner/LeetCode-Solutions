{"question_id": "2074", "problem_slug": "erect-the-fence-ii", "problem_title": "Erect the Fence II", "content": "You are given a 2D integer array trees where trees[i] = [xi, yi] represents the location of the ith tree in the garden.\nYou are asked to fence the entire garden using the minimum length of rope possible. The garden is well-fenced only if all the trees are enclosed and the rope used forms a perfect circle. A tree is considered enclosed if it is inside or on the border of the circle.\nMore formally, you must form a circle using the rope with a center (x, y) and radius r where all trees lie inside or on the circle and r is minimum.\nReturn the center and radius of the circle as a length 3 array [x, y, r]. Answers within 10-5 of the actual answer will be accepted.\n \nExample 1:\n\n\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [2.00000,2.00000,2.00000]\nExplanation: The fence will have center = (2, 2) and radius = 2\n\nExample 2:\n\n\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [2.50000,2.00000,1.50000]\nExplanation: The fence will have center = (2.5, 2) and radius = 1.5\n\n \nConstraints:\n\n1 <= trees.length <= 3000\ntrees[i].length == 2\n0 <= xi, yi <= 3000\n\n", "hints": ["First, we need to note that this is a classic problem given n points you need to find the minimum enclosing circle to bind them", "Second, we need to apply a well known algorithm called welzls algorithm to help us find the minimum enclosing circle"], "exampleTestcases": "[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n[[1,2],[2,2],[4,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<double> outerTrees(vector<vector<int>>& trees) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public double[] outerTrees(int[][] trees) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def outerTrees(self, trees):\n        \"\"\"\n        :type trees: List[List[int]]\n        :rtype: List[float]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[float]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* outerTrees(int** trees, int treesSize, int* treesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public double[] OuterTrees(int[][] trees) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} trees\n * @return {number[]}\n */\nvar outerTrees = function(trees) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function outerTrees(trees: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $trees\n     * @return Float[]\n     */\n    function outerTrees($trees) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func outerTrees(_ trees: [[Int]]) -> [Double] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun outerTrees(trees: Array<IntArray>): DoubleArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<double> outerTrees(List<List<int>> trees) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func outerTrees(trees [][]int) []float64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} trees\n# @return {Float[]}\ndef outer_trees(trees)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def outerTrees(trees: Array[Array[Int]]): Array[Double] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn outer_trees(trees: Vec<Vec<i32>>) -> Vec<f64> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (outer-trees trees)\n  (-> (listof (listof exact-integer?)) (listof flonum?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec outer_trees(Trees :: [[integer()]]) -> [float()].\nouter_trees(Trees) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec outer_trees(trees :: [[integer]]) :: [float]\n  def outer_trees(trees) do\n    \n  end\nend"}}}