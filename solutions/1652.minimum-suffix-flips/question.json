{"question_id": "1652", "problem_slug": "minimum-suffix-flips", "problem_title": "Minimum Suffix Flips", "content": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.\n \nExample 1:\n\nInput: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.\n\nExample 2:\n\nInput: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target.\n\nExample 3:\n\nInput: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target.\n\n \nConstraints:\n\nn == target.length\n1 <= n <= 105\ntarget[i] is either '0' or '1'.\n\n", "hints": ["Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."], "exampleTestcases": "\"10111\"\n\"101\"\n\"00000\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFlips(string target) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minFlips(String target) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minFlips(self, target):\n        \"\"\"\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minFlips(self, target: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minFlips(char* target) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinFlips(string target) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} target\n * @return {number}\n */\nvar minFlips = function(target) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minFlips(target: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $target\n     * @return Integer\n     */\n    function minFlips($target) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minFlips(_ target: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minFlips(target: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minFlips(String target) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minFlips(target string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} target\n# @return {Integer}\ndef min_flips(target)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minFlips(target: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_flips(target: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-flips target)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_flips(Target :: unicode:unicode_binary()) -> integer().\nmin_flips(Target) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_flips(target :: String.t) :: integer\n  def min_flips(target) do\n    \n  end\nend"}}}