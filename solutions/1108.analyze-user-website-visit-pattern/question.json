{"question_id": "1108", "problem_slug": "analyze-user-website-visit-pattern", "problem_title": "Analyze User Website Visit Pattern", "content": "You are given two string arrays username and website and an integer array timestamp. All the given arrays are of the same length and the tuple [username[i], website[i], timestamp[i]] indicates that the user username[i] visited the website website[i] at time timestamp[i].\nA pattern is a list of three websites (not necessarily distinct).\n\nFor example, [\"home\", \"away\", \"love\"], [\"leetcode\", \"love\", \"leetcode\"], and [\"luffy\", \"luffy\", \"luffy\"] are all patterns.\n\nThe score of a pattern is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.\n\nFor example, if the pattern is [\"home\", \"away\", \"love\"], the score is the number of users x such that x visited \"home\" then visited \"away\" and visited \"love\" after that.\nSimilarly, if the pattern is [\"leetcode\", \"love\", \"leetcode\"], the score is the number of users x such that x visited \"leetcode\" then visited \"love\" and visited \"leetcode\" one more time after that.\nAlso, if the pattern is [\"luffy\", \"luffy\", \"luffy\"], the score is the number of users x such that x visited \"luffy\" three different times at different timestamps.\n\nReturn the pattern with the largest score. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.\nNote that the websites in a pattern do not need to be visited contiguously, they only need to be visited in the order they appeared in the pattern.\n \nExample 1:\n\nInput: username = [\"joe\",\"joe\",\"joe\",\"james\",\"james\",\"james\",\"james\",\"mary\",\"mary\",\"mary\"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [\"home\",\"about\",\"career\",\"home\",\"cart\",\"maps\",\"home\",\"home\",\"about\",\"career\"]\nOutput: [\"home\",\"about\",\"career\"]\nExplanation: The tuples in this example are:\n[\"joe\",\"home\",1],[\"joe\",\"about\",2],[\"joe\",\"career\",3],[\"james\",\"home\",4],[\"james\",\"cart\",5],[\"james\",\"maps\",6],[\"james\",\"home\",7],[\"mary\",\"home\",8],[\"mary\",\"about\",9], and [\"mary\",\"career\",10].\nThe pattern (\"home\", \"about\", \"career\") has score 2 (joe and mary).\nThe pattern (\"home\", \"cart\", \"maps\") has score 1 (james).\nThe pattern (\"home\", \"cart\", \"home\") has score 1 (james).\nThe pattern (\"home\", \"maps\", \"home\") has score 1 (james).\nThe pattern (\"cart\", \"maps\", \"home\") has score 1 (james).\nThe pattern (\"home\", \"home\", \"home\") has score 0 (no user visited home 3 times).\n\nExample 2:\n\nInput: username = [\"ua\",\"ua\",\"ua\",\"ub\",\"ub\",\"ub\"], timestamp = [1,2,3,4,5,6], website = [\"a\",\"b\",\"a\",\"a\",\"b\",\"c\"]\nOutput: [\"a\",\"b\",\"a\"]\n\n \nConstraints:\n\n3 <= username.length <= 50\n1 <= username[i].length <= 10\ntimestamp.length == username.length\n1 <= timestamp[i] <= 109\nwebsite.length == username.length\n1 <= website[i].length <= 10\nusername[i] and website[i] consist of lowercase English letters.\nIt is guaranteed that there is at least one user who visited at least three websites.\nAll the tuples [username[i], timestamp[i], website[i]] are unique.\n\n", "hints": ["Let's find for every user separately the websites he visited.", "Consider all possible 3-sequences, find the number of distinct users who visited each of them.", "How to check if some user visited some 3-sequence ?", "Store for every user all the 3-sequence he visited."], "exampleTestcases": "[\"joe\",\"joe\",\"joe\",\"james\",\"james\",\"james\",\"james\",\"mary\",\"mary\",\"mary\"]\n[1,2,3,4,5,6,7,8,9,10]\n[\"home\",\"about\",\"career\",\"home\",\"cart\",\"maps\",\"home\",\"home\",\"about\",\"career\"]\n[\"ua\",\"ua\",\"ua\",\"ub\",\"ub\",\"ub\"]\n[1,2,3,4,5,6]\n[\"a\",\"b\",\"a\",\"a\",\"b\",\"c\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> mostVisitedPattern(vector<string>& username, vector<int>& timestamp, vector<string>& website) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def mostVisitedPattern(self, username, timestamp, website):\n        \"\"\"\n        :type username: List[str]\n        :type timestamp: List[int]\n        :type website: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** mostVisitedPattern(char** username, int usernameSize, int* timestamp, int timestampSize, char** website, int websiteSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> MostVisitedPattern(string[] username, int[] timestamp, string[] website) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} username\n * @param {number[]} timestamp\n * @param {string[]} website\n * @return {string[]}\n */\nvar mostVisitedPattern = function(username, timestamp, website) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function mostVisitedPattern(username: string[], timestamp: number[], website: string[]): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $username\n     * @param Integer[] $timestamp\n     * @param String[] $website\n     * @return String[]\n     */\n    function mostVisitedPattern($username, $timestamp, $website) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func mostVisitedPattern(_ username: [String], _ timestamp: [Int], _ website: [String]) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun mostVisitedPattern(username: Array<String>, timestamp: IntArray, website: Array<String>): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> mostVisitedPattern(List<String> username, List<int> timestamp, List<String> website) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func mostVisitedPattern(username []string, timestamp []int, website []string) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} username\n# @param {Integer[]} timestamp\n# @param {String[]} website\n# @return {String[]}\ndef most_visited_pattern(username, timestamp, website)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def mostVisitedPattern(username: Array[String], timestamp: Array[Int], website: Array[String]): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn most_visited_pattern(username: Vec<String>, timestamp: Vec<i32>, website: Vec<String>) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (most-visited-pattern username timestamp website)\n  (-> (listof string?) (listof exact-integer?) (listof string?) (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec most_visited_pattern(Username :: [unicode:unicode_binary()], Timestamp :: [integer()], Website :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nmost_visited_pattern(Username, Timestamp, Website) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec most_visited_pattern(username :: [String.t], timestamp :: [integer], website :: [String.t]) :: [String.t]\n  def most_visited_pattern(username, timestamp, website) do\n    \n  end\nend"}}}