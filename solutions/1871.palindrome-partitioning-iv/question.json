{"question_id": "1871", "problem_slug": "palindrome-partitioning-iv", "problem_title": "Palindrome Partitioning IV", "content": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​\nA string is said to be palindrome if it the same string when reversed.\n \nExample 1:\n\nInput: s = \"abcbdd\"\nOutput: true\nExplanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.\n\nExample 2:\n\nInput: s = \"bcbddxy\"\nOutput: false\nExplanation: s cannot be split into 3 palindromes.\n\n \nConstraints:\n\n3 <= s.length <= 2000\ns​​​​​​ consists only of lowercase English letters.\n\n", "hints": ["Preprocess checking palindromes in O(1)", "Note that one string is a prefix and another one is a suffix you can try brute forcing the rest"], "exampleTestcases": "\"abcbdd\"\n\"bcbddxy\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkPartitioning(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean checkPartitioning(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def checkPartitioning(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool checkPartitioning(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool CheckPartitioning(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkPartitioning = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function checkPartitioning(s: string): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkPartitioning($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func checkPartitioning(_ s: String) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun checkPartitioning(s: String): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool checkPartitioning(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func checkPartitioning(s string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef check_partitioning(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def checkPartitioning(s: String): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn check_partitioning(s: String) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (check-partitioning s)\n  (-> string? boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec check_partitioning(S :: unicode:unicode_binary()) -> boolean().\ncheck_partitioning(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec check_partitioning(s :: String.t) :: boolean\n  def check_partitioning(s) do\n    \n  end\nend"}}}