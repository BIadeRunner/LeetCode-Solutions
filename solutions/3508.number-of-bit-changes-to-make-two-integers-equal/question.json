{"question_id": "3508", "problem_slug": "number-of-bit-changes-to-make-two-integers-equal", "problem_title": "Number of Bit Changes to Make Two Integers Equal", "content": "You are given two positive integers n and k.\nYou can choose any bit in the binary representation of n that is equal to 1 and change it to 0.\nReturn the number of changes needed to make n equal to k. If it is impossible, return -1.\n \nExample 1:\n\nInput: n = 13, k = 4\nOutput: 2\nExplanation:\nInitially, the binary representations of n and k are n = (1101)2 and k = (0100)2.\nWe can change the first and fourth bits of n. The resulting integer is n = (0100)2 = k.\n\nExample 2:\n\nInput: n = 21, k = 21\nOutput: 0\nExplanation:\nn and k are already equal, so no changes are needed.\n\nExample 3:\n\nInput: n = 14, k = 13\nOutput: -1\nExplanation:\nIt is not possible to make n equal to k.\n\n \nConstraints:\n\n1 <= n, k <= 106\n\n", "hints": ["Find the binary representations of <code>n</code> and <code>k</code>.", "Any bit that is equal to 1 in <code>n</code> and equal to 0 in <code>k</code> needs to be changed."], "exampleTestcases": "13\n4\n21\n21\n14\n13", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minChanges(int n, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minChanges(int n, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minChanges(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minChanges(self, n: int, k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minChanges(int n, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinChanges(int n, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(n, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minChanges(n: number, k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($n, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minChanges(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minChanges(n: Int, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minChanges(int n, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minChanges(n int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(n, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minChanges(n: Int, k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_changes(n: i32, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (min-changes n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec min_changes(N :: integer(), K :: integer()) -> integer().\nmin_changes(N, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_changes(n :: integer, k :: integer) :: integer\n  def min_changes(n, k) do\n    \n  end\nend"}}}