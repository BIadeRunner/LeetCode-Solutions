{"question_id": "3459", "problem_slug": "find-the-minimum-area-to-cover-all-ones-ii", "problem_title": "Find the Minimum Area to Cover All Ones II", "content": "You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles.\nReturn the minimum possible sum of the area of these rectangles.\nNote that the rectangles are allowed to touch.\n \nExample 1:\n\nInput: grid = [[1,0,1],[1,1,1]]\nOutput: 5\nExplanation:\n\n\nThe 1's at (0, 0) and (1, 0) are covered by a rectangle of area 2.\nThe 1's at (0, 2) and (1, 2) are covered by a rectangle of area 2.\nThe 1 at (1, 1) is covered by a rectangle of area 1.\n\n\nExample 2:\n\nInput: grid = [[1,0,1,0],[0,1,0,1]]\nOutput: 5\nExplanation:\n\n\nThe 1's at (0, 0) and (0, 2) are covered by a rectangle of area 3.\nThe 1 at (1, 1) is covered by a rectangle of area 1.\nThe 1 at (1, 3) is covered by a rectangle of area 1.\n\n\n \nConstraints:\n\n1 <= grid.length, grid[i].length <= 30\ngrid[i][j] is either 0 or 1.\nThe input is generated such that there are at least three 1's in grid.\n\n", "hints": ["Consider covering using 2 rectangles. As the rectangles don’t overlap, one of the rectangles must either be vertically above or horizontally left to the other.", "To find the minimum area, check all possible vertical and horizontal splits.", "For 3 rectangles, extend the idea to first covering using one rectangle, and then try splitting leftover ones both horizontally and vertically."], "exampleTestcases": "[[1,0,1],[1,1,1]]\n[[1,0,1,0],[0,1,0,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int minimumSum(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def minimumSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int minimumSum(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MinimumSum(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumSum = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function minimumSum(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumSum($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func minimumSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun minimumSum(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int minimumSum(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func minimumSum(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_sum(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def minimumSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (minimum-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec minimum_sum(Grid :: [[integer()]]) -> integer().\nminimum_sum(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec minimum_sum(grid :: [[integer]]) :: integer\n  def minimum_sum(grid) do\n    \n  end\nend"}}}