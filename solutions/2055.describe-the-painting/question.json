{"question_id": "2055", "problem_slug": "describe-the-painting", "problem_title": "Describe the Painting", "content": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.\nThe colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.\n\nFor example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.\n\nFor the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.\nYou want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.\n\nFor example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:\n\n\t\n[1,4) is colored {5,7} (with a sum of 12) from both the first and second segments.\n[4,7) is colored {7} from only the second segment.\n\n\n\nReturn the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.\n \nExample 1:\n\n\nInput: segments = [[1,4,5],[4,7,7],[1,7,9]]\nOutput: [[1,4,14],[4,7,16]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.\n\nExample 2:\n\n\nInput: segments = [[1,7,9],[6,8,15],[8,10,7]]\nOutput: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]\nExplanation: The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment.\n\nExample 3:\n\n\nInput: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]\nOutput: [[1,4,12],[4,7,12]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different.\n\n \nConstraints:\n\n1 <= segments.length <= 2 * 104\nsegments[i].length == 3\n1 <= starti < endi <= 105\n1 <= colori <= 109\nEach colori is distinct.\n\n", "hints": ["Can we sort the segments in a way to help solve the problem?", "How can we dynamically keep track of the sum of the current segment(s)?"], "exampleTestcases": "[[1,4,5],[4,7,7],[1,7,9]]\n[[1,7,9],[6,8,15],[8,10,7]]\n[[1,4,5],[1,4,7],[4,7,1],[4,7,11]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<long long>> splitPainting(vector<vector<int>>& segments) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<List<Long>> splitPainting(int[][] segments) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def splitPainting(self, segments):\n        \"\"\"\n        :type segments: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nlong long** splitPainting(int** segments, int segmentsSize, int* segmentsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<long>> SplitPainting(int[][] segments) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} segments\n * @return {number[][]}\n */\nvar splitPainting = function(segments) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function splitPainting(segments: number[][]): number[][] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $segments\n     * @return Integer[][]\n     */\n    function splitPainting($segments) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func splitPainting(_ segments: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun splitPainting(segments: Array<IntArray>): List<List<Long>> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<List<int>> splitPainting(List<List<int>> segments) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func splitPainting(segments [][]int) [][]int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} segments\n# @return {Integer[][]}\ndef split_painting(segments)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def splitPainting(segments: Array[Array[Int]]): List[List[Long]] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn split_painting(segments: Vec<Vec<i32>>) -> Vec<Vec<i64>> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (split-painting segments)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec split_painting(Segments :: [[integer()]]) -> [[integer()]].\nsplit_painting(Segments) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec split_painting(segments :: [[integer]]) :: [[integer]]\n  def split_painting(segments) do\n    \n  end\nend"}}}