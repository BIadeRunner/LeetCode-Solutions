{"question_id": "1943", "problem_slug": "count-pairs-of-equal-substrings-with-minimum-difference", "problem_title": "Count Pairs of Equal Substrings With Minimum Difference", "content": "You are given two strings firstString and secondString that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples (i,j,a,b) that satisfy the following conditions:\n\n0 <= i <= j < firstString.length\n0 <= a <= b < secondString.length\nThe substring of firstString that starts at the ith character and ends at the jth character (inclusive) is equal to the substring of secondString that starts at the ath character and ends at the bth character (inclusive).\nj - a is the minimum possible value among all quadruples that satisfy the previous conditions.\n\nReturn the number of such quadruples.\n \nExample 1:\n\nInput: firstString = \"abcd\", secondString = \"bccda\"\nOutput: 1\nExplanation: The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.\n\nExample 2:\n\nInput: firstString = \"ab\", secondString = \"cd\"\nOutput: 0\nExplanation: There are no quadruples satisfying all the conditions.\n\n \nConstraints:\n\n1 <= firstString.length, secondString.length <= 2 * 105\nBoth strings consist only of lowercase English letters.\n\n", "hints": ["If the chosen substrings are of size larger than 1, then you can remove all but the first character from both substrings, and you'll get equal substrings of size 1, with the same a but less j. Hence, it's always optimal to choose substrings of size 1.", "If you choose a specific letter, then it's optimal to choose its first occurrence in firstString, and its last occurrence in secondString, to minimize j-a."], "exampleTestcases": "\"abcd\"\n\"bccda\"\n\"ab\"\n\"cd\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countQuadruples(string firstString, string secondString) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countQuadruples(String firstString, String secondString) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countQuadruples(self, firstString, secondString):\n        \"\"\"\n        :type firstString: str\n        :type secondString: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countQuadruples(char* firstString, char* secondString) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountQuadruples(string firstString, string secondString) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} firstString\n * @param {string} secondString\n * @return {number}\n */\nvar countQuadruples = function(firstString, secondString) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countQuadruples(firstString: string, secondString: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $firstString\n     * @param String $secondString\n     * @return Integer\n     */\n    function countQuadruples($firstString, $secondString) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countQuadruples(_ firstString: String, _ secondString: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countQuadruples(firstString: String, secondString: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countQuadruples(String firstString, String secondString) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countQuadruples(firstString string, secondString string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} first_string\n# @param {String} second_string\n# @return {Integer}\ndef count_quadruples(first_string, second_string)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countQuadruples(firstString: String, secondString: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_quadruples(first_string: String, second_string: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-quadruples firstString secondString)\n  (-> string? string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_quadruples(FirstString :: unicode:unicode_binary(), SecondString :: unicode:unicode_binary()) -> integer().\ncount_quadruples(FirstString, SecondString) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_quadruples(first_string :: String.t, second_string :: String.t) :: integer\n  def count_quadruples(first_string, second_string) do\n    \n  end\nend"}}}