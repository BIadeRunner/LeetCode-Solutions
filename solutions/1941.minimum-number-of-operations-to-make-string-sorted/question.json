{"question_id": "1941", "problem_slug": "minimum-number-of-operations-to-make-string-sorted", "problem_title": "Minimum Number of Operations to Make String Sorted", "content": "You are given a string s (0-indexed)​​​​​​. You are asked to perform the following operation on s​​​​​​ until you get a sorted string:\n\nFind the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].\nFind the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.\nSwap the two characters at indices i - 1​​​​ and j​​​​​.\nReverse the suffix starting at index i​​​​​​.\n\nReturn the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: s = \"cba\"\nOutput: 5\nExplanation: The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\".\n\nExample 2:\n\nInput: s = \"aabaa\"\nOutput: 2\nExplanation: The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".\n\n \nConstraints:\n\n1 <= s.length <= 3000\ns​​​​​​ consists only of lowercase English letters.\n\n", "hints": ["Note that the operations given describe getting the previous permutation of s", "To solve this problem you need to solve every suffix separately"], "exampleTestcases": "\"cba\"\n\"aabaa\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int makeStringSorted(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int makeStringSorted(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def makeStringSorted(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def makeStringSorted(self, s: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int makeStringSorted(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MakeStringSorted(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar makeStringSorted = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function makeStringSorted(s: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function makeStringSorted($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func makeStringSorted(_ s: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun makeStringSorted(s: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int makeStringSorted(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func makeStringSorted(s string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef make_string_sorted(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def makeStringSorted(s: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn make_string_sorted(s: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (make-string-sorted s)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec make_string_sorted(S :: unicode:unicode_binary()) -> integer().\nmake_string_sorted(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec make_string_sorted(s :: String.t) :: integer\n  def make_string_sorted(s) do\n    \n  end\nend"}}}