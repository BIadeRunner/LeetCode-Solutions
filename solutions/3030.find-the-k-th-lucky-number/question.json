{"question_id": "3030", "problem_slug": "find-the-k-th-lucky-number", "problem_title": "Find The K-th Lucky Number", "content": "We know that 4 and 7 are lucky digits. Also, a number is called lucky if it contains only lucky digits.\nYou are given an integer k, return the kth lucky number represented as a string.\n \nExample 1:\n\nInput: k = 4\nOutput: \"47\"\nExplanation: The first lucky number is 4, the second one is 7, the third one is 44 and the fourth one is 47.\n\nExample 2:\n\nInput: k = 10\nOutput: \"477\"\nExplanation: Here are lucky numbers sorted in increasing order:\n4, 7, 44, 47, 74, 77, 444, 447, 474, 477. So the 10th lucky number is 477.\nExample 3:\n\nInput: k = 1000\nOutput: \"777747447\"\nExplanation: It can be shown that the 1000th lucky number is 777747447.\n\n \nConstraints:\n\n1 <= k <= 109\n\n", "hints": ["<div class=\"_1l1MA\">The number of lucky numbers with <strong>exactly</strong> <code>n</code> digits is equal to <code>2<sup>n</sup></code>.</div>", "<div class=\"_1l1MA\">We can obtain how many digits the <code>k<sup>th</sup></code> lucky number has.</div>", "<div class=\"_1l1MA\">Imagine we know that <code>k<sup>th</sup></code> lucky number has <code>c</code> digits. Then calculate how many numbers with <code>c</code> digits exist before the <code>k<sup>th</sup></code> lucky number.</div>", "<div class=\"_1l1MA\">Imagine the number from the previous hint is <code>x</code>. Now look at the binary representation of <code>x</code> and add some leading zero to make its length equal to <code>c</code>.</div>", "<div class=\"_1l1MA\">Replace <code>0</code> and <code>1</code> with <code>4</code> and <code>7</code> in the number you've obtained from the previous hint.</div>"], "exampleTestcases": "4\n10\n1000", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string kthLuckyNumber(int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String kthLuckyNumber(int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kthLuckyNumber(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kthLuckyNumber(self, k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char * kthLuckyNumber(int k){\n\n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string KthLuckyNumber(int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} k\n * @return {string}\n */\nvar kthLuckyNumber = function(k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kthLuckyNumber(k: number): string {\n\n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return String\n     */\n    function kthLuckyNumber($k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kthLuckyNumber(_ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kthLuckyNumber(k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String kthLuckyNumber(int k) {\n\n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kthLuckyNumber(k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} k\n# @return {String}\ndef kth_lucky_number(k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kthLuckyNumber(k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn kth_lucky_number(k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (kth-lucky-number k)\n  (-> exact-integer? string?)\n\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec kth_lucky_number(K :: integer()) -> unicode:unicode_binary().\nkth_lucky_number(K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_lucky_number(k :: integer) :: String.t\n  def kth_lucky_number(k) do\n    \n  end\nend"}}}