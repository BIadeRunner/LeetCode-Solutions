{"questionId": "1872", "acRate": 34.64178464178464, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "1744", "paidOnly": false, "status": "ac", "title": "Can You Eat Your Favorite Candy on Your Favorite Day?", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "can-you-eat-your-favorite-candy-on-your-favorite-day", "content": "<p>You are given a <strong>(0-indexed)</strong> array of positive integers <code>candiesCount</code> where <code>candiesCount[i]</code> represents the number of candies of the&nbsp;<code>i<sup>th</sup></code>&nbsp;type you have. You are also given a 2D array <code>queries</code> where <code>queries[i] = [favoriteType<sub>i</sub>, favoriteDay<sub>i</sub>, dailyCap<sub>i</sub>]</code>.</p>\n\n<p>You play a game with the following rules:</p>\n\n<ul>\n\t<li>You start eating candies on day <code><strong>0</strong></code>.</li>\n\t<li>You <b>cannot</b> eat <strong>any</strong> candy of type <code>i</code> unless you have eaten <strong>all</strong> candies of type <code>i - 1</code>.</li>\n\t<li>You must eat <strong>at least</strong> <strong>one</strong> candy per day until you have eaten all the candies.</li>\n</ul>\n\n<p>Construct a boolean array <code>answer</code> such that <code>answer.length == queries.length</code> and <code>answer[i]</code> is <code>true</code> if you can eat a candy of type <code>favoriteType<sub>i</sub></code> on day <code>favoriteDay<sub>i</sub></code> without eating <strong>more than</strong> <code>dailyCap<sub>i</sub></code> candies on <strong>any</strong> day, and <code>false</code> otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.</p>\n\n<p>Return <em>the constructed array </em><code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\n<strong>Output:</strong> [true,false,true]\n<strong>Explanation:</strong>\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\n<strong>Output:</strong> [false,true,true,false,false]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candiesCount.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= candiesCount[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 3</code></li>\n\t<li><code>0 &lt;= favoriteType<sub>i</sub> &lt; candiesCount.length</code></li>\n\t<li><code>0 &lt;= favoriteDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= dailyCap<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["The query is true if and only if your favorite day is in between the earliest and latest possible days to eat your favorite candy.", "To get the earliest day, you need to eat dailyCap candies every day. To get the latest day, you need to eat 1 candy every day.", "The latest possible day is the total number of candies with a smaller type plus the number of your favorite candy minus 1.", "The earliest possible day that you can eat your favorite candy is the total number of candies with a smaller type divided by dailyCap."], "exampleTestcases": "[7,4,5,3,8]\n[[0,2,2],[4,2,4],[2,13,1000000000]]\n[5,2,6,4,1]\n[[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<bool> canEat(vector<int>& candiesCount, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean[] canEat(int[] candiesCount, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canEat(self, candiesCount, queries):\n        \"\"\"\n        :type candiesCount: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canEat(self, candiesCount: List[int], queries: List[List[int]]) -> List[bool]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* canEat(int* candiesCount, int candiesCountSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool[] CanEat(int[] candiesCount, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} candiesCount\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar canEat = function(candiesCount, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canEat(candiesCount: number[], queries: number[][]): boolean[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candiesCount\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function canEat($candiesCount, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canEat(_ candiesCount: [Int], _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canEat(candiesCount: IntArray, queries: Array<IntArray>): BooleanArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<bool> canEat(List<int> candiesCount, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func canEat(candiesCount []int, queries [][]int) []bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} candies_count\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef can_eat(candies_count, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canEat(candiesCount: Array[Int], queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_eat(candies_count: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (can-eat candiesCount queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof boolean?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec can_eat(CandiesCount :: [integer()], Queries :: [[integer()]]) -> [boolean()].\ncan_eat(CandiesCount, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_eat(candies_count :: [integer], queries :: [[integer]]) :: [boolean]\n  def can_eat(candies_count, queries) do\n    \n  end\nend"}], "similarQuestionList": []}