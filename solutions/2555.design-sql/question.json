{"question_id": "2555", "problem_slug": "design-sql", "problem_title": "Design SQL", "content": "You are given n tables represented with two arrays names and columns, where names[i] is the name of the ith table and columns[i] is the number of columns of the ith table.\nYou should be able to perform the following operations:\n\nInsert a row in a specific table. Each row you insert has an id. The id is assigned using an auto-increment method where the id of the first inserted row is 1, and the id of each other row inserted into the same table is the id of the last inserted row (even if it was deleted) plus one.\nDelete a row from a specific table. Note that deleting a row does not affect the id of the next inserted row.\nSelect a specific cell from any table and return its value.\n\nImplement the SQL class:\n\nSQL(String[] names, int[] columns) Creates the n tables.\nvoid insertRow(String name, String[] row) Adds a row to the table name. It is guaranteed that the table will exist, and the size of the array row is equal to the number of columns in the table.\nvoid deleteRow(String name, int rowId) Removes the row rowId from the table name. It is guaranteed that the table and row will exist.\nString selectCell(String name, int rowId, int columnId) Returns the value of the cell in the row rowId and the column columnId from the table name.\n\n \nExample 1:\n\nInput\n[\"SQL\", \"insertRow\", \"selectCell\", \"insertRow\", \"deleteRow\", \"selectCell\"]\n[[[\"one\", \"two\", \"three\"], [2, 3, 1]], [\"two\", [\"first\", \"second\", \"third\"]], [\"two\", 1, 3], [\"two\", [\"fourth\", \"fifth\", \"sixth\"]], [\"two\", 1], [\"two\", 2, 2]]\nOutput\n[null, null, \"third\", null, null, \"fifth\"]\n\nExplanation\nSQL sql = new SQL([\"one\", \"two\", \"three\"], [2, 3, 1]); // creates three tables.\nsql.insertRow(\"two\", [\"first\", \"second\", \"third\"]); // adds a row to the table \"two\". Its id is 1.\nsql.selectCell(\"two\", 1, 3); // return \"third\", finds the value of the third column in the row with id 1 of the table \"two\".\nsql.insertRow(\"two\", [\"fourth\", \"fifth\", \"sixth\"]); // adds another row to the table \"two\". Its id is 2.\nsql.deleteRow(\"two\", 1); // deletes the first row of the table \"two\". Note that the second row will still have the id 2.\nsql.selectCell(\"two\", 2, 2); // return \"fifth\", finds the value of the second column in the row with id 2 of the table \"two\".\n\n \nConstraints:\n\nn == names.length == columns.length\n1 <= n <= 104\n1 <= names[i].length, row[i].length, name.length <= 20\nnames[i], row[i], and name consist of lowercase English letters.\n1 <= columns[i] <= 100\nAll the strings of names are distinct.\nname exists in the array names.\nrow.length equals the number of columns in the chosen table.\nrowId and columnId will be valid.\nAt most 250 calls will be made to insertRow and deleteRow.\nAt most 104 calls will be made to selectCell.\n\n", "hints": ["What data structure do you need to use for this problem?", "Try using a Hash map, each table name will be the key, and the value will be an array of all rows."], "exampleTestcases": "[\"SQL\",\"insertRow\",\"selectCell\",\"insertRow\",\"deleteRow\",\"selectCell\"]\n[[[\"one\",\"two\",\"three\"],[2,3,1]],[\"two\",[\"first\",\"second\",\"third\"]],[\"two\",1,3],[\"two\",[\"fourth\",\"fifth\",\"sixth\"]],[\"two\",1],[\"two\",2,2]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class SQL {\npublic:\n    SQL(vector<string>& names, vector<int>& columns) {\n        \n    }\n    \n    void insertRow(string name, vector<string> row) {\n        \n    }\n    \n    void deleteRow(string name, int rowId) {\n        \n    }\n    \n    string selectCell(string name, int rowId, int columnId) {\n        \n    }\n};\n\n/**\n * Your SQL object will be instantiated and called as such:\n * SQL* obj = new SQL(names, columns);\n * obj->insertRow(name,row);\n * obj->deleteRow(name,rowId);\n * string param_3 = obj->selectCell(name,rowId,columnId);\n */"}, "Java": {"langSlug": "java", "code": "class SQL {\n\n    public SQL(List<String> names, List<Integer> columns) {\n        \n    }\n    \n    public void insertRow(String name, List<String> row) {\n        \n    }\n    \n    public void deleteRow(String name, int rowId) {\n        \n    }\n    \n    public String selectCell(String name, int rowId, int columnId) {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * SQL obj = new SQL(names, columns);\n * obj.insertRow(name,row);\n * obj.deleteRow(name,rowId);\n * String param_3 = obj.selectCell(name,rowId,columnId);\n */"}, "Python": {"langSlug": "python", "code": "class SQL(object):\n\n    def __init__(self, names, columns):\n        \"\"\"\n        :type names: List[str]\n        :type columns: List[int]\n        \"\"\"\n        \n\n    def insertRow(self, name, row):\n        \"\"\"\n        :type name: str\n        :type row: List[str]\n        :rtype: None\n        \"\"\"\n        \n\n    def deleteRow(self, name, rowId):\n        \"\"\"\n        :type name: str\n        :type rowId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def selectCell(self, name, rowId, columnId):\n        \"\"\"\n        :type name: str\n        :type rowId: int\n        :type columnId: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your SQL object will be instantiated and called as such:\n# obj = SQL(names, columns)\n# obj.insertRow(name,row)\n# obj.deleteRow(name,rowId)\n# param_3 = obj.selectCell(name,rowId,columnId)"}, "Python3": {"langSlug": "python3", "code": "class SQL:\n\n    def __init__(self, names: List[str], columns: List[int]):\n        \n\n    def insertRow(self, name: str, row: List[str]) -> None:\n        \n\n    def deleteRow(self, name: str, rowId: int) -> None:\n        \n\n    def selectCell(self, name: str, rowId: int, columnId: int) -> str:\n        \n\n\n# Your SQL object will be instantiated and called as such:\n# obj = SQL(names, columns)\n# obj.insertRow(name,row)\n# obj.deleteRow(name,rowId)\n# param_3 = obj.selectCell(name,rowId,columnId)"}, "C": {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} SQL;\n\n\nSQL* sQLCreate(char** names, int namesSize, int* columns, int columnsSize) {\n    \n}\n\nvoid sQLInsertRow(SQL* obj, char* name, char** row, int rowSize) {\n    \n}\n\nvoid sQLDeleteRow(SQL* obj, char* name, int rowId) {\n    \n}\n\nchar* sQLSelectCell(SQL* obj, char* name, int rowId, int columnId) {\n    \n}\n\nvoid sQLFree(SQL* obj) {\n    \n}\n\n/**\n * Your SQL struct will be instantiated and called as such:\n * SQL* obj = sQLCreate(names, namesSize, columns, columnsSize);\n * sQLInsertRow(obj, name, row, rowSize);\n \n * sQLDeleteRow(obj, name, rowId);\n \n * char* param_3 = sQLSelectCell(obj, name, rowId, columnId);\n \n * sQLFree(obj);\n*/"}, "C#": {"langSlug": "csharp", "code": "public class SQL {\n\n    public SQL(IList<string> names, IList<int> columns) {\n        \n    }\n    \n    public void InsertRow(string name, IList<string> row) {\n        \n    }\n    \n    public void DeleteRow(string name, int rowId) {\n        \n    }\n    \n    public string SelectCell(string name, int rowId, int columnId) {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * SQL obj = new SQL(names, columns);\n * obj.InsertRow(name,row);\n * obj.DeleteRow(name,rowId);\n * string param_3 = obj.SelectCell(name,rowId,columnId);\n */"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} names\n * @param {number[]} columns\n */\nvar SQL = function(names, columns) {\n    \n};\n\n/** \n * @param {string} name \n * @param {string[]} row\n * @return {void}\n */\nSQL.prototype.insertRow = function(name, row) {\n    \n};\n\n/** \n * @param {string} name \n * @param {number} rowId\n * @return {void}\n */\nSQL.prototype.deleteRow = function(name, rowId) {\n    \n};\n\n/** \n * @param {string} name \n * @param {number} rowId \n * @param {number} columnId\n * @return {string}\n */\nSQL.prototype.selectCell = function(name, rowId, columnId) {\n    \n};\n\n/** \n * Your SQL object will be instantiated and called as such:\n * var obj = new SQL(names, columns)\n * obj.insertRow(name,row)\n * obj.deleteRow(name,rowId)\n * var param_3 = obj.selectCell(name,rowId,columnId)\n */"}, "TypeScript": {"langSlug": "typescript", "code": "class SQL {\n    constructor(names: string[], columns: number[]) {\n        \n    }\n\n    insertRow(name: string, row: string[]): void {\n        \n    }\n\n    deleteRow(name: string, rowId: number): void {\n        \n    }\n\n    selectCell(name: string, rowId: number, columnId: number): string {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * var obj = new SQL(names, columns)\n * obj.insertRow(name,row)\n * obj.deleteRow(name,rowId)\n * var param_3 = obj.selectCell(name,rowId,columnId)\n */"}, "PHP": {"langSlug": "php", "code": "class SQL {\n    /**\n     * @param String[] $names\n     * @param Integer[] $columns\n     */\n    function __construct($names, $columns) {\n        \n    }\n  \n    /**\n     * @param String $name\n     * @param String[] $row\n     * @return NULL\n     */\n    function insertRow($name, $row) {\n        \n    }\n  \n    /**\n     * @param String $name\n     * @param Integer $rowId\n     * @return NULL\n     */\n    function deleteRow($name, $rowId) {\n        \n    }\n  \n    /**\n     * @param String $name\n     * @param Integer $rowId\n     * @param Integer $columnId\n     * @return String\n     */\n    function selectCell($name, $rowId, $columnId) {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * $obj = SQL($names, $columns);\n * $obj->insertRow($name, $row);\n * $obj->deleteRow($name, $rowId);\n * $ret_3 = $obj->selectCell($name, $rowId, $columnId);\n */"}, "Swift": {"langSlug": "swift", "code": "\nclass SQL {\n\n    init(_ names: [String], _ columns: [Int]) {\n        \n    }\n    \n    func insertRow(_ name: String, _ row: [String]) {\n        \n    }\n    \n    func deleteRow(_ name: String, _ rowId: Int) {\n        \n    }\n    \n    func selectCell(_ name: String, _ rowId: Int, _ columnId: Int) -> String {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * let obj = SQL(names, columns)\n * obj.insertRow(name, row)\n * obj.deleteRow(name, rowId)\n * let ret_3: String = obj.selectCell(name, rowId, columnId)\n */"}, "Kotlin": {"langSlug": "kotlin", "code": "class SQL(names: List<String>, columns: List<Int>) {\n\n    fun insertRow(name: String, row: List<String>) {\n        \n    }\n\n    fun deleteRow(name: String, rowId: Int) {\n        \n    }\n\n    fun selectCell(name: String, rowId: Int, columnId: Int): String {\n        \n    }\n\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * var obj = SQL(names, columns)\n * obj.insertRow(name,row)\n * obj.deleteRow(name,rowId)\n * var param_3 = obj.selectCell(name,rowId,columnId)\n */"}, "Dart": {"langSlug": "dart", "code": "class SQL {\n\n  SQL(List<String> names, List<int> columns) {\n    \n  }\n  \n  void insertRow(String name, List<String> row) {\n    \n  }\n  \n  void deleteRow(String name, int rowId) {\n    \n  }\n  \n  String selectCell(String name, int rowId, int columnId) {\n    \n  }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * SQL obj = SQL(names, columns);\n * obj.insertRow(name,row);\n * obj.deleteRow(name,rowId);\n * String param3 = obj.selectCell(name,rowId,columnId);\n */"}, "Go": {"langSlug": "golang", "code": "type SQL struct {\n    \n}\n\n\nfunc Constructor(names []string, columns []int) SQL {\n    \n}\n\n\nfunc (this *SQL) InsertRow(name string, row []string)  {\n    \n}\n\n\nfunc (this *SQL) DeleteRow(name string, rowId int)  {\n    \n}\n\n\nfunc (this *SQL) SelectCell(name string, rowId int, columnId int) string {\n    \n}\n\n\n/**\n * Your SQL object will be instantiated and called as such:\n * obj := Constructor(names, columns);\n * obj.InsertRow(name,row);\n * obj.DeleteRow(name,rowId);\n * param_3 := obj.SelectCell(name,rowId,columnId);\n */"}, "Ruby": {"langSlug": "ruby", "code": "class SQL\n\n=begin\n    :type names: String[]\n    :type columns: Integer[]\n=end\n    def initialize(names, columns)\n        \n    end\n\n\n=begin\n    :type name: String\n    :type row: String[]\n    :rtype: Void\n=end\n    def insert_row(name, row)\n        \n    end\n\n\n=begin\n    :type name: String\n    :type row_id: Integer\n    :rtype: Void\n=end\n    def delete_row(name, row_id)\n        \n    end\n\n\n=begin\n    :type name: String\n    :type row_id: Integer\n    :type column_id: Integer\n    :rtype: String\n=end\n    def select_cell(name, row_id, column_id)\n        \n    end\n\n\nend\n\n# Your SQL object will be instantiated and called as such:\n# obj = SQL.new(names, columns)\n# obj.insert_row(name, row)\n# obj.delete_row(name, row_id)\n# param_3 = obj.select_cell(name, row_id, column_id)"}, "Scala": {"langSlug": "scala", "code": "class SQL(_names: List[String], _columns: List[Int]) {\n\n    def insertRow(name: String, row: List[String]): Unit = {\n        \n    }\n\n    def deleteRow(name: String, rowId: Int): Unit = {\n        \n    }\n\n    def selectCell(name: String, rowId: Int, columnId: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * val obj = new SQL(names, columns)\n * obj.insertRow(name,row)\n * obj.deleteRow(name,rowId)\n * val param_3 = obj.selectCell(name,rowId,columnId)\n */"}, "Rust": {"langSlug": "rust", "code": "struct SQL {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SQL {\n\n    fn new(names: Vec<String>, columns: Vec<i32>) -> Self {\n        \n    }\n    \n    fn insert_row(&self, name: String, row: Vec<String>) {\n        \n    }\n    \n    fn delete_row(&self, name: String, row_id: i32) {\n        \n    }\n    \n    fn select_cell(&self, name: String, row_id: i32, column_id: i32) -> String {\n        \n    }\n}\n\n/**\n * Your SQL object will be instantiated and called as such:\n * let obj = SQL::new(names, columns);\n * obj.insert_row(name, row);\n * obj.delete_row(name, rowId);\n * let ret_3: String = obj.select_cell(name, rowId, columnId);\n */"}, "Racket": {"langSlug": "racket", "code": "(define sql%\n  (class object%\n    (super-new)\n    \n    ; names : (listof string?)\n    ; columns : (listof exact-integer?)\n    (init-field\n      names\n      columns)\n    \n    ; insert-row : string? (listof string?) -> void?\n    (define/public (insert-row name row)\n      )\n    ; delete-row : string? exact-integer? -> void?\n    (define/public (delete-row name row-id)\n      )\n    ; select-cell : string? exact-integer? exact-integer? -> string?\n    (define/public (select-cell name row-id column-id)\n      )))\n\n;; Your sql% object will be instantiated and called as such:\n;; (define obj (new sql% [names names] [columns columns]))\n;; (send obj insert-row name row)\n;; (send obj delete-row name row-id)\n;; (define param_3 (send obj select-cell name row-id column-id))"}, "Erlang": {"langSlug": "erlang", "code": "-spec sql_init_(Names :: [unicode:unicode_binary()], Columns :: [integer()]) -> any().\nsql_init_(Names, Columns) ->\n  .\n\n-spec sql_insert_row(Name :: unicode:unicode_binary(), Row :: [unicode:unicode_binary()]) -> any().\nsql_insert_row(Name, Row) ->\n  .\n\n-spec sql_delete_row(Name :: unicode:unicode_binary(), RowId :: integer()) -> any().\nsql_delete_row(Name, RowId) ->\n  .\n\n-spec sql_select_cell(Name :: unicode:unicode_binary(), RowId :: integer(), ColumnId :: integer()) -> unicode:unicode_binary().\nsql_select_cell(Name, RowId, ColumnId) ->\n  .\n\n\n%% Your functions will be called as such:\n%% sql_init_(Names, Columns),\n%% sql_insert_row(Name, Row),\n%% sql_delete_row(Name, RowId),\n%% Param_3 = sql_select_cell(Name, RowId, ColumnId),\n\n%% sql_init_ will be called before every test case, in which you can do some necessary initializations."}, "Elixir": {"langSlug": "elixir", "code": "defmodule SQL do\n  @spec init_(names :: [String.t], columns :: [integer]) :: any\n  def init_(names, columns) do\n    \n  end\n\n  @spec insert_row(name :: String.t, row :: [String.t]) :: any\n  def insert_row(name, row) do\n    \n  end\n\n  @spec delete_row(name :: String.t, row_id :: integer) :: any\n  def delete_row(name, row_id) do\n    \n  end\n\n  @spec select_cell(name :: String.t, row_id :: integer, column_id :: integer) :: String.t\n  def select_cell(name, row_id, column_id) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# SQL.init_(names, columns)\n# SQL.insert_row(name, row)\n# SQL.delete_row(name, row_id)\n# param_3 = SQL.select_cell(name, row_id, column_id)\n\n# SQL.init_ will be called before every test case, in which you can do some necessary initializations."}}}