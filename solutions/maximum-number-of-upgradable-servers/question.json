{"questionId": "3458", "acRate": 46.74138646741387, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "3155", "paidOnly": true, "status": "ac", "title": "Maximum Number of Upgradable Servers", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Binary Search", "id": "VG9waWNUYWdOb2RlOjEx", "slug": "binary-search"}], "titleSlug": "maximum-number-of-upgradable-servers", "content": "<p>You have <code>n</code> data centers and need to upgrade their servers.</p>\n\n<p>You are given four arrays <code>count</code>, <code>upgrade</code>, <code>sell</code>, and <code>money</code> of length <code>n</code>, which show:</p>\n\n<ul>\n\t<li>The number of servers</li>\n\t<li>The cost of upgrading a single server</li>\n\t<li>The money you get by selling a server</li>\n\t<li>The money you initially have</li>\n</ul>\n\n<p>for each data center respectively.</p>\n\n<p>Return an array <code>answer</code>, where for each data center, the corresponding element in <code>answer</code> represents the <strong>maximum</strong> number of servers that can be upgraded.</p>\n\n<p>Note that the money from one data center <strong>cannot</strong> be used for another data center.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">count = [4,3], upgrade = [3,5], sell = [4,2], money = [8,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For the first data center, if we sell one server, we&#39;ll have <code>8 + 4 = 12</code> units of money and we can upgrade the remaining 3 servers.</p>\n\n<p>For the second data center, if we sell one server, we&#39;ll have <code>9 + 2 = 11</code> units of money and we can upgrade the remaining 2 servers.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">count = [1], upgrade = [2], sell = [1], money = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= count.length == upgrade.length == sell.length == money.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= count[i], upgrade[i], sell[i], money[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Use binary search to find the maximum number of servers that can be upgraded for each data center separately."], "exampleTestcases": "[4,3]\n[3,5]\n[4,2]\n[8,9]\n[1]\n[2]\n[1]\n[1]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxUpgrades(vector<int>& count, vector<int>& upgrade, vector<int>& sell, vector<int>& money) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxUpgrades(int[] count, int[] upgrade, int[] sell, int[] money) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxUpgrades(self, count, upgrade, sell, money):\n        \"\"\"\n        :type count: List[int]\n        :type upgrade: List[int]\n        :type sell: List[int]\n        :type money: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxUpgrades(self, count: List[int], upgrade: List[int], sell: List[int], money: List[int]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxUpgrades(int* count, int countSize, int* upgrade, int upgradeSize, int* sell, int sellSize, int* money, int moneySize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxUpgrades(int[] count, int[] upgrade, int[] sell, int[] money) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} count\n * @param {number[]} upgrade\n * @param {number[]} sell\n * @param {number[]} money\n * @return {number[]}\n */\nvar maxUpgrades = function(count, upgrade, sell, money) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxUpgrades(count: number[], upgrade: number[], sell: number[], money: number[]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $count\n     * @param Integer[] $upgrade\n     * @param Integer[] $sell\n     * @param Integer[] $money\n     * @return Integer[]\n     */\n    function maxUpgrades($count, $upgrade, $sell, $money) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxUpgrades(_ count: [Int], _ upgrade: [Int], _ sell: [Int], _ money: [Int]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxUpgrades(count: IntArray, upgrade: IntArray, sell: IntArray, money: IntArray): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> maxUpgrades(List<int> count, List<int> upgrade, List<int> sell, List<int> money) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxUpgrades(count []int, upgrade []int, sell []int, money []int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} count\n# @param {Integer[]} upgrade\n# @param {Integer[]} sell\n# @param {Integer[]} money\n# @return {Integer[]}\ndef max_upgrades(count, upgrade, sell, money)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxUpgrades(count: Array[Int], upgrade: Array[Int], sell: Array[Int], money: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_upgrades(count: Vec<i32>, upgrade: Vec<i32>, sell: Vec<i32>, money: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-upgrades count upgrade sell money)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_upgrades(Count :: [integer()], Upgrade :: [integer()], Sell :: [integer()], Money :: [integer()]) -> [integer()].\nmax_upgrades(Count, Upgrade, Sell, Money) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_upgrades(count :: [integer], upgrade :: [integer], sell :: [integer], money :: [integer]) :: [integer]\n  def max_upgrades(count, upgrade, sell, money) do\n    \n  end\nend"}], "similarQuestionList": []}