{"questionId": "2260", "acRate": 67.20642355302778, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "2138", "paidOnly": false, "status": "ac", "title": "Divide a String Into Groups of Size k", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "divide-a-string-into-groups-of-size-k", "content": "<p>A string <code>s</code> can be partitioned into groups of size <code>k</code> using the following procedure:</p>\n\n<ul>\n\t<li>The first group consists of the first <code>k</code> characters of the string, the second group consists of the next <code>k</code> characters of the string, and so on. Each character can be a part of <strong>exactly one</strong> group.</li>\n\t<li>For the last group, if the string <strong>does not</strong> have <code>k</code> characters remaining, a character <code>fill</code> is used to complete the group.</li>\n</ul>\n\n<p>Note that the partition is done so that after removing the <code>fill</code> character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be <code>s</code>.</p>\n\n<p>Given the string <code>s</code>, the size of each group <code>k</code> and the character <code>fill</code>, return <em>a string array denoting the <strong>composition of every group</strong> </em><code>s</code><em> has been divided into, using the above procedure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdefghi&quot;, k = 3, fill = &quot;x&quot;\n<strong>Output:</strong> [&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;]\n<strong>Explanation:</strong>\nThe first 3 characters &quot;abc&quot; form the first group.\nThe next 3 characters &quot;def&quot; form the second group.\nThe last 3 characters &quot;ghi&quot; form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are &quot;abc&quot;, &quot;def&quot;, and &quot;ghi&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdefghij&quot;, k = 3, fill = &quot;x&quot;\n<strong>Output:</strong> [&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jxx&quot;]\n<strong>Explanation:</strong>\nSimilar to the previous example, we are forming the first three groups &quot;abc&quot;, &quot;def&quot;, and &quot;ghi&quot;.\nFor the last group, we can only use the character &#39;j&#39; from the string. To complete this group, we add &#39;x&#39; twice.\nThus, the 4 groups formed are &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, and &quot;jxx&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>fill</code> is a lowercase English letter.</li>\n</ul>\n", "hints": ["Using the length of the string and k, can you count the number of groups the string can be divided into?", "Try completing each group using characters from the string. If there aren\u2019t enough characters for the last group, use the fill character to complete the group."], "exampleTestcases": "\"abcdefghi\"\n3\n\"x\"\n\"abcdefghij\"\n3\n\"x\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> divideString(string s, int k, char fill) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] divideString(String s, int k, char fill) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def divideString(self, s, k, fill):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :type fill: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** divideString(char* s, int k, char fill, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] DivideString(string s, int k, char fill) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @param {character} fill\n * @return {string[]}\n */\nvar divideString = function(s, k, fill) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function divideString(s: string, k: number, fill: string): string[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @param String $fill\n     * @return String[]\n     */\n    function divideString($s, $k, $fill) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func divideString(_ s: String, _ k: Int, _ fill: Character) -> [String] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun divideString(s: String, k: Int, fill: Char): Array<String> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> divideString(String s, int k, String fill) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func divideString(s string, k int, fill byte) []string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @param {Character} fill\n# @return {String[]}\ndef divide_string(s, k, fill)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def divideString(s: String, k: Int, fill: Char): Array[String] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn divide_string(s: String, k: i32, fill: char) -> Vec<String> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (divide-string s k fill)\n  (-> string? exact-integer? char? (listof string?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec divide_string(S :: unicode:unicode_binary(), K :: integer(), Fill :: char()) -> [unicode:unicode_binary()].\ndivide_string(S, K, Fill) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec divide_string(s :: String.t, k :: integer, fill :: char) :: [String.t]\n  def divide_string(s, k, fill) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "text-justification", "title": "Text Justification", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "positions-of-large-groups", "title": "Positions of Large Groups", "isPaidOnly": false}]}