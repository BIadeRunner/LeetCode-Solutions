{"question_id": "3453", "problem_slug": "generate-binary-strings-without-adjacent-zeros", "problem_title": "Generate Binary Strings Without Adjacent Zeros", "content": "You are given a positive integer n.\nA binary string x is valid if all substrings of x of length 2 contain at least one \"1\".\nReturn all valid strings with length n, in any order.\n \nExample 1:\n\nInput: n = 3\nOutput: [\"010\",\"011\",\"101\",\"110\",\"111\"]\nExplanation:\nThe valid strings of length 3 are: \"010\", \"011\", \"101\", \"110\", and \"111\".\n\nExample 2:\n\nInput: n = 1\nOutput: [\"0\",\"1\"]\nExplanation:\nThe valid strings of length 1 are: \"0\" and \"1\".\n\n \nConstraints:\n\n1 <= n <= 18\n\n", "hints": ["If we have a string <code>s</code> of length <code>x</code>, we can generate all strings of length <code>x + 1</code>.", "If <code>s</code> has 0 as the last character, we can only append 1, whereas if the last character is 1, we can append both 0 and 1.", "We can use recursion and backtracking to generate all such strings."], "exampleTestcases": "3\n1", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> validStrings(int n) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<String> validStrings(int n) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def validStrings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def validStrings(self, n: int) -> List[str]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** validStrings(int n, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> ValidStrings(int n) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar validStrings = function(n) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function validStrings(n: number): string[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function validStrings($n) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func validStrings(_ n: Int) -> [String] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun validStrings(n: Int): List<String> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<String> validStrings(int n) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func validStrings(n int) []string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String[]}\ndef valid_strings(n)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def validStrings(n: Int): List[String] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn valid_strings(n: i32) -> Vec<String> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (valid-strings n)\n  (-> exact-integer? (listof string?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec valid_strings(N :: integer()) -> [unicode:unicode_binary()].\nvalid_strings(N) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_strings(n :: integer) :: [String.t]\n  def valid_strings(n) do\n    \n  end\nend"}}}