{"questionId": "2093", "acRate": 52.91299856475514, "difficulty": "Easy", "freqBar": 16.332832182659157, "frontendQuestionId": "1961", "paidOnly": false, "status": "ac", "title": "Check If String Is a Prefix of Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Two Pointers", "id": "VG9waWNUYWdOb2RlOjk=", "slug": "two-pointers"}, {"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}], "titleSlug": "check-if-string-is-a-prefix-of-array", "content": "<p>Given a string <code>s</code> and an array of strings <code>words</code>, determine whether <code>s</code> is a <strong>prefix string</strong> of <code>words</code>.</p>\n\n<p>A string <code>s</code> is a <strong>prefix string</strong> of <code>words</code> if <code>s</code> can be made by concatenating the first <code>k</code> strings in <code>words</code> for some <strong>positive</strong> <code>k</code> no larger than <code>words.length</code>.</p>\n\n<p>Return <code>true</code><em> if </em><code>s</code><em> is a <strong>prefix string</strong> of </em><code>words</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;iloveleetcode&quot;, words = [&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;,&quot;apples&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\ns can be made by concatenating &quot;i&quot;, &quot;love&quot;, and &quot;leetcode&quot; together.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;iloveleetcode&quot;, words = [&quot;apples&quot;,&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nIt is impossible to make s using a prefix of arr.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> and <code>s</code> consist of only lowercase English letters.</li>\n</ul>\n", "hints": ["There are only words.length prefix strings.", "Create all of them and see if s is one of them."], "exampleTestcases": "\"iloveleetcode\"\n[\"i\",\"love\",\"leetcode\",\"apples\"]\n\"iloveleetcode\"\n[\"apples\",\"i\",\"love\",\"leetcode\"]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPrefixString(string s, vector<string>& words) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPrefixString(String s, String[] words) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPrefixString(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPrefixString(self, s: str, words: List[str]) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool isPrefixString(char* s, char** words, int wordsSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPrefixString(string s, string[] words) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {boolean}\n */\nvar isPrefixString = function(s, words) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPrefixString(s: string, words: string[]): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Boolean\n     */\n    function isPrefixString($s, $words) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPrefixString(_ s: String, _ words: [String]) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPrefixString(s: String, words: Array<String>): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool isPrefixString(String s, List<String> words) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func isPrefixString(s string, words []string) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} words\n# @return {Boolean}\ndef is_prefix_string(s, words)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPrefixString(s: String, words: Array[String]): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_prefix_string(s: String, words: Vec<String>) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (is-prefix-string s words)\n  (-> string? (listof string?) boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec is_prefix_string(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> boolean().\nis_prefix_string(S, Words) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_prefix_string(s :: String.t, words :: [String.t]) :: boolean\n  def is_prefix_string(s, words) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "count-prefixes-of-a-given-string", "title": "Count Prefixes of a Given String", "isPaidOnly": false}]}