{"questionId": "1983", "acRate": 61.41098484848485, "difficulty": "Easy", "freqBar": 67.73793697349771, "frontendQuestionId": "1854", "paidOnly": false, "status": "ac", "title": "Maximum Population Year", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Counting", "id": "VG9waWNUYWdOb2RlOjYxMDYy", "slug": "counting"}, {"name": "Prefix Sum", "id": "VG9waWNUYWdOb2RlOjYxMDY4", "slug": "prefix-sum"}], "titleSlug": "maximum-population-year", "content": "<p>You are given a 2D integer array <code>logs</code> where each <code>logs[i] = [birth<sub>i</sub>, death<sub>i</sub>]</code> indicates the birth and death years of the <code>i<sup>th</sup></code> person.</p>\n\n<p>The <strong>population</strong> of some year <code>x</code> is the number of people alive during that year. The <code>i<sup>th</sup></code> person is counted in year <code>x</code>&#39;s population if <code>x</code> is in the <strong>inclusive</strong> range <code>[birth<sub>i</sub>, death<sub>i</sub> - 1]</code>. Note that the person is <strong>not</strong> counted in the year that they die.</p>\n\n<p>Return <em>the <strong>earliest</strong> year with the <strong>maximum population</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [[1993,1999],[2000,2010]]\n<strong>Output:</strong> 1993\n<strong>Explanation:</strong> The maximum population is 1, and 1993 is the earliest year with this population.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [[1950,1961],[1960,1971],[1970,1981]]\n<strong>Output:</strong> 1960\n<strong>Explanation:</strong> \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>1950 &lt;= birth<sub>i</sub> &lt; death<sub>i</sub> &lt;= 2050</code></li>\n</ul>\n", "hints": ["For each year find the number of people whose birth_i \u2264 year and death_i > year.", "Find the maximum value between all years."], "exampleTestcases": "[[1993,1999],[2000,2010]]\n[[1950,1961],[1960,1971],[1970,1981]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumPopulation(int[][] logs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumPopulation(self, logs):\n        \"\"\"\n        :type logs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumPopulation(self, logs: List[List[int]]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maximumPopulation(int** logs, int logsSize, int* logsColSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumPopulation(int[][] logs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} logs\n * @return {number}\n */\nvar maximumPopulation = function(logs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumPopulation(logs: number[][]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $logs\n     * @return Integer\n     */\n    function maximumPopulation($logs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumPopulation(_ logs: [[Int]]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumPopulation(logs: Array<IntArray>): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maximumPopulation(List<List<int>> logs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumPopulation(logs [][]int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} logs\n# @return {Integer}\ndef maximum_population(logs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumPopulation(logs: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_population(logs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (maximum-population logs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec maximum_population(Logs :: [[integer()]]) -> integer().\nmaximum_population(Logs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_population(logs :: [[integer]]) :: integer\n  def maximum_population(logs) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "shifting-letters-ii", "title": "Shifting Letters II", "isPaidOnly": false}]}