{"questionId": "3434", "acRate": 41.36256695199479, "difficulty": "Medium", "freqBar": 36.288325888329645, "frontendQuestionId": "3160", "paidOnly": false, "status": "ac", "title": "Find the Number of Distinct Colors Among the Balls", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "find-the-number-of-distinct-colors-among-the-balls", "content": "<p>You are given an integer <code>limit</code> and a 2D array <code>queries</code> of size <code>n x 2</code>.</p>\n\n<p>There are <code>limit + 1</code> balls with <strong>distinct</strong> labels in the range <code>[0, limit]</code>. Initially, all balls are uncolored. For every query in <code>queries</code> that is of the form <code>[x, y]</code>, you mark ball <code>x</code> with the color <code>y</code>. After each query, you need to find the number of <strong>distinct</strong> colors among the balls.</p>\n\n<p>Return an array <code>result</code> of length <code>n</code>, where <code>result[i]</code> denotes the number of distinct colors <em>after</em> <code>i<sup>th</sup></code> query.</p>\n\n<p><strong>Note</strong> that when answering a query, lack of a color <em>will not</em> be considered as a color.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif\" style=\"width: 455px; height: 145px;\" /></p>\n\n<ul>\n\t<li>After query 0, ball 1 has color 4.</li>\n\t<li>After query 1, ball 1 has color 4, and ball 2 has color 5.</li>\n\t<li>After query 2, ball 1 has color 3, and ball 2 has color 5.</li>\n\t<li>After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,2,2,3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif\" style=\"width: 457px; height: 144px;\" /></strong></p>\n\n<ul>\n\t<li>After query 0, ball 0 has color 1.</li>\n\t<li>After query 1, ball 0 has color 1, and ball 1 has color 2.</li>\n\t<li>After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.</li>\n\t<li>After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.</li>\n\t<li>After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n == queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= limit</code></li>\n\t<li><code>1 &lt;= queries[i][1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "hints": ["Use two HashMaps to maintain the color of each ball and the set of balls with each color."], "exampleTestcases": "4\n[[1,4],[2,5],[1,3],[3,4]]\n4\n[[0,1],[1,2],[2,2],[3,4],[4,5]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> queryResults(int limit, vector<vector<int>>& queries) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] queryResults(int limit, int[][] queries) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def queryResults(self, limit, queries):\n        \"\"\"\n        :type limit: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* queryResults(int limit, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] QueryResults(int limit, int[][] queries) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} limit\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar queryResults = function(limit, queries) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function queryResults(limit: number, queries: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $limit\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function queryResults($limit, $queries) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func queryResults(_ limit: Int, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun queryResults(limit: Int, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> queryResults(int limit, List<List<int>> queries) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func queryResults(limit int, queries [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} limit\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef query_results(limit, queries)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def queryResults(limit: Int, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn query_results(limit: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (query-results limit queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec query_results(Limit :: integer(), Queries :: [[integer()]]) -> [integer()].\nquery_results(Limit, Queries) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec query_results(limit :: integer, queries :: [[integer]]) :: [integer]\n  def query_results(limit, queries) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "maximum-number-of-balls-in-a-box", "title": "Maximum Number of Balls in a Box", "isPaidOnly": false}]}