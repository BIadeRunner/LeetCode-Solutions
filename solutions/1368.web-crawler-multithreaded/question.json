{"question_id": "1368", "problem_slug": "web-crawler-multithreaded", "problem_title": "Web Crawler Multithreaded", "content": "Given a URL startUrl and an interface HtmlParser, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as startUrl.\nReturn all URLs obtained by your web crawler in any order.\nYour crawler should:\n\nStart from the page: startUrl\nCall HtmlParser.getUrls(url) to get all URLs from a webpage of a given URL.\nDo not crawl the same link twice.\nExplore only the links that are under the same hostname as startUrl.\n\n\nAs shown in the example URL above, the hostname is example.org. For simplicity's sake, you may assume all URLs use HTTP protocol without any port specified. For example, the URLs http://leetcode.com/problems and http://leetcode.com/contest are under the same hostname, while URLs http://example.org/test and http://example.com/abc are not under the same hostname.\nThe HtmlParser interface is defined as such:\n\ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.\n  // This is a blocking call, that means it will do HTTP request and return when this request is finished.\n  public List<String> getUrls(String url);\n}\n\nNote that getUrls(String url) simulates performing an HTTP request. You can treat it as a blocking function call that waits for an HTTP request to finish. It is guaranteed that getUrls(String url) will return the URLs within 15ms.  Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?\nBelow are two examples explaining the functionality of the problem. For custom testing purposes, you'll have three variables urls, edges and startUrl. Notice that you will only have access to startUrl in your code, while urls and edges are not directly accessible to you in code.\n \nExample 1:\n\n\nInput:\nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\",\n  \"http://news.yahoo.com/us\"\n]\nedges = [[2,0],[2,1],[3,2],[3,1],[0,4]]\nstartUrl = \"http://news.yahoo.com/news/topics/\"\nOutput: [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.yahoo.com/us\"\n]\n\nExample 2:\n\n\nInput: \nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\"\n]\nedges = [[0,2],[2,1],[3,2],[3,1],[3,0]]\nstartUrl = \"http://news.google.com\"\nOutput: [\"http://news.google.com\"]\nExplanation: The startUrl links to all other pages that do not share the same hostname.\n \nConstraints:\n\n1 <= urls.length <= 1000\n1 <= urls[i].length <= 300\nstartUrl is one of the urls.\nHostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').\nThe hostname may not start or end with the hyphen-minus character ('-'). \nSee:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames\nYou may assume there're no duplicates in the URL library.\n\n \nFollow up:\n\nAssume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change?\nWhat if one node fails or does not work?\nHow do you know when the crawler is done?\n\n", "hints": [], "exampleTestcases": "[\"http://news.yahoo.com\",\"http://news.yahoo.com/news\",\"http://news.yahoo.com/news/topics/\",\"http://news.google.com\",\"http://news.yahoo.com/us\"]\n[[2,0],[2,1],[3,2],[3,1],[0,4]]\n\"http://news.yahoo.com/news/topics/\"\n[\"http://news.yahoo.com\",\"http://news.yahoo.com/news\",\"http://news.yahoo.com/news/topics/\",\"http://news.google.com\"]\n[[0,2],[2,1],[3,2],[3,1],[3,0]]\n\"http://news.google.com\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *   public:\n *     vector<string> getUrls(string url);\n * };\n */\nclass Solution {\npublic:\n    vector<string> crawl(string startUrl, HtmlParser htmlParser) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface HtmlParser {\n *     public List<String> getUrls(String url) {}\n * }\n */\nclass Solution {\n    public List<String> crawl(String startUrl, HtmlParser htmlParser) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "# \"\"\"\n# This is HtmlParser's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class HtmlParser(object):\n#    def getUrls(self, url):\n#        \"\"\"\n#        :type url: str\n#        :rtype List[str]\n#        \"\"\"\n\nclass Solution(object):\n    def crawl(self, startUrl, htmlParser):\n        \"\"\"\n        :type startUrl: str\n        :type htmlParser: HtmlParser\n        :rtype: List[str]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "# \"\"\"\n# This is HtmlParser's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class HtmlParser(object):\n#    def getUrls(self, url):\n#        \"\"\"\n#        :type url: str\n#        :rtype List[str]\n#        \"\"\"\n\nclass Solution:\n    def crawl(self, startUrl: str, htmlParser: 'HtmlParser') -> List[str]:\n        "}, "C#": {"langSlug": "csharp", "code": "/**\n * // This is the HtmlParser's API interface.\n * // You should not implement it, or speculate about its implementation\n * class HtmlParser {\n *     public List<String> GetUrls(String url) {}\n * }\n */\nclass Solution {\n    public IList<string> Crawl(string startUrl, HtmlParser htmlParser) {\n        \n    }\n}"}}}