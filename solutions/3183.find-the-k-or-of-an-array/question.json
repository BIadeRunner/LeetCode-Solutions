{"question_id": "3183", "problem_slug": "find-the-k-or-of-an-array", "problem_title": "Find the K-or of an Array", "content": "You are given an integer array nums, and an integer k. Let's introduce K-or operation by extending the standard bitwise OR. In K-or, a bit position in the result is set to 1 if at least k numbers in nums have a 1 in that position.\nReturn the K-or of nums.\n \nExample 1: \n\nInput: nums = [7,12,9,8,9,15], k = 4 \nOutput: 9 \nExplanation: \nRepresent numbers in binary:\n\n\n\nNumber\nBit 3\nBit 2\nBit 1\nBit 0\n\n\n7\n0\n1\n1\n1\n\n\n12\n1\n1\n0\n0\n\n\n9\n1\n0\n0\n1\n\n\n8\n1\n0\n0\n0\n\n\n9\n1\n0\n0\n1\n\n\n15\n1\n1\n1\n1\n\n\nResult = 9\n1\n0\n0\n1\n\n\n\nBit 0 is set in 7, 9, 9, and 15. Bit 3 is set in 12, 9, 8, 9, and 15.\nOnly bits 0 and 3 qualify. The result is (1001)2 = 9.\n\nExample 2: \n\nInput: nums = [2,12,1,11,4,5], k = 6 \nOutput: 0 \nExplanation: No bit appears as 1 in all six array numbers, as required for K-or with k = 6. Thus, the result is 0.\n\nExample 3: \n\nInput: nums = [10,8,5,9,11,6,8], k = 1 \nOutput: 15 \nExplanation:  Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n0 <= nums[i] < 231\n1 <= k <= nums.length\n\n", "hints": ["Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.", "<code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation."], "exampleTestcases": "[7,12,9,8,9,15]\n4", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findKOr(vector<int>& nums, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int findKOr(int[] nums, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findKOr(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int findKOr(int* nums, int numsSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int FindKOr(int[] nums, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKOr = function(nums, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findKOr(nums: number[], k: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKOr($nums, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findKOr(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findKOr(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int findKOr(List<int> nums, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findKOr(nums []int, k int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_k_or(nums, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findKOr(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_k_or(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-k-or nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_k_or(Nums :: [integer()], K :: integer()) -> integer().\nfind_k_or(Nums, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_k_or(nums :: [integer], k :: integer) :: integer\n  def find_k_or(nums, k) do\n    \n  end\nend"}}}