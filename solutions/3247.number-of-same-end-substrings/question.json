{"question_id": "3247", "problem_slug": "number-of-same-end-substrings", "problem_title": "Number of Same-End Substrings", "content": "You are given a 0-indexed string s, and a 2D array of integers queries, where queries[i] = [li, ri] indicates a substring of s starting from the index li and ending at the index ri (both inclusive), i.e. s[li..ri].\nReturn an array ans where ans[i] is the number of same-end substrings of queries[i].\nA 0-indexed string t of length n is called same-end if it has the same character at both of its ends, i.e., t[0] == t[n - 1].\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"abcaab\", queries = [[0,0],[1,4],[2,5],[0,5]]\nOutput: [1,5,5,10]\nExplanation: Here is the same-end substrings of each query:\n1st query: s[0..0] is \"a\" which has 1 same-end substring: \"a\".\n2nd query: s[1..4] is \"bcaa\" which has 5 same-end substrings: \"bcaa\", \"bcaa\", \"bcaa\", \"bcaa\", \"bcaa\".\n3rd query: s[2..5] is \"caab\" which has 5 same-end substrings: \"caab\", \"caab\", \"caab\", \"caab\", \"caab\".\n4th query: s[0..5] is \"abcaab\" which has 10 same-end substrings: \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\", \"abcaab\".\n\nExample 2:\n\nInput: s = \"abcd\", queries = [[0,3]]\nOutput: [4]\nExplanation: The only query is s[0..3] which is \"abcd\". It has 4 same-end substrings: \"abcd\", \"abcd\", \"abcd\", \"abcd\".\n\n \nConstraints:\n\n2 <= s.length <= 3 * 104\ns consists only of lowercase English letters.\n1 <= queries.length <= 3 * 104\nqueries[i] = [li, ri]\n0 <= li <= ri < s.length\n\n", "hints": ["If there are <code>t</code> occurrences of a character in a substring, there exists <code>t * (t - 1) / 2</code> Same-End substrings with that character.", "Try to calculate the number of occurrences of a character in a substring in <code>O(1)</code> using partial sum."], "exampleTestcases": "\"abcaab\"\n[[0,0],[1,4],[2,5],[0,5]]\n\"abcd\"\n[[0,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sameEndSubstringCount(string s, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] sameEndSubstringCount(String s, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def sameEndSubstringCount(self, s, queries):\n        \"\"\"\n        :type s: str\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def sameEndSubstringCount(self, s: str, queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sameEndSubstringCount(char* s, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] SameEndSubstringCount(string s, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar sameEndSubstringCount = function(s, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function sameEndSubstringCount(s: string, queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function sameEndSubstringCount($s, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func sameEndSubstringCount(_ s: String, _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun sameEndSubstringCount(s: String, queries: Array<IntArray>): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> sameEndSubstringCount(String s, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func sameEndSubstringCount(s string, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef same_end_substring_count(s, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def sameEndSubstringCount(s: String, queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn same_end_substring_count(s: String, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (same-end-substring-count s queries)\n  (-> string? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec same_end_substring_count(S :: unicode:unicode_binary(), Queries :: [[integer()]]) -> [integer()].\nsame_end_substring_count(S, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec same_end_substring_count(s :: String.t, queries :: [[integer]]) :: [integer]\n  def same_end_substring_count(s, queries) do\n    \n  end\nend"}}}