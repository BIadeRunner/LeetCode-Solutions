{"question_id": "2535", "problem_slug": "count-strictly-increasing-subarrays", "problem_title": "Count Strictly Increasing Subarrays", "content": "You are given an array nums consisting of positive integers.\nReturn the number of subarrays of nums that are in strictly increasing order.\nA subarray is a contiguous part of an array.\n \nExample 1:\n\nInput: nums = [1,3,5,4,4,6]\nOutput: 10\nExplanation: The strictly increasing subarrays are the following:\n- Subarrays of length 1: [1], [3], [5], [4], [4], [6].\n- Subarrays of length 2: [1,3], [3,5], [4,6].\n- Subarrays of length 3: [1,3,5].\nThe total number of subarrays is 6 + 3 + 1 = 10.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: Every subarray is strictly increasing. There are 15 possible subarrays that we can take.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 106\n\n", "hints": ["Find the number of strictly increasing subarrays that end at a specific index. Can you calculate that for each index from 0 to n - 1?", "The answer will be the sum of the number of subarrays that end at each index."], "exampleTestcases": "[1,3,5,4,4,6]\n[1,2,3,4,5]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countSubarrays(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countSubarrays(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countSubarrays(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountSubarrays(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countSubarrays = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countSubarrays(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countSubarrays($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countSubarrays(nums: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countSubarrays(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countSubarrays(nums []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_subarrays(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_subarrays(Nums :: [integer()]) -> integer().\ncount_subarrays(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer]) :: integer\n  def count_subarrays(nums) do\n    \n  end\nend"}}}