{"questionId": "2456", "acRate": 76.34187672103367, "difficulty": "Medium", "freqBar": 64.59608489632885, "frontendQuestionId": "2375", "paidOnly": false, "status": "ac", "title": "Construct Smallest Number From DI String", "topicTags": [{"name": "String", "id": "VG9waWNUYWdOb2RlOjEw", "slug": "string"}, {"name": "Backtracking", "id": "VG9waWNUYWdOb2RlOjE0", "slug": "backtracking"}, {"name": "Stack", "id": "VG9waWNUYWdOb2RlOjE1", "slug": "stack"}, {"name": "Greedy", "id": "VG9waWNUYWdOb2RlOjE3", "slug": "greedy"}], "titleSlug": "construct-smallest-number-from-di-string", "content": "<p>You are given a <strong>0-indexed</strong> string <code>pattern</code> of length <code>n</code> consisting of the characters <code>&#39;I&#39;</code> meaning <strong>increasing</strong> and <code>&#39;D&#39;</code> meaning <strong>decreasing</strong>.</p>\n\n<p>A <strong>0-indexed</strong> string <code>num</code> of length <code>n + 1</code> is created using the following conditions:</p>\n\n<ul>\n\t<li><code>num</code> consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>, where each digit is used <strong>at most</strong> once.</li>\n\t<li>If <code>pattern[i] == &#39;I&#39;</code>, then <code>num[i] &lt; num[i + 1]</code>.</li>\n\t<li>If <code>pattern[i] == &#39;D&#39;</code>, then <code>num[i] &gt; num[i + 1]</code>.</li>\n</ul>\n\n<p>Return <em>the lexicographically <strong>smallest</strong> possible string </em><code>num</code><em> that meets the conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;IIIDIDDD&quot;\n<strong>Output:</strong> &quot;123549876&quot;\n<strong>Explanation:\n</strong>At indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].\nSome possible values of num are &quot;245639871&quot;, &quot;135749862&quot;, and &quot;123849765&quot;.\nIt can be proven that &quot;123549876&quot; is the smallest possible num that meets the conditions.\nNote that &quot;123414321&quot; is not possible because the digit &#39;1&#39; is used more than once.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;DDD&quot;\n<strong>Output:</strong> &quot;4321&quot;\n<strong>Explanation:</strong>\nSome possible values of num are &quot;9876&quot;, &quot;7321&quot;, and &quot;8742&quot;.\nIt can be proven that &quot;4321&quot; is the smallest possible num that meets the conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 8</code></li>\n\t<li><code>pattern</code> consists of only the letters <code>&#39;I&#39;</code> and <code>&#39;D&#39;</code>.</li>\n</ul>\n", "hints": ["With the constraints, could we generate every possible string?", "Yes we can. Now we just need to check if the string meets all the conditions."], "exampleTestcases": "\"IIIDIDDD\"\n\"DDD\"", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestNumber(string pattern) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String smallestNumber(String pattern) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestNumber(self, pattern):\n        \"\"\"\n        :type pattern: str\n        :rtype: str\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        "}, {"lang": "C", "langSlug": "c", "code": "char* smallestNumber(char* pattern) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string SmallestNumber(string pattern) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} pattern\n * @return {string}\n */\nvar smallestNumber = function(pattern) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestNumber(pattern: string): string {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $pattern\n     * @return String\n     */\n    function smallestNumber($pattern) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestNumber(_ pattern: String) -> String {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestNumber(pattern: String): String {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  String smallestNumber(String pattern) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestNumber(pattern string) string {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} pattern\n# @return {String}\ndef smallest_number(pattern)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestNumber(pattern: String): String = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_number(pattern: String) -> String {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (smallest-number pattern)\n  (-> string? string?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec smallest_number(Pattern :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_number(Pattern) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_number(pattern :: String.t) :: String.t\n  def smallest_number(pattern) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "di-string-match", "title": "DI String Match", "isPaidOnly": false}]}