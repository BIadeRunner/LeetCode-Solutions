{"questionId": "1164", "acRate": 52.022761788007976, "difficulty": "Easy", "freqBar": 0.0, "frontendQuestionId": "1228", "paidOnly": true, "status": "ac", "title": "Missing Number In Arithmetic Progression", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "missing-number-in-arithmetic-progression", "content": "<p>In some array <code>arr</code>, the values were in arithmetic progression: the values <code>arr[i + 1] - arr[i]</code> are all equal for every <code>0 &lt;= i &lt; arr.length - 1</code>.</p>\n\n<p>A value from <code>arr</code> was removed that <strong>was not the first or last value in the array</strong>.</p>\n\n<p>Given <code>arr</code>, return <em>the removed value</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,7,11,13]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The previous array was [5,7,<strong>9</strong>,11,13].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [15,13,12]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> The previous array was [15,<strong>14</strong>,13,12].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The given array is <strong>guaranteed</strong> to be a valid array.</li>\n</ul>\n", "hints": ["Assume the sequence is increasing, what if we find the largest consecutive difference?", "Is the missing element in the middle of the segment with the largest consecutive difference?", "For decreasing sequences, just reverse the array and do a similar process."], "exampleTestcases": "[5,7,11,13]\n[15,13,12]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int missingNumber(vector<int>& arr) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int missingNumber(int[] arr) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def missingNumber(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def missingNumber(self, arr: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int missingNumber(int* arr, int arrSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MissingNumber(int[] arr) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar missingNumber = function(arr) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function missingNumber(arr: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function missingNumber($arr) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func missingNumber(_ arr: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun missingNumber(arr: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int missingNumber(List<int> arr) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func missingNumber(arr []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef missing_number(arr)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def missingNumber(arr: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn missing_number(arr: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (missing-number arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec missing_number(Arr :: [integer()]) -> integer().\nmissing_number(Arr) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec missing_number(arr :: [integer]) :: integer\n  def missing_number(arr) do\n    \n  end\nend"}], "similarQuestionList": []}