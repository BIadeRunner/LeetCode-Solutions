{"questionId": "2814", "acRate": 72.8171334431631, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2757", "paidOnly": true, "status": "ac", "title": "Generate Circular Array Values", "topicTags": [], "titleSlug": "generate-circular-array-values", "content": "<p>Given a <strong>circular</strong> array <code>arr</code> and an integer&nbsp;<code>startIndex</code>, return a generator object&nbsp;<code>gen</code> that yields values from <code>arr</code>.</p>\n\n<p>The first time <code>gen.next()</code> is called on the generator, it should should yield&nbsp;<code>arr[startIndex]</code>.</p>\n\n<p>Each subsequent time&nbsp;<code>gen.next()</code>&nbsp;is called, an integer <code>jump</code>&nbsp;will be passed into the function (Ex: <code>gen.next(-3)</code>).</p>\n\n<ul>\n\t<li>If&nbsp;<code>jump</code>&nbsp;is positive, the index should increase by that value, however if the current index is the last index, it should instead jump to the first index.</li>\n\t<li>If&nbsp;<code>jump</code>&nbsp;is negative, the index should decrease&nbsp;by the magnitude of that value, however if the current index is the first index, it should instead jump to the last&nbsp;index.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4,5], steps = [1,2,6], startIndex = 0\n<strong>Output:</strong> [1,2,4,5]\n<strong>Explanation:</strong> &nbsp;\n&nbsp;const gen = cycleGenerator(arr, startIndex);\n&nbsp;gen.next().value; &nbsp;// 1, index = startIndex = 0\n&nbsp;gen.next(1).value; // 2, index = 1, 0 -&gt; 1\n&nbsp;gen.next(2).value; // 4, index = 3, 1 -&gt; 2 -&gt; 3\n&nbsp;gen.next(6).value; // 5, index = 4, 3 -&gt; 4 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [10,11,12,13,14,15], steps = [1,4,0,-1,-3], startIndex = 1\n<strong>Output:</strong> [11,12,10,10,15,12]\n<strong>Explanation:</strong> \n&nbsp;const gen = cycleGenerator(arr, startIndex);\n&nbsp;gen.next().value; &nbsp; // 11, index = 1\n&nbsp;gen.next(1).value;  // 12, index = 2\n&nbsp;gen.next(4).value;  // 10, index = 0\n&nbsp;gen.next(0).value;  // 10, index = 0\n&nbsp;gen.next(-1).value; // 15, index = 5\n&nbsp;gen.next(-3).value; // 12, index = 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,4,6,7,8,10], steps = [-4,5,-3,10], startIndex = 3\n<strong>Output:</strong> [7,10,8,4,10]\n<strong>Explanation:</strong> &nbsp;\n&nbsp;const gen = cycleGenerator(arr, startIndex);\n&nbsp;gen.next().value &nbsp; // 7,  index = 3\n&nbsp;gen.next(-4).value // 10, index = 5\n&nbsp;gen.next(5).value  // 8,  index = 4\n&nbsp;gen.next(-3).value // 4,  index = 1 &nbsp;\n&nbsp;gen.next(10).value // 10, index = 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= steps.length &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup>&nbsp;&lt;= steps[i],&nbsp;arr[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= startIndex &lt;&nbsp;arr.length</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "[1,2,3,4,5]\n[1,2,6]\n0\n[10,11,12,13,14,15]\n[1,4,0,-1,-3]\n1\n[2,4,6,7,8,10]\n[-4,5,-3,10]\n3", "codeSnippets": [{"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {Array<number>} arr\n * @param {number} startIndex\n * @yields {number}\n */\nvar cycleGenerator = function* (arr, startIndex) {\n    \n};\n\n/**\n *  const gen = cycleGenerator([1,2,3,4,5], 0);\n *  gen.next().value  // 1\n *  gen.next(1).value // 2\n *  gen.next(2).value // 4\n *  gen.next(6).value // 5\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function* cycleGenerator(arr: number[], startIndex: number): Generator<number, void, number> {\n    \n};\n\n/**\n *  const gen = cycleGenerator([1,2,3,4,5], 0);\n *  gen.next().value  // 1\n *  gen.next(1).value // 2\n *  gen.next(2).value // 4\n *  gen.next(6).value // 5\n */"}], "similarQuestionList": []}