{"question_id": "2617", "problem_slug": "time-taken-to-cross-the-door", "problem_title": "Time Taken to Cross the Door", "content": "There are n persons numbered from 0 to n - 1 and a door. Each person can enter or exit through the door once, taking one second.\nYou are given a non-decreasing integer array arrival of size n, where arrival[i] is the arrival time of the ith person at the door. You are also given an array state of size n, where state[i] is 0 if person i wants to enter through the door or 1 if they want to exit through the door.\nIf two or more persons want to use the door at the same time, they follow the following rules:\n\nIf the door was not used in the previous second, then the person who wants to exit goes first.\nIf the door was used in the previous second for entering, the person who wants to enter goes first.\nIf the door was used in the previous second for exiting, the person who wants to exit goes first.\nIf multiple persons want to go in the same direction, the person with the smallest index goes first.\n\nReturn an array answer of size n where answer[i] is the second at which the ith person crosses the door.\nNote that:\n\nOnly one person can cross the door at each second.\nA person may arrive at the door and wait without entering or exiting to follow the mentioned rules.\n\n \nExample 1:\n\nInput: arrival = [0,1,1,2,4], state = [0,1,0,0,1]\nOutput: [0,3,1,2,4]\nExplanation: At each second we have the following:\n- At t = 0: Person 0 is the only one who wants to enter, so they just enter through the door.\n- At t = 1: Person 1 wants to exit, and person 2 wants to enter. Since the door was used the previous second for entering, person 2 enters.\n- At t = 2: Person 1 still wants to exit, and person 3 wants to enter. Since the door was used the previous second for entering, person 3 enters.\n- At t = 3: Person 1 is the only one who wants to exit, so they just exit through the door.\n- At t = 4: Person 4 is the only one who wants to exit, so they just exit through the door.\n\nExample 2:\n\nInput: arrival = [0,0,0], state = [1,0,1]\nOutput: [0,2,1]\nExplanation: At each second we have the following:\n- At t = 0: Person 1 wants to enter while persons 0 and 2 want to exit. Since the door was not used in the previous second, the persons who want to exit get to go first. Since person 0 has a smaller index, they exit first.\n- At t = 1: Person 1 wants to enter, and person 2 wants to exit. Since the door was used in the previous second for exiting, person 2 exits.\n- At t = 2: Person 1 is the only one who wants to enter, so they just enter through the door.\n\n \nConstraints:\n\nn == arrival.length == state.length\n1 <= n <= 105\n0 <= arrival[i] <= n\narrival is sorted in non-decreasing order.\nstate[i] is either 0 or 1.\n\n", "hints": ["Use a queue to store the people who want to enter or exit and their corresponding times.", "Simulate the process described in the statement and apply the 4 rules to the people crossing the door."], "exampleTestcases": "[0,1,1,2,4]\n[0,1,0,0,1]\n[0,0,0]\n[1,0,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> timeTaken(vector<int>& arrival, vector<int>& state) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] timeTaken(int[] arrival, int[] state) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def timeTaken(self, arrival, state):\n        \"\"\"\n        :type arrival: List[int]\n        :type state: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def timeTaken(self, arrival: List[int], state: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* timeTaken(int* arrival, int arrivalSize, int* state, int stateSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] TimeTaken(int[] arrival, int[] state) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} arrival\n * @param {number[]} state\n * @return {number[]}\n */\nvar timeTaken = function(arrival, state) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function timeTaken(arrival: number[], state: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arrival\n     * @param Integer[] $state\n     * @return Integer[]\n     */\n    function timeTaken($arrival, $state) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func timeTaken(_ arrival: [Int], _ state: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun timeTaken(arrival: IntArray, state: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> timeTaken(List<int> arrival, List<int> state) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func timeTaken(arrival []int, state []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} arrival\n# @param {Integer[]} state\n# @return {Integer[]}\ndef time_taken(arrival, state)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def timeTaken(arrival: Array[Int], state: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn time_taken(arrival: Vec<i32>, state: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (time-taken arrival state)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec time_taken(Arrival :: [integer()], State :: [integer()]) -> [integer()].\ntime_taken(Arrival, State) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec time_taken(arrival :: [integer], state :: [integer]) :: [integer]\n  def time_taken(arrival, state) do\n    \n  end\nend"}}}