{"question_id": "1134", "problem_slug": "shortest-distance-to-target-color", "problem_title": "Shortest Distance to Target Color", "content": "You are given an array colors, in which there are three colors: 1, 2 and 3.\nYou are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. If there is no solution return -1.\n \nExample 1:\n\nInput: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\nOutput: [3,0,3]\nExplanation: \nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n\nExample 2:\n\nInput: colors = [1,2], queries = [[0,3]]\nOutput: [-1]\nExplanation: There is no 3 in the array.\n\n \nConstraints:\n\n1 <= colors.length <= 5*10^4\n1 <= colors[i] <= 3\n1 <= queries.length <= 5*10^4\nqueries[i].length == 2\n0 <= queries[i][0] < colors.length\n1 <= queries[i][1] <= 3\n\n", "hints": ["Greedy solution is too slow because of the limits.", "Can you solve this problem offline by doing some pre-processing?", "Calculate the answers for all indexes moving to their left and to their right."], "exampleTestcases": "[1,1,2,1,3,2,2,3,3]\n[[1,3],[2,2],[6,1]]\n[1,2]\n[[0,3]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> shortestDistanceColor(vector<int>& colors, vector<vector<int>>& queries) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def shortestDistanceColor(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestDistanceColor(int* colors, int colorsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> ShortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} colors\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar shortestDistanceColor = function(colors, queries) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function shortestDistanceColor(colors: number[], queries: number[][]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function shortestDistanceColor($colors, $queries) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func shortestDistanceColor(_ colors: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun shortestDistanceColor(colors: IntArray, queries: Array<IntArray>): List<Int> {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> shortestDistanceColor(List<int> colors, List<List<int>> queries) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func shortestDistanceColor(colors []int, queries [][]int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} colors\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef shortest_distance_color(colors, queries)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def shortestDistanceColor(colors: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_distance_color(colors: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (shortest-distance-color colors queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec shortest_distance_color(Colors :: [integer()], Queries :: [[integer()]]) -> [integer()].\nshortest_distance_color(Colors, Queries) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec shortest_distance_color(colors :: [integer], queries :: [[integer]]) :: [integer]\n  def shortest_distance_color(colors, queries) do\n    \n  end\nend"}}}