{"question_id": "3529", "problem_slug": "maximum-array-hopping-score-ii", "problem_title": "Maximum Array Hopping Score II", "content": "Given an array nums, you have to get the maximum score starting from index 0 and hopping until you reach the last element of the array.\nIn each hop, you can jump from index i to an index j > i, and you get a score of (j - i) * nums[j].\nReturn the maximum score you can get.\n \nExample 1:\n\nInput: nums = [1,5,8]\nOutput: 16\nExplanation:\nThere are two possible ways to reach the last element:\n\n0 -> 1 -> 2 with a score of (1 - 0) * 5 + (2 - 1) * 8 = 13.\n0 -> 2 with a score of (2 - 0) * 8 = 16.\n\n\nExample 2:\n\nInput: nums = [4,5,2,8,9,1,3]\nOutput: 42\nExplanation:\nWe can do the hopping 0 -> 4 -> 6 with a score of (4 - 0) * 9 + (6 - 4) * 3 = 42.\n\n \nConstraints:\n\n2 <= nums.length <= 105\n1 <= nums[i] <= 105\n\n", "hints": ["It’s always optimal to jump to index <code>j</code> with the maximum value.", "Keep an array <code>suffixMax</code> and store the maximum of each suffix of the array along with its index."], "exampleTestcases": "[1,5,8]\n[4,5,2,8,9,1,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxScore(vector<int>& nums) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maxScore(int[] nums) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxScore(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxScore(self, nums: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maxScore(int* nums, int numsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaxScore(int[] nums) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxScore = function(nums) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxScore(nums: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxScore($nums) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxScore(_ nums: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxScore(nums: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxScore(List<int> nums) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxScore(nums []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_score(nums)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxScore(nums: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_score(nums: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-score nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_score(Nums :: [integer()]) -> integer().\nmax_score(Nums) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_score(nums :: [integer]) :: integer\n  def max_score(nums) do\n    \n  end\nend"}}}