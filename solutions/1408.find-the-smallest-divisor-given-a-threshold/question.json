{"question_id": "1408", "problem_slug": "find-the-smallest-divisor-given-a-threshold", "problem_title": "Find the Smallest Divisor Given a Threshold", "content": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\nThe test cases are generated so that there will be an answer.\n \nExample 1:\n\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n\nExample 2:\n\nInput: nums = [44,22,33,11,1], threshold = 5\nOutput: 44\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n1 <= nums[i] <= 106\nnums.length <= threshold <= 106\n\n", "hints": ["Examine every possible number for solution. Choose the largest of them.", "Use binary search to reduce the time complexity."], "exampleTestcases": "[1,2,5,9]\n6\n[44,22,33,11,1]\n5", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestDivisor(vector<int>& nums, int threshold) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int smallestDivisor(int[] nums, int threshold) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def smallestDivisor(self, nums, threshold):\n        \"\"\"\n        :type nums: List[int]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def smallestDivisor(self, nums: List[int], threshold: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int smallestDivisor(int* nums, int numsSize, int threshold) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int SmallestDivisor(int[] nums, int threshold) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} threshold\n * @return {number}\n */\nvar smallestDivisor = function(nums, threshold) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function smallestDivisor(nums: number[], threshold: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function smallestDivisor($nums, $threshold) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func smallestDivisor(_ nums: [Int], _ threshold: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun smallestDivisor(nums: IntArray, threshold: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int smallestDivisor(List<int> nums, int threshold) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func smallestDivisor(nums []int, threshold int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} threshold\n# @return {Integer}\ndef smallest_divisor(nums, threshold)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def smallestDivisor(nums: Array[Int], threshold: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_divisor(nums: Vec<i32>, threshold: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (smallest-divisor nums threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec smallest_divisor(Nums :: [integer()], Threshold :: integer()) -> integer().\nsmallest_divisor(Nums, Threshold) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec smallest_divisor(nums :: [integer], threshold :: integer) :: integer\n  def smallest_divisor(nums, threshold) do\n    \n  end\nend"}}}