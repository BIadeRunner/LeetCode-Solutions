{"question_id": "562", "problem_slug": "longest-line-of-consecutive-one-in-matrix", "problem_title": "Longest Line of Consecutive One in Matrix", "content": "Given an m x n binary matrix mat, return the length of the longest line of consecutive one in the matrix.\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n \nExample 1:\n\n\nInput: mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]\nOutput: 3\n\nExample 2:\n\n\nInput: mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]\nOutput: 4\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 104\n1 <= m * n <= 104\nmat[i][j] is either 0 or 1.\n\n", "hints": ["One solution is to count ones in each direction separately and find the longest line. Don't you think  it will take too much lines of code?", "Is it possible to use some extra space to make the solution simple?", "Can we use dynamic programming to make use of intermediate results?", "Think of a 3D array which can be used to store the longest line obtained so far for each direction."], "exampleTestcases": "[[0,1,1,0],[0,1,1,0],[0,0,0,1]]\n[[1,1,1,1],[0,1,1,0],[0,0,0,1]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestLine(vector<vector<int>>& mat) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int longestLine(int[][] mat) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def longestLine(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int longestLine(int** mat, int matSize, int* matColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestLine(int[][] mat) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar longestLine = function(mat) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function longestLine(mat: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function longestLine($mat) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func longestLine(_ mat: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun longestLine(mat: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int longestLine(List<List<int>> mat) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func longestLine(mat [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} mat\n# @return {Integer}\ndef longest_line(mat)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def longestLine(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_line(mat: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (longest-line mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec longest_line(Mat :: [[integer()]]) -> integer().\nlongest_line(Mat) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_line(mat :: [[integer]]) :: integer\n  def longest_line(mat) do\n    \n  end\nend"}}}