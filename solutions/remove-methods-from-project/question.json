{"questionId": "3561", "acRate": 51.00945890968267, "difficulty": "Medium", "freqBar": 22.15851736188741, "frontendQuestionId": "3310", "paidOnly": false, "status": "ac", "title": "Remove Methods From Project", "topicTags": [{"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}], "titleSlug": "remove-methods-from-project", "content": "<p>You are maintaining a project that has <code>n</code> methods numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given two integers <code>n</code> and <code>k</code>, and a 2D integer array <code>invocations</code>, where <code>invocations[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that method <code>a<sub>i</sub></code> invokes method <code>b<sub>i</sub></code>.</p>\n\n<p>There is a known bug in method <code>k</code>. Method <code>k</code>, along with any method invoked by it, either <strong>directly</strong> or <strong>indirectly</strong>, are considered <strong>suspicious</strong> and we aim to remove them.</p>\n\n<p>A group of methods can only be removed if no method <strong>outside</strong> the group invokes any methods <strong>within</strong> it.</p>\n\n<p>Return an array containing all the remaining methods after removing all the <strong>suspicious</strong> methods. You may return the answer in <em>any order</em>. If it is not possible to remove <strong>all</strong> the suspicious methods, <strong>none</strong> should be removed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, k = 1, invocations = [[1,2],[0,1],[3,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/18/graph-2.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<p>Method 2 and method 1 are suspicious, but they are directly invoked by methods 3 and 0, which are not suspicious. We return all elements without removing anything.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 0, invocations = [[1,2],[0,2],[0,1],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/18/graph-3.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<p>Methods 0, 1, and 2 are suspicious and they are not directly invoked by any other method. We can remove them.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 2, invocations = [[1,2],[0,1],[2,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/20/graph.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<p>All methods are suspicious. We can remove them.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= invocations.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>invocations[i] == [a<sub>i</sub>, b<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>invocations[i] != invocations[j]</code></li>\n</ul>\n", "hints": ["Use DFS from node <code>k</code>.", "Mark all the nodes visited from node <code>k</code>, and then check if they can be visited from the other nodes."], "exampleTestcases": "4\n1\n[[1,2],[0,1],[3,2]]\n5\n0\n[[1,2],[0,2],[0,1],[3,4]]\n3\n2\n[[1,2],[0,1],[2,0]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> remainingMethods(int n, int k, vector<vector<int>>& invocations) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> remainingMethods(int n, int k, int[][] invocations) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def remainingMethods(self, n, k, invocations):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type invocations: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def remainingMethods(self, n: int, k: int, invocations: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* remainingMethods(int n, int k, int** invocations, int invocationsSize, int* invocationsColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> RemainingMethods(int n, int k, int[][] invocations) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number[][]} invocations\n * @return {number[]}\n */\nvar remainingMethods = function(n, k, invocations) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function remainingMethods(n: number, k: number, invocations: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer[][] $invocations\n     * @return Integer[]\n     */\n    function remainingMethods($n, $k, $invocations) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func remainingMethods(_ n: Int, _ k: Int, _ invocations: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun remainingMethods(n: Int, k: Int, invocations: Array<IntArray>): List<Int> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> remainingMethods(int n, int k, List<List<int>> invocations) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func remainingMethods(n int, k int, invocations [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer[][]} invocations\n# @return {Integer[]}\ndef remaining_methods(n, k, invocations)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def remainingMethods(n: Int, k: Int, invocations: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remaining_methods(n: i32, k: i32, invocations: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (remaining-methods n k invocations)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec remaining_methods(N :: integer(), K :: integer(), Invocations :: [[integer()]]) -> [integer()].\nremaining_methods(N, K, Invocations) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec remaining_methods(n :: integer, k :: integer, invocations :: [[integer]]) :: [integer]\n  def remaining_methods(n, k, invocations) do\n    \n  end\nend"}], "similarQuestionList": []}