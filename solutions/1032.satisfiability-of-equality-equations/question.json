{"question_id": "1032", "problem_slug": "satisfiability-of-equality-equations", "problem_title": "Satisfiability of Equality Equations", "content": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n \nExample 1:\n\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n\nExample 2:\n\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n\n \nConstraints:\n\n1 <= equations.length <= 500\nequations[i].length == 4\nequations[i][0] is a lowercase letter.\nequations[i][1] is either '=' or '!'.\nequations[i][2] is '='.\nequations[i][3] is a lowercase letter.\n\n", "hints": [], "exampleTestcases": "[\"a==b\",\"b!=a\"]\n[\"b==a\",\"a==b\"]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool equationsPossible(vector<string>& equations) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public boolean equationsPossible(String[] equations) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def equationsPossible(self, equations):\n        \"\"\"\n        :type equations: List[str]\n        :rtype: bool\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n        "}, "C": {"langSlug": "c", "code": "bool equationsPossible(char** equations, int equationsSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public bool EquationsPossible(string[] equations) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} equations\n * @return {boolean}\n */\nvar equationsPossible = function(equations) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function equationsPossible(equations: string[]): boolean {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $equations\n     * @return Boolean\n     */\n    function equationsPossible($equations) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func equationsPossible(_ equations: [String]) -> Bool {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun equationsPossible(equations: Array<String>): Boolean {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  bool equationsPossible(List<String> equations) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func equationsPossible(equations []string) bool {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} equations\n# @return {Boolean}\ndef equations_possible(equations)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def equationsPossible(equations: Array[String]): Boolean = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn equations_possible(equations: Vec<String>) -> bool {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (equations-possible equations)\n  (-> (listof string?) boolean?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec equations_possible(Equations :: [unicode:unicode_binary()]) -> boolean().\nequations_possible(Equations) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec equations_possible(equations :: [String.t]) :: boolean\n  def equations_possible(equations) do\n    \n  end\nend"}}}