{"question_id": "2163", "problem_slug": "kth-distinct-string-in-an-array", "problem_title": "Kth Distinct String in an Array", "content": "A distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.\n \nExample 1:\n\nInput: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\nOutput: \"a\"\nExplanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1st, so it is the 1st distinct string.\n\"a\" appears 2nd, so it is the 2nd distinct string.\nSince k == 2, \"a\" is returned. \n\nExample 2:\n\nInput: arr = [\"aaa\",\"aa\",\"a\"], k = 1\nOutput: \"aaa\"\nExplanation:\nAll strings in arr are distinct, so the 1st string \"aaa\" is returned.\n\nExample 3:\n\nInput: arr = [\"a\",\"b\",\"a\"], k = 3\nOutput: \"\"\nExplanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".\n\n \nConstraints:\n\n1 <= k <= arr.length <= 1000\n1 <= arr[i].length <= 5\narr[i] consists of lowercase English letters.\n\n", "hints": ["Try 'mapping' the strings to check if they are unique or not."], "exampleTestcases": "[\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"]\n2\n[\"aaa\",\"aa\",\"a\"]\n1\n[\"a\",\"b\",\"a\"]\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string kthDistinct(vector<string>& arr, int k) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String kthDistinct(String[] arr, int k) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def kthDistinct(self, arr, k):\n        \"\"\"\n        :type arr: List[str]\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def kthDistinct(self, arr: List[str], k: int) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* kthDistinct(char** arr, int arrSize, int k) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string KthDistinct(string[] arr, int k) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string[]} arr\n * @param {number} k\n * @return {string}\n */\nvar kthDistinct = function(arr, k) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function kthDistinct(arr: string[], k: number): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $arr\n     * @param Integer $k\n     * @return String\n     */\n    function kthDistinct($arr, $k) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func kthDistinct(_ arr: [String], _ k: Int) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun kthDistinct(arr: Array<String>, k: Int): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String kthDistinct(List<String> arr, int k) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func kthDistinct(arr []string, k int) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String[]} arr\n# @param {Integer} k\n# @return {String}\ndef kth_distinct(arr, k)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def kthDistinct(arr: Array[String], k: Int): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (kth-distinct arr k)\n  (-> (listof string?) exact-integer? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec kth_distinct(Arr :: [unicode:unicode_binary()], K :: integer()) -> unicode:unicode_binary().\nkth_distinct(Arr, K) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec kth_distinct(arr :: [String.t], k :: integer) :: String.t\n  def kth_distinct(arr, k) do\n    \n  end\nend"}}}