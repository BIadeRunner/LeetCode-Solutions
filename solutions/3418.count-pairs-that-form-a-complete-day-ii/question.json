{"question_id": "3418", "problem_slug": "count-pairs-that-form-a-complete-day-ii", "problem_title": "Count Pairs That Form a Complete Day II", "content": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day.\nA complete day is defined as a time duration that is an exact multiple of 24 hours.\nFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\n \nExample 1:\n\nInput: hours = [12,12,30,24,24]\nOutput: 2\nExplanation: The pairs of indices that form a complete day are (0, 1) and (3, 4).\n\nExample 2:\n\nInput: hours = [72,48,24,3]\nOutput: 3\nExplanation: The pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).\n\n \nConstraints:\n\n1 <= hours.length <= 5 * 105\n1 <= hours[i] <= 109\n\n", "hints": ["A pair <code>(i, j)</code> forms a valid complete day if <code>(hours[i] + hours[j]) % 24 == 0</code>.", "Using an array or a map, for each index <code>j</code> moving from left to right, increase the answer by the count of <code>(24 - hours[j]) % 24</code>, and then increase the count of <code>hours[j]</code>."], "exampleTestcases": "[12,12,30,24,24]\n[72,48,24,3]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long countCompleteDayPairs(vector<int>& hours) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long countCompleteDayPairs(int[] hours) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countCompleteDayPairs(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long countCompleteDayPairs(int* hours, int hoursSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long CountCompleteDayPairs(int[] hours) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} hours\n * @return {number}\n */\nvar countCompleteDayPairs = function(hours) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countCompleteDayPairs(hours: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function countCompleteDayPairs($hours) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countCompleteDayPairs(_ hours: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countCompleteDayPairs(hours: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countCompleteDayPairs(List<int> hours) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countCompleteDayPairs(hours []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} hours\n# @return {Integer}\ndef count_complete_day_pairs(hours)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countCompleteDayPairs(hours: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_complete_day_pairs(hours: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-complete-day-pairs hours)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_complete_day_pairs(Hours :: [integer()]) -> integer().\ncount_complete_day_pairs(Hours) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_complete_day_pairs(hours :: [integer]) :: integer\n  def count_complete_day_pairs(hours) do\n    \n  end\nend"}}}