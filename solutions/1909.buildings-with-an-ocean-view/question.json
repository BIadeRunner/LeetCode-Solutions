{"question_id": "1909", "problem_slug": "buildings-with-an-ocean-view", "problem_title": "Buildings With an Ocean View", "content": "There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\nReturn a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.\n \nExample 1:\n\nInput: heights = [4,2,3,1]\nOutput: [0,2,3]\nExplanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\n\nExample 2:\n\nInput: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.\n\nExample 3:\n\nInput: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.\n\n \nConstraints:\n\n1 <= heights.length <= 105\n1 <= heights[i] <= 109\n\n", "hints": ["You can traverse the buildings from the nearest to the ocean to the furthest.", "Keep with you the maximum to the right while traversing to determine if you can see the ocean or not."], "exampleTestcases": "[4,2,3,1]\n[4,3,2,1]\n[1,3,2,4]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findBuildings(vector<int>& heights) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int[] findBuildings(int[] heights) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def findBuildings(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def findBuildings(self, heights: List[int]) -> List[int]:\n        "}, "C": {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findBuildings(int* heights, int heightsSize, int* returnSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int[] FindBuildings(int[] heights) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @return {number[]}\n */\nvar findBuildings = function(heights) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function findBuildings(heights: number[]): number[] {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer[]\n     */\n    function findBuildings($heights) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func findBuildings(_ heights: [Int]) -> [Int] {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun findBuildings(heights: IntArray): IntArray {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  List<int> findBuildings(List<int> heights) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func findBuildings(heights []int) []int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @return {Integer[]}\ndef find_buildings(heights)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def findBuildings(heights: Array[Int]): Array[Int] = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_buildings(heights: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (find-buildings heights)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec find_buildings(Heights :: [integer()]) -> [integer()].\nfind_buildings(Heights) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_buildings(heights :: [integer]) :: [integer]\n  def find_buildings(heights) do\n    \n  end\nend"}}}