{"questionId": "2201", "acRate": 44.73011414785207, "difficulty": "Hard", "freqBar": 56.04898942162217, "frontendQuestionId": "2097", "paidOnly": false, "status": "ac", "title": "Valid Arrangement of Pairs", "topicTags": [{"name": "Depth-First Search", "id": "VG9waWNUYWdOb2RlOjIx", "slug": "depth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Eulerian Circuit", "id": "VG9waWNUYWdOb2RlOjYxMDc0", "slug": "eulerian-circuit"}], "titleSlug": "valid-arrangement-of-pairs", "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>pairs</code> where <code>pairs[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>. An arrangement of <code>pairs</code> is <strong>valid</strong> if for every index <code>i</code> where <code>1 &lt;= i &lt; pairs.length</code>, we have <code>end<sub>i-1</sub> == start<sub>i</sub></code>.</p>\n\n<p>Return <em><strong>any</strong> valid arrangement of </em><code>pairs</code>.</p>\n\n<p><strong>Note:</strong> The inputs will be generated such that there exists a valid arrangement of <code>pairs</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[5,1],[4,5],[11,9],[9,4]]\n<strong>Output:</strong> [[11,9],[9,4],[4,5],[5,1]]\n<strong>Explanation:\n</strong>This is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 9 == 9 = start<sub>1</sub> \nend<sub>1</sub> = 4 == 4 = start<sub>2</sub>\nend<sub>2</sub> = 5 == 5 = start<sub>3</sub>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,3],[3,2],[2,1]]\n<strong>Output:</strong> [[1,3],[3,2],[2,1]]\n<strong>Explanation:</strong>\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 3 == 3 = start<sub>1</sub>\nend<sub>1</sub> = 2 == 2 = start<sub>2</sub>\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[1,3],[2,1]]\n<strong>Output:</strong> [[1,2],[2,1],[1,3]]\n<strong>Explanation:</strong>\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 2 == 2 = start<sub>1</sub>\nend<sub>1</sub> = 1 == 1 = start<sub>2</sub>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pairs[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>start<sub>i</sub> != end<sub>i</sub></code></li>\n\t<li>No two pairs are exactly the same.</li>\n\t<li>There <strong>exists</strong> a valid arrangement of <code>pairs</code>.</li>\n</ul>\n", "hints": ["Could you convert this into a graph problem?", "Consider the pairs as edges and each number as a node.", "We have to find an Eulerian path of this graph. Hierholzer\u2019s algorithm can be used."], "exampleTestcases": "[[5,1],[4,5],[11,9],[9,4]]\n[[1,3],[3,2],[2,1]]\n[[1,2],[1,3],[2,1]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] validArrangement(int[][] pairs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validArrangement(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** validArrangement(int** pairs, int pairsSize, int* pairsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] ValidArrangement(int[][] pairs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} pairs\n * @return {number[][]}\n */\nvar validArrangement = function(pairs) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validArrangement(pairs: number[][]): number[][] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $pairs\n     * @return Integer[][]\n     */\n    function validArrangement($pairs) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validArrangement(_ pairs: [[Int]]) -> [[Int]] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validArrangement(pairs: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<int>> validArrangement(List<List<int>> pairs) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func validArrangement(pairs [][]int) [][]int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} pairs\n# @return {Integer[][]}\ndef valid_arrangement(pairs)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validArrangement(pairs: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_arrangement(pairs: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (valid-arrangement pairs)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec valid_arrangement(Pairs :: [[integer()]]) -> [[integer()]].\nvalid_arrangement(Pairs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec valid_arrangement(pairs :: [[integer]]) :: [[integer]]\n  def valid_arrangement(pairs) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "isPaidOnly": false}]}