{"question_id": "2355", "problem_slug": "maximum-consecutive-floors-without-special-floors", "problem_title": "Maximum Consecutive Floors Without Special Floors", "content": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.\nYou are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation.\nReturn the maximum number of consecutive floors without a special floor.\n \nExample 1:\n\nInput: bottom = 2, top = 9, special = [4,6]\nOutput: 3\nExplanation: The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors.\n\nExample 2:\n\nInput: bottom = 6, top = 8, special = [7,6,8]\nOutput: 0\nExplanation: Every floor rented is a special floor, so we return 0.\n\n \nConstraints:\n\n1 <= special.length <= 105\n1 <= bottom <= special[i] <= top <= 109\nAll the values of special are unique.\n\n", "hints": ["Say we have a pair of special floors (x, y) with no other special floors in between. There are x - y - 1 consecutive floors in between them without a special floor.", "Say there are n special floors. After sorting special, we have answer = max(answer, special[i] – special[i – 1] – 1) for all 0 < i < n.", "However, there are two special cases left to consider: the floors before special[0] and after special[n-1].", "To consider these cases, we have answer = max(answer, special[0] – bottom, top – special[n-1])."], "exampleTestcases": "2\n9\n[4,6]\n6\n8\n[7,6,8]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxConsecutive(int bottom, int top, vector<int>& special) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int maxConsecutive(int bottom, int top, int[] special) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maxConsecutive(self, bottom, top, special):\n        \"\"\"\n        :type bottom: int\n        :type top: int\n        :type special: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int maxConsecutive(int bottom, int top, int* special, int specialSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxConsecutive(int bottom, int top, int[] special) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} bottom\n * @param {number} top\n * @param {number[]} special\n * @return {number}\n */\nvar maxConsecutive = function(bottom, top, special) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maxConsecutive(bottom: number, top: number, special: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $bottom\n     * @param Integer $top\n     * @param Integer[] $special\n     * @return Integer\n     */\n    function maxConsecutive($bottom, $top, $special) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maxConsecutive(_ bottom: Int, _ top: Int, _ special: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maxConsecutive(bottom: Int, top: Int, special: IntArray): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maxConsecutive(int bottom, int top, List<int> special) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maxConsecutive(bottom int, top int, special []int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} bottom\n# @param {Integer} top\n# @param {Integer[]} special\n# @return {Integer}\ndef max_consecutive(bottom, top, special)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maxConsecutive(bottom: Int, top: Int, special: Array[Int]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_consecutive(bottom: i32, top: i32, special: Vec<i32>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (max-consecutive bottom top special)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec max_consecutive(Bottom :: integer(), Top :: integer(), Special :: [integer()]) -> integer().\nmax_consecutive(Bottom, Top, Special) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_consecutive(bottom :: integer, top :: integer, special :: [integer]) :: integer\n  def max_consecutive(bottom, top, special) do\n    \n  end\nend"}}}