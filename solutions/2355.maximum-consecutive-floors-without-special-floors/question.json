{"questionId": "2355", "acRate": 51.91981023796771, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2274", "paidOnly": false, "status": "ac", "title": "Maximum Consecutive Floors Without Special Floors", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Sorting", "id": "VG9waWNUYWdOb2RlOjYxMDQ5", "slug": "sorting"}], "titleSlug": "maximum-consecutive-floors-without-special-floors", "content": "<p>Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be <strong>special floors</strong>, used for relaxation only.</p>\n\n<p>You are given two integers <code>bottom</code> and <code>top</code>, which denote that Alice has rented all the floors from <code>bottom</code> to <code>top</code> (<strong>inclusive</strong>). You are also given the integer array <code>special</code>, where <code>special[i]</code> denotes a special floor that Alice has designated for relaxation.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of consecutive floors without a special floor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bottom = 2, top = 9, special = [4,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bottom = 6, top = 8, special = [7,6,8]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Every floor rented is a special floor, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= special.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= bottom &lt;= special[i] &lt;= top &lt;= 10<sup>9</sup></code></li>\n\t<li>All the values of <code>special</code> are <strong>unique</strong>.</li>\n</ul>\n", "hints": ["Say we have a pair of special floors (x, y) with no other special floors in between. There are x - y - 1 consecutive floors in between them without a special floor.", "Say there are n special floors. After sorting special, we have answer = max(answer, special[i] \u2013 special[i \u2013 1] \u2013 1) for all 0 < i < n.", "However, there are two special cases left to consider: the floors before special[0] and after special[n-1].", "To consider these cases, we have answer = max(answer, special[0] \u2013 bottom, top \u2013 special[n-1])."], "exampleTestcases": "2\n9\n[4,6]\n6\n8\n[7,6,8]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxConsecutive(int bottom, int top, vector<int>& special) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxConsecutive(int bottom, int top, int[] special) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxConsecutive(self, bottom, top, special):\n        \"\"\"\n        :type bottom: int\n        :type top: int\n        :type special: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxConsecutive(int bottom, int top, int* special, int specialSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxConsecutive(int bottom, int top, int[] special) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} bottom\n * @param {number} top\n * @param {number[]} special\n * @return {number}\n */\nvar maxConsecutive = function(bottom, top, special) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxConsecutive(bottom: number, top: number, special: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $bottom\n     * @param Integer $top\n     * @param Integer[] $special\n     * @return Integer\n     */\n    function maxConsecutive($bottom, $top, $special) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxConsecutive(_ bottom: Int, _ top: Int, _ special: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxConsecutive(bottom: Int, top: Int, special: IntArray): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxConsecutive(int bottom, int top, List<int> special) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxConsecutive(bottom int, top int, special []int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} bottom\n# @param {Integer} top\n# @param {Integer[]} special\n# @return {Integer}\ndef max_consecutive(bottom, top, special)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxConsecutive(bottom: Int, top: Int, special: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_consecutive(bottom: i32, top: i32, special: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-consecutive bottom top special)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_consecutive(Bottom :: integer(), Top :: integer(), Special :: [integer()]) -> integer().\nmax_consecutive(Bottom, Top, Special) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_consecutive(bottom :: integer, top :: integer, special :: [integer]) :: integer\n  def max_consecutive(bottom, top, special) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "longest-consecutive-sequence", "title": "Longest Consecutive Sequence", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-gap", "title": "Maximum Gap", "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "widest-vertical-area-between-two-points-containing-no-points", "title": "Widest Vertical Area Between Two Points Containing No Points", "isPaidOnly": false}]}