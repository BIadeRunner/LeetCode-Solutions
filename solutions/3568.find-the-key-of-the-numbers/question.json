{"questionId": "3568", "acRate": 76.71317232752814, "difficulty": "Easy", "freqBar": 34.94291904347303, "frontendQuestionId": "3270", "paidOnly": false, "status": "ac", "title": "Find the Key of the Numbers", "topicTags": [{"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}], "titleSlug": "find-the-key-of-the-numbers", "content": "<p>You are given three <strong>positive</strong> integers <code>num1</code>, <code>num2</code>, and <code>num3</code>.</p>\n\n<p>The <code>key</code> of <code>num1</code>, <code>num2</code>, and <code>num3</code> is defined as a four-digit number such that:</p>\n\n<ul>\n\t<li>Initially, if any number has <strong>less than</strong> four digits, it is padded with <strong>leading zeros</strong>.</li>\n\t<li>The <code>i<sup>th</sup></code> digit (<code>1 &lt;= i &lt;= 4</code>) of the <code>key</code> is generated by taking the <strong>smallest</strong> digit among the <code>i<sup>th</sup></code> digits of <code>num1</code>, <code>num2</code>, and <code>num3</code>.</li>\n</ul>\n\n<p>Return the <code>key</code> of the three numbers <strong>without</strong> leading zeros (<em>if any</em>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num1 = 1, num2 = 10, num3 = 1000</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>On padding, <code>num1</code> becomes <code>&quot;0001&quot;</code>, <code>num2</code> becomes <code>&quot;0010&quot;</code>, and <code>num3</code> remains <code>&quot;1000&quot;</code>.</p>\n\n<ul>\n\t<li>The <code>1<sup>st</sup></code> digit of the <code>key</code> is <code>min(0, 0, 1)</code>.</li>\n\t<li>The <code>2<sup>nd</sup></code> digit of the <code>key</code> is <code>min(0, 0, 0)</code>.</li>\n\t<li>The <code>3<sup>rd</sup></code> digit of the <code>key</code> is <code>min(0, 1, 0)</code>.</li>\n\t<li>The <code>4<sup>th</sup></code> digit of the <code>key</code> is <code>min(1, 0, 0)</code>.</li>\n</ul>\n\n<p>Hence, the <code>key</code> is <code>&quot;0000&quot;</code>, i.e. 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num1 = 987, num2 = 879, num3 = 798</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">777</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num1 = 1, num2 = 2, num3 = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1, num2, num3 &lt;= 9999</code></li>\n</ul>\n", "hints": [], "exampleTestcases": "1\n10\n1000\n987\n879\n798\n1\n2\n3", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int generateKey(int num1, int num2, int num3) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int generateKey(int num1, int num2, int num3) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def generateKey(self, num1, num2, num3):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :type num3: int\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int generateKey(int num1, int num2, int num3) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GenerateKey(int num1, int num2, int num3) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @param {number} num3\n * @return {number}\n */\nvar generateKey = function(num1, num2, num3) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function generateKey(num1: number, num2: number, num3: number): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @param Integer $num3\n     * @return Integer\n     */\n    function generateKey($num1, $num2, $num3) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func generateKey(_ num1: Int, _ num2: Int, _ num3: Int) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun generateKey(num1: Int, num2: Int, num3: Int): Int {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int generateKey(int num1, int num2, int num3) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func generateKey(num1 int, num2 int, num3 int) int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @param {Integer} num3\n# @return {Integer}\ndef generate_key(num1, num2, num3)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def generateKey(num1: Int, num2: Int, num3: Int): Int = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn generate_key(num1: i32, num2: i32, num3: i32) -> i32 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (generate-key num1 num2 num3)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec generate_key(Num1 :: integer(), Num2 :: integer(), Num3 :: integer()) -> integer().\ngenerate_key(Num1, Num2, Num3) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_key(num1 :: integer, num2 :: integer, num3 :: integer) :: integer\n  def generate_key(num1, num2, num3) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "largest-number", "title": "Largest Number", "isPaidOnly": false}]}