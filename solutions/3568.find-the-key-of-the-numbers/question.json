{"question_id": "3568", "problem_slug": "find-the-key-of-the-numbers", "problem_title": "Find the Key of the Numbers", "content": "You are given three positive integers num1, num2, and num3.\nThe key of num1, num2, and num3 is defined as a four-digit number such that:\n\nInitially, if any number has less than four digits, it is padded with leading zeros.\nThe ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the ith digits of num1, num2, and num3.\n\nReturn the key of the three numbers without leading zeros (if any).\n \nExample 1:\n\nInput: num1 = 1, num2 = 10, num3 = 1000\nOutput: 0\nExplanation:\nOn padding, num1 becomes \"0001\", num2 becomes \"0010\", and num3 remains \"1000\".\n\nThe 1st digit of the key is min(0, 0, 1).\nThe 2nd digit of the key is min(0, 0, 0).\nThe 3rd digit of the key is min(0, 1, 0).\nThe 4th digit of the key is min(1, 0, 0).\n\nHence, the key is \"0000\", i.e. 0.\n\nExample 2:\n\nInput: num1 = 987, num2 = 879, num3 = 798\nOutput: 777\n\nExample 3:\n\nInput: num1 = 1, num2 = 2, num3 = 3\nOutput: 1\n\n \nConstraints:\n\n1 <= num1, num2, num3 <= 9999\n\n", "hints": [], "exampleTestcases": "1\n10\n1000\n987\n879\n798\n1\n2\n3", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int generateKey(int num1, int num2, int num3) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int generateKey(int num1, int num2, int num3) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def generateKey(self, num1, num2, num3):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :type num3: int\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        "}, "C": {"langSlug": "c", "code": "int generateKey(int num1, int num2, int num3) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int GenerateKey(int num1, int num2, int num3) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @param {number} num3\n * @return {number}\n */\nvar generateKey = function(num1, num2, num3) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function generateKey(num1: number, num2: number, num3: number): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @param Integer $num3\n     * @return Integer\n     */\n    function generateKey($num1, $num2, $num3) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func generateKey(_ num1: Int, _ num2: Int, _ num3: Int) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun generateKey(num1: Int, num2: Int, num3: Int): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int generateKey(int num1, int num2, int num3) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func generateKey(num1 int, num2 int, num3 int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @param {Integer} num3\n# @return {Integer}\ndef generate_key(num1, num2, num3)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def generateKey(num1: Int, num2: Int, num3: Int): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn generate_key(num1: i32, num2: i32, num3: i32) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (generate-key num1 num2 num3)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec generate_key(Num1 :: integer(), Num2 :: integer(), Num3 :: integer()) -> integer().\ngenerate_key(Num1, Num2, Num3) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec generate_key(num1 :: integer, num2 :: integer, num3 :: integer) :: integer\n  def generate_key(num1, num2, num3) do\n    \n  end\nend"}}}