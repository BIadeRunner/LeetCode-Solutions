{"questionId": "3558", "acRate": 27.973587276557478, "difficulty": "Medium", "freqBar": 27.75272287376839, "frontendQuestionId": "3286", "paidOnly": false, "status": "ac", "title": "Find a Safe Walk Through a Grid", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Breadth-First Search", "id": "VG9waWNUYWdOb2RlOjIy", "slug": "breadth-first-search"}, {"name": "Graph", "id": "VG9waWNUYWdOb2RlOjI0", "slug": "graph"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Matrix", "id": "VG9waWNUYWdOb2RlOjYxMDUz", "slug": "matrix"}, {"name": "Shortest Path", "id": "VG9waWNUYWdOb2RlOjYxMDc2", "slug": "shortest-path"}], "titleSlug": "find-a-safe-walk-through-a-grid", "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code> and an integer <code>health</code>.</p>\n\n<p>You start on the upper-left corner <code>(0, 0)</code> and would like to get to the lower-right corner <code>(m - 1, n - 1)</code>.</p>\n\n<p>You can move up, down, left, or right from one cell to another adjacent cell as long as your health <em>remains</em> <strong>positive</strong>.</p>\n\n<p>Cells <code>(i, j)</code> with <code>grid[i][j] = 1</code> are considered <strong>unsafe</strong> and reduce your health by 1.</p>\n\n<p>Return <code>true</code> if you can reach the final cell with a health value of 1 or more, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The final cell can be reached safely by walking along the gray cells below.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_1drawio.png\" style=\"width: 301px; height: 121px;\" /></div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>A minimum of 4 health points is needed to reach the final cell safely.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_2drawio.png\" style=\"width: 361px; height: 161px;\" /></div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The final cell can be reached safely by walking along the gray cells below.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/04/3868_examples_3drawio.png\" style=\"width: 181px; height: 121px;\" /></p>\n\n<p>Any path that does not go through the cell <code>(1, 1)</code> is unsafe since your health will drop to 0 when reaching the final cell.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code><font face=\"monospace\">2 &lt;= m * n</font></code></li>\n\t<li><code>1 &lt;= health &lt;= m + n</code></li>\n\t<li><code>grid[i][j]</code> is either 0 or 1.</li>\n</ul>\n", "hints": ["Use 01 BFS."], "exampleTestcases": "[[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]\n1\n[[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]]\n3\n[[1,1,1],[1,0,1],[1,1,1]]\n5", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool findSafeWalk(vector<vector<int>>& grid, int health) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean findSafeWalk(List<List<Integer>> grid, int health) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findSafeWalk(self, grid, health):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type health: int\n        :rtype: bool\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        "}, {"lang": "C", "langSlug": "c", "code": "bool findSafeWalk(int** grid, int gridSize, int* gridColSize, int health) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool FindSafeWalk(IList<IList<int>> grid, int health) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @param {number} health\n * @return {boolean}\n */\nvar findSafeWalk = function(grid, health) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findSafeWalk(grid: number[][], health: number): boolean {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $health\n     * @return Boolean\n     */\n    function findSafeWalk($grid, $health) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findSafeWalk(_ grid: [[Int]], _ health: Int) -> Bool {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findSafeWalk(grid: List<List<Int>>, health: Int): Boolean {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  bool findSafeWalk(List<List<int>> grid, int health) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func findSafeWalk(grid [][]int, health int) bool {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @param {Integer} health\n# @return {Boolean}\ndef find_safe_walk(grid, health)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findSafeWalk(grid: List[List[Int]], health: Int): Boolean = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_safe_walk(grid: Vec<Vec<i32>>, health: i32) -> bool {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (find-safe-walk grid health)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec find_safe_walk(Grid :: [[integer()]], Health :: integer()) -> boolean().\nfind_safe_walk(Grid, Health) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_safe_walk(grid :: [[integer]], health :: integer) :: boolean\n  def find_safe_walk(grid, health) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination", "title": "Shortest Path in a Grid with Obstacles Elimination", "isPaidOnly": false}]}