{"question_id": "3510", "problem_slug": "maximize-the-total-height-of-unique-towers", "problem_title": "Maximize the Total Height of Unique Towers", "content": "You are given an array maximumHeight, where maximumHeight[i] denotes the maximum height the ith tower can be assigned.\nYour task is to assign a height to each tower so that:\n\nThe height of the ith tower is a positive integer and does not exceed maximumHeight[i].\nNo two towers have the same height.\n\nReturn the maximum possible total sum of the tower heights. If it's not possible to assign heights, return -1.\n \nExample 1:\n\nInput: maximumHeight = [2,3,4,3]\nOutput: 10\nExplanation:\nWe can assign heights in the following way: [1, 2, 4, 3].\n\nExample 2:\n\nInput: maximumHeight = [15,10]\nOutput: 25\nExplanation:\nWe can assign heights in the following way: [15, 10].\n\nExample 3:\n\nInput: maximumHeight = [2,2,1]\nOutput: -1\nExplanation:\nIt's impossible to assign positive heights to each index so that no two towers have the same height.\n\n \nConstraints:\n\n1 <= maximumHeight.length <= 105\n1 <= maximumHeight[i] <= 109\n\n", "hints": ["Sort the array <code>maximumHeight</code> in descending order.", "After sorting, it can be seen that the maximum height that we can assign to the <code>i<sup>th</sup></code> element is <code>min(maximumHeight[i], maximumHeight[i - 1] - 1)</code>."], "exampleTestcases": "[2,3,4,3]\n[15,10]\n[2,2,1]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maximumTotalSum(vector<int>& maximumHeight) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public long maximumTotalSum(int[] maximumHeight) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def maximumTotalSum(self, maximumHeight):\n        \"\"\"\n        :type maximumHeight: List[int]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def maximumTotalSum(self, maximumHeight: List[int]) -> int:\n        "}, "C": {"langSlug": "c", "code": "long long maximumTotalSum(int* maximumHeight, int maximumHeightSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public long MaximumTotalSum(int[] maximumHeight) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[]} maximumHeight\n * @return {number}\n */\nvar maximumTotalSum = function(maximumHeight) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function maximumTotalSum(maximumHeight: number[]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $maximumHeight\n     * @return Integer\n     */\n    function maximumTotalSum($maximumHeight) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func maximumTotalSum(_ maximumHeight: [Int]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun maximumTotalSum(maximumHeight: IntArray): Long {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int maximumTotalSum(List<int> maximumHeight) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func maximumTotalSum(maximumHeight []int) int64 {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[]} maximum_height\n# @return {Integer}\ndef maximum_total_sum(maximum_height)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def maximumTotalSum(maximumHeight: Array[Int]): Long = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_total_sum(maximum_height: Vec<i32>) -> i64 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (maximum-total-sum maximumHeight)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec maximum_total_sum(MaximumHeight :: [integer()]) -> integer().\nmaximum_total_sum(MaximumHeight) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximum_total_sum(maximum_height :: [integer]) :: integer\n  def maximum_total_sum(maximum_height) do\n    \n  end\nend"}}}