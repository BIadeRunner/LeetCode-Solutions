{"question_id": "2522", "problem_slug": "median-of-a-row-wise-sorted-matrix", "problem_title": "Median of a Row Wise Sorted Matrix", "content": "Given an m x n matrix grid containing an odd number of integers where each row is sorted in non-decreasing order, return the median of the matrix.\nYou must solve the problem in less than O(m * n) time complexity.\n \nExample 1:\n\nInput: grid = [[1,1,2],[2,3,3],[1,3,4]]\nOutput: 2\nExplanation: The elements of the matrix in sorted order are 1,1,1,2,2,3,3,3,4. The median is 2.\n\nExample 2:\n\nInput: grid = [[1,1,3,3,4]]\nOutput: 3\nExplanation: The elements of the matrix in sorted order are 1,1,3,3,4. The median is 3.\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 500\nm and n are both odd.\n1 <= grid[i][j] <= 106\ngrid[i] is sorted in non-decreasing order.\n\n", "hints": ["How can you use the fact that the rows are sorted in non-decreasing order to solve the problem efficiently?", "Try to binary search the answer."], "exampleTestcases": "[[1,1,2],[2,3,3],[1,3,4]]\n[[1,1,3,3,4]]", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int matrixMedian(vector<vector<int>>& grid) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int matrixMedian(int[][] grid) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def matrixMedian(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def matrixMedian(self, grid: List[List[int]]) -> int:\n        "}, "C": {"langSlug": "c", "code": "int matrixMedian(int** grid, int gridSize, int* gridColSize) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int MatrixMedian(int[][] grid) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar matrixMedian = function(grid) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function matrixMedian(grid: number[][]): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function matrixMedian($grid) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func matrixMedian(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun matrixMedian(grid: Array<IntArray>): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int matrixMedian(List<List<int>> grid) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func matrixMedian(grid [][]int) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef matrix_median(grid)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def matrixMedian(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn matrix_median(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (matrix-median grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec matrix_median(Grid :: [[integer()]]) -> integer().\nmatrix_median(Grid) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec matrix_median(grid :: [[integer]]) :: integer\n  def matrix_median(grid) do\n    \n  end\nend"}}}