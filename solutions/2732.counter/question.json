{"question_id": "2732", "problem_slug": "counter", "problem_title": "Counter", "content": "Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).\n \nExample 1:\n\nInput: \nn = 10 \n[\"call\",\"call\",\"call\"]\nOutput: [10,11,12]\nExplanation: \ncounter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time.\n\nExample 2:\n\nInput: \nn = -2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]\nOutput: [-2,-1,0,1,2]\nExplanation: counter() initially returns -2. Then increases after each sebsequent call.\n\n \nConstraints:\n\n-1000 <= n <= 1000\n0 <= calls.length <= 1000\ncalls[i] === \"call\"\n\n", "hints": ["In JavaScript, a function can return a closure. A closure is defined as a function and the variables declared around it (it's lexical environment).", "A count variable can be initialized in the outer function and mutated in the inner function."], "exampleTestcases": "10\n[\"call\",\"call\",\"call\"]\n-2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]", "codeSnippets": {"JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {Function} counter\n */\nvar createCounter = function(n) {\n    \n    return function() {\n        \n    };\n};\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */"}, "TypeScript": {"langSlug": "typescript", "code": "function createCounter(n: number): () => number {\n    \n    return function() {\n        \n    }\n}\n\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */"}}}