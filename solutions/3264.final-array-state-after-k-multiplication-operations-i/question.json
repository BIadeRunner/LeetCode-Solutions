{"questionId": "3555", "acRate": 81.87911668574652, "difficulty": "Easy", "freqBar": 36.94498318658463, "frontendQuestionId": "3264", "paidOnly": false, "status": "ac", "title": "Final Array State After K Multiplication Operations I", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Math", "id": "VG9waWNUYWdOb2RlOjg=", "slug": "math"}, {"name": "Heap (Priority Queue)", "id": "VG9waWNUYWdOb2RlOjYxMDUw", "slug": "heap-priority-queue"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "final-array-state-after-k-multiplication-operations-i", "content": "<p>You are given an integer array <code>nums</code>, an integer <code>k</code>, and an integer <code>multiplier</code>.</p>\n\n<p>You need to perform <code>k</code> operations on <code>nums</code>. In each operation:</p>\n\n<ul>\n\t<li>Find the <strong>minimum</strong> value <code>x</code> in <code>nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li>\n\t<li>Replace the selected minimum value <code>x</code> with <code>x * multiplier</code>.</li>\n</ul>\n\n<p>Return an integer array denoting the <em>final state</em> of <code>nums</code> after performing all <code>k</code> operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,3,5,6], k = 5, multiplier = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[8,4,6,5,6]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[2, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[4, 2, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 3</td>\n\t\t\t<td>[4, 4, 3, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 4</td>\n\t\t\t<td>[4, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 5</td>\n\t\t\t<td>[8, 4, 6, 5, 6]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 3, multiplier = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[16,8]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Operation</th>\n\t\t\t<th>Result</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 1</td>\n\t\t\t<td>[4, 2]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 2</td>\n\t\t\t<td>[4, 8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>After operation 3</td>\n\t\t\t<td>[16, 8]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>1 &lt;= multiplier &lt;= 5</code></li>\n</ul>\n", "hints": ["Maintain sorted pairs <code>(nums[index], index)</code> in a priority queue.", "Simulate the operation <code>k</code> times."], "exampleTestcases": "[2,1,3,5,6]\n5\n2\n[1,2]\n3\n4", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] getFinalState(int[] nums, int k, int multiplier) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getFinalState(self, nums, k, multiplier):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type multiplier: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getFinalState(int* nums, int numsSize, int k, int multiplier, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] GetFinalState(int[] nums, int k, int multiplier) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} multiplier\n * @return {number[]}\n */\nvar getFinalState = function(nums, k, multiplier) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getFinalState(nums: number[], k: number, multiplier: number): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $multiplier\n     * @return Integer[]\n     */\n    function getFinalState($nums, $k, $multiplier) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getFinalState(_ nums: [Int], _ k: Int, _ multiplier: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getFinalState(nums: IntArray, k: Int, multiplier: Int): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> getFinalState(List<int> nums, int k, int multiplier) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func getFinalState(nums []int, k int, multiplier int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} multiplier\n# @return {Integer[]}\ndef get_final_state(nums, k, multiplier)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getFinalState(nums: Array[Int], k: Int, multiplier: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_final_state(nums: Vec<i32>, k: i32, multiplier: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (get-final-state nums k multiplier)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec get_final_state(Nums :: [integer()], K :: integer(), Multiplier :: integer()) -> [integer()].\nget_final_state(Nums, K, Multiplier) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec get_final_state(nums :: [integer], k :: integer, multiplier :: integer) :: [integer]\n  def get_final_state(nums, k, multiplier) do\n    \n  end\nend"}], "similarQuestionList": []}