{"question_id": "2348", "problem_slug": "count-number-of-texts", "problem_title": "Count Number of Texts", "content": "Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.\n\nIn order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.\n\nFor example, to add the letter 's', Alice has to press '7' four times. Similarly, to add the letter 'k', Alice has to press '5' twice.\nNote that the digits '0' and '1' do not map to any letters, so Alice does not use them.\n\nHowever, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.\n\nFor example, when Alice sent the message \"bob\", Bob received the string \"2266622\".\n\nGiven a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent.\nSince the answer may be very large, return it modulo 109 + 7.\n \nExample 1:\n\nInput: pressedKeys = \"22233\"\nOutput: 8\nExplanation:\nThe possible text messages Alice could have sent are:\n\"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\".\nSince there are 8 possible messages, we return 8.\n\nExample 2:\n\nInput: pressedKeys = \"222222222222222222222222222222222222\"\nOutput: 82876089\nExplanation:\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089.\n\n \nConstraints:\n\n1 <= pressedKeys.length <= 105\npressedKeys only consists of digits from '2' - '9'.\n\n", "hints": ["For a substring consisting of the same digit, how can we count the number of texts it could have originally represented?", "How can dynamic programming help us calculate the required answer?"], "exampleTestcases": "\"22233\"\n\"222222222222222222222222222222222222\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    int countTexts(string pressedKeys) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public int countTexts(String pressedKeys) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def countTexts(self, pressedKeys):\n        \"\"\"\n        :type pressedKeys: str\n        :rtype: int\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def countTexts(self, pressedKeys: str) -> int:\n        "}, "C": {"langSlug": "c", "code": "int countTexts(char* pressedKeys) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public int CountTexts(string pressedKeys) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} pressedKeys\n * @return {number}\n */\nvar countTexts = function(pressedKeys) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function countTexts(pressedKeys: string): number {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $pressedKeys\n     * @return Integer\n     */\n    function countTexts($pressedKeys) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func countTexts(_ pressedKeys: String) -> Int {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun countTexts(pressedKeys: String): Int {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  int countTexts(String pressedKeys) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func countTexts(pressedKeys string) int {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} pressed_keys\n# @return {Integer}\ndef count_texts(pressed_keys)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def countTexts(pressedKeys: String): Int = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_texts(pressed_keys: String) -> i32 {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (count-texts pressedKeys)\n  (-> string? exact-integer?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec count_texts(PressedKeys :: unicode:unicode_binary()) -> integer().\ncount_texts(PressedKeys) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_texts(pressed_keys :: String.t) :: integer\n  def count_texts(pressed_keys) do\n    \n  end\nend"}}}