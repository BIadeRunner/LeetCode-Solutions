{"question_id": "471", "problem_slug": "encode-string-with-shortest-length", "problem_title": "Encode String with Shortest Length", "content": "Given a string s, encode the string such that its encoded length is the shortest.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. k should be a positive integer.\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.\n \nExample 1:\n\nInput: s = \"aaa\"\nOutput: \"aaa\"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.\n\nExample 2:\n\nInput: s = \"aaaaa\"\nOutput: \"5[a]\"\nExplanation: \"5[a]\" is shorter than \"aaaaa\" by 1 character.\n\nExample 3:\n\nInput: s = \"aaaaaaaaaa\"\nOutput: \"10[a]\"\nExplanation: \"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".\n\n \nConstraints:\n\n1 <= s.length <= 150\ns consists of only lowercase English letters.\n\n", "hints": [], "exampleTestcases": "\"aaa\"\n\"aaaaa\"\n\"aaaaaaaaaa\"", "codeSnippets": {"C++": {"langSlug": "cpp", "code": "class Solution {\npublic:\n    string encode(string s) {\n        \n    }\n};"}, "Java": {"langSlug": "java", "code": "class Solution {\n    public String encode(String s) {\n        \n    }\n}"}, "Python": {"langSlug": "python", "code": "class Solution(object):\n    def encode(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, "Python3": {"langSlug": "python3", "code": "class Solution:\n    def encode(self, s: str) -> str:\n        "}, "C": {"langSlug": "c", "code": "char* encode(char* s) {\n    \n}"}, "C#": {"langSlug": "csharp", "code": "public class Solution {\n    public string Encode(string s) {\n        \n    }\n}"}, "JavaScript": {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar encode = function(s) {\n    \n};"}, "TypeScript": {"langSlug": "typescript", "code": "function encode(s: string): string {\n    \n};"}, "PHP": {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function encode($s) {\n        \n    }\n}"}, "Swift": {"langSlug": "swift", "code": "class Solution {\n    func encode(_ s: String) -> String {\n        \n    }\n}"}, "Kotlin": {"langSlug": "kotlin", "code": "class Solution {\n    fun encode(s: String): String {\n        \n    }\n}"}, "Dart": {"langSlug": "dart", "code": "class Solution {\n  String encode(String s) {\n    \n  }\n}"}, "Go": {"langSlug": "golang", "code": "func encode(s string) string {\n    \n}"}, "Ruby": {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef encode(s)\n    \nend"}, "Scala": {"langSlug": "scala", "code": "object Solution {\n    def encode(s: String): String = {\n        \n    }\n}"}, "Rust": {"langSlug": "rust", "code": "impl Solution {\n    pub fn encode(s: String) -> String {\n        \n    }\n}"}, "Racket": {"langSlug": "racket", "code": "(define/contract (encode s)\n  (-> string? string?)\n  )"}, "Erlang": {"langSlug": "erlang", "code": "-spec encode(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nencode(S) ->\n  ."}, "Elixir": {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec encode(s :: String.t) :: String.t\n  def encode(s) do\n    \n  end\nend"}}}