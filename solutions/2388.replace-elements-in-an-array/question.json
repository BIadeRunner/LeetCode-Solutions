{"questionId": "2388", "acRate": 58.072158563022604, "difficulty": "Medium", "freqBar": 0.0, "frontendQuestionId": "2295", "paidOnly": false, "status": "ac", "title": "Replace Elements in an Array", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Hash Table", "id": "VG9waWNUYWdOb2RlOjY=", "slug": "hash-table"}, {"name": "Simulation", "id": "VG9waWNUYWdOb2RlOjYxMDU1", "slug": "simulation"}], "titleSlug": "replace-elements-in-an-array", "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> that consists of <code>n</code> <strong>distinct</strong> positive integers. Apply <code>m</code> operations to this array, where in the <code>i<sup>th</sup></code> operation you replace the number <code>operations[i][0]</code> with <code>operations[i][1]</code>.</p>\n\n<p>It is guaranteed that in the <code>i<sup>th</sup></code> operation:</p>\n\n<ul>\n\t<li><code>operations[i][0]</code> <strong>exists</strong> in <code>nums</code>.</li>\n\t<li><code>operations[i][1]</code> does <strong>not</strong> exist in <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>the array obtained after applying all the operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]\n<strong>Output:</strong> [3,2,7,1]\n<strong>Explanation:</strong> We perform the following operations on nums:\n- Replace the number 1 with 3. nums becomes [<u><strong>3</strong></u>,2,4,6].\n- Replace the number 4 with 7. nums becomes [3,2,<u><strong>7</strong></u>,6].\n- Replace the number 6 with 1. nums becomes [3,2,7,<u><strong>1</strong></u>].\nWe return the final array [3,2,7,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2], operations = [[1,3],[2,1],[3,2]]\n<strong>Output:</strong> [2,1]\n<strong>Explanation:</strong> We perform the following operations to nums:\n- Replace the number 1 with 3. nums becomes [<u><strong>3</strong></u>,2].\n- Replace the number 2 with 1. nums becomes [3,<u><strong>1</strong></u>].\n- Replace the number 3 with 2. nums becomes [<u><strong>2</strong></u>,1].\nWe return the array [2,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == operations.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of <code>nums</code> are <strong>distinct</strong>.</li>\n\t<li><code>operations[i].length == 2</code></li>\n\t<li><code>1 &lt;= nums[i], operations[i][0], operations[i][1] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>operations[i][0]</code> will exist in <code>nums</code> when applying the <code>i<sup>th</sup></code> operation.</li>\n\t<li><code>operations[i][1]</code> will not exist in <code>nums</code> when applying the <code>i<sup>th</sup></code> operation.</li>\n</ul>\n", "hints": ["Can you think of a data structure that will allow you to store the position of each number?", "Use that data structure to instantly replace a number with its new value."], "exampleTestcases": "[1,2,4,6]\n[[1,3],[4,7],[6,1]]\n[1,2]\n[[1,3],[2,1],[3,2]]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> arrayChange(vector<int>& nums, vector<vector<int>>& operations) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] arrayChange(int[] nums, int[][] operations) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arrayChange(self, nums, operations):\n        \"\"\"\n        :type nums: List[int]\n        :type operations: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* arrayChange(int* nums, int numsSize, int** operations, int operationsSize, int* operationsColSize, int* returnSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ArrayChange(int[] nums, int[][] operations) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number[][]} operations\n * @return {number[]}\n */\nvar arrayChange = function(nums, operations) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arrayChange(nums: number[], operations: number[][]): number[] {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $operations\n     * @return Integer[]\n     */\n    function arrayChange($nums, $operations) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arrayChange(_ nums: [Int], _ operations: [[Int]]) -> [Int] {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arrayChange(nums: IntArray, operations: Array<IntArray>): IntArray {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> arrayChange(List<int> nums, List<List<int>> operations) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func arrayChange(nums []int, operations [][]int) []int {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer[][]} operations\n# @return {Integer[]}\ndef array_change(nums, operations)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arrayChange(nums: Array[Int], operations: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn array_change(nums: Vec<i32>, operations: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (array-change nums operations)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec array_change(Nums :: [integer()], Operations :: [[integer()]]) -> [integer()].\narray_change(Nums, Operations) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec array_change(nums :: [integer], operations :: [[integer]]) :: [integer]\n  def array_change(nums, operations) do\n    \n  end\nend"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "find-all-numbers-disappeared-in-an-array", "title": "Find All Numbers Disappeared in an Array", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i", "title": "Maximum Number of Integers to Choose From a Range I", "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii", "title": "Maximum Number of Integers to Choose From a Range II", "isPaidOnly": true}]}