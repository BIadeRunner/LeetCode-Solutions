{"questionId": "3525", "acRate": 48.94907165271967, "difficulty": "Medium", "freqBar": 47.08291471517694, "frontendQuestionId": "3259", "paidOnly": false, "status": "ac", "title": "Maximum Energy Boost From Two Drinks", "topicTags": [{"name": "Array", "id": "VG9waWNUYWdOb2RlOjU=", "slug": "array"}, {"name": "Dynamic Programming", "id": "VG9waWNUYWdOb2RlOjEz", "slug": "dynamic-programming"}], "titleSlug": "maximum-energy-boost-from-two-drinks", "content": "<p>You are given two integer arrays <code>energyDrinkA</code> and <code>energyDrinkB</code> of the same length <code>n</code> by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively.</p>\n\n<p>You want to <em>maximize</em> your total energy boost by drinking one energy drink <em>per hour</em>. However, if you want to switch from consuming one energy drink to the other, you need to wait for <em>one hour</em> to cleanse your system (meaning you won&#39;t get any energy boost in that hour).</p>\n\n<p>Return the <strong>maximum</strong> total energy boost you can gain in the next <code>n</code> hours.</p>\n\n<p><strong>Note</strong> that you can start consuming <em>either</em> of the two energy drinks.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> energyDrinkA<span class=\"example-io\"> = [1,3,1], </span>energyDrinkB<span class=\"example-io\"> = [3,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>To gain an energy boost of 5, drink only the energy drink A (or only B).</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> energyDrinkA<span class=\"example-io\"> = [4,1,1], </span>energyDrinkB<span class=\"example-io\"> = [1,1,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>To gain an energy boost of 7:</p>\n\n<ul>\n\t<li>Drink the energy drink A for the first hour.</li>\n\t<li>Switch to the energy drink B and we lose the energy boost of the second hour.</li>\n\t<li>Gain the energy boost of the drink B in the third hour.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == energyDrinkA.length == energyDrinkB.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= energyDrinkA[i], energyDrinkB[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "hints": ["Can we solve it using dynamic programming?", "Define <code>dpA[i]</code> as the maximum energy boost if we consider only the first <code>i + 1</code> hours such that in the last hour, we drink the energy drink A.", "Similarly define <code>dpB[i]</code>.", "<code>dpA[i] = max(dpA[i - 1], dpB[i - 2]) + energyDrinkA[i]</code>", "Similarly, fill <code>dpB</code>.", "The answer is <code>max(dpA[n - 1], dpB[n - 1])</code>."], "exampleTestcases": "[1,3,1]\n[3,1,1]\n[4,1,1]\n[1,1,3]", "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    long long maxEnergyBoost(vector<int>& energyDrinkA, vector<int>& energyDrinkB) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxEnergyBoost(self, energyDrinkA, energyDrinkB):\n        \"\"\"\n        :type energyDrinkA: List[int]\n        :type energyDrinkB: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "long long maxEnergyBoost(int* energyDrinkA, int energyDrinkASize, int* energyDrinkB, int energyDrinkBSize) {\n    \n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public long MaxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} energyDrinkA\n * @param {number[]} energyDrinkB\n * @return {number}\n */\nvar maxEnergyBoost = function(energyDrinkA, energyDrinkB) {\n    \n};"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxEnergyBoost(energyDrinkA: number[], energyDrinkB: number[]): number {\n    \n};"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $energyDrinkA\n     * @param Integer[] $energyDrinkB\n     * @return Integer\n     */\n    function maxEnergyBoost($energyDrinkA, $energyDrinkB) {\n        \n    }\n}"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxEnergyBoost(_ energyDrinkA: [Int], _ energyDrinkB: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxEnergyBoost(energyDrinkA: IntArray, energyDrinkB: IntArray): Long {\n        \n    }\n}"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxEnergyBoost(List<int> energyDrinkA, List<int> energyDrinkB) {\n    \n  }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxEnergyBoost(energyDrinkA []int, energyDrinkB []int) int64 {\n    \n}"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} energy_drink_a\n# @param {Integer[]} energy_drink_b\n# @return {Integer}\ndef max_energy_boost(energy_drink_a, energy_drink_b)\n    \nend"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxEnergyBoost(energyDrinkA: Array[Int], energyDrinkB: Array[Int]): Long = {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_energy_boost(energy_drink_a: Vec<i32>, energy_drink_b: Vec<i32>) -> i64 {\n        \n    }\n}"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-energy-boost energyDrinkA energyDrinkB)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_energy_boost(EnergyDrinkA :: [integer()], EnergyDrinkB :: [integer()]) -> integer().\nmax_energy_boost(EnergyDrinkA, EnergyDrinkB) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_energy_boost(energy_drink_a :: [integer], energy_drink_b :: [integer]) :: integer\n  def max_energy_boost(energy_drink_a, energy_drink_b) do\n    \n  end\nend"}], "similarQuestionList": []}